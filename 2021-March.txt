From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Mar  1 20:13:37 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 1 Mar 2021 20:13:37 +0100
Subject: [Rd] Corrupt internal row names when creating a data.frame with
 `attributes<-`
In-Reply-To: <CABzLhzyfq9DR7iHLFGRscfXVkYwX-YDTFtB09peKH_CAtr7Srw@mail.gmail.com>
References: <CABzLhzyY3uMhRuGZmQvHmx9Ua-9a8Ne3sB_BBBV-_40kOECszA@mail.gmail.com>
 <CAJXgQP2zfZ6Z13-K8HsHsYwEfwzTaX71HEs0a1hioB=mcS1a=w@mail.gmail.com>
 <CAHqSRuSDwDHpWOrM=1bmv5ZM8T5LunMvppqfF+fYFgwLqDrkhw@mail.gmail.com>
 <CABzLhzyfq9DR7iHLFGRscfXVkYwX-YDTFtB09peKH_CAtr7Srw@mail.gmail.com>
Message-ID: <24637.15585.614246.762771@stat.math.ethz.ch>

>>>>> Davis Vaughan 
>>>>>     on Tue, 16 Feb 2021 14:50:33 -0500 writes:

    > This originally came up in this dplyr issue:
    > https://github.com/tidyverse/dplyr/issues/5745

    > Where `tibble::column_to_rownames()` failed because it
    > eventually checks `.row_names_info(.data) > 0L` to see if
    > there are automatic row names, which is in line with the
    > documentation that Kevin pointed out: "type = 1 the latter
    > with a negative sign for ?automatic? row names."

    > Davis


    > On Tue, Feb 16, 2021 at 2:29 PM Bill Dunlap
    > <williamwdunlap at gmail.com> wrote:

    >> as.matrix.data.frame does not take the absolute value of
    >> that number:

slightly changed and extended by MM {and as R script} :

------------------------------------------------------------------------

dPos <- structure(list(X=11:14, 1:4), class="data.frame", row.names=c(NA, +4L))
dNeg <- structure(list(X=11:14, 1:4), class="data.frame", row.names=c(NA, -4L))
##
all_rn_info <- function(x) lapply(setNames(,0:2),
                               function(tp) .row_names_info(x, type=tp))
str(all_rn_info(dPos))
## List of 3
##  $ 0: int [1:2] NA 4
##  $ 1: int 4
##  $ 2: int 4
str(all_rn_info(dNeg))
## List of 3
##  $ 0: int [1:2] NA -4
##  $ 1: int -4
##  $ 2: int 4
stopifnot(exprs = {
    identical(rownames(dPos), as.character(1:4))
    identical(rownames(dPos), rownames(dNeg))
    ## using as.matrix.data.frame() which differentiates, too :
    identical(rownames(as.matrix(dPos)), as.character(1:4))
    is.null  (rownames(as.matrix(dNeg)))
    ## BTW, also :
    identical(attributes(dPos), attributes(dNeg)) ## and hence also
    identical(dPos, dNeg) # another case where identical() is possibly too "tolerant"
})

## and for your interest, these *also* have both 'c(NA, +|n|)'  ==> give '+4'
.row_names_info(dInt1 <- structure(list(X=11:14, 1:4), class="data.frame", row.names=1:4))
.row_names_info(dInt2 <- local({ dd <- data.frame(X=11:14, 1:4, fix.empty.names = FALSE)
                                 attr(dd, "row.names") <- 1:4; dd }))
stopifnot(exprs = {
    identical(dInt1, dInt2)
    identical(all_rn_info(dInt1),
              all_rn_info(dInt2))
    identical(all_rn_info(dPos),
              all_rn_info(dInt1))
})

------------------------------------------------------------------------

There never was a conclusion here
(and the above is not the full context of the thread) .. 
but if I understand Bill and his example (extended above) correctly,
he's indirectly hinting toward that there is **no bug** here :

1) You can use structure() well to get "truly automatic" row
   names by setting the row.names correctly to  c(NA, -3L)
   {yes, which is  c(NA_integer_, -3L) }

2) There's a subtle difference between *two* kinds of automatic
   row names, on purpose, notably used in  as.matrix.data.frame():
   c(NA, +3)  are automatic row names, too, but which translate also to
   matrix row names hence are somewhat slightly less automatic ... 

   Note that you may see this documented by careful reading of
   the 'Note' in  help(row.names) *and* the 'Examples' section
   of that help page....

Last but not least:  We (R Core) did not document the nitty
gritty details here partly on purpose, because they should've
been subject to change, see e.g. the word "currently" in the
?row.names help page.

Notably with ALTREP objects, we could use "regular"  1:n
integer row names which would be ALTREP compacted automatically
for non-small 'n'.

Last but not least, the check in tibble that was mentioned in
this thread, should almost surely be fixed, if gives a problem
for these example, and I claim it has been *that* code that has
buggy rather than base R's one. 

Martin


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Mar  5 14:52:51 2021
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 5 Mar 2021 14:52:51 +0100
Subject: [Rd] encodeString converts to UTF-8 on Windows R-devel
Message-ID: <CABtg=KkwGA+V81-Z+1LBi69N7cYoRmpbmY4OWYunWh9GM98MOg@mail.gmail.com>

Which is not necessarily bad news. :)

I wonder if this was intended, because I did not find anything about
it in the news file. It also breaks a couple of R packages, e.g. desc,
probably more.

Is this intended?

Thanks!

This is R-devel from yesterday:

> x <- "\xfc"
> Encoding(x) <- "latin1"
> charToRaw(encodeString(x))
[1] c3 bc
>
> l10n_info()
$MBCS
[1] FALSE

$`UTF-8`
[1] FALSE

$`Latin-1`
[1] TRUE

$codepage
[1] 1252

$system.codepage
[1] 1252

and this is R-4.0.4:

> x <- "\xfc"
> Encoding(x) <- "latin1"
> charToRaw(encodeString(x))
[1] fc
>
> l10n_info()
$MBCS
[1] FALSE

$`UTF-8`
[1] FALSE

$`Latin-1`
[1] TRUE

$codepage
[1] 1252

$system.codepage
[1] 1252


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Sun Mar  7 11:12:48 2021
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Sun, 7 Mar 2021 11:12:48 +0100
Subject: [Rd] An argument promise containing bytecode?
Message-ID: <7DD4C301-1849-4BAF-9C46-3256F09F79C9@uzh.ch>

Dear all, 

I was playing around with some C code that inspects argument promises and I noticed that forwarded arguments sometimes contain bytecode in the PRCODE component. E.g. if I have a nested call like this:

  f <- function(x) x
  g <- function(x) f(x)

 g(1+1)

and inspect the value of ?x? in g?s frame from within f?s frame (basically calling findVar(parent.frame(), x)), I would see a LANGSXP the first time g()  is invoked, but BCODESXP on every subsequent time.  Using PREXPR gets me the original LANGSXP in any case. 

Now, this is curious behavior and I had a quick glance into R source code related to closure evaluation and argument matching, but I could not see anything that would generate bytecode for promises. Could someone with in-depth knowledge of R?s machinery explain what is going on? 

Thanks, 

Taras

From @|mon@urb@nek @end|ng |rom R-project@org  Mon Mar  8 03:51:00 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 8 Mar 2021 15:51:00 +1300
Subject: [Rd] An argument promise containing bytecode?
In-Reply-To: <7DD4C301-1849-4BAF-9C46-3256F09F79C9@uzh.ch>
References: <7DD4C301-1849-4BAF-9C46-3256F09F79C9@uzh.ch>
Message-ID: <E410AC79-00DF-456B-91F4-9AC0FFB135A6@R-project.org>

Taras,

I don't think this has anything to do with promises, rather it is called Just-In-Time (JIT) compilation - see ?enablleJIT in R, it is enabled by default, so the function will be compiled on second use.

Cheers,
Simon



> On Mar 7, 2021, at 11:12 PM, Taras Zakharko <taras.zakharko at uzh.ch> wrote:
> 
> Dear all, 
> 
> I was playing around with some C code that inspects argument promises and I noticed that forwarded arguments sometimes contain bytecode in the PRCODE component. E.g. if I have a nested call like this:
> 
>  f <- function(x) x
>  g <- function(x) f(x)
> 
> g(1+1)
> 
> and inspect the value of ?x? in g?s frame from within f?s frame (basically calling findVar(parent.frame(), x)), I would see a LANGSXP the first time g()  is invoked, but BCODESXP on every subsequent time.  Using PREXPR gets me the original LANGSXP in any case. 
> 
> Now, this is curious behavior and I had a quick glance into R source code related to closure evaluation and argument matching, but I could not see anything that would generate bytecode for promises. Could someone with in-depth knowledge of R?s machinery explain what is going on? 
> 
> Thanks, 
> 
> Taras
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Mon Mar  8 08:39:47 2021
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Mon, 8 Mar 2021 08:39:47 +0100
Subject: [Rd] An argument promise containing bytecode?
In-Reply-To: <E410AC79-00DF-456B-91F4-9AC0FFB135A6@R-project.org>
References: <7DD4C301-1849-4BAF-9C46-3256F09F79C9@uzh.ch>
 <E410AC79-00DF-456B-91F4-9AC0FFB135A6@R-project.org>
Message-ID: <FEE47ABD-D827-4E98-81E6-1CE762D55318@uzh.ch>

Thank you Simon! Such a trivial explanation? admittedly, I am a bit disappointed, I hoped there was more to the mystery :) 

Best, 

Taras

> On 8 Mar 2021, at 03:51, Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> Taras,
> 
> I don't think this has anything to do with promises, rather it is called Just-In-Time (JIT) compilation - see ?enablleJIT in R, it is enabled by default, so the function will be compiled on second use.
> 
> Cheers,
> Simon
> 
> 
> 
>> On Mar 7, 2021, at 11:12 PM, Taras Zakharko <taras.zakharko at uzh.ch> wrote:
>> 
>> Dear all, 
>> 
>> I was playing around with some C code that inspects argument promises and I noticed that forwarded arguments sometimes contain bytecode in the PRCODE component. E.g. if I have a nested call like this:
>> 
>> f <- function(x) x
>> g <- function(x) f(x)
>> 
>> g(1+1)
>> 
>> and inspect the value of ?x? in g?s frame from within f?s frame (basically calling findVar(parent.frame(), x)), I would see a LANGSXP the first time g()  is invoked, but BCODESXP on every subsequent time.  Using PREXPR gets me the original LANGSXP in any case. 
>> 
>> Now, this is curious behavior and I had a quick glance into R source code related to closure evaluation and argument matching, but I could not see anything that would generate bytecode for promises. Could someone with in-depth knowledge of R?s machinery explain what is going on? 
>> 
>> Thanks, 
>> 
>> Taras
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 


From edd @end|ng |rom deb|@n@org  Thu Mar 11 16:21:06 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 11 Mar 2021 09:21:06 -0600
Subject: [Rd] r-devel windows gcc10-UCRT machine questions
Message-ID: <24650.13666.624648.18446@rob.eddelbuettel.com>


I saw two (unchanged, long-existing) tests of main fail narrowly on this new
platform (relative to the tolerance argument set).

Attempting to change the tolerance if .Platform$OS.type == "windows" failed
(any idea why that test would evaluate to FALSE?).  Could it be that
capabilities("long.double") returns FALSE?

As always, it is a little challenging to keep our stacks in order without
access to the platforms added.  So with thanks in advance for any pointers.
And of course for working towards utf8 on windows.

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Mar 11 16:46:23 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 11 Mar 2021 16:46:23 +0100
Subject: [Rd] r-devel windows gcc10-UCRT machine questions
In-Reply-To: <24650.13666.624648.18446@rob.eddelbuettel.com>
References: <24650.13666.624648.18446@rob.eddelbuettel.com>
Message-ID: <40909adb-c61a-4e90-30fc-ba2337276501@gmail.com>

On 3/11/21 4:21 PM, Dirk Eddelbuettel wrote:
> I saw two (unchanged, long-existing) tests of main fail narrowly on this new
> platform (relative to the tolerance argument set).
Thanks for already looking at the results. I'd be happy to have a look 
if you point me to the example.
> Attempting to change the tolerance if .Platform$OS.type == "windows" failed
> (any idea why that test would evaluate to FALSE?).  Could it be that
> capabilities("long.double") returns FALSE?
.Platform$OS.type == "windows" and capabilities("long.double") are both 
true on the test system.
> As always, it is a little challenging to keep our stacks in order without
> access to the platforms added.  So with thanks in advance for any pointers.
> And of course for working towards utf8 on windows.

There is no checking service yet for this, but it should be simple to 
install things to Windows 10 following documentation at

https://svn.r-project.org/R-dev-web/trunk/WindowsBuilds/winutf8/ucrt3/howto.html

If you just want to install a CRAN version of your package and run some 
R code using it, you should only need to install R from the binary 
installer, and from it install your package (there are binary builds of 
packages).

I'd recommend to do this in a fresh VM. One can get a free VM (time 
limited) from Microsoft for testing and run it in say VirtualBox.

If doing this on a system with the normal R-devel installed, it is 
better to remove it first including the package library directory, and 
vice-versa, remove the UCRT-based R-devel before installing the normal 
one. Or use some other usual measures to make sure that each 
installation has its own package library directory.

Best
Tomas
>
> Dirk
>


From x|@oy@n@yu @end|ng |rom gm@||@com  Fri Mar 12 19:43:17 2021
From: x|@oy@n@yu @end|ng |rom gm@||@com (xiaoyan yu)
Date: Fri, 12 Mar 2021 13:43:17 -0500
Subject: [Rd] R extension memory leak detection question
Message-ID: <CANjVfJ2xXfinnpYgEoH_0dwvG=29FFMinuV+1cOueSrRMNyq9A@mail.gmail.com>

I am writing C++ program based on R extensions and also try to test the
program with google address sanitizer.

I thought if I don't protect the variable from the allocation API such as
Rf_allocVector, there will be a memory leak. However, the address sanitizer
didn't report it. Is my understanding correct? Or I will see the memory
leak only if I compile R source code with the address sanitizer.

 Please help!

Thanks,
Xiaoyan

	[[alternative HTML version deleted]]


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Fri Mar 12 23:59:12 2021
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Fri, 12 Mar 2021 22:59:12 +0000
Subject: [Rd] Potential improvements of ave?
Message-ID: <1615589952944.72119@ap-hm.fr>

Dear all,

I have two questions/suggestions about ave, but I am not sure if it's relevant for bug reports.



1) I have performance issues with ave in a case where I didn't expect it. The following code runs as expected:

set.seed(1)

df1 <- data.frame(id1 = sample(1:1e2, 5e2, TRUE),
                  id2 = sample(1:3, 5e2, TRUE),
                  id3 = sample(1:5, 5e2, TRUE),
                  val = sample(1:300, 5e2, TRUE))

df1$diff <- ave(df1$val,
                df1$id1,
                df1$id2,
                df1$id3,
                FUN = function(i) c(diff(i), 0))

head(df1[order(df1$id1,
               df1$id2,
               df1$id3), ])

But when expanding the data.frame (* 1e4), ave fails (Error: cannot allocate vector of size 1110.0 Gb):

df2 <- data.frame(id1 = sample(1:(1e2 * 1e4), 5e2 * 1e4, TRUE),
                  id2 = sample(1:3, 5e2 * 1e4, TRUE),
                  id3 = sample(1:(5 * 1e4), 5e2 * 1e4, TRUE),
                  val = sample(1:300, 5e2 * 1e4, TRUE))

df2$diff <- ave(df2$val,
                df2$id1,
                df2$id2,
                df2$id3,
                FUN = function(i) c(diff(i), 0))

This use case does not seem extreme to me (e.g. aggregate et al work perfectly on this data.frame).
So my question is: Is this expected/intended/reasonable? i.e. Does ave need to be optimized?



2) Gabor Grothendieck pointed out in 2011 that drop = TRUE is needed to avoid warnings in case of unused levels (https://stat.ethz.ch/pipermail/r-devel/2011-February/059947.html).
Is it relevant/possible to expose the drop argument explicitly?



Thanks,

Thomas

From bbo|ker @end|ng |rom gm@||@com  Sat Mar 13 01:50:09 2021
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Fri, 12 Mar 2021 19:50:09 -0500
Subject: [Rd] trivial typo in src/library/base/man/pmatch.Rd
Message-ID: <fa8d9c8f-3c32-f1c9-39b3-735b6ebeadeb@gmail.com>

ll. 17-18 of src/library/base/man/pmatch.Rd says "the value to be 
returned at non-matching or multiply partially matching positions".

   I think "multiply" should be "multiple" there?

   Can submit an actual patch if that would be more useful.


From pd@|gd @end|ng |rom gm@||@com  Sat Mar 13 09:44:38 2021
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sat, 13 Mar 2021 09:44:38 +0100
Subject: [Rd] trivial typo in src/library/base/man/pmatch.Rd
In-Reply-To: <fa8d9c8f-3c32-f1c9-39b3-735b6ebeadeb@gmail.com>
References: <fa8d9c8f-3c32-f1c9-39b3-735b6ebeadeb@gmail.com>
Message-ID: <C683881A-CB14-4FC0-B141-48246D52A755@gmail.com>

I suspect this is as meant, but it is "multiply", the adverb, not the verb. So it might be worth rephrasing, but "multiple" would be wrong (it is about cases where you at one position have several partial matches, not several positions where you have a partial match). "Non-uniquely partially matching", perhaps?

-pd  

> On 13 Mar 2021, at 01:50 , Ben Bolker <bbolker at gmail.com> wrote:
> 
> ll. 17-18 of src/library/base/man/pmatch.Rd says "the value to be returned at non-matching or multiply partially matching positions".
> 
>  I think "multiply" should be "multiple" there?
> 
>  Can submit an actual patch if that would be more useful.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Sat Mar 13 10:50:58 2021
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Sat, 13 Mar 2021 09:50:58 +0000
Subject: [Rd] reshape documentation
Message-ID: <1615629058522.60204@ap-hm.fr>

Dear list,

I have some questions/suggestions about reshape.

1) I think a good amount of the popularity of base::reshape alternative is due to the complexity of reshape documentation. It is quite hard (at least it is for me) to figure out what argument is needed for respectively "long to wide" and "wide to long", because reshapeWide and reshapeLong are documented together.
- Do you agree with this?
- Would you consider a proposal to modify the documentation?
- If yes, what approach do you suggest? e.g. split in two pages?
 
2) I do not think the documentation indicates that we can use varying argument to rename variables in reshapeWide.
- Is this worth documenting?
- Is the construct list(c()) really needed?

reshape(Indometh,
        v.names = "conc",
        idvar = "Subject",
        timevar = "time",
        direction = "wide",
        varying = list(c("conc_0.25hr",
                         "conc_0.5hr",
                         "conc.0.75hr",
                         "conc_1hr",
                         "conc_1.25hr",
                         "conc_2hr",
                         "conc_3hr",
                         "conc_4hr",
                         "conc_5hr",
                         "conc_6hr",
                         "conc_8hr")))

Thanks,

Thomas

From bbo|ker @end|ng |rom gm@||@com  Sat Mar 13 22:20:32 2021
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 13 Mar 2021 16:20:32 -0500
Subject: [Rd] trivial typo in src/library/base/man/pmatch.Rd
In-Reply-To: <C683881A-CB14-4FC0-B141-48246D52A755@gmail.com>
References: <fa8d9c8f-3c32-f1c9-39b3-735b6ebeadeb@gmail.com>
 <C683881A-CB14-4FC0-B141-48246D52A755@gmail.com>
Message-ID: <a9988134-4e0e-1b9a-9f08-8a1a48ba346c@gmail.com>

   You're right.  But I guess my confusion is proof that it can be 
confusing.

What about "The value to be returned for positions where there are 
either no partial matches or multiple partial matches" ?

  ("positions where the number of partial matches is not exactly 1" :-))


On 3/13/21 3:44 AM, peter dalgaard wrote:
> I suspect this is as meant, but it is "multiply", the adverb, not the verb. So it might be worth rephrasing, but "multiple" would be wrong (it is about cases where you at one position have several partial matches, not several positions where you have a partial match). "Non-uniquely partially matching", perhaps?
> 
> -pd
> 
>> On 13 Mar 2021, at 01:50 , Ben Bolker <bbolker at gmail.com> wrote:
>>
>> ll. 17-18 of src/library/base/man/pmatch.Rd says "the value to be returned at non-matching or multiply partially matching positions".
>>
>>   I think "multiply" should be "multiple" there?
>>
>>   Can submit an actual patch if that would be more useful.
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Sun Mar 14 00:05:43 2021
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Sat, 13 Mar 2021 23:05:43 +0000
Subject: [Rd] Potential improvements of ave?
In-Reply-To: <1615589952944.72119@ap-hm.fr>
References: <1615589952944.72119@ap-hm.fr>
Message-ID: <1615676743538.4084@ap-hm.fr>

The bottleneck of ave is the call to interaction (i.e. not the call to split/lapply).

Therefore, the following code runs as expected (but I may miss something...):

ave2 <- function (x, ..., FUN = mean)
{
    if(missing(...))
	x[] <- FUN(x)
    else {
	#g <- interaction(...)
	g <- paste0(...)
	split(x,g) <- lapply(split(x, g), FUN)
    }
    x
}

df2$diff <- ave2(df2$val,
                 df2$id1,
                 df2$id2,
                 df2$id3,
                 FUN = function(i) c(diff(i), 0))



Of course I can also simply solve my current issue with:

df2$id123 <- paste0(df2$id1,
                    df2$id2,
                    df2$id3)

df2$diff <- ave(df2$val,
                df2$id123,
                FUN = function(i) c(diff(i), 0))



In addition, ave2 also avoid warnings in case of unused levels (see point 2) in my previous message).
________________________________________
De : SOEIRO Thomas
Envoy? : vendredi 12 mars 2021 23:59
? : r-devel at r-project.org
Objet : Potential improvements of ave?

Dear all,

I have two questions/suggestions about ave, but I am not sure if it's relevant for bug reports.



1) I have performance issues with ave in a case where I didn't expect it. The following code runs as expected:

set.seed(1)

df1 <- data.frame(id1 = sample(1:1e2, 5e2, TRUE),
                  id2 = sample(1:3, 5e2, TRUE),
                  id3 = sample(1:5, 5e2, TRUE),
                  val = sample(1:300, 5e2, TRUE))

df1$diff <- ave(df1$val,
                df1$id1,
                df1$id2,
                df1$id3,
                FUN = function(i) c(diff(i), 0))

head(df1[order(df1$id1,
               df1$id2,
               df1$id3), ])

But when expanding the data.frame (* 1e4), ave fails (Error: cannot allocate vector of size 1110.0 Gb):

df2 <- data.frame(id1 = sample(1:(1e2 * 1e4), 5e2 * 1e4, TRUE),
                  id2 = sample(1:3, 5e2 * 1e4, TRUE),
                  id3 = sample(1:(5 * 1e4), 5e2 * 1e4, TRUE),
                  val = sample(1:300, 5e2 * 1e4, TRUE))

df2$diff <- ave(df2$val,
                df2$id1,
                df2$id2,
                df2$id3,
                FUN = function(i) c(diff(i), 0))

This use case does not seem extreme to me (e.g. aggregate et al work perfectly on this data.frame).
So my question is: Is this expected/intended/reasonable? i.e. Does ave need to be optimized?



2) Gabor Grothendieck pointed out in 2011 that drop = TRUE is needed to avoid warnings in case of unused levels (https://stat.ethz.ch/pipermail/r-devel/2011-February/059947.html).
Is it relevant/possible to expose the drop argument explicitly?



Thanks,

Thomas


From bbo|ker @end|ng |rom gm@||@com  Mon Mar 15 03:03:24 2021
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sun, 14 Mar 2021 22:03:24 -0400
Subject: [Rd] fragility of MASS::boxcox
Message-ID: <ec2a7047-6921-b31e-587c-5111359ee61e@gmail.com>

   MASS::boxcox fails if (1) the data is a data frame called 'attr' (2) 
user doesn't specify y=TRUE, qr=TRUE in the initial lm() fit.

   boxcox.lm() calls update(), which apparently finds the built-in 
'attr' object instead of the data frame in the global environment.

   Is there anything to be done about this (other than the old "don't 
use names for your objects that are the same as built-in R functions") ?

   cheers
    Ben Bolker


library(MASS)
m1 <- lm(height~age, data=Loblolly)
boxcox(m1)
attr <- Loblolly
m3 <- update(m1, data=attr, y=TRUE, qr=TRUE)  ## fine
m2 <- update(m1, data=attr)
boxcox(m2)

 > Error in model.frame.default(formula = height ~ age, data = attr, 
drop.unused.levels = TRUE) :
   'data' must be a data.frame, environment, or list

Error in model.frame.default(formula = height ~ age, data = attr, 
drop.unused.levels = TRUE) :
   'data' must be a data.frame, environment, or list
 > traceback()
12: stop("'data' must be a data.frame, environment, or list")
11: model.frame.default(formula = height ~ age, data = attr, 
drop.unused.levels = TRUE)
10: stats::model.frame(formula = height ~ age, data = attr, 
drop.unused.levels = TRUE)
9: eval(mf, parent.frame())
8: eval(mf, parent.frame())
7: lm(formula = height ~ age, data = attr, y = TRUE, qr = TRUE)
6: eval(call, parent.frame())
5: eval(call, parent.frame())
4: update.default(object, y = TRUE, qr = TRUE, ...)
3: update(object, y = TRUE, qr = TRUE, ...)
2: boxcox.lm(m2)
1: boxcox(m2)


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Mar 15 09:27:00 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 15 Mar 2021 09:27:00 +0100
Subject: [Rd] R extension memory leak detection question
In-Reply-To: <CANjVfJ2xXfinnpYgEoH_0dwvG=29FFMinuV+1cOueSrRMNyq9A@mail.gmail.com>
References: <CANjVfJ2xXfinnpYgEoH_0dwvG=29FFMinuV+1cOueSrRMNyq9A@mail.gmail.com>
Message-ID: <b0b80c39-2931-cd4e-ef6f-5cff9e9678c8@gmail.com>

On 3/12/21 7:43 PM, xiaoyan yu wrote:
> I am writing C++ program based on R extensions and also try to test the
> program with google address sanitizer.
>
> I thought if I don't protect the variable from the allocation API such as
> Rf_allocVector, there will be a memory leak. However, the address sanitizer
> didn't report it. Is my understanding correct? Or I will see the memory
> leak only if I compile R source code with the address sanitizer.

Yes, you should use special options for compilation and linking to use 
address sanitizer. See Writing R Extensions, section 4.3.3.

If you allocate an R object using Rf_allocVector(), but don't protect 
it, it means this object is available for the garbage collector to 
reclaim. So it is not a memory leak.

Memory leaks with a garbage collector are much less common than without, 
because if the program loses a pointer to some piece of memory, that 
piece will automatically be reclaimed (not leaked). Still, memory leaks 
are possible if the program forgets about a pointer to some piece of 
memory no longer needed, and keeps that pointer in say some global 
structure. Such memory leaks would not be found using address sanitizer.

Address sanitizer/Undefined behavior sanitizer can sometimes find errors 
caused by that the program forgets to protect an R object, but this is 
relatively rare, as they don't understand R heap specifically, so you 
cannot assume that if you create such example, the error will always be 
found.

Best
Tomas

>
>   Please help!
>
> Thanks,
> Xiaoyan
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @purd|e@@ @end|ng |rom gm@||@com  Mon Mar 15 10:22:21 2021
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Mon, 15 Mar 2021 22:22:21 +1300
Subject: [Rd] Potential improvements of ave?
In-Reply-To: <1615589952944.72119@ap-hm.fr>
References: <1615589952944.72119@ap-hm.fr>
Message-ID: <CAB8pepyagvOjnt=aWnOFfkgpgsUQX7MWKFNfLOtbJU6Z2cc+_Q@mail.gmail.com>

Hi Thomas,

These are some great suggestions.
But I can't help but feel there's a much bigger problem here.

Intuitively, the ave function could (or should) sort the data.
Then the indexing step becomes almost trivial, in terms of both time
and space complexity.
And the ave function is not the only example of where a problem
becomes much simpler, if the data is sorted.

Historically, I've never found base R functions user-friendly for
aggregation purposes, or for sorting.
(At least, not by comparison to SQL).

But that's not the main problem.
It would seem preferable to sort the data, only once.
(Rather than sorting it repeatedly, or not at all).

Perhaps, objects such as vectors and data.frame(s) could have a
boolean attribute, to indicate if they're sorted.
Or functions such as ave could have a sorted argument.
In either case, if true, the function assumes the data is sorted and
applies a more efficient algorithm.


B.


On Sat, Mar 13, 2021 at 1:07 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr> wrote:
>
> Dear all,
>
> I have two questions/suggestions about ave, but I am not sure if it's relevant for bug reports.
>
>
>
> 1) I have performance issues with ave in a case where I didn't expect it. The following code runs as expected:
>
> set.seed(1)
>
> df1 <- data.frame(id1 = sample(1:1e2, 5e2, TRUE),
>                   id2 = sample(1:3, 5e2, TRUE),
>                   id3 = sample(1:5, 5e2, TRUE),
>                   val = sample(1:300, 5e2, TRUE))
>
> df1$diff <- ave(df1$val,
>                 df1$id1,
>                 df1$id2,
>                 df1$id3,
>                 FUN = function(i) c(diff(i), 0))
>
> head(df1[order(df1$id1,
>                df1$id2,
>                df1$id3), ])
>
> But when expanding the data.frame (* 1e4), ave fails (Error: cannot allocate vector of size 1110.0 Gb):
>
> df2 <- data.frame(id1 = sample(1:(1e2 * 1e4), 5e2 * 1e4, TRUE),
>                   id2 = sample(1:3, 5e2 * 1e4, TRUE),
>                   id3 = sample(1:(5 * 1e4), 5e2 * 1e4, TRUE),
>                   val = sample(1:300, 5e2 * 1e4, TRUE))
>
> df2$diff <- ave(df2$val,
>                 df2$id1,
>                 df2$id2,
>                 df2$id3,
>                 FUN = function(i) c(diff(i), 0))
>
> This use case does not seem extreme to me (e.g. aggregate et al work perfectly on this data.frame).
> So my question is: Is this expected/intended/reasonable? i.e. Does ave need to be optimized?
>
>
>
> 2) Gabor Grothendieck pointed out in 2011 that drop = TRUE is needed to avoid warnings in case of unused levels (https://stat.ethz.ch/pipermail/r-devel/2011-February/059947.html).
> Is it relevant/possible to expose the drop argument explicitly?
>
>
>
> Thanks,
>
> Thomas
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From morg@n@em@||box @end|ng |rom gm@||@com  Mon Mar 15 17:25:22 2021
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Mon, 15 Mar 2021 16:25:22 +0000
Subject: [Rd] Faster sorting algorithm...
Message-ID: <CAL0QV_PnznuS8ssoEP77nLzOQhEn5X9MQrbf+ka2CFpDCPDMDQ@mail.gmail.com>

Hi,
I am not sure if this is the right mailing list, so apologies in advance if
it is not.

I found the following link/presentation:
https://www.r-project.org/dsc/2016/slides/ParallelSort.pdf

The implementation of fsort is interesting but incomplete (not sure why?)
and can be improved or made faster (at least 25%  I believe). I might be
wrong but there are maybe a couple of bugs as well.

My questions are:

1/ Is the R Core team interested in a faster sorting algo? (Multithread or
even single threaded)

2/ I see an issue with the license, which is MPL-2.0, and hence not
compatible with base R, Python and Julia. Is there an interest to change
the license of fsort so all 3 languages (and all the people using these
languages) can benefit from it? (Like suggested on the first page)

Please let me know if there is an interest to address the above points, I
would be happy to look into it (free of charge of course!).

Thank you
Best regards
Morgan

	[[alternative HTML version deleted]]


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Mon Mar 15 17:51:50 2021
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Mon, 15 Mar 2021 12:51:50 -0400
Subject: [Rd] Faster sorting algorithm...
In-Reply-To: <CAL0QV_PnznuS8ssoEP77nLzOQhEn5X9MQrbf+ka2CFpDCPDMDQ@mail.gmail.com>
References: <CAL0QV_PnznuS8ssoEP77nLzOQhEn5X9MQrbf+ka2CFpDCPDMDQ@mail.gmail.com>
Message-ID: <CAL6gwnJmJ71KwctQSoM+FxwwyUMfPVgWa23qncZscQf3WEF4Fw@mail.gmail.com>

Isn?t the default method now ?radix? which is the data.table sort, and
isn?t that already parallel using openmp where available?

Avi

On Mon, Mar 15, 2021 at 12:26 PM Morgan Morgan <morgan.emailbox at gmail.com>
wrote:

> Hi,
> I am not sure if this is the right mailing list, so apologies in advance if
> it is not.
>
> I found the following link/presentation:
> https://www.r-project.org/dsc/2016/slides/ParallelSort.pdf
>
> The implementation of fsort is interesting but incomplete (not sure why?)
> and can be improved or made faster (at least 25%  I believe). I might be
> wrong but there are maybe a couple of bugs as well.
>
> My questions are:
>
> 1/ Is the R Core team interested in a faster sorting algo? (Multithread or
> even single threaded)
>
> 2/ I see an issue with the license, which is MPL-2.0, and hence not
> compatible with base R, Python and Julia. Is there an interest to change
> the license of fsort so all 3 languages (and all the people using these
> languages) can benefit from it? (Like suggested on the first page)
>
> Please let me know if there is an interest to address the above points, I
> would be happy to look into it (free of charge of course!).
>
> Thank you
> Best regards
> Morgan
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From morg@n@em@||box @end|ng |rom gm@||@com  Mon Mar 15 18:04:27 2021
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Mon, 15 Mar 2021 17:04:27 +0000
Subject: [Rd] Faster sorting algorithm...
In-Reply-To: <CAL6gwnJmJ71KwctQSoM+FxwwyUMfPVgWa23qncZscQf3WEF4Fw@mail.gmail.com>
References: <CAL0QV_PnznuS8ssoEP77nLzOQhEn5X9MQrbf+ka2CFpDCPDMDQ@mail.gmail.com>
 <CAL6gwnJmJ71KwctQSoM+FxwwyUMfPVgWa23qncZscQf3WEF4Fw@mail.gmail.com>
Message-ID: <CAL0QV_NCrZzNcaTPcGN+EZRypQYXdE7KYU8KLv+CXKwTOtaoMQ@mail.gmail.com>

Default method for sort is not radix(especially for character vector). You
might want to read the documentation of sort.
For your second question, I invite you to look at the code of fsort. It is
implemented only for positive finite double, and default to
data.table:::forder ... when the types are different than positive double...
Please read the pdf link I sent, everything is explained in it.
Thank you
Morgan

On Mon, 15 Mar 2021, 16:52 Avraham Adler, <avraham.adler at gmail.com> wrote:

> Isn?t the default method now ?radix? which is the data.table sort, and
> isn?t that already parallel using openmp where available?
>
> Avi
>
> On Mon, Mar 15, 2021 at 12:26 PM Morgan Morgan <morgan.emailbox at gmail.com>
> wrote:
>
>> Hi,
>> I am not sure if this is the right mailing list, so apologies in advance
>> if
>> it is not.
>>
>> I found the following link/presentation:
>> https://www.r-project.org/dsc/2016/slides/ParallelSort.pdf
>>
>> The implementation of fsort is interesting but incomplete (not sure why?)
>> and can be improved or made faster (at least 25%  I believe). I might be
>> wrong but there are maybe a couple of bugs as well.
>>
>> My questions are:
>>
>> 1/ Is the R Core team interested in a faster sorting algo? (Multithread or
>> even single threaded)
>>
>> 2/ I see an issue with the license, which is MPL-2.0, and hence not
>> compatible with base R, Python and Julia. Is there an interest to change
>> the license of fsort so all 3 languages (and all the people using these
>> languages) can benefit from it? (Like suggested on the first page)
>>
>> Please let me know if there is an interest to address the above points, I
>> would be happy to look into it (free of charge of course!).
>>
>> Thank you
>> Best regards
>> Morgan
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> --
> Sent from Gmail Mobile
>

	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Mon Mar 15 19:19:42 2021
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 15 Mar 2021 13:19:42 -0500
Subject: [Rd] inheritance and attach
Message-ID: <9b53cf$fjjkqe@ironport10.mayo.edu>

This change in R-devel just bit me.?? Under the newest release, if I attach() another 
.RData directory, the methods are not detected.
Was it intentional??? Running in Linux.?? Here is a script of an example that works fine 
under 3.6.2. but fails in R-devel.

tmt% mkdir temp1
tmt% cd temp1
tmt% R
 ?# define a silly method, just for testing

charlie <- function(x, ...)
 ??? UseMethod("charlie")


charlie.default <- function(x, ...) {
 ??? cat("default method ", x, "\n")
 ??? x +2
}

charlie.character <- function(x, ...) {
 ??? cat("character method ", x, "\n")
 ??? as.character(as.numeric(x) + 2)
}

 > quit("yes")

tmt% cd ..
tmt% R
 > attach("temp1/.RData")
 > charlie( 4)
Error in UseMethod("charlie") :
 ? no applicable method for 'charlie' applied to an object of class "c('double', 'numeric')"

----------------------------------------

The use case was my local test environment for the survival package.? I can work around it.

-- 
Terry M Therneau, PhD
Department of Health Science Research
Mayo Clinic
therneau at mayo.edu

"TERR-ree THUR-noh"


	[[alternative HTML version deleted]]


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Mon Mar 15 19:19:28 2021
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Mon, 15 Mar 2021 18:19:28 +0000
Subject: [Rd] Potential improvements of ave?
In-Reply-To: <CAB8pepyagvOjnt=aWnOFfkgpgsUQX7MWKFNfLOtbJU6Z2cc+_Q@mail.gmail.com>
References: <1615589952944.72119@ap-hm.fr>,
 <CAB8pepyagvOjnt=aWnOFfkgpgsUQX7MWKFNfLOtbJU6Z2cc+_Q@mail.gmail.com>
Message-ID: <1615832368693.69981@ap-hm.fr>

Hi Abby,

Thank you for your positive feedback.

I agree for your general comment about sorting.

For ave specifically, ordering may not help because the output must maintain the order of the input (as ave returns only x and not the entiere data.frame).

Thanks,

Thomas
________________________________________
De : Abby Spurdle <spurdle.a at gmail.com>
Envoy? : lundi 15 mars 2021 10:22
? : SOEIRO Thomas
Cc : r-devel at r-project.org
Objet : Re: [Rd] Potential improvements of ave?

EMAIL EXTERNE - TRAITER AVEC PR?CAUTION LIENS ET FICHIERS

Hi Thomas,

These are some great suggestions.
But I can't help but feel there's a much bigger problem here.

Intuitively, the ave function could (or should) sort the data.
Then the indexing step becomes almost trivial, in terms of both time
and space complexity.
And the ave function is not the only example of where a problem
becomes much simpler, if the data is sorted.

Historically, I've never found base R functions user-friendly for
aggregation purposes, or for sorting.
(At least, not by comparison to SQL).

But that's not the main problem.
It would seem preferable to sort the data, only once.
(Rather than sorting it repeatedly, or not at all).

Perhaps, objects such as vectors and data.frame(s) could have a
boolean attribute, to indicate if they're sorted.
Or functions such as ave could have a sorted argument.
In either case, if true, the function assumes the data is sorted and
applies a more efficient algorithm.


B.


On Sat, Mar 13, 2021 at 1:07 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr> wrote:
>
> Dear all,
>
> I have two questions/suggestions about ave, but I am not sure if it's relevant for bug reports.
>
>
>
> 1) I have performance issues with ave in a case where I didn't expect it. The following code runs as expected:
>
> set.seed(1)
>
> df1 <- data.frame(id1 = sample(1:1e2, 5e2, TRUE),
>                   id2 = sample(1:3, 5e2, TRUE),
>                   id3 = sample(1:5, 5e2, TRUE),
>                   val = sample(1:300, 5e2, TRUE))
>
> df1$diff <- ave(df1$val,
>                 df1$id1,
>                 df1$id2,
>                 df1$id3,
>                 FUN = function(i) c(diff(i), 0))
>
> head(df1[order(df1$id1,
>                df1$id2,
>                df1$id3), ])
>
> But when expanding the data.frame (* 1e4), ave fails (Error: cannot allocate vector of size 1110.0 Gb):
>
> df2 <- data.frame(id1 = sample(1:(1e2 * 1e4), 5e2 * 1e4, TRUE),
>                   id2 = sample(1:3, 5e2 * 1e4, TRUE),
>                   id3 = sample(1:(5 * 1e4), 5e2 * 1e4, TRUE),
>                   val = sample(1:300, 5e2 * 1e4, TRUE))
>
> df2$diff <- ave(df2$val,
>                 df2$id1,
>                 df2$id2,
>                 df2$id3,
>                 FUN = function(i) c(diff(i), 0))
>
> This use case does not seem extreme to me (e.g. aggregate et al work perfectly on this data.frame).
> So my question is: Is this expected/intended/reasonable? i.e. Does ave need to be optimized?
>
>
>
> 2) Gabor Grothendieck pointed out in 2011 that drop = TRUE is needed to avoid warnings in case of unused levels (https://urldefense.com/v3/__https://stat.ethz.ch/pipermail/r-devel/2011-February/059947.html__;!!JQ5agg!J2AUFbQr31F2c6LUpTnyc5TX2Kh1bJ-VqhMND1c0N5axWO_tQl0pCJhtucPfjU7NXrBO$ ).
> Is it relevant/possible to expose the drop argument explicitly?
>
>
>
> Thanks,
>
> Thomas
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!JQ5agg!J2AUFbQr31F2c6LUpTnyc5TX2Kh1bJ-VqhMND1c0N5axWO_tQl0pCJhtucPfjUzdLFM1$


From @|mon@urb@nek @end|ng |rom R-project@org  Mon Mar 15 22:45:31 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 16 Mar 2021 10:45:31 +1300
Subject: [Rd] inheritance and attach
In-Reply-To: <9b53cf$fjjkqe@ironport10.mayo.edu>
References: <9b53cf$fjjkqe@ironport10.mayo.edu>
Message-ID: <31A73424-12BB-4262-A57A-5A7A604E0526@R-project.org>

Terry,

NEWS: CHANGES IN R 4.0.0 NEW FEATURES

     \item S3 method lookup now by default skips the elements of the
      search path between the global and base environments.

If you use attach(), S3 methods are hence no longer dispatched to (because it is between global and base) unless you register them using .S3method(). Without registration you have to load them into the global env for them to work since this is now the only environment that doesn't require registration.

Cheers,
Simon



> On Mar 16, 2021, at 7:19 AM, Therneau, Terry M., Ph.D. via R-devel <r-devel at r-project.org> wrote:
> 
> This change in R-devel just bit me.   Under the newest release, if I attach() another 
> .RData directory, the methods are not detected.
> Was it intentional?   Running in Linux.   Here is a script of an example that works fine 
> under 3.6.2. but fails in R-devel.
> 
> tmt% mkdir temp1
> tmt% cd temp1
> tmt% R
>  # define a silly method, just for testing
> 
> charlie <- function(x, ...)
>     UseMethod("charlie")
> 
> 
> charlie.default <- function(x, ...) {
>     cat("default method ", x, "\n")
>     x +2
> }
> 
> charlie.character <- function(x, ...) {
>     cat("character method ", x, "\n")
>     as.character(as.numeric(x) + 2)
> }
> 
>> quit("yes")
> 
> tmt% cd ..
> tmt% R
>> attach("temp1/.RData")
>> charlie( 4)
> Error in UseMethod("charlie") :
>   no applicable method for 'charlie' applied to an object of class "c('double', 'numeric')"
> 
> ----------------------------------------
> 
> The use case was my local test environment for the survival package.  I can work around it.
> 
> -- 
> Terry M Therneau, PhD
> Department of Health Science Research
> Mayo Clinic
> therneau at mayo.edu
> 
> "TERR-ree THUR-noh"
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From therne@u @end|ng |rom m@yo@edu  Mon Mar 15 22:56:00 2021
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 15 Mar 2021 16:56:00 -0500
Subject: [Rd] [EXTERNAL] Re:  inheritance and attach
In-Reply-To: <31A73424-12BB-4262-A57A-5A7A604E0526@R-project.org>
References: <9b53cf$fjjkqe@ironport10.mayo.edu>
 <31A73424-12BB-4262-A57A-5A7A604E0526@R-project.org>
Message-ID: <9b53cf$fjlm3f@ironport10.mayo.edu>

Thanks Simon.? I missed that.?? It is a sensible change.
I had trouble because I had just changed computing environments this weekend (a forced 
change due to an institutional directive), and this caught me right after that so I spent 
some time chasing my tail.? Murphy's law...

Terry T.


On 3/15/21 4:45 PM, Simon Urbanek wrote:
> Terry,
>
> NEWS: CHANGES IN R 4.0.0 NEW FEATURES
>
>       \item S3 method lookup now by default skips the elements of the
>        search path between the global and base environments.
>
> If you use attach(), S3 methods are hence no longer dispatched to (because it is between global and base) unless you register them using .S3method(). Without registration you have to load them into the global env for them to work since this is now the only environment that doesn't require registration.
>
> Cheers,
> Simon
>
>
>
>> On Mar 16, 2021, at 7:19 AM, Therneau, Terry M., Ph.D. via R-devel <r-devel at r-project.org> wrote:
>>
>> This change in R-devel just bit me.   Under the newest release, if I attach() another
>> .RData directory, the methods are not detected.
>> Was it intentional?   Running in Linux.   Here is a script of an example that works fine
>> under 3.6.2. but fails in R-devel.
>>
>> tmt% mkdir temp1
>> tmt% cd temp1
>> tmt% R
>>   # define a silly method, just for testing
>>
>> charlie <- function(x, ...)
>>      UseMethod("charlie")
>>
>>
>> charlie.default <- function(x, ...) {
>>      cat("default method ", x, "\n")
>>      x +2
>> }
>>
>> charlie.character <- function(x, ...) {
>>      cat("character method ", x, "\n")
>>      as.character(as.numeric(x) + 2)
>> }
>>
>>> quit("yes")
>> tmt% cd ..
>> tmt% R
>>> attach("temp1/.RData")
>>> charlie( 4)
>> Error in UseMethod("charlie") :
>>    no applicable method for 'charlie' applied to an object of class "c('double', 'numeric')"
>>
>> ----------------------------------------
>>
>> The use case was my local test environment for the survival package.  I can work around it.
>>
>> -- 
>> Terry M Therneau, PhD
>> Department of Health Science Research
>> Mayo Clinic
>> therneau at mayo.edu
>>
>> "TERR-ree THUR-noh"
>>
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Mon Mar 15 23:08:44 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 15 Mar 2021 15:08:44 -0700
Subject: [Rd] Potential improvements of ave?
In-Reply-To: <1615832368693.69981@ap-hm.fr>
References: <1615589952944.72119@ap-hm.fr>
 <CAB8pepyagvOjnt=aWnOFfkgpgsUQX7MWKFNfLOtbJU6Z2cc+_Q@mail.gmail.com>
 <1615832368693.69981@ap-hm.fr>
Message-ID: <CAD4oTHF_G8azN2TO7bC3YryPLLAqiTOrzNJB6_ZcK3ma7iPHmA@mail.gmail.com>

Abby,

Vectors do have an internal mechanism for knowing that they are sorted via
ALTREP (it was one of 2 core motivating features for 'smart vectors' the
other being knowledge about presence of NAs).

Currently I don't think we expose it at the R level, though it is part of
the official C API. I don't know of any plans for this to change, but I
suppose it could. Plus for functions in R itself, we could even use it
without exposing it more widely. A number of functions, including sort
itself, already do this in fact, but more could. I'd be interested in
hearing which functions you think would particularly benefit from this.

~G

On Mon, Mar 15, 2021 at 12:01 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr>
wrote:

> Hi Abby,
>
> Thank you for your positive feedback.
>
> I agree for your general comment about sorting.
>
> For ave specifically, ordering may not help because the output must
> maintain the order of the input (as ave returns only x and not the entiere
> data.frame).
>
> Thanks,
>
> Thomas
> ________________________________________
> De : Abby Spurdle <spurdle.a at gmail.com>
> Envoy? : lundi 15 mars 2021 10:22
> ? : SOEIRO Thomas
> Cc : r-devel at r-project.org
> Objet : Re: [Rd] Potential improvements of ave?
>
> EMAIL EXTERNE - TRAITER AVEC PR?CAUTION LIENS ET FICHIERS
>
> Hi Thomas,
>
> These are some great suggestions.
> But I can't help but feel there's a much bigger problem here.
>
> Intuitively, the ave function could (or should) sort the data.
> Then the indexing step becomes almost trivial, in terms of both time
> and space complexity.
> And the ave function is not the only example of where a problem
> becomes much simpler, if the data is sorted.
>
> Historically, I've never found base R functions user-friendly for
> aggregation purposes, or for sorting.
> (At least, not by comparison to SQL).
>
> But that's not the main problem.
> It would seem preferable to sort the data, only once.
> (Rather than sorting it repeatedly, or not at all).
>
> Perhaps, objects such as vectors and data.frame(s) could have a
> boolean attribute, to indicate if they're sorted.
> Or functions such as ave could have a sorted argument.
> In either case, if true, the function assumes the data is sorted and
> applies a more efficient algorithm.
>
>
> B.
>
>
> On Sat, Mar 13, 2021 at 1:07 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr>
> wrote:
> >
> > Dear all,
> >
> > I have two questions/suggestions about ave, but I am not sure if it's
> relevant for bug reports.
> >
> >
> >
> > 1) I have performance issues with ave in a case where I didn't expect
> it. The following code runs as expected:
> >
> > set.seed(1)
> >
> > df1 <- data.frame(id1 = sample(1:1e2, 5e2, TRUE),
> >                   id2 = sample(1:3, 5e2, TRUE),
> >                   id3 = sample(1:5, 5e2, TRUE),
> >                   val = sample(1:300, 5e2, TRUE))
> >
> > df1$diff <- ave(df1$val,
> >                 df1$id1,
> >                 df1$id2,
> >                 df1$id3,
> >                 FUN = function(i) c(diff(i), 0))
> >
> > head(df1[order(df1$id1,
> >                df1$id2,
> >                df1$id3), ])
> >
> > But when expanding the data.frame (* 1e4), ave fails (Error: cannot
> allocate vector of size 1110.0 Gb):
> >
> > df2 <- data.frame(id1 = sample(1:(1e2 * 1e4), 5e2 * 1e4, TRUE),
> >                   id2 = sample(1:3, 5e2 * 1e4, TRUE),
> >                   id3 = sample(1:(5 * 1e4), 5e2 * 1e4, TRUE),
> >                   val = sample(1:300, 5e2 * 1e4, TRUE))
> >
> > df2$diff <- ave(df2$val,
> >                 df2$id1,
> >                 df2$id2,
> >                 df2$id3,
> >                 FUN = function(i) c(diff(i), 0))
> >
> > This use case does not seem extreme to me (e.g. aggregate et al work
> perfectly on this data.frame).
> > So my question is: Is this expected/intended/reasonable? i.e. Does ave
> need to be optimized?
> >
> >
> >
> > 2) Gabor Grothendieck pointed out in 2011 that drop = TRUE is needed to
> avoid warnings in case of unused levels (
> https://urldefense.com/v3/__https://stat.ethz.ch/pipermail/r-devel/2011-February/059947.html__;!!JQ5agg!J2AUFbQr31F2c6LUpTnyc5TX2Kh1bJ-VqhMND1c0N5axWO_tQl0pCJhtucPfjU7NXrBO$
> ).
> > Is it relevant/possible to expose the drop argument explicitly?
> >
> >
> >
> > Thanks,
> >
> > Thomas
> > ______________________________________________
> > R-devel at r-project.org mailing list
> >
> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!JQ5agg!J2AUFbQr31F2c6LUpTnyc5TX2Kh1bJ-VqhMND1c0N5axWO_tQl0pCJhtucPfjUzdLFM1$
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Tue Mar 16 02:44:14 2021
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Tue, 16 Mar 2021 14:44:14 +1300
Subject: [Rd] Faster sorting algorithm...
In-Reply-To: <CAL0QV_PnznuS8ssoEP77nLzOQhEn5X9MQrbf+ka2CFpDCPDMDQ@mail.gmail.com>
References: <CAL0QV_PnznuS8ssoEP77nLzOQhEn5X9MQrbf+ka2CFpDCPDMDQ@mail.gmail.com>
Message-ID: <CAB8pepyMX9Bt3-QgE68AzeXMWt7CS64W=Vn1fVXt=gRfxrkGXg@mail.gmail.com>

In principle, I agree that faster ranking/sorting algorithms are
important, and should be a priority.
But I can't help but feel that the paper focuses on textbook-oriented problems.

Given that in real world problems, there's almost always some form of
prior knowledge:
Wouldn't it be better, from a management perspective, to focus on
sorting algorithms, that incorporate that prior knowledge?

I'm not sure whether that's an R-devel discussion, or for another forum...


On Tue, Mar 16, 2021 at 5:25 AM Morgan Morgan <morgan.emailbox at gmail.com> wrote:
>
> Hi,
> I am not sure if this is the right mailing list, so apologies in advance if
> it is not.
>
> I found the following link/presentation:
> https://www.r-project.org/dsc/2016/slides/ParallelSort.pdf
>
> The implementation of fsort is interesting but incomplete (not sure why?)
> and can be improved or made faster (at least 25%  I believe). I might be
> wrong but there are maybe a couple of bugs as well.
>
> My questions are:
>
> 1/ Is the R Core team interested in a faster sorting algo? (Multithread or
> even single threaded)
>
> 2/ I see an issue with the license, which is MPL-2.0, and hence not
> compatible with base R, Python and Julia. Is there an interest to change
> the license of fsort so all 3 languages (and all the people using these
> languages) can benefit from it? (Like suggested on the first page)
>
> Please let me know if there is an interest to address the above points, I
> would be happy to look into it (free of charge of course!).
>
> Thank you
> Best regards
> Morgan
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Mar 16 10:50:10 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 16 Mar 2021 10:50:10 +0100
Subject: [Rd] Potential improvements of ave?
In-Reply-To: <CAD4oTHF_G8azN2TO7bC3YryPLLAqiTOrzNJB6_ZcK3ma7iPHmA@mail.gmail.com>
References: <1615589952944.72119@ap-hm.fr>
 <CAB8pepyagvOjnt=aWnOFfkgpgsUQX7MWKFNfLOtbJU6Z2cc+_Q@mail.gmail.com>
 <1615832368693.69981@ap-hm.fr>
 <CAD4oTHF_G8azN2TO7bC3YryPLLAqiTOrzNJB6_ZcK3ma7iPHmA@mail.gmail.com>
Message-ID: <24656.32594.940792.517034@stat.math.ethz.ch>

>>>>> Gabriel Becker 
>>>>>     on Mon, 15 Mar 2021 15:08:44 -0700 writes:

    > Abby,
    > Vectors do have an internal mechanism for knowing that they are sorted via
    > ALTREP (it was one of 2 core motivating features for 'smart vectors' the
    > other being knowledge about presence of NAs).

    > Currently I don't think we expose it at the R level, though it is part of
    > the official C API. I don't know of any plans for this to change, but I
    > suppose it could. Plus for functions in R itself, we could even use it
    > without exposing it more widely. A number of functions, including sort
    > itself, already do this in fact, but more could. I'd be interested in
    > hearing which functions you think would particularly benefit from this.

Thank you Gabe.

    > ~G

I vaguely remember (from Luke's docs/presentation on ALTREP)
that there are some "missing parts" here.
One of them the not-existing R level functionality, another may be
the C code below R's  is.unsorted()  ... maybe  is.unsorted()
could get a new argument and or be re-written, moving  the NA
handling also to C and have that happen *after* the C code looks
if it's an ALTREP object and if that "knows it's sorted".

Martin


    > On Mon, Mar 15, 2021 at 12:01 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr>
    > wrote:

    >> Hi Abby,
    >> 
    >> Thank you for your positive feedback.
    >> 
    >> I agree for your general comment about sorting.
    >> 
    >> For ave specifically, ordering may not help because the output must
    >> maintain the order of the input (as ave returns only x and not the entiere
    >> data.frame).
    >> 
    >> Thanks,
    >> 
    >> Thomas
    >> ________________________________________
    >> De : Abby Spurdle <spurdle.a at gmail.com>
    >> Envoy? : lundi 15 mars 2021 10:22
    >> ? : SOEIRO Thomas
    >> Cc : r-devel at r-project.org
    >> Objet : Re: [Rd] Potential improvements of ave?
    >> 
    >> EMAIL EXTERNE - TRAITER AVEC PR?CAUTION LIENS ET FICHIERS
    >> 
    >> Hi Thomas,
    >> 
    >> These are some great suggestions.
    >> But I can't help but feel there's a much bigger problem here.
    >> 
    >> Intuitively, the ave function could (or should) sort the data.
    >> Then the indexing step becomes almost trivial, in terms of both time
    >> and space complexity.
    >> And the ave function is not the only example of where a problem
    >> becomes much simpler, if the data is sorted.
    >> 
    >> Historically, I've never found base R functions user-friendly for
    >> aggregation purposes, or for sorting.
    >> (At least, not by comparison to SQL).
    >> 
    >> But that's not the main problem.
    >> It would seem preferable to sort the data, only once.
    >> (Rather than sorting it repeatedly, or not at all).
    >> 
    >> Perhaps, objects such as vectors and data.frame(s) could have a
    >> boolean attribute, to indicate if they're sorted.
    >> Or functions such as ave could have a sorted argument.
    >> In either case, if true, the function assumes the data is sorted and
    >> applies a more efficient algorithm.
    >> 
    >> 
    >> B.
    >> 
    >> 
    >> On Sat, Mar 13, 2021 at 1:07 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr>
    >> wrote:
    >> >
    >> > Dear all,
    >> >
    >> > I have two questions/suggestions about ave, but I am not sure if it's
    >> relevant for bug reports.
    >> >
    >> >
    >> >
    >> > 1) I have performance issues with ave in a case where I didn't expect
    >> it. The following code runs as expected:
    >> >
    >> > set.seed(1)
    >> >
    >> > df1 <- data.frame(id1 = sample(1:1e2, 5e2, TRUE),
    >> >                   id2 = sample(1:3, 5e2, TRUE),
    >> >                   id3 = sample(1:5, 5e2, TRUE),
    >> >                   val = sample(1:300, 5e2, TRUE))
    >> >
    >> > df1$diff <- ave(df1$val,
    >> >                 df1$id1,
    >> >                 df1$id2,
    >> >                 df1$id3,
    >> >                 FUN = function(i) c(diff(i), 0))
    >> >
    >> > head(df1[order(df1$id1,
    >> >                df1$id2,
    >> >                df1$id3), ])
    >> >
    >> > But when expanding the data.frame (* 1e4), ave fails (Error: cannot
    >> allocate vector of size 1110.0 Gb):
    >> >
    >> > df2 <- data.frame(id1 = sample(1:(1e2 * 1e4), 5e2 * 1e4, TRUE),
    >> >                   id2 = sample(1:3, 5e2 * 1e4, TRUE),
    >> >                   id3 = sample(1:(5 * 1e4), 5e2 * 1e4, TRUE),
    >> >                   val = sample(1:300, 5e2 * 1e4, TRUE))
    >> >
    >> > df2$diff <- ave(df2$val,
    >> >                 df2$id1,
    >> >                 df2$id2,
    >> >                 df2$id3,
    >> >                 FUN = function(i) c(diff(i), 0))
    >> >
    >> > This use case does not seem extreme to me (e.g. aggregate et al work
    >> perfectly on this data.frame).
    >> > So my question is: Is this expected/intended/reasonable? i.e. Does ave
    >> need to be optimized?
    >> >
    >> >
    >> >
    >> > 2) Gabor Grothendieck pointed out in 2011 that drop = TRUE is needed to
    >> avoid warnings in case of unused levels (
    >> https://urldefense.com/v3/__https://stat.ethz.ch/pipermail/r-devel/2011-February/059947.html__;!!JQ5agg!J2AUFbQr31F2c6LUpTnyc5TX2Kh1bJ-VqhMND1c0N5axWO_tQl0pCJhtucPfjU7NXrBO$
    >> ).
    >> > Is it relevant/possible to expose the drop argument explicitly?
    >> >
    >> >
    >> >
    >> > Thanks,
    >> >
    >> > Thomas
    >> > ______________________________________________
    >> > R-devel at r-project.org mailing list
    >> >
    >> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!JQ5agg!J2AUFbQr31F2c6LUpTnyc5TX2Kh1bJ-VqhMND1c0N5axWO_tQl0pCJhtucPfjUzdLFM1$
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 

    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From edd @end|ng |rom deb|@n@org  Tue Mar 16 14:39:38 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 16 Mar 2021 08:39:38 -0500
Subject: [Rd] Potential improvements of ave?
In-Reply-To: <24656.32594.940792.517034@stat.math.ethz.ch>
References: <1615589952944.72119@ap-hm.fr>
 <CAB8pepyagvOjnt=aWnOFfkgpgsUQX7MWKFNfLOtbJU6Z2cc+_Q@mail.gmail.com>
 <1615832368693.69981@ap-hm.fr>
 <CAD4oTHF_G8azN2TO7bC3YryPLLAqiTOrzNJB6_ZcK3ma7iPHmA@mail.gmail.com>
 <24656.32594.940792.517034@stat.math.ethz.ch>
Message-ID: <24656.46362.985387.304095@rob.eddelbuettel.com>


On 16 March 2021 at 10:50, Martin Maechler wrote:
| I vaguely remember (from Luke's docs/presentation on ALTREP)
| that there are some "missing parts" here.
| One of them the not-existing R level functionality, another may be
| the C code below R's  is.unsorted()  ... maybe  is.unsorted()
| could get a new argument and or be re-written, moving  the NA
| handling also to C and have that happen *after* the C code looks
| if it's an ALTREP object and if that "knows it's sorted".

Somewhat related: I recently tried to demonstrate that, say, a 1e2 and a 1e6
vector each with one added NA should have equal "O(1)" time under anyNA(),
yet apparently they do not---so the other magic bit (about knowing NAness)
may not propagate. (That was with R 4.0.4.) I may also have missed a crucial
bit about enabling ALTREPness here, yet the "gist of it" always was (AFAIK)
that it is supposedly seamless.

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Mar 16 18:32:28 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 16 Mar 2021 20:32:28 +0300
Subject: [Rd] R.sh and argument escaping
Message-ID: <20210316203228.1eb7a1a6@arachnoid>

Hello R-devel!

The following sequence of commands results in an error message on a
POSIX system:

tab="`echo -ne "\t"`"
LC_ALL=C Rscript -e " $tab 1"
# ARGUMENT '~+~1' __ignored__

Tabs can sneak into the -e argument from indented multi-line arguments
in shell scripts:

Rscript -e '
	foo()
	bar()
	...
'

R.sh does a good job of escaping spaces and newlines, but since shells
are also supposed to split on a tab [*], it's a good idea to escape
tabs too:

Index: src/scripts/R.sh.in
===================================================================
--- src/scripts/R.sh.in	(revision 80090)
+++ src/scripts/R.sh.in	(working copy)
@@ -192,7 +192,7 @@
     -e)
       if test -n "`echo ${2} | ${SED} 's/^-.*//'`"; then
 	a=`(echo "${2}" && echo) | ${SED} -e 's/ /~+~/g' | \
-          ${SED} -e :a -e N -e '$!ba' -e 's/\n/~n~/g' -e 's/~n~$//g'`
+          ${SED} -e :a -e N -e '$!ba' -e 's/\n/~n~/g' -e 's/~n~$//g' -e 's/\t/~t~/g'`
         shift
       else
 	error "option '${1}' requires a non-empty argument"
Index: src/unix/system.c
===================================================================
--- src/unix/system.c	(revision 80090)
+++ src/unix/system.c	(working copy)
@@ -170,6 +170,9 @@
 	} else if(*q == '~' && *(q+1) == 'n' && *(q+2) == '~') {
 	    q += 2;
 	    *p++ = '\n';
+	} else if(*q == '~' && *(q+1) == 't' && *(q+2) == '~') {
+	    q += 2;
+	    *p++ = '\t';
 	} else *p++ = *q;
     }
     return p;

I have verified that with the patch above, Rscript -e " $tab 1" no
longer fails.

While we're at it, perhaps it could be a good idea to replace the magic
number 10000 with a the size of the character array above it:

Index: src/unix/system.c
===================================================================
--- src/unix/system.c	(revision 80090)
+++ src/unix/system.c	(working copy)
@@ -429,7 +432,7 @@
 	    } else if(!strcmp(*av, "-e")) {
 		ac--; av++;
 		Rp->R_Interactive = FALSE;
-		if(strlen(cmdlines) + strlen(*av) + 2 <= 10000) {
+		if(strlen(cmdlines) + strlen(*av) + 2 <= sizeof(cmdlines)) {
 		    char *p = cmdlines+strlen(cmdlines);
 		    p = unescape_arg(p, *av);
 		    *p++ = '\n'; *p = '\0';

It might also be a good idea to make it possible to represent the escape
sequences themselves in the unescaped stream in a fully reversible
transformation ('~' <-> '~~~', ' ' <-> '~+~', '\n' <-> '~n~',
'\t' <-> '~t~'), making it possible to round-trip character sequences
like '~+~' through the escaping and unescaping process (thankfully,
'~+~' is not frequently needed in R programs), though expressing that
as a sed command is beyond me. Right now, Rscript -e '"~+~"' doesn't
print "~+~".

Perhaps the bigger question to ask is whether this escaping is
unavoidable. Is it documented? Since the args variable is only appended
(not prepended), it is likely possible to rewrite the
'while test -n "${1}"; do' loop in terms of 'set -- "$@" ...', which is
POSIX-compatible and doesn't require any escaping:

set -- "${@}" dummy # append one argument to skip it later

for arg in "${@}"; do # it's safe to modify $@ in the for loop [**]
  # TODO: on first iteration only, empty the $@ and don't check $prev_arg
  case "${prev_arg}" in
# ...
    -g|--gui)
      if test -n "`echo "${arg}" | ${SED} 's/^-.*//'`"; then
        gui="${arg}"
        set -- "${@}" "${prev_arg}" "${arg}"
      else
        error "option '${prev_arg}' requires an argument"
      fi
      ;;
# ...
    -e)
      if ! test -n "`echo "${arg}" | ${SED} 's/^-.*//'`"; then
        error "option '${prev_arg}' requires a non-empty argument"
      fi
      set -- "${@}" -e "${arg}"
      ;;
# ...
  esac
  prev_arg="${arg}"
  # no shift needed
done

# Later: use "${@}" instead of ${args}

Or is it documented behaviour that arguments following an empty
argument are not escaped by the shell script but are passed to
"${R_HOME}/bin/exec${R_ARCH}/R"?

LC_ALL=C R -q -e " $tab 1"
# ARGUMENT '~+~1' __ignored__
# 
# >
# >
# >
LC_ALL=C R '' -q -e " $tab 1"
# ARGUMENT '' __ignored__
# 
# > 	1
# [1] 1
# >
# >


-- 
Best regards,
Ivan

[*]
https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05

[**]
"First, the list of words following in shall be expanded to generate a
list of items..."
https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_04_03


From g@bembecker @end|ng |rom gm@||@com  Tue Mar 16 22:04:38 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 16 Mar 2021 14:04:38 -0700
Subject: [Rd] Undefined (so far as I can tell?) behavior of browser when
 called at top level of sourced script?
Message-ID: <CAD4oTHGjNkUL6RbNXB_FdG6MG-Yg_VnJ+4rhqORTCQmKXBRPnQ@mail.gmail.com>

Hi all,

I was asked a question about why browser() was behaving a specific way, and
it turned out that it was being called in a script (rather than in a
function).

Putting aside the design considerations that lead to that, the behavior is
actually a bit puzzling, and so far as I have been able to see, completely
undocumented. My suspicion is that this behavior should be considered
undefined, but I wanted to make sure I wasn't missing something. (To be
perfectly honest I was a bit surprised it wasn't an error).

Some experimentation (done in 4.0.1 because that is what I have available,
R script attached) has lead me to conclude that if browser is called at the
top level, 'n' will just continue to the end, *except* in the case where
the next expression is a conditional ** which has a consequent that is
evaluated** or a loop, in which case it walks through the consequent/loop
body however many number of times and then the 'n' that steps out of that
continues on.

Should something be added to the documentation that either describes this
behavior, declares explicitly that using browser at the top level leads to
undefined behavior, or both?

I can prepare a patch to that effect if desired.

~G

From @purd|e@@ @end|ng |rom gm@||@com  Tue Mar 16 22:53:46 2021
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Wed, 17 Mar 2021 10:53:46 +1300
Subject: [Rd] Potential improvements of ave?
In-Reply-To: <CAD4oTHF_G8azN2TO7bC3YryPLLAqiTOrzNJB6_ZcK3ma7iPHmA@mail.gmail.com>
References: <1615589952944.72119@ap-hm.fr>
 <CAB8pepyagvOjnt=aWnOFfkgpgsUQX7MWKFNfLOtbJU6Z2cc+_Q@mail.gmail.com>
 <1615832368693.69981@ap-hm.fr>
 <CAD4oTHF_G8azN2TO7bC3YryPLLAqiTOrzNJB6_ZcK3ma7iPHmA@mail.gmail.com>
Message-ID: <CAB8pepwOLZUoYPm81_mBG6T8O90hc+K=K=H77SJQtMLD4xs0LA@mail.gmail.com>

There are some relatively obvious examples:
unique, which.min/which.max/etc, range/min/max, quantile, aggregate/split

Also, many timeseries, graphics and spline functions are dependent on the order.

In the case of data.frame(s), a boolean flag would probably need to be
extended to allow for multiple column sorting, and
ascending/descending options.

On Tue, Mar 16, 2021 at 11:08 AM Gabriel Becker <gabembecker at gmail.com> wrote:
>
> Abby,
>
> Vectors do have an internal mechanism for knowing that they are sorted via ALTREP (it was one of 2 core motivating features for 'smart vectors' the other being knowledge about presence of NAs).
>
> Currently I don't think we expose it at the R level, though it is part of the official C API. I don't know of any plans for this to change, but I suppose it could. Plus for functions in R itself, we could even use it without exposing it more widely. A number of functions, including sort itself, already do this in fact, but more could. I'd be interested in hearing which functions you think would particularly benefit from this.
>
> ~G
>
> On Mon, Mar 15, 2021 at 12:01 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr> wrote:
>>
>> Hi Abby,
>>
>> Thank you for your positive feedback.
>>
>> I agree for your general comment about sorting.
>>
>> For ave specifically, ordering may not help because the output must maintain the order of the input (as ave returns only x and not the entiere data.frame).
>>
>> Thanks,
>>
>> Thomas
>> ________________________________________
>> De : Abby Spurdle <spurdle.a at gmail.com>
>> Envoy? : lundi 15 mars 2021 10:22
>> ? : SOEIRO Thomas
>> Cc : r-devel at r-project.org
>> Objet : Re: [Rd] Potential improvements of ave?
>>
>> EMAIL EXTERNE - TRAITER AVEC PR?CAUTION LIENS ET FICHIERS
>>
>> Hi Thomas,
>>
>> These are some great suggestions.
>> But I can't help but feel there's a much bigger problem here.
>>
>> Intuitively, the ave function could (or should) sort the data.
>> Then the indexing step becomes almost trivial, in terms of both time
>> and space complexity.
>> And the ave function is not the only example of where a problem
>> becomes much simpler, if the data is sorted.
>>
>> Historically, I've never found base R functions user-friendly for
>> aggregation purposes, or for sorting.
>> (At least, not by comparison to SQL).
>>
>> But that's not the main problem.
>> It would seem preferable to sort the data, only once.
>> (Rather than sorting it repeatedly, or not at all).
>>
>> Perhaps, objects such as vectors and data.frame(s) could have a
>> boolean attribute, to indicate if they're sorted.
>> Or functions such as ave could have a sorted argument.
>> In either case, if true, the function assumes the data is sorted and
>> applies a more efficient algorithm.
>>
>>
>> B.
>>
>>
>> On Sat, Mar 13, 2021 at 1:07 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr> wrote:
>> >
>> > Dear all,
>> >
>> > I have two questions/suggestions about ave, but I am not sure if it's relevant for bug reports.
>> >
>> >
>> >
>> > 1) I have performance issues with ave in a case where I didn't expect it. The following code runs as expected:
>> >
>> > set.seed(1)
>> >
>> > df1 <- data.frame(id1 = sample(1:1e2, 5e2, TRUE),
>> >                   id2 = sample(1:3, 5e2, TRUE),
>> >                   id3 = sample(1:5, 5e2, TRUE),
>> >                   val = sample(1:300, 5e2, TRUE))
>> >
>> > df1$diff <- ave(df1$val,
>> >                 df1$id1,
>> >                 df1$id2,
>> >                 df1$id3,
>> >                 FUN = function(i) c(diff(i), 0))
>> >
>> > head(df1[order(df1$id1,
>> >                df1$id2,
>> >                df1$id3), ])
>> >
>> > But when expanding the data.frame (* 1e4), ave fails (Error: cannot allocate vector of size 1110.0 Gb):
>> >
>> > df2 <- data.frame(id1 = sample(1:(1e2 * 1e4), 5e2 * 1e4, TRUE),
>> >                   id2 = sample(1:3, 5e2 * 1e4, TRUE),
>> >                   id3 = sample(1:(5 * 1e4), 5e2 * 1e4, TRUE),
>> >                   val = sample(1:300, 5e2 * 1e4, TRUE))
>> >
>> > df2$diff <- ave(df2$val,
>> >                 df2$id1,
>> >                 df2$id2,
>> >                 df2$id3,
>> >                 FUN = function(i) c(diff(i), 0))
>> >
>> > This use case does not seem extreme to me (e.g. aggregate et al work perfectly on this data.frame).
>> > So my question is: Is this expected/intended/reasonable? i.e. Does ave need to be optimized?
>> >
>> >
>> >
>> > 2) Gabor Grothendieck pointed out in 2011 that drop = TRUE is needed to avoid warnings in case of unused levels (https://urldefense.com/v3/__https://stat.ethz.ch/pipermail/r-devel/2011-February/059947.html__;!!JQ5agg!J2AUFbQr31F2c6LUpTnyc5TX2Kh1bJ-VqhMND1c0N5axWO_tQl0pCJhtucPfjU7NXrBO$ ).
>> > Is it relevant/possible to expose the drop argument explicitly?
>> >
>> >
>> >
>> > Thanks,
>> >
>> > Thomas
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!JQ5agg!J2AUFbQr31F2c6LUpTnyc5TX2Kh1bJ-VqhMND1c0N5axWO_tQl0pCJhtucPfjUzdLFM1$
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Tue Mar 16 23:41:49 2021
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Tue, 16 Mar 2021 22:41:49 +0000
Subject: [Rd] Potential improvements of ave?
In-Reply-To: <CAB8pepwOLZUoYPm81_mBG6T8O90hc+K=K=H77SJQtMLD4xs0LA@mail.gmail.com>
References: <1615589952944.72119@ap-hm.fr>
 <CAB8pepyagvOjnt=aWnOFfkgpgsUQX7MWKFNfLOtbJU6Z2cc+_Q@mail.gmail.com>
 <1615832368693.69981@ap-hm.fr>
 <CAD4oTHF_G8azN2TO7bC3YryPLLAqiTOrzNJB6_ZcK3ma7iPHmA@mail.gmail.com>,
 <CAB8pepwOLZUoYPm81_mBG6T8O90hc+K=K=H77SJQtMLD4xs0LA@mail.gmail.com>
Message-ID: <1615934509712.73924@ap-hm.fr>

Dear all,

Thank you for your consideration on this topic.

I do not have enough knowledge of R internals to join the discussion about sorting mechanisms. In fact, I did not get how ordering could help for ave as the output must maintain the order of the input (because ave returns only x and not the entiere data.frame).

However, while the proposed workaround (i.e. paste0 instead of interaction, cf https://stat.ethz.ch/pipermail/r-devel/2021-March/080509.html) does not solves the "bigger problem" of sorting, it is usable as is and solves the issue. Therefore, what do you think about it? (i.e is it relevant for a patch?)

Thanks,

Thomas


> ________________________________________
> De : Abby Spurdle <spurdle.a at gmail.com>
> Envoy? : lundi 15 mars 2021 10:22
> ? : SOEIRO Thomas
> Cc : r-devel at r-project.org
> Objet : Re: [Rd] Potential improvements of ave?
>
> Hi Thomas,
>
> These are some great suggestions.
> But I can't help but feel there's a much bigger problem here.
>
> Intuitively, the ave function could (or should) sort the data.
> Then the indexing step becomes almost trivial, in terms of both time
> and space complexity.
> And the ave function is not the only example of where a problem
> becomes much simpler, if the data is sorted.
>
> Historically, I've never found base R functions user-friendly for
> aggregation purposes, or for sorting.
> (At least, not by comparison to SQL).
>
> But that's not the main problem.
> It would seem preferable to sort the data, only once.
> (Rather than sorting it repeatedly, or not at all).
>
> Perhaps, objects such as vectors and data.frame(s) could have a
> boolean attribute, to indicate if they're sorted.
> Or functions such as ave could have a sorted argument.
> In either case, if true, the function assumes the data is sorted and
> applies a more efficient algorithm.
>
>
> B.
>
>
> On Sat, Mar 13, 2021 at 1:07 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr> wrote:
>>
>> Dear all,
>>
>> I have two questions/suggestions about ave, but I am not sure if it's relevant for bug reports.
>>
>>
>>
>> 1) I have performance issues with ave in a case where I didn't expect it. The following code runs as expected:
>>
>> set.seed(1)
>>
>> df1 <- data.frame(id1 = sample(1:1e2, 5e2, TRUE),
>>                   id2 = sample(1:3, 5e2, TRUE),
>>                   id3 = sample(1:5, 5e2, TRUE),
>>                   val = sample(1:300, 5e2, TRUE))
>>
>> df1$diff <- ave(df1$val,
>>                 df1$id1,
>>                 df1$id2,
>>                 df1$id3,
>>                 FUN = function(i) c(diff(i), 0))
>>
>> head(df1[order(df1$id1,
>>                df1$id2,
>>                df1$id3), ])
>>
>> But when expanding the data.frame (* 1e4), ave fails (Error: cannot allocate vector of size 1110.0 Gb):
>>
>> df2 <- data.frame(id1 = sample(1:(1e2 * 1e4), 5e2 * 1e4, TRUE),
>>                   id2 = sample(1:3, 5e2 * 1e4, TRUE),
>>                   id3 = sample(1:(5 * 1e4), 5e2 * 1e4, TRUE),
>>                   val = sample(1:300, 5e2 * 1e4, TRUE))
>>
>> df2$diff <- ave(df2$val,
>>                 df2$id1,
>>                 df2$id2,
>>                 df2$id3,
>>                 FUN = function(i) c(diff(i), 0))
>>
>> This use case does not seem extreme to me (e.g. aggregate et al work perfectly on this data.frame).
>> So my question is: Is this expected/intended/reasonable? i.e. Does ave need to be optimized?
>>
>>
>>
>> 2) Gabor Grothendieck pointed out in 2011 that drop = TRUE is needed to avoid warnings in case of unused levels (https://stat.ethz.ch/pipermail/r-devel/2011-February/059947.html).
>> Is it relevant/possible to expose the drop argument explicitly?
>>
>>
>>
>> Thanks,
>>
>> Thomas

From g@bembecker @end|ng |rom gm@||@com  Wed Mar 17 00:06:42 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 16 Mar 2021 16:06:42 -0700
Subject: [Rd] Potential improvements of ave?
In-Reply-To: <CAB8pepwOLZUoYPm81_mBG6T8O90hc+K=K=H77SJQtMLD4xs0LA@mail.gmail.com>
References: <1615589952944.72119@ap-hm.fr>
 <CAB8pepyagvOjnt=aWnOFfkgpgsUQX7MWKFNfLOtbJU6Z2cc+_Q@mail.gmail.com>
 <1615832368693.69981@ap-hm.fr>
 <CAD4oTHF_G8azN2TO7bC3YryPLLAqiTOrzNJB6_ZcK3ma7iPHmA@mail.gmail.com>
 <CAB8pepwOLZUoYPm81_mBG6T8O90hc+K=K=H77SJQtMLD4xs0LA@mail.gmail.com>
Message-ID: <CAD4oTHGHOWzzjc7xbgyW=SQdR=LQ80bjebegr15pOpUJEB59Eg@mail.gmail.com>

Hi Abby,

I actually have a patch submitted that does this for unique/duplicated
(only numeric cases I think) but it is, as patches from external
contributors go, quite sizable which means it requires a correspondingly
large amount of an R-core member's time and energy to vet and consider. It
is in the queue, and so, I expect (/hope, provided I didn't make a mistake)
it will be incorporated at some point. (
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17993)

You are correct that the speedups are quite significant for calling
unique/duplicated on large vectors that know they are sorted: Speedup on my
machine for a fairly sizable vector (length 1e7) ranges from about ~10x in
the densely duplicated case up to ~60-70x in the sparsely duplicated case
for duplicated(). For unique() it seems to range from ~10x in the densely
duplicated case to ~15 in the spare case.

I had thought that min and max already did this, but looking now, they
don't seem to by default, thought ALTREP classes themselves do have an
option of setting a min/max method, which would be hit. That does seem like
low-hanging fruit, I agree, though in many cases the slow down from a
single pass over the data to get a min probably isn't earthshattering.

The others do seem like they could benefit as well.

Best,
~G

On Tue, Mar 16, 2021 at 2:54 PM Abby Spurdle <spurdle.a at gmail.com> wrote:

> There are some relatively obvious examples:
> unique, which.min/which.max/etc, range/min/max, quantile, aggregate/split
>
> Also, many timeseries, graphics and spline functions are dependent on the
> order.
>
> In the case of data.frame(s), a boolean flag would probably need to be
> extended to allow for multiple column sorting, and
> ascending/descending options.
>
> On Tue, Mar 16, 2021 at 11:08 AM Gabriel Becker <gabembecker at gmail.com>
> wrote:
> >
> > Abby,
> >
> > Vectors do have an internal mechanism for knowing that they are sorted
> via ALTREP (it was one of 2 core motivating features for 'smart vectors'
> the other being knowledge about presence of NAs).
> >
> > Currently I don't think we expose it at the R level, though it is part
> of the official C API. I don't know of any plans for this to change, but I
> suppose it could. Plus for functions in R itself, we could even use it
> without exposing it more widely. A number of functions, including sort
> itself, already do this in fact, but more could. I'd be interested in
> hearing which functions you think would particularly benefit from this.
> >
> > ~G
> >
> > On Mon, Mar 15, 2021 at 12:01 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr>
> wrote:
> >>
> >> Hi Abby,
> >>
> >> Thank you for your positive feedback.
> >>
> >> I agree for your general comment about sorting.
> >>
> >> For ave specifically, ordering may not help because the output must
> maintain the order of the input (as ave returns only x and not the entiere
> data.frame).
> >>
> >> Thanks,
> >>
> >> Thomas
> >> ________________________________________
> >> De : Abby Spurdle <spurdle.a at gmail.com>
> >> Envoy? : lundi 15 mars 2021 10:22
> >> ? : SOEIRO Thomas
> >> Cc : r-devel at r-project.org
> >> Objet : Re: [Rd] Potential improvements of ave?
> >>
> >> EMAIL EXTERNE - TRAITER AVEC PR?CAUTION LIENS ET FICHIERS
> >>
> >> Hi Thomas,
> >>
> >> These are some great suggestions.
> >> But I can't help but feel there's a much bigger problem here.
> >>
> >> Intuitively, the ave function could (or should) sort the data.
> >> Then the indexing step becomes almost trivial, in terms of both time
> >> and space complexity.
> >> And the ave function is not the only example of where a problem
> >> becomes much simpler, if the data is sorted.
> >>
> >> Historically, I've never found base R functions user-friendly for
> >> aggregation purposes, or for sorting.
> >> (At least, not by comparison to SQL).
> >>
> >> But that's not the main problem.
> >> It would seem preferable to sort the data, only once.
> >> (Rather than sorting it repeatedly, or not at all).
> >>
> >> Perhaps, objects such as vectors and data.frame(s) could have a
> >> boolean attribute, to indicate if they're sorted.
> >> Or functions such as ave could have a sorted argument.
> >> In either case, if true, the function assumes the data is sorted and
> >> applies a more efficient algorithm.
> >>
> >>
> >> B.
> >>
> >>
> >> On Sat, Mar 13, 2021 at 1:07 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr>
> wrote:
> >> >
> >> > Dear all,
> >> >
> >> > I have two questions/suggestions about ave, but I am not sure if it's
> relevant for bug reports.
> >> >
> >> >
> >> >
> >> > 1) I have performance issues with ave in a case where I didn't expect
> it. The following code runs as expected:
> >> >
> >> > set.seed(1)
> >> >
> >> > df1 <- data.frame(id1 = sample(1:1e2, 5e2, TRUE),
> >> >                   id2 = sample(1:3, 5e2, TRUE),
> >> >                   id3 = sample(1:5, 5e2, TRUE),
> >> >                   val = sample(1:300, 5e2, TRUE))
> >> >
> >> > df1$diff <- ave(df1$val,
> >> >                 df1$id1,
> >> >                 df1$id2,
> >> >                 df1$id3,
> >> >                 FUN = function(i) c(diff(i), 0))
> >> >
> >> > head(df1[order(df1$id1,
> >> >                df1$id2,
> >> >                df1$id3), ])
> >> >
> >> > But when expanding the data.frame (* 1e4), ave fails (Error: cannot
> allocate vector of size 1110.0 Gb):
> >> >
> >> > df2 <- data.frame(id1 = sample(1:(1e2 * 1e4), 5e2 * 1e4, TRUE),
> >> >                   id2 = sample(1:3, 5e2 * 1e4, TRUE),
> >> >                   id3 = sample(1:(5 * 1e4), 5e2 * 1e4, TRUE),
> >> >                   val = sample(1:300, 5e2 * 1e4, TRUE))
> >> >
> >> > df2$diff <- ave(df2$val,
> >> >                 df2$id1,
> >> >                 df2$id2,
> >> >                 df2$id3,
> >> >                 FUN = function(i) c(diff(i), 0))
> >> >
> >> > This use case does not seem extreme to me (e.g. aggregate et al work
> perfectly on this data.frame).
> >> > So my question is: Is this expected/intended/reasonable? i.e. Does
> ave need to be optimized?
> >> >
> >> >
> >> >
> >> > 2) Gabor Grothendieck pointed out in 2011 that drop = TRUE is needed
> to avoid warnings in case of unused levels (
> https://urldefense.com/v3/__https://stat.ethz.ch/pipermail/r-devel/2011-February/059947.html__;!!JQ5agg!J2AUFbQr31F2c6LUpTnyc5TX2Kh1bJ-VqhMND1c0N5axWO_tQl0pCJhtucPfjU7NXrBO$
> ).
> >> > Is it relevant/possible to expose the drop argument explicitly?
> >> >
> >> >
> >> >
> >> > Thanks,
> >> >
> >> > Thomas
> >> > ______________________________________________
> >> > R-devel at r-project.org mailing list
> >> >
> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!JQ5agg!J2AUFbQr31F2c6LUpTnyc5TX2Kh1bJ-VqhMND1c0N5axWO_tQl0pCJhtucPfjUzdLFM1$
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From w||||@mwdun|@p @end|ng |rom gm@||@com  Wed Mar 17 00:13:24 2021
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Tue, 16 Mar 2021 16:13:24 -0700
Subject: [Rd] Potential improvements of ave?
In-Reply-To: <1615934509712.73924@ap-hm.fr>
References: <1615589952944.72119@ap-hm.fr>
 <CAB8pepyagvOjnt=aWnOFfkgpgsUQX7MWKFNfLOtbJU6Z2cc+_Q@mail.gmail.com>
 <1615832368693.69981@ap-hm.fr>
 <CAD4oTHF_G8azN2TO7bC3YryPLLAqiTOrzNJB6_ZcK3ma7iPHmA@mail.gmail.com>
 <CAB8pepwOLZUoYPm81_mBG6T8O90hc+K=K=H77SJQtMLD4xs0LA@mail.gmail.com>
 <1615934509712.73924@ap-hm.fr>
Message-ID: <CAHqSRuTiMachPN_0D4iQ-P2ZSo3X=BJvr3nw6y4k2_iSYEbcUQ@mail.gmail.com>

Your proposed change (roughly, replacing interaction() by
unique(paste())) slows down ave() considerably when there are long
columns with lots of repeated rows.

I think that interaction(drop=TRUE, ...) can be changed to use less
memory and be faster by making a separate branch for drop=TRUE that
uses the following idiom for finding the unique rows in a data.frame:

new.duplicated.data.frame <- function (x, incomparables = FALSE,
fromLast = FALSE, ...)
{
    dup <- !logical(nrow(x)) # all entries considered duplicated until
proven otherwise
    for(column in x) {
        dup <- dup & duplicated(column, incomparables = incomparables,
fromLast = fromLast)
    }
    dup
}

ave() could use the above directly or it could call interaction(drop=TRUE,...).

On Tue, Mar 16, 2021 at 3:50 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr> wrote:
>
> Dear all,
>
> Thank you for your consideration on this topic.
>
> I do not have enough knowledge of R internals to join the discussion about sorting mechanisms. In fact, I did not get how ordering could help for ave as the output must maintain the order of the input (because ave returns only x and not the entiere data.frame).
>
> However, while the proposed workaround (i.e. paste0 instead of interaction, cf https://stat.ethz.ch/pipermail/r-devel/2021-March/080509.html) does not solves the "bigger problem" of sorting, it is usable as is and solves the issue. Therefore, what do you think about it? (i.e is it relevant for a patch?)
>
> Thanks,
>
> Thomas
>
>
> > ________________________________________
> > De : Abby Spurdle <spurdle.a at gmail.com>
> > Envoy? : lundi 15 mars 2021 10:22
> > ? : SOEIRO Thomas
> > Cc : r-devel at r-project.org
> > Objet : Re: [Rd] Potential improvements of ave?
> >
> > Hi Thomas,
> >
> > These are some great suggestions.
> > But I can't help but feel there's a much bigger problem here.
> >
> > Intuitively, the ave function could (or should) sort the data.
> > Then the indexing step becomes almost trivial, in terms of both time
> > and space complexity.
> > And the ave function is not the only example of where a problem
> > becomes much simpler, if the data is sorted.
> >
> > Historically, I've never found base R functions user-friendly for
> > aggregation purposes, or for sorting.
> > (At least, not by comparison to SQL).
> >
> > But that's not the main problem.
> > It would seem preferable to sort the data, only once.
> > (Rather than sorting it repeatedly, or not at all).
> >
> > Perhaps, objects such as vectors and data.frame(s) could have a
> > boolean attribute, to indicate if they're sorted.
> > Or functions such as ave could have a sorted argument.
> > In either case, if true, the function assumes the data is sorted and
> > applies a more efficient algorithm.
> >
> >
> > B.
> >
> >
> > On Sat, Mar 13, 2021 at 1:07 PM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr> wrote:
> >>
> >> Dear all,
> >>
> >> I have two questions/suggestions about ave, but I am not sure if it's relevant for bug reports.
> >>
> >>
> >>
> >> 1) I have performance issues with ave in a case where I didn't expect it. The following code runs as expected:
> >>
> >> set.seed(1)
> >>
> >> df1 <- data.frame(id1 = sample(1:1e2, 5e2, TRUE),
> >>                   id2 = sample(1:3, 5e2, TRUE),
> >>                   id3 = sample(1:5, 5e2, TRUE),
> >>                   val = sample(1:300, 5e2, TRUE))
> >>
> >> df1$diff <- ave(df1$val,
> >>                 df1$id1,
> >>                 df1$id2,
> >>                 df1$id3,
> >>                 FUN = function(i) c(diff(i), 0))
> >>
> >> head(df1[order(df1$id1,
> >>                df1$id2,
> >>                df1$id3), ])
> >>
> >> But when expanding the data.frame (* 1e4), ave fails (Error: cannot allocate vector of size 1110.0 Gb):
> >>
> >> df2 <- data.frame(id1 = sample(1:(1e2 * 1e4), 5e2 * 1e4, TRUE),
> >>                   id2 = sample(1:3, 5e2 * 1e4, TRUE),
> >>                   id3 = sample(1:(5 * 1e4), 5e2 * 1e4, TRUE),
> >>                   val = sample(1:300, 5e2 * 1e4, TRUE))
> >>
> >> df2$diff <- ave(df2$val,
> >>                 df2$id1,
> >>                 df2$id2,
> >>                 df2$id3,
> >>                 FUN = function(i) c(diff(i), 0))
> >>
> >> This use case does not seem extreme to me (e.g. aggregate et al work perfectly on this data.frame).
> >> So my question is: Is this expected/intended/reasonable? i.e. Does ave need to be optimized?
> >>
> >>
> >>
> >> 2) Gabor Grothendieck pointed out in 2011 that drop = TRUE is needed to avoid warnings in case of unused levels (https://stat.ethz.ch/pipermail/r-devel/2011-February/059947.html).
> >> Is it relevant/possible to expose the drop argument explicitly?
> >>
> >>
> >>
> >> Thanks,
> >>
> >> Thomas
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From r@d|ord @end|ng |rom c@@toronto@edu  Wed Mar 17 01:36:37 2021
From: r@d|ord @end|ng |rom c@@toronto@edu (Radford Neal)
Date: Tue, 16 Mar 2021 20:36:37 -0400
Subject: [Rd] Faster sorting algorithm...
In-Reply-To: <mailman.51399.5.1615892401.47839.r-devel@r-project.org>
References: <mailman.51399.5.1615892401.47839.r-devel@r-project.org>
Message-ID: <20210317003637.GA16475@mail.cs.toronto.edu>

Those interested in faster sorting may want to look at the merge sort
implemented in pqR (see pqR-project.org).  It's often used as the
default, because it is stable, and does different collations, while
being faster than shell sort (except for small vectors).

Here are examples, with timings, for pqR-2020-07-23 and R-4.0.2, 
compiled identically:

-----------------------------
pqR-2020-07-23 in C locale:

> set.seed(1)
> N <- 1000000
> x <- as.character (sample(N,N,replace=TRUE))
> print(system.time (os <- order(x,method="shell")))
   user  system elapsed 
  1.332   0.000   1.334 
> print(system.time (or <- order(x,method="radix")))
   user  system elapsed 
  0.092   0.004   0.096 
> print(system.time (om <- order(x,method="merge")))
   user  system elapsed 
  0.363   0.000   0.363 
> print(identical(os,or))
[1] TRUE
> print(identical(os,om))
[1] TRUE
> 
> x <- c("a","~")
> print(order(x,method="shell"))
[1] 1 2
> print(order(x,method="radix"))
[1] 1 2
> print(order(x,method="merge"))
[1] 1 2

-----------------------------
R-4.0.2 in C locale:

> set.seed(1)
> N <- 1000000
> x <- as.character (sample(N,N,replace=TRUE))
> print(system.time (os <- order(x,method="shell")))
   user  system elapsed 
  2.381   0.004   2.387 
> print(system.time (or <- order(x,method="radix")))
   user  system elapsed 
  0.138   0.000   0.137 
> #print(system.time (om <- order(x,method="merge")))
> print(identical(os,or))
[1] TRUE
> #print(identical(os,om))
> 
> x <- c("a","~")
> print(order(x,method="shell"))
[1] 1 2
> print(order(x,method="radix"))
[1] 1 2
> #print(order(x,method="merge"))

------------------------------------
pqR-2020-07-23 in fr_CA.utf8 locale:

> set.seed(1)
> N <- 1000000
> x <- as.character (sample(N,N,replace=TRUE))
> print(system.time (os <- order(x,method="shell")))
utilisateur     syst?me      ?coul? 
      2.960       0.000       2.962 
> print(system.time (or <- order(x,method="radix")))
utilisateur     syst?me      ?coul? 
      0.083       0.008       0.092 
> print(system.time (om <- order(x,method="merge")))
utilisateur     syst?me      ?coul? 
      1.143       0.000       1.142 
> print(identical(os,or))
[1] TRUE
> print(identical(os,om))
[1] TRUE
> 
> x <- c("a","~")
> print(order(x,method="shell"))
[1] 2 1
> print(order(x,method="radix"))
[1] 1 2
> print(order(x,method="merge"))
[1] 2 1

------------------------------------
R-4.0.2 in fr_CA.utf8 locale:

> set.seed(1)
> N <- 1000000
> x <- as.character (sample(N,N,replace=TRUE))
> print(system.time (os <- order(x,method="shell")))
utilisateur     syst?me      ?coul? 
      4.222       0.016       4.239 
> print(system.time (or <- order(x,method="radix")))
utilisateur     syst?me      ?coul? 
      0.136       0.000       0.137 
> #print(system.time (om <- order(x,method="merge")))
> print(identical(os,or))
[1] TRUE
> #print(identical(os,om))
> 
> x <- c("a","~")
> print(order(x,method="shell"))
[1] 2 1
> print(order(x,method="radix"))
[1] 1 2
> #print(order(x,method="merge"))


pqR is faster in all the tests, but more relevant to this discussion
is that the "merge" method is substantially faster than "shell" for
these character vectors with a million elements, while retaining the
stability and collation properties of "shell" (whereas "radix" only
does C collation).

It would probably not be too hard to take the merge sort code from pqR
and use it in R core's implementation.

The merge sort in pqR doesn't exploit parallelism at the moment, but
merge sort is potentially quite parallelizable (though I think the
storage allocation strategy I use would have to be modified).

Regards,

   Radford Neal


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Mar 17 10:21:51 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 17 Mar 2021 10:21:51 +0100
Subject: [Rd] quantile() names
In-Reply-To: <24537.56780.444593.37570@stat.math.ethz.ch>
References: <f03ca92e46c41a40eb918cae1f11f2968ad511db.camel@missouri.edu>
 <CAD4oTHFkF8J-we-bVsUStz-trRz08zGegyuAEQppB3-6ciY80A@mail.gmail.com>
 <24537.56780.444593.37570@stat.math.ethz.ch>
Message-ID: <24657.51759.191262.945266@stat.math.ethz.ch>

Getting back to this after 3 months :

>>>>> Martin Maechler 
>>>>>     on Wed, 16 Dec 2020 11:13:32 +0100 writes:

>>>>> Gabriel Becker 
>>>>>     on Mon, 14 Dec 2020 13:23:00 -0800 writes:

    >> Hi Edgar, I certainly don't think quantile(x, .975) should
    >> return 980, as that is a completely wrong answer.

    >> I do agree that it seems like the name is a bit
    >> offputting. I'm not sure how deep in the machinery you'd
    >> have to go to get digits to no effect on the names (I
    >> don't have time to dig in right this second).

    >> On the other hand, though, if we're going to make the
    >> names not respect digits entirely, what do we do when
    >> someone does quantile(x, 1/3)? That'd be a bad time had by
    >> all without digits coming to the rescue, i think.

    >> Best, ~G

    > and now we read more replies on this topic without anyone looking at
    > the pure R source code which is pretty simple and easy.
    > Instead, people do experiments and take time to muse about their findings..

    > Honestly, I'm disappointed: I've always thought that if you
    > *write* on R-devel, you should be able to figure out a few
    > things yourself before that..

    > It's not rocket science to see/know that you need to quickly look at
    > the quantile.default() method function and then to note 
    > that it's  format_perc(.) which is used to create the names.

    > Almost surely, I've been a bit envolved in creating parts of
    > this and probably am responsible for the current default
    > behavior.

    > ....
    > ....(sounds of digging) ...
    > ....
    > ....
    > ....
    > ....
    > ....
    > ....

    --> Yes:

    > ------------------------------------------------------------------------
    > r837 | maechler | 1998-03-05 12:20:37 +0100 (Thu, 05. Mar 1998) | 2 Zeilen
    > Ge?nderte Pfade:
    > M /trunk/src/library/base/R/quantile
    > M /trunk/src/library/base/man/quantile.Rd

    > fixed names(.) construction
    > ------------------------------------------------------------------------

    > With this diff  (my 'svn-diffB -c837 quantile') :
    > Index: quantile
    > ===================================================================
    > 21c21,23
    > < 	names(qs) <- paste(round(100 * probs), "%", sep = "")
    > ---
    >>        names(qs) <- paste(formatC(100 * probs, format= "fg", wid=1,
    >>                          dig= max(2,.Options$digits)),
    >> "                        %", sep = "")

    > -----------------------------------------------------------------
    > so this was before this was modularized into the format_perc()
    > utility and quite a while before R 1.0.0 ....

    > Now, 22.8 years later, I do think that indeed it was not
    > necessarily the best idea to make the names() construction depend  on the
    > 'digits' option entirely and just protect it by using at least 2 digits.

    > What I think is better is to

    > 1) provide an optional argument   'digits = 7'
    > back compatible w/ default getOption("digits")

    > 2) when used, check that it is at least '1'

    > But then some scripts / examples of some people *will* change
    > ..., e.g., because they preferred to have a global setting of digits=5

    > so I'm guessing it may make more people unhappy than other
    > people happy if we change this now, after close to 23 years  .. ??

    > Martin

I had more thoughts about this, and noticed that not one example
or test in base R  plus Recommended packages was changed, so
I've now committed the above change.

NEWS entry

    ? The names of quantile()'s result no longer depend on the global
      getOption("digits"), but quantile() gets a new optional argument
      digits = 7 instead.

Martin


--
Martin Maechler
ETH Zurich  and  R Core team


    >> On Mon, Dec 14, 2020 at 11:55 AM Merkle, Edgar
    >> C. <merklee at missouri.edu> wrote:

    >>> All,
    >>> 
    >>> Consider the code below
    >>> 
    >>> options(digits=2)
    >>> x <- 1:1000 
    >>> quantile(x, .975)

    >>> The value returned is 975 (the 97.5th percentile), but
    >>> the name has been shortened to "98%" due to the digits
    >>> option. Is this intended? I would have expected the name
    >>> to also be "97.5%" here. Alternatively, the returned
    >>> value might be 980 in order to match the name of "98%".
    >>> 
    >>> Best, Ed
    >>>


From morg@n@em@||box @end|ng |rom gm@||@com  Wed Mar 17 10:23:15 2021
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Wed, 17 Mar 2021 09:23:15 +0000
Subject: [Rd] Faster sorting algorithm...
In-Reply-To: <20210317003637.GA16475@mail.cs.toronto.edu>
References: <mailman.51399.5.1615892401.47839.r-devel@r-project.org>
 <20210317003637.GA16475@mail.cs.toronto.edu>
Message-ID: <CAL0QV_Nn0NzgkG6txQbV6tdjpNPmawy_NZWR-LtsvNrAwj2Xow@mail.gmail.com>

Thank you Neal. This is interesting. I will have a look at pqR.
Indeed radix only does C collation, I believe that is why it is not the
default choice for character ordering and sorting.
Not sure but I believe it can help address the following bugzilla item:
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17400

On the same topic of collation, there is an experimental sorting function
"psort" in package kit that might help address this issue.

> library(kit)
Attaching kit 0.0.7 (OPENMP enabled using 1 thread)
> x <- c("b","A","B","a","\xe4")
> Encoding(x) <- "latin1"
> identical(psort(x, c.locale=FALSE), sort(x))
[1] TRUE
> identical(psort(x, c.locale=TRUE), sort(x, method="radix"))
[1] TRUE

Coming back to the topic of fsort, I have just finished the implementation
for double, integer, factor and logical.
The implementation takes into account NA, Inf.. values. Values can be
sorted in a decreasing order or increasing order.
Comparing benchmark with the current implementation in data.table, it is
currently over 30% faster.
There might bugs but I am sure performance can be further improved as I did
not really try hard.
If there is interest in both the implementation and cross community
sharing, please let know....

Best regards,
Morgan

On Wed, 17 Mar 2021, 00:37 Radford Neal, <radford at cs.toronto.edu> wrote:

> Those interested in faster sorting may want to look at the merge sort
> implemented in pqR (see pqR-project.org).  It's often used as the
> default, because it is stable, and does different collations, while
> being faster than shell sort (except for small vectors).
>
> Here are examples, with timings, for pqR-2020-07-23 and R-4.0.2,
> compiled identically:
>
> -----------------------------
> pqR-2020-07-23 in C locale:
>
> > set.seed(1)
> > N <- 1000000
> > x <- as.character (sample(N,N,replace=TRUE))
> > print(system.time (os <- order(x,method="shell")))
>    user  system elapsed
>   1.332   0.000   1.334
> > print(system.time (or <- order(x,method="radix")))
>    user  system elapsed
>   0.092   0.004   0.096
> > print(system.time (om <- order(x,method="merge")))
>    user  system elapsed
>   0.363   0.000   0.363
> > print(identical(os,or))
> [1] TRUE
> > print(identical(os,om))
> [1] TRUE
> >
> > x <- c("a","~")
> > print(order(x,method="shell"))
> [1] 1 2
> > print(order(x,method="radix"))
> [1] 1 2
> > print(order(x,method="merge"))
> [1] 1 2
>
> -----------------------------
> R-4.0.2 in C locale:
>
> > set.seed(1)
> > N <- 1000000
> > x <- as.character (sample(N,N,replace=TRUE))
> > print(system.time (os <- order(x,method="shell")))
>    user  system elapsed
>   2.381   0.004   2.387
> > print(system.time (or <- order(x,method="radix")))
>    user  system elapsed
>   0.138   0.000   0.137
> > #print(system.time (om <- order(x,method="merge")))
> > print(identical(os,or))
> [1] TRUE
> > #print(identical(os,om))
> >
> > x <- c("a","~")
> > print(order(x,method="shell"))
> [1] 1 2
> > print(order(x,method="radix"))
> [1] 1 2
> > #print(order(x,method="merge"))
>
> ------------------------------------
> pqR-2020-07-23 in fr_CA.utf8 locale:
>
> > set.seed(1)
> > N <- 1000000
> > x <- as.character (sample(N,N,replace=TRUE))
> > print(system.time (os <- order(x,method="shell")))
> utilisateur     syst?me      ?coul?
>       2.960       0.000       2.962
> > print(system.time (or <- order(x,method="radix")))
> utilisateur     syst?me      ?coul?
>       0.083       0.008       0.092
> > print(system.time (om <- order(x,method="merge")))
> utilisateur     syst?me      ?coul?
>       1.143       0.000       1.142
> > print(identical(os,or))
> [1] TRUE
> > print(identical(os,om))
> [1] TRUE
> >
> > x <- c("a","~")
> > print(order(x,method="shell"))
> [1] 2 1
> > print(order(x,method="radix"))
> [1] 1 2
> > print(order(x,method="merge"))
> [1] 2 1
>
> ------------------------------------
> R-4.0.2 in fr_CA.utf8 locale:
>
> > set.seed(1)
> > N <- 1000000
> > x <- as.character (sample(N,N,replace=TRUE))
> > print(system.time (os <- order(x,method="shell")))
> utilisateur     syst?me      ?coul?
>       4.222       0.016       4.239
> > print(system.time (or <- order(x,method="radix")))
> utilisateur     syst?me      ?coul?
>       0.136       0.000       0.137
> > #print(system.time (om <- order(x,method="merge")))
> > print(identical(os,or))
> [1] TRUE
> > #print(identical(os,om))
> >
> > x <- c("a","~")
> > print(order(x,method="shell"))
> [1] 2 1
> > print(order(x,method="radix"))
> [1] 1 2
> > #print(order(x,method="merge"))
>
>
> pqR is faster in all the tests, but more relevant to this discussion
> is that the "merge" method is substantially faster than "shell" for
> these character vectors with a million elements, while retaining the
> stability and collation properties of "shell" (whereas "radix" only
> does C collation).
>
> It would probably not be too hard to take the merge sort code from pqR
> and use it in R core's implementation.
>
> The merge sort in pqR doesn't exploit parallelism at the moment, but
> merge sort is potentially quite parallelizable (though I think the
> storage allocation strategy I use would have to be modified).
>
> Regards,
>
>    Radford Neal
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From ||@t@ @end|ng |rom dewey@myzen@co@uk  Wed Mar 17 15:24:50 2021
From: ||@t@ @end|ng |rom dewey@myzen@co@uk (Michael Dewey)
Date: Wed, 17 Mar 2021 14:24:50 +0000
Subject: [Rd] reshape documentation
In-Reply-To: <1615629058522.60204@ap-hm.fr>
References: <1615629058522.60204@ap-hm.fr>
Message-ID: <3668b25f-4909-c03a-43cf-cc5d6c47d84e@dewey.myzen.co.uk>

Comments in line

On 13/03/2021 09:50, SOEIRO Thomas wrote:
> Dear list,
> 
> I have some questions/suggestions about reshape.
> 
> 1) I think a good amount of the popularity of base::reshape alternative is due to the complexity of reshape documentation. It is quite hard (at least it is for me) to figure out what argument is needed for respectively "long to wide" and "wide to long", because reshapeWide and reshapeLong are documented together.
> - Do you agree with this?
> - Would you consider a proposal to modify the documentation?
> - If yes, what approach do you suggest? e.g. split in two pages?

The current documentation is much clearer than it was when I first 
started using R but we should always strive for more.

I would suggest leaving the documentation in one place but it might be 
helpful to add which direction is relevant for each parameter by placing 
(to wide) or (to long) as appropriate. I think having completely 
separate lists is not needed

>   
> 2) I do not think the documentation indicates that we can use varying argument to rename variables in reshapeWide.
> - Is this worth documenting?
> - Is the construct list(c()) really needed?

Yes, because you may have more than one set of variables which need to 
correspond to a single variable in long format. So in your example if 
you also had 11 variables for the temperature as well as the 
concentration each would need specifying as a separate vector in the list.

Michael

> 
> reshape(Indometh,
>          v.names = "conc",
>          idvar = "Subject",
>          timevar = "time",
>          direction = "wide",
>          varying = list(c("conc_0.25hr",
>                           "conc_0.5hr",
>                           "conc.0.75hr",
>                           "conc_1hr",
>                           "conc_1.25hr",
>                           "conc_2hr",
>                           "conc_3hr",
>                           "conc_4hr",
>                           "conc_5hr",
>                           "conc_6hr",
>                           "conc_8hr")))
> 
> Thanks,
> 
> Thomas
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Michael
http://www.dewey.myzen.co.uk/home.html


From bbo|ker @end|ng |rom gm@||@com  Thu Mar 18 02:18:03 2021
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Wed, 17 Mar 2021 21:18:03 -0400
Subject: [Rd] boneheaded BLAS questions
Message-ID: <c30f25fa-95f2-f6bf-60dd-f54e3c0afa6c@gmail.com>

   I've been going around in circles trying to get BLAS-switching 
working on a current r-devel, I'm sure I'm doing something dumb.  Any 
ideas about what I might be doing wrong, or suggestions for further 
diagnosis, would be welcome!

   tl;dr  I am compiling R-devel with (to the best of my knowledge) 
options set to allow BLAS-switching, but getting "undefined symbol" errors.

  ----

   Latest R-devel (via SVN), PopOS!/Ubuntu 20.10

   I have read Dirk E's post: https://github.com/eddelbuettel/mkl4deb
   I have attempted to read the relevant section of R Installation & 
Administration several times: 
https://cran.r-project.org/doc/manuals/r-release/R-admin.html#BLAS
   https://wiki.debian.org/DebianScience/LinearAlgebraLibraries


   I have installed MKL and OpenBLAS on my system via 'apt install' 
(libopenblas-dev, libopenblas-base, and TWO versions of intel-mkl-64bit)

   When I build R without BLAS everything is OK;

	rm -Rf r-build; mkdir r-build; cd r-build; ../r-devel/configure 
--without-blas --enable-R-shlib --enable-BLAS-shlib; make -j 6


Matrix products: default
BLAS:   /usr/local/lib/R/lib/libRblas.so
LAPACK: /usr/local/lib/R/lib/libRlapack.so


    When I look at my BLAS alternatives I don't see anything obviously 
wrong:


sudo update-alternatives --config libblas.so.3-x86_64-linux-gnu
There are 3 choices for the alternative libblas.so.3-x86_64-linux-gnu 
(providing /usr/lib/x86_64-linux-gnu/libblas.so.3).

   Selection    Path 
Priority   Status
------------------------------------------------------------
* 0            /opt/intel/mkl/lib/intel64/libmkl_rt.so 
150       auto mode
   1            /opt/intel/mkl/lib/intel64/libmkl_rt.so 
  150       manual mode
   2            /usr/lib/x86_64-linux-gnu/blas/libblas.so.3 
  10        manual mode
   3            /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 
  100       manual mode


   When I rebuild R with --with-blas:

	rm -Rf r-build; mkdir r-build; cd r-build; ../r-devel/configure 
--with-blas --enable-R-shlib --enable-BLAS-shlib; make -j 6

  I end up with this:

gcc -I../../../r-devel/src/extra -I/usr/include/tirpc -I. 
-I../../src/include -I../../../r-devel/src/include  -I/usr/local/include 
-I../../../r-devel/src/nmath -DHAVE_CONFIG_H   -fopenmp -fpic  -g -O2 
-c ../../../r-devel/src/main/Rmain.c -o Rmain.o
gcc -Wl,--export-dynamic -fopenmp  -L"../../lib" -L/usr/local/lib -o 
R.bin Rmain.o  -lR -lRblas


/usr/bin/ld: ../../lib/libR.so: undefined reference to `zgemm_'
/usr/bin/ld: ../../lib/libR.so: undefined reference to `daxpy_'
/usr/bin/ld: ../../lib/libR.so: undefined reference to `dgemv_'
/usr/bin/ld: ../../lib/libR.so: undefined reference to `dscal_'


    If

=======================
intel-mkl-64bit-2018.2-046/all,now 2018.2-046 amd64 [installed]
intel-mkl-64bit-2020.4-912/all,now 2020.4-912 amd64 [installed]

<... lots more intel-mkl stuff>

libblas-dev/groovy,now 3.9.0-3ubuntu1 amd64 [installed,automatic]
libblas3/groovy,now 3.9.0-3ubuntu1 amd64 [installed,automatic]
libgraphblas3/groovy,now 1:5.8.1+dfsg-2 amd64 [installed,automatic]
libgslcblas0/groovy,now 2.6+dfsg-2 amd64 [installed,automatic]
libopenblas-base/groovy,now 0.3.10+ds-3ubuntu1 amd64 [installed]
libopenblas-dev/groovy,now 0.3.10+ds-3ubuntu1 amd64 [installed]
libopenblas-pthread-dev/groovy,now 0.3.10+ds-3ubuntu1 amd64 
[installed,automatic]
libopenblas0-pthread/groovy,now 0.3.10+ds-3ubuntu1 amd64 
[installed,automatic]
libopenblas0/groovy,now 0.3.10+ds-3ubuntu1 amd64 [installed]


From edd @end|ng |rom deb|@n@org  Thu Mar 18 03:25:02 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 17 Mar 2021 21:25:02 -0500
Subject: [Rd] boneheaded BLAS questions
In-Reply-To: <c30f25fa-95f2-f6bf-60dd-f54e3c0afa6c@gmail.com>
References: <c30f25fa-95f2-f6bf-60dd-f54e3c0afa6c@gmail.com>
Message-ID: <24658.47614.579517.815516@rob.eddelbuettel.com>


Ben,

This stuff has worked unchanged since the 1990s when we had a _really_ far
sighted fellow in Debian come up with the 'switch the links' scheme which was
(and is) subsequently deployed by many numerical applications within Debian,
R and e.g. Octave included.

And I used this ability to switch over a decade ago in a never-quite-finished
paper which resulted in a package as well as a vignette as paper draft on
CRAN: gcbd [1] It used the ability to switch between implementation to time
and compare and benchmark the various BLAS and LAPACK libraries -- which was
then motivated by a comparison with GPUs. (The actual code / package is
stale-ish as some of the underlying packages have gone as eg the GPU one --
but the mechanics you are after still work the exact same way on Debian and
derivarives including Ubuntu and PopOS.)

(As a complete aside, the state of the art here is now one level up in
libraries based on flame/blis (a riff on blas) which can do a similar logical
switch _at runtime_ (rather than by flipping softlinks and restarting the
app). Julia and some other languages uses that, I think Fedora may have it in
its R build as well. Inaki may know more...)

That said, from the top of my head, I think you error may just be with the
second R compilation -- I always (i.e. for the Debian package) use both
  --with-blas --with-lapack
and not just --with-blas. And I do there is public: if you know where to look
you can see the exact invocation of the Debian build of the R package (which
Ubuntu and Pop and ... then shadow) [2]

Hth, Dirk

[1] https://cran.r-project.org/package=gcbd
[2] https://sources.debian.org/src/r-base/4.0.4-1/debian/rules/
    (and I apologise for how messy this still is)
-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From bbo|ker @end|ng |rom gm@||@com  Thu Mar 18 03:53:38 2021
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Wed, 17 Mar 2021 22:53:38 -0400
Subject: [Rd] boneheaded BLAS questions
In-Reply-To: <24658.47614.579517.815516@rob.eddelbuettel.com>
References: <c30f25fa-95f2-f6bf-60dd-f54e3c0afa6c@gmail.com>
 <24658.47614.579517.815516@rob.eddelbuettel.com>
Message-ID: <967e49eb-2295-d35f-aa14-65f2df3bbe12@gmail.com>

   Thanks.  I know it's supposed to Just Work (and I definitely 
appreciate all the work that's gone into making it Just Work 99% of the 
time!).

   I tried --with-lapack, no joy.
   Will try to decipher the rules file tomorrow ...

   cheers
    Ben


On 3/17/21 10:25 PM, Dirk Eddelbuettel wrote:
> 
> Ben,
> 
> This stuff has worked unchanged since the 1990s when we had a _really_ far
> sighted fellow in Debian come up with the 'switch the links' scheme which was
> (and is) subsequently deployed by many numerical applications within Debian,
> R and e.g. Octave included.
> 
> And I used this ability to switch over a decade ago in a never-quite-finished
> paper which resulted in a package as well as a vignette as paper draft on
> CRAN: gcbd [1] It used the ability to switch between implementation to time
> and compare and benchmark the various BLAS and LAPACK libraries -- which was
> then motivated by a comparison with GPUs. (The actual code / package is
> stale-ish as some of the underlying packages have gone as eg the GPU one --
> but the mechanics you are after still work the exact same way on Debian and
> derivarives including Ubuntu and PopOS.)
> 
> (As a complete aside, the state of the art here is now one level up in
> libraries based on flame/blis (a riff on blas) which can do a similar logical
> switch _at runtime_ (rather than by flipping softlinks and restarting the
> app). Julia and some other languages uses that, I think Fedora may have it in
> its R build as well. Inaki may know more...)
> 
> That said, from the top of my head, I think you error may just be with the
> second R compilation -- I always (i.e. for the Debian package) use both
>    --with-blas --with-lapack
> and not just --with-blas. And I do there is public: if you know where to look
> you can see the exact invocation of the Debian build of the R package (which
> Ubuntu and Pop and ... then shadow) [2]
> 
> Hth, Dirk
> 
> [1] https://cran.r-project.org/package=gcbd
> [2] https://sources.debian.org/src/r-base/4.0.4-1/debian/rules/
>      (and I apologise for how messy this still is)
>


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Mar 18 04:21:41 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 18 Mar 2021 16:21:41 +1300
Subject: [Rd] boneheaded BLAS questions
In-Reply-To: <967e49eb-2295-d35f-aa14-65f2df3bbe12@gmail.com>
References: <c30f25fa-95f2-f6bf-60dd-f54e3c0afa6c@gmail.com>
 <24658.47614.579517.815516@rob.eddelbuettel.com>
 <967e49eb-2295-d35f-aa14-65f2df3bbe12@gmail.com>
Message-ID: <88D8B85A-478B-4258-95E5-E4DD6D652F27@R-project.org>

Ben,

possibly useful project related to this
https://github.com/staticfloat/libblastrampoline
which is what Dirk referred to as the Julia state of art. It is actually much more complex than it sounds because of differences in naming and ABI between BLAS implementations, so simple switches don't work.
Dirk has the luxury of having control over what he compiles, but that is not always the case (like with Accelerate or MKL) ... 

Cheers,
Simon


> On 18/03/2021, at 3:53 PM, Ben Bolker <bbolker at gmail.com> wrote:
> 
>  Thanks.  I know it's supposed to Just Work (and I definitely appreciate all the work that's gone into making it Just Work 99% of the time!).
> 
>  I tried --with-lapack, no joy.
>  Will try to decipher the rules file tomorrow ...
> 
>  cheers
>   Ben
> 
> 
> On 3/17/21 10:25 PM, Dirk Eddelbuettel wrote:
>> Ben,
>> This stuff has worked unchanged since the 1990s when we had a _really_ far
>> sighted fellow in Debian come up with the 'switch the links' scheme which was
>> (and is) subsequently deployed by many numerical applications within Debian,
>> R and e.g. Octave included.
>> And I used this ability to switch over a decade ago in a never-quite-finished
>> paper which resulted in a package as well as a vignette as paper draft on
>> CRAN: gcbd [1] It used the ability to switch between implementation to time
>> and compare and benchmark the various BLAS and LAPACK libraries -- which was
>> then motivated by a comparison with GPUs. (The actual code / package is
>> stale-ish as some of the underlying packages have gone as eg the GPU one --
>> but the mechanics you are after still work the exact same way on Debian and
>> derivarives including Ubuntu and PopOS.)
>> (As a complete aside, the state of the art here is now one level up in
>> libraries based on flame/blis (a riff on blas) which can do a similar logical
>> switch _at runtime_ (rather than by flipping softlinks and restarting the
>> app). Julia and some other languages uses that, I think Fedora may have it in
>> its R build as well. Inaki may know more...)
>> That said, from the top of my head, I think you error may just be with the
>> second R compilation -- I always (i.e. for the Debian package) use both
>>   --with-blas --with-lapack
>> and not just --with-blas. And I do there is public: if you know where to look
>> you can see the exact invocation of the Debian build of the R package (which
>> Ubuntu and Pop and ... then shadow) [2]
>> Hth, Dirk
>> [1] https://cran.r-project.org/package=gcbd
>> [2] https://sources.debian.org/src/r-base/4.0.4-1/debian/rules/
>>     (and I apologise for how messy this still is)
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From edd @end|ng |rom deb|@n@org  Thu Mar 18 05:09:26 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 17 Mar 2021 23:09:26 -0500
Subject: [Rd] boneheaded BLAS questions
In-Reply-To: <967e49eb-2295-d35f-aa14-65f2df3bbe12@gmail.com>
References: <c30f25fa-95f2-f6bf-60dd-f54e3c0afa6c@gmail.com>
 <24658.47614.579517.815516@rob.eddelbuettel.com>
 <967e49eb-2295-d35f-aa14-65f2df3bbe12@gmail.com>
Message-ID: <24658.53878.743419.701131@rob.eddelbuettel.com>


On 17 March 2021 at 22:53, Ben Bolker wrote:
|    Thanks.  I know it's supposed to Just Work (and I definitely 
| appreciate all the work that's gone into making it Just Work 99% of the 
| time!).

And for what it is worth, the aforementioned 'switching from within' solution
is using FlexiBLAS (not BLIS as I had said in the previous email), and was
described in an R application R here:

  https://www.enchufa2.es/archives/switch-blas-lapack-without-leaving-your-r-session.html

That won't help for you tried on your Debian-based system though, and I would
(in the near-term) try that.

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Mar 18 09:15:55 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 18 Mar 2021 09:15:55 +0100
Subject: [Rd] boneheaded BLAS questions
In-Reply-To: <967e49eb-2295-d35f-aa14-65f2df3bbe12@gmail.com>
References: <c30f25fa-95f2-f6bf-60dd-f54e3c0afa6c@gmail.com>
 <24658.47614.579517.815516@rob.eddelbuettel.com>
 <967e49eb-2295-d35f-aa14-65f2df3bbe12@gmail.com>
Message-ID: <8bbb4557-f3ff-ff28-c704-408a7a1a43b8@gmail.com>

On 3/18/21 3:53 AM, Ben Bolker wrote:
> Thanks.? I know it's supposed to Just Work (and I definitely 
> appreciate all the work that's gone into making it Just Work 99% of 
> the time!).
>
> ? I tried --with-lapack, no joy.
> ? Will try to decipher the rules file tomorrow ...

This is documented in R Admin manual, section A.3, and there is also 
"configure --help".

On my Ubuntu 20.04, using "--with-blas --with-lapack" when a BLAS/LAPACK 
implementation is installed via "apt" works for me:

with libblas3, liblapack3 I get in R via sessionInfo()

BLAS:?? /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0

then I install libopenblas0 and get, after re-starting R (not rebuilding):

BLAS:?? /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3
LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3

Best
Tomas


>
> ? cheers
> ?? Ben
>
>
> On 3/17/21 10:25 PM, Dirk Eddelbuettel wrote:
>>
>> Ben,
>>
>> This stuff has worked unchanged since the 1990s when we had a 
>> _really_ far
>> sighted fellow in Debian come up with the 'switch the links' scheme 
>> which was
>> (and is) subsequently deployed by many numerical applications within 
>> Debian,
>> R and e.g. Octave included.
>>
>> And I used this ability to switch over a decade ago in a 
>> never-quite-finished
>> paper which resulted in a package as well as a vignette as paper 
>> draft on
>> CRAN: gcbd [1] It used the ability to switch between implementation 
>> to time
>> and compare and benchmark the various BLAS and LAPACK libraries -- 
>> which was
>> then motivated by a comparison with GPUs. (The actual code / package is
>> stale-ish as some of the underlying packages have gone as eg the GPU 
>> one --
>> but the mechanics you are after still work the exact same way on 
>> Debian and
>> derivarives including Ubuntu and PopOS.)
>>
>> (As a complete aside, the state of the art here is now one level up in
>> libraries based on flame/blis (a riff on blas) which can do a similar 
>> logical
>> switch _at runtime_ (rather than by flipping softlinks and restarting 
>> the
>> app). Julia and some other languages uses that, I think Fedora may 
>> have it in
>> its R build as well. Inaki may know more...)
>>
>> That said, from the top of my head, I think you error may just be 
>> with the
>> second R compilation -- I always (i.e. for the Debian package) use both
>> ?? --with-blas --with-lapack
>> and not just --with-blas. And I do there is public: if you know where 
>> to look
>> you can see the exact invocation of the Debian build of the R package 
>> (which
>> Ubuntu and Pop and ... then shadow) [2]
>>
>> Hth, Dirk
>>
>> [1] https://cran.r-project.org/package=gcbd
>> [2] https://sources.debian.org/src/r-base/4.0.4-1/debian/rules/
>> ???? (and I apologise for how messy this still is)
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Mar 18 09:34:39 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 18 Mar 2021 09:34:39 +0100
Subject: [Rd] boneheaded BLAS questions
In-Reply-To: <8bbb4557-f3ff-ff28-c704-408a7a1a43b8@gmail.com>
References: <c30f25fa-95f2-f6bf-60dd-f54e3c0afa6c@gmail.com>
 <24658.47614.579517.815516@rob.eddelbuettel.com>
 <967e49eb-2295-d35f-aa14-65f2df3bbe12@gmail.com>
 <8bbb4557-f3ff-ff28-c704-408a7a1a43b8@gmail.com>
Message-ID: <994c0420-48f5-1959-1582-e9ff1a4d720f@gmail.com>

On 3/18/21 9:15 AM, Tomas Kalibera wrote:
> On 3/18/21 3:53 AM, Ben Bolker wrote:
>> Thanks.? I know it's supposed to Just Work (and I definitely 
>> appreciate all the work that's gone into making it Just Work 99% of 
>> the time!).
>>
>> ? I tried --with-lapack, no joy.
>> ? Will try to decipher the rules file tomorrow ...
>
> This is documented in R Admin manual, section A.3, and there is also 
> "configure --help".
>
> On my Ubuntu 20.04, using "--with-blas --with-lapack" when a 
> BLAS/LAPACK implementation is installed via "apt" works for me:
>
> with libblas3, liblapack3 I get in R via sessionInfo()
>
> BLAS:?? /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0
>
> then I install libopenblas0 and get, after re-starting R (not 
> rebuilding):
>
> BLAS:?? /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3
> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3

and to install say MKL, this works for me:

apt-get install intel-mkl-full

and then:

env MKL_INTERFACE_LAYER=GNU,LP64 MKL_THREADING_LAYER=GNU R

gives me:

BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/libmkl_rt.so

This is following documentation in A.3.1.3 of R Admin manual.

Best
Tomas


>
> Best
> Tomas
>
>
>>
>> ? cheers
>> ?? Ben
>>
>>
>> On 3/17/21 10:25 PM, Dirk Eddelbuettel wrote:
>>>
>>> Ben,
>>>
>>> This stuff has worked unchanged since the 1990s when we had a 
>>> _really_ far
>>> sighted fellow in Debian come up with the 'switch the links' scheme 
>>> which was
>>> (and is) subsequently deployed by many numerical applications within 
>>> Debian,
>>> R and e.g. Octave included.
>>>
>>> And I used this ability to switch over a decade ago in a 
>>> never-quite-finished
>>> paper which resulted in a package as well as a vignette as paper 
>>> draft on
>>> CRAN: gcbd [1] It used the ability to switch between implementation 
>>> to time
>>> and compare and benchmark the various BLAS and LAPACK libraries -- 
>>> which was
>>> then motivated by a comparison with GPUs. (The actual code / package is
>>> stale-ish as some of the underlying packages have gone as eg the GPU 
>>> one --
>>> but the mechanics you are after still work the exact same way on 
>>> Debian and
>>> derivarives including Ubuntu and PopOS.)
>>>
>>> (As a complete aside, the state of the art here is now one level up in
>>> libraries based on flame/blis (a riff on blas) which can do a 
>>> similar logical
>>> switch _at runtime_ (rather than by flipping softlinks and 
>>> restarting the
>>> app). Julia and some other languages uses that, I think Fedora may 
>>> have it in
>>> its R build as well. Inaki may know more...)
>>>
>>> That said, from the top of my head, I think you error may just be 
>>> with the
>>> second R compilation -- I always (i.e. for the Debian package) use both
>>> ?? --with-blas --with-lapack
>>> and not just --with-blas. And I do there is public: if you know 
>>> where to look
>>> you can see the exact invocation of the Debian build of the R 
>>> package (which
>>> Ubuntu and Pop and ... then shadow) [2]
>>>
>>> Hth, Dirk
>>>
>>> [1] https://cran.r-project.org/package=gcbd
>>> [2] https://sources.debian.org/src/r-base/4.0.4-1/debian/rules/
>>> ???? (and I apologise for how messy this still is)
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From |uc@r @end|ng |rom |edor@project@org  Thu Mar 18 10:34:52 2021
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Thu, 18 Mar 2021 10:34:52 +0100
Subject: [Rd] boneheaded BLAS questions
In-Reply-To: <24658.53878.743419.701131@rob.eddelbuettel.com>
References: <c30f25fa-95f2-f6bf-60dd-f54e3c0afa6c@gmail.com>
 <24658.47614.579517.815516@rob.eddelbuettel.com>
 <967e49eb-2295-d35f-aa14-65f2df3bbe12@gmail.com>
 <24658.53878.743419.701131@rob.eddelbuettel.com>
Message-ID: <CALEXWq2ASHeQ2jeoX8_i5atc16tnmMLMkvZL3HjoLdkJx0DgCQ@mail.gmail.com>

On Thu, 18 Mar 2021 at 05:10, Dirk Eddelbuettel <edd at debian.org> wrote:
>
>
> On 17 March 2021 at 22:53, Ben Bolker wrote:
> |    Thanks.  I know it's supposed to Just Work (and I definitely
> | appreciate all the work that's gone into making it Just Work 99% of the
> | time!).
>
> And for what it is worth, the aforementioned 'switching from within' solution
> is using FlexiBLAS (not BLIS as I had said in the previous email), and was
> described in an R application R here:
>
>   https://www.enchufa2.es/archives/switch-blas-lapack-without-leaving-your-r-session.html

Thanks, Dirk. Yes, since Fedora 33 (current release), we leverage this
excellent work by Martin K?hler et al. [1], so that every BLAS/LAPACK
consumer in Fedora is linked against FlexiBLAS, which enables
transparent live switching. And there are R and octave packages
providing bindings, as shown in the post above. Julia is in fact the
only component that is currently *not* using it due to the
particularities of their BLAS/LAPACK stack management, but they are
interested in FlexiBLAS too and some work is underway [2].

If you are interested in this, Ben, you could compile FlexiBLAS
yourself, docs are very clear and it's pretty straightforward. And
then you only need to tell R to link against libflexiblas. For that,
as previously described, we use (see lines 691-693 in [3]):

--with-lapack --with-blas=flexiblas

A small tweak in the configure is required though (see line 679 in
[3]; in fact, I should port a proper fix upstream, but I didn't find
the time yet). And if you have any issue Martin or myself could help.

[1] https://www.mpi-magdeburg.mpg.de/projects/flexiblas
[2] https://github.com/mpimd-csc/flexiblas/issues/12
[3] https://src.fedoraproject.org/rpms/R/blob/rawhide/f/R.spec

-- 
I?aki ?car


From edd @end|ng |rom deb|@n@org  Thu Mar 18 12:52:49 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 18 Mar 2021 06:52:49 -0500
Subject: [Rd] boneheaded BLAS questions
In-Reply-To: <8bbb4557-f3ff-ff28-c704-408a7a1a43b8@gmail.com>
References: <c30f25fa-95f2-f6bf-60dd-f54e3c0afa6c@gmail.com>
 <24658.47614.579517.815516@rob.eddelbuettel.com>
 <967e49eb-2295-d35f-aa14-65f2df3bbe12@gmail.com>
 <8bbb4557-f3ff-ff28-c704-408a7a1a43b8@gmail.com>
Message-ID: <24659.16145.41542.140537@rob.eddelbuettel.com>


On 18 March 2021 at 09:15, Tomas Kalibera wrote:
| This is documented in R Admin manual, section A.3, and there is also 
| "configure --help".
| 
| On my Ubuntu 20.04, using "--with-blas --with-lapack" when a BLAS/LAPACK 
| implementation is installed via "apt" works for me:
| 
| with libblas3, liblapack3 I get in R via sessionInfo()
| 
| BLAS:?? /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
| LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0
| 
| then I install libopenblas0 and get, after re-starting R (not rebuilding):
| 
| BLAS:?? /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3
| LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3

Yes, thank you, that is exactly what I use and recommend too. And ...

On 18 March 2021 at 09:34, Tomas Kalibera wrote:
| and to install say MKL, this works for me:
| 
| apt-get install intel-mkl-full
| 
| and then:
| 
| env MKL_INTERFACE_LAYER=GNU,LP64 MKL_THREADING_LAYER=GNU R
| 
| gives me:
| 
| BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/libmkl_rt.so
| 
| This is following documentation in A.3.1.3 of R Admin manual.

... which is what the (surprisingly popular, 139 stars) simple two-year old
script at GitHub has been automated.

   https://github.com/eddelbuettel/mkl4deb

I may need to update the recommendation for the two MKL_* variables.

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From bbo|ker @end|ng |rom gm@||@com  Thu Mar 18 23:12:25 2021
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 18 Mar 2021 18:12:25 -0400
Subject: [Rd] boneheaded BLAS questions
In-Reply-To: <24659.16145.41542.140537@rob.eddelbuettel.com>
References: <c30f25fa-95f2-f6bf-60dd-f54e3c0afa6c@gmail.com>
 <24658.47614.579517.815516@rob.eddelbuettel.com>
 <967e49eb-2295-d35f-aa14-65f2df3bbe12@gmail.com>
 <8bbb4557-f3ff-ff28-c704-408a7a1a43b8@gmail.com>
 <24659.16145.41542.140537@rob.eddelbuettel.com>
Message-ID: <92c391f9-ecd9-f78e-75f5-18281c3cbb1c@gmail.com>

   For what it's worth I eventually got it to build in a hacky way (had 
to add -lopenblaslib manually).  FWIW I *did* RTFM, several times, but 
for whatever reason the standard recipes are not working for me ...

   thanks!
     Ben Bolker

On 3/18/21 7:52 AM, Dirk Eddelbuettel wrote:
> 
> On 18 March 2021 at 09:15, Tomas Kalibera wrote:
> | This is documented in R Admin manual, section A.3, and there is also
> | "configure --help".
> |
> | On my Ubuntu 20.04, using "--with-blas --with-lapack" when a BLAS/LAPACK
> | implementation is installed via "apt" works for me:
> |
> | with libblas3, liblapack3 I get in R via sessionInfo()
> |
> | BLAS:?? /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
> | LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0
> |
> | then I install libopenblas0 and get, after re-starting R (not rebuilding):
> |
> | BLAS:?? /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3
> | LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3
> 
> Yes, thank you, that is exactly what I use and recommend too. And ...
> 
> On 18 March 2021 at 09:34, Tomas Kalibera wrote:
> | and to install say MKL, this works for me:
> |
> | apt-get install intel-mkl-full
> |
> | and then:
> |
> | env MKL_INTERFACE_LAYER=GNU,LP64 MKL_THREADING_LAYER=GNU R
> |
> | gives me:
> |
> | BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/libmkl_rt.so
> |
> | This is following documentation in A.3.1.3 of R Admin manual.
> 
> ... which is what the (surprisingly popular, 139 stars) simple two-year old
> script at GitHub has been automated.
> 
>     https://github.com/eddelbuettel/mkl4deb
> 
> I may need to update the recommendation for the two MKL_* variables.
> 
> Dirk
>


From ||one| @end|ng |rom r@tud|o@com  Fri Mar 19 19:21:36 2021
From: ||one| @end|ng |rom r@tud|o@com (Lionel Henry)
Date: Fri, 19 Mar 2021 19:21:36 +0100
Subject: [Rd] R extension memory leak detection question
In-Reply-To: <b0b80c39-2931-cd4e-ef6f-5cff9e9678c8@gmail.com>
References: <CANjVfJ2xXfinnpYgEoH_0dwvG=29FFMinuV+1cOueSrRMNyq9A@mail.gmail.com>
 <b0b80c39-2931-cd4e-ef6f-5cff9e9678c8@gmail.com>
Message-ID: <CAJf4E3pJiF4U=w89P1UH6jDFbNM6Mwxu=r8EDfGjbtNmeLesuw@mail.gmail.com>

> Still, memory leaks are possible if the program forgets about a
> pointer to some piece of memory no longer needed, and keeps that
> pointer in say some global structure. Such memory leaks would not be
> found using address sanitizer.

We had a few cases of this in the past. Given the difficulty of
tracing the leaking references, we wrote this package for taking
snapshots of the R heap and finding dominators and shortest paths
between nodes:

Repo: https://github.com/r-lib/memtools
Vignette: https://memtools.r-lib.org/articles/memtools.html

One issue that complicates taking snapshots is that R doesn't expose
the GC roots. In practice, only the precious list is needed I think.
Would you consider a patch that allows retrieving the precious list
for debugging purposes via a `.Internal()` call?

Best,
Lionel


On 3/15/21, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> On 3/12/21 7:43 PM, xiaoyan yu wrote:
>> I am writing C++ program based on R extensions and also try to test the
>> program with google address sanitizer.
>>
>> I thought if I don't protect the variable from the allocation API such as
>> Rf_allocVector, there will be a memory leak. However, the address
>> sanitizer
>> didn't report it. Is my understanding correct? Or I will see the memory
>> leak only if I compile R source code with the address sanitizer.
>
> Yes, you should use special options for compilation and linking to use
> address sanitizer. See Writing R Extensions, section 4.3.3.
>
> If you allocate an R object using Rf_allocVector(), but don't protect
> it, it means this object is available for the garbage collector to
> reclaim. So it is not a memory leak.
>
> Memory leaks with a garbage collector are much less common than without,
> because if the program loses a pointer to some piece of memory, that
> piece will automatically be reclaimed (not leaked). Still, memory leaks
> are possible if the program forgets about a pointer to some piece of
> memory no longer needed, and keeps that pointer in say some global
> structure. Such memory leaks would not be found using address sanitizer.
>
> Address sanitizer/Undefined behavior sanitizer can sometimes find errors
> caused by that the program forgets to protect an R object, but this is
> relatively rare, as they don't understand R heap specifically, so you
> cannot assume that if you create such example, the error will always be
> found.
>
> Best
> Tomas
>
>>
>>   Please help!
>>
>> Thanks,
>> Xiaoyan
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From edd @end|ng |rom deb|@n@org  Sat Mar 20 17:51:41 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 20 Mar 2021 11:51:41 -0500
Subject: [Rd] Possible x11 window manager window aggregation under one icon?
Message-ID: <24662.10270.163829.883433@rob.eddelbuettel.com>


[ I hope the Subject: is arcane enough to reduce readership to a handful :) ]

Running the default window manager in the Linux distribution I am running,
multiple 'windows' of the same program are usually aggregated under one icon.
I typically have numerous (gnome) terminals, several top-level emacs windows,
likely more than brower window (even with tabs) and so on. They all aggregate
under the top-level icon

R plots however all have one each. Needless to say I may also have more than
one plot device open...  Would anyone know how we can force these to
aggregate under just one?  I had some digital fingerprints on the .desktop
file that ships with simply because someone first sent it to me as a patch
for the Debian package. But I know nuttin' about the XDG desktop
specification and all that. I had one idea regarding window titles, but those
are different for the terminals and emacs windows too.  Anybody have an idea?

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From irederik m@iii@g oii oib@@et  Mon Mar 22 06:05:07 2021
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Sun, 21 Mar 2021 22:05:07 -0700
Subject: [Rd] Faster sorting algorithm...
In-Reply-To: <CAL0QV_Nn0NzgkG6txQbV6tdjpNPmawy_NZWR-LtsvNrAwj2Xow@mail.gmail.com>
References: <mailman.51399.5.1615892401.47839.r-devel@r-project.org>
 <20210317003637.GA16475@mail.cs.toronto.edu>
 <CAL0QV_Nn0NzgkG6txQbV6tdjpNPmawy_NZWR-LtsvNrAwj2Xow@mail.gmail.com>
Message-ID: <20210322050507.ci5dv3u536danlp2@localhost>

I think it is "Professor Neal" :)

I also appreciate the pqR comparisons.

On Wed, Mar 17, 2021 at 09:23:15AM +0000, Morgan Morgan wrote:
>Thank you Neal. This is interesting. I will have a look at pqR.
>Indeed radix only does C collation, I believe that is why it is not the
>default choice for character ordering and sorting.
>Not sure but I believe it can help address the following bugzilla item:
>https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17400
>
>On the same topic of collation, there is an experimental sorting function
>"psort" in package kit that might help address this issue.
>
>> library(kit)
>Attaching kit 0.0.7 (OPENMP enabled using 1 thread)
>> x <- c("b","A","B","a","\xe4")
>> Encoding(x) <- "latin1"
>> identical(psort(x, c.locale=FALSE), sort(x))
>[1] TRUE
>> identical(psort(x, c.locale=TRUE), sort(x, method="radix"))
>[1] TRUE
>
>Coming back to the topic of fsort, I have just finished the implementation
>for double, integer, factor and logical.
>The implementation takes into account NA, Inf.. values. Values can be
>sorted in a decreasing order or increasing order.
>Comparing benchmark with the current implementation in data.table, it is
>currently over 30% faster.
>There might bugs but I am sure performance can be further improved as I did
>not really try hard.
>If there is interest in both the implementation and cross community
>sharing, please let know....
>
>Best regards,
>Morgan
>
>On Wed, 17 Mar 2021, 00:37 Radford Neal, <radford at cs.toronto.edu> wrote:
>
>> Those interested in faster sorting may want to look at the merge sort
>> implemented in pqR (see pqR-project.org).  It's often used as the
>> default, because it is stable, and does different collations, while
>> being faster than shell sort (except for small vectors).
>>
>> Here are examples, with timings, for pqR-2020-07-23 and R-4.0.2,
>> compiled identically:
>>
>> -----------------------------
>> pqR-2020-07-23 in C locale:
>>
>> > set.seed(1)
>> > N <- 1000000
>> > x <- as.character (sample(N,N,replace=TRUE))
>> > print(system.time (os <- order(x,method="shell")))
>>    user  system elapsed
>>   1.332   0.000   1.334
>> > print(system.time (or <- order(x,method="radix")))
>>    user  system elapsed
>>   0.092   0.004   0.096
>> > print(system.time (om <- order(x,method="merge")))
>>    user  system elapsed
>>   0.363   0.000   0.363
>> > print(identical(os,or))
>> [1] TRUE
>> > print(identical(os,om))
>> [1] TRUE
>> >
>> > x <- c("a","~")
>> > print(order(x,method="shell"))
>> [1] 1 2
>> > print(order(x,method="radix"))
>> [1] 1 2
>> > print(order(x,method="merge"))
>> [1] 1 2
>>
>> -----------------------------
>> R-4.0.2 in C locale:
>>
>> > set.seed(1)
>> > N <- 1000000
>> > x <- as.character (sample(N,N,replace=TRUE))
>> > print(system.time (os <- order(x,method="shell")))
>>    user  system elapsed
>>   2.381   0.004   2.387
>> > print(system.time (or <- order(x,method="radix")))
>>    user  system elapsed
>>   0.138   0.000   0.137
>> > #print(system.time (om <- order(x,method="merge")))
>> > print(identical(os,or))
>> [1] TRUE
>> > #print(identical(os,om))
>> >
>> > x <- c("a","~")
>> > print(order(x,method="shell"))
>> [1] 1 2
>> > print(order(x,method="radix"))
>> [1] 1 2
>> > #print(order(x,method="merge"))
>>
>> ------------------------------------
>> pqR-2020-07-23 in fr_CA.utf8 locale:
>>
>> > set.seed(1)
>> > N <- 1000000
>> > x <- as.character (sample(N,N,replace=TRUE))
>> > print(system.time (os <- order(x,method="shell")))
>> utilisateur     syst?me      ?coul?
>>       2.960       0.000       2.962
>> > print(system.time (or <- order(x,method="radix")))
>> utilisateur     syst?me      ?coul?
>>       0.083       0.008       0.092
>> > print(system.time (om <- order(x,method="merge")))
>> utilisateur     syst?me      ?coul?
>>       1.143       0.000       1.142
>> > print(identical(os,or))
>> [1] TRUE
>> > print(identical(os,om))
>> [1] TRUE
>> >
>> > x <- c("a","~")
>> > print(order(x,method="shell"))
>> [1] 2 1
>> > print(order(x,method="radix"))
>> [1] 1 2
>> > print(order(x,method="merge"))
>> [1] 2 1
>>
>> ------------------------------------
>> R-4.0.2 in fr_CA.utf8 locale:
>>
>> > set.seed(1)
>> > N <- 1000000
>> > x <- as.character (sample(N,N,replace=TRUE))
>> > print(system.time (os <- order(x,method="shell")))
>> utilisateur     syst?me      ?coul?
>>       4.222       0.016       4.239
>> > print(system.time (or <- order(x,method="radix")))
>> utilisateur     syst?me      ?coul?
>>       0.136       0.000       0.137
>> > #print(system.time (om <- order(x,method="merge")))
>> > print(identical(os,or))
>> [1] TRUE
>> > #print(identical(os,om))
>> >
>> > x <- c("a","~")
>> > print(order(x,method="shell"))
>> [1] 2 1
>> > print(order(x,method="radix"))
>> [1] 1 2
>> > #print(order(x,method="merge"))
>>
>>
>> pqR is faster in all the tests, but more relevant to this discussion
>> is that the "merge" method is substantially faster than "shell" for
>> these character vectors with a million elements, while retaining the
>> stability and collation properties of "shell" (whereas "radix" only
>> does C collation).
>>
>> It would probably not be too hard to take the merge sort code from pqR
>> and use it in R core's implementation.
>>
>> The merge sort in pqR doesn't exploit parallelism at the moment, but
>> merge sort is potentially quite parallelizable (though I think the
>> storage allocation strategy I use would have to be modified).
>>
>> Regards,
>>
>>    Radford Neal
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>	[[alternative HTML version deleted]]
>
>______________________________________________
>R-devel at r-project.org mailing list
>https://stat.ethz.ch/mailman/listinfo/r-devel
>


From morg@n@em@||box @end|ng |rom gm@||@com  Mon Mar 22 07:15:01 2021
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Mon, 22 Mar 2021 06:15:01 +0000
Subject: [Rd] Faster sorting algorithm...
In-Reply-To: <20210322050507.ci5dv3u536danlp2@localhost>
References: <mailman.51399.5.1615892401.47839.r-devel@r-project.org>
 <20210317003637.GA16475@mail.cs.toronto.edu>
 <CAL0QV_Nn0NzgkG6txQbV6tdjpNPmawy_NZWR-LtsvNrAwj2Xow@mail.gmail.com>
 <20210322050507.ci5dv3u536danlp2@localhost>
Message-ID: <CAL0QV_OSeGN2PWZhut7DbJ_wcm5VYpyvQp70hwfCjy4FE8ZQQw@mail.gmail.com>

My apologies to Professor Neal.
Thank you for correcting me.
Best regards
Morgan


On Mon, 22 Mar 2021, 05:05 , <frederik at ofb.net> wrote:

> I think it is "Professor Neal" :)
>
> I also appreciate the pqR comparisons.
>
> On Wed, Mar 17, 2021 at 09:23:15AM +0000, Morgan Morgan wrote:
> >Thank you Neal. This is interesting. I will have a look at pqR.
> >Indeed radix only does C collation, I believe that is why it is not the
> >default choice for character ordering and sorting.
> >Not sure but I believe it can help address the following bugzilla item:
> >https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17400
> >
> >On the same topic of collation, there is an experimental sorting function
> >"psort" in package kit that might help address this issue.
> >
> >> library(kit)
> >Attaching kit 0.0.7 (OPENMP enabled using 1 thread)
> >> x <- c("b","A","B","a","\xe4")
> >> Encoding(x) <- "latin1"
> >> identical(psort(x, c.locale=FALSE), sort(x))
> >[1] TRUE
> >> identical(psort(x, c.locale=TRUE), sort(x, method="radix"))
> >[1] TRUE
> >
> >Coming back to the topic of fsort, I have just finished the implementation
> >for double, integer, factor and logical.
> >The implementation takes into account NA, Inf.. values. Values can be
> >sorted in a decreasing order or increasing order.
> >Comparing benchmark with the current implementation in data.table, it is
> >currently over 30% faster.
> >There might bugs but I am sure performance can be further improved as I
> did
> >not really try hard.
> >If there is interest in both the implementation and cross community
> >sharing, please let know....
> >
> >Best regards,
> >Morgan
> >
> >On Wed, 17 Mar 2021, 00:37 Radford Neal, <radford at cs.toronto.edu> wrote:
> >
> >> Those interested in faster sorting may want to look at the merge sort
> >> implemented in pqR (see pqR-project.org).  It's often used as the
> >> default, because it is stable, and does different collations, while
> >> being faster than shell sort (except for small vectors).
> >>
> >> Here are examples, with timings, for pqR-2020-07-23 and R-4.0.2,
> >> compiled identically:
> >>
> >> -----------------------------
> >> pqR-2020-07-23 in C locale:
> >>
> >> > set.seed(1)
> >> > N <- 1000000
> >> > x <- as.character (sample(N,N,replace=TRUE))
> >> > print(system.time (os <- order(x,method="shell")))
> >>    user  system elapsed
> >>   1.332   0.000   1.334
> >> > print(system.time (or <- order(x,method="radix")))
> >>    user  system elapsed
> >>   0.092   0.004   0.096
> >> > print(system.time (om <- order(x,method="merge")))
> >>    user  system elapsed
> >>   0.363   0.000   0.363
> >> > print(identical(os,or))
> >> [1] TRUE
> >> > print(identical(os,om))
> >> [1] TRUE
> >> >
> >> > x <- c("a","~")
> >> > print(order(x,method="shell"))
> >> [1] 1 2
> >> > print(order(x,method="radix"))
> >> [1] 1 2
> >> > print(order(x,method="merge"))
> >> [1] 1 2
> >>
> >> -----------------------------
> >> R-4.0.2 in C locale:
> >>
> >> > set.seed(1)
> >> > N <- 1000000
> >> > x <- as.character (sample(N,N,replace=TRUE))
> >> > print(system.time (os <- order(x,method="shell")))
> >>    user  system elapsed
> >>   2.381   0.004   2.387
> >> > print(system.time (or <- order(x,method="radix")))
> >>    user  system elapsed
> >>   0.138   0.000   0.137
> >> > #print(system.time (om <- order(x,method="merge")))
> >> > print(identical(os,or))
> >> [1] TRUE
> >> > #print(identical(os,om))
> >> >
> >> > x <- c("a","~")
> >> > print(order(x,method="shell"))
> >> [1] 1 2
> >> > print(order(x,method="radix"))
> >> [1] 1 2
> >> > #print(order(x,method="merge"))
> >>
> >> ------------------------------------
> >> pqR-2020-07-23 in fr_CA.utf8 locale:
> >>
> >> > set.seed(1)
> >> > N <- 1000000
> >> > x <- as.character (sample(N,N,replace=TRUE))
> >> > print(system.time (os <- order(x,method="shell")))
> >> utilisateur     syst?me      ?coul?
> >>       2.960       0.000       2.962
> >> > print(system.time (or <- order(x,method="radix")))
> >> utilisateur     syst?me      ?coul?
> >>       0.083       0.008       0.092
> >> > print(system.time (om <- order(x,method="merge")))
> >> utilisateur     syst?me      ?coul?
> >>       1.143       0.000       1.142
> >> > print(identical(os,or))
> >> [1] TRUE
> >> > print(identical(os,om))
> >> [1] TRUE
> >> >
> >> > x <- c("a","~")
> >> > print(order(x,method="shell"))
> >> [1] 2 1
> >> > print(order(x,method="radix"))
> >> [1] 1 2
> >> > print(order(x,method="merge"))
> >> [1] 2 1
> >>
> >> ------------------------------------
> >> R-4.0.2 in fr_CA.utf8 locale:
> >>
> >> > set.seed(1)
> >> > N <- 1000000
> >> > x <- as.character (sample(N,N,replace=TRUE))
> >> > print(system.time (os <- order(x,method="shell")))
> >> utilisateur     syst?me      ?coul?
> >>       4.222       0.016       4.239
> >> > print(system.time (or <- order(x,method="radix")))
> >> utilisateur     syst?me      ?coul?
> >>       0.136       0.000       0.137
> >> > #print(system.time (om <- order(x,method="merge")))
> >> > print(identical(os,or))
> >> [1] TRUE
> >> > #print(identical(os,om))
> >> >
> >> > x <- c("a","~")
> >> > print(order(x,method="shell"))
> >> [1] 2 1
> >> > print(order(x,method="radix"))
> >> [1] 1 2
> >> > #print(order(x,method="merge"))
> >>
> >>
> >> pqR is faster in all the tests, but more relevant to this discussion
> >> is that the "merge" method is substantially faster than "shell" for
> >> these character vectors with a million elements, while retaining the
> >> stability and collation properties of "shell" (whereas "radix" only
> >> does C collation).
> >>
> >> It would probably not be too hard to take the merge sort code from pqR
> >> and use it in R core's implementation.
> >>
> >> The merge sort in pqR doesn't exploit parallelism at the moment, but
> >> merge sort is potentially quite parallelizable (though I think the
> >> storage allocation strategy I use would have to be modified).
> >>
> >> Regards,
> >>
> >>    Radford Neal
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> >______________________________________________
> >R-devel at r-project.org mailing list
> >https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>

	[[alternative HTML version deleted]]


From n@r@@ @end|ng |rom @t@n|ord@edu  Mon Mar 22 18:27:03 2021
From: n@r@@ @end|ng |rom @t@n|ord@edu (Balasubramanian Narasimhan)
Date: Mon, 22 Mar 2021 10:27:03 -0700
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <24662.10270.163829.883433@rob.eddelbuettel.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
Message-ID: <c54167e4-59c8-13fc-6f6e-09fbc32fe221@stanford.edu>

Confession: haven't done this in decades.

Isn't the usual way to use 'xwininfo' to figure out the information 
about any X window and set a specific resource in the .X11defaults or 
equivalent?? Also doing the same with windows that aggregate could yield 
a common resource, perhaps?

-Naras

On 3/20/21 9:51 AM, Dirk Eddelbuettel wrote:
> [ I hope the Subject: is arcane enough to reduce readership to a handful :) ]
>
> Running the default window manager in the Linux distribution I am running,
> multiple 'windows' of the same program are usually aggregated under one icon.
> I typically have numerous (gnome) terminals, several top-level emacs windows,
> likely more than brower window (even with tabs) and so on. They all aggregate
> under the top-level icon
>
> R plots however all have one each. Needless to say I may also have more than
> one plot device open...  Would anyone know how we can force these to
> aggregate under just one?  I had some digital fingerprints on the .desktop
> file that ships with simply because someone first sent it to me as a patch
> for the Debian package. But I know nuttin' about the XDG desktop
> specification and all that. I had one idea regarding window titles, but those
> are different for the terminals and emacs windows too.  Anybody have an idea?
>
> Dirk
>


From pd@me@ @end|ng |rom cb@@dk  Mon Mar 22 18:42:45 2021
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Mon, 22 Mar 2021 17:42:45 +0000
Subject: [Rd] R 4.0.5 scheduled for March 31
Message-ID: <777ED63B-568F-45A2-A11E-9095F441A2D1@cbs.dk>

Full schedule is available on https://developer.r-project.org (or https://svn.r-project.org/R-dev-web/trunk/index.html for the impatient).

(This is a fast-track release, to resolve an issue with Asian character sets and another issue with R CMD build, before R 4.1.0)

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From kry|ov@r00t @end|ng |rom gm@||@com  Mon Mar 22 20:32:54 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Mon, 22 Mar 2021 22:32:54 +0300
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <24662.10270.163829.883433@rob.eddelbuettel.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
Message-ID: <20210322223254.5434ff0d@Tarkus>

On Sat, 20 Mar 2021 11:51:41 -0500
Dirk Eddelbuettel <edd at debian.org> wrote:

> R plots however all have one each. Needless to say I may also have
> more than one plot device open...  Would anyone know how we can force
> these to aggregate under just one?

Grouping seems to be achieved by setting the window_group component of
the WM_HINTS property of the window:

https://www.x.org/releases/X11R7.6/doc/xorg-docs/specs/ICCCM/icccm.html#wm_hints_property

ICCCM goes on to say that "The window group leader may be a window that
exists only for that purpose <...> [not] mapped either by the client or
by the window manager".

Is that enough of a direction? I have only ever written X11 code using
xcb, not Xlib, but I could try to help further if needed.

-- 
Best regards,
Ivan


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Mar 22 20:42:04 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 22 Mar 2021 15:42:04 -0400
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <20210322223254.5434ff0d@Tarkus>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
Message-ID: <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>

On 22/03/2021 3:32 p.m., Ivan Krylov wrote:
> On Sat, 20 Mar 2021 11:51:41 -0500
> Dirk Eddelbuettel <edd at debian.org> wrote:
> 
>> R plots however all have one each. Needless to say I may also have
>> more than one plot device open...  Would anyone know how we can force
>> these to aggregate under just one?
> 
> Grouping seems to be achieved by setting the window_group component of
> the WM_HINTS property of the window:
> 
> https://www.x.org/releases/X11R7.6/doc/xorg-docs/specs/ICCCM/icccm.html#wm_hints_property
> 
> ICCCM goes on to say that "The window group leader may be a window that
> exists only for that purpose <...> [not] mapped either by the client or
> by the window manager".
> 
> Is that enough of a direction? I have only ever written X11 code using
> xcb, not Xlib, but I could try to help further if needed.
> 

I just did a quick grep of the R-devel sources, and don't see WM_HINTS 
used there at all.  (This is after searching rgl sources, with the same 
result.)  I'd be happy to add something to rgl if you could point me to 
an example:  it also uses Xlib like R, so once that works I could 
propose a patch to R.

Duncan Murdoch


From edd @end|ng |rom deb|@n@org  Mon Mar 22 20:54:43 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 22 Mar 2021 14:54:43 -0500
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
Message-ID: <24664.62979.175738.452655@rob.eddelbuettel.com>


(Group reply to three emails at once)

On 22 March 2021 at 10:27, Balasubramanian Narasimhan wrote:
| Confession: haven't done this in decades.

Equally green here.
 
| Isn't the usual way to use 'xwininfo' to figure out the information 
| about any X window and set a specific resource in the .X11defaults or 
| equivalent?? Also doing the same with windows that aggregate could yield 
| a common resource, perhaps?

Could be.


On 22 March 2021 at 22:32, Ivan Krylov wrote:
| Grouping seems to be achieved by setting the window_group component of
| the WM_HINTS property of the window:
| 
| https://www.x.org/releases/X11R7.6/doc/xorg-docs/specs/ICCCM/icccm.html#wm_hints_property
| 
| ICCCM goes on to say that "The window group leader may be a window that
| exists only for that purpose <...> [not] mapped either by the client or
| by the window manager".
| 
| Is that enough of a direction? I have only ever written X11 code using
| xcb, not Xlib, but I could try to help further if needed.

That is quite promising. Just like Duncan I see now WM_HINTS yet, so maybe by
just giving them we can improve?


On 22 March 2021 at 15:42, Duncan Murdoch wrote:
| I just did a quick grep of the R-devel sources, and don't see WM_HINTS 
| used there at all.  (This is after searching rgl sources, with the same 
| result.)  I'd be happy to add something to rgl if you could point me to 
| an example:  it also uses Xlib like R, so once that works I could 
| propose a patch to R.

I'd love for us to put the focus back to src/modules/X11/devX11.{c,h} :)

The original email I got for the Debian patch that then made it into R's
sources is still here:
  https://sources.debian.org/src/r-base/4.0.4-1/debian/icon-class-patch/

And I think we somehow need to aggregate all three strands: the Xtoolkit
-based info Naras alluded to, and possibly adding hints as identified by
Ivan. It might help to spy on "any" other better-behaving X11 client.

Dirk


-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From kry|ov@r00t @end|ng |rom gm@||@com  Mon Mar 22 22:01:21 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 23 Mar 2021 00:01:21 +0300
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
Message-ID: <20210323000121.66c76f27@Tarkus>

On Mon, 22 Mar 2021 15:42:04 -0400
Duncan Murdoch <murdoch.duncan at gmail.com> wrote:

> I'd be happy to add something to rgl if you could point me to 
> an example

On Mon, 22 Mar 2021 14:54:43 -0500
Dirk Eddelbuettel <edd at debian.org> wrote:

> Just like Duncan I see now WM_HINTS yet, so maybe by
> just giving them we can improve?

The surrounding code and
<https://tronche.com/gui/x/xlib/ICC/client-to-window-manager/wm-hints.html>
proved to be enough of an example. The following patch makes it
possible to group x11() windows on my PC with Xfce running:

-----------------------------------8<-----------------------------------
Index: src/modules/X11/devX11.c
===================================================================
--- src/modules/X11/devX11.c	(revision 80104)
+++ src/modules/X11/devX11.c	(working copy)
@@ -105,7 +105,7 @@
 static Display *display;			/* Display */
 static char dspname[101]="";
 static int screen;				/* Screen */
-static Window rootwin;				/* Root Window */
+static Window rootwin, group_leader;		/* Root Window, Group leader */
 static Visual *visual;				/* Visual */
 static int depth;				/* Pixmap depth */
 static int Vclass;				/* Visual class */
@@ -1617,6 +1617,16 @@
                             PropModeReplace,
                             (const unsigned char*) rlogo_icon, 2 + 99*77);
 
+	    /* set the window group leader */
+	    XWMHints * hints;
+	    hints = XAllocWMHints();
+	    if (hints) {
+		hints->window_group = group_leader;
+		hints->flags |= WindowGroupHint;
+		XSetWMHints(display, xd->window, hints);
+		XFree(hints);
+	    }
+
 	    /* set up protocols so that window manager sends */
 	    /* me an event when user "destroys" window */
 	    _XA_WM_PROTOCOLS = XInternAtom(display, "WM_PROTOCOLS", 0);
@@ -2109,6 +2119,7 @@
     if (numX11Devices == 0)  {
 	int fd = ConnectionNumber(display);
 	/* Free Resources Here */
+	XDestroyWindow(display, group_leader);
 	while (nfonts--)
 	      R_XFreeFont(display, fontcache[nfonts].font);
 	nfonts = 0;
@@ -3133,6 +3144,9 @@
 #endif
     screen = DefaultScreen(display);
     rootwin = DefaultRootWindow(display);
+    group_leader = XCreateSimpleWindow( /* never mapped or visible */
+	display, rootwin, 0, 0, 1, 1, 0, 0, 0
+    );
     depth = DefaultDepth(display, screen);
     visual = DefaultVisual(display, screen);
     colormap = DefaultColormap(display, screen);
-----------------------------------8<-----------------------------------

Some very limited testing didn't seem to uncover any problems.

-- 
Best regards,
Ivan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: groups.png
Type: image/png
Size: 4393 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20210323/b2552350/attachment.png>

From edd @end|ng |rom deb|@n@org  Mon Mar 22 22:57:48 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 22 Mar 2021 16:57:48 -0500
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <20210323000121.66c76f27@Tarkus>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
Message-ID: <24665.4828.899674.534062@rob.eddelbuettel.com>


On 23 March 2021 at 00:01, Ivan Krylov wrote:
| The surrounding code and
| <https://tronche.com/gui/x/xlib/ICC/client-to-window-manager/wm-hints.html>
| proved to be enough of an example. The following patch makes it
| possible to group x11() windows on my PC with Xfce running:

[...]

| Some very limited testing didn't seem to uncover any problems.

Woot woot -- works here too under Ubuntu 20.10 / Gnome / Unity.

I applied the adorably small patch to the usual checkout I keep of r-devel
(as an incremental build is faster than a full package build of r-release).

You are my hero. Next round of hot or cold beverages is on me. Already looks
so much better. I may put this into the next 4.0.5 (or 4.1.0 at the latest)
for Debian and Ubuntu (but will instrument a proper new r-base package and
hit it for a few days first).

Do you want to send a proper patch to bugzilla?

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From edd @end|ng |rom deb|@n@org  Tue Mar 23 04:23:47 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 22 Mar 2021 22:23:47 -0500
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <24665.4828.899674.534062@rob.eddelbuettel.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
Message-ID: <24665.24387.615121.367408@rob.eddelbuettel.com>


On 22 March 2021 at 16:57, Dirk Eddelbuettel wrote:
| 
| On 23 March 2021 at 00:01, Ivan Krylov wrote:
| | The surrounding code and
| | <https://tronche.com/gui/x/xlib/ICC/client-to-window-manager/wm-hints.html>
| | proved to be enough of an example. The following patch makes it
| | possible to group x11() windows on my PC with Xfce running:
| 
| [...]
| 
| | Some very limited testing didn't seem to uncover any problems.
| 
| Woot woot -- works here too under Ubuntu 20.10 / Gnome / Unity.
| 
| I applied the adorably small patch to the usual checkout I keep of r-devel
| (as an incremental build is faster than a full package build of r-release).
| 
| You are my hero. Next round of hot or cold beverages is on me. Already looks
| so much better. I may put this into the next 4.0.5 (or 4.1.0 at the latest)
| for Debian and Ubuntu (but will instrument a proper new r-base package and
| hit it for a few days first).

Close, close, close but no cigar yet: For a given R process, x11() windows
group for a that process. But we often run multiple R processes.  Have you
seen anything for grouping under the "program" (in some sense) but not the
concrete process from it?

( If someone wants to play, Ubuntu binaries for groovy == 20.10 are at
  https://launchpad.net/~edd/+archive/ubuntu/misc/?field.series_filter=groovy )

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Mar 23 11:03:06 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 23 Mar 2021 11:03:06 +0100
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <24665.24387.615121.367408@rob.eddelbuettel.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
Message-ID: <24665.48346.820286.625791@stat.math.ethz.ch>

>>>>> Dirk Eddelbuettel 
>>>>>     on Mon, 22 Mar 2021 22:23:47 -0500 writes:

    > On 22 March 2021 at 16:57, Dirk Eddelbuettel wrote:
    > | 
    > | On 23 March 2021 at 00:01, Ivan Krylov wrote:
    > | | The surrounding code and
    > | | <https://tronche.com/gui/x/xlib/ICC/client-to-window-manager/wm-hints.html>
    > | | proved to be enough of an example. The following patch makes it
    > | | possible to group x11() windows on my PC with Xfce running:
    > | 
    > | [...]
    > | 
    > | | Some very limited testing didn't seem to uncover any problems.
    > | 
    > | Woot woot -- works here too under Ubuntu 20.10 / Gnome / Unity.
    > | 
    > | I applied the adorably small patch to the usual checkout I keep of r-devel
    > | (as an incremental build is faster than a full package build of r-release).
    > | 
    > | You are my hero. Next round of hot or cold beverages is on me. Already looks
    > | so much better. I may put this into the next 4.0.5 (or 4.1.0 at the latest)
    > | for Debian and Ubuntu (but will instrument a proper new r-base package and
    > | hit it for a few days first).

    > Close, close, close but no cigar yet: For a given R process, x11() windows
    > group for a that process. But we often run multiple R processes.  Have you
    > seen anything for grouping under the "program" (in some sense) but not the
    > concrete process from it?

Hmm.. while I've been very happy with your (DE) original proposal and
the thread (with Ivan's nice small patch), I'm not sure I'd agree here.

Yes, you and I and a few handful more of people on the globe run
more than one *interactive* R process simultaneously.  But even
there, e.g., when I run  R-patched and R-devel, I'd sometimes rather keep
the two processes "separated", including their graphics windows,
because one important side condition of the workflow is to be
careful in comparing the two R versions.

And R is not firefox (where I really typically only want one
firefox running, already being a crazy process generator and
sometimes memory hog). 
The two (or more) different R processes are entirely autonomous
(in > 99.5% of cases), and I would rather have the current
proposal than a possibly quite a bit more complicated one which
I personally often would not even prefer...

With many thanks to Dirk, Naras, Ivan and Duncan for dealing
with the issue so nicely,

Martin

    > ( If someone wants to play, Ubuntu binaries for groovy == 20.10 are at
    > https://launchpad.net/~edd/+archive/ubuntu/misc/?field.series_filter=groovy )


    > Dirk

    > -- 
    > https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Mar 23 11:18:58 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 23 Mar 2021 13:18:58 +0300
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <24665.24387.615121.367408@rob.eddelbuettel.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
Message-ID: <20210323131858.4776a571@Tarkus>

On Mon, 22 Mar 2021 16:57:48 -0500
Dirk Eddelbuettel <edd at debian.org> wrote:

> Do you want to send a proper patch to bugzilla?

Would be glad to, especially if we manage to solve that problem you
uncovered while I was asleep.

On Mon, 22 Mar 2021 22:23:47 -0500
Dirk Eddelbuettel <edd at debian.org> wrote:

> Close, close, close but no cigar yet: For a given R process, x11()
> windows group for a that process. But we often run multiple R
> processes.  Have you seen anything for grouping under the
> "program" (in some sense) but not the concrete process from it?

Do windows from different Emacs processes group together the way you
want them to group? What other applications group together for you
despite running from different processes? Do they have the same window
id # of group leader in `xprop WM_HINTS`? I checked Firefox, but its
windows all seem to have the same _NET_WM_PID.

I decided to copy the way GVim sets its group leader ID (because I know
the windows are different processes _and_ that they group in Xfce) and
spent a while chasing this red herring before realising that (1) on my
PC, different x11() windows are still grouped together, even from
different R processes, even without the patch (I never used the "group
windows" option in xfce4-panel before) and (2) different GVim windows
actually have different group leader XIDs in their WM_HINTS properties.
Oops.

Apparently Xfce uses libwnck [*] which groups windows by WM_CLASS in
addition to WM_HINTS (as far as understand the code).

Here is what GNOME Shell does [**] besides looking at
WM_HINTS.window_group:

 - looks up the window's WM_CLASS in .desktop files known to it
 - looks up the window's _NET_WM_PID among running applications (?)
 - looks for an XDG startup notification matching the window
 - checks other things not likely applicable to R, such as sandbox IDs
   and GApplication IDs

Adding StartupWMClass=R_x11 to R.desktop (not part of R sources, but
part of the .deb package, I believe) should help GNOME Shell match all
x11() windows to a single application without any changes to devX11.c,
but I don't have GNOME installed to check it.

Alternatively, we can also add a _NET_WM_PID property to x11() windows
(in the hope that GNOME Shell matches the PIDs to the same binary), but
then we'd have to add the WM_CLIENT_MACHINE property too [***], which
is way more hacky than I would prefer it to be:

-----------------------------------8<-----------------------------------
Index: src/modules/X11/devX11.c
===================================================================
--- src/modules/X11/devX11.c	(revision 80104)
+++ src/modules/X11/devX11.c	(working copy)
@@ -52,6 +52,8 @@
 #endif
 #include <X11/keysymdef.h>
 
+#include <sys/utsname.h> /* for uname -> WM_CLIENT_MACHINE -> _NET_WM_PID */
+#include <unistd.h> /* getpid -> _NET_WM_PID */
 
 #define R_USE_PROTOTYPES 1
 #include <R_ext/GraphicsEngine.h>
@@ -105,7 +107,7 @@
 static Display *display;			/* Display */
 static char dspname[101]="";
 static int screen;				/* Screen */
-static Window rootwin;				/* Root Window */
+static Window rootwin, group_leader;		/* Root Window */
 static Visual *visual;				/* Visual */
 static int depth;				/* Pixmap depth */
 static int Vclass;				/* Visual class */
@@ -1617,6 +1619,39 @@
                             PropModeReplace,
                             (const unsigned char*) rlogo_icon, 2 + 99*77);
 
+	    /* set the window group leader */
+	    XWMHints * hints;
+	    hints = XAllocWMHints();
+	    if (hints) {
+		hints->window_group = group_leader;
+		hints->flags |= WindowGroupHint;
+		XSetWMHints(display, xd->window, hints);
+		XFree(hints);
+	    }
+
+	    /* Provide WM_CLIENT_MACHINE to set a valid _NET_WM_PID */
+	    struct utsname unm;
+	    if (uname(&unm)) goto no_wm_pid;
+	    char * nodename = &unm.nodename[0];
+	    XTextProperty hostname = {0}; /* initialise the value pointer */
+	    if (Success != XmbTextListToTextProperty(
+		display, &nodename, 1, XStringStyle, &hostname
+	    )) {
+		if (hostname.value) XFree(hostname.value);
+		goto no_wm_pid;
+	    }
+	    XSetWMClientMachine(display, xd->window, &hostname);
+	    XFree(hostname.value);
+
+	    /* set _NET_WM_PID */
+	    uint32_t mypid = (uint32_t)getpid(); /* must be CARDINAL(32) */
+            XChangeProperty(display, xd->window,
+                            XInternAtom(display, "_NET_WM_PID", False),
+                            XInternAtom(display, "CARDINAL", False), 32,
+                            PropModeReplace,
+                            (const unsigned char*) &mypid, 1);
+	    no_wm_pid:
+
 	    /* set up protocols so that window manager sends */
 	    /* me an event when user "destroys" window */
 	    _XA_WM_PROTOCOLS = XInternAtom(display, "WM_PROTOCOLS", 0);
@@ -2109,6 +2144,7 @@
     if (numX11Devices == 0)  {
 	int fd = ConnectionNumber(display);
 	/* Free Resources Here */
+	XDestroyWindow(display, group_leader);
 	while (nfonts--)
 	      R_XFreeFont(display, fontcache[nfonts].font);
 	nfonts = 0;
@@ -3133,6 +3169,9 @@
 #endif
     screen = DefaultScreen(display);
     rootwin = DefaultRootWindow(display);
+    group_leader = XCreateSimpleWindow(
+	display, rootwin, 0, 0, 1, 1, 0, 0, 0
+    );
     depth = DefaultDepth(display, screen);
     visual = DefaultVisual(display, screen);
     colormap = DefaultColormap(display, screen);
-----------------------------------8<-----------------------------------

-- 
Best regards,
Ivan

[*] 
https://gitlab.gnome.org/GNOME/libwnck/-/blob/master/libwnck/class-group.c
https://gitlab.gnome.org/GNOME/libwnck/-/blob/master/libwnck/window.c

[**]
https://gitlab.gnome.org/GNOME/gnome-shell/-/blob/4dfc53ca/src/shell-window-tracker.c#L371

[***]
https://specifications.freedesktop.org/wm-spec/1.3/ar01s05.html#idm45225103239616


From edd @end|ng |rom deb|@n@org  Tue Mar 23 13:44:08 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 23 Mar 2021 07:44:08 -0500
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <20210323131858.4776a571@Tarkus>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
Message-ID: <24665.58008.716939.48751@rob.eddelbuettel.com>


On 23 March 2021 at 13:18, Ivan Krylov wrote:
| On Mon, 22 Mar 2021 16:57:48 -0500
| Dirk Eddelbuettel <edd at debian.org> wrote:
| 
| > Do you want to send a proper patch to bugzilla?
| 
| Would be glad to, especially if we manage to solve that problem you
| uncovered while I was asleep.
| 
| On Mon, 22 Mar 2021 22:23:47 -0500
| Dirk Eddelbuettel <edd at debian.org> wrote:
| 
| > Close, close, close but no cigar yet: For a given R process, x11()
| > windows group for a that process. But we often run multiple R
| > processes.  Have you seen anything for grouping under the
| > "program" (in some sense) but not the concrete process from it?
| 
| Do windows from different Emacs processes group together the way you
| want them to group? What other applications group together for you
| despite running from different processes? Do they have the same window
| id # of group leader in `xprop WM_HINTS`? I checked Firefox, but its
| windows all seem to have the same _NET_WM_PID.

"All of them, but R".

Right now (under unity) I have four for Gnome Terminal (clearly distinct
processes), two for Chrome (plus more temporarily), and two for emacs (two
windows from same process, I checked that launching a new one clearly
aggregates within).

But R is different, and I see this as a bug.  How "grave" it is is open for
debate, but the application behaves differently under the window manager.

The overall behaviour is consistent, yet R sticks out. I think it shouldn't.

| I decided to copy the way GVim sets its group leader ID (because I know
| the windows are different processes _and_ that they group in Xfce) and
| spent a while chasing this red herring before realising that (1) on my
| PC, different x11() windows are still grouped together, even from
| different R processes, even without the patch (I never used the "group
| windows" option in xfce4-panel before) and (2) different GVim windows
| actually have different group leader XIDs in their WM_HINTS properties.
| Oops.

Hah!
 
| Apparently Xfce uses libwnck [*] which groups windows by WM_CLASS in
| addition to WM_HINTS (as far as understand the code).
| 
| Here is what GNOME Shell does [**] besides looking at
| WM_HINTS.window_group:
| 
|  - looks up the window's WM_CLASS in .desktop files known to it
|  - looks up the window's _NET_WM_PID among running applications (?)
|  - looks for an XDG startup notification matching the window
|  - checks other things not likely applicable to R, such as sandbox IDs
|    and GApplication IDs
| 
| Adding StartupWMClass=R_x11 to R.desktop (not part of R sources, but
| part of the .deb package, I believe) should help GNOME Shell match all
| x11() windows to a single application without any changes to devX11.c,
| but I don't have GNOME installed to check it.

Easy enough for me to check, but I won't get to it for a bit.

| Alternatively, we can also add a _NET_WM_PID property to x11() windows
| (in the hope that GNOME Shell matches the PIDs to the same binary), but
| then we'd have to add the WM_CLIENT_MACHINE property too [***], which
| is way more hacky than I would prefer it to be:

[proposed change set omitted]

Ok. You did amazing. I had poked around a little in one or two apps but not
made any progress.

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From edd @end|ng |rom deb|@n@org  Tue Mar 23 14:15:03 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 23 Mar 2021 08:15:03 -0500
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <24665.58008.716939.48751@rob.eddelbuettel.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <24665.58008.716939.48751@rob.eddelbuettel.com>
Message-ID: <24665.59863.891275.177042@rob.eddelbuettel.com>


On 23 March 2021 at 07:44, Dirk Eddelbuettel wrote:
| On 23 March 2021 at 13:18, Ivan Krylov wrote:
| | Apparently Xfce uses libwnck [*] which groups windows by WM_CLASS in
| | addition to WM_HINTS (as far as understand the code).
| | 
| | Here is what GNOME Shell does [**] besides looking at
| | WM_HINTS.window_group:
| | 
| |  - looks up the window's WM_CLASS in .desktop files known to it
| |  - looks up the window's _NET_WM_PID among running applications (?)
| |  - looks for an XDG startup notification matching the window
| |  - checks other things not likely applicable to R, such as sandbox IDs
| |    and GApplication IDs
| | 
| | Adding StartupWMClass=R_x11 to R.desktop (not part of R sources, but
| | part of the .deb package, I believe) should help GNOME Shell match all
| | x11() windows to a single application without any changes to devX11.c,
| | but I don't have GNOME installed to check it.
| 
| Easy enough for me to check, but I won't get to it for a bit.

Ok, I tried. And amazingly that worked (with a small "but")!

Added the line to the (installed) /usr/share/applications/R.desktop,
asked Gnome Shell to restart (Alt-F2, then r [where r standards for restart,
not littler ;-) ]) and the (existing) two windows (from two distinct 'live'
and long-running plot/monitor sessions) are now regrouped in the 'dock',
which would for the first time be correct behaviour under Gnome (as I
understand it).

Only one small downside: the regrouped icon switches to the old R icon (which
is probably the one we bitmapped).  Would you know how we could force the new
one?

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From edd @end|ng |rom deb|@n@org  Tue Mar 23 14:58:49 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 23 Mar 2021 08:58:49 -0500
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <24665.59863.891275.177042@rob.eddelbuettel.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <24665.58008.716939.48751@rob.eddelbuettel.com>
 <24665.59863.891275.177042@rob.eddelbuettel.com>
Message-ID: <24665.62489.269566.26676@rob.eddelbuettel.com>


On 23 March 2021 at 08:15, Dirk Eddelbuettel wrote:
| Only one small downside: the regrouped icon switches to the old R icon (which
| is probably the one we bitmapped).  Would you know how we could force the new
| one?

Could well be my fault. =:-)

I still ship /usr/share/icons/hicolor/48x48/apps/rlogo_icon.png which is from
the 2012 patch, and I vaguely recall the .desktop file being unhappy without it.
Re-creating a 48x48 from the svg may do.

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Mar 23 15:13:26 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 23 Mar 2021 17:13:26 +0300
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <24665.62489.269566.26676@rob.eddelbuettel.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <24665.58008.716939.48751@rob.eddelbuettel.com>
 <24665.59863.891275.177042@rob.eddelbuettel.com>
 <24665.62489.269566.26676@rob.eddelbuettel.com>
Message-ID: <20210323171326.62a0e44a@arachnoid>

? Tue, 23 Mar 2021 08:58:49 -0500
Dirk Eddelbuettel <edd at debian.org> ?????:

> I still ship /usr/share/icons/hicolor/48x48/apps/rlogo_icon.png which
> is from the 2012 patch, and I vaguely recall the .desktop file being
> unhappy without it. Re-creating a 48x48 from the svg may do.

I think you could even link /usr/share/R/doc/html/Rlogo.svg
into /usr/share/icons/hicolor/scalable/apps/rlogo_icon.svg to let GNOME
and others draw an arbitrarily high-resolution icon if the display
permits that, but a 48x48 bitmap is still required:

https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html#install_icons

-- 
Best regards,
Ivan


From edd @end|ng |rom deb|@n@org  Tue Mar 23 15:38:06 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 23 Mar 2021 09:38:06 -0500
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <20210323171326.62a0e44a@arachnoid>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <24665.58008.716939.48751@rob.eddelbuettel.com>
 <24665.59863.891275.177042@rob.eddelbuettel.com>
 <24665.62489.269566.26676@rob.eddelbuettel.com>
 <20210323171326.62a0e44a@arachnoid>
Message-ID: <24665.64846.437775.801249@rob.eddelbuettel.com>


On 23 March 2021 at 17:13, Ivan Krylov wrote:
| ? Tue, 23 Mar 2021 08:58:49 -0500
| Dirk Eddelbuettel <edd at debian.org> ?????:
| 
| > I still ship /usr/share/icons/hicolor/48x48/apps/rlogo_icon.png which
| > is from the 2012 patch, and I vaguely recall the .desktop file being
| > unhappy without it. Re-creating a 48x48 from the svg may do.
| 
| I think you could even link /usr/share/R/doc/html/Rlogo.svg
| into /usr/share/icons/hicolor/scalable/apps/rlogo_icon.svg to let GNOME
| and others draw an arbitrarily high-resolution icon if the display
| permits that, but a 48x48 bitmap is still required:
| 
| https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html#install_icons

Yes, had the same idea earlier and tried it, with the original Rlogo.svg
copied in there under that name -- but I got an 'empty' icon displayed :-/
(I had also removed the png "to be sure", your more careful suggests it is
needed as a fallback.)

When I follow your suggestion to use both it works with new logo (yay) with
the only minor drawback ... that the white background shows whereas all other
logos are using transparent background.

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From edd @end|ng |rom deb|@n@org  Tue Mar 23 15:55:13 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 23 Mar 2021 09:55:13 -0500
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <24665.64846.437775.801249@rob.eddelbuettel.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <24665.58008.716939.48751@rob.eddelbuettel.com>
 <24665.59863.891275.177042@rob.eddelbuettel.com>
 <24665.62489.269566.26676@rob.eddelbuettel.com>
 <20210323171326.62a0e44a@arachnoid>
 <24665.64846.437775.801249@rob.eddelbuettel.com>
Message-ID: <24666.337.39897.498580@rob.eddelbuettel.com>


On 23 March 2021 at 09:38, Dirk Eddelbuettel wrote:
| 
| On 23 March 2021 at 17:13, Ivan Krylov wrote:
| | ? Tue, 23 Mar 2021 08:58:49 -0500
| | Dirk Eddelbuettel <edd at debian.org> ?????:
| | 
| | > I still ship /usr/share/icons/hicolor/48x48/apps/rlogo_icon.png which
| | > is from the 2012 patch, and I vaguely recall the .desktop file being
| | > unhappy without it. Re-creating a 48x48 from the svg may do.
| | 
| | I think you could even link /usr/share/R/doc/html/Rlogo.svg
| | into /usr/share/icons/hicolor/scalable/apps/rlogo_icon.svg to let GNOME
| | and others draw an arbitrarily high-resolution icon if the display
| | permits that, but a 48x48 bitmap is still required:
| | 
| | https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html#install_icons
| 
| Yes, had the same idea earlier and tried it, with the original Rlogo.svg
| copied in there under that name -- but I got an 'empty' icon displayed :-/
| (I had also removed the png "to be sure", your more careful suggests it is
| needed as a fallback.)
| 
| When I follow your suggestion to use both it works with new logo (yay) with
| the only minor drawback ... that the white background shows whereas all other
| logos are using transparent background.

Sorry, that was wrong: a leftover from manually installing a new png based on
the svg. So when I have both, the png wins and the svg is seemingly ignored.
So first task would be to create a new (and square !!) 48x48 png from the svg
or higher-res png.

But on a lark, I just went into setting and toggled the icon size from 48
(default) to 36 ... and _voila_ I get a new (no background !!) one drawn
seemingly from the svg.  So the solution appears to be to remove the png.
Will try that later. 

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Mar 23 16:41:39 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 23 Mar 2021 11:41:39 -0400
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <20210323131858.4776a571@Tarkus>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
Message-ID: <4db182f4-d282-ff22-d0ee-8bf79abf3035@gmail.com>

On 23/03/2021 6:18 a.m., Ivan Krylov wrote:
> On Mon, 22 Mar 2021 16:57:48 -0500
> Dirk Eddelbuettel <edd at debian.org> wrote:
> 
>> Do you want to send a proper patch to bugzilla?
> 
> Would be glad to, especially if we manage to solve that problem you
> uncovered while I was asleep.
> 
> On Mon, 22 Mar 2021 22:23:47 -0500
> Dirk Eddelbuettel <edd at debian.org> wrote:
> 
>> Close, close, close but no cigar yet: For a given R process, x11()
>> windows group for a that process. But we often run multiple R
>> processes.  Have you seen anything for grouping under the
>> "program" (in some sense) but not the concrete process from it?
> 
> Do windows from different Emacs processes group together the way you
> want them to group? What other applications group together for you
> despite running from different processes? Do they have the same window
> id # of group leader in `xprop WM_HINTS`? I checked Firefox, but its
> windows all seem to have the same _NET_WM_PID.

In Ubuntu 18.04, all terminal windows display the same _NET_WM_PID, and 
that PID corresponds to gnome-terminal-server.  So I think it's not 
going to be possible to do what Dirk wants without really major changes 
to the way different R processes create graphics windows.

On the other hand, R doesn't set the _NET_WM_PID value.

I've put a version of your code into rgl, and it does what you'd expect: 
  it groups all rgl windows from the same R process together, but 
different R processes get different groups.  It would probably be nice 
to have rgl windows and other R graphics windows in the same group, but 
I don't see a way for rgl to know the group_leader that R is using (and 
it's probably not worth adding this to the API to be able to request it).

Am I missing an easier solution?

Duncan Murdoch

> 
> I decided to copy the way GVim sets its group leader ID (because I know
> the windows are different processes _and_ that they group in Xfce) and
> spent a while chasing this red herring before realising that (1) on my
> PC, different x11() windows are still grouped together, even from
> different R processes, even without the patch (I never used the "group
> windows" option in xfce4-panel before) and (2) different GVim windows
> actually have different group leader XIDs in their WM_HINTS properties.
> Oops.
> 
> Apparently Xfce uses libwnck [*] which groups windows by WM_CLASS in
> addition to WM_HINTS (as far as understand the code).
> 
> Here is what GNOME Shell does [**] besides looking at
> WM_HINTS.window_group:
> 
>   - looks up the window's WM_CLASS in .desktop files known to it
>   - looks up the window's _NET_WM_PID among running applications (?)
>   - looks for an XDG startup notification matching the window
>   - checks other things not likely applicable to R, such as sandbox IDs
>     and GApplication IDs
> 
> Adding StartupWMClass=R_x11 to R.desktop (not part of R sources, but
> part of the .deb package, I believe) should help GNOME Shell match all
> x11() windows to a single application without any changes to devX11.c,
> but I don't have GNOME installed to check it.
> 
> Alternatively, we can also add a _NET_WM_PID property to x11() windows
> (in the hope that GNOME Shell matches the PIDs to the same binary), but
> then we'd have to add the WM_CLIENT_MACHINE property too [***], which
> is way more hacky than I would prefer it to be:
> 
> -----------------------------------8<-----------------------------------
> Index: src/modules/X11/devX11.c
> ===================================================================
> --- src/modules/X11/devX11.c	(revision 80104)
> +++ src/modules/X11/devX11.c	(working copy)
> @@ -52,6 +52,8 @@
>   #endif
>   #include <X11/keysymdef.h>
>   
> +#include <sys/utsname.h> /* for uname -> WM_CLIENT_MACHINE -> _NET_WM_PID */
> +#include <unistd.h> /* getpid -> _NET_WM_PID */
>   
>   #define R_USE_PROTOTYPES 1
>   #include <R_ext/GraphicsEngine.h>
> @@ -105,7 +107,7 @@
>   static Display *display;			/* Display */
>   static char dspname[101]="";
>   static int screen;				/* Screen */
> -static Window rootwin;				/* Root Window */
> +static Window rootwin, group_leader;		/* Root Window */
>   static Visual *visual;				/* Visual */
>   static int depth;				/* Pixmap depth */
>   static int Vclass;				/* Visual class */
> @@ -1617,6 +1619,39 @@
>                               PropModeReplace,
>                               (const unsigned char*) rlogo_icon, 2 + 99*77);
>   
> +	    /* set the window group leader */
> +	    XWMHints * hints;
> +	    hints = XAllocWMHints();
> +	    if (hints) {
> +		hints->window_group = group_leader;
> +		hints->flags |= WindowGroupHint;
> +		XSetWMHints(display, xd->window, hints);
> +		XFree(hints);
> +	    }
> +
> +	    /* Provide WM_CLIENT_MACHINE to set a valid _NET_WM_PID */
> +	    struct utsname unm;
> +	    if (uname(&unm)) goto no_wm_pid;
> +	    char * nodename = &unm.nodename[0];
> +	    XTextProperty hostname = {0}; /* initialise the value pointer */
> +	    if (Success != XmbTextListToTextProperty(
> +		display, &nodename, 1, XStringStyle, &hostname
> +	    )) {
> +		if (hostname.value) XFree(hostname.value);
> +		goto no_wm_pid;
> +	    }
> +	    XSetWMClientMachine(display, xd->window, &hostname);
> +	    XFree(hostname.value);
> +
> +	    /* set _NET_WM_PID */
> +	    uint32_t mypid = (uint32_t)getpid(); /* must be CARDINAL(32) */
> +            XChangeProperty(display, xd->window,
> +                            XInternAtom(display, "_NET_WM_PID", False),
> +                            XInternAtom(display, "CARDINAL", False), 32,
> +                            PropModeReplace,
> +                            (const unsigned char*) &mypid, 1);
> +	    no_wm_pid:
> +
>   	    /* set up protocols so that window manager sends */
>   	    /* me an event when user "destroys" window */
>   	    _XA_WM_PROTOCOLS = XInternAtom(display, "WM_PROTOCOLS", 0);
> @@ -2109,6 +2144,7 @@
>       if (numX11Devices == 0)  {
>   	int fd = ConnectionNumber(display);
>   	/* Free Resources Here */
> +	XDestroyWindow(display, group_leader);
>   	while (nfonts--)
>   	      R_XFreeFont(display, fontcache[nfonts].font);
>   	nfonts = 0;
> @@ -3133,6 +3169,9 @@
>   #endif
>       screen = DefaultScreen(display);
>       rootwin = DefaultRootWindow(display);
> +    group_leader = XCreateSimpleWindow(
> +	display, rootwin, 0, 0, 1, 1, 0, 0, 0
> +    );
>       depth = DefaultDepth(display, screen);
>       visual = DefaultVisual(display, screen);
>       colormap = DefaultColormap(display, screen);
> -----------------------------------8<-----------------------------------
>


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Mar 23 16:54:07 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 23 Mar 2021 18:54:07 +0300
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <4db182f4-d282-ff22-d0ee-8bf79abf3035@gmail.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <4db182f4-d282-ff22-d0ee-8bf79abf3035@gmail.com>
Message-ID: <20210323185407.76115f1b@arachnoid>

On Tue, 23 Mar 2021 11:41:39 -0400
Duncan Murdoch <murdoch.duncan at gmail.com> wrote:

> It would probably be nice  to have rgl windows and other R graphics
> windows in the same group, but I don't see a way for rgl to know the
> group_leader that R is using (and it's probably not worth adding this
> to the API to be able to request it).
> 
> Am I missing an easier solution?

Do you envision any problems stemming from setting the same WM_CLASS
("r_x11", "R_x11") for rgl windows as used by x11() windows? I think
that most DEs are able to group windows by WM_CLASS in addition to
WM_HINTS.window_group (Xfce does that by default, GNOME turned out to
just need a hint in the .application file).

-- 
Best regards,
Ivan


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Mar 23 17:53:46 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 23 Mar 2021 12:53:46 -0400
Subject: [Rd] 
 Possible x11 window manager window aggregation under one icon?
In-Reply-To: <20210323185407.76115f1b@arachnoid>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <4db182f4-d282-ff22-d0ee-8bf79abf3035@gmail.com>
 <20210323185407.76115f1b@arachnoid>
Message-ID: <a2e0f28c-b118-1a38-65a6-819d974ae9f2@gmail.com>

On 23/03/2021 11:54 a.m., Ivan Krylov wrote:
> On Tue, 23 Mar 2021 11:41:39 -0400
> Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
>> It would probably be nice  to have rgl windows and other R graphics
>> windows in the same group, but I don't see a way for rgl to know the
>> group_leader that R is using (and it's probably not worth adding this
>> to the API to be able to request it).
>>
>> Am I missing an easier solution?
> 
> Do you envision any problems stemming from setting the same WM_CLASS
> ("r_x11", "R_x11") for rgl windows as used by x11() windows? 

Since early 2013, rgl has set the WM_CLASS to ("rgl", "R_x11").  So I 
think with your suggested change to R.desktop the problem is solved, 
assuming the first component (res_name) doesn't matter as long as the 
second one (res_class) matches.

Duncan Murdoch


From edd @end|ng |rom deb|@n@org  Tue Mar 23 18:36:47 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 23 Mar 2021 12:36:47 -0500
Subject: [Rd] 
 [Solved] Possible x11 window manager window aggregation under
 one icon?
In-Reply-To: <a2e0f28c-b118-1a38-65a6-819d974ae9f2@gmail.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <4db182f4-d282-ff22-d0ee-8bf79abf3035@gmail.com>
 <20210323185407.76115f1b@arachnoid>
 <a2e0f28c-b118-1a38-65a6-819d974ae9f2@gmail.com>
Message-ID: <24666.10031.444487.469197@rob.eddelbuettel.com>


It all works now, thanks mostly to some very detailed reading of the specs by
Ivan.  In short, I made the following changes:

  - add the missing WM hint to the .desktop file we install
  - add the svg logo as 'scalable'
  - create a new (square) 48x48 default png logo from the new one
  - deactivate yesterday's patch

and it is all good now.  Duncan's rgl windows aggregate under the item, as do
the standard R x11 devices.  I will try to attach a small screenshot, we'll
see how mailman likes it.  Martin should still be able to get the old (and to
me, buggy) behaviour back by removing the one key line from the .desktop
file, if his Fedora environment ever updates as I plan.

For anyone on Ubuntu 20.10, updated binaries are in my PPA, see
https://launchpad.net/~edd/+archive/ubuntu/misc/+packages?field.name_filter=r-base&field.status_filter=published&field.series_filter=groovy

Changelog entries below, these have not been committed to Debian's git yet
but I think I will activate this for R 4.0.5 next week (and test it til
then). Screenshot attached below too.

------ changelog for these three test builds follows  -----------------------

r-base (4.0.4-1.2010.3) groovy; urgency=medium

  * debian/r-base-core.dirs: Also create the directory
    usr/share/icons/hicolor/scalable/apps for the svg logo

 -- Dirk Eddelbuettel <edd at debian.org>  Tue, 23 Mar 2021 11:05:17 -0500

r-base (4.0.4-1.2010.2) groovy; urgency=medium

  * icon-class-patch/R.desktop: Add 'StartupWMClass=R_x11'
  * icon-class-patch/rlogo_icon.OLD.png.mpack: Renamed old icon
  * icon-class-patch/rlogo_icon.png.mpack: New 48x48 png from svg
  * icon-class-patch/Rlogo.svg: Copy of official logo
  * debian/rules: Also install Rlogo.svg in 'scalable' icons dir

  * debian/patches/series: Deactivate unneeded grouping patch 

 -- Dirk Eddelbuettel <edd at debian.org>  Tue, 23 Mar 2021 10:27:43 -0500

r-base (4.0.4-1.2010.1) groovy; urgency=medium

  * PPA build on Ubuntu 20.10 "groovy"
  * src/modules/X11/devX11.c: Apply patch by Ivan Krylov (posted to r-devel
    on 2021-03-22) enabling grouping of x11 plot device windows

 -- Dirk Eddelbuettel <edd at debian.org>  Mon, 22 Mar 2021 21:33:09 -0500

-----------------------------------------------------------------------------


Dirk


-------------- next part --------------
A non-text attachment was scrubbed...
Name: Screenshot from 2021-03-23 12-30-06.png
Type: image/png
Size: 10924 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20210323/24c0e633/attachment.png>

-------------- next part --------------


-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org

From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Mar 23 20:13:43 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 23 Mar 2021 15:13:43 -0400
Subject: [Rd] 
 [Solved] Possible x11 window manager window aggregation under
 one icon?
In-Reply-To: <24666.10031.444487.469197@rob.eddelbuettel.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <4db182f4-d282-ff22-d0ee-8bf79abf3035@gmail.com>
 <20210323185407.76115f1b@arachnoid>
 <a2e0f28c-b118-1a38-65a6-819d974ae9f2@gmail.com>
 <24666.10031.444487.469197@rob.eddelbuettel.com>
Message-ID: <fd2cb1e7-0ef6-8722-2df0-645d8b065eaf@gmail.com>

With that change to the .desktop file, both the existing rgl and the rgl 
with a group_leader set behave the same:  all x11() and rgl windows are 
collected together into the same R icon.

If I don't make that change, then setting the group_leader causes all 
rgl windows from one process to group together (with a bad icon).

I think I'll leave the group_leader in place.  I'll think about setting 
an icon, but I don't see it as urgent.

Duncan Murdoch

On 23/03/2021 1:36 p.m., Dirk Eddelbuettel wrote:
> 
> It all works now, thanks mostly to some very detailed reading of the specs by
> Ivan.  In short, I made the following changes:
> 
>    - add the missing WM hint to the .desktop file we install
>    - add the svg logo as 'scalable'
>    - create a new (square) 48x48 default png logo from the new one
>    - deactivate yesterday's patch
> 
> and it is all good now.  Duncan's rgl windows aggregate under the item, as do
> the standard R x11 devices.  I will try to attach a small screenshot, we'll
> see how mailman likes it.  Martin should still be able to get the old (and to
> me, buggy) behaviour back by removing the one key line from the .desktop
> file, if his Fedora environment ever updates as I plan.
> 
> For anyone on Ubuntu 20.10, updated binaries are in my PPA, see
> https://launchpad.net/~edd/+archive/ubuntu/misc/+packages?field.name_filter=r-base&field.status_filter=published&field.series_filter=groovy
> 
> Changelog entries below, these have not been committed to Debian's git yet
> but I think I will activate this for R 4.0.5 next week (and test it til
> then). Screenshot attached below too.
> 
> ------ changelog for these three test builds follows  -----------------------
> 
> r-base (4.0.4-1.2010.3) groovy; urgency=medium
> 
>    * debian/r-base-core.dirs: Also create the directory
>      usr/share/icons/hicolor/scalable/apps for the svg logo
> 
>   -- Dirk Eddelbuettel <edd at debian.org>  Tue, 23 Mar 2021 11:05:17 -0500
> 
> r-base (4.0.4-1.2010.2) groovy; urgency=medium
> 
>    * icon-class-patch/R.desktop: Add 'StartupWMClass=R_x11'
>    * icon-class-patch/rlogo_icon.OLD.png.mpack: Renamed old icon
>    * icon-class-patch/rlogo_icon.png.mpack: New 48x48 png from svg
>    * icon-class-patch/Rlogo.svg: Copy of official logo
>    * debian/rules: Also install Rlogo.svg in 'scalable' icons dir
> 
>    * debian/patches/series: Deactivate unneeded grouping patch
> 
>   -- Dirk Eddelbuettel <edd at debian.org>  Tue, 23 Mar 2021 10:27:43 -0500
> 
> r-base (4.0.4-1.2010.1) groovy; urgency=medium
> 
>    * PPA build on Ubuntu 20.10 "groovy"
>    * src/modules/X11/devX11.c: Apply patch by Ivan Krylov (posted to r-devel
>      on 2021-03-22) enabling grouping of x11 plot device windows
> 
>   -- Dirk Eddelbuettel <edd at debian.org>  Mon, 22 Mar 2021 21:33:09 -0500
> 
> -----------------------------------------------------------------------------
> 
> 
> Dirk
> 
> 
> 
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Mar 24 10:30:59 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 24 Mar 2021 10:30:59 +0100
Subject: [Rd] 
 [Solved] Possible x11 window manager window aggregation under
 one icon?
In-Reply-To: <24666.10031.444487.469197@rob.eddelbuettel.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <4db182f4-d282-ff22-d0ee-8bf79abf3035@gmail.com>
 <20210323185407.76115f1b@arachnoid>
 <a2e0f28c-b118-1a38-65a6-819d974ae9f2@gmail.com>
 <24666.10031.444487.469197@rob.eddelbuettel.com>
Message-ID: <24667.1747.993142.397629@stat.math.ethz.ch>

>>>>> Dirk Eddelbuettel 
>>>>>     on Tue, 23 Mar 2021 12:36:47 -0500 writes:

    > It all works now, thanks mostly to some very detailed reading of the specs by
    > Ivan.  In short, I made the following changes:

    > - add the missing WM hint to the .desktop file we install
    > - add the svg logo as 'scalable'
    > - create a new (square) 48x48 default png logo from the new one
    > - deactivate yesterday's patch

    > and it is all good now.  Duncan's rgl windows aggregate under the item, as do
    > the standard R x11 devices.  I will try to attach a small screenshot, we'll
    > see how mailman likes it.  Martin should still be able to get the old (and to
    > me, buggy) behaviour back by removing the one key line from the .desktop
    > file, if his Fedora environment ever updates as I plan.

    > For anyone on Ubuntu 20.10, updated binaries are in my PPA, see
    > https://launchpad.net/~edd/+archive/ubuntu/misc/+packages?field.name_filter=r-base&field.status_filter=published&field.series_filter=groovy

    > Changelog entries below, these have not been committed to Debian's git yet
    > but I think I will activate this for R 4.0.5 next week (and test it til
    > then). Screenshot attached below too.

    > ------ changelog for these three test builds follows  -----------------------

    > r-base (4.0.4-1.2010.3) groovy; urgency=medium

    > * debian/r-base-core.dirs: Also create the directory
    > usr/share/icons/hicolor/scalable/apps for the svg logo

    > -- Dirk Eddelbuettel <edd at debian.org>  Tue, 23 Mar 2021 11:05:17 -0500

    > r-base (4.0.4-1.2010.2) groovy; urgency=medium

    > * icon-class-patch/R.desktop: Add 'StartupWMClass=R_x11'
    > * icon-class-patch/rlogo_icon.OLD.png.mpack: Renamed old icon
    > * icon-class-patch/rlogo_icon.png.mpack: New 48x48 png from svg
    > * icon-class-patch/Rlogo.svg: Copy of official logo
    > * debian/rules: Also install Rlogo.svg in 'scalable' icons dir

    > * debian/patches/series: Deactivate unneeded grouping patch 

    > -- Dirk Eddelbuettel <edd at debian.org>  Tue, 23 Mar 2021 10:27:43 -0500

    > r-base (4.0.4-1.2010.1) groovy; urgency=medium

    > * PPA build on Ubuntu 20.10 "groovy"
    > * src/modules/X11/devX11.c: Apply patch by Ivan Krylov (posted to r-devel
    >   on 2021-03-22) enabling grouping of x11 plot device windows

    > -- Dirk Eddelbuettel <edd at debian.org>  Mon, 22 Mar 2021 21:33:09 -0500

Thank you, Dirk for raising the issue, providing the nice summary,
and again to Ivan for his patches and Duncan for testing and comments

I've checked the first of Ivan's patches -- IIRC the one Dirk
now also is going to patch the Debian/Ubuntu/... R-base packages with.
The code is nice, short (but not too short), partly self explainable,
and it also works fine under the Fedora_32--current version of
Gnome.

For this reason I've committed to R (the trunk, i.e., R-devel,
for R 4.1.0 in a month or so)  in svn rev 80110.

However we definitely want a stable R 4.0.5 with basically only
a bug fix of the character/UTF-8/.. problem so R 4.0.x itself
will surely not get such a patch.

Best regards,
Martin


From edd @end|ng |rom deb|@n@org  Thu Mar 25 14:18:42 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 25 Mar 2021 08:18:42 -0500
Subject: [Rd] 
 [Solved] Possible x11 window manager window aggregation under
 one icon?
In-Reply-To: <24667.1747.993142.397629@stat.math.ethz.ch>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <4db182f4-d282-ff22-d0ee-8bf79abf3035@gmail.com>
 <20210323185407.76115f1b@arachnoid>
 <a2e0f28c-b118-1a38-65a6-819d974ae9f2@gmail.com>
 <24666.10031.444487.469197@rob.eddelbuettel.com>
 <24667.1747.993142.397629@stat.math.ethz.ch>
Message-ID: <24668.36274.53383.514330@rob.eddelbuettel.com>


On 24 March 2021 at 10:30, Martin Maechler wrote:
| For this reason I've committed to R (the trunk, i.e., R-devel,
| for R 4.1.0 in a month or so)  in svn rev 80110.

I just saw that via the (still extremely helpful) RSS feed of SVN changes and
then pulled.

You may have missed that Ivan concluded, and I followed, that the _patch is
not needed_.  All one needs is to adjust the .desktop file. I posted my full
changelog from the Debian package (of which I currently run a test build on
two Ubuntu machines using the binaries from Launchpad I pointed to).

So in that sense I think r80110 may wants to be reverted.

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Mar 25 15:41:46 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 25 Mar 2021 10:41:46 -0400
Subject: [Rd] 
 [Solved] Possible x11 window manager window aggregation under
 one icon?
In-Reply-To: <24668.36274.53383.514330@rob.eddelbuettel.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <4db182f4-d282-ff22-d0ee-8bf79abf3035@gmail.com>
 <20210323185407.76115f1b@arachnoid>
 <a2e0f28c-b118-1a38-65a6-819d974ae9f2@gmail.com>
 <24666.10031.444487.469197@rob.eddelbuettel.com>
 <24667.1747.993142.397629@stat.math.ethz.ch>
 <24668.36274.53383.514330@rob.eddelbuettel.com>
Message-ID: <ca146334-92de-2328-db73-2556f2649144@gmail.com>

On 25/03/2021 9:18 a.m., Dirk Eddelbuettel wrote:
> 
> On 24 March 2021 at 10:30, Martin Maechler wrote:
> | For this reason I've committed to R (the trunk, i.e., R-devel,
> | for R 4.1.0 in a month or so)  in svn rev 80110.
> 
> I just saw that via the (still extremely helpful) RSS feed of SVN changes and
> then pulled.
> 
> You may have missed that Ivan concluded, and I followed, that the _patch is
> not needed_.  All one needs is to adjust the .desktop file. I posted my full
> changelog from the Debian package (of which I currently run a test build on
> two Ubuntu machines using the binaries from Launchpad I pointed to).
> 
> So in that sense I think r80110 may wants to be reverted.
> 

I'm not sure either if Martin saw your conclusion.

I haven't tested R-devel with r80110 yet, but I did make the equivalent 
change in rgl, and have been working with that.

In Ubuntu, it makes no difference if the .desktop file is changed as you 
describe, but I think it's an improvement if you don't make that change 
for the usual case.  You don't get a ton of icons, you get one rgl icon 
per process.

In macOS, it does affect the behaviour of windows.  During rgl testing, 
I sometimes create 100+ windows.  Before the change, the window manager 
put them all over the screen, trying to make the newest one visible. 
After the change (now it knows they're all in the same group), it just 
cascades them down the screen until it hits the bottom, then keeps 
creating tiny windows crammed against the bottom of the screen.  I think 
this is negative (the usual reason I create them all is to hope to spot 
bad changes).

So for a reasonable number of windows the change is an improvement:  the 
windows appear grouped.  For a very large number of windows it's a negative.

Duncan Murdoch


From r-deve| @end|ng |rom @ker@t|ng@de  Fri Mar 26 08:40:25 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Fri, 26 Mar 2021 08:40:25 +0100 (CET)
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
Message-ID: <E1lPh4z-0001ZV-RS@rmmprod07.runbox>

Hi,

In my package bettermc, I use a custom allocator, which hands out already defined/initialized memory (mmap of a POSIX shared memory object).

If my code is run in R which was configured --with-valgrind-instrumentation > 0, Valgrind will (correctly) complain about uninitialized memory being used, e.g.

==813836== Conditional jump or move depends on uninitialised value(s)
==813836==    at 0x4F0A9D: getvar (svn/R-devel/src/main/eval.c:5171)
==813836==    by 0x4D9B38: bcEval (svn/R-devel/src/main/eval.c:6867)
==813836==    by 0x4F0077: Rf_eval (svn/R-devel/src/main/eval.c:727)
==813836==    by 0x4F09AF: forcePromise (svn/R-devel/src/main/eval.c:555)
==813836==    by 0x4F0C57: FORCE_PROMISE (svn/R-devel/src/main/eval.c:5136)
==813836==    by 0x4F0C57: getvar (svn/R-devel/src/main/eval.c:5177)
==813836==    by 0x4D9B38: bcEval (svn/R-devel/src/main/eval.c:6867)
==813836==    by 0x4F0077: Rf_eval (svn/R-devel/src/main/eval.c:727)
==813836==    by 0x4F1A8D: R_execClosure (svn/R-devel/src/main/eval.c:1897)
==813836==    by 0x4F2783: Rf_applyClosure (svn/R-devel/src/main/eval.c:1823)
==813836==    by 0x4DF61D: bcEval (svn/R-devel/src/main/eval.c:7083)
==813836==    by 0x4F0077: Rf_eval (svn/R-devel/src/main/eval.c:727)
==813836==    by 0x4F1A8D: R_execClosure (svn/R-devel/src/main/eval.c:1897)
==813836==  Uninitialised value was created by a client request
==813836==    at 0x52D5CF: Rf_allocVector3 (svn/R-devel/src/main/memory.c:2892)
==813836==    by 0x16B415EA: allocate_from_shm (packages/tests-vg/bettermc/src/copy2shm.c:289)
==813836==    by 0x49D123: R_doDotCall (svn/R-devel/src/main/dotcode.c:614)
==813836==    by 0x4DA36D: bcEval (svn/R-devel/src/main/eval.c:7671)
==813836==    by 0x4F0077: Rf_eval (svn/R-devel/src/main/eval.c:727)
==813836==    by 0x4F1A8D: R_execClosure (svn/R-devel/src/main/eval.c:1897)
==813836==    by 0x4F2783: Rf_applyClosure (svn/R-devel/src/main/eval.c:1823)
==813836==    by 0x4F0243: Rf_eval (svn/R-devel/src/main/eval.c:850)
==813836==    by 0x49B68F: do_External (svn/R-devel/src/main/dotcode.c:573)
==813836==    by 0x4D3566: bcEval (svn/R-devel/src/main/eval.c:7115)
==813836==    by 0x4F0077: Rf_eval (svn/R-devel/src/main/eval.c:727)
==813836==    by 0x4F1A8D: R_execClosure (svn/R-devel/src/main/eval.c:1897)

(allocate_from_shm() is my function calling allocVector3() with a custom allocator.) Valgrind is correct, because allocVector3() explicitly calls VALGRIND_MAKE_MEM_UNDEFINED() on the memory my custom allocator returns.

- Sould allocVector3() call VALGRIND_MAKE_MEM_UNDEFINED() also if a custom allocator is used? For some custom allocators this is correct, for others not.

- Or should the code using a custom allocator call VALGRIND_MAKE_MEM_DEFINED() on the DATAPTR() returned by allocVector3()? E.g.

...
ret = PROTECT(allocVector3(asInteger(type), asReal(length), &allocator));
VALGRIND_MAKE_MEM_DEFINED(DATAPTR(ret), size);
...

For the latter to work also on systems without Valgrind installed, I need to include both valgrind.h and memcheck.h in the src of my package and include these (rather than the system headers), correct? Should I best take these headers directly from R (src/include/vg)?

Thanks! Regards,
Andreas

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Mar 26 14:49:56 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 26 Mar 2021 14:49:56 +0100
Subject: [Rd] 
 [Solved] Possible x11 window manager window aggregation under
 one icon?
In-Reply-To: <ca146334-92de-2328-db73-2556f2649144@gmail.com>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <4db182f4-d282-ff22-d0ee-8bf79abf3035@gmail.com>
 <20210323185407.76115f1b@arachnoid>
 <a2e0f28c-b118-1a38-65a6-819d974ae9f2@gmail.com>
 <24666.10031.444487.469197@rob.eddelbuettel.com>
 <24667.1747.993142.397629@stat.math.ethz.ch>
 <24668.36274.53383.514330@rob.eddelbuettel.com>
 <ca146334-92de-2328-db73-2556f2649144@gmail.com>
Message-ID: <24669.59012.651091.193661@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Thu, 25 Mar 2021 10:41:46 -0400 writes:

    > On 25/03/2021 9:18 a.m., Dirk Eddelbuettel wrote:
    >> 
    >> On 24 March 2021 at 10:30, Martin Maechler wrote:
    >> | For this reason I've committed to R (the trunk, i.e., R-devel,
    >> | for R 4.1.0 in a month or so)  in svn rev 80110.
    >> 
    >> I just saw that via the (still extremely helpful) RSS feed of SVN changes and
    >> then pulled.
    >> 
    >> You may have missed that Ivan concluded, and I followed, that the _patch is
    >> not needed_.  All one needs is to adjust the .desktop file. I posted my full
    >> changelog from the Debian package (of which I currently run a test build on
    >> two Ubuntu machines using the binaries from Launchpad I pointed to).
    >> 
    >> So in that sense I think r80110 may wants to be reverted.

    > I'm not sure either if Martin saw your conclusion.

I saw it, but as there were two patches of Ivan, I understood
that the 2nd one (which would even group X11 windows of
unrelated R instances) was unneeded.

I concluded I liked the first one because it would achieve
what's considered "uniformly better" in the sense that it makes
R graphics behave like "all other" desktop applications *and* it
would do so for all possible window manager scheme without any
need of some desktop setting (which a typical user would not
know about, nor know that s?he should/could change).


    > I haven't tested R-devel with r80110 yet, but I did make the equivalent 
    > change in rgl, and have been working with that.

    > In Ubuntu, it makes no difference if the .desktop file is changed as you 
    > describe, 
a big "iff" at least conceptually, when in the present case,
Dirk as Debian maintainer of the 'R debian pkg' can make it happen.

What about Redhat/Fedora etc, what about the next cool window manager
on Linux distribution Z?  They may change to do what .desktop
does in a different way, etc, or more typically not package R
that way and hence not have a *.desktop equivalent.

    > but I think it's an improvement if you don't make that change 
    > for the usual case.  You don't get a ton of icons, you get one rgl icon 
    > per process.

    > In macOS, it does affect the behaviour of windows.  During rgl testing, 
    > I sometimes create 100+ windows.  Before the change, the window manager 
    > put them all over the screen, trying to make the newest one visible. 
    > After the change (now it knows they're all in the same group), it just 
    > cascades them down the screen until it hits the bottom, then keeps 
    > creating tiny windows crammed against the bottom of the screen.  I think 
    > this is negative (the usual reason I create them all is to hope to spot 
    > bad changes).

    > So for a reasonable number of windows the change is an improvement:  the 
    > windows appear grouped.  For a very large number of
    > windows it's a negative..

    > Duncan Murdoch

which probably also depends on your screen size and the
configuration of several tuning parameters of your window
manager etc..

This all started with Dirk saying the R behaves differently than
"all" other applications in this respect, and Ivan found compact
way to change that .. window-manager -- independently  which I
still think is a pro.
Given Duncan's use case, may this should become an argument for
x11() and X11.options(),  say  grouping = c("process", "none", "all")
with  match.arg(grouping) used, so the default was "process"
i.e. group things together that belong to the same "process"
(current R-devel),  "none" would correspond to the previous
default and "all" would correspond to what the 2nd patch of Ivan
aimed for.

?


From r-deve| @end|ng |rom @ker@t|ng@de  Fri Mar 26 15:10:39 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Fri, 26 Mar 2021 15:10:39 +0100 (CET)
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <E1lPh4z-0001ZV-RS@rmmprod07.runbox>
Message-ID: <E1lPnAd-0007sV-M4@rmmprod07.runbox>

Another idea for the second option. Instead of including the Valgrind headers, the following could be enough:

#if __has_include(<valgrind/memcheck.h>)
#include <valgrind/memcheck.h>
#else
#define VALGRIND_MAKE_MEM_DEFINED(_qzz_addr,_qzz_len)          \
  do {                                                         \
    (_qzz_addr);                                               \
    (_qzz_len);                                                \
  } while (0)
#endif

I guess the packages are build on the same CRAN machine which also runs the tests under Valgrind, i.e. valgrind/memcheck.h is available during build of the package!? 

Not sure though if Oracle Developer Studio on Solaris supports __has_include() ...

2021-03-26 08:40 GMT+01:00 "Andreas Kersting" <r-devel at akersting.de>:
> Hi,
> 
> In my package bettermc, I use a custom allocator, which hands out already defined/initialized memory (mmap of a POSIX shared memory object).
> 
> If my code is run in R which was configured --with-valgrind-instrumentation > 0, Valgrind will (correctly) complain about uninitialized memory being used, e.g.
> 
> ==813836== Conditional jump or move depends on uninitialised value(s)
> ==813836==    at 0x4F0A9D: getvar (svn/R-devel/src/main/eval.c:5171)
> ==813836==    by 0x4D9B38: bcEval (svn/R-devel/src/main/eval.c:6867)
> ==813836==    by 0x4F0077: Rf_eval (svn/R-devel/src/main/eval.c:727)
> ==813836==    by 0x4F09AF: forcePromise (svn/R-devel/src/main/eval.c:555)
> ==813836==    by 0x4F0C57: FORCE_PROMISE (svn/R-devel/src/main/eval.c:5136)
> ==813836==    by 0x4F0C57: getvar (svn/R-devel/src/main/eval.c:5177)
> ==813836==    by 0x4D9B38: bcEval (svn/R-devel/src/main/eval.c:6867)
> ==813836==    by 0x4F0077: Rf_eval (svn/R-devel/src/main/eval.c:727)
> ==813836==    by 0x4F1A8D: R_execClosure (svn/R-devel/src/main/eval.c:1897)
> ==813836==    by 0x4F2783: Rf_applyClosure (svn/R-devel/src/main/eval.c:1823)
> ==813836==    by 0x4DF61D: bcEval (svn/R-devel/src/main/eval.c:7083)
> ==813836==    by 0x4F0077: Rf_eval (svn/R-devel/src/main/eval.c:727)
> ==813836==    by 0x4F1A8D: R_execClosure (svn/R-devel/src/main/eval.c:1897)
> ==813836==  Uninitialised value was created by a client request
> ==813836==    at 0x52D5CF: Rf_allocVector3 (svn/R-devel/src/main/memory.c:2892)
> ==813836==    by 0x16B415EA: allocate_from_shm (packages/tests-vg/bettermc/src/copy2shm.c:289)
> ==813836==    by 0x49D123: R_doDotCall (svn/R-devel/src/main/dotcode.c:614)
> ==813836==    by 0x4DA36D: bcEval (svn/R-devel/src/main/eval.c:7671)
> ==813836==    by 0x4F0077: Rf_eval (svn/R-devel/src/main/eval.c:727)
> ==813836==    by 0x4F1A8D: R_execClosure (svn/R-devel/src/main/eval.c:1897)
> ==813836==    by 0x4F2783: Rf_applyClosure (svn/R-devel/src/main/eval.c:1823)
> ==813836==    by 0x4F0243: Rf_eval (svn/R-devel/src/main/eval.c:850)
> ==813836==    by 0x49B68F: do_External (svn/R-devel/src/main/dotcode.c:573)
> ==813836==    by 0x4D3566: bcEval (svn/R-devel/src/main/eval.c:7115)
> ==813836==    by 0x4F0077: Rf_eval (svn/R-devel/src/main/eval.c:727)
> ==813836==    by 0x4F1A8D: R_execClosure (svn/R-devel/src/main/eval.c:1897)
> 
> (allocate_from_shm() is my function calling allocVector3() with a custom allocator.) Valgrind is correct, because allocVector3() explicitly calls VALGRIND_MAKE_MEM_UNDEFINED() on the memory my custom allocator returns.
> 
> - Sould allocVector3() call VALGRIND_MAKE_MEM_UNDEFINED() also if a custom allocator is used? For some custom allocators this is correct, for others not.
> 
> - Or should the code using a custom allocator call VALGRIND_MAKE_MEM_DEFINED() on the DATAPTR() returned by allocVector3()? E.g.
> 
> ...
> ret = PROTECT(allocVector3(asInteger(type), asReal(length), &allocator));
> VALGRIND_MAKE_MEM_DEFINED(DATAPTR(ret), size);
> ...
> 
> For the latter to work also on systems without Valgrind installed, I need to include both valgrind.h and memcheck.h in the src of my package and include these (rather than the system headers), correct? Should I best take these headers directly from R (src/include/vg)?
> 
> Thanks! Regards,
> Andreas
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

From edd @end|ng |rom deb|@n@org  Fri Mar 26 19:51:35 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 26 Mar 2021 13:51:35 -0500
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <E1lPnAd-0007sV-M4@rmmprod07.runbox>
References: <E1lPh4z-0001ZV-RS@rmmprod07.runbox>
 <E1lPnAd-0007sV-M4@rmmprod07.runbox>
Message-ID: <24670.11575.475183.382850@rob.eddelbuettel.com>


Andreas,

Can you briefly describe what it is you are trying to do?

In general, no R package would use valgrind directly; it is an optional
debugger. Also note _Writing R Extensions_ has a few things to say about how
memory destined for R object can and cannot be allocated -- I presume your
custom allocator is only for objects you managed and do not return to R?

Best, Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From r-deve| @end|ng |rom @ker@t|ng@de  Fri Mar 26 20:48:56 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Fri, 26 Mar 2021 20:48:56 +0100 (CET)
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <24670.11575.475183.382850@rob.eddelbuettel.com>
Message-ID: <E1lPsS0-0000c6-UL@rmmprod07.runbox>

Hi Dirk,

Sure, let me try to explain:

CRAN ran the tests of my package using R which was configured --with-valgrind-instrumentation > 0. Valgrind reported many errors related to the use of supposedly uninitialized memory and the CRAN team asked me to tackle these.

These errors are false positives, because I pass a custom allocator to allocVector3() which hands out memory which is already initialized. However, this memory is explicitly marked for Valgrind as uninitialized by allocVector3(), and I do not initialize it subsequently, so Valgrind complains.

Now I am asking if it is correct that allocVector3() marks memory as uninitialized/undefined, even if it comes from a custom allocator. This is because allocVector3() cannot know if the memory might already by initialized.

If this is the intended behavior of allocVector3(), then I am looking for the proper way to get rid of these false Valgrind errors. So to be able to more easily spot the true ones ...

Which section of _Writing R Extensions_ do you have in mind? I cannot find anything on custom allocators there, but maybe I am using the wrong search terms. No, these object are returned to R and I am not aware that this is a problem / not allowed.

Regards, Andreas

2021-03-26 19:51 GMT+01:00 "Dirk Eddelbuettel" <edd at debian.org>:
> 
> Andreas,
> 
> Can you briefly describe what it is you are trying to do?
> 
> In general, no R package would use valgrind directly; it is an optional
> debugger. Also note _Writing R Extensions_ has a few things to say about how
> memory destined for R object can and cannot be allocated -- I presume your
> custom allocator is only for objects you managed and do not return to R?
> 
> Best, Dirk
> 
> -- 
> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> 

From @zwj|08 @end|ng |rom gm@||@com  Sat Mar 27 15:16:54 2021
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Sat, 27 Mar 2021 22:16:54 +0800
Subject: [Rd] Surprising behavior when using the reference class with the
 dollar symbol
Message-ID: <CAGiFhPPEGQR4Nah2h6d+JFvhmVvyPOCR=QCUWLuDwL0qUiZN4Q@mail.gmail.com>

Hi all,

I'm trying to get the field value of a reference object by the field name,
but the dollar symbol behaves quite unusual. See example below














*.foo <- setRefClass(    "foo",    fields = list(        a = "integer"
))x <- .foo$new(a=1L)## This is OKx$a## This is OK`$`(x, "a")## But this is
not OKi <- "a"`$`(x, i)*

For the last line of code I get this error


*Error in envRefInferField(x, what, getClass(class(x)), selfEnv) :   ?i? is
not a valid field or method name for reference class ?foo?*

It looks like when calling the dollar symbol using the function format, it
treats the input argument as a character literal and does not evaluate it
inside the function. I know we have the function `field` to get the slot
variable, but I wonder if this is designed on purpose as the above example
works for both list and S4 system.

Best,
Jiefei

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Mar 27 15:20:37 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 27 Mar 2021 10:20:37 -0400
Subject: [Rd] 
 Surprising behavior when using the reference class with the
 dollar symbol
In-Reply-To: <CAGiFhPPEGQR4Nah2h6d+JFvhmVvyPOCR=QCUWLuDwL0qUiZN4Q@mail.gmail.com>
References: <CAGiFhPPEGQR4Nah2h6d+JFvhmVvyPOCR=QCUWLuDwL0qUiZN4Q@mail.gmail.com>
Message-ID: <52e935e2-ee6c-59b7-a08f-e4fb95470656@gmail.com>

On 27/03/2021 10:16 a.m., Jiefei Wang wrote:
> Hi all,
> 
> I'm trying to get the field value of a reference object by the field name,
> but the dollar symbol behaves quite unusual. See example below
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> *.foo <- setRefClass(    "foo",    fields = list(        a = "integer"
> ))x <- .foo$new(a=1L)## This is OKx$a## This is OK`$`(x, "a")## But this is
> not OKi <- "a"`$`(x, i)*

This is really hard to read.  Please post it again, but don't use HTML.

Duncan Murdoch

> 
> For the last line of code I get this error
> 
> 
> *Error in envRefInferField(x, what, getClass(class(x)), selfEnv) :   ?i? is
> not a valid field or method name for reference class ?foo?*
> 
> It looks like when calling the dollar symbol using the function format, it
> treats the input argument as a character literal and does not evaluate it
> inside the function. I know we have the function `field` to get the slot
> variable, but I wonder if this is designed on purpose as the above example
> works for both list and S4 system.
> 
> Best,
> Jiefei
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @zwj|08 @end|ng |rom gm@||@com  Sat Mar 27 15:49:19 2021
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Sat, 27 Mar 2021 22:49:19 +0800
Subject: [Rd] 
 Surprising behavior when using the reference class with the
 dollar symbol
In-Reply-To: <52e935e2-ee6c-59b7-a08f-e4fb95470656@gmail.com>
References: <CAGiFhPPEGQR4Nah2h6d+JFvhmVvyPOCR=QCUWLuDwL0qUiZN4Q@mail.gmail.com>
 <52e935e2-ee6c-59b7-a08f-e4fb95470656@gmail.com>
Message-ID: <CAGiFhPO1Nb32zCCoi7w=oJciC5MG3h0J_8_GJykyxpw9WA6REQ@mail.gmail.com>

Thanks, Duncan. Below is the repost of my question in plain text mode.


I'm trying to get the field value of a reference object by the field
name, but the dollar symbol behaves quite unusual. See example below

.foo <- setRefClass(
    "foo",
    fields = list(
        a = "integer"
    )
)
x <- .foo$new(a=1L)
## This is OK
x$a
## This is OK
`$`(x, "a")
## But this is not OK
i <- "a"
`$`(x, i)

For the last line of code I get this error

Error in envRefInferField(x, what, getClass(class(x)), selfEnv) :
  ?i? is not a valid field or method name for reference class ?foo?

It looks like when calling the dollar symbol using the function
format, it treats the input argument as a character literal and does
not evaluate it inside the function. I know we have the function
`field` to get the slot variable, but I wonder if this is designed on
purpose as the above example works for both list and S4 system.

Best,
Jiefei


On Sat, Mar 27, 2021 at 10:20 PM Duncan Murdoch
<murdoch.duncan at gmail.com> wrote:
>
> On 27/03/2021 10:16 a.m., Jiefei Wang wrote:
> > Hi all,
> >
> > I'm trying to get the field value of a reference object by the field name,
> > but the dollar symbol behaves quite unusual. See example below
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> > *.foo <- setRefClass(    "foo",    fields = list(        a = "integer"
> > ))x <- .foo$new(a=1L)## This is OKx$a## This is OK`$`(x, "a")## But this is
> > not OKi <- "a"`$`(x, i)*
>
> This is really hard to read.  Please post it again, but don't use HTML.
>
> Duncan Murdoch
>
> >
> > For the last line of code I get this error
> >
> >
> > *Error in envRefInferField(x, what, getClass(class(x)), selfEnv) :   ?i? is
> > not a valid field or method name for reference class ?foo?*
> >
> > It looks like when calling the dollar symbol using the function format, it
> > treats the input argument as a character literal and does not evaluate it
> > inside the function. I know we have the function `field` to get the slot
> > variable, but I wonder if this is designed on purpose as the above example
> > works for both list and S4 system.
> >
> > Best,
> > Jiefei
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>


From w||||@mwdun|@p @end|ng |rom gm@||@com  Sat Mar 27 20:25:58 2021
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Sat, 27 Mar 2021 12:25:58 -0700
Subject: [Rd] 
 Surprising behavior when using the reference class with the
 dollar symbol
In-Reply-To: <CAGiFhPO1Nb32zCCoi7w=oJciC5MG3h0J_8_GJykyxpw9WA6REQ@mail.gmail.com>
References: <CAGiFhPPEGQR4Nah2h6d+JFvhmVvyPOCR=QCUWLuDwL0qUiZN4Q@mail.gmail.com>
 <52e935e2-ee6c-59b7-a08f-e4fb95470656@gmail.com>
 <CAGiFhPO1Nb32zCCoi7w=oJciC5MG3h0J_8_GJykyxpw9WA6REQ@mail.gmail.com>
Message-ID: <CAHqSRuSnDahtNvx5dQLPFR7OvG9D+MUoU5KaHRHYG7uBnUAt9Q@mail.gmail.com>

> > It looks like when calling the dollar symbol using the function format, it
> > treats the input argument as a character literal and does not evaluate it
> > inside the function. I know we have the function `field` to get the slot
> > variable, but I wonder if this is designed on purpose as the above example
> > works for both list and S4 system.

It works almost the same way with lists, the difference being that an
unknown name with a list gives NULL and not an error.

> L <- list(A=101)
> `$`(L, A)
[1] 101
> `$`(L, "A")
[1] 101
> i <- "A"
> `$`(L, i)
NULL

The 2nd argument is treated as a symbol and is never evaluated.  If it
is given as a string literal then it is converted to a symbol - that
is a holdover from the old days before backticks could be used to make
symbol literals for symbols that included odd things like spaces and
dollar signs.

-Bill

On Sat, Mar 27, 2021 at 7:49 AM Jiefei Wang <szwjf08 at gmail.com> wrote:
>
> Thanks, Duncan. Below is the repost of my question in plain text mode.
>
>
> I'm trying to get the field value of a reference object by the field
> name, but the dollar symbol behaves quite unusual. See example below
>
> .foo <- setRefClass(
>     "foo",
>     fields = list(
>         a = "integer"
>     )
> )
> x <- .foo$new(a=1L)
> ## This is OK
> x$a
> ## This is OK
> `$`(x, "a")
> ## But this is not OK
> i <- "a"
> `$`(x, i)
>
> For the last line of code I get this error
>
> Error in envRefInferField(x, what, getClass(class(x)), selfEnv) :
>   ?i? is not a valid field or method name for reference class ?foo?
>
> It looks like when calling the dollar symbol using the function
> format, it treats the input argument as a character literal and does
> not evaluate it inside the function. I know we have the function
> `field` to get the slot variable, but I wonder if this is designed on
> purpose as the above example works for both list and S4 system.
>
> Best,
> Jiefei
>
>
> On Sat, Mar 27, 2021 at 10:20 PM Duncan Murdoch
> <murdoch.duncan at gmail.com> wrote:
> >
> > On 27/03/2021 10:16 a.m., Jiefei Wang wrote:
> > > Hi all,
> > >
> > > I'm trying to get the field value of a reference object by the field name,
> > > but the dollar symbol behaves quite unusual. See example below
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > > *.foo <- setRefClass(    "foo",    fields = list(        a = "integer"
> > > ))x <- .foo$new(a=1L)## This is OKx$a## This is OK`$`(x, "a")## But this is
> > > not OKi <- "a"`$`(x, i)*
> >
> > This is really hard to read.  Please post it again, but don't use HTML.
> >
> > Duncan Murdoch
> >
> > >
> > > For the last line of code I get this error
> > >
> > >
> > > *Error in envRefInferField(x, what, getClass(class(x)), selfEnv) :   ?i? is
> > > not a valid field or method name for reference class ?foo?*
> > >
> > > It looks like when calling the dollar symbol using the function format, it
> > > treats the input argument as a character literal and does not evaluate it
> > > inside the function. I know we have the function `field` to get the slot
> > > variable, but I wonder if this is designed on purpose as the above example
> > > works for both list and S4 system.
> > >
> > > Best,
> > > Jiefei
> > >
> > >       [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From edd @end|ng |rom deb|@n@org  Sat Mar 27 20:52:03 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 27 Mar 2021 14:52:03 -0500
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <E1lPsS0-0000c6-UL@rmmprod07.runbox>
References: <24670.11575.475183.382850@rob.eddelbuettel.com>
 <E1lPsS0-0000c6-UL@rmmprod07.runbox>
Message-ID: <24671.36067.868332.844255@rob.eddelbuettel.com>


Andreas,

Thanks for the clarification.

On 26 March 2021 at 20:48, Andreas Kersting wrote:
| Sure, let me try to explain:
| 
| CRAN ran the tests of my package using R which was configured --with-valgrind-instrumentation > 0. Valgrind reported many errors related to the use of supposedly uninitialized memory and the CRAN team asked me to tackle these.
| 
| These errors are false positives, because I pass a custom allocator to allocVector3() which hands out memory which is already initialized. However, this memory is explicitly marked for Valgrind as uninitialized by allocVector3(), and I do not initialize it subsequently, so Valgrind complains.
| 
| Now I am asking if it is correct that allocVector3() marks memory as uninitialized/undefined, even if it comes from a custom allocator. This is because allocVector3() cannot know if the memory might already by initialized.
| 
| If this is the intended behavior of allocVector3(), then I am looking for the proper way to get rid of these false Valgrind errors. So to be able to more easily spot the true ones ...
| 
| Which section of _Writing R Extensions_ do you have in mind? I cannot find anything on custom allocators there, but maybe I am using the wrong search terms. No, these object are returned to R and I am not aware that this is a problem / not allowed.

I had the simpler section 6.1. in Writing R Extensions in mind, but you are
indeed using the allocVector3() interface from the public header in
R_ext/Rallocators.h -- but I only see scant mention of allocVector3 in R
Internals.  So I will have to pass. A search of CRAN via the Github mirror
[1] also reveals little ... but includes a hit from your package.

Dirk

[1] https://github.com/search?q=org%3Acran+allocVector3&type=code

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @zwj|08 @end|ng |rom gm@||@com  Sun Mar 28 05:48:31 2021
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Sun, 28 Mar 2021 11:48:31 +0800
Subject: [Rd] 
 Surprising behavior when using the reference class with the
 dollar symbol
In-Reply-To: <CAHqSRuSnDahtNvx5dQLPFR7OvG9D+MUoU5KaHRHYG7uBnUAt9Q@mail.gmail.com>
References: <CAGiFhPPEGQR4Nah2h6d+JFvhmVvyPOCR=QCUWLuDwL0qUiZN4Q@mail.gmail.com>
 <52e935e2-ee6c-59b7-a08f-e4fb95470656@gmail.com>
 <CAGiFhPO1Nb32zCCoi7w=oJciC5MG3h0J_8_GJykyxpw9WA6REQ@mail.gmail.com>
 <CAHqSRuSnDahtNvx5dQLPFR7OvG9D+MUoU5KaHRHYG7uBnUAt9Q@mail.gmail.com>
Message-ID: <CAGiFhPPgdgU8m2xSjW_RvZFHpPYimqc=G8Tgd8U1Wx_J+s4M7A@mail.gmail.com>

Thank you for the clarification! Wow, I do not know the same rule
applies to the list object. Maybe that's because the list object will
give NULL not an error. I might have incorrectly used it in my
package.

Best,
Jiefei

On Sun, Mar 28, 2021 at 3:26 AM Bill Dunlap <williamwdunlap at gmail.com> wrote:
>
> > > It looks like when calling the dollar symbol using the function format, it
> > > treats the input argument as a character literal and does not evaluate it
> > > inside the function. I know we have the function `field` to get the slot
> > > variable, but I wonder if this is designed on purpose as the above example
> > > works for both list and S4 system.
>
> It works almost the same way with lists, the difference being that an
> unknown name with a list gives NULL and not an error.
>
> > L <- list(A=101)
> > `$`(L, A)
> [1] 101
> > `$`(L, "A")
> [1] 101
> > i <- "A"
> > `$`(L, i)
> NULL
>
> The 2nd argument is treated as a symbol and is never evaluated.  If it
> is given as a string literal then it is converted to a symbol - that
> is a holdover from the old days before backticks could be used to make
> symbol literals for symbols that included odd things like spaces and
> dollar signs.
>
> -Bill
>
> On Sat, Mar 27, 2021 at 7:49 AM Jiefei Wang <szwjf08 at gmail.com> wrote:
> >
> > Thanks, Duncan. Below is the repost of my question in plain text mode.
> >
> >
> > I'm trying to get the field value of a reference object by the field
> > name, but the dollar symbol behaves quite unusual. See example below
> >
> > .foo <- setRefClass(
> >     "foo",
> >     fields = list(
> >         a = "integer"
> >     )
> > )
> > x <- .foo$new(a=1L)
> > ## This is OK
> > x$a
> > ## This is OK
> > `$`(x, "a")
> > ## But this is not OK
> > i <- "a"
> > `$`(x, i)
> >
> > For the last line of code I get this error
> >
> > Error in envRefInferField(x, what, getClass(class(x)), selfEnv) :
> >   ?i? is not a valid field or method name for reference class ?foo?
> >
> > It looks like when calling the dollar symbol using the function
> > format, it treats the input argument as a character literal and does
> > not evaluate it inside the function. I know we have the function
> > `field` to get the slot variable, but I wonder if this is designed on
> > purpose as the above example works for both list and S4 system.
> >
> > Best,
> > Jiefei
> >
> >
> > On Sat, Mar 27, 2021 at 10:20 PM Duncan Murdoch
> > <murdoch.duncan at gmail.com> wrote:
> > >
> > > On 27/03/2021 10:16 a.m., Jiefei Wang wrote:
> > > > Hi all,
> > > >
> > > > I'm trying to get the field value of a reference object by the field name,
> > > > but the dollar symbol behaves quite unusual. See example below
> > > >
> > > >
> > > >
> > > >
> > > >
> > > >
> > > >
> > > >
> > > >
> > > >
> > > >
> > > >
> > > >
> > > >
> > > > *.foo <- setRefClass(    "foo",    fields = list(        a = "integer"
> > > > ))x <- .foo$new(a=1L)## This is OKx$a## This is OK`$`(x, "a")## But this is
> > > > not OKi <- "a"`$`(x, i)*
> > >
> > > This is really hard to read.  Please post it again, but don't use HTML.
> > >
> > > Duncan Murdoch
> > >
> > > >
> > > > For the last line of code I get this error
> > > >
> > > >
> > > > *Error in envRefInferField(x, what, getClass(class(x)), selfEnv) :   ?i? is
> > > > not a valid field or method name for reference class ?foo?*
> > > >
> > > > It looks like when calling the dollar symbol using the function format, it
> > > > treats the input argument as a character literal and does not evaluate it
> > > > inside the function. I know we have the function `field` to get the slot
> > > > variable, but I wonder if this is designed on purpose as the above example
> > > > works for both list and S4 system.
> > > >
> > > > Best,
> > > > Jiefei
> > > >
> > > >       [[alternative HTML version deleted]]
> > > >
> > > > ______________________________________________
> > > > R-devel at r-project.org mailing list
> > > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > > >
> > >
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Mar 29 10:41:44 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 29 Mar 2021 10:41:44 +0200
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <E1lPsS0-0000c6-UL@rmmprod07.runbox>
References: <E1lPsS0-0000c6-UL@rmmprod07.runbox>
Message-ID: <0340eaf3-5a8a-32f6-2277-c0851225be44@gmail.com>

Hi Andreas,

On 3/26/21 8:48 PM, Andreas Kersting wrote:
> Hi Dirk,  > > Sure, let me try to explain: > > CRAN ran the tests of my package 
using R which was configured > --with-valgrind-instrumentation > 0. 
Valgrind reported many errors > related to the use of supposedly 
uninitialized memory and the CRAN > team asked me to tackle these. > > 
These errors are false positives, because I pass a custom allocator > to 
allocVector3() which hands out memory which is already > initialized. 
However, this memory is explicitly marked for Valgrind > as 
uninitialized by allocVector3(), and I do not initialize it > 
subsequently, so Valgrind complains. > > Now I am asking if it is 
correct that allocVector3() marks memory as > uninitialized/undefined, 
even if it comes from a custom allocator. > This is because 
allocVector3() cannot know if the memory might > already by initialized.
I think the semantics of allocVector/allocVector3 should be the same 
regardless of whether custom allocators are used. The semantics of 
allocVector is to provide uninitialized memory (non-pointer types, 
Writing R Extensions 5.9.2). Therefore, it is the caller who needs to 
take care of initialization. This is also the semantics of "malloc" and 
Rallocators.h says "custom_alloc_t mem_alloc; /* malloc equivalent */".

So I think that your code using your custom allocator needs to 
initialize allocated memory to be correct. If your allocator initializes 
the memory, that is fine, but unnecessary.

So technically speaking, the valgrind reports are not false alarms. I 
think your call sites should initialize.

Best
Tomas



	[[alternative HTML version deleted]]


From r-deve| @end|ng |rom @ker@t|ng@de  Mon Mar 29 22:18:13 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Mon, 29 Mar 2021 22:18:13 +0200 (CEST)
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <0340eaf3-5a8a-32f6-2277-c0851225be44@gmail.com>
Message-ID: <E1lQyKz-0002vU-AF@rmmprod07.runbox>

Hi Tomas,

Thanks for sharing your view on this! I understand your point, but still I think that the current situation is somewhat unfortunate:

I would argue that mmap() is a natural candidate to be used together with allocVector3(); it is even mentioned explicitly here: https://github.com/wch/r-source/blob/trunk/src/main/memory.c#L2575-L2576

However, when using a non-anonymous mapping, i.e. we want mmap() to initialize the memory e.g. from a file or a POSIX shared memory object, this means that we need to use MAP_FIXED in case we are obliged to initialize the memory AFTER allocVector3() returned it; at least I cannot think of a different way to achieve this.

The use of MAP_FIXED
- is discouraged (e.g. https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/mmap.2.html)
- requires two calls to mmap(): (1) to obtain the (anonymous) memory to be handed out by the custom allocater and (2) to actually map the file "over" the just allocated vector (using MAP_FIXED), which will overwrite the vector header; hence, we need to first back it up to later restore it

I have implemented my function using MAP_FIXED here: https://github.com/gfkse/bettermc/commit/f34c4f4c45c9ab11abe9b9e9b8b48064f128d731#diff-7098a5dde34efab163bbef27fe32f95c29e76236649479985d09c70100e4c737R278-R323

This solution, to me, is much more complicated and hacky than my previous one, which assumed it is OK to hand out already initialized memory directly from allocVector3().

Regards,
Andreas


2021-03-29 10:41 GMT+02:00 "Tomas Kalibera" <tomas.kalibera at gmail.com>:
> Hi Andreas,
> On 3/26/21 8:48 PM, Andreas Kersting wrote:
>> Hi Dirk,  > > Sure, let me try to explain: > > CRAN ran the tests of my package using R which was configured > --with-valgrind-instrumentation > 0. Valgrind reported many errors > related to the use of supposedly uninitialized memory and the CRAN > team asked me to tackle these. > > These errors are false positives, because I pass a custom allocator > to allocVector3() which hands out memory which is already > initialized. However, this memory is explicitly marked for Valgrind > as uninitialized by allocVector3(), and I do not initialize it > subsequently, so Valgrind complains. > > Now I am asking if it is correct that allocVector3() marks memory as > uninitialized/undefined, even if it comes from a custom allocator. > This is because allocVector3() cannot know if the memory might > already by initialized.
> I think the semantics of allocVector/allocVector3 should be the same regardless of whether custom allocators are used. The semantics of allocVector is to provide uninitialized memory (non-pointer types, Writing R Extensions 5.9.2). Therefore, it is the caller who needs to take care of initialization. This is also the semantics of "malloc" and Rallocators.h says "custom_alloc_t mem_alloc; /* malloc equivalent */".
> 
> So I think that your code using your custom allocator needs to initialize allocated memory to be correct. If your allocator initializes the memory, that is fine, but unnecessary.
> 
> So technically speaking, the valgrind reports are not false alarms. I think your call sites should initialize.
> 
> Best
> Tomas
> 
> 
> 

From kmbe||56 @end|ng |rom gm@||@com  Tue Mar 30 00:04:29 2021
From: kmbe||56 @end|ng |rom gm@||@com (Kenny Bell)
Date: Tue, 30 Mar 2021 11:04:29 +1300
Subject: [Rd] Possible bug in predict.lm when x is a poly
Message-ID: <CAPekMCnPsNr+SoDsjnWXLYyjWsv2c1Jgue5seCqVH5kJjn_aYw@mail.gmail.com>

Hi all,

As always, thank you all for your incredible work maintaining and improving
R.

mdl <- lm(data = mtcars,
          mpg ~ I(poly(disp, 2)))

predict(mdl, newdata = data.frame(disp = c(120, 120)))
#> Error in poly(disp, 2): 'degree' must be less than number of unique
points

predict(mdl, newdata = data.frame(disp = c(120, 121, 122)))
#>         1         2         3
#> 43.937856 12.617762  3.716257

The predict function seems to require a sufficiently high number of unique
values in newdata when the RHS is a poly. Of course, I would have expected
the output here to be:

#>         1         2
#> 43.937856 43.937856

If people agree, I can submit this to bugzilla.

Kind regards,
Kenny

	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Tue Mar 30 00:24:24 2021
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 29 Mar 2021 18:24:24 -0400
Subject: [Rd] Possible bug in predict.lm when x is a poly
In-Reply-To: <CAPekMCnPsNr+SoDsjnWXLYyjWsv2c1Jgue5seCqVH5kJjn_aYw@mail.gmail.com>
References: <CAPekMCnPsNr+SoDsjnWXLYyjWsv2c1Jgue5seCqVH5kJjn_aYw@mail.gmail.com>
Message-ID: <6f871fc3-e96f-8611-86c7-54f993a95145@gmail.com>

   Any particular reason you're using I() around your poly()?  That 
looks weird to me ... and it works fine if you don't do that ...  {AND, 
I think your result is *incorrect* when you have 3 observations in your 
response}.

   Basically, you have managed to short-circuit the (admittedly) obscure 
machinery that R uses to generate the correct bases when predicting from 
new data (see ?makepredictcall ...)

On 3/29/21 6:04 PM, Kenny Bell wrote:
> Hi all,
> 
> As always, thank you all for your incredible work maintaining and improving
> R.
> 
> mdl <- lm(data = mtcars,
>            mpg ~ I(poly(disp, 2)))
> 
> predict(mdl, newdata = data.frame(disp = c(120, 120)))
> #> Error in poly(disp, 2): 'degree' must be less than number of unique
> points
> 
> predict(mdl, newdata = data.frame(disp = c(120, 121, 122)))
> #>         1         2         3
> #> 43.937856 12.617762  3.716257
> 
> The predict function seems to require a sufficiently high number of unique
> values in newdata when the RHS is a poly. Of course, I would have expected
> the output here to be:
> 
> #>         1         2
> #> 43.937856 43.937856
> 
> If people agree, I can submit this to bugzilla.
> 
> Kind regards,
> Kenny
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From r-deve| @end|ng |rom @ker@t|ng@de  Tue Mar 30 07:27:38 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Tue, 30 Mar 2021 07:27:38 +0200 (CEST)
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <EE9F6C8C-E540-4310-BD97-B65FE14F58A7@R-project.org>
Message-ID: <E1lR6ug-0006x4-Ek@rmmprod07.runbox>

Hi Simon,

Yes, if this was acceptable on CRAN, I would agree that calling VALGRIND_MAKE_MEM_DEFINED() in my code would be sufficient. 

But since Tomas said, "So I think that your code using your custom allocator needs to initialize allocated memory to be correct. If your allocator initializes the memory, that is fine, but unnecessary.", I am not sure if it is acceptable.

Regards,
Andreas

2021-03-30 00:39 GMT+02:00 "Simon Urbanek" <simon.urbanek at R-project.org>:
> Andres,
> 
> correct me if I'm wrong, but the issue here is not initialisation but rather valgrind flagging. You simply have to call VALGRIND_MAKE_MEM_DEFINED() in your code after allocVector3() to declare that you have initialised the memory - or am I missing something?
> 
> Cheers,
> Simon
> 
> 
> 
>> On 30/03/2021, at 9:18 AM, Andreas Kersting <r-devel at akersting.de> wrote:
>> 
>> Hi Tomas,
>> 
>> Thanks for sharing your view on this! I understand your point, but still I think that the current situation is somewhat unfortunate:
>> 
>> I would argue that mmap() is a natural candidate to be used together with allocVector3(); it is even mentioned explicitly here: https://github.com/wch/r-source/blob/trunk/src/main/memory.c#L2575-L2576
>> 
>> However, when using a non-anonymous mapping, i.e. we want mmap() to initialize the memory e.g. from a file or a POSIX shared memory object, this means that we need to use MAP_FIXED in case we are obliged to initialize the memory AFTER allocVector3() returned it; at least I cannot think of a different way to achieve this.
>> 
>> The use of MAP_FIXED
>> - is discouraged (e.g. https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/mmap.2.html)
>> - requires two calls to mmap(): (1) to obtain the (anonymous) memory to be handed out by the custom allocater and (2) to actually map the file "over" the just allocated vector (using MAP_FIXED), which will overwrite the vector header; hence, we need to first back it up to later restore it
>> 
>> I have implemented my function using MAP_FIXED here: https://github.com/gfkse/bettermc/commit/f34c4f4c45c9ab11abe9b9e9b8b48064f128d731#diff-7098a5dde34efab163bbef27fe32f95c29e76236649479985d09c70100e4c737R278-R323
>> 
>> This solution, to me, is much more complicated and hacky than my previous one, which assumed it is OK to hand out already initialized memory directly from allocVector3().
>> 
>> Regards,
>> Andreas
>> 
>> 
>> 2021-03-29 10:41 GMT+02:00 "Tomas Kalibera" <tomas.kalibera at gmail.com>:
>>> Hi Andreas,
>>> On 3/26/21 8:48 PM, Andreas Kersting wrote:
>>>> Hi Dirk,  > > Sure, let me try to explain: > > CRAN ran the tests of my package using R which was configured > --with-valgrind-instrumentation > 0. Valgrind reported many errors > related to the use of supposedly uninitialized memory and the CRAN > team asked me to tackle these. > > These errors are false positives, because I pass a custom allocator > to allocVector3() which hands out memory which is already > initialized. However, this memory is explicitly marked for Valgrind > as uninitialized by allocVector3(), and I do not initialize it > subsequently, so Valgrind complains. > > Now I am asking if it is correct that allocVector3() marks memory as > uninitialized/undefined, even if it comes from a custom allocator. > This is because allocVector3() cannot know if the memory might > already by initialized.
>>> I think the semantics of allocVector/allocVector3 should be the same regardless of whether custom allocators are used. The semantics of allocVector is to provide uninitialized memory (non-pointer types, Writing R Extensions 5.9.2). Therefore, it is the caller who needs to take care of initialization. This is also the semantics of "malloc" and Rallocators.h says "custom_alloc_t mem_alloc; /* malloc equivalent */".
>>> 
>>> So I think that your code using your custom allocator needs to initialize allocated memory to be correct. If your allocator initializes the memory, that is fine, but unnecessary.
>>> 
>>> So technically speaking, the valgrind reports are not false alarms. I think your call sites should initialize.
>>> 
>>> Best
>>> Tomas
>>> 
>>> 
>>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 

From hugh@p@r@on@ge @end|ng |rom gm@||@com  Tue Mar 30 08:02:07 2021
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Tue, 30 Mar 2021 17:02:07 +1100
Subject: [Rd] nchar(x, type = "bytes") seems slower than it could be
Message-ID: <CAJmOi+M9=objncOAZh=5-BVy_VxUfbhhErgz5=6BHA60WTaTkQ@mail.gmail.com>

While profiling some C code, I rolled my own nchar function which
appears to be much faster than base R's (25 times faster for a 10M
length vector).  Obviously base::nchar provides significantly more
features than my barebones function (C snippet below); however, for
argument type = "bytes" it seems that the R_nchar and do_nchar
functions do not actually do anything more than this function.

My suspicion is that I have overlooked some subtlety in the base R
code, or that my benchmarks are not representative.  Alternatively,
the action in `do_nchar` of preparing the potential error message
before being passed to `R_nchar` may be quite costly indeed.  Or the
function cannot be unswitched from the more complex width and chars
arguments by the compiler.

If I haven't missed something, would a patch be warranted?

SEXP Cnchar(SEXP x) {
  R_xlen_t N = xlength(x);
  SEXP ans = PROTECT(allocVector(INTSXP, N));
  int * restrict ansp = INTEGER(ans);

  // Ignoring NA to avoid the branch has a very small
  // impact on performance.
  for (R_xlen_t i = 0; i < N; ++i) {
    SEXP sxi = STRING_ELT(x, i);
    if (sxi == NA_STRING) {
      ansp[i] = NA_INTEGER;
      continue;
    }
    ansp[i] = length(sxi);
  }
  UNPROTECT(1);
  return ans;
}

x <- rep_len(c(as.character(c(5L, 1:1e6)), NA_character_, 1e6:15e5), 1e7)
Cnchar(x)
90ms
nchar(x, type = "bytes")
2500 ms


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Mar 30 09:38:50 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 30 Mar 2021 09:38:50 +0200
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <E1lQyKz-0002vU-AF@rmmprod07.runbox>
References: <E1lQyKz-0002vU-AF@rmmprod07.runbox>
Message-ID: <2a237d04-81fd-b9d8-36f5-2fb2a4af5746@gmail.com>

On 3/29/21 10:18 PM, Andreas Kersting wrote:
> Hi Tomas,
>
> Thanks for sharing your view on this! I understand your point, but still I think that the current situation is somewhat unfortunate:
>
> I would argue that mmap() is a natural candidate to be used together with allocVector3(); it is even mentioned explicitly here: https://github.com/wch/r-source/blob/trunk/src/main/memory.c#L2575-L2576
>
> However, when using a non-anonymous mapping, i.e. we want mmap() to initialize the memory e.g. from a file or a POSIX shared memory object, this means that we need to use MAP_FIXED in case we are obliged to initialize the memory AFTER allocVector3() returned it; at least I cannot think of a different way to achieve this.

Hi Andreas,

I didn't mean to suggest that the memory to be returned by a custom 
allocator must originate from malloc, mmap is fine, I was just arguing 
that the mention of malloc in the header file is another indication that 
the memory returned by a custom allocator may not be initialized. If 
your allocator does initialize the memory anyway, it is fine and 
appropriate to tell valgrind about it. As this is becoming rather too 
technical and specific to the internals, feel free to take this offline 
with Simon and me.

Best
Tomas

>
> The use of MAP_FIXED
> - is discouraged (e.g. https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/mmap.2.html)
> - requires two calls to mmap(): (1) to obtain the (anonymous) memory to be handed out by the custom allocater and (2) to actually map the file "over" the just allocated vector (using MAP_FIXED), which will overwrite the vector header; hence, we need to first back it up to later restore it
>
> I have implemented my function using MAP_FIXED here: https://github.com/gfkse/bettermc/commit/f34c4f4c45c9ab11abe9b9e9b8b48064f128d731#diff-7098a5dde34efab163bbef27fe32f95c29e76236649479985d09c70100e4c737R278-R323
>
> This solution, to me, is much more complicated and hacky than my previous one, which assumed it is OK to hand out already initialized memory directly from allocVector3().
>
> Regards,
> Andreas
>
>
> 2021-03-29 10:41 GMT+02:00 "Tomas Kalibera" <tomas.kalibera at gmail.com>:
>> Hi Andreas,
>> On 3/26/21 8:48 PM, Andreas Kersting wrote:
>>> Hi Dirk,  > > Sure, let me try to explain: > > CRAN ran the tests of my package using R which was configured > --with-valgrind-instrumentation > 0. Valgrind reported many errors > related to the use of supposedly uninitialized memory and the CRAN > team asked me to tackle these. > > These errors are false positives, because I pass a custom allocator > to allocVector3() which hands out memory which is already > initialized. However, this memory is explicitly marked for Valgrind > as uninitialized by allocVector3(), and I do not initialize it > subsequently, so Valgrind complains. > > Now I am asking if it is correct that allocVector3() marks memory as > uninitialized/undefined, even if it comes from a custom allocator. > This is because allocVector3() cannot know if the memory might > already by initialized.
>> I think the semantics of allocVector/allocVector3 should be the same regardless of whether custom allocators are used. The semantics of allocVector is to provide uninitialized memory (non-pointer types, Writing R Extensions 5.9.2). Therefore, it is the caller who needs to take care of initialization. This is also the semantics of "malloc" and Rallocators.h says "custom_alloc_t mem_alloc; /* malloc equivalent */".
>>
>> So I think that your code using your custom allocator needs to initialize allocated memory to be correct. If your allocator initializes the memory, that is fine, but unnecessary.
>>
>> So technically speaking, the valgrind reports are not false alarms. I think your call sites should initialize.
>>
>> Best
>> Tomas
>>
>>


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Mar 30 10:20:57 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 30 Mar 2021 10:20:57 +0200
Subject: [Rd] nchar(x, type = "bytes") seems slower than it could be
In-Reply-To: <CAJmOi+M9=objncOAZh=5-BVy_VxUfbhhErgz5=6BHA60WTaTkQ@mail.gmail.com>
References: <CAJmOi+M9=objncOAZh=5-BVy_VxUfbhhErgz5=6BHA60WTaTkQ@mail.gmail.com>
Message-ID: <db975d51-5bab-cdad-142e-336ca447ed58@gmail.com>

Thanks for the report, you are probably running into the overhead of the 
eager creation of the error message. On my system, with your 
micro-benchmark, it is about 10x. I've tested simply by uncommenting it 
and re-running the benchmark. I'll fix (this is not a good task for a 
contributed patch).

Best,
Tomas

On 3/30/21 8:02 AM, Hugh Parsonage wrote:
> While profiling some C code, I rolled my own nchar function which
> appears to be much faster than base R's (25 times faster for a 10M
> length vector).  Obviously base::nchar provides significantly more
> features than my barebones function (C snippet below); however, for
> argument type = "bytes" it seems that the R_nchar and do_nchar
> functions do not actually do anything more than this function.
> My suspicion is that I have overlooked some subtlety in the base R
> code, or that my benchmarks are not representative.  Alternatively,
> the action in `do_nchar` of preparing the potential error message
> before being passed to `R_nchar` may be quite costly indeed.  Or the
> function cannot be unswitched from the more complex width and chars
> arguments by the compiler.
>
> If I haven't missed something, would a patch be warranted?
>
> SEXP Cnchar(SEXP x) {
>    R_xlen_t N = xlength(x);
>    SEXP ans = PROTECT(allocVector(INTSXP, N));
>    int * restrict ansp = INTEGER(ans);
>
>    // Ignoring NA to avoid the branch has a very small
>    // impact on performance.
>    for (R_xlen_t i = 0; i < N; ++i) {
>      SEXP sxi = STRING_ELT(x, i);
>      if (sxi == NA_STRING) {
>        ansp[i] = NA_INTEGER;
>        continue;
>      }
>      ansp[i] = length(sxi);
>    }
>    UNPROTECT(1);
>    return ans;
> }
>
> x <- rep_len(c(as.character(c(5L, 1:1e6)), NA_character_, 1e6:15e5), 1e7)
> Cnchar(x)
> 90ms
> nchar(x, type = "bytes")
> 2500 ms
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Tue Mar 30 10:20:52 2021
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Tue, 30 Mar 2021 10:20:52 +0200
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <2a237d04-81fd-b9d8-36f5-2fb2a4af5746@gmail.com>
References: <E1lQyKz-0002vU-AF@rmmprod07.runbox>
 <2a237d04-81fd-b9d8-36f5-2fb2a4af5746@gmail.com>
Message-ID: <CAC2h7uuKhhcpHkfVZURQZD1OMv1XUW00T+gpNO0BR3USVTUbrg@mail.gmail.com>

On Tue, Mar 30, 2021 at 9:39 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

<SNIP>

> appropriate to tell valgrind about it. As this is becoming rather too
> technical and specific to the internals, feel free to take this offline
> with Simon and me.
>

Respectfully, this seems to me to be exactly the kind of exchange R-devel
is meant for.
-- 
Best,
Kasper

	[[alternative HTML version deleted]]


From r-deve| @end|ng |rom @ker@t|ng@de  Tue Mar 30 10:33:55 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Tue, 30 Mar 2021 10:33:55 +0200 (CEST)
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <6E0C9B98-7CE3-4027-8C0E-56D5DDC74963@R-project.org>
Message-ID: <E1lR9ox-00068x-Vq@rmmprod07.runbox>

Hi Simon, hi Tomas,

Let me try to wrap up this discussion:

- "What does any of this to do with CRAN?"
Not much, I agree. It is just that this whole issue arose because the CRAN team asked me to fix the use of uninitialized memory as reported by Valgrind. Sorry for mixing things up here.

- "I don't quite get your earlier response about allocating *after* the call since that makes no sense to me"
I was talking about *initializing* after the call as originally suggested by Tomas and - as I wrote - I also do not like my proposal involving MAP_FIXED.

- bottom line
allocVector3() is correctly marking memory as uninitialized because it cannot safely assume otherwise. It is ok for a custom allocator to return already initialized memory and inform Valgrind about this fact.

I hope, this summarizes it well.

Thanks for your time and support, Tomas and Simon. Very much appreciated!

Regards,
Andreas


2021-03-30 10:03 GMT+02:00 "Simon Urbanek" <simon.urbanek at R-project.org>:
> Andreas,
> 
> What does any of this to do with CRAN? This not a the CRAN list - we're discussing the proper approach of using valgrind and R can only assume that the memory is uninitialised (since it cannot safely assume anything else) so it is up to you to declare the memory as initialised if you can guarantee that being true. I don't quite get your earlier response about allocating *after* the call since that makes no sense to me - the whole point of a custom allocator is to allow you to allocate the memory, so whether it is initialised or not is under your control - but that means also it is your responsibility to flag the state accordingly. Note, however, that this is not merely just true by the virtue of using mmap - the memory content is only valid (initialised) if you used mmap with previously initialised content. Again, entirely up to you to decide what the semantics are since you are the author of the custom allocator. Does that make sense?
> 
> Cheers,
> Simon
> 
> 
> 
>> On Mar 30, 2021, at 18:27, Andreas Kersting <r-devel at akersting.de> wrote:
>> 
>> Hi Simon,
>> 
>> Yes, if this was acceptable on CRAN, I would agree that calling VALGRIND_MAKE_MEM_DEFINED() in my code would be sufficient. 
>> 
>> But since Tomas said, "So I think that your code using your custom allocator needs to initialize allocated memory to be correct. If your allocator initializes the memory, that is fine, but unnecessary.", I am not sure if it is acceptable.
>> 
>> Regards,
>> Andreas
>> 
>> 2021-03-30 00:39 GMT+02:00 "Simon Urbanek" <simon.urbanek at R-project.org>:
>>> Andres,
>>> 
>>> correct me if I'm wrong, but the issue here is not initialisation but rather valgrind flagging. You simply have to call VALGRIND_MAKE_MEM_DEFINED() in your code after allocVector3() to declare that you have initialised the memory - or am I missing something?
>>> 
>>> Cheers,
>>> Simon
>>> 
>>> 
>>> 
>>>> On 30/03/2021, at 9:18 AM, Andreas Kersting <r-devel at akersting.de> wrote:
>>>> 
>>>> Hi Tomas,
>>>> 
>>>> Thanks for sharing your view on this! I understand your point, but still I think that the current situation is somewhat unfortunate:
>>>> 
>>>> I would argue that mmap() is a natural candidate to be used together with allocVector3(); it is even mentioned explicitly here: https://github.com/wch/r-source/blob/trunk/src/main/memory.c#L2575-L2576
>>>> 
>>>> However, when using a non-anonymous mapping, i.e. we want mmap() to initialize the memory e.g. from a file or a POSIX shared memory object, this means that we need to use MAP_FIXED in case we are obliged to initialize the memory AFTER allocVector3() returned it; at least I cannot think of a different way to achieve this.
>>>> 
>>>> The use of MAP_FIXED
>>>> - is discouraged (e.g. https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/mmap.2.html)
>>>> - requires two calls to mmap(): (1) to obtain the (anonymous) memory to be handed out by the custom allocater and (2) to actually map the file "over" the just allocated vector (using MAP_FIXED), which will overwrite the vector header; hence, we need to first back it up to later restore it
>>>> 
>>>> I have implemented my function using MAP_FIXED here: https://github.com/gfkse/bettermc/commit/f34c4f4c45c9ab11abe9b9e9b8b48064f128d731#diff-7098a5dde34efab163bbef27fe32f95c29e76236649479985d09c70100e4c737R278-R323
>>>> 
>>>> This solution, to me, is much more complicated and hacky than my previous one, which assumed it is OK to hand out already initialized memory directly from allocVector3().
>>>> 
>>>> Regards,
>>>> Andreas
>>>> 
>>>> 
>>>> 2021-03-29 10:41 GMT+02:00 "Tomas Kalibera" <tomas.kalibera at gmail.com>:
>>>>> Hi Andreas,
>>>>> On 3/26/21 8:48 PM, Andreas Kersting wrote:
>>>>>> Hi Dirk,  > > Sure, let me try to explain: > > CRAN ran the tests of my package using R which was configured > --with-valgrind-instrumentation > 0. Valgrind reported many errors > related to the use of supposedly uninitialized memory and the CRAN > team asked me to tackle these. > > These errors are false positives, because I pass a custom allocator > to allocVector3() which hands out memory which is already > initialized. However, this memory is explicitly marked for Valgrind > as uninitialized by allocVector3(), and I do not initialize it > subsequently, so Valgrind complains. > > Now I am asking if it is correct that allocVector3() marks memory as > uninitialized/undefined, even if it comes from a custom allocator. > This is because allocVector3() cannot know if the memory might > already by initialized.
>>>>> I think the semantics of allocVector/allocVector3 should be the same regardless of whether custom allocators are used. The semantics of allocVector is to provide uninitialized memory (non-pointer types, Writing R Extensions 5.9.2). Therefore, it is the caller who needs to take care of initialization. This is also the semantics of "malloc" and Rallocators.h says "custom_alloc_t mem_alloc; /* malloc equivalent */".
>>>>> 
>>>>> So I think that your code using your custom allocator needs to initialize allocated memory to be correct. If your allocator initializes the memory, that is fine, but unnecessary.
>>>>> 
>>>>> So technically speaking, the valgrind reports are not false alarms. I think your call sites should initialize.
>>>>> 
>>>>> Best
>>>>> Tomas
>>>>> 
>>>>> 
>>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>> 
>>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 

From pd@|gd @end|ng |rom gm@||@com  Wed Mar 31 12:30:56 2021
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Wed, 31 Mar 2021 12:30:56 +0200
Subject: [Rd] R 4.0.5 is released
Message-ID: <21C0B9A3-A0D0-4169-82FD-FFBE63A21F01@gmail.com>

The build system rolled up R-4.0.5.tar.gz (codename "Shake and Throw") this morning.

This is a very minor update, mostly to fix the annoyance with East Asian character sets.

The list below details the changes in this release. 

You can get the source code from

https://cran.r-project.org/src/base/R-4/R-4.0.5.tar.gz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course.


For the R Core Team,

Peter Dalgaard

These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = b9c44f9f78cab3184ad9898bebc854b4
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = 639fbbba9998cae70ef058be42b80a52
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = 553381d79675220a90cf9b264997e458
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = eb78c4d053ec9c32b815cf0c2ebea801
MD5 (NEWS.2) = 496062c138e2def06cebccddfb814ac6
MD5 (NEWS.3) = 012e7f4a80cc8ec947bf3f0ff6117ec8
MD5 (R-latest.tar.gz) = eb8fb47cc91ff287005c1633ef8599e6
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = 529223fd3ffef95731d0a87353108435
MD5 (THANKS) = 251d20510bfc3cc93b82c5a99f7efcc6
MD5 (VERSION-INFO.dcf) = 62b1389bc9fed2bf5857c0c99ef490f2
MD5 (R-4/R-4.0.5.tar.gz) = eb8fb47cc91ff287005c1633ef8599e6


2cde824a7b18958e5f06b391c801c8288be0f84fa8934b7ddefef23c67e60c09  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
0dce85f38b9d6351a1b63f057dfbc7f572966245add12946482e57e60d41547c  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
bbee124ddbd6682ecbaa5193d5ffc35aa090fcf29b30a9ad6f1498074a720388  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
12b30c724117b1b2b11484673906a6dcd48a361f69fc420b36194f9218692d01  NEWS.1
e80de410c77f05ff2012fa70051b89119845f734a7fa5c55857e61e4ed7d5f6e  NEWS.2
7201d139947afa52b5e09d26dc01445edf444506264355b2185122bc1ed3dce0  NEWS.3
0a3ee079aa772e131fe5435311ab627fcbccb5a50cabc54292e6f62046f1ffef  R-latest.tar.gz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
408737572ecc6e1135fdb2cf7a9dbb1a6cb27967c757f1771b8c39d1fd2f1ab9  RESOURCES
c9c7cb32308b4e560a22c858819ade9de524a602abd4e92d1c328c89f8037d73  THANKS
6f7663cb7813af1228978d9ef356fb6e6dad131fab9bbed507b657b48e2df6bd  VERSION-INFO.dcf
0a3ee079aa772e131fe5435311ab627fcbccb5a50cabc54292e6f62046f1ffef  R-4/R-4.0.5.tar.gz

This is the relevant part of the NEWS file

CHANGES IN R 4.0.5:

  BUG FIXES:

    * The change to the internal table in R 4.0.4 for iswprint has been
      reverted: it contained some errors in printability of 'East
      Asian' characters.

    * For packages using LazyData, R CMD build ignored the
      --resave-data option and the BuildResaveData field of the
      DESCRIPTION file (in R versions 4.0.0 to 4.0.4).

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Mar 30 10:03:04 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 30 Mar 2021 21:03:04 +1300
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <E1lR6ug-0006x4-Ek@rmmprod07.runbox>
References: <E1lR6ug-0006x4-Ek@rmmprod07.runbox>
Message-ID: <6E0C9B98-7CE3-4027-8C0E-56D5DDC74963@R-project.org>


Andreas,

What does any of this to do with CRAN? This not a the CRAN list - we're discussing the proper approach of using valgrind and R can only assume that the memory is uninitialised (since it cannot safely assume anything else) so it is up to you to declare the memory as initialised if you can guarantee that being true. I don't quite get your earlier response about allocating *after* the call since that makes no sense to me - the whole point of a custom allocator is to allow you to allocate the memory, so whether it is initialised or not is under your control - but that means also it is your responsibility to flag the state accordingly. Note, however, that this is not merely just true by the virtue of using mmap - the memory content is only valid (initialised) if you used mmap with previously initialised content. Again, entirely up to you to decide what the semantics are since you are the author of the custom allocator. Does that make sense?

Cheers,
Simon



> On Mar 30, 2021, at 18:27, Andreas Kersting <r-devel at akersting.de> wrote:
> 
> Hi Simon,
> 
> Yes, if this was acceptable on CRAN, I would agree that calling VALGRIND_MAKE_MEM_DEFINED() in my code would be sufficient. 
> 
> But since Tomas said, "So I think that your code using your custom allocator needs to initialize allocated memory to be correct. If your allocator initializes the memory, that is fine, but unnecessary.", I am not sure if it is acceptable.
> 
> Regards,
> Andreas
> 
> 2021-03-30 00:39 GMT+02:00 "Simon Urbanek" <simon.urbanek at R-project.org>:
>> Andres,
>> 
>> correct me if I'm wrong, but the issue here is not initialisation but rather valgrind flagging. You simply have to call VALGRIND_MAKE_MEM_DEFINED() in your code after allocVector3() to declare that you have initialised the memory - or am I missing something?
>> 
>> Cheers,
>> Simon
>> 
>> 
>> 
>>> On 30/03/2021, at 9:18 AM, Andreas Kersting <r-devel at akersting.de> wrote:
>>> 
>>> Hi Tomas,
>>> 
>>> Thanks for sharing your view on this! I understand your point, but still I think that the current situation is somewhat unfortunate:
>>> 
>>> I would argue that mmap() is a natural candidate to be used together with allocVector3(); it is even mentioned explicitly here: https://github.com/wch/r-source/blob/trunk/src/main/memory.c#L2575-L2576
>>> 
>>> However, when using a non-anonymous mapping, i.e. we want mmap() to initialize the memory e.g. from a file or a POSIX shared memory object, this means that we need to use MAP_FIXED in case we are obliged to initialize the memory AFTER allocVector3() returned it; at least I cannot think of a different way to achieve this.
>>> 
>>> The use of MAP_FIXED
>>> - is discouraged (e.g. https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/mmap.2.html)
>>> - requires two calls to mmap(): (1) to obtain the (anonymous) memory to be handed out by the custom allocater and (2) to actually map the file "over" the just allocated vector (using MAP_FIXED), which will overwrite the vector header; hence, we need to first back it up to later restore it
>>> 
>>> I have implemented my function using MAP_FIXED here: https://github.com/gfkse/bettermc/commit/f34c4f4c45c9ab11abe9b9e9b8b48064f128d731#diff-7098a5dde34efab163bbef27fe32f95c29e76236649479985d09c70100e4c737R278-R323
>>> 
>>> This solution, to me, is much more complicated and hacky than my previous one, which assumed it is OK to hand out already initialized memory directly from allocVector3().
>>> 
>>> Regards,
>>> Andreas
>>> 
>>> 
>>> 2021-03-29 10:41 GMT+02:00 "Tomas Kalibera" <tomas.kalibera at gmail.com>:
>>>> Hi Andreas,
>>>> On 3/26/21 8:48 PM, Andreas Kersting wrote:
>>>>> Hi Dirk,  > > Sure, let me try to explain: > > CRAN ran the tests of my package using R which was configured > --with-valgrind-instrumentation > 0. Valgrind reported many errors > related to the use of supposedly uninitialized memory and the CRAN > team asked me to tackle these. > > These errors are false positives, because I pass a custom allocator > to allocVector3() which hands out memory which is already > initialized. However, this memory is explicitly marked for Valgrind > as uninitialized by allocVector3(), and I do not initialize it > subsequently, so Valgrind complains. > > Now I am asking if it is correct that allocVector3() marks memory as > uninitialized/undefined, even if it comes from a custom allocator. > This is because allocVector3() cannot know if the memory might > already by initialized.
>>>> I think the semantics of allocVector/allocVector3 should be the same regardless of whether custom allocators are used. The semantics of allocVector is to provide uninitialized memory (non-pointer types, Writing R Extensions 5.9.2). Therefore, it is the caller who needs to take care of initialization. This is also the semantics of "malloc" and Rallocators.h says "custom_alloc_t mem_alloc; /* malloc equivalent */".
>>>> 
>>>> So I think that your code using your custom allocator needs to initialize allocated memory to be correct. If your allocator initializes the memory, that is fine, but unnecessary.
>>>> 
>>>> So technically speaking, the valgrind reports are not false alarms. I think your call sites should initialize.
>>>> 
>>>> Best
>>>> Tomas
>>>> 
>>>> 
>>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


