From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Apr  1 12:00:02 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 1 Apr 2019 12:00:02 +0200
Subject: [Rd] stopifnot -- eval(*) inside for()
In-Reply-To: <789570515.14008055.1554045973573@mail.yahoo.com>
References: <789570515.14008055.1554045973573.ref@mail.yahoo.com>
 <789570515.14008055.1554045973573@mail.yahoo.com>
Message-ID: <23713.57634.84910.241373@stat.math.ethz.ch>

>>>>> Suharto Anggono Suharto Anggono via R-devel 
>>>>>     on Sun, 31 Mar 2019 15:26:13 +0000 writes:

    > Ah, with R 3.5.0 or R 3.4.2, but not with R 3.3.1, 'eval'
    > inside 'for' makes compiled version behave like
    > non-compiled version. 

Ah.. ... thank you for detecting that  " eval() inside for()" behaves
specially  in how error message get a call or not.
Let's focus only on this issue here.

I'm adding a 0-th case to make even clearer what you are saying:

  >  options(error = expression(NULL))
  >  library(compiler)
  >  enableJIT(0)

  > f0 <- function(x) { x ; x^2 } ; f0(is.numeric(y))
  Error in f0(is.numeric(y)) (from #1) : object 'y' not found
  > (function(x) { x ; x^2 })(is.numeric(y))
  Error in (function(x) { (from #1) : object 'y' not found
  > f0c <- cmpfun(f0) ; f0c(is.numeric(y))

so by default, not only the error message but the originating
call is shown as well.

However, here's your revealing examples:

  > f <- function(x) for (i in 1) {x; eval(expression(i))}
  > f(is.numeric(y))
  > # Error: object 'y' not found
  > fc <- cmpfun(f)
  > fc(is.numeric(y))
  > # Error: object 'y' not found

I've tried more examples and did not find any difference
between simple interpreted and bytecompiled code {apart
from "keep.source=TRUE" keeping source, sometimes visible}.
So I don't understand yet why you think the byte compiler plays
a role.

Rather the crucial difference seems  the error happens inside a
loop which contains an explicit eval(.), and that eval() may
even be entirely unrelated to the statement in which the error
happens [above: The error happens when the promise 'x' is
evaluated, *before* eval() is called at all].


    > Is this accidental feature going to be relied upon?

    [i.e.  *in  stopifnot() R code (which in R-devel and R 3.5.x has
            had an eval() inside the for()-loop)]

That is a good question.
What I really like about the R-devel case:  We do get errors
signalled that do *not* contain the full stopifnot() call.

With the newish introduction of the `exprs = { ... ... }` variant,
it is even more natural to have large `exprs` in a stopifnot() call,
and when there's one accidental error in there, it's quite
unhelpful to see the full stopifnot(..........) call {many lines
of R code} obfuscating the one statement which produced the
error.

So it seems I am asking for a new feature in R, 
namely to temporarily say: Set the call to errors to NULL "in
the following".
In R 3.5.x, I had used withCallingHandlers(...) to achieve that
and do even similar for warnings... but needed to that for every
expression and hence inside the for loop  and the consequence
was a relatively large slowdown of stopifnot()..  which
triggered all the changes since.

Whereas what we see here ["eval() inside for()"] is a cheap
automatic suppression of 'call' for the "internal errors", i.e.,
those we don't trigger ourselves via stop(simplError(...)).


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Apr  1 12:02:32 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 1 Apr 2019 12:02:32 +0200
Subject: [Rd] topenv of emptyenv
In-Reply-To: <CAM2gKPaSjQp3Eq4Gy+B7RO-LgwgUoo8RV3JrA452f2v2FZAgLg@mail.gmail.com>
References: <CAM2gKPaSjQp3Eq4Gy+B7RO-LgwgUoo8RV3JrA452f2v2FZAgLg@mail.gmail.com>
Message-ID: <3b0589f3-c695-7fc4-ba74-389a4ffeead0@gmail.com>

On 3/23/19 3:26 PM, Konrad Rudolph wrote:
> I was surprised just now to find out that `topenv(emptyenv())` equals
> ? `.GlobalEnv`, not `emptyenv()`. From my understanding of the
> description of `topenv`, it should walk up the chain of enclosing
> environments (as if by calling `e = parent.env(e)` repeatedly; in
> fact, that is almost exactly its implementation in envir.c) until it
> hits a top level. However, `emptyenv()` has no enclosing environments
> so it should be its own top-level environment (I thought).
> Unfortunately the documentation on environments is relatively sparse,
> and the R Internals document doesn?t mention top-level environments.

The intuition here is that topenv() should be used with a reasonable 
execution environment and should return a reasonable execution 
environment (e.g. things you get from parent.frame(), etc). globalenv() 
is a reasonable default execution environment, emtyenv() is not). If you 
are using topenv() and especially if you are using it for something that 
is not an execution environment, there is a risk you are not doing the 
right thing - and this list may be a good place to ask for other 
solutions. topenv() as Martin said is not useful in normal user code. It 
is used in object systems (S3 and S4), in the byte-code compiler, 
sometimes in unit testing frameworks, etc.

As Martin already explained, reading the documentation as that 
"topenv(emptyenv())" would be documented to return "emptyenv()" is 
logically incorrect.

I agree, however, that it is not completely clear from the documentation 
what topenv() would do when given emptyenv() as either argument and we 
are working on addressing it. I've been looking into how much of the 
CRAN+BIOC tests (all packages) run into the special cases of topenv(), 
which btw required many hours of CPU time and some for analysis. The 
cases when topenv() is used with emptyenv() are very rare, but they 
exist (emptyenv() used as execution environment and S3 dispatch happens, 
dummy environment for S4 methods, etc).

Best
Tomas

>
> Concretely, I encountered this in the following code, which signals an
> error if `env` is the empty environment:
>
> while (! some_complex_condition(env) && ! identical(env, toplevel(env))) {
>      env = parent.env(env)
> }
>
> Of course there?s a trivial workaround (add an identity check for
> `emptyenv()` in the while loop condition) but it got me wondering if
> there?s a rationale for this result or if it?s ?accidental?/arbitrary:
> the C `topenv` implementation defaults to returning R_GlobalEnv for an
> empty environment. Is this effect actually useful (and used anywhere)?
>
> This is in R 3.4.4 but I can?t find an indication that this behaviour
> was ever changed.
>
> Cheers
>


From |uke-t|erney @end|ng |rom u|ow@@edu  Mon Apr  1 14:41:08 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Mon, 1 Apr 2019 12:41:08 +0000
Subject: [Rd] [External] Re:  stopifnot -- eval(*) inside for()
In-Reply-To: <23713.57634.84910.241373@stat.math.ethz.ch>
References: <789570515.14008055.1554045973573.ref@mail.yahoo.com>
 <789570515.14008055.1554045973573@mail.yahoo.com>
 <23713.57634.84910.241373@stat.math.ethz.ch>
Message-ID: <alpine.DEB.2.21.1904010739270.12495@luke-Latitude-7480>

On Mon, 1 Apr 2019, Martin Maechler wrote:

>>>>>> Suharto Anggono Suharto Anggono via R-devel
>>>>>>     on Sun, 31 Mar 2019 15:26:13 +0000 writes:
>
>    > Ah, with R 3.5.0 or R 3.4.2, but not with R 3.3.1, 'eval'
>    > inside 'for' makes compiled version behave like
>    > non-compiled version.
>
> Ah.. ... thank you for detecting that  " eval() inside for()" behaves
> specially  in how error message get a call or not.

Don't count on that remaining true indefinitely. The standard behavior
is better and we'll eventually get the case where 'eval' and a few
others are called to behave the same.

Best,

luke

> Let's focus only on this issue here.
>
> I'm adding a 0-th case to make even clearer what you are saying:
>
>  >  options(error = expression(NULL))
>  >  library(compiler)
>  >  enableJIT(0)
>
>  > f0 <- function(x) { x ; x^2 } ; f0(is.numeric(y))
>  Error in f0(is.numeric(y)) (from #1) : object 'y' not found
>  > (function(x) { x ; x^2 })(is.numeric(y))
>  Error in (function(x) { (from #1) : object 'y' not found
>  > f0c <- cmpfun(f0) ; f0c(is.numeric(y))
>
> so by default, not only the error message but the originating
> call is shown as well.
>
> However, here's your revealing examples:
>
>  > f <- function(x) for (i in 1) {x; eval(expression(i))}
>  > f(is.numeric(y))
>  > # Error: object 'y' not found
>  > fc <- cmpfun(f)
>  > fc(is.numeric(y))
>  > # Error: object 'y' not found
>
> I've tried more examples and did not find any difference
> between simple interpreted and bytecompiled code {apart
> from "keep.source=TRUE" keeping source, sometimes visible}.
> So I don't understand yet why you think the byte compiler plays
> a role.
>
> Rather the crucial difference seems  the error happens inside a
> loop which contains an explicit eval(.), and that eval() may
> even be entirely unrelated to the statement in which the error
> happens [above: The error happens when the promise 'x' is
> evaluated, *before* eval() is called at all].
>
>
>    > Is this accidental feature going to be relied upon?
>
>    [i.e.  *in  stopifnot() R code (which in R-devel and R 3.5.x has
>            had an eval() inside the for()-loop)]
>
> That is a good question.
> What I really like about the R-devel case:  We do get errors
> signalled that do *not* contain the full stopifnot() call.
>
> With the newish introduction of the `exprs = { ... ... }` variant,
> it is even more natural to have large `exprs` in a stopifnot() call,
> and when there's one accidental error in there, it's quite
> unhelpful to see the full stopifnot(..........) call {many lines
> of R code} obfuscating the one statement which produced the
> error.
>
> So it seems I am asking for a new feature in R,
> namely to temporarily say: Set the call to errors to NULL "in
> the following".
> In R 3.5.x, I had used withCallingHandlers(...) to achieve that
> and do even similar for warnings... but needed to that for every
> expression and hence inside the for loop  and the consequence
> was a relatively large slowdown of stopifnot()..  which
> triggered all the changes since.
>
> Whereas what we see here ["eval() inside for()"] is a cheap
> automatic suppression of 'call' for the "internal errors", i.e.,
> those we don't trigger ourselves via stop(simplError(...)).
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Apr  1 15:12:34 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 1 Apr 2019 15:12:34 +0200
Subject: [Rd] stopifnot
In-Reply-To: <789570515.14008055.1554045973573@mail.yahoo.com>
References: <789570515.14008055.1554045973573.ref@mail.yahoo.com>
 <789570515.14008055.1554045973573@mail.yahoo.com>
Message-ID: <23714.3650.6506.903814@stat.math.ethz.ch>

>>>>> Suharto Anggono Suharto Anggono via R-devel 
>>>>>     on Sun, 31 Mar 2019 15:26:13 +0000 writes:

 [.............]
 [........ "eval() inside for()" not giving call in error message .....]
 [.............]

    > "Details" section of 'stopifnot' documentation in current R 3.6.0 alpha
    > (https://svn.r-project.org/R/branches/R-3-6-branch/src/library/base/man/stopifnot.Rd)
    > has this.

    > ? Since \R version 3.6.0, \code{stopifnot()} no longer handles potential
    > ? errors or warnings (by \code{\link{tryCatch}()} etc) for each single
    > ? expression but rather aims at using the correct
    > ? \code{\link{sys.call}(<n>)} to get the most meaningful error message in
    > ? case of an error.? This provides considerably less overhead.

    > I think part of the first sentence starting from "but rather" should be removed because it is not true.

You are right that it is not accurate... I'll modify it,
including keeping the  "considerably less overhead"
which had been one important reason for changing from 3.5.x to
the current version.

    > The next paragraph:

    > ? Since \R version 3.5.0, expressions \emph{are} evaluated sequentially,
    > ? and hence evaluation stops as soon as there is a \dQuote{non-TRUE}, as
    > ? indicated by the above conceptual equivalence statement.
    > ? Further, when such an expression signals an error or
    > ? \code{\link{warning}}, its \code{\link{conditionCall}()} no longer
    > ? contains the full \code{stopifnot} call, but just the erroneous
    > ? expression.

    > As I said earlier (https://stat.ethz.ch/pipermail/r-devel/2019-February/077386.html), the last sentence above is not entirely true. 

You are right to some degree:  That really was true for R 3.5.x,
but is no longer entirely accurate.

It is still true currently interestingly thanks to the "eval() in for()"
behavior that the error/warning message is most of the time only
about the relevant part and not mentioning the full stopifnot(..) call.


    > It may say something like:
    > Further, when such an expression signals an error, stopifnot() in R 3.5.x makes its conditionCall() the erroneous expression, but no longer since R 3.6.0.


    > Is it OK that, for
    > do.call(stopifnot, list(exprs = expression())) ,
    > the whole expression object is taken as one?

You are right; that's not so nice.
On one hand, this is fine, as there is nothing not TRUE :

   > stopifnot()          
   > stopifnot(exprs = {})

but here,

   > do.call(stopifnot, list(exprs = expression())) 
   Error in do.call(stopifnot, list(exprs = expression())) : 
     expression() are not all TRUE

I'm about to commit a version [mostly from your suggestions],
where the above do.call() works as well.

    > End portion from running
    > example(stopifnot)
    > in R 3.5.0:

    stpfnt> stopifnot(all.equal(pi, 3.141593),? 2 < 2, all(1:10 < 12), "a" < "b")
    > Error in eval(ei, envir) : pi and 3.141593 are not equal:
    > ? Mean relative difference: 1.102658e-07

    > To me, "in eval(*)" is rather surprising and annoying and doesn't add clarity. Yes, stop() gives the same. But, in this case, just "Error", like in R before?version 3.5.0, feels better to me. If
    > stop(simpleError(msg, call = if(p <- sys.parent()) sys.call(p)))
    > were used in 'stopifnot', just "Error" would be given in this case.

And you are right again... in my current version I do use your

   stop(simpleError(msg, call = if(p <- sys.parent()) sys.call(p)))

and that does solve the above.

Martin


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Apr  1 18:13:28 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 1 Apr 2019 18:13:28 +0200
Subject: [Rd] [External] Re:  stopifnot -- eval(*) inside for()
In-Reply-To: <alpine.DEB.2.21.1904010739270.12495@luke-Latitude-7480>
References: <789570515.14008055.1554045973573.ref@mail.yahoo.com>
 <789570515.14008055.1554045973573@mail.yahoo.com>
 <23713.57634.84910.241373@stat.math.ethz.ch>
 <alpine.DEB.2.21.1904010739270.12495@luke-Latitude-7480>
Message-ID: <23714.14504.768459.429274@stat.math.ethz.ch>

>>>>> Tierney, Luke 
>>>>>     on Mon, 1 Apr 2019 12:41:08 +0000 writes:

    > On Mon, 1 Apr 2019, Martin Maechler wrote:
    >>>>>>> Suharto Anggono Suharto Anggono via R-devel
    >>>>>>> on Sun, 31 Mar 2019 15:26:13 +0000 writes:
    >> 
    >> > Ah, with R 3.5.0 or R 3.4.2, but not with R 3.3.1, 'eval'
    >> > inside 'for' makes compiled version behave like
    >> > non-compiled version.
    >> 
    >> Ah.. ... thank you for detecting that  " eval() inside for()" behaves
    >> specially  in how error message get a call or not.

    > Don't count on that remaining true indefinitely. The standard behavior
    > is better and we'll eventually get the case where 'eval' and a few
    > others are called to behave the same.

    > Best,
    > luke

Yes, Suharto did indeed mention that it may not be a good idea
to rely on that behavior, and I did agree ... though my
agreement was a bit buried in other stuff.

Note that I have been asking if this "accidental" but internally
consistent behavior for the current situation, could not be made
a feature that the user can ask for ... without having to use a
handler (which had been a real slowdown when used inside
stopifnot() in R 3.5.3) :


  [................]
  [................]

    >> So it seems I am asking for a new feature in R,
    >> namely to temporarily say: Set the call to errors to NULL "in
    >> the following".

    >> In R 3.5.x, I had used withCallingHandlers(...) to achieve that
    >> and do even similar for warnings... but needed to that for every
    >> expression and hence inside the for loop  and the consequence
    >> was a relatively large slowdown of stopifnot()..  which
    >> triggered all the changes since.
    >> 
    >> Whereas what we see here ["eval() inside for()"] is a cheap
    >> automatic suppression of 'call' for the "internal errors", i.e.,
    >> those we don't trigger ourselves via stop(simpleError(...)).

So, for me as programmeR, it would be nice to be able to ask for
"this" behavior explicitly in a special case as here, where
"no-call" error messages are preferable .. because the call can
be really large and is known to be  "almost surely" distracting
rather than helpful.

Martin


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Apr  1 18:23:31 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 1 Apr 2019 18:23:31 +0200
Subject: [Rd] Use of C++ in Packages
In-Reply-To: <5A14862F-729A-484C-A196-CA5F1D91B524@rstudio.com>
References: <CAD6tx97B3zHikY9Cs+DnMXdOFFUn76ONoTupZT8QTaqo7+xZCA@mail.gmail.com>
 <DA086757-A81C-4E25-AE4D-2E4BCA187941@R-project.org>
 <CAJXgQP2OuQ98zzj-8CNSFVBTv4OU0tsA12HH++x=r4vpxi7Osw@mail.gmail.com>
 <F68C848D-AE93-4CA9-9314-1ACDB23B87F6@r-project.org>
 <5A14862F-729A-484C-A196-CA5F1D91B524@rstudio.com>
Message-ID: <b6fa43a9-335b-5cf2-b91a-40daf38e8cae@gmail.com>

On 3/30/19 8:59 AM, Romain Francois wrote:
> tl;dr: we need better C++ tools and documentation.
>
> We collectively know more now with the rise of tools like rchk and improved documentation such as Tomas?s post. That?s a start, but it appears that there still is a lot of knowledge that would deserve to be promoted to actual documentation of best practices.
Well there is quite a bit of knowledge in Writing R Extensions and many 
problems could have been prevented had it been read more thoroughly by 
package developers. The problem that C++ runs some functions 
automatically (like destructors), should not be too hard to identify 
based on what WRE says about the need for protection against garbage 
collection.

 From my experience, one can learn most about R internals from debugging 
and reading source code - when debugging PROTECT errors and other memory 
errors/memory corruption, common problems caused by bugs in native C/C++ 
code - one needs to read and understand source code involved at all 
layers, one needs to understand the documentation covering code at 
different layers, and one has to think about these things, forming 
hypotheses, narrowing down to smaller examples, etc.

My suggestion for package authors who write native code and want to 
learn more, and who want to be responsible (these kinds of bugs affect 
other packaged indirectly and can be woken up by inconsequential and 
correct code changes, even in R runtime): test and debug your code hard 
- look at UBSAN/ASAN/valgrind/rchk checks from CRAN and run these tools 
yourself if needed. Run with strict barrier checking and with gctorture. 
Write more tests to increase the coverage. Specifically now if you use 
C++ code, try to read all of your related code and check you do not have 
the problems I mentioned in my blog. Think of other related problems and 
if you find about them, tell others. Make sure you only use the API from 
Writing R Extensions (and R help system). If you really can't find 
anything wrong about your package, but still want to learn more, try to 
debug some bugs reported against R runtime or against your favorite 
packages you use (or their CRAN check reports from various tools). In 
addition to learning more about R internals, by spending much more time 
on debugging you may also get a different perspective on some of the 
things about C++ I pointed to. Finally, it would help us with the 
problem we have now - that many R packages in C++ have serious bugs.

Tomas


From Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t  Tue Apr  2 01:38:05 2019
From: Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t (Achim Zeileis)
Date: Tue, 2 Apr 2019 01:38:05 +0200 (CEST)
Subject: [Rd] New grDevices::hcl.colors()
Message-ID: <alpine.DEB.2.21.1904020124060.1035@paninaro>

Hi everyone,

I wanted to draw your attention to a new post on the 
developer.R-project.org blog:
https://developer.R-project.org/Blog/public/2019/04/01/hcl-based-color-palettes-in-grdevices/

A new function grDevices::hcl.colors() greatly extends the color palette 
functionality available in base R. Also, the defaults in the heatmap 
functions image() and filled.contour() have been adapted accordingly.

Feedback is welcome, especially regarding potential problems with the 
changed defaults.

Best wishes,
Z


From d@v|dhughjone@ @end|ng |rom gm@||@com  Tue Apr  2 09:38:08 2019
From: d@v|dhughjone@ @end|ng |rom gm@||@com (David Hugh-Jones)
Date: Tue, 2 Apr 2019 08:38:08 +0100
Subject: [Rd] New grDevices::hcl.colors()
In-Reply-To: <alpine.DEB.2.21.1904020124060.1035@paninaro>
References: <alpine.DEB.2.21.1904020124060.1035@paninaro>
Message-ID: <CAARY7kgbhzE1T6RGgbbM+0SMfKC-ApG7cEJRS7Q=zFz=ECOOBw@mail.gmail.com>

Hi Achim

Quick Q: why do some palettes have a hyphen in the name and others not?

David

On Tue, 2 Apr 2019 at 00:38, Achim Zeileis <Achim.Zeileis at uibk.ac.at> wrote:

> Hi everyone,
>
> I wanted to draw your attention to a new post on the
> developer.R-project.org blog:
>
> https://developer.R-project.org/Blog/public/2019/04/01/hcl-based-color-palettes-in-grdevices/
>
> A new function grDevices::hcl.colors() greatly extends the color palette
> functionality available in base R. Also, the defaults in the heatmap
> functions image() and filled.contour() have been adapted accordingly.
>
> Feedback is welcome, especially regarding potential problems with the
> changed defaults.
>
> Best wishes,
> Z
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t  Tue Apr  2 10:12:43 2019
From: Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t (Achim Zeileis)
Date: Tue, 2 Apr 2019 10:12:43 +0200 (CEST)
Subject: [Rd] New grDevices::hcl.colors()
In-Reply-To: <CAARY7kgbhzE1T6RGgbbM+0SMfKC-ApG7cEJRS7Q=zFz=ECOOBw@mail.gmail.com>
References: <alpine.DEB.2.21.1904020124060.1035@paninaro>
 <CAARY7kgbhzE1T6RGgbbM+0SMfKC-ApG7cEJRS7Q=zFz=ECOOBw@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1904021009530.7663@paninaro>

Hi David:

> Quick Q: why do some palettes have a hyphen in the name and others not?

I followed the naming conventions of the respective packages that provide 
the original for the the HCL-based approximations. But when you specify 
the palette name in hcl.colors() all hyphens, spaces, and the 
capitalization is ignored anyway:

R> hcl.colors(4, "Dark 3")
[1] "#E16A86" "#909800" "#00AD9A" "#9183E6"
R> hcl.colors(4, "dark3")
[1] "#E16A86" "#909800" "#00AD9A" "#9183E6"
R> hcl.colors(4, "Dark-3")
[1] "#E16A86" "#909800" "#00AD9A" "#9183E6"
R> hcl.colors(4, "Dark----------------3")
[1] "#E16A86" "#909800" "#00AD9A" "#9183E6"

So hopefully this does not lead to too much confusion.

Best wishes,
Z

> On Tue, 2 Apr 2019 at 00:38, Achim Zeileis <Achim.Zeileis at uibk.ac.at> wrote:
>       Hi everyone,
>
>       I wanted to draw your attention to a new post on the
>       developer.R-project.org blog:
> https://developer.R-project.org/Blog/public/2019/04/01/hcl-based-color-pale
>       ttes-in-grdevices/
>
>       A new function grDevices::hcl.colors() greatly extends the color
>       palette
>       functionality available in base R. Also, the defaults in the
>       heatmap
>       functions image() and filled.contour() have been adapted
>       accordingly.
>
>       Feedback is welcome, especially regarding potential problems
>       with the
>       changed defaults.
>
>       Best wishes,
>       Z
>
>       ______________________________________________
>       R-devel at r-project.org mailing list
>       https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> --
> Sent from Gmail Mobile
> 
>


From dev@kurt @end|ng |rom v@nd|jck-|@ur|j@@en@be  Tue Apr  2 20:33:42 2019
From: dev@kurt @end|ng |rom v@nd|jck-|@ur|j@@en@be (Kurt Van Dijck)
Date: Tue, 2 Apr 2019 20:33:42 +0200
Subject: [Rd] [Bug 17546] extend readtable with a hook for column type
 detection
In-Reply-To: <bug-17546-3241-1rJUcItwhs@http.bugs.r-project.org/bugzilla/>
References: <bug-17546-3241@http.bugs.r-project.org/bugzilla/>
 <bug-17546-3241-1rJUcItwhs@http.bugs.r-project.org/bugzilla/>
Message-ID: <20190402183342.GA7075@x1.vandijck-laurijssen.be>

Hey,

Does someone have comments on the v4 of the proposed patch?

Kind regards,
Kurt


From @purd|e@@ @end|ng |rom gm@||@com  Tue Apr  2 23:01:38 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abs Spurdle)
Date: Wed, 3 Apr 2019 10:01:38 +1300
Subject: [Rd] New grDevices::hcl.colors()
Message-ID: <CAB8pepzTDHE-QktJRkpGSzssKS_0-2BX6zANg_cb+=DeuiZO6A@mail.gmail.com>

Hi Z

I think supporting HCL color spaces more, is a *very* good idea.
However, I doubt many R users, understand the motivation for HCL color
spaces.

I've reproduced Ross Ihaka's notes on color, on my personal website:
https://sites.google.com/site/spurdlea/exts/ihaka_r_stats_787_10_color.pdf

(This has been reproduced with permission).

Another good article is:
https://www.r-project.org/conferences/DSC-2003/Proceedings/Ihaka.pdf

And the colorspace package vignette is also a good resource:
https://cran.r-project.org/web/packages/colorspace/vignettes/hcl-colors.pdf

These are good resources for people interested in mathematical or
statistical graphics.


Abs

	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Tue Apr  2 23:42:47 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abs Spurdle)
Date: Wed, 3 Apr 2019 10:42:47 +1300
Subject: [Rd] New grDevices::hcl.colors()
In-Reply-To: <CAB8pepzTDHE-QktJRkpGSzssKS_0-2BX6zANg_cb+=DeuiZO6A@mail.gmail.com>
References: <CAB8pepzTDHE-QktJRkpGSzssKS_0-2BX6zANg_cb+=DeuiZO6A@mail.gmail.com>
Message-ID: <CAB8pepy0pbXq-zYc9i8JQOsPwtG8LrNDE2j=-fFEN=HeMOPQBw@mail.gmail.com>

Oops.
I didn't notice that you have references on your blog.
The more references the better, I guess.

	[[alternative HTML version deleted]]


From Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t  Wed Apr  3 00:27:47 2019
From: Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t (Achim Zeileis)
Date: Wed, 3 Apr 2019 00:27:47 +0200 (CEST)
Subject: [Rd] New grDevices::hcl.colors()
In-Reply-To: <CAB8pepzTDHE-QktJRkpGSzssKS_0-2BX6zANg_cb+=DeuiZO6A@mail.gmail.com>
References: <CAB8pepzTDHE-QktJRkpGSzssKS_0-2BX6zANg_cb+=DeuiZO6A@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1904030013190.4002@paninaro>

Abs,

thanks for the feedback. As you noticed meanwhile we had linked Ross's 
2003 paper as well as a few other references. The slides from Ross are a 
useful addition, I didn't know these (only parts of them).

Also we didn't want to list all of the references in the blog post but 
linked to the colorspace web page and manuscript - both of which have much 
more references.

Best,
Z


On Tue, 2 Apr 2019, Abs Spurdle wrote:

> Hi Z
> I think supporting HCL color spaces more, is a *very* good idea.
> However, I doubt many R users, understand the motivation for HCL color
> spaces.
> 
> I've reproduced Ross Ihaka's notes on color, on my personal website:
> https://sites.google.com/site/spurdlea/exts/ihaka_r_stats_787_10_color.pdf
> 
> (This has been reproduced with permission).
> 
> Another good article is:
> https://www.r-project.org/conferences/DSC-2003/Proceedings/Ihaka.pdf
> 
> And the colorspace package vignette is also a good resource:
> https://cran.r-project.org/web/packages/colorspace/vignettes/hcl-colors.pdf
> 
> 
> These are good resources for people interested in mathematical or
> statistical graphics.
> 
> 
> Abs
> 
> 
> 
>


From @uh@rto_@nggono @end|ng |rom y@hoo@com  Wed Apr  3 04:40:24 2019
From: @uh@rto_@nggono @end|ng |rom y@hoo@com (Suharto Anggono Suharto Anggono)
Date: Wed, 3 Apr 2019 02:40:24 +0000 (UTC)
Subject: [Rd] stopifnot -- eval(*) inside for()
References: <506420295.15610421.1554259224113.ref@mail.yahoo.com>
Message-ID: <506420295.15610421.1554259224113@mail.yahoo.com>

With
f <- function(x) for (i in 1) x
fc <- cmpfun(f)
(my previous example), error message of
fc(is.numeric(y))
shows the originating call as well, while error message of
f(is.numeric(y))
doesn't. Compiled version behaves differently.

Even with
f <- function(x) for (i in 1) {x; eval(expression(i))}
fc <- cmpfun(f)
, error message of
fc(is.numeric(y))
shows the originating call in R 3.3.1.


As I see, error message only has one line of call. If the deparsed call spans more than one line, the rest is not shown.


In 'stopifnot' in R 3.5.x, each is wrapped in 'tryCatch' which is wrapped again in 'withCallingHandlers'. Just one wrapping may be enough. The 'withCallingHandlers' construct in 'stopifnot' in R 3.5.x has no effect anyway, as I said before (https://stat.ethz.ch/pipermail/r-devel/2019-February/077386.html). Also, 'tryCatch' (or 'withCallingHandlers' ...) can wrap the entire 'for' loop. The slowdown can be less than in R 3.5.x.

--------------------------------------------
On Mon, 1/4/19, Martin Maechler <maechler at stat.math.ethz.ch> wrote:

 Subject: Re: [Rd] stopifnot -- eval(*) inside for()

 Cc: r-devel at r-project.org
 Date: Monday, 1 April, 2019, 5:00 PM
 
>>>>> Suharto Anggono Suharto Anggono via R-devel 
>>>>>    on Sun, 31 Mar 2019 15:26:13 +0000 writes:

    > Ah, with R 3.5.0 or R 3.4.2, but not with R 3.3.1, 'eval'
    > inside 'for' makes compiled version behave like
    > non-compiled version. 

Ah.. ... thank you for detecting that  " eval() inside for()" behaves
specially  in how error message get a call or not.
Let's focus only on this issue here.

I'm adding a 0-th case to make even clearer what you are saying:

  >  options(error = expression(NULL))
  >  library(compiler)
  >  enableJIT(0)

  > f0 <- function(x) { x ; x^2 } ; f0(is.numeric(y))
  Error in f0(is.numeric(y)) (from #1) : object 'y' not found
  > (function(x) { x ; x^2 })(is.numeric(y))
  Error in (function(x) { (from #1) : object 'y' not found
  > f0c <- cmpfun(f0) ; f0c(is.numeric(y))

so by default, not only the error message but the originating
call is shown as well.

However, here's your revealing examples:

  > f <- function(x) for (i in 1) {x; eval(expression(i))}
  > f(is.numeric(y))
  > # Error: object 'y' not found
  > fc <- cmpfun(f)
  > fc(is.numeric(y))
  > # Error: object 'y' not found

I've tried more examples and did not find any difference
between simple interpreted and bytecompiled code {apart
from "keep.source=TRUE" keeping source, sometimes visible}.
So I don't understand yet why you think the byte compiler plays
a role.

Rather the crucial difference seems  the error happens inside a
loop which contains an explicit eval(.), and that eval() may
even be entirely unrelated to the statement in which the error
happens [above: The error happens when the promise 'x' is
evaluated, *before* eval() is called at all].


    > Is this accidental feature going to be relied upon?

    [i.e.  *in  stopifnot() R code (which in R-devel and R 3.5.x has
            had an eval() inside the for()-loop)]

That is a good question.
What I really like about the R-devel case:  We do get errors
signalled that do *not* contain the full stopifnot() call.

With the newish introduction of the `exprs = { ... ... }` variant,
it is even more natural to have large `exprs` in a stopifnot() call,
and when there's one accidental error in there, it's quite
unhelpful to see the full stopifnot(..........) call {many lines
of R code} obfuscating the one statement which produced the
error.

So it seems I am asking for a new feature in R, 
namely to temporarily say: Set the call to errors to NULL "in

the following".

In R 3.5.x, I had used withCallingHandlers(...) to achieve that
and do even similar for warnings... but needed to that for every
expression and hence inside the for loop  and the consequence
was a relatively large slowdown of stopifnot()..  which
triggered all the changes since.

Whereas what we see here ["eval() inside for()"] is a cheap
automatic suppression of 'call' for the "internal errors", i.e.,
those we don't trigger ourselves via stop(simplError(...)).


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Apr  4 08:21:48 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 4 Apr 2019 08:21:48 +0200
Subject: [Rd] Bug in the "reformulate" function in stats package
In-Reply-To: <0c567c84-5c27-128c-584c-022d8d1f6892@gmail.com>
References: <ac491662-1aad-3775-1936-9e2694da50e6@ist.ac.at>
 <9409b485-7a3b-0f2c-201e-7ef2bde1de86@ist.ac.at>
 <23709.55119.213555.244342@stat.math.ethz.ch>
 <765cd87b-98d6-b23f-9a58-ad817fa5c6e5@ist.ac.at>
 <bad24743-b6e1-f4cd-97a5-8047c27c6707@gmail.com>
 <0c567c84-5c27-128c-584c-022d8d1f6892@gmail.com>
Message-ID: <23717.41596.382159.209811@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Fri, 29 Mar 2019 12:34:50 -0400 writes:

    > I suspect that the issue is addressed (obliquely) in the examples,
    > which shows that variables with spaces in them (or otherwise
    > 'non-syntactic', i.e. not satisfying the constraints of legal R symbols)
    > can be handled by protecting them with backticks  (``)

    > ## using non-syntactic names:
    > reformulate(c("`P/E`", "`% Growth`"), response = as.name("+-"))

    > It seems to me there could be room for a *documentation* patch (stating
    > explicitly that if termlabels has length > 1 its elements are
    > concatenated with "+", and explicitly stating that non-syntactic names
    > must be protected with back-ticks).  (There is a little bit of obscurity
    > in the fact that the elements of termlabels don't have to be
    > syntactically valid names: many will be included in formulas if they can
    > be interpreted as *parseable* expressions, e.g. reformulate("x<2"))

    > I would be happy to give it a shot if the consensus is that it would
    > be worthwhile.

I think it would be worthwhile to add to the docs a bit.

[With currently just your and my vote, we have a 100% consensus
;-)]

Martin

    > One workaround to the OP's problem is below (may be worth including
    > as an example in docs)

    >> z <- c("a variable","another variable")
    >> reformulate(z)
    > Error in parse(text = termtext, keep.source = FALSE) :
    > <text>:1:6: unexpected symbol
    > 1:  ~ a variable
    > ^
    >> reformulate(sprintf("`%s`",z))
    > ~`a variable` + `another variable`




    > On 2019-03-29 11:54 a.m., J C Nash wrote:
    >> The main thing is to post the "small reproducible example".
    >> 
    >> My (rather long term experience) can be written
    >> 
    >> if (exists("reproducible example") ) {
    >> DeveloperFixHappens()
    >> } else {
    >> NULL
    >> }
    >> 
    >> JN
    >> 
    >> On 2019-03-29 11:38 a.m., Saren Tasciyan wrote:
    >>> Well, first I can't sign in bugzilla myself, that is why I wrote here first. Also, I don't know if I have the time at
    >>> the moment to provide tests, multiple examples or more. If that is not ok or welcomed, that is fine, I can come back,
    >>> whenever I have more time to properly report the bug.
    >>> 
    >>> I didn't find the existing bug report, sorry for that.
    >>> 
    >>> Yes, it is related. My problem was that I have column names with spaces and current solution doesn't solve it. I have a
    >>> solution, which works for me and maybe also for others.
    >>> 
    >>> Either, someone can register me to bugzilla or I can post it here, which could give some direction to developers. I
    >>> don't mind whichever is preferred here.
    >>> 
    >>> Best,
    >>> 
    >>> Saren
    >>> 
    >>> 
    >>> On 29.03.19 09:29, Martin Maechler wrote:
    >>>>>>>>> Saren Tasciyan
    >>>>>>>>> ???? on Thu, 28 Mar 2019 17:02:10 +0100 writes:
    >>>> ???? > Hi,
    >>>> ???? > I have found a bug in reformulate function and have a solution for it. I
    >>>> ???? > was wondering, where I can submit it?
    >>>> 
    >>>> ???? > Best,
    >>>> ???? > Saren
    >>>> 
    >>>> 
    >>>> Well, you could have given a small reproducible example
    >>>> depicting the bug, notably when posting here:
    >>>> Just a prose text with no R code or other technical content is
    >>>> almost always not really appropriate fo the R-devel mailing list.
    >>>> 
    >>>> Further, in such a case you should google a bit and hopefully
    >>>> have found
    >>>> ??????? https://www.r-project.org/bugs.html
    >>>> 
    >>>> which also mention reproducibility (and many more useful things).
    >>>> 
    >>>> Then it also tells you about R's bug repository, also called
    >>>> "R's bugzilla" at https://bugs.r-project.org/
    >>>> 
    >>>> and if you are diligent (but here, I'd say bugzilla is
    >>>> (configured?) far from ideal), you'd also find bug PR#17359
    >>>> 
    >>>> ??? https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17359
    >>>> 
    >>>> which was reported already on Nov 2017 .. and only fixed
    >>>> yesterday (in the "cleanup old bugs" process that happens
    >>>> often before the big new spring release of R).
    >>>> 
    >>>> So is your bug the same as that one?
    >>>> 
    >>>> Martin
    >>>> 
    >>>> ???? > --
    >>>> ???? > Saren Tasciyan
    >>>> ???? > /PhD Student / Sixt Group/
    >>>> ???? > Institute of Science and Technology Austria
    >>>> ???? > Am Campus 1
    >>>> ???? > 3400 Klosterneuburg, Austria
    >>>> 
    >>>> ???? > ______________________________________________
    >>>> ???? > R-devel at r-project.org mailing list
    >>>> ???? > https://stat.ethz.ch/mailman/listinfo/r-devel
    >>>> 
    >>>> ______________________________________________
    >>>> R-devel at r-project.org mailing list
    >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From |@g|ne @end|ng |rom p@@jd@org  Wed Apr  3 17:10:05 2019
From: |@g|ne @end|ng |rom p@@jd@org (=?iso-8859-1?Q?IAGO_GIN=C9_V=C1ZQUEZ?=)
Date: Wed, 3 Apr 2019 15:10:05 +0000
Subject: [Rd] Proposal for a new feauture on summary applied to numeric class
Message-ID: <AM6PR02MB519055B43579CAA97781D96292570@AM6PR02MB5190.eurprd02.prod.outlook.com>

Dear all,


Following the indications given in https://www.r-project.org/bugs.html, and as I wish to submit a feature request, I ask about it first on here.


The function 'summary' from the package 'base', when applied to numeric vectors returns the quantiles together with the mean of the vector, besides the cardinal of NA's. I think it would be suitable to return also the standard deviation and/or the variance.


What do you think?


Thanks!

Iago

	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Thu Apr  4 18:46:37 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 4 Apr 2019 12:46:37 -0400
Subject: [Rd] Bug in the "reformulate" function in stats package
In-Reply-To: <23717.41596.382159.209811@stat.math.ethz.ch>
References: <ac491662-1aad-3775-1936-9e2694da50e6@ist.ac.at>
 <9409b485-7a3b-0f2c-201e-7ef2bde1de86@ist.ac.at>
 <23709.55119.213555.244342@stat.math.ethz.ch>
 <765cd87b-98d6-b23f-9a58-ad817fa5c6e5@ist.ac.at>
 <bad24743-b6e1-f4cd-97a5-8047c27c6707@gmail.com>
 <0c567c84-5c27-128c-584c-022d8d1f6892@gmail.com>
 <23717.41596.382159.209811@stat.math.ethz.ch>
Message-ID: <ebdebd3e-a522-6fba-4f10-3fea3ea38aae@gmail.com>


  Proposed patch (I think .txt files work OK as attachments to the list?)

On 2019-04-04 2:21 a.m., Martin Maechler wrote:
>>>>>> Ben Bolker 
>>>>>>     on Fri, 29 Mar 2019 12:34:50 -0400 writes:
> 
>     > I suspect that the issue is addressed (obliquely) in the examples,
>     > which shows that variables with spaces in them (or otherwise
>     > 'non-syntactic', i.e. not satisfying the constraints of legal R symbols)
>     > can be handled by protecting them with backticks  (``)
> 
>     > ## using non-syntactic names:
>     > reformulate(c("`P/E`", "`% Growth`"), response = as.name("+-"))
> 
>     > It seems to me there could be room for a *documentation* patch (stating
>     > explicitly that if termlabels has length > 1 its elements are
>     > concatenated with "+", and explicitly stating that non-syntactic names
>     > must be protected with back-ticks).  (There is a little bit of obscurity
>     > in the fact that the elements of termlabels don't have to be
>     > syntactically valid names: many will be included in formulas if they can
>     > be interpreted as *parseable* expressions, e.g. reformulate("x<2"))
> 
>     > I would be happy to give it a shot if the consensus is that it would
>     > be worthwhile.
> 
> I think it would be worthwhile to add to the docs a bit.
> 
> [With currently just your and my vote, we have a 100% consensus
> ;-)]
> 
> Martin
> 
>     > One workaround to the OP's problem is below (may be worth including
>     > as an example in docs)
> 
>     >> z <- c("a variable","another variable")
>     >> reformulate(z)
>     > Error in parse(text = termtext, keep.source = FALSE) :
>     > <text>:1:6: unexpected symbol
>     > 1:  ~ a variable
>     > ^
>     >> reformulate(sprintf("`%s`",z))
>     > ~`a variable` + `another variable`
> 
> 
> 
> 
>     > On 2019-03-29 11:54 a.m., J C Nash wrote:
>     >> The main thing is to post the "small reproducible example".
>     >> 
>     >> My (rather long term experience) can be written
>     >> 
>     >> if (exists("reproducible example") ) {
>     >> DeveloperFixHappens()
>     >> } else {
>     >> NULL
>     >> }
>     >> 
>     >> JN
>     >> 
>     >> On 2019-03-29 11:38 a.m., Saren Tasciyan wrote:
>     >>> Well, first I can't sign in bugzilla myself, that is why I wrote here first. Also, I don't know if I have the time at
>     >>> the moment to provide tests, multiple examples or more. If that is not ok or welcomed, that is fine, I can come back,
>     >>> whenever I have more time to properly report the bug.
>     >>> 
>     >>> I didn't find the existing bug report, sorry for that.
>     >>> 
>     >>> Yes, it is related. My problem was that I have column names with spaces and current solution doesn't solve it. I have a
>     >>> solution, which works for me and maybe also for others.
>     >>> 
>     >>> Either, someone can register me to bugzilla or I can post it here, which could give some direction to developers. I
>     >>> don't mind whichever is preferred here.
>     >>> 
>     >>> Best,
>     >>> 
>     >>> Saren
>     >>> 
>     >>> 
>     >>> On 29.03.19 09:29, Martin Maechler wrote:
>     >>>>>>>>> Saren Tasciyan
>     >>>>>>>>> ???? on Thu, 28 Mar 2019 17:02:10 +0100 writes:
>     >>>> ???? > Hi,
>     >>>> ???? > I have found a bug in reformulate function and have a solution for it. I
>     >>>> ???? > was wondering, where I can submit it?
>     >>>> 
>     >>>> ???? > Best,
>     >>>> ???? > Saren
>     >>>> 
>     >>>> 
>     >>>> Well, you could have given a small reproducible example
>     >>>> depicting the bug, notably when posting here:
>     >>>> Just a prose text with no R code or other technical content is
>     >>>> almost always not really appropriate fo the R-devel mailing list.
>     >>>> 
>     >>>> Further, in such a case you should google a bit and hopefully
>     >>>> have found
>     >>>> ??????? https://www.r-project.org/bugs.html
>     >>>> 
>     >>>> which also mention reproducibility (and many more useful things).
>     >>>> 
>     >>>> Then it also tells you about R's bug repository, also called
>     >>>> "R's bugzilla" at https://bugs.r-project.org/
>     >>>> 
>     >>>> and if you are diligent (but here, I'd say bugzilla is
>     >>>> (configured?) far from ideal), you'd also find bug PR#17359
>     >>>> 
>     >>>> ??? https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17359
>     >>>> 
>     >>>> which was reported already on Nov 2017 .. and only fixed
>     >>>> yesterday (in the "cleanup old bugs" process that happens
>     >>>> often before the big new spring release of R).
>     >>>> 
>     >>>> So is your bug the same as that one?
>     >>>> 
>     >>>> Martin
>     >>>> 
>     >>>> ???? > --
>     >>>> ???? > Saren Tasciyan
>     >>>> ???? > /PhD Student / Sixt Group/
>     >>>> ???? > Institute of Science and Technology Austria
>     >>>> ???? > Am Campus 1
>     >>>> ???? > 3400 Klosterneuburg, Austria
>     >>>> 
>     >>>> ???? > ______________________________________________
>     >>>> ???? > R-devel at r-project.org mailing list
>     >>>> ???? > https://stat.ethz.ch/mailman/listinfo/r-devel
>     >>>> 
>     >>>> ______________________________________________
>     >>>> R-devel at r-project.org mailing list
>     >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >> 
>     >> ______________________________________________
>     >> R-devel at r-project.org mailing list
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >> 
> 
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: reformulate_diff.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190404/34393c52/attachment.txt>

From |uke-t|erney @end|ng |rom u|ow@@edu  Thu Apr  4 21:54:05 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Thu, 4 Apr 2019 19:54:05 +0000
Subject: [Rd] [External]  Status of R_unif_index
In-Reply-To: <fd9b4542-ac8d-5ef7-5338-f767703524b5@daqana.com>
References: <fd9b4542-ac8d-5ef7-5338-f767703524b5@daqana.com>
Message-ID: <alpine.DEB.2.21.1904041453390.18657@luke-Latitude-7480>

Seems reasonable, done now.

Best,

luke

On Fri, 22 Mar 2019, Ralf Stubner wrote:

> Dear List,
>
> section "6.3 Random number generation" of WRE [1] lists unif_rand(),
> norm_rand() and exp_rand() as the interface to R's RNG. Now
> R_ext/Random.h also has
>
>    double R_unif_index(double);
>
> Can this be also treated as an official API function that may be called
> from a package?
>
> Thanks
> Ralf
>
> [1]
> https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Random-numbers
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From therne@u @end|ng |rom m@yo@edu  Fri Apr  5 04:48:49 2019
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Thu, 04 Apr 2019 22:48:49 -0400
Subject: [Rd] subscripting a terms object
Message-ID: <b23057$bek7ei@ironport10.mayo.edu>

Someone sent me a bug report for survival2.44.1-1 that involves a model with both cluster 
and offset.? It turns out to be a 3 part issue with [.terms and my own untangle.specials 
routine.?? I've spent an evening sorting out the details.


 ? 1. The delete.response() function doesn't remove the response from the dataClasses 
attribute, which leads to a later failure in [.terms for no-response models.? Is there a 
reason for this, or can I make my patch include this oversight as well?

 ?2. [.terms messes up predvars and dataClasses if the model has an offset term in it.? 
(In select cases 1 and 2 can cancel out and give the correct dataClasses attribute.)

 ?3. The survival::untangle.specials routine assumed that you can use the same 
subscripting for the terms of a model and the term() object itself, which turns out to be 
almost always true, but only almost.

 ? The failure turns out to have probably been there since the Splus days, which tells one 
just how often such a model is used. (One of two edge case bugs sent to me in the first 
days after I pushed it to CRAN: a new release seems to attact them.)?? I'm willing to put 
together a patch, but given the rarity of these would folks prefer to wait until after the 
April release??? I'm fine with that.? I need the answer to 1 though.

Terry T.


	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Apr  5 09:38:06 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 5 Apr 2019 09:38:06 +0200
Subject: [Rd] Bug in the "reformulate" function in stats package
In-Reply-To: <ebdebd3e-a522-6fba-4f10-3fea3ea38aae@gmail.com>
References: <ac491662-1aad-3775-1936-9e2694da50e6@ist.ac.at>
 <9409b485-7a3b-0f2c-201e-7ef2bde1de86@ist.ac.at>
 <23709.55119.213555.244342@stat.math.ethz.ch>
 <765cd87b-98d6-b23f-9a58-ad817fa5c6e5@ist.ac.at>
 <bad24743-b6e1-f4cd-97a5-8047c27c6707@gmail.com>
 <0c567c84-5c27-128c-584c-022d8d1f6892@gmail.com>
 <23717.41596.382159.209811@stat.math.ethz.ch>
 <ebdebd3e-a522-6fba-4f10-3fea3ea38aae@gmail.com>
Message-ID: <23719.1502.248949.496054@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Thu, 4 Apr 2019 12:46:37 -0400 writes:

  > Proposed patch 

Thank you Ben!


[the rest is technical nit-picking .. but hopefully interesting
 to the smart R-devel reader base:]

There was a very subtle thinko in your patch which is not easily
diagnosed from R's parse_Rd():

Error in parse_Rd("/u/maechler/R/D/r-devel/R/src/library/stats/man/delete.response.Rd",  : 
  Unexpected end of input (in " quoted string opened at delete.response.Rd:78:63)
In addition: Warning message:
In parse_Rd("/u/maechler/R/D/r-devel/R/src/library/stats/man/delete.response.Rd",  :
  newline within quoted string at delete.response.Rd:74

and even I needed more than a minute to find out that the
culprit was that

  reformulate(sprintf("`%s`", x))

is not ok in *.Rd  and must be

  reformulate(sprintf("`\%s`", x))

---------

  > (I think .txt files work OK as attachments to the list?)   

yes, typically -- what really counts is if your e-mail program
marks them with MIME-type 'text/plain'
and most E-mail programs are very "silly" / "safe" nowadays and
don't expect to have smart users  and hence mark (and sometimes
encode) everything unknown as non-text. 

Using very old flexible e-mail interfaces such as Emacs VM allow
you to specify the MIME-type in addition to the file *and* it
also proposes smart defaults, I think by using something like
unix 'file' to determine that your 'foo.diff' file is plain text.
{{ .. and we all know that Windows is sillily using file extensions
   to determine file type and only knows  Windows-extensions plus
   those added explicitly by software installed; so nowadays *.rda
   is marked as an Rstudio file ... [argh].
}}

Martin

    > On 2019-04-04 2:21 a.m., Martin Maechler wrote:
    >>>>>>> Ben Bolker 
    >>>>>>> on Fri, 29 Mar 2019 12:34:50 -0400 writes:
    >> 
    >> > I suspect that the issue is addressed (obliquely) in the examples,
    >> > which shows that variables with spaces in them (or otherwise
    >> > 'non-syntactic', i.e. not satisfying the constraints of legal R symbols)
    >> > can be handled by protecting them with backticks  (``)
    >> 
    >> > ## using non-syntactic names:
    >> > reformulate(c("`P/E`", "`% Growth`"), response = as.name("+-"))
    >> 
    >> > It seems to me there could be room for a *documentation* patch (stating
    >> > explicitly that if termlabels has length > 1 its elements are
    >> > concatenated with "+", and explicitly stating that non-syntactic names
    >> > must be protected with back-ticks).  (There is a little bit of obscurity
    >> > in the fact that the elements of termlabels don't have to be
    >> > syntactically valid names: many will be included in formulas if they can
    >> > be interpreted as *parseable* expressions, e.g. reformulate("x<2"))
    >> 
    >> > I would be happy to give it a shot if the consensus is that it would
    >> > be worthwhile.
    >> 
    >> I think it would be worthwhile to add to the docs a bit.
    >> 
    >> [With currently just your and my vote, we have a 100% consensus
    >> ;-)]
    >> 
    >> Martin
    >> 
    >> > One workaround to the OP's problem is below (may be worth including
    >> > as an example in docs)
    >> 
    >> >> z <- c("a variable","another variable")
    >> >> reformulate(z)
    >> > Error in parse(text = termtext, keep.source = FALSE) :
    >> > <text>:1:6: unexpected symbol
    >> > 1:  ~ a variable
    >> > ^
    >> >> reformulate(sprintf("`%s`",z))
    >> > ~`a variable` + `another variable`
    >> 
    >> 
    >> 
    >> 
    >> > On 2019-03-29 11:54 a.m., J C Nash wrote:
    >> >> The main thing is to post the "small reproducible example".
    >> >> 
    >> >> My (rather long term experience) can be written
    >> >> 
    >> >> if (exists("reproducible example") ) {
    >> >> DeveloperFixHappens()
    >> >> } else {
    >> >> NULL
    >> >> }
    >> >> 
    >> >> JN
    >> >> 
    >> >> On 2019-03-29 11:38 a.m., Saren Tasciyan wrote:
    >> >>> Well, first I can't sign in bugzilla myself, that is why I wrote here first. Also, I don't know if I have the time at
    >> >>> the moment to provide tests, multiple examples or more. If that is not ok or welcomed, that is fine, I can come back,
    >> >>> whenever I have more time to properly report the bug.
    >> >>> 
    >> >>> I didn't find the existing bug report, sorry for that.
    >> >>> 
    >> >>> Yes, it is related. My problem was that I have column names with spaces and current solution doesn't solve it. I have a
    >> >>> solution, which works for me and maybe also for others.
    >> >>> 
    >> >>> Either, someone can register me to bugzilla or I can post it here, which could give some direction to developers. I
    >> >>> don't mind whichever is preferred here.
    >> >>> 
    >> >>> Best,
    >> >>> 
    >> >>> Saren
    >> >>> 
    >> >>> 
    >> >>> On 29.03.19 09:29, Martin Maechler wrote:
    >> >>>>>>>>> Saren Tasciyan
    >> >>>>>>>>> ???? on Thu, 28 Mar 2019 17:02:10 +0100 writes:
    >> >>>> ???? > Hi,
    >> >>>> ???? > I have found a bug in reformulate function and have a solution for it. I
    >> >>>> ???? > was wondering, where I can submit it?
    >> >>>> 
    >> >>>> ???? > Best,
    >> >>>> ???? > Saren
    >> >>>> 
    >> >>>> 
    >> >>>> Well, you could have given a small reproducible example
    >> >>>> depicting the bug, notably when posting here:
    >> >>>> Just a prose text with no R code or other technical content is
    >> >>>> almost always not really appropriate fo the R-devel mailing list.
    >> >>>> 
    >> >>>> Further, in such a case you should google a bit and hopefully
    >> >>>> have found
    >> >>>> ??????? https://www.r-project.org/bugs.html
    >> >>>> 
    >> >>>> which also mention reproducibility (and many more useful things).
    >> >>>> 
    >> >>>> Then it also tells you about R's bug repository, also called
    >> >>>> "R's bugzilla" at https://bugs.r-project.org/
    >> >>>> 
    >> >>>> and if you are diligent (but here, I'd say bugzilla is
    >> >>>> (configured?) far from ideal), you'd also find bug PR#17359
    >> >>>> 
    >> >>>> ??? https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17359
    >> >>>> 
    >> >>>> which was reported already on Nov 2017 .. and only fixed
    >> >>>> yesterday (in the "cleanup old bugs" process that happens
    >> >>>> often before the big new spring release of R).
    >> >>>> 
    >> >>>> So is your bug the same as that one?
    >> >>>> 
    >> >>>> Martin
    >> >>>> 
    >> >>>> ???? > --
    >> >>>> ???? > Saren Tasciyan
    >> >>>> ???? > /PhD Student / Sixt Group/
    >> >>>> ???? > Institute of Science and Technology Austria
    >> >>>> ???? > Am Campus 1
    >> >>>> ???? > 3400 Klosterneuburg, Austria
    >> >>>> 
    >> >>>> ???? > ______________________________________________
    >> >>>> ???? > R-devel at r-project.org mailing list
    >> >>>> ???? > https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >>>> 
    >> >>>> ______________________________________________
    >> >>>> R-devel at r-project.org mailing list
    >> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >> 
    >> >> ______________________________________________
    >> >> R-devel at r-project.org mailing list
    >> >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >> 
    >> 
    >> > ______________________________________________
    >> > R-devel at r-project.org mailing list
    >> > https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    > x[DELETED ATTACHMENT external: reformulate.diff, plain text]
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Apr  5 09:46:27 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 5 Apr 2019 09:46:27 +0200
Subject: [Rd] subscripting a terms object
In-Reply-To: <b23057$bek7ei@ironport10.mayo.edu>
References: <b23057$bek7ei@ironport10.mayo.edu>
Message-ID: <23719.2003.222510.619662@stat.math.ethz.ch>

Dear Terry,

>>>>> Therneau, Terry M , Ph D via R-devel 
>>>>>     on Thu, 4 Apr 2019 22:48:49 -0400 writes:

    > Someone sent me a bug report for survival2.44.1-1 that involves a model with both cluster 
    > and offset.? It turns out to be a 3 part issue with [.terms and my own untangle.specials 
    > routine.?? I've spent an evening sorting out the details.



    > ? 1. The delete.response() function doesn't remove the response from the dataClasses 
    > attribute, which leads to a later failure in [.terms for no-response models.? Is there a 
    > reason for this, or can I make my patch include this oversight as well?

    > ?2. [.terms messes up predvars and dataClasses if the model has an offset term in it.? 
    > (In select cases 1 and 2 can cancel out and give the correct dataClasses attribute.)

The above two seem interesting and relevant to R itself.
As we've recently just fixed a buglet in  reformulate() --
probably unrelated to your problem --  I'd really be interested to see a
repr.ex. (reproducible example) for the above two statements.

... and if you want also a proposal on how to address the
problem in  delete.response()  and/or  `[.terms`()

Martin

    > ?3. The survival::untangle.specials routine assumed that you can use the same 
    > subscripting for the terms of a model and the term() object itself, which turns out to be 
    > almost always true, but only almost.

    > ? The failure turns out to have probably been there since the Splus days, which tells one 
    > just how often such a model is used. (One of two edge case bugs sent to me in the first 
    > days after I pushed it to CRAN: a new release seems to attact them.)?? I'm willing to put 
    > together a patch, but given the rarity of these would folks prefer to wait until after the 
    > April release??? I'm fine with that.? I need the answer to 1 though.

    > Terry T.


From m|t @end|ng |rom gmx@u@  Fri Apr  5 08:14:40 2019
From: m|t @end|ng |rom gmx@u@ (Mikhail Titov)
Date: Fri, 05 Apr 2019 01:14:40 -0500
Subject: [Rd] Parsing code with newlines
In-Reply-To: <alpine.LFD.1.10.0808041402500.17316@gannet.stats.ox.ac.uk>
 (Brian Ripley's message of "Mon, 4 Aug 2008 14:18:52 +0100 (BST)")
References: <a564fafa0808040550j13fd5097q804fc9549cd4ad55@mail.gmail.com>
 <alpine.LFD.1.10.0808041402500.17316@gannet.stats.ox.ac.uk>
Message-ID: <9q0r2ahx9kf.fsf@gmx.us>

Hello!

This is my first post here. I came across the very same problem.
It can be reproduced within modified tests/Embedding/RParseEval.c

Actually this example has another issue, namely it doesn't wrap
everything in R_ToplevelExec . This is a major show stopper for
newcomers as that function is barely mentioned anywhere and longjmp into
terminated setuploop function followed by R_suicide look like a mystery.

Error: bad value
Fatal error: unable to initialize the JIT


That aside, here is the code with newlines that fails to parse. I hope
it will paste alright here.


#include "embeddedRCall.h"
#include <R_ext/Parse.h>

int
main(int argc, char *argv[])
{
    SEXP e, tmp;
    int hadError;
    ParseStatus status;

    init_R(argc, argv);

    PROTECT(tmp = mkString("\n\r ls()"));
    PROTECT(e = R_ParseVector(tmp, 1, &status, R_NilValue));
    if (status != PARSE_OK)
    {
        printf("boo boo\n");
    }
    else
    {
        PrintValue(e);
        R_tryEval(VECTOR_ELT(e,0), R_GlobalEnv, &hadError);
    }
    UNPROTECT(2);

    end_R();
    return(0);
}


--
Mikhail


From |vo@we|ch @end|ng |rom @nder@on@uc|@@edu  Fri Apr  5 02:28:54 2019
From: |vo@we|ch @end|ng |rom @nder@on@uc|@@edu (ivo welch)
Date: Thu, 4 Apr 2019 17:28:54 -0700
Subject: [Rd] Deep Replicable Bug With AMD Threadripper MultiCore
Message-ID: <CAPr7RtX2fu7fG=JCUh3Ytg5Q7D8Aw7WtQen_WM03ysdShzR+SA@mail.gmail.com>

The following program is whittled down from a much larger program that
always works on Intel, and always works on AMD's threadripper with
lapply but not mclappy.  With mclapply on AMD, all processes go into
"suspend" mode and the program then hangs.  This bug is replicable on an
AMD Ryzen Threadripper 2950X 16-Core Processor (128GB RAM), running
latest ubuntu 18.04.  The R version 3.5.3 (2019-03-11) -- "Great Truth" ,
invoked with --vanilla.  I hope this helps...it took quite a while to get
it to this stage.  I sure hope that I am not reporting an old bug...

options("mc.cores"=4)
library(data.table)
library(parallel)

if (!file.exists("bugsample.csv")) {
    NR <- 64833330
    notused <- data.frame(v1=1:NR, v2=1:NR, v3=1:NR, x1=log(1:NR),
x2=log(1:NR))
    fwrite(notused, file="bugsample.csv")
    stop("you can quit now and restart the program")
}

if (!exists("notused")) notused <- fread("bugsample.csv", nrows= Inf)  ##
needed!  Inf cannot be replaced by actual NR


sample <- data.frame( groupidentifier=c( rep(11111,2000), rep(22222, 4500 )
) )
sample$yvar <- sin(1:nrow(sample))
sample$xvar <- 1:nrow(sample)


testfun <- function(dl) {
    with(dl, message("Working: ", first(groupidentifier), " with ",
nrow(dl)))

    lapply( 1:nrow(dl), FUN=function(onedayindex) {
        if ((onedayindex %% 500) != 0) return(NULL)
        with(dl[1:onedayindex,],
             c( tryCatch( coef(lm( yvar ~ xvar, data=dl[1:onedayindex,]
))[2], error = function(e) NA ) ) )
    })
}


message("starting --- replicable hang with mclapply, but not lapply")

o <- mclapply(split( 1:nrow(sample), sample$groupidentifier ),
              FUN=function(.index) testfun( sample[.index, , drop=FALSE] ))

message("never gets here with mclapply")

print( do.call("c", o[[1]]) )
print( do.call("c", o[[2]]) )



--
Ivo Welch (ivo.welch at ucla.edu)

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Fri Apr  5 13:28:51 2019
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 5 Apr 2019 06:28:51 -0500
Subject: [Rd] Deep Replicable Bug With AMD Threadripper MultiCore
In-Reply-To: <CAPr7RtX2fu7fG=JCUh3Ytg5Q7D8Aw7WtQen_WM03ysdShzR+SA@mail.gmail.com>
References: <CAPr7RtX2fu7fG=JCUh3Ytg5Q7D8Aw7WtQen_WM03ysdShzR+SA@mail.gmail.com>
Message-ID: <23719.15347.660112.232888@rob.eddelbuettel.com>


On 4 April 2019 at 17:28, ivo welch wrote:
| The following program is whittled down from a much larger program that
| always works on Intel, and always works on AMD's threadripper with
| lapply but not mclappy.  With mclapply on AMD, all processes go into
| "suspend" mode and the program then hangs.  This bug is replicable on an
| AMD Ryzen Threadripper 2950X 16-Core Processor (128GB RAM), running
| latest ubuntu 18.04.  The R version 3.5.3 (2019-03-11) -- "Great Truth" ,
| invoked with --vanilla.  I hope this helps...it took quite a while to get
| it to this stage.  I sure hope that I am not reporting an old bug...
| 
| options("mc.cores"=4)
| library(data.table)
| library(parallel)

Just how you set mc.cores to 4 for parallel::mclapply I would try throttling
data.table which in its current version goes for all cores. So do, say,

  setDTthreads(4)

and see if that helps. Try lower and lower values to see if you get by.
While there may well be a different race condition in mclapply, it may help
to not overschedule.

(FWIW, the next version of data.table, in queue at CRAN, is less aggressive
and has additional options for fine tuning.)

Dirk

| if (!file.exists("bugsample.csv")) {
|     NR <- 64833330
|     notused <- data.frame(v1=1:NR, v2=1:NR, v3=1:NR, x1=log(1:NR),
| x2=log(1:NR))
|     fwrite(notused, file="bugsample.csv")
|     stop("you can quit now and restart the program")
| }
| 
| if (!exists("notused")) notused <- fread("bugsample.csv", nrows= Inf)  ##
| needed!  Inf cannot be replaced by actual NR
| 
| 
| sample <- data.frame( groupidentifier=c( rep(11111,2000), rep(22222, 4500 )
| ) )
| sample$yvar <- sin(1:nrow(sample))
| sample$xvar <- 1:nrow(sample)
| 
| 
| testfun <- function(dl) {
|     with(dl, message("Working: ", first(groupidentifier), " with ",
| nrow(dl)))
| 
|     lapply( 1:nrow(dl), FUN=function(onedayindex) {
|         if ((onedayindex %% 500) != 0) return(NULL)
|         with(dl[1:onedayindex,],
|              c( tryCatch( coef(lm( yvar ~ xvar, data=dl[1:onedayindex,]
| ))[2], error = function(e) NA ) ) )
|     })
| }
| 
| 
| message("starting --- replicable hang with mclapply, but not lapply")
| 
| o <- mclapply(split( 1:nrow(sample), sample$groupidentifier ),
|               FUN=function(.index) testfun( sample[.index, , drop=FALSE] ))
| 
| message("never gets here with mclapply")
| 
| print( do.call("c", o[[1]]) )
| print( do.call("c", o[[2]]) )
| 
| 
| 
| --
| Ivo Welch (ivo.welch at ucla.edu)
| 
| 	[[alternative HTML version deleted]]
| 
| ______________________________________________
| R-devel at r-project.org mailing list
| https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Apr  5 14:10:26 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 5 Apr 2019 14:10:26 +0200
Subject: [Rd] Deep Replicable Bug With AMD Threadripper MultiCore
In-Reply-To: <23719.15347.660112.232888@rob.eddelbuettel.com>
References: <CAPr7RtX2fu7fG=JCUh3Ytg5Q7D8Aw7WtQen_WM03ysdShzR+SA@mail.gmail.com>
 <23719.15347.660112.232888@rob.eddelbuettel.com>
Message-ID: <836dfae6-84ba-8dea-9c9f-29bcb14f109c@gmail.com>


In addition you can also try to use a PSOCK cluster (see makeCluster, 
parLapply) to avoid the problem - it should help if the problem is 
somehow related to forking in mclapply().

The problem you are seeing may be in base R, in data.table, or in 
interaction between the two (mclapply() from base R uses forking 
directly, data.table uses OpenMP). If you think the bug is in base R, it 
would be much better if you could find a reproducible example that would 
only use packages shipped directly with R, otherwise it might be best to 
contact the maintainer of data.table.

Please also make sure to use the latest version of R 3.5 (or R-devel). 
The implementation of forking in parallel packages, and hence also in 
mclapply, has been rewritten since R 3.4.

Best
Tomas

On 4/5/19 1:28 PM, Dirk Eddelbuettel wrote:
> On 4 April 2019 at 17:28, ivo welch wrote:
> | The following program is whittled down from a much larger program that
> | always works on Intel, and always works on AMD's threadripper with
> | lapply but not mclappy.  With mclapply on AMD, all processes go into
> | "suspend" mode and the program then hangs.  This bug is replicable on an
> | AMD Ryzen Threadripper 2950X 16-Core Processor (128GB RAM), running
> | latest ubuntu 18.04.  The R version 3.5.3 (2019-03-11) -- "Great Truth" ,
> | invoked with --vanilla.  I hope this helps...it took quite a while to get
> | it to this stage.  I sure hope that I am not reporting an old bug...
> |
> | options("mc.cores"=4)
> | library(data.table)
> | library(parallel)
>
> Just how you set mc.cores to 4 for parallel::mclapply I would try throttling
> data.table which in its current version goes for all cores. So do, say,
>
>    setDTthreads(4)
>
> and see if that helps. Try lower and lower values to see if you get by.
> While there may well be a different race condition in mclapply, it may help
> to not overschedule.
>
> (FWIW, the next version of data.table, in queue at CRAN, is less aggressive
> and has additional options for fine tuning.)
>
> Dirk
>
> | if (!file.exists("bugsample.csv")) {
> |     NR <- 64833330
> |     notused <- data.frame(v1=1:NR, v2=1:NR, v3=1:NR, x1=log(1:NR),
> | x2=log(1:NR))
> |     fwrite(notused, file="bugsample.csv")
> |     stop("you can quit now and restart the program")
> | }
> |
> | if (!exists("notused")) notused <- fread("bugsample.csv", nrows= Inf)  ##
> | needed!  Inf cannot be replaced by actual NR
> |
> |
> | sample <- data.frame( groupidentifier=c( rep(11111,2000), rep(22222, 4500 )
> | ) )
> | sample$yvar <- sin(1:nrow(sample))
> | sample$xvar <- 1:nrow(sample)
> |
> |
> | testfun <- function(dl) {
> |     with(dl, message("Working: ", first(groupidentifier), " with ",
> | nrow(dl)))
> |
> |     lapply( 1:nrow(dl), FUN=function(onedayindex) {
> |         if ((onedayindex %% 500) != 0) return(NULL)
> |         with(dl[1:onedayindex,],
> |              c( tryCatch( coef(lm( yvar ~ xvar, data=dl[1:onedayindex,]
> | ))[2], error = function(e) NA ) ) )
> |     })
> | }
> |
> |
> | message("starting --- replicable hang with mclapply, but not lapply")
> |
> | o <- mclapply(split( 1:nrow(sample), sample$groupidentifier ),
> |               FUN=function(.index) testfun( sample[.index, , drop=FALSE] ))
> |
> | message("never gets here with mclapply")
> |
> | print( do.call("c", o[[1]]) )
> | print( do.call("c", o[[2]]) )
> |
> |
> |
> | --
> | Ivo Welch (ivo.welch at ucla.edu)
> |
> | 	[[alternative HTML version deleted]]
> |
> | ______________________________________________
> | R-devel at r-project.org mailing list
> | https://stat.ethz.ch/mailman/listinfo/r-devel
>


From therne@u @end|ng |rom m@yo@edu  Fri Apr  5 15:03:45 2019
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Fri, 05 Apr 2019 08:03:45 -0500
Subject: [Rd] all.equal failure
Message-ID: <b23057$belnhe@ironport10.mayo.edu>

This arose in testing [.terms and has me confused.

data(esoph)?? # use a standard data set

t0x <- terms(model.frame( ~ tobgp, data=esoph))
t1 <-? terms(model.frame(ncases ~ agegp + tobgp, data=esoph))
t1x <- (delete.response(t1))[-1]

 > all.equal(t0x, t1x)
[1] TRUE

# the above is wrong, because they actually are not the same

 > all.equal(attr(t0x, 'dataClasses'), attr(t1x, 'dataClasses'))
[1] "Names: 1 string mismatch"
[2] "Lengths (1, 2) differ (string compare on first 1)"

 > sessionInfo()
R Under development (unstable) (2019-04-05 r76323)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.2 LTS

Matrix products: default
BLAS:?? /usr/local/src/R-devel/lib/libRblas.so
LAPACK: /usr/local/src/R-devel/lib/libRlapack.so

locale:
 ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
 ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=C
 ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
 ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
 ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats???? graphics? grDevices utils???? datasets? methods base

loaded via a namespace (and not attached):
[1] compiler_3.7.0 tools_3.7.0


	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Fri Apr  5 15:44:56 2019
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Fri, 05 Apr 2019 08:44:56 -0500
Subject: [Rd] [.terms issue
Message-ID: <b23057$bem5m2@ironport10.mayo.edu>

As? footnote, the error in survival:::untangle.specials is that it assumed that if 
attr(myterms, 'specials')[['strata']] was = to 4, then one could use myterms[-4] to remove 
the strata term.?? Not so.?? In the model? y ~? x1 + x2 + strata(x3)? the attritube will 
be 4 -- the response counts --- but to remove it I need to use [-3] since the response 
does not count in [.terms or drop.terms.

Is this an inconsistency that should be documented and/or repaired??? What would break if 
we did???? I don't know.? By chance, all the usages in the survival package happened after 
a call to delete.response so it would be immune to such a change.

Terry T.


	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Apr  5 16:00:28 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 5 Apr 2019 10:00:28 -0400
Subject: [Rd] all.equal failure
In-Reply-To: <b23057$belnhe@ironport10.mayo.edu>
References: <b23057$belnhe@ironport10.mayo.edu>
Message-ID: <7b627c90-1bbf-b2a5-5ddc-391711f5208e@gmail.com>

On 05/04/2019 9:03 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> This arose in testing [.terms and has me confused.
> 
> data(esoph)?? # use a standard data set
> 
> t0x <- terms(model.frame( ~ tobgp, data=esoph))
> t1 <-? terms(model.frame(ncases ~ agegp + tobgp, data=esoph))
> t1x <- (delete.response(t1))[-1]
> 
>   > all.equal(t0x, t1x)
> [1] TRUE
> 
> # the above is wrong, because they actually are not the same
> 
>   > all.equal(attr(t0x, 'dataClasses'), attr(t1x, 'dataClasses'))
> [1] "Names: 1 string mismatch"
> [2] "Lengths (1, 2) differ (string compare on first 1)"

As documented, all.equal() is generic, with methods for different 
classes.  The classes of both t0x and t1x are

  c("terms","formula")

with no all.equal.terms method, so all.equal.formula is called.  That 
method isn't specifically documented, but you can see its definition as

function (target, current, ...)
{
     if (length(target) != length(current))
         return(paste0("target, current differ in having response: ",
             length(target) == 3L, ", ", length(current) == 3L))
     if (!identical(deparse(target), deparse(current)))
         "formulas differ in contents"
     else TRUE
}

So the issue is that deparse(t0x) and deparse(t1x) give the same strings 
with no attributes shown, even though "showAttributes" is set by 
default.   I haven't traced through the C code to see where things are 
going wrong.

Duncan Murdoch

> 
>   > sessionInfo()
> R Under development (unstable) (2019-04-05 r76323)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 18.04.2 LTS
> 
> Matrix products: default
> BLAS:?? /usr/local/src/R-devel/lib/libRblas.so
> LAPACK: /usr/local/src/R-devel/lib/libRlapack.so
> 
> locale:
>   ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
>   ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=C
>   ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
>   ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
>   ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> 
> attached base packages:
> [1] stats???? graphics? grDevices utils???? datasets? methods base
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.7.0 tools_3.7.0
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From therne@u @end|ng |rom m@yo@edu  Fri Apr  5 16:19:46 2019
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Fri, 05 Apr 2019 09:19:46 -0500
Subject: [Rd] [EXTERNAL] Re:  all.equal failure
In-Reply-To: <7b627c90-1bbf-b2a5-5ddc-391711f5208e@gmail.com>
References: <b23057$belnhe@ironport10.mayo.edu>
 <7b627c90-1bbf-b2a5-5ddc-391711f5208e@gmail.com>
Message-ID: <b23057$bemifi@ironport10.mayo.edu>

Duncan,
 ? I should have included it in my original note, but

 ?? ? all.equal(unclass(t0x), unclass(t1x))

returns TRUE as well.? I had tried that as well. ? But a further look at all.equal.default 
shows the following line right near the top:
 ??? if (is.language(target) || is.function(target))
 ??????? return(all.equal.language(target, current, ...))

and that path explicitly ignores attributes.

I'll change my original original title to "all.equal was not a good tool for testing 
certain code issues".

Thanks for the pointer,

Terry



On 4/5/19 9:00 AM, Duncan Murdoch wrote:
> On 05/04/2019 9:03 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
>> This arose in testing [.terms and has me confused.
>>
>> data(esoph)?? # use a standard data set
>>
>> t0x <- terms(model.frame( ~ tobgp, data=esoph))
>> t1 <-? terms(model.frame(ncases ~ agegp + tobgp, data=esoph))
>> t1x <- (delete.response(t1))[-1]
>>
>> ? > all.equal(t0x, t1x)
>> [1] TRUE
>>
>> # the above is wrong, because they actually are not the same
>>
>> ? > all.equal(attr(t0x, 'dataClasses'), attr(t1x, 'dataClasses'))
>> [1] "Names: 1 string mismatch"
>> [2] "Lengths (1, 2) differ (string compare on first 1)"
>
> As documented, all.equal() is generic, with methods for different classes.? The classes 
> of both t0x and t1x are
>
> ?c("terms","formula")
>
> with no all.equal.terms method, so all.equal.formula is called. That method isn't 
> specifically documented, but you can see its definition as
>
> function (target, current, ...)
> {
> ??? if (length(target) != length(current))
> ??????? return(paste0("target, current differ in having response: ",
> ??????????? length(target) == 3L, ", ", length(current) == 3L))
> ??? if (!identical(deparse(target), deparse(current)))
> ??????? "formulas differ in contents"
> ??? else TRUE
> }
>
> So the issue is that deparse(t0x) and deparse(t1x) give the same strings with no 
> attributes shown, even though "showAttributes" is set by default.?? I haven't traced 
> through the C code to see where things are going wrong.
>
> Duncan Murdoch
>
>>
>> ? > sessionInfo()
>> R Under development (unstable) (2019-04-05 r76323)
>> Platform: x86_64-pc-linux-gnu (64-bit)
>> Running under: Ubuntu 18.04.2 LTS
>>
>> Matrix products: default
>> BLAS:?? /usr/local/src/R-devel/lib/libRblas.so
>> LAPACK: /usr/local/src/R-devel/lib/libRlapack.so
>>
>> locale:
>> ? ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
>> ? ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=C
>> ? ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
>> ? ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
>> ? ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
>> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>>
>> attached base packages:
>> [1] stats???? graphics? grDevices utils???? datasets? methods base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_3.7.0 tools_3.7.0
>>
>>
>> ????[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Apr  5 16:39:43 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 5 Apr 2019 10:39:43 -0400
Subject: [Rd] [EXTERNAL] Re:  all.equal failure
In-Reply-To: <b23057$bemifh@ironport10.mayo.edu>
References: <b23057$belnhe@ironport10.mayo.edu>
 <7b627c90-1bbf-b2a5-5ddc-391711f5208e@gmail.com>
 <b23057$bemifh@ironport10.mayo.edu>
Message-ID: <8eced21f-bd54-1675-8122-b2119e36f901@gmail.com>

On 05/04/2019 10:19 a.m., Therneau, Terry M., Ph.D. wrote:
> Duncan,
>  ? I should have included it in my original note, but
> 
>  ?? ? all.equal(unclass(t0x), unclass(t1x))
> 
> returns TRUE as well.? I had tried that as well. ? But a further look at 
> all.equal.default shows the following line right near the top:
>  ??? if (is.language(target) || is.function(target))
>  ??????? return(all.equal.language(target, current, ...))
> 
> and that path explicitly ignores attributes.

Which R version are you using?  I see deparse(target) and 
deparse(current) in all.equal.language(), and those should not be 
ignoring attributes according to the documentation.

Duncan Murdoch

> 
> I'll change my original original title to "all.equal was not a good tool 
> for testing certain code issues".
> 
> Thanks for the pointer,
> 
> Terry
> 
> 
> 
> On 4/5/19 9:00 AM, Duncan Murdoch wrote:
>> On 05/04/2019 9:03 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
>>> This arose in testing [.terms and has me confused.
>>>
>>> data(esoph)?? # use a standard data set
>>>
>>> t0x <- terms(model.frame( ~ tobgp, data=esoph))
>>> t1 <-? terms(model.frame(ncases ~ agegp + tobgp, data=esoph))
>>> t1x <- (delete.response(t1))[-1]
>>>
>>> ? > all.equal(t0x, t1x)
>>> [1] TRUE
>>>
>>> # the above is wrong, because they actually are not the same
>>>
>>> ? > all.equal(attr(t0x, 'dataClasses'), attr(t1x, 'dataClasses'))
>>> [1] "Names: 1 string mismatch"
>>> [2] "Lengths (1, 2) differ (string compare on first 1)"
>>
>> As documented, all.equal() is generic, with methods for different 
>> classes.? The classes of both t0x and t1x are
>>
>> ?c("terms","formula")
>>
>> with no all.equal.terms method, so all.equal.formula is called. That 
>> method isn't specifically documented, but you can see its definition as
>>
>> function (target, current, ...)
>> {
>> ??? if (length(target) != length(current))
>> ??????? return(paste0("target, current differ in having response: ",
>> ??????????? length(target) == 3L, ", ", length(current) == 3L))
>> ??? if (!identical(deparse(target), deparse(current)))
>> ??????? "formulas differ in contents"
>> ??? else TRUE
>> }
>>
>> So the issue is that deparse(t0x) and deparse(t1x) give the same 
>> strings with no attributes shown, even though "showAttributes" is set 
>> by default.?? I haven't traced through the C code to see where things 
>> are going wrong.
>>
>> Duncan Murdoch
>>
>>>
>>> ? > sessionInfo()
>>> R Under development (unstable) (2019-04-05 r76323)
>>> Platform: x86_64-pc-linux-gnu (64-bit)
>>> Running under: Ubuntu 18.04.2 LTS
>>>
>>> Matrix products: default
>>> BLAS:?? /usr/local/src/R-devel/lib/libRblas.so
>>> LAPACK: /usr/local/src/R-devel/lib/libRlapack.so
>>>
>>> locale:
>>> ? ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
>>> ? ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=C
>>> ? ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
>>> ? ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
>>> ? ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
>>> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>>>
>>> attached base packages:
>>> [1] stats???? graphics? grDevices utils???? datasets? methods base
>>>
>>> loaded via a namespace (and not attached):
>>> [1] compiler_3.7.0 tools_3.7.0
>>>
>>>
>>> ????[[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>


From therne@u @end|ng |rom m@yo@edu  Fri Apr  5 16:46:44 2019
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Fri, 05 Apr 2019 09:46:44 -0500
Subject: [Rd] [EXTERNAL] Re: Re:  all.equal failure
In-Reply-To: <8eced21f-bd54-1675-8122-b2119e36f901@gmail.com>
References: <b23057$belnhe@ironport10.mayo.edu>
 <7b627c90-1bbf-b2a5-5ddc-391711f5208e@gmail.com>
 <b23057$bemifh@ironport10.mayo.edu>
 <8eced21f-bd54-1675-8122-b2119e36f901@gmail.com>
Message-ID: <b23057$bems3p@ironport10.mayo.edu>



On 4/5/19 9:39 AM, Duncan Murdoch wrote:
> On 05/04/2019 10:19 a.m., Therneau, Terry M., Ph.D. wrote:
>> Duncan,
>> ?? I should have included it in my original note, but
>>
>> ??? ? all.equal(unclass(t0x), unclass(t1x))
>>
>> returns TRUE as well.? I had tried that as well. ? But a further look at 
>> all.equal.default shows the following line right near the top:
>> ???? if (is.language(target) || is.function(target))
>> ???????? return(all.equal.language(target, current, ...))
>>
>> and that path explicitly ignores attributes.
>
> Which R version are you using?? I see deparse(target) and deparse(current) in 
> all.equal.language(), and those should not be ignoring attributes according to the 
> documentation.
>
I'm using today's version of R-devel on Ubuntu.? (svn up this AM)
But I agree, both target and current appear.

> Duncan Murdoch
>
>>
>> I'll change my original original title to "all.equal was not a good tool for testing 
>> certain code issues".
>>
>> Thanks for the pointer,
>>
>> Terry
>>
>>
>>
>> On 4/5/19 9:00 AM, Duncan Murdoch wrote:
>>> On 05/04/2019 9:03 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
>>>> This arose in testing [.terms and has me confused.
>>>>
>>>> data(esoph)?? # use a standard data set
>>>>
>>>> t0x <- terms(model.frame( ~ tobgp, data=esoph))
>>>> t1 <-? terms(model.frame(ncases ~ agegp + tobgp, data=esoph))
>>>> t1x <- (delete.response(t1))[-1]
>>>>
>>>> ? > all.equal(t0x, t1x)
>>>> [1] TRUE
>>>>
>>>> # the above is wrong, because they actually are not the same
>>>>
>>>> ? > all.equal(attr(t0x, 'dataClasses'), attr(t1x, 'dataClasses'))
>>>> [1] "Names: 1 string mismatch"
>>>> [2] "Lengths (1, 2) differ (string compare on first 1)"
>>>
>>> As documented, all.equal() is generic, with methods for different classes.? The 
>>> classes of both t0x and t1x are
>>>
>>> ?c("terms","formula")
>>>
>>> with no all.equal.terms method, so all.equal.formula is called. That method isn't 
>>> specifically documented, but you can see its definition as
>>>
>>> function (target, current, ...)
>>> {
>>> ??? if (length(target) != length(current))
>>> ??????? return(paste0("target, current differ in having response: ",
>>> ??????????? length(target) == 3L, ", ", length(current) == 3L))
>>> ??? if (!identical(deparse(target), deparse(current)))
>>> ??????? "formulas differ in contents"
>>> ??? else TRUE
>>> }
>>>
>>> So the issue is that deparse(t0x) and deparse(t1x) give the same strings with no 
>>> attributes shown, even though "showAttributes" is set by default.?? I haven't traced 
>>> through the C code to see where things are going wrong.
>>>
>>> Duncan Murdoch
>>>
>>>>
>>>> ? > sessionInfo()
>>>> R Under development (unstable) (2019-04-05 r76323)
>>>> Platform: x86_64-pc-linux-gnu (64-bit)
>>>> Running under: Ubuntu 18.04.2 LTS
>>>>
>>>> Matrix products: default
>>>> BLAS:?? /usr/local/src/R-devel/lib/libRblas.so
>>>> LAPACK: /usr/local/src/R-devel/lib/libRlapack.so
>>>>
>>>> locale:
>>>> ? ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
>>>> ? ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=C
>>>> ? ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
>>>> ? ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
>>>> ? ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
>>>> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>>>>
>>>> attached base packages:
>>>> [1] stats???? graphics? grDevices utils???? datasets methods base
>>>>
>>>> loaded via a namespace (and not attached):
>>>> [1] compiler_3.7.0 tools_3.7.0
>>>>
>>>>
>>>> ????[[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>
>>
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Apr  5 17:12:48 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 5 Apr 2019 11:12:48 -0400
Subject: [Rd] [EXTERNAL] Re: Re:  all.equal failure
In-Reply-To: <b23057$bems3o@ironport10.mayo.edu>
References: <b23057$belnhe@ironport10.mayo.edu>
 <7b627c90-1bbf-b2a5-5ddc-391711f5208e@gmail.com>
 <b23057$bemifh@ironport10.mayo.edu>
 <8eced21f-bd54-1675-8122-b2119e36f901@gmail.com>
 <b23057$bems3o@ironport10.mayo.edu>
Message-ID: <4ef61872-a213-7205-673c-fbc6a65d98ae@gmail.com>

On 05/04/2019 10:46 a.m., Therneau, Terry M., Ph.D. wrote:
> 
> 
> On 4/5/19 9:39 AM, Duncan Murdoch wrote:
>> On 05/04/2019 10:19 a.m., Therneau, Terry M., Ph.D. wrote:
>>> Duncan,
>>>  ?? I should have included it in my original note, but
>>>
>>>  ??? ? all.equal(unclass(t0x), unclass(t1x))
>>>
>>> returns TRUE as well.? I had tried that as well. ? But a further look at
>>> all.equal.default shows the following line right near the top:
>>>  ???? if (is.language(target) || is.function(target))
>>>  ???????? return(all.equal.language(target, current, ...))
>>>
>>> and that path explicitly ignores attributes.
>>
>> Which R version are you using?? I see deparse(target) and deparse(current) in
>> all.equal.language(), and those should not be ignoring attributes according to the
>> documentation.
>>
> I'm using today's version of R-devel on Ubuntu.? (svn up this AM)
> But I agree, both target and current appear.

That's not what I said.  I said that the attributes should not be 
ignored in that function.  I don't see anything in the R-devel version 
of it that ignores attributes:

 > all.equal.language
function (target, current, ...)
{
     mt <- mode(target)
     mc <- mode(current)
     if (mt == "expression" && mc == "expression")
         return(all.equal.list(target, current, ...))
     ttxt <- paste(deparse(target), collapse = "\n")
     ctxt <- paste(deparse(current), collapse = "\n")
     msg <- c(if (mt != mc) paste0("Modes of target, current: ",
         mt, ", ", mc), if (ttxt != ctxt) {
         if (pmatch(ttxt, ctxt, 0L)) "target is a subset of current" 
else if (pmatch(ctxt,
             ttxt, 0L)) "current is a subset of target" else "target, 
current do not match when deparsed"
     })
     if (is.null(msg))
         TRUE
     else msg
}
<bytecode: 0x7fd9e792f1e0>
<environment: namespace:base>


Duncan Murdoch



> 
>> Duncan Murdoch
>>
>>>
>>> I'll change my original original title to "all.equal was not a good tool for testing
>>> certain code issues".
>>>
>>> Thanks for the pointer,
>>>
>>> Terry
>>>
>>>
>>>
>>> On 4/5/19 9:00 AM, Duncan Murdoch wrote:
>>>> On 05/04/2019 9:03 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
>>>>> This arose in testing [.terms and has me confused.
>>>>>
>>>>> data(esoph)?? # use a standard data set
>>>>>
>>>>> t0x <- terms(model.frame( ~ tobgp, data=esoph))
>>>>> t1 <-? terms(model.frame(ncases ~ agegp + tobgp, data=esoph))
>>>>> t1x <- (delete.response(t1))[-1]
>>>>>
>>>>>  ? > all.equal(t0x, t1x)
>>>>> [1] TRUE
>>>>>
>>>>> # the above is wrong, because they actually are not the same
>>>>>
>>>>>  ? > all.equal(attr(t0x, 'dataClasses'), attr(t1x, 'dataClasses'))
>>>>> [1] "Names: 1 string mismatch"
>>>>> [2] "Lengths (1, 2) differ (string compare on first 1)"
>>>>
>>>> As documented, all.equal() is generic, with methods for different classes.? The
>>>> classes of both t0x and t1x are
>>>>
>>>>  ?c("terms","formula")
>>>>
>>>> with no all.equal.terms method, so all.equal.formula is called. That method isn't
>>>> specifically documented, but you can see its definition as
>>>>
>>>> function (target, current, ...)
>>>> {
>>>>  ??? if (length(target) != length(current))
>>>>  ??????? return(paste0("target, current differ in having response: ",
>>>>  ??????????? length(target) == 3L, ", ", length(current) == 3L))
>>>>  ??? if (!identical(deparse(target), deparse(current)))
>>>>  ??????? "formulas differ in contents"
>>>>  ??? else TRUE
>>>> }
>>>>
>>>> So the issue is that deparse(t0x) and deparse(t1x) give the same strings with no
>>>> attributes shown, even though "showAttributes" is set by default.?? I haven't traced
>>>> through the C code to see where things are going wrong.
>>>>
>>>> Duncan Murdoch
>>>>
>>>>>
>>>>>  ? > sessionInfo()
>>>>> R Under development (unstable) (2019-04-05 r76323)
>>>>> Platform: x86_64-pc-linux-gnu (64-bit)
>>>>> Running under: Ubuntu 18.04.2 LTS
>>>>>
>>>>> Matrix products: default
>>>>> BLAS:?? /usr/local/src/R-devel/lib/libRblas.so
>>>>> LAPACK: /usr/local/src/R-devel/lib/libRlapack.so
>>>>>
>>>>> locale:
>>>>>  ? ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
>>>>>  ? ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=C
>>>>>  ? ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
>>>>>  ? ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
>>>>>  ? ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
>>>>> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>>>>>
>>>>> attached base packages:
>>>>> [1] stats???? graphics? grDevices utils???? datasets methods base
>>>>>
>>>>> loaded via a namespace (and not attached):
>>>>> [1] compiler_3.7.0 tools_3.7.0
>>>>>
>>>>>
>>>>>  ????[[alternative HTML version deleted]]
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>>
>>>
>>
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Apr  5 17:33:54 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 5 Apr 2019 17:33:54 +0200
Subject: [Rd] [EXTERNAL] Re: Re:  all.equal failure
In-Reply-To: <4ef61872-a213-7205-673c-fbc6a65d98ae@gmail.com>
References: <b23057$belnhe@ironport10.mayo.edu>
 <7b627c90-1bbf-b2a5-5ddc-391711f5208e@gmail.com>
 <b23057$bemifh@ironport10.mayo.edu>
 <8eced21f-bd54-1675-8122-b2119e36f901@gmail.com>
 <b23057$bems3o@ironport10.mayo.edu>
 <4ef61872-a213-7205-673c-fbc6a65d98ae@gmail.com>
Message-ID: <23719.30050.351411.6577@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Fri, 5 Apr 2019 11:12:48 -0400 writes:

    > On 05/04/2019 10:46 a.m., Therneau, Terry M., Ph.D. wrote:
    >> 
    >> 
    >> On 4/5/19 9:39 AM, Duncan Murdoch wrote:
    >>> On 05/04/2019 10:19 a.m., Therneau, Terry M., Ph.D. wrote:
    >>>> Duncan,
    >>>> ?? I should have included it in my original note, but
    >>>> 
    >>>> ??? ? all.equal(unclass(t0x), unclass(t1x))
    >>>> 
    >>>> returns TRUE as well.? I had tried that as well. ? But a further look at
    >>>> all.equal.default shows the following line right near the top:
    >>>> ???? if (is.language(target) || is.function(target))
    >>>> ???????? return(all.equal.language(target, current, ...))
    >>>> 
    >>>> and that path explicitly ignores attributes.
    >>> 
    >>> Which R version are you using?? I see deparse(target) and deparse(current) in
    >>> all.equal.language(), and those should not be ignoring attributes according to the
    >>> documentation.

But the problem is that indeed  "of course"  all.equal.formula()
and not all.equal.language() is called for the terms since as
you yourself remarked, their class is  c("terms", "formula"),

and so what Terry reported is indeed correct *and* a bug
and in "all versions" of R (I did not look far back, but these things
haven't changed much).

The cleanest would probably be to define an  all.equal.terms()
method, as I think there may be more code relying on the
behavior of  all.equal.formula() to only look at the formulas
themselves and not their attributes...
but you (Duncan) and others may have a different opinion.

Martin Maechler
ETH Zurich and R Core Team


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Apr  5 17:58:55 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 5 Apr 2019 17:58:55 +0200
Subject: [Rd] [EXTERNAL] Re: Re:  all.equal failure
In-Reply-To: <23719.30050.351411.6577@stat.math.ethz.ch>
References: <b23057$belnhe@ironport10.mayo.edu>
 <7b627c90-1bbf-b2a5-5ddc-391711f5208e@gmail.com>
 <b23057$bemifh@ironport10.mayo.edu>
 <8eced21f-bd54-1675-8122-b2119e36f901@gmail.com>
 <b23057$bems3o@ironport10.mayo.edu>
 <4ef61872-a213-7205-673c-fbc6a65d98ae@gmail.com>
 <23719.30050.351411.6577@stat.math.ethz.ch>
Message-ID: <23719.31551.389329.752841@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Fri, 5 Apr 2019 17:33:54 +0200 writes:

>>>>> Duncan Murdoch 
>>>>>     on Fri, 5 Apr 2019 11:12:48 -0400 writes:

    >> On 05/04/2019 10:46 a.m., Therneau, Terry M., Ph.D. wrote:
    >>> 
    >>> 
    >>> On 4/5/19 9:39 AM, Duncan Murdoch wrote:
    >>>> On 05/04/2019 10:19 a.m., Therneau, Terry M., Ph.D. wrote:
    >>>>> Duncan,
    >>>>> ?? I should have included it in my original note, but
    >>>>> 
    >>>>> ??? ? all.equal(unclass(t0x), unclass(t1x))
    >>>>> 
    >>>>> returns TRUE as well.? I had tried that as well. ? But a further look at
    >>>>> all.equal.default shows the following line right near the top:
    >>>>> ???? if (is.language(target) || is.function(target))
    >>>>> ???????? return(all.equal.language(target, current, ...))
    >>>>> 
    >>>>> and that path explicitly ignores attributes.
    >>>> 
    >>>> Which R version are you using?? I see deparse(target) and deparse(current) in
    >>>> all.equal.language(), and those should not be ignoring attributes according to the
    >>>> documentation.

    > But the problem is that indeed  "of course"  all.equal.formula()
    > and not all.equal.language() is called for the terms since as
    > you yourself remarked, their class is  c("terms", "formula"),

    > and so what Terry reported is indeed correct *and* a bug
    > and in "all versions" of R (I did not look far back, but these things
    > haven't changed much).

    > The cleanest would probably be to define an  all.equal.terms()
    > method, as I think there may be more code relying on the
    > behavior of  all.equal.formula() to only look at the formulas
    > themselves and not their attributes...
    > but you (Duncan) and others may have a different opinion.

and I do agree with Duncan even more now that indeed it's very
unsatisfactory that deparse() {and dput(), dump() ..} of a terms
object would only reproduce the formula and nothing else;
and yes that's all in the C code:
 --> src/main/deparse.c
    --> in function deparse2buff()
       -->  inside the (350 lines large)  'case LANGSXP'.

Martin


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Apr  5 18:00:27 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 5 Apr 2019 12:00:27 -0400
Subject: [Rd] [EXTERNAL] Re: Re: all.equal failure
In-Reply-To: <23719.30050.351411.6577@stat.math.ethz.ch>
References: <b23057$belnhe@ironport10.mayo.edu>
 <7b627c90-1bbf-b2a5-5ddc-391711f5208e@gmail.com>
 <b23057$bemifh@ironport10.mayo.edu>
 <8eced21f-bd54-1675-8122-b2119e36f901@gmail.com>
 <b23057$bems3o@ironport10.mayo.edu>
 <4ef61872-a213-7205-673c-fbc6a65d98ae@gmail.com>
 <23719.30050.351411.6577@stat.math.ethz.ch>
Message-ID: <4ee47f6c-e1c8-73c6-ba67-1feb97cf4e48@gmail.com>

On 05/04/2019 11:33 a.m., Martin Maechler wrote:
>>>>>> Duncan Murdoch
>>>>>>      on Fri, 5 Apr 2019 11:12:48 -0400 writes:
> 
>      > On 05/04/2019 10:46 a.m., Therneau, Terry M., Ph.D. wrote:
>      >>
>      >>
>      >> On 4/5/19 9:39 AM, Duncan Murdoch wrote:
>      >>> On 05/04/2019 10:19 a.m., Therneau, Terry M., Ph.D. wrote:
>      >>>> Duncan,
>      >>>> ?? I should have included it in my original note, but
>      >>>>
>      >>>> ??? ? all.equal(unclass(t0x), unclass(t1x))
>      >>>>
>      >>>> returns TRUE as well.? I had tried that as well. ? But a further look at
>      >>>> all.equal.default shows the following line right near the top:
>      >>>> ???? if (is.language(target) || is.function(target))
>      >>>> ???????? return(all.equal.language(target, current, ...))
>      >>>>
>      >>>> and that path explicitly ignores attributes.
>      >>>
>      >>> Which R version are you using?? I see deparse(target) and deparse(current) in
>      >>> all.equal.language(), and those should not be ignoring attributes according to the
>      >>> documentation.
> 
> But the problem is that indeed  "of course"  all.equal.formula()
> and not all.equal.language() is called for the terms since as
> you yourself remarked, their class is  c("terms", "formula"),
> 
> and so what Terry reported is indeed correct *and* a bug
> and in "all versions" of R (I did not look far back, but these things
> haven't changed much).
> 
> The cleanest would probably be to define an  all.equal.terms()
> method, as I think there may be more code relying on the
> behavior of  all.equal.formula() to only look at the formulas
> themselves and not their attributes...
> but you (Duncan) and others may have a different opinion.

I don't know if that would be easy -- it seems to me there is a bug in 
deparse(), which won't show attributes on language objects even if you 
ask it to:

# This is fine:
deparse(structure(1, attrib=2))
# [1] "structure(1, attrib = 2)"

# This doesn't show the attributes
deparse(structure(quote(f(1)), attrib=2))
# [1] "f(1)"

But as you mention, if this isn't a new bug fixing it will likely cause 
problems for people who assume it is intentional...

Duncan


From therne@u @end|ng |rom m@yo@edu  Fri Apr  5 19:09:11 2019
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Fri, 05 Apr 2019 12:09:11 -0500
Subject: [Rd] all.equal failure and [.terms
In-Reply-To: <4ee47f6c-e1c8-73c6-ba67-1feb97cf4e48@gmail.com>
References: <b23057$belnhe@ironport10.mayo.edu>
 <7b627c90-1bbf-b2a5-5ddc-391711f5208e@gmail.com>
 <b23057$bemifh@ironport10.mayo.edu>
 <8eced21f-bd54-1675-8122-b2119e36f901@gmail.com>
 <b23057$bems3o@ironport10.mayo.edu>
 <4ef61872-a213-7205-673c-fbc6a65d98ae@gmail.com>
 <23719.30050.351411.6577@stat.math.ethz.ch>
 <4ee47f6c-e1c8-73c6-ba67-1feb97cf4e48@gmail.com>
Message-ID: <b23057$beog18@ironport10.mayo.edu>

The all.equal was a side issue for me; I don't have strong opinions one way or the other.? 
You are welcome to leave me out of the loop on that.? (Or leave me on the cc, whatever is 
easiest).

 ?I will update the survival package once the [.terms issues are addressed.

 ?One debatable issues is the choice of change vs document for the offset() issue.? With 
my proposed fix or without it, offsets are completely ignored by [.terms and dropterms.? 
So with a formula of

 ?? z <- terms(y~ x1 + offset(x2) + x3)

the 2 in drop.terms(z, 2) or z[-2] refers to x3, and the result will drop both the offset 
and x3.? For the use cases that I can think of the two functions are used at the 'build 
the X matrix' stage, offsets have already been accounted for, and the present behavior is 
fine.? My vote would be to document it with a few lines in the help file since that is the 
easiest.? Offsets don't count as a 'term' in the assign attribute either so the current 
behavior is consistent in that respect.

Terry T.


	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Sat Apr  6 15:35:37 2019
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 6 Apr 2019 08:35:37 -0500
Subject: [Rd] R 3.6.0 "alpha" binaries
In-Reply-To: <b23057$beog18@ironport10.mayo.edu>
References: <b23057$belnhe@ironport10.mayo.edu>
 <7b627c90-1bbf-b2a5-5ddc-391711f5208e@gmail.com>
 <b23057$bemifh@ironport10.mayo.edu>
 <8eced21f-bd54-1675-8122-b2119e36f901@gmail.com>
 <b23057$bems3o@ironport10.mayo.edu>
 <4ef61872-a213-7205-673c-fbc6a65d98ae@gmail.com>
 <23719.30050.351411.6577@stat.math.ethz.ch>
 <4ee47f6c-e1c8-73c6-ba67-1feb97cf4e48@gmail.com>
 <b23057$beog18@ironport10.mayo.edu>
Message-ID: <23720.43817.53861.340210@rob.eddelbuettel.com>


If you are on Debian and want to help test the upcoming R 3.6.0 releases
coming out April 26, I just put a set of packages based on last night's
tarball into Debian's "experimental" branch.

I plan to follow up with at least one beta and rc build each, and at least
one of those will go to the normal upload branch.

Questions might be best asked on r-sig-debian; if you think I should have put
this note there drop me a line.

Thanks,  Dirk

[1] Experiemental is apart; from there packages do /not/ automatically
migrate into releases.

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From jpr|t|k|n @end|ng |rom pobox@com  Fri Apr  5 18:05:36 2019
From: jpr|t|k|n @end|ng |rom pobox@com (Joshua N Pritikin)
Date: Fri, 5 Apr 2019 12:05:36 -0400
Subject: [Rd] patch to improve matrix conformability error message
Message-ID: <20190405160536.GB13959@cocoa>

With this patch,

> A <- matrix(1, 2, 2)
> B <- matrix(2, 3, 2)
> A %*% B
Error in A %*% B : 
  non-conformable arguments of dimension (2, 2) and (3, 2)

>From 205b591d4d14b5ff667325fb233a6deb08314726 Mon Sep 17 00:00:00 2001
From: Joshua Nathaniel Pritikin <jpritikin at pobox.com>
Date: Fri, 5 Apr 2019 12:03:58 -0400
Subject: [PATCH] Improve non-conformable arguments error message

---
 src/main/array.c | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/src/main/array.c b/src/main/array.c
index 4b95e33..cedf627 100644
--- a/src/main/array.c
+++ b/src/main/array.c
@@ -1350,15 +1350,18 @@ SEXP attribute_hidden do_matprod(SEXP call, SEXP op, SEXP args, SEXP rho)
     if (PRIMVAL(op) == 0) {
 	/* primitive, so use call */
 	if (ncx != nry)
-	    errorcall(call, _("non-conformable arguments"));
+	  errorcall(call, _("non-conformable arguments of dimension (%d, %d) and (%d, %d)"),
+		    nrx, ncx, nry, ncy);
     }
     else if (PRIMVAL(op) == 1) {
 	if (nrx != nry)
-	    error(_("non-conformable arguments"));
+	  error(_("non-conformable arguments of dimension (%d, %d) and (%d, %d)"),
+		nrx, ncx, nry, ncy);
     }
     else {
 	if (ncx != ncy)
-	    error(_("non-conformable arguments"));
+	  error(_("non-conformable arguments of dimension (%d, %d) and (%d, %d)"),
+		nrx, ncx, nry, ncy);
     }
 
     if (isComplex(CAR(args)) || isComplex(CADR(args)))
-- 
2.19.1


From v@@@||88 @end|ng |rom gm@||@com  Mon Apr  8 04:39:26 2019
From: v@@@||88 @end|ng |rom gm@||@com (Vassil Kakaradov)
Date: Mon, 8 Apr 2019 03:39:26 +0100
Subject: [Rd] ActiveTCL has non open-source license
Message-ID: <CA+q6M4+2hBUeJn4x16xM49okgsz+h5ddASB58gFWJ5LbJe8Phw@mail.gmail.com>

https://cran.r-project.org/doc/manuals/R-admin.html#Installing-R-under-macOS
https://www.activestate.com/activetcl/downloads links to ActiveTCL which
has non open-source license:
http://docs.activestate.com/activetcl/8.5/get/license/
"ActiveState Confidential Information includes the Software, including all
source and object code, and all associated documentation, but not
Accessible Code."

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Tue Apr  9 15:20:07 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 9 Apr 2019 15:20:07 +0200
Subject: [Rd] ActiveTCL has non open-source license
In-Reply-To: <CA+q6M4+2hBUeJn4x16xM49okgsz+h5ddASB58gFWJ5LbJe8Phw@mail.gmail.com>
References: <CA+q6M4+2hBUeJn4x16xM49okgsz+h5ddASB58gFWJ5LbJe8Phw@mail.gmail.com>
Message-ID: <3A68A340-79D7-41A6-9A79-43BF44A28AA9@gmail.com>

Yes, it is annoying but may or may not be an issue for end users. Tcl and Tk are themselves OpenSource and GPL compatible but their license is less stringent than GPL, which allows ActiveState to close up their version (which AFAIK only adds the convenience of a binary install). If you are bothered by it, compile from sources. This is what Simon Urbanek does for the CRAN Mac binaries.  

Regarding legal issues, I believe this only bites if you both compile R against ActiveTcl _and_ try to redistribute the binary. 

> On 8 Apr 2019, at 04:39 , Vassil Kakaradov <vassil88 at gmail.com> wrote:
> 
> https://cran.r-project.org/doc/manuals/R-admin.html#Installing-R-under-macOS
> https://www.activestate.com/activetcl/downloads links to ActiveTCL which
> has non open-source license:
> http://docs.activestate.com/activetcl/8.5/get/license/
> "ActiveState Confidential Information includes the Software, including all
> source and object code, and all associated documentation, but not
> Accessible Code."
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 10 12:06:01 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 10 Apr 2019 12:06:01 +0200
Subject: [Rd] Parsing code with newlines
In-Reply-To: <9q0r2ahx9kf.fsf@gmx.us>
References: <a564fafa0808040550j13fd5097q804fc9549cd4ad55@mail.gmail.com>
 <alpine.LFD.1.10.0808041402500.17316@gannet.stats.ox.ac.uk>
 <9q0r2ahx9kf.fsf@gmx.us>
Message-ID: <48eaf7f6-3de0-bf4b-71be-50841711b656@gmail.com>

On 4/5/19 8:14 AM, Mikhail Titov wrote:
> Hello!
>
> This is my first post here. I came across the very same problem.
> It can be reproduced within modified tests/Embedding/RParseEval.c

Please check https://www.r-project.org/posting-guide.html and update 
your post if you still need to get help here - from your current post I 
am not sure what you did, what was the error you got and from which 
tool, why you think the error was a result of something not working 
correctly/as documented, etc. The original post with the same subject 
you are probably referring to had the same problem.

Please also note that "tests" (tests/Embedding/RParseEval.c) are not 
examples - if they do not catch R errors in some cases that is perfectly 
ok, they also may use internal API that is indeed not documented e.g. in 
Writing R Extensions. Note Writing R Extensions has a section on 
embedding R and on cleanup handlers.

Best
Tomas

>
> Actually this example has another issue, namely it doesn't wrap
> everything in R_ToplevelExec . This is a major show stopper for
> newcomers as that function is barely mentioned anywhere and longjmp into
> terminated setuploop function followed by R_suicide look like a mystery.
>
> Error: bad value
> Fatal error: unable to initialize the JIT
>
>
> That aside, here is the code with newlines that fails to parse. I hope
> it will paste alright here.
>
>
> #include "embeddedRCall.h"
> #include <R_ext/Parse.h>
>
> int
> main(int argc, char *argv[])
> {
>      SEXP e, tmp;
>      int hadError;
>      ParseStatus status;
>
>      init_R(argc, argv);
>
>      PROTECT(tmp = mkString("\n\r ls()"));
>      PROTECT(e = R_ParseVector(tmp, 1, &status, R_NilValue));
>      if (status != PARSE_OK)
>      {
>          printf("boo boo\n");
>      }
>      else
>      {
>          PrintValue(e);
>          R_tryEval(VECTOR_ELT(e,0), R_GlobalEnv, &hadError);
>      }
>      UNPROTECT(2);
>
>      end_R();
>      return(0);
> }
>
>
> --
> Mikhail
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bor||t @end|ng |rom gm@||@com  Wed Apr 10 10:22:04 2019
From: bor||t @end|ng |rom gm@||@com (=?UTF-8?B?VG9tw6HFoSBCb8WZaWw=?=)
Date: Wed, 10 Apr 2019 10:22:04 +0200
Subject: [Rd] R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
Message-ID: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>

Hello,

There is a long-lasting problem with processing UTF-8 source code in R
on Windows OS. As Windows do not have "UTF-8" locale and R passes
source code through OS before executing it, some characters are
"simplified" by the OS before processing, leading to undesirable
changes.

Minimalistic example:
Let's type "?" (LATIN SMALL LETTER R WITH CARON) in RGui console:
> "?"
[1] "r"

Let's assume the following script:
# file [script.R]
if ("?" != "\U00159") {
    stop("Problem: Unexpected character conversion.")
} else {
    cat("o.k.\n")
}

Problem:
source("script.R", encoding = "UTF-8")

OK (see https://stackoverflow.com/questions/5031630/how-to-source-r-file-saved-using-utf-8-encoding):
eval(parse("script.R", encoding = "UTF-8"))

Although the script is in UTF-8, the characters are replaced by
"simplified" substitutes uncontrollably (depending on OS locale). The
same goes with simply entering the code statements in R Console.

The problem does not occur on OS with UTF-8 locale (Mac OS, Linux...)

Best regards
Tomas Boril

> R.version
               _
platform       x86_64-w64-mingw32
arch           x86_64
os             mingw32
system         x86_64, mingw32
status         alpha
major          3
minor          6.0
year           2019
month          04
day            07
svn rev        76333
language       R
version.string R version 3.6.0 alpha (2019-04-07 r76333)
nickname

> Sys.getlocale()
[1] "LC_COLLATE=English_United States.1252;LC_CTYPE=English_United
States.1252;LC_MONETARY=English_United
States.1252;LC_NUMERIC=C;LC_TIME=English_United States.1252"


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 10 13:10:12 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 10 Apr 2019 13:10:12 +0200
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
Message-ID: <096a5c19-1fe1-aff7-fa27-16b29809373a@gmail.com>

On 4/10/19 10:22 AM, Tom?? Bo?il wrote:
> Hello,
>
> There is a long-lasting problem with processing UTF-8 source code in R
> on Windows OS. As Windows do not have "UTF-8" locale and R passes
> source code through OS before executing it, some characters are
> "simplified" by the OS before processing, leading to undesirable
> changes.
>
> Minimalistic example:
> Let's type "?" (LATIN SMALL LETTER R WITH CARON) in RGui console:
>> "?"
> [1] "r"
>
> Let's assume the following script:
> # file [script.R]
> if ("?" != "\U00159") {
>      stop("Problem: Unexpected character conversion.")
> } else {
>      cat("o.k.\n")
> }
>
> Problem:
> source("script.R", encoding = "UTF-8")
>
> OK (see https://stackoverflow.com/questions/5031630/how-to-source-r-file-saved-using-utf-8-encoding):
> eval(parse("script.R", encoding = "UTF-8"))

On my system with your example,

>  source("t.r")
Error in eval(ei, envir) : Problem: Unexpected character conversion.
>  source("/Users/tomas/t.r", encoding="UTF-8")
Error in eval(ei, envir) : Problem: Unexpected character conversion..
>  eval(parse("t.r", encoding="UTF-8"))
o.k.

Which is expected, unfortunately. As per documentation of ?source, the 
"encoding" argument tells source() that the input is in UTF-8, so that 
source() can convert it to the native encoding. Again as documented, 
parse() uses its encoding argument to mark the encoding of the strings, 
but it does not re-encode, and the character strings in the parsed 
result will as documented have the encoding mark (UTF-8 in this case).
> Although the script is in UTF-8, the characters are replaced by
> "simplified" substitutes uncontrollably (depending on OS locale). The
> same goes with simply entering the code statements in R Console.
>
> The problem does not occur on OS with UTF-8 locale (Mac OS, Linux...)

Yes. By default, Windows uses "best fit" when translating characters to 
the native encoding. This could be changed in principle, but could break 
existing applications that may depend on it, and it won't really help 
because such characters cannot be represented anyway. You can find more 
in ?Encoding, but yes, it is a known problem frequently encountered by 
users and unless Windows starts supporting UTF-8 as native encoding, 
there is no easy fix (a version from Windows 10 Insider preview supports 
it, so maybe that is not completely hopeless). In theory you can 
carefully read the documentation and use only functions that can work 
with UTF-8 without converting to native encoding, but pragmatically, if 
you want to work with UTF-8 files in R, it is best to use a non-Windows 
platform.

Best
Tomas

>
> Best regards
> Tomas Boril
>
>> R.version
>                 _
> platform       x86_64-w64-mingw32
> arch           x86_64
> os             mingw32
> system         x86_64, mingw32
> status         alpha
> major          3
> minor          6.0
> year           2019
> month          04
> day            07
> svn rev        76333
> language       R
> version.string R version 3.6.0 alpha (2019-04-07 r76333)
> nickname
>
>> Sys.getlocale()
> [1] "LC_COLLATE=English_United States.1252;LC_CTYPE=English_United
> States.1252;LC_MONETARY=English_United
> States.1252;LC_NUMERIC=C;LC_TIME=English_United States.1252"
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



	[[alternative HTML version deleted]]


From jeroenoom@ @end|ng |rom gm@||@com  Wed Apr 10 13:14:25 2019
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Wed, 10 Apr 2019 13:14:25 +0200
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
Message-ID: <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>

On Wed, Apr 10, 2019 at 12:19 PM Tom?? Bo?il <borilt at gmail.com> wrote:
>
> Minimalistic example:
> Let's type "?" (LATIN SMALL LETTER R WITH CARON) in RGui console:
> > "?"
> [1] "r"
>
> Although the script is in UTF-8, the characters are replaced by
> "simplified" substitutes uncontrollably (depending on OS locale). The
> same goes with simply entering the code statements in R Console.
>
> The problem does not occur on OS with UTF-8 locale (Mac OS, Linux...)

I think this is a "feature" of win_iconv that is bundled with base R
on Windows (./src/extra/win_iconv). The character from your example is
not part of the latin1 (iso-8859-1) set, however, win-iconv seems to
do so anyway:

> x <- "\U00159"
> print(x)
[1] "?"
> iconv(x, 'UTF-8', 'iso-8859-1')
[1] "r"

On MacOS, iconv tells us this character cannot be represented as latin1:

> x <- "\U00159"
> print(x)
[1] "?"
> iconv(x, 'UTF-8', 'iso-8859-1')
[1] NA

I'm actually not sure why base-R needs win_iconv (but I'm not an
encoding expert at all). Perhaps we could try to unbundle it and use
the standard libiconv provided by the Rtools toolchain bundle to get
more consistent results.


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 10 13:26:23 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 10 Apr 2019 13:26:23 +0200
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
 <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
Message-ID: <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>

On 4/10/19 1:14 PM, Jeroen Ooms wrote:
> On Wed, Apr 10, 2019 at 12:19 PM Tom?? Bo?il <borilt at gmail.com> wrote:
>> Minimalistic example:
>> Let's type "?" (LATIN SMALL LETTER R WITH CARON) in RGui console:
>>> "?"
>> [1] "r"
>>
>> Although the script is in UTF-8, the characters are replaced by
>> "simplified" substitutes uncontrollably (depending on OS locale). The
>> same goes with simply entering the code statements in R Console.
>>
>> The problem does not occur on OS with UTF-8 locale (Mac OS, Linux...)
> I think this is a "feature" of win_iconv that is bundled with base R
> on Windows (./src/extra/win_iconv). The character from your example is
> not part of the latin1 (iso-8859-1) set, however, win-iconv seems to
> do so anyway:
>
>> x <- "\U00159"
>> print(x)
> [1] "?"
>> iconv(x, 'UTF-8', 'iso-8859-1')
> [1] "r"
>
> On MacOS, iconv tells us this character cannot be represented as latin1:
>
>> x <- "\U00159"
>> print(x)
> [1] "?"
>> iconv(x, 'UTF-8', 'iso-8859-1')
> [1] NA
>
> I'm actually not sure why base-R needs win_iconv (but I'm not an
> encoding expert at all). Perhaps we could try to unbundle it and use
> the standard libiconv provided by the Rtools toolchain bundle to get
> more consistent results.

win_iconv just calls into Windows API to do the conversion, it is 
technically easy to disable the "best fit" conversion, but I think it 
won't be a good idea. In some cases, perhaps rare, the best fit is good, 
actually including the conversion from "?" to "r" which makes perfect 
sense. But more importantly, changing the behavior could affect users 
who expect the substitution to happen because it has been happening for 
many years, and it won't help others much.

Tomas

>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From x|e @end|ng |rom y|hu|@n@me  Wed Apr 10 16:29:44 2019
From: x|e @end|ng |rom y|hu|@n@me (Yihui Xie)
Date: Wed, 10 Apr 2019 09:29:44 -0500
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
 <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
 <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>
Message-ID: <CANROs4fDQv-FSZBZQ4EE1qnKTC=8P9oa=n6k8Ds7BnNSi6s7iw@mail.gmail.com>

Since it is "technically easy" to disable the best fit conversion and
the best fit is rarely good, how about providing an option for
code/package authors to disable it? I'm asking because this is one of
the most painful issues in packages that may need to source() code
containing UTF-8 characters that are not representable in the Windows
native encoding. Examples include knitr/rmarkdown and shiny. Basically
users won't be able to knit documents or run Shiny apps correctly when
the code contains characters that cannot be represented in the native
encoding.

Regards,
Yihui
--
https://yihui.name

On Wed, Apr 10, 2019 at 6:36 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 4/10/19 1:14 PM, Jeroen Ooms wrote:
> > On Wed, Apr 10, 2019 at 12:19 PM Tom?? Bo?il <borilt at gmail.com> wrote:
> >> Minimalistic example:
> >> Let's type "?" (LATIN SMALL LETTER R WITH CARON) in RGui console:
> >>> "?"
> >> [1] "r"
> >>
> >> Although the script is in UTF-8, the characters are replaced by
> >> "simplified" substitutes uncontrollably (depending on OS locale). The
> >> same goes with simply entering the code statements in R Console.
> >>
> >> The problem does not occur on OS with UTF-8 locale (Mac OS, Linux...)
> > I think this is a "feature" of win_iconv that is bundled with base R
> > on Windows (./src/extra/win_iconv). The character from your example is
> > not part of the latin1 (iso-8859-1) set, however, win-iconv seems to
> > do so anyway:
> >
> >> x <- "\U00159"
> >> print(x)
> > [1] "?"
> >> iconv(x, 'UTF-8', 'iso-8859-1')
> > [1] "r"
> >
> > On MacOS, iconv tells us this character cannot be represented as latin1:
> >
> >> x <- "\U00159"
> >> print(x)
> > [1] "?"
> >> iconv(x, 'UTF-8', 'iso-8859-1')
> > [1] NA
> >
> > I'm actually not sure why base-R needs win_iconv (but I'm not an
> > encoding expert at all). Perhaps we could try to unbundle it and use
> > the standard libiconv provided by the Rtools toolchain bundle to get
> > more consistent results.
>
> win_iconv just calls into Windows API to do the conversion, it is
> technically easy to disable the "best fit" conversion, but I think it
> won't be a good idea. In some cases, perhaps rare, the best fit is good,
> actually including the conversion from "?" to "r" which makes perfect
> sense. But more importantly, changing the behavior could affect users
> who expect the substitution to happen because it has been happening for
> many years, and it won't help others much.
>
> Tomas
>
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Apr 10 17:45:27 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 10 Apr 2019 11:45:27 -0400
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <CANROs4fDQv-FSZBZQ4EE1qnKTC=8P9oa=n6k8Ds7BnNSi6s7iw@mail.gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
 <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
 <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>
 <CANROs4fDQv-FSZBZQ4EE1qnKTC=8P9oa=n6k8Ds7BnNSi6s7iw@mail.gmail.com>
Message-ID: <306ab15e-75de-9d07-6b2d-601746f79123@gmail.com>

On 10/04/2019 10:29 a.m., Yihui Xie wrote:
> Since it is "technically easy" to disable the best fit conversion and
> the best fit is rarely good, how about providing an option for
> code/package authors to disable it? I'm asking because this is one of
> the most painful issues in packages that may need to source() code
> containing UTF-8 characters that are not representable in the Windows
> native encoding. Examples include knitr/rmarkdown and shiny. Basically
> users won't be able to knit documents or run Shiny apps correctly when
> the code contains characters that cannot be represented in the native
> encoding.

Wouldn't things be worse with it disabled than currently?  I'd expect 
the line containing the "?" to end up as NA instead of converting to "r".

Of course, it would be best to be able to declare source files as UTF-8 
and avoid any conversion at all, but as Tomas said, that's a lot harder.

Duncan Murdoch

> 
> Regards,
> Yihui
> --
> https://yihui.name
> 
> On Wed, Apr 10, 2019 at 6:36 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>
>> On 4/10/19 1:14 PM, Jeroen Ooms wrote:
>>> On Wed, Apr 10, 2019 at 12:19 PM Tom?? Bo?il <borilt at gmail.com> wrote:
>>>> Minimalistic example:
>>>> Let's type "?" (LATIN SMALL LETTER R WITH CARON) in RGui console:
>>>>> "?"
>>>> [1] "r"
>>>>
>>>> Although the script is in UTF-8, the characters are replaced by
>>>> "simplified" substitutes uncontrollably (depending on OS locale). The
>>>> same goes with simply entering the code statements in R Console.
>>>>
>>>> The problem does not occur on OS with UTF-8 locale (Mac OS, Linux...)
>>> I think this is a "feature" of win_iconv that is bundled with base R
>>> on Windows (./src/extra/win_iconv). The character from your example is
>>> not part of the latin1 (iso-8859-1) set, however, win-iconv seems to
>>> do so anyway:
>>>
>>>> x <- "\U00159"
>>>> print(x)
>>> [1] "?"
>>>> iconv(x, 'UTF-8', 'iso-8859-1')
>>> [1] "r"
>>>
>>> On MacOS, iconv tells us this character cannot be represented as latin1:
>>>
>>>> x <- "\U00159"
>>>> print(x)
>>> [1] "?"
>>>> iconv(x, 'UTF-8', 'iso-8859-1')
>>> [1] NA
>>>
>>> I'm actually not sure why base-R needs win_iconv (but I'm not an
>>> encoding expert at all). Perhaps we could try to unbundle it and use
>>> the standard libiconv provided by the Rtools toolchain bundle to get
>>> more consistent results.
>>
>> win_iconv just calls into Windows API to do the conversion, it is
>> technically easy to disable the "best fit" conversion, but I think it
>> won't be a good idea. In some cases, perhaps rare, the best fit is good,
>> actually including the conversion from "?" to "r" which makes perfect
>> sense. But more importantly, changing the behavior could affect users
>> who expect the substitution to happen because it has been happening for
>> many years, and it won't help others much.
>>
>> Tomas
>>
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From bor||t @end|ng |rom gm@||@com  Wed Apr 10 18:13:52 2019
From: bor||t @end|ng |rom gm@||@com (=?UTF-8?B?VG9tw6HFoSBCb8WZaWw=?=)
Date: Wed, 10 Apr 2019 18:13:52 +0200
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <23428aeb-0894-bbe6-bebb-1def4d0a9230@gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
 <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
 <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>
 <CAAg2TgJtxkQZhgL3KkovE2mKg_3XwDOZTb84+N_0iR1AX0kZ=g@mail.gmail.com>
 <bed5b18d-6fe1-2611-a856-fb9d5642ecd7@gmail.com>
 <CAAg2TgKKvaDO7+h4pmGhD87HdgtH5o620Sm7TwbbqxTb1dY6zg@mail.gmail.com>
 <68db5e12-e983-e818-49f6-2cdc87c365c2@gmail.com>
 <CAAg2TgKgKW7kCXx91H5qYTrCYgvpRd=gH6Y6HNe50B4Tw1sh1g@mail.gmail.com>
 <23428aeb-0894-bbe6-bebb-1def4d0a9230@gmail.com>
Message-ID: <CAAg2Tg+5bfui6xZE_C6UFr_6Ca+4BRJkHFBniJQwy2oGdByV_g@mail.gmail.com>

Yes, again in a script sourced by source(encoding = ...). But also by
typing it directly in R console.

Most of the time, I use RStudio as a front-end. For this experiment, I
also verified it in Rgui. In both front-ends, it behaves completely in
the same way.

An optional parameter to source() function which would translate all
UTF-8 characters in string literals to their "\Uxxxx" codes sounds as
a great idea (and I hope it would fix 99.9% of problems I have -
because that is the way I overcome these problems nowadays) - and the
same behaviour in command line...

Tomas

> What do you mean it is "converted before"? Under what context? Again a
> script sourced by source(encoding=) ?
>
> And, are you using Rgui as front-end?

>>   The only problem is that I
>> cannot simple use enc2utf8("?") - it is converted to "o" before
>> executing the function. Instead of that, I have to explicitly type
>> "\U00159" throughout my code.
On Wed, Apr 10, 2019 at 5:29 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 4/10/19 3:02 PM, Tom?? Bo?il wrote:
> > The thing is, I would rather prefer R (in that rare occasions where an
> > old function does not support anything but ANSI encoding) throwing  an
> > error:
> > "Unicode encoding not supported, please change the string in your
> > code" instead of silently converting some characters to different ones
> > without any warning.
> In principle it probably could be optional as Yihui Xie asks on R-devel,
> we will discuss that internally. If the Windows "best fit" is a big
> problem on its own, this is something that could be done quickly, if
> optional. We could turn into error only conversions that we have control
> of (inside R code), indeed, but that should be most.
> > I understand that there are some functions which are not
> > Unicode-compatible yet but according to the Stackoverflow discussion I
> > cited before, in many cases (90% or more?) everything works right with
> > Encoding("\U00159") == "UTF-8" (in my scripts, I have not found any
> > problem with explicit UTF-8 coding yet).
>
> Well there has been a lot of effort invested to make that possible, so
> that many internal string functions do not convert unnecessarily into
> UTF-8, mostly by Duncan Murdoch, but much more needs to be done and
> there is the problem with packages. Of course if you find a concrete R
> function that unnecessarily converts (source() is debatable, I know
> about it, so some other), you are welcome to report, I or someone can
> fix. A common problem is I/O (connections) and there the fix won't be
> easy, it would have to be re-designed. The problem is that when we have
> something typed "char *" inside R, it needs to be always in native
> encoding, any mix would lead to total chaos.
>
> The full solution would however only be fully switching to UTF-8
> internally on Windows (and then char * would always mean UTF-8), we have
> discussed this many times inside R Core (and many times before I
> joined), I am sure it will be discussed again at some point and we are
> aware of course of the problem. Please trust us it is hard to do - we
> know the code as we (collectively) have written it. People contributing
> to SO are users and package developers, not developers of the core. You
> can get more correct information from people on R-devel (package
> developers and sometimes core developers).
>
> >   The only problem is that I
> > cannot simple use enc2utf8("?") - it is converted to "o" before
> > executing the function. Instead of that, I have to explicitly type
> > "\U00159" throughout my code.
>
> What do you mean it is "converted before"? Under what context? Again a
> script sourced by source(encoding=) ?
>
> And, are you using Rgui as front-end?
>
> > In my lectures, I have Czech, Russian and English students and it is
> > also impossible to create a script that works for everyone. In fact, I
> > know that Czech "?" can be translated to my native (Czech) encoding. I
> > have just chosen the example as it is reproducible in English locale.
>
>
> > Originally, I had a problem with IPA characted (phonetic symbol) "?",
> > i.e. "\U00153". In Czech locale, it is translated to "o". In English,
> > it is not converted - it remains "?". But if I use "\U00153" in Czech
> > locale, nothing is converted and everything works right.
>
> Yes, the \u* sequence I hear is commonly used to represent UTF-8 string
> literals in something that is not UTF-8 itself. Note if you have a
> package, you can have R source files with UTF-8 encoded literal strings
> if you declare Encoding: UTF-8 in the DESCRIPTION file (see Writing R
> Extensions for details), even though sometimes people run into
> trouble/bugs as well.
>
> You probably know none of these problems exist on Linux nor macOS, where
> UTF-8 is the native encoding.
>
> Tomas
>
> >
> > Tomas
> >
> >
> >
> > On Wed, Apr 10, 2019 at 2:37 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >> On 4/10/19 2:06 PM, Tom?? Bo?il wrote:
> >>
> >> Thank you for the explanation but I just do not understand one thing - why it would need to  recreate the R from a scratch to work with Unicode internally?
> >>
> >> If I call the script with
> >> eval(parse("script.R", encoding = "UTF-8"))
> >> it works perfectly - it looks like R functions already support Unicode. When I type "\U00159", R also has no problem with that.
> >>
> >> Well there is support for unicode, but the problem is that at some point translation to native encoding is needed. The parser does not do that, nothing you call in your example script does it, but many other functions do. Note that you can use UTF-8 without problems as long as you only have characters that can be represented also in the current native encoding. So, if you run in a Czech locale, Czech characters in UTF-8 will work fine, just they will sometimes be translated to corresponding Czech characters in your native encoding.
> >>
> >> If you want to learn more about encodings in R, look at ?Encoding, Writing R Extensions, etc. In principle, ever R object representing a string has a flag whether the string is in UTF-8, in latin1, or in current native encoding. But C structures typed "char *" almost always are in current native encoding, any mixture would lead to chaos. Most functions operating on strings have to specially handle UTF-8, MBCS encodings, ASCII, etc. All of that would have to be rewritten. Many Windows API calls are still using the native encoding version (some can use UTF16-LE via conversion from UTF-8 or other encodings).
> >>
> >> In principle, it should work to have UTF-8 coded string constants in R programs, and definitely so if you use \uxxxx (see Writing R Extensions for details). But you should always run in a native encoding where these characters can be represented, otherwise it may or may not work, depending on which functions you call.
> >>
> >> Tomas
> >>
> >>
> >> Thanks,
> >> Tomas
> >>
> >> st 10. 4. 2019 v 13:52 odes?latel Tomas Kalibera <tomas.kalibera at gmail.com> napsal:
> >>> On 4/10/19 1:35 PM, Tom?? Bo?il wrote:
> >>>> Which users make their code depending on an automatic conversion which
> >>>> behaves differently in each Europe country, but only on Windows?
> >>> I meant the "best fit". The same R scripts for the same data sets would
> >>> be returning different results, people capture existing behavior without
> >>> necessarily knowing about it. Removing the "best fit" would not remove
> >>> the translation to native encoding, you would get NA or some escape
> >>> sequence/character code number instead of the "best fit" character.  It
> >>> would not solve the problem.
> >>>
> >>> The real problem is that the conversion to native encoding happens. This
> >>> question has been discussed many times before, but in short, it would
> >>> take probably many 1000s of hours of developer time to rewrite R to use
> >>> UTF-8 internally, but convert to UTF16-LE in all Windows API calls. It
> >>> will cause changes to documented behavior. What may not be obvious,
> >>> there is a problem with package code written in C/C++ that ignores
> >>> encoding flags (that is almost all native code in packages). That code
> >>> will stop working and there will be no way to test - because the input
> >>> data in the contributed examples/tests are ASCII.
> >>>
> >>> If Windows start supporting UTF-8 as native encoding, the fix will be a
> >>> lot easier (I hope ~100hours), and without the compatibility problems -
> >>> just users who would wish to use UTF-8 as native encoding will be
> >>> affected, and things will probably work for them even with poorly
> >>> written packages.
> >>>
> >>> Tomas
> >>>
> >>>
> >>>> If someone needs the explicit conversion, he can call the iconv() function.
> >>>>
> >>>> Much more people using R for text processing are frustrated they can
> >>>> code only in ASCII (0-255), even though their code is saved in
> >>>> Unicode.
> >>>>
> >>>> Tomas
> >>>>
> >>>>
> >>>>
> >>>>
> >>>> On Wed, Apr 10, 2019 at 1:26 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>> On 4/10/19 1:14 PM, Jeroen Ooms wrote:
> >>>>>> On Wed, Apr 10, 2019 at 12:19 PM Tom?? Bo?il <borilt at gmail.com> wrote:
> >>>>>>> Minimalistic example:
> >>>>>>> Let's type "?" (LATIN SMALL LETTER R WITH CARON) in RGui console:
> >>>>>>>> "?"
> >>>>>>> [1] "r"
> >>>>>>>
> >>>>>>> Although the script is in UTF-8, the characters are replaced by
> >>>>>>> "simplified" substitutes uncontrollably (depending on OS locale). The
> >>>>>>> same goes with simply entering the code statements in R Console.
> >>>>>>>
> >>>>>>> The problem does not occur on OS with UTF-8 locale (Mac OS, Linux...)
> >>>>>> I think this is a "feature" of win_iconv that is bundled with base R
> >>>>>> on Windows (./src/extra/win_iconv). The character from your example is
> >>>>>> not part of the latin1 (iso-8859-1) set, however, win-iconv seems to
> >>>>>> do so anyway:
> >>>>>>
> >>>>>>> x <- "\U00159"
> >>>>>>> print(x)
> >>>>>> [1] "?"
> >>>>>>> iconv(x, 'UTF-8', 'iso-8859-1')
> >>>>>> [1] "r"
> >>>>>>
> >>>>>> On MacOS, iconv tells us this character cannot be represented as latin1:
> >>>>>>
> >>>>>>> x <- "\U00159"
> >>>>>>> print(x)
> >>>>>> [1] "?"
> >>>>>>> iconv(x, 'UTF-8', 'iso-8859-1')
> >>>>>> [1] NA
> >>>>>>
> >>>>>> I'm actually not sure why base-R needs win_iconv (but I'm not an
> >>>>>> encoding expert at all). Perhaps we could try to unbundle it and use
> >>>>>> the standard libiconv provided by the Rtools toolchain bundle to get
> >>>>>> more consistent results.
> >>>>> win_iconv just calls into Windows API to do the conversion, it is
> >>>>> technically easy to disable the "best fit" conversion, but I think it
> >>>>> won't be a good idea. In some cases, perhaps rare, the best fit is good,
> >>>>> actually including the conversion from "?" to "r" which makes perfect
> >>>>> sense. But more importantly, changing the behavior could affect users
> >>>>> who expect the substitution to happen because it has been happening for
> >>>>> many years, and it won't help others much.
> >>>>>
> >>>>> Tomas
> >>>>>
> >>>>>> ______________________________________________
> >>>>>> R-devel at r-project.org mailing list
> >>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From jeroenoom@ @end|ng |rom gm@||@com  Wed Apr 10 18:32:19 2019
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Wed, 10 Apr 2019 18:32:19 +0200
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <306ab15e-75de-9d07-6b2d-601746f79123@gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
 <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
 <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>
 <CANROs4fDQv-FSZBZQ4EE1qnKTC=8P9oa=n6k8Ds7BnNSi6s7iw@mail.gmail.com>
 <306ab15e-75de-9d07-6b2d-601746f79123@gmail.com>
Message-ID: <CABFfbXuPxkHVbVhLhquUOKT7zwBHWTnGU8gxsvLNq71y8M5a9Q@mail.gmail.com>

On Wed, Apr 10, 2019 at 5:45 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 10/04/2019 10:29 a.m., Yihui Xie wrote:
> > Since it is "technically easy" to disable the best fit conversion and
> > the best fit is rarely good, how about providing an option for
> > code/package authors to disable it? I'm asking because this is one of
> > the most painful issues in packages that may need to source() code
> > containing UTF-8 characters that are not representable in the Windows
> > native encoding. Examples include knitr/rmarkdown and shiny. Basically
> > users won't be able to knit documents or run Shiny apps correctly when
> > the code contains characters that cannot be represented in the native
> > encoding.
>
> Wouldn't things be worse with it disabled than currently?  I'd expect
> the line containing the "?" to end up as NA instead of converting to "r".

I don't think it would be worse, because in this case R would not
implicitly convert strings to (best fit) latin1 on Windows, but
instead keep the (correct) string in its UTF-8 encoding. The NA only
appears if the user explicitly forces a conversion to latin1, which is
not the problem here I think.

The original problem that I can reproduce in RGui is that if you enter
 "?" in RGui, R opportunistically converts this to latin1, because it
can. However if you enter text which can definitely not be represented
in latin1, R encodes the string correctly in UTF-8 form.


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Apr 10 18:46:20 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 10 Apr 2019 12:46:20 -0400
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <CABFfbXuPxkHVbVhLhquUOKT7zwBHWTnGU8gxsvLNq71y8M5a9Q@mail.gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
 <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
 <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>
 <CANROs4fDQv-FSZBZQ4EE1qnKTC=8P9oa=n6k8Ds7BnNSi6s7iw@mail.gmail.com>
 <306ab15e-75de-9d07-6b2d-601746f79123@gmail.com>
 <CABFfbXuPxkHVbVhLhquUOKT7zwBHWTnGU8gxsvLNq71y8M5a9Q@mail.gmail.com>
Message-ID: <f8e88313-1d90-9ebb-3867-a071952531cb@gmail.com>

On 10/04/2019 12:32 p.m., Jeroen Ooms wrote:
> On Wed, Apr 10, 2019 at 5:45 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> On 10/04/2019 10:29 a.m., Yihui Xie wrote:
>>> Since it is "technically easy" to disable the best fit conversion and
>>> the best fit is rarely good, how about providing an option for
>>> code/package authors to disable it? I'm asking because this is one of
>>> the most painful issues in packages that may need to source() code
>>> containing UTF-8 characters that are not representable in the Windows
>>> native encoding. Examples include knitr/rmarkdown and shiny. Basically
>>> users won't be able to knit documents or run Shiny apps correctly when
>>> the code contains characters that cannot be represented in the native
>>> encoding.
>>
>> Wouldn't things be worse with it disabled than currently?  I'd expect
>> the line containing the "?" to end up as NA instead of converting to "r".
> 
> I don't think it would be worse, because in this case R would not
> implicitly convert strings to (best fit) latin1 on Windows, but
> instead keep the (correct) string in its UTF-8 encoding. The NA only
> appears if the user explicitly forces a conversion to latin1, which is
> not the problem here I think.
> 
> The original problem that I can reproduce in RGui is that if you enter
>   "?" in RGui, R opportunistically converts this to latin1, because it
> can. However if you enter text which can definitely not be represented
> in latin1, R encodes the string correctly in UTF-8 form.
> 

I think the pathways for text in RGui and text being sourced are 
different.  I agree fixing RGui in that way would make sense, but Yihui 
was talking about source().

Duncan Murdoch


From m|t @end|ng |rom gmx@u@  Thu Apr 11 01:59:44 2019
From: m|t @end|ng |rom gmx@u@ (Mikhail Titov)
Date: Wed, 10 Apr 2019 18:59:44 -0500
Subject: [Rd] Parsing code with newlines
In-Reply-To: <48eaf7f6-3de0-bf4b-71be-50841711b656@gmail.com> (Tomas
 Kalibera's message of "Wed, 10 Apr 2019 12:06:01 +0200")
References: <a564fafa0808040550j13fd5097q804fc9549cd4ad55@mail.gmail.com>
 <alpine.LFD.1.10.0808041402500.17316@gannet.stats.ox.ac.uk>
 <9q0r2ahx9kf.fsf@gmx.us>
 <48eaf7f6-3de0-bf4b-71be-50841711b656@gmail.com>
Message-ID: <9q0mukxxvgv.fsf@gmx.us>

On Wed, Apr 10, 2019 at  5:06 AM, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> This is my first post here. I came across the very same problem.
>> It can be reproduced within modified tests/Embedding/RParseEval.c
>
> Please check https://www.r-project.org/posting-guide.html and update
> your post if you still need to get help here - from your current post
> I am not sure what you did, what was the error you got and from which
> tool, why you think the error was a result of something not working
> correctly/as documented, etc. The original post with the same subject
> you are probably referring to had the same problem.

The original post is linked via e-mail headers however it goes back a
decade. It shows up linked as a thread alright in Gnus. Hence I thought
it would be alright to jump straight to the matter.

Here is the link to original discussion
https://stat.ethz.ch/pipermail/r-devel/2008-August/050332.html

At this point, I would like to report two bugs in "Writing R Extensions"
documentation. From that document it is not clear why line feeds (0x0A)
have to be removed from the input string to be parsed. Also nowhere in
that document it mentions R_TopLevelExec if parsing needs to be done in
the outer context. That is not when our C function is called from R, but
when we are trying to parse R code in C directly outside of main loop.
These are big show stoppers for newcomers.

The barely modified test code I had in my previous post, does not parse
what would seem a legit sample string "\r\n ls()". However, it does
parse alright "\n ls()". Nowhere in the docs the intolerance to line
feeds is mentioned. It is reproducible from R console as well.

,----[ R console session ]
| > parse(text="\r\n ls()")
| Error in parse(text = "\r\n ls()") : <text>:1:1: unexpected input
| 1:
|     ^
| >
`----

Another problem with the aforementioned documentation is parsing
erroneous expressions like "deadbeef<-function(,bad){}" in top level
context. Instead of returning an error from parsing, it crashes
(with R_suicide) unless the call is wrapped in R_TopLevelExec.

> Please also note that "tests" (tests/Embedding/RParseEval.c) are not
> examples - if they do not catch R errors in some cases that is
> perfectly ok, they also may use internal API that is indeed not
> documented e.g. in Writing R Extensions.

Where would be a good example on top level context parsing then? I have
no problems skipping error checks and/or with the use of undocumented
functions. However I would rather prefer to avoid major unexpected
crashes. That example does NOT use any of the undocumented API and therefore is
misleading. I believe it SHOULD include R_TopLevelExec and that function
SHOULD be in the docs.

> Note Writing R Extensions has a section on embedding R and on cleanup
> handlers.

I have no problems with the rest of the document on embedding and clean
up in general.

>> Actually this example has another issue, namely it doesn't wrap
>> everything in R_ToplevelExec . This is a major show stopper for
>> newcomers as that function is barely mentioned anywhere and longjmp into
>> terminated setuploop function followed by R_suicide look like a mystery.
>>
>> Error: bad value
>> Fatal error: unable to initialize the JIT
>>
>>
>> That aside, here is the code with newlines that fails to parse. I hope
>> it will paste alright here.
>>
>>
>> #include "embeddedRCall.h"
>> #include <R_ext/Parse.h>
>>
>> int
>> main(int argc, char *argv[])
>> {
>>      SEXP e, tmp;
>>      int hadError;
>>      ParseStatus status;
>>
>>      init_R(argc, argv);
>>
>>      PROTECT(tmp = mkString("\n\r ls()"));
>>      PROTECT(e = R_ParseVector(tmp, 1, &status, R_NilValue));
>>      if (status != PARSE_OK)
>>      {
>>          printf("boo boo\n");
>>      }
>>      else
>>      {
>>          PrintValue(e);
>>          R_tryEval(VECTOR_ELT(e,0), R_GlobalEnv, &hadError);
>>      }
>>      UNPROTECT(2);
>>
>>      end_R();
>>      return(0);
>> }

--
Mikhail


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr 11 08:10:53 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 11 Apr 2019 08:10:53 +0200
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <CAAg2Tg+5bfui6xZE_C6UFr_6Ca+4BRJkHFBniJQwy2oGdByV_g@mail.gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
 <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
 <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>
 <CAAg2TgJtxkQZhgL3KkovE2mKg_3XwDOZTb84+N_0iR1AX0kZ=g@mail.gmail.com>
 <bed5b18d-6fe1-2611-a856-fb9d5642ecd7@gmail.com>
 <CAAg2TgKKvaDO7+h4pmGhD87HdgtH5o620Sm7TwbbqxTb1dY6zg@mail.gmail.com>
 <68db5e12-e983-e818-49f6-2cdc87c365c2@gmail.com>
 <CAAg2TgKgKW7kCXx91H5qYTrCYgvpRd=gH6Y6HNe50B4Tw1sh1g@mail.gmail.com>
 <23428aeb-0894-bbe6-bebb-1def4d0a9230@gmail.com>
 <CAAg2Tg+5bfui6xZE_C6UFr_6Ca+4BRJkHFBniJQwy2oGdByV_g@mail.gmail.com>
Message-ID: <afeb36f5-c34d-c96e-047d-d3c608c651ae@gmail.com>

On 4/10/19 6:13 PM, Tom?? Bo?il wrote:

> An optional parameter to source() function which would translate all
> UTF-8 characters in string literals to their "\Uxxxx" codes sounds as
> a great idea (and I hope it would fix 99.9% of problems I have -
> because that is the way I overcome these problems nowadays) - and the
> same behaviour in command line...

I was not suggesting to convert to \Uxxxx in source(). Some users do it 
in their programs by hand or an external utility. Source() in principle 
could be made work similarly to eval(parse(file,encoding=)) with respect 
to encodings, via other means, we will consider that but there are many 
remaining places where the conversion happens - a trivial one is that 
currently you cannot print the result of the parse() from your example 
properly. Maybe you don't trigger such problems in your scripts in 
obvious ways, but as I said before, if you want to work reliably with 
characters not representable in current native encoding, in current or 
near version of R, use Linux or macOS.

Tomas

>
> Tomas


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr 11 08:25:46 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 11 Apr 2019 08:25:46 +0200
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <CABFfbXuPxkHVbVhLhquUOKT7zwBHWTnGU8gxsvLNq71y8M5a9Q@mail.gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
 <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
 <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>
 <CANROs4fDQv-FSZBZQ4EE1qnKTC=8P9oa=n6k8Ds7BnNSi6s7iw@mail.gmail.com>
 <306ab15e-75de-9d07-6b2d-601746f79123@gmail.com>
 <CABFfbXuPxkHVbVhLhquUOKT7zwBHWTnGU8gxsvLNq71y8M5a9Q@mail.gmail.com>
Message-ID: <f35caf63-1aff-2fdf-465e-7ca7dc8793dd@gmail.com>

On 4/10/19 6:32 PM, Jeroen Ooms wrote:
> On Wed, Apr 10, 2019 at 5:45 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>> On 10/04/2019 10:29 a.m., Yihui Xie wrote:
>>> Since it is "technically easy" to disable the best fit conversion and
>>> the best fit is rarely good, how about providing an option for
>>> code/package authors to disable it? I'm asking because this is one of
>>> the most painful issues in packages that may need to source() code
>>> containing UTF-8 characters that are not representable in the Windows
>>> native encoding. Examples include knitr/rmarkdown and shiny. Basically
>>> users won't be able to knit documents or run Shiny apps correctly when
>>> the code contains characters that cannot be represented in the native
>>> encoding.
>> Wouldn't things be worse with it disabled than currently?  I'd expect
>> the line containing the "?" to end up as NA instead of converting to "r".
> I don't think it would be worse, because in this case R would not
> implicitly convert strings to (best fit) latin1 on Windows, but
> instead keep the (correct) string in its UTF-8 encoding. The NA only
> appears if the user explicitly forces a conversion to latin1, which is
> not the problem here I think.
>
> The original problem that I can reproduce in RGui is that if you enter
>   "?" in RGui, R opportunistically converts this to latin1, because it
> can. However if you enter text which can definitely not be represented
> in latin1, R encodes the string correctly in UTF-8 form.

Rgui is a "Windows Unicode" application (uses UTF16-LE) but it needs to 
convert the input to native encoding before passing it to R, which is 
based on locales. However, that string is passed by R to the parser, 
which Rgui takes advantage of and converts non-representable characters 
to their \uxxxx escapes which are understood by the parser. Using this 
trick, Unicode characters can get to the parser from Rgui (but of course 
then still in risk of conversion later when the program runs). Rgui only 
escapes characters that cannot be represented, unfortunately, the 
standard C99 API for that implemented on Windows does the best fit. This 
could be fixed in Rgui by calling a special Windows API function and 
could be done, but with the mentioned risk that it would break existing 
uses that capture the existing behavior.

This is the only place I know of where removing best fit would lead to 
correct representation of UTF-8 characters. Other places will give NA, 
some other escapes, code will fail to parse (e.g. "incomplete string", 
one can get that easily with source()).

Tomas


From bor||t @end|ng |rom gm@||@com  Thu Apr 11 08:53:24 2019
From: bor||t @end|ng |rom gm@||@com (=?UTF-8?B?VG9tw6HFoSBCb8WZaWw=?=)
Date: Thu, 11 Apr 2019 08:53:24 +0200
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <f35caf63-1aff-2fdf-465e-7ca7dc8793dd@gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
 <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
 <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>
 <CANROs4fDQv-FSZBZQ4EE1qnKTC=8P9oa=n6k8Ds7BnNSi6s7iw@mail.gmail.com>
 <306ab15e-75de-9d07-6b2d-601746f79123@gmail.com>
 <CABFfbXuPxkHVbVhLhquUOKT7zwBHWTnGU8gxsvLNq71y8M5a9Q@mail.gmail.com>
 <f35caf63-1aff-2fdf-465e-7ca7dc8793dd@gmail.com>
Message-ID: <CAAg2TgJ6+v=NsGK61A+B4g-1ccMcwvuC14at7ZPKx0+05n=Qyg@mail.gmail.com>

For me, this would be a perfect solution.

I.e., do not use the ?best? fit and leave it to user?s competence:
a) in some functions, utf-8 works
b) in others -> error is thrown (e.g., incomplete string, NA, etc.)
=> user has to change the code with his/her intentional ?best fit string
literal substitute? or use another function that can handle utf-8.

Making an R code working right only on some platforms / trying to keep a
back-compatibility meaning ?the code does not do what you want and the
behaviour differs depending on each every locale but at least, it does not
throw an error? is generally not a good idea - it is dangerous. Users /
coders should know that there is something wrong with their strings and
some characters are ?eaten alive?.

Tomas

?t 11. 4. 2019 v 8:26 odes?latel Tomas Kalibera <tomas.kalibera at gmail.com>
napsal:

> On 4/10/19 6:32 PM, Jeroen Ooms wrote:
> > On Wed, Apr 10, 2019 at 5:45 PM Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
> >> On 10/04/2019 10:29 a.m., Yihui Xie wrote:
> >>> Since it is "technically easy" to disable the best fit conversion and
> >>> the best fit is rarely good, how about providing an option for
> >>> code/package authors to disable it? I'm asking because this is one of
> >>> the most painful issues in packages that may need to source() code
> >>> containing UTF-8 characters that are not representable in the Windows
> >>> native encoding. Examples include knitr/rmarkdown and shiny. Basically
> >>> users won't be able to knit documents or run Shiny apps correctly when
> >>> the code contains characters that cannot be represented in the native
> >>> encoding.
> >> Wouldn't things be worse with it disabled than currently?  I'd expect
> >> the line containing the "?" to end up as NA instead of converting to
> "r".
> > I don't think it would be worse, because in this case R would not
> > implicitly convert strings to (best fit) latin1 on Windows, but
> > instead keep the (correct) string in its UTF-8 encoding. The NA only
> > appears if the user explicitly forces a conversion to latin1, which is
> > not the problem here I think.
> >
> > The original problem that I can reproduce in RGui is that if you enter
> >   "?" in RGui, R opportunistically converts this to latin1, because it
> > can. However if you enter text which can definitely not be represented
> > in latin1, R encodes the string correctly in UTF-8 form.
>
> Rgui is a "Windows Unicode" application (uses UTF16-LE) but it needs to
> convert the input to native encoding before passing it to R, which is
> based on locales. However, that string is passed by R to the parser,
> which Rgui takes advantage of and converts non-representable characters
> to their \uxxxx escapes which are understood by the parser. Using this
> trick, Unicode characters can get to the parser from Rgui (but of course
> then still in risk of conversion later when the program runs). Rgui only
> escapes characters that cannot be represented, unfortunately, the
> standard C99 API for that implemented on Windows does the best fit. This
> could be fixed in Rgui by calling a special Windows API function and
> could be done, but with the mentioned risk that it would break existing
> uses that capture the existing behavior.
>
> This is the only place I know of where removing best fit would lead to
> correct representation of UTF-8 characters. Other places will give NA,
> some other escapes, code will fail to parse (e.g. "incomplete string",
> one can get that easily with source()).
>
> Tomas
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From bor||t @end|ng |rom gm@||@com  Thu Apr 11 09:10:22 2019
From: bor||t @end|ng |rom gm@||@com (=?UTF-8?B?VG9tw6HFoSBCb8WZaWw=?=)
Date: Thu, 11 Apr 2019 09:10:22 +0200
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <CAAg2TgJ6+v=NsGK61A+B4g-1ccMcwvuC14at7ZPKx0+05n=Qyg@mail.gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
 <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
 <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>
 <CANROs4fDQv-FSZBZQ4EE1qnKTC=8P9oa=n6k8Ds7BnNSi6s7iw@mail.gmail.com>
 <306ab15e-75de-9d07-6b2d-601746f79123@gmail.com>
 <CABFfbXuPxkHVbVhLhquUOKT7zwBHWTnGU8gxsvLNq71y8M5a9Q@mail.gmail.com>
 <f35caf63-1aff-2fdf-465e-7ca7dc8793dd@gmail.com>
 <CAAg2TgJ6+v=NsGK61A+B4g-1ccMcwvuC14at7ZPKx0+05n=Qyg@mail.gmail.com>
Message-ID: <CAAg2TgKzae6B5G7Ow78Pc89q=tfuAZu8sKC9MF+aCCy_tX8vRw@mail.gmail.com>

Or, if this cannot be done easily, please, disable the "utf-8" value
in source(..., ) function on Windows R.
source(..., encoding = "utf-8")
-> error: "utf-8" does not work right on Windows.
-> (or, at least) warning: "utf-8" is handled by "best fit" on Windows
and some characters in string literals may be automatically changed.

Because, at this state, the UTF-8 encoding of R source files on
Windows is a fake Unicode as it can handle only 256 different ANSI
characters in reality.

Thanks,
Tomas


On Thu, Apr 11, 2019 at 8:53 AM Tom?? Bo?il <borilt at gmail.com> wrote:
>
> For me, this would be a perfect solution.
>
> I.e., do not use the ?best? fit and leave it to user?s competence:
> a) in some functions, utf-8 works
> b) in others -> error is thrown (e.g., incomplete string, NA, etc.)
> => user has to change the code with his/her intentional ?best fit string literal substitute? or use another function that can handle utf-8.
>
> Making an R code working right only on some platforms / trying to keep a back-compatibility meaning ?the code does not do what you want and the behaviour differs depending on each every locale but at least, it does not throw an error? is generally not a good idea - it is dangerous. Users / coders should know that there is something wrong with their strings and some characters are ?eaten alive?.
>
> Tomas
>
> ?t 11. 4. 2019 v 8:26 odes?latel Tomas Kalibera <tomas.kalibera at gmail.com> napsal:
>>
>> On 4/10/19 6:32 PM, Jeroen Ooms wrote:
>> > On Wed, Apr 10, 2019 at 5:45 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>> >> On 10/04/2019 10:29 a.m., Yihui Xie wrote:
>> >>> Since it is "technically easy" to disable the best fit conversion and
>> >>> the best fit is rarely good, how about providing an option for
>> >>> code/package authors to disable it? I'm asking because this is one of
>> >>> the most painful issues in packages that may need to source() code
>> >>> containing UTF-8 characters that are not representable in the Windows
>> >>> native encoding. Examples include knitr/rmarkdown and shiny. Basically
>> >>> users won't be able to knit documents or run Shiny apps correctly when
>> >>> the code contains characters that cannot be represented in the native
>> >>> encoding.
>> >> Wouldn't things be worse with it disabled than currently?  I'd expect
>> >> the line containing the "?" to end up as NA instead of converting to "r".
>> > I don't think it would be worse, because in this case R would not
>> > implicitly convert strings to (best fit) latin1 on Windows, but
>> > instead keep the (correct) string in its UTF-8 encoding. The NA only
>> > appears if the user explicitly forces a conversion to latin1, which is
>> > not the problem here I think.
>> >
>> > The original problem that I can reproduce in RGui is that if you enter
>> >   "?" in RGui, R opportunistically converts this to latin1, because it
>> > can. However if you enter text which can definitely not be represented
>> > in latin1, R encodes the string correctly in UTF-8 form.
>>
>> Rgui is a "Windows Unicode" application (uses UTF16-LE) but it needs to
>> convert the input to native encoding before passing it to R, which is
>> based on locales. However, that string is passed by R to the parser,
>> which Rgui takes advantage of and converts non-representable characters
>> to their \uxxxx escapes which are understood by the parser. Using this
>> trick, Unicode characters can get to the parser from Rgui (but of course
>> then still in risk of conversion later when the program runs). Rgui only
>> escapes characters that cannot be represented, unfortunately, the
>> standard C99 API for that implemented on Windows does the best fit. This
>> could be fixed in Rgui by calling a special Windows API function and
>> could be done, but with the mentioned risk that it would break existing
>> uses that capture the existing behavior.
>>
>> This is the only place I know of where removing best fit would lead to
>> correct representation of UTF-8 characters. Other places will give NA,
>> some other escapes, code will fail to parse (e.g. "incomplete string",
>> one can get that easily with source()).
>>
>> Tomas
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr 11 09:54:25 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 11 Apr 2019 09:54:25 +0200
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <CAAg2TgKzae6B5G7Ow78Pc89q=tfuAZu8sKC9MF+aCCy_tX8vRw@mail.gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
 <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
 <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>
 <CANROs4fDQv-FSZBZQ4EE1qnKTC=8P9oa=n6k8Ds7BnNSi6s7iw@mail.gmail.com>
 <306ab15e-75de-9d07-6b2d-601746f79123@gmail.com>
 <CABFfbXuPxkHVbVhLhquUOKT7zwBHWTnGU8gxsvLNq71y8M5a9Q@mail.gmail.com>
 <f35caf63-1aff-2fdf-465e-7ca7dc8793dd@gmail.com>
 <CAAg2TgJ6+v=NsGK61A+B4g-1ccMcwvuC14at7ZPKx0+05n=Qyg@mail.gmail.com>
 <CAAg2TgKzae6B5G7Ow78Pc89q=tfuAZu8sKC9MF+aCCy_tX8vRw@mail.gmail.com>
Message-ID: <2f5f95e2-5b85-5488-8d66-62328440a1d9@gmail.com>

On 4/11/19 9:10 AM, Tom?? Bo?il wrote:
> Or, if this cannot be done easily, please, disable the "utf-8" value
> in source(..., ) function on Windows R.
> source(..., encoding = "utf-8")
> -> error: "utf-8" does not work right on Windows.
> -> (or, at least) warning: "utf-8" is handled by "best fit" on Windows
> and some characters in string literals may be automatically changed.
>
> Because, at this state, the UTF-8 encoding of R source files on
> Windows is a fake Unicode as it can handle only 256 different ANSI
> characters in reality.

This is not a fair statement. source(,encoding="UTF-8") works as 
documented. It translates from (full) UTF-8 to current native encoding, 
which is documented. I believe the authors who made these design 
decisions over a decade ago, under different circumstances, and 
carefully implemented the code, tested, and documented for you to use 
for free, deserve to be addressed with some respect. It is not their 
responsibility to read the documentation for you, and if you had read 
and understood it, you would not have used source(,encoding="UTF-8") 
with characters not representable in current native encoding on Windows. 
The authors should not be blamed for that the design _today_ does not 
seem perfect for _todays_ systems (and how could they have guessed at 
that time Windows will still not support UTF-8 as native encoding today).

Tomas
> Thanks,
> Tomas
>
>
> On Thu, Apr 11, 2019 at 8:53 AM Tom?? Bo?il <borilt at gmail.com> wrote:
>> For me, this would be a perfect solution.
>>
>> I.e., do not use the ?best? fit and leave it to user?s competence:
>> a) in some functions, utf-8 works
>> b) in others -> error is thrown (e.g., incomplete string, NA, etc.)
>> => user has to change the code with his/her intentional ?best fit string literal substitute? or use another function that can handle utf-8.
>>
>> Making an R code working right only on some platforms / trying to keep a back-compatibility meaning ?the code does not do what you want and the behaviour differs depending on each every locale but at least, it does not throw an error? is generally not a good idea - it is dangerous. Users / coders should know that there is something wrong with their strings and some characters are ?eaten alive?.
>>
>> Tomas
>>
>> ?t 11. 4. 2019 v 8:26 odes?latel Tomas Kalibera <tomas.kalibera at gmail.com> napsal:
>>> On 4/10/19 6:32 PM, Jeroen Ooms wrote:
>>>> On Wed, Apr 10, 2019 at 5:45 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>> On 10/04/2019 10:29 a.m., Yihui Xie wrote:
>>>>>> Since it is "technically easy" to disable the best fit conversion and
>>>>>> the best fit is rarely good, how about providing an option for
>>>>>> code/package authors to disable it? I'm asking because this is one of
>>>>>> the most painful issues in packages that may need to source() code
>>>>>> containing UTF-8 characters that are not representable in the Windows
>>>>>> native encoding. Examples include knitr/rmarkdown and shiny. Basically
>>>>>> users won't be able to knit documents or run Shiny apps correctly when
>>>>>> the code contains characters that cannot be represented in the native
>>>>>> encoding.
>>>>> Wouldn't things be worse with it disabled than currently?  I'd expect
>>>>> the line containing the "?" to end up as NA instead of converting to "r".
>>>> I don't think it would be worse, because in this case R would not
>>>> implicitly convert strings to (best fit) latin1 on Windows, but
>>>> instead keep the (correct) string in its UTF-8 encoding. The NA only
>>>> appears if the user explicitly forces a conversion to latin1, which is
>>>> not the problem here I think.
>>>>
>>>> The original problem that I can reproduce in RGui is that if you enter
>>>>    "?" in RGui, R opportunistically converts this to latin1, because it
>>>> can. However if you enter text which can definitely not be represented
>>>> in latin1, R encodes the string correctly in UTF-8 form.
>>> Rgui is a "Windows Unicode" application (uses UTF16-LE) but it needs to
>>> convert the input to native encoding before passing it to R, which is
>>> based on locales. However, that string is passed by R to the parser,
>>> which Rgui takes advantage of and converts non-representable characters
>>> to their \uxxxx escapes which are understood by the parser. Using this
>>> trick, Unicode characters can get to the parser from Rgui (but of course
>>> then still in risk of conversion later when the program runs). Rgui only
>>> escapes characters that cannot be represented, unfortunately, the
>>> standard C99 API for that implemented on Windows does the best fit. This
>>> could be fixed in Rgui by calling a special Windows API function and
>>> could be done, but with the mentioned risk that it would break existing
>>> uses that capture the existing behavior.
>>>
>>> This is the only place I know of where removing best fit would lead to
>>> correct representation of UTF-8 characters. Other places will give NA,
>>> some other escapes, code will fail to parse (e.g. "incomplete string",
>>> one can get that easily with source()).
>>>
>>> Tomas
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel


From bor||t @end|ng |rom gm@||@com  Thu Apr 11 10:10:38 2019
From: bor||t @end|ng |rom gm@||@com (=?UTF-8?B?VG9tw6HFoSBCb8WZaWw=?=)
Date: Thu, 11 Apr 2019 10:10:38 +0200
Subject: [Rd] 
 R 3.5.3 and 3.6.0 alpha Windows bug: UTF-8 characters in code
 are simplified to wrong ones
In-Reply-To: <2f5f95e2-5b85-5488-8d66-62328440a1d9@gmail.com>
References: <CAAg2TgJboQWc3QAeR_snGEMxkmaTbkf5B331qtkvgn_BO2w1nA@mail.gmail.com>
 <CABFfbXuciaNVbyufSjXxAXs4V2jbZZxsbaChEBmzaPWOzCc6yg@mail.gmail.com>
 <8a6c13fb-ce7d-eba9-0a93-44c52a859e75@gmail.com>
 <CANROs4fDQv-FSZBZQ4EE1qnKTC=8P9oa=n6k8Ds7BnNSi6s7iw@mail.gmail.com>
 <306ab15e-75de-9d07-6b2d-601746f79123@gmail.com>
 <CABFfbXuPxkHVbVhLhquUOKT7zwBHWTnGU8gxsvLNq71y8M5a9Q@mail.gmail.com>
 <f35caf63-1aff-2fdf-465e-7ca7dc8793dd@gmail.com>
 <CAAg2TgJ6+v=NsGK61A+B4g-1ccMcwvuC14at7ZPKx0+05n=Qyg@mail.gmail.com>
 <CAAg2TgKzae6B5G7Ow78Pc89q=tfuAZu8sKC9MF+aCCy_tX8vRw@mail.gmail.com>
 <2f5f95e2-5b85-5488-8d66-62328440a1d9@gmail.com>
Message-ID: <CAAg2Tg+j1PTyNeBEMKYCOZ-_fu=ovL5xDJ1trF9hzAx9WRCYmA@mail.gmail.com>

I do not blame anybody and I do have a huge respect to all authors of
R. Actually, I like R very much and I would like to thank to everyone
who contributes to it. I use R regularly in my work (moved from Java,
C# and Matlab), I have created a package rPraat for phonetic analyses
and I think R is a very well designed language which will survive
decades. I am trying to bring new users (my students at non-technical
University) to use programming for their everyday problems
(statistics, phonetic analyses, text processing) and they enjoy R. I
am really positive in this (it is hard to express emotions in e-mails
without using emoticons in every sentence). And that is why I would
like it have even more perfect.

I only suggest to add one line of code (metaphorically) in source()
function in R for Windows to make it even better and to warn all users
who do not read a whole documentation for each function thoroughly and
carefully.

Tomas


On Thu, Apr 11, 2019 at 9:54 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 4/11/19 9:10 AM, Tom?? Bo?il wrote:
> > Or, if this cannot be done easily, please, disable the "utf-8" value
> > in source(..., ) function on Windows R.
> > source(..., encoding = "utf-8")
> > -> error: "utf-8" does not work right on Windows.
> > -> (or, at least) warning: "utf-8" is handled by "best fit" on Windows
> > and some characters in string literals may be automatically changed.
> >
> > Because, at this state, the UTF-8 encoding of R source files on
> > Windows is a fake Unicode as it can handle only 256 different ANSI
> > characters in reality.
>
> This is not a fair statement. source(,encoding="UTF-8") works as
> documented. It translates from (full) UTF-8 to current native encoding,
> which is documented. I believe the authors who made these design
> decisions over a decade ago, under different circumstances, and
> carefully implemented the code, tested, and documented for you to use
> for free, deserve to be addressed with some respect. It is not their
> responsibility to read the documentation for you, and if you had read
> and understood it, you would not have used source(,encoding="UTF-8")
> with characters not representable in current native encoding on Windows.
> The authors should not be blamed for that the design _today_ does not
> seem perfect for _todays_ systems (and how could they have guessed at
> that time Windows will still not support UTF-8 as native encoding today).
>
> Tomas
> > Thanks,
> > Tomas
> >
> >
> > On Thu, Apr 11, 2019 at 8:53 AM Tom?? Bo?il <borilt at gmail.com> wrote:
> >> For me, this would be a perfect solution.
> >>
> >> I.e., do not use the ?best? fit and leave it to user?s competence:
> >> a) in some functions, utf-8 works
> >> b) in others -> error is thrown (e.g., incomplete string, NA, etc.)
> >> => user has to change the code with his/her intentional ?best fit string literal substitute? or use another function that can handle utf-8.
> >>
> >> Making an R code working right only on some platforms / trying to keep a back-compatibility meaning ?the code does not do what you want and the behaviour differs depending on each every locale but at least, it does not throw an error? is generally not a good idea - it is dangerous. Users / coders should know that there is something wrong with their strings and some characters are ?eaten alive?.
> >>
> >> Tomas
> >>
> >> ?t 11. 4. 2019 v 8:26 odes?latel Tomas Kalibera <tomas.kalibera at gmail.com> napsal:
> >>> On 4/10/19 6:32 PM, Jeroen Ooms wrote:
> >>>> On Wed, Apr 10, 2019 at 5:45 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> >>>>> On 10/04/2019 10:29 a.m., Yihui Xie wrote:
> >>>>>> Since it is "technically easy" to disable the best fit conversion and
> >>>>>> the best fit is rarely good, how about providing an option for
> >>>>>> code/package authors to disable it? I'm asking because this is one of
> >>>>>> the most painful issues in packages that may need to source() code
> >>>>>> containing UTF-8 characters that are not representable in the Windows
> >>>>>> native encoding. Examples include knitr/rmarkdown and shiny. Basically
> >>>>>> users won't be able to knit documents or run Shiny apps correctly when
> >>>>>> the code contains characters that cannot be represented in the native
> >>>>>> encoding.
> >>>>> Wouldn't things be worse with it disabled than currently?  I'd expect
> >>>>> the line containing the "?" to end up as NA instead of converting to "r".
> >>>> I don't think it would be worse, because in this case R would not
> >>>> implicitly convert strings to (best fit) latin1 on Windows, but
> >>>> instead keep the (correct) string in its UTF-8 encoding. The NA only
> >>>> appears if the user explicitly forces a conversion to latin1, which is
> >>>> not the problem here I think.
> >>>>
> >>>> The original problem that I can reproduce in RGui is that if you enter
> >>>>    "?" in RGui, R opportunistically converts this to latin1, because it
> >>>> can. However if you enter text which can definitely not be represented
> >>>> in latin1, R encodes the string correctly in UTF-8 form.
> >>> Rgui is a "Windows Unicode" application (uses UTF16-LE) but it needs to
> >>> convert the input to native encoding before passing it to R, which is
> >>> based on locales. However, that string is passed by R to the parser,
> >>> which Rgui takes advantage of and converts non-representable characters
> >>> to their \uxxxx escapes which are understood by the parser. Using this
> >>> trick, Unicode characters can get to the parser from Rgui (but of course
> >>> then still in risk of conversion later when the program runs). Rgui only
> >>> escapes characters that cannot be represented, unfortunately, the
> >>> standard C99 API for that implemented on Windows does the best fit. This
> >>> could be fixed in Rgui by calling a special Windows API function and
> >>> could be done, but with the mentioned risk that it would break existing
> >>> uses that capture the existing behavior.
> >>>
> >>> This is the only place I know of where removing best fit would lead to
> >>> correct representation of UTF-8 characters. Other places will give NA,
> >>> some other escapes, code will fail to parse (e.g. "incomplete string",
> >>> one can get that easily with source()).
> >>>
> >>> Tomas
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From pd@|gd @end|ng |rom gm@||@com  Thu Apr 11 10:57:56 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Thu, 11 Apr 2019 10:57:56 +0200
Subject: [Rd] Parsing code with newlines
In-Reply-To: <9q0mukxxvgv.fsf@gmx.us>
References: <a564fafa0808040550j13fd5097q804fc9549cd4ad55@mail.gmail.com>
 <alpine.LFD.1.10.0808041402500.17316@gannet.stats.ox.ac.uk>
 <9q0r2ahx9kf.fsf@gmx.us> <48eaf7f6-3de0-bf4b-71be-50841711b656@gmail.com>
 <9q0mukxxvgv.fsf@gmx.us>
Message-ID: <2F6D5464-63E8-4A6B-9517-CE4E70C53480@gmail.com>

?\r" is CR not LF. On systems that use CRLF as newline, the combination should be "\n" at the C (or R) level. 

However, I suppose there is no particular reason not to treat CR as whitespace, as does happen with FF and HT.

-pd

> On 11 Apr 2019, at 01:59 , Mikhail Titov <mlt at gmx.us> wrote:
> 
> The barely modified test code I had in my previous post, does not parse
> what would seem a legit sample string "\r\n ls()". However, it does
> parse alright "\n ls()". Nowhere in the docs the intolerance to line
> feeds is mentioned. It is reproducible from R console as well.
> 
> ,----[ R console session ]
> | > parse(text="\r\n ls()")
> | Error in parse(text = "\r\n ls()") : <text>:1:1: unexpected input
> | 1:
> |     ^
> | >
> `----
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu Apr 11 22:06:47 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Thu, 11 Apr 2019 13:06:47 -0700
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
Message-ID: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>

ISSUE:
Using *forks* for parallel processing in R is not always safe.  The
`parallel::mclapply()` function uses forked processes to parallelize.
One example where it has been confirmed that forked processing causes
problems is when running R via RStudio.  It is recommended to use
PSOCK clusters (`parallel::makeCluster()`) rather than *forked*
processes when running R from RStudio (
https://github.com/rstudio/rstudio/issues/2597#issuecomment-482187011).

AFAIK, it is not straightforward to disable forked processing in R.

One could set environment variable `MC_CORES=1` which will set R
option `mc.cores=1` when the parallel package is loaded.  Since
`mc.cores = getOption("mc.cores", 2L)` is the default for
`parallel::mclapply()`, this will cause `mclapply()` to fall back to
`lapply()` avoiding _forked_ processing.  However, this does not work
when the code specifies argument `mc.cores`, e.g. `mclapply(...,
mc.cores = detectCores())`.


SUGGESTION:
Introduce environment variable `R_ENABLE_FORKS` and corresponding R
option `enable.forks` that both take logical scalars.  By setting
`R_ENABLE_FORKS=false` or equivalently `enable.forks=FALSE`,
`parallel::mclapply()` will fall back to `lapply()`.

For `parallel::mcparallel()`, we could produce an error if forks are disabled.


Comments?

/Henrik


From |uc@r @end|ng |rom |edor@project@org  Fri Apr 12 11:32:24 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Fri, 12 Apr 2019 11:32:24 +0200
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
Message-ID: <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>

On Thu, 11 Apr 2019 at 22:07, Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> ISSUE:
> Using *forks* for parallel processing in R is not always safe.
> [...]
> Comments?

Using fork() is never safe. The reference provided by Kevin [1] is
pretty compelling (I kindly encourage anyone who ever forked a process
to read it). Therefore, I'd go beyond Henrik's suggestion, and I'd
advocate for deprecating fork clusters and eventually removing them
from parallel.

[1] https://www.microsoft.com/en-us/research/uploads/prod/2019/04/fork-hotos19.pdf

-- 
I?aki ?car


From tr@ver@c @end|ng |rom gm@||@com  Fri Apr 12 21:31:24 2019
From: tr@ver@c @end|ng |rom gm@||@com (Travers Ching)
Date: Fri, 12 Apr 2019 12:31:24 -0700
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
Message-ID: <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>

Just throwing my two cents in:

I think removing/deprecating fork would be a bad idea for two reasons:

1) There are no performant alternatives
2) Removing fork would break existing workflows

Even if replaced with something using the same interface (e.g., a
function that automatically detects variables to export as in the
amazing `future` package), the lack of copy-on-write functionality
would cause scripts everywhere to break.

A simple example illustrating these two points:
`x <- 5e8; mclapply(1:24, sum, x, 8)`

Using fork, `mclapply` takes 5 seconds.  Using "psock", `clusterApply`
does not complete.

Travers

On Fri, Apr 12, 2019 at 2:32 AM I?aki Ucar <iucar at fedoraproject.org> wrote:
>
> On Thu, 11 Apr 2019 at 22:07, Henrik Bengtsson
> <henrik.bengtsson at gmail.com> wrote:
> >
> > ISSUE:
> > Using *forks* for parallel processing in R is not always safe.
> > [...]
> > Comments?
>
> Using fork() is never safe. The reference provided by Kevin [1] is
> pretty compelling (I kindly encourage anyone who ever forked a process
> to read it). Therefore, I'd go beyond Henrik's suggestion, and I'd
> advocate for deprecating fork clusters and eventually removing them
> from parallel.
>
> [1] https://www.microsoft.com/en-us/research/uploads/prod/2019/04/fork-hotos19.pdf
>
> --
> I?aki ?car
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |uc@r @end|ng |rom |edor@project@org  Sat Apr 13 00:45:19 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Sat, 13 Apr 2019 00:45:19 +0200
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
Message-ID: <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>

On Fri, 12 Apr 2019 at 21:32, Travers Ching <traversc at gmail.com> wrote:
>
> Just throwing my two cents in:
>
> I think removing/deprecating fork would be a bad idea for two reasons:
>
> 1) There are no performant alternatives

"Performant"... in terms of what. If the cost of copying the data
predominates over the computation time, maybe you didn't need
parallelization in the first place.

> 2) Removing fork would break existing workflows

I don't see why mclapply could not be rewritten using PSOCK clusters.
And as a side effect, this would enable those workflows on Windows,
which doesn't support fork.

> Even if replaced with something using the same interface (e.g., a
> function that automatically detects variables to export as in the
> amazing `future` package), the lack of copy-on-write functionality
> would cause scripts everywhere to break.

To implement copy-on-write, Linux overcommits virtual memory, and this
is what causes scripts to break unexpectedly: everything works fine,
until you change a small unimportant bit and... boom, out of memory.
And in general, running forks in any GUI would cause things everywhere
to break.

> A simple example illustrating these two points:
> `x <- 5e8; mclapply(1:24, sum, x, 8)`
>
> Using fork, `mclapply` takes 5 seconds.  Using "psock", `clusterApply`
> does not complete.

I'm not sure how did you setup that, but it does complete. Or do you
mean that you ran out of memory? Then try replacing "x" with, e.g.,
"x+1" in your mclapply example and see what happens (hint: save your
work first).

--
I?aki ?car


From tr@ver@c @end|ng |rom gm@||@com  Sat Apr 13 03:03:13 2019
From: tr@ver@c @end|ng |rom gm@||@com (Travers Ching)
Date: Fri, 12 Apr 2019 18:03:13 -0700
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
Message-ID: <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>

Hi Inaki,

> "Performant"... in terms of what. If the cost of copying the data
> predominates over the computation time, maybe you didn't need
> parallelization in the first place.

Performant in terms of speed.  There's no copying in that example
using `mclapply` and so it is significantly faster than other
alternatives.

It is a very simple and contrived example, but there are lots of
applications that depend on processing of large data and benefit from
multithreading.  For example, if I read in large sequencing data with
`Rsamtools` and want to check sequences for a set of motifs.

> I don't see why mclapply could not be rewritten using PSOCK clusters.

Because it would be much slower.

> To implement copy-on-write, Linux overcommits virtual memory, and this
>  is what causes scripts to break unexpectedly: everything works fine,
> until you change a small unimportant bit and... boom, out of memory.
> And in general, running forks in any GUI would cause things everywhere
> to break.

> I'm not sure how did you setup that, but it does complete. Or do you
> mean that you ran out of memory? Then try replacing "x" with, e.g.,
> "x+1" in your mclapply example and see what happens (hint: save your
> work first).

Yes, I meant that it ran out of memory on my desktop.  I understand
the limits, and it is not perfect because of the GUI issue you
mention, but I don't see a better alternative in terms of speed.

Regards,
Travers




On Fri, Apr 12, 2019 at 3:45 PM I?aki Ucar <iucar at fedoraproject.org> wrote:
>
> On Fri, 12 Apr 2019 at 21:32, Travers Ching <traversc at gmail.com> wrote:
> >
> > Just throwing my two cents in:
> >
> > I think removing/deprecating fork would be a bad idea for two reasons:
> >
> > 1) There are no performant alternatives
>
> "Performant"... in terms of what. If the cost of copying the data
> predominates over the computation time, maybe you didn't need
> parallelization in the first place.
>
> > 2) Removing fork would break existing workflows
>
> I don't see why mclapply could not be rewritten using PSOCK clusters.
> And as a side effect, this would enable those workflows on Windows,
> which doesn't support fork.
>
> > Even if replaced with something using the same interface (e.g., a
> > function that automatically detects variables to export as in the
> > amazing `future` package), the lack of copy-on-write functionality
> > would cause scripts everywhere to break.
>
> To implement copy-on-write, Linux overcommits virtual memory, and this
> is what causes scripts to break unexpectedly: everything works fine,
> until you change a small unimportant bit and... boom, out of memory.
> And in general, running forks in any GUI would cause things everywhere
> to break.
>
> > A simple example illustrating these two points:
> > `x <- 5e8; mclapply(1:24, sum, x, 8)`
> >
> > Using fork, `mclapply` takes 5 seconds.  Using "psock", `clusterApply`
> > does not complete.
>
> I'm not sure how did you setup that, but it does complete. Or do you
> mean that you ran out of memory? Then try replacing "x" with, e.g.,
> "x+1" in your mclapply example and see what happens (hint: save your
> work first).
>
> --
> I?aki ?car


From kev|nu@hey @end|ng |rom gm@||@com  Sat Apr 13 03:50:58 2019
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Fri, 12 Apr 2019 18:50:58 -0700
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
Message-ID: <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>

I think it's worth saying that mclapply() works as documented: it
relies on forking, and so doesn't work well in environments where it's
unsafe to fork. This is spelled out explicitly in the documentation of
?mclapply:

It is strongly discouraged to use these functions in GUI or embedded
environments, because it leads to several processes sharing the same
GUI which will likely cause chaos (and possibly crashes). Child
processes should never use on-screen graphics devices.

I believe the expectation is that users who need more control over the
kind of cluster that's used for parallel computations would instead
create the cluster themselves with e.g. `makeCluster()` and then use
`clusterApply()` / `parLapply()` or other APIs as appropriate.

In environments where forking works, `mclapply()` is nice because you
don't need to think -- the process is forked, and anything available
in your main session is automatically available in the child
processes. This is a nice convenience for when you know it's safe to
fork R (and know what you're doing is safe to do within a forked
process). When it's not safe, it's better to prefer the other APIs
available for computation on a cluster.

Forking can be unsafe and dangerous, but it's also convenient and
sometimes that convenience can outweigh the other concerns.

Finally, I want to add: the onus should be on the front-end to work
well with R, and not the other way around. I don't think it's fair to
impose extra work / an extra maintenance burden on the R Core team for
something that's already clearly documented ...

Best,
Kevin


On Fri, Apr 12, 2019 at 6:04 PM Travers Ching <traversc at gmail.com> wrote:
>
> Hi Inaki,
>
> > "Performant"... in terms of what. If the cost of copying the data
> > predominates over the computation time, maybe you didn't need
> > parallelization in the first place.
>
> Performant in terms of speed.  There's no copying in that example
> using `mclapply` and so it is significantly faster than other
> alternatives.
>
> It is a very simple and contrived example, but there are lots of
> applications that depend on processing of large data and benefit from
> multithreading.  For example, if I read in large sequencing data with
> `Rsamtools` and want to check sequences for a set of motifs.
>
> > I don't see why mclapply could not be rewritten using PSOCK clusters.
>
> Because it would be much slower.
>
> > To implement copy-on-write, Linux overcommits virtual memory, and this
> >  is what causes scripts to break unexpectedly: everything works fine,
> > until you change a small unimportant bit and... boom, out of memory.
> > And in general, running forks in any GUI would cause things everywhere
> > to break.
>
> > I'm not sure how did you setup that, but it does complete. Or do you
> > mean that you ran out of memory? Then try replacing "x" with, e.g.,
> > "x+1" in your mclapply example and see what happens (hint: save your
> > work first).
>
> Yes, I meant that it ran out of memory on my desktop.  I understand
> the limits, and it is not perfect because of the GUI issue you
> mention, but I don't see a better alternative in terms of speed.
>
> Regards,
> Travers
>
>
>
>
> On Fri, Apr 12, 2019 at 3:45 PM I?aki Ucar <iucar at fedoraproject.org> wrote:
> >
> > On Fri, 12 Apr 2019 at 21:32, Travers Ching <traversc at gmail.com> wrote:
> > >
> > > Just throwing my two cents in:
> > >
> > > I think removing/deprecating fork would be a bad idea for two reasons:
> > >
> > > 1) There are no performant alternatives
> >
> > "Performant"... in terms of what. If the cost of copying the data
> > predominates over the computation time, maybe you didn't need
> > parallelization in the first place.
> >
> > > 2) Removing fork would break existing workflows
> >
> > I don't see why mclapply could not be rewritten using PSOCK clusters.
> > And as a side effect, this would enable those workflows on Windows,
> > which doesn't support fork.
> >
> > > Even if replaced with something using the same interface (e.g., a
> > > function that automatically detects variables to export as in the
> > > amazing `future` package), the lack of copy-on-write functionality
> > > would cause scripts everywhere to break.
> >
> > To implement copy-on-write, Linux overcommits virtual memory, and this
> > is what causes scripts to break unexpectedly: everything works fine,
> > until you change a small unimportant bit and... boom, out of memory.
> > And in general, running forks in any GUI would cause things everywhere
> > to break.
> >
> > > A simple example illustrating these two points:
> > > `x <- 5e8; mclapply(1:24, sum, x, 8)`
> > >
> > > Using fork, `mclapply` takes 5 seconds.  Using "psock", `clusterApply`
> > > does not complete.
> >
> > I'm not sure how did you setup that, but it does complete. Or do you
> > mean that you ran out of memory? Then try replacing "x" with, e.g.,
> > "x+1" in your mclapply example and see what happens (hint: save your
> > work first).
> >
> > --
> > I?aki ?car
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Apr 13 06:50:34 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 13 Apr 2019 00:50:34 -0400
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
 <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
Message-ID: <CDC92621-FD8B-49DB-AEBC-22E23915B044@R-project.org>

I fully agree with Kevin. Front-ends can always use pthread_atfork() to close descriptors and suspend threads in children.

Anyone who thinks you can use PSOCK clusters has obviously not used mclappy() in real applications - trying to save the workspace and restore it in 20 new processes is not only incredibly wasteful (no shared memory whatsoever) but slow. If you want to use PSOCK just do it (I never do - you might as well just use a full cluster instead), multicore is for the cases where you want to parallelize something quickly and it works really well for that purpose.

I'd like to separate the issues here - the fact that RStudio has issues is really not R's fault - there is no technical reason why it shouldn't be able to handle it correctly. That is not to say that there are cases where fork() is dangerous, but in most cases it's not and the benefits outweigh
the risk.

That said, I do acknowledge the idea of having an ability to prevent forking if desired - I think that's a good idea, in particular if there is a standard that packages can also adhere to it (yes, there are also packages that use fork() explicitly). I just think that the motivation is wrong (i.e., I don't think it would be wise for RStudio to prevent parallelization by default).

Also I'd like to point out that the main problem came about when packages started using parallel implicitly - the good citizens out there expose it as a parameter to the user, but not all packages do it which means you can hit forked code without knowing it. If you use mclapply() in user code, you typically know what you're doing, but if a package author does it for you, it's a different story.

Cheers,
Simon


> On Apr 12, 2019, at 21:50, Kevin Ushey <kevinushey at gmail.com> wrote:
> 
> I think it's worth saying that mclapply() works as documented: it
> relies on forking, and so doesn't work well in environments where it's
> unsafe to fork. This is spelled out explicitly in the documentation of
> ?mclapply:
> 
> It is strongly discouraged to use these functions in GUI or embedded
> environments, because it leads to several processes sharing the same
> GUI which will likely cause chaos (and possibly crashes). Child
> processes should never use on-screen graphics devices.
> 
> I believe the expectation is that users who need more control over the
> kind of cluster that's used for parallel computations would instead
> create the cluster themselves with e.g. `makeCluster()` and then use
> `clusterApply()` / `parLapply()` or other APIs as appropriate.
> 
> In environments where forking works, `mclapply()` is nice because you
> don't need to think -- the process is forked, and anything available
> in your main session is automatically available in the child
> processes. This is a nice convenience for when you know it's safe to
> fork R (and know what you're doing is safe to do within a forked
> process). When it's not safe, it's better to prefer the other APIs
> available for computation on a cluster.
> 
> Forking can be unsafe and dangerous, but it's also convenient and
> sometimes that convenience can outweigh the other concerns.
> 
> Finally, I want to add: the onus should be on the front-end to work
> well with R, and not the other way around. I don't think it's fair to
> impose extra work / an extra maintenance burden on the R Core team for
> something that's already clearly documented ...
> 
> Best,
> Kevin
> 
> 
> On Fri, Apr 12, 2019 at 6:04 PM Travers Ching <traversc at gmail.com> wrote:
>> 
>> Hi Inaki,
>> 
>>> "Performant"... in terms of what. If the cost of copying the data
>>> predominates over the computation time, maybe you didn't need
>>> parallelization in the first place.
>> 
>> Performant in terms of speed.  There's no copying in that example
>> using `mclapply` and so it is significantly faster than other
>> alternatives.
>> 
>> It is a very simple and contrived example, but there are lots of
>> applications that depend on processing of large data and benefit from
>> multithreading.  For example, if I read in large sequencing data with
>> `Rsamtools` and want to check sequences for a set of motifs.
>> 
>>> I don't see why mclapply could not be rewritten using PSOCK clusters.
>> 
>> Because it would be much slower.
>> 
>>> To implement copy-on-write, Linux overcommits virtual memory, and this
>>> is what causes scripts to break unexpectedly: everything works fine,
>>> until you change a small unimportant bit and... boom, out of memory.
>>> And in general, running forks in any GUI would cause things everywhere
>>> to break.
>> 
>>> I'm not sure how did you setup that, but it does complete. Or do you
>>> mean that you ran out of memory? Then try replacing "x" with, e.g.,
>>> "x+1" in your mclapply example and see what happens (hint: save your
>>> work first).
>> 
>> Yes, I meant that it ran out of memory on my desktop.  I understand
>> the limits, and it is not perfect because of the GUI issue you
>> mention, but I don't see a better alternative in terms of speed.
>> 
>> Regards,
>> Travers
>> 
>> 
>> 
>> 
>> On Fri, Apr 12, 2019 at 3:45 PM I?aki Ucar <iucar at fedoraproject.org> wrote:
>>> 
>>> On Fri, 12 Apr 2019 at 21:32, Travers Ching <traversc at gmail.com> wrote:
>>>> 
>>>> Just throwing my two cents in:
>>>> 
>>>> I think removing/deprecating fork would be a bad idea for two reasons:
>>>> 
>>>> 1) There are no performant alternatives
>>> 
>>> "Performant"... in terms of what. If the cost of copying the data
>>> predominates over the computation time, maybe you didn't need
>>> parallelization in the first place.
>>> 
>>>> 2) Removing fork would break existing workflows
>>> 
>>> I don't see why mclapply could not be rewritten using PSOCK clusters.
>>> And as a side effect, this would enable those workflows on Windows,
>>> which doesn't support fork.
>>> 
>>>> Even if replaced with something using the same interface (e.g., a
>>>> function that automatically detects variables to export as in the
>>>> amazing `future` package), the lack of copy-on-write functionality
>>>> would cause scripts everywhere to break.
>>> 
>>> To implement copy-on-write, Linux overcommits virtual memory, and this
>>> is what causes scripts to break unexpectedly: everything works fine,
>>> until you change a small unimportant bit and... boom, out of memory.
>>> And in general, running forks in any GUI would cause things everywhere
>>> to break.
>>> 
>>>> A simple example illustrating these two points:
>>>> `x <- 5e8; mclapply(1:24, sum, x, 8)`
>>>> 
>>>> Using fork, `mclapply` takes 5 seconds.  Using "psock", `clusterApply`
>>>> does not complete.
>>> 
>>> I'm not sure how did you setup that, but it does complete. Or do you
>>> mean that you ran out of memory? Then try replacing "x" with, e.g.,
>>> "x+1" in your mclapply example and see what happens (hint: save your
>>> work first).
>>> 
>>> --
>>> I?aki ?car
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From |uc@r @end|ng |rom |edor@project@org  Sat Apr 13 12:05:30 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Sat, 13 Apr 2019 12:05:30 +0200
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
 <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
Message-ID: <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>

On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>
> I think it's worth saying that mclapply() works as documented

Mostly, yes. But it says nothing about fork's copy-on-write and memory
overcommitment, and that this means that it may work nicely or fail
spectacularly depending on whether, e.g., you operate on a long
vector.

-- 
I?aki ?car


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Apr 13 16:16:22 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 13 Apr 2019 10:16:22 -0400
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
 <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
 <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>
Message-ID: <2DC90380-893E-4525-8406-C685AC6D82FE@R-project.org>

Sure, but that a completely bogus argument because in that case it would fail even more spectacularly with any other method like PSOCK because you would *have to* allocate n times as much memory so unlike mclapply it is guaranteed to fail. With mclapply it is simply much more efficient as it will share memory as long as possible. It is rather obvious that any new objects you create can no longer be shared as they now exist separately in each process.

Cheers,
Simon



> On Apr 13, 2019, at 06:05, I?aki Ucar <iucar at fedoraproject.org> wrote:
> 
> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>> 
>> I think it's worth saying that mclapply() works as documented
> 
> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> overcommitment, and that this means that it may work nicely or fail
> spectacularly depending on whether, e.g., you operate on a long
> vector.
> 
> -- 
> I?aki ?car
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From |uc@r @end|ng |rom |edor@project@org  Sat Apr 13 22:56:23 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Sat, 13 Apr 2019 22:56:23 +0200
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <2DC90380-893E-4525-8406-C685AC6D82FE@R-project.org>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
 <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
 <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>
 <2DC90380-893E-4525-8406-C685AC6D82FE@R-project.org>
Message-ID: <CALEXWq0wHU5fs2CkswbfmneJ4QSMkZRtn6m5KOu3aWcbMertsQ@mail.gmail.com>

On Sat, 13 Apr 2019 at 18:41, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>
> Sure, but that a completely bogus argument because in that case it would fail even more spectacularly with any other method like PSOCK because you would *have to* allocate n times as much memory so unlike mclapply it is guaranteed to fail. With mclapply it is simply much more efficient as it will share memory as long as possible. It is rather obvious that any new objects you create can no longer be shared as they now exist separately in each process.

The point was that PSOCK fails and succeeds *consistently*,
independently of what you do with the input in the function provided.
I think that's a good property.

-- 
I?aki ?car


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Apr 14 01:08:01 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 13 Apr 2019 19:08:01 -0400
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CALEXWq0wHU5fs2CkswbfmneJ4QSMkZRtn6m5KOu3aWcbMertsQ@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
 <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
 <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>
 <2DC90380-893E-4525-8406-C685AC6D82FE@R-project.org>
 <CALEXWq0wHU5fs2CkswbfmneJ4QSMkZRtn6m5KOu3aWcbMertsQ@mail.gmail.com>
Message-ID: <D94BADA2-3199-4E25-8363-C200FF4B9EBD@R-project.org>



> On Apr 13, 2019, at 16:56, I?aki Ucar <iucar at fedoraproject.org> wrote:
> 
> On Sat, 13 Apr 2019 at 18:41, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>> 
>> Sure, but that a completely bogus argument because in that case it would fail even more spectacularly with any other method like PSOCK because you would *have to* allocate n times as much memory so unlike mclapply it is guaranteed to fail. With mclapply it is simply much more efficient as it will share memory as long as possible. It is rather obvious that any new objects you create can no longer be shared as they now exist separately in each process.
> 
> The point was that PSOCK fails and succeeds *consistently*,
> independently of what you do with the input in the function provided.
> I think that's a good property.
> 

So does parallel. It is consistent. If you do things that use too much memory you will consistently fail. That's a pretty universal rule, there is nothing probabilistic about it. It makes no difference if it's PSOCK, multicore, or anything else.


From @ndre|@ko@tyrk@ @end|ng |rom un|@|u  Fri Apr 12 16:52:11 2019
From: @ndre|@ko@tyrk@ @end|ng |rom un|@|u (=?UTF-8?Q?Andre=c3=af_V=2e_Kostyrka?=)
Date: Fri, 12 Apr 2019 16:52:11 +0200
Subject: [Rd] [r-devel] integrate over an infinite region produces wrong
 results depending on scaling
Message-ID: <aceaa0f9-fdf0-8df1-2d87-0e57dcf4aa2f@uni.lu>

Dear all,

This is the first time I am posting to the r-devel list. On 
StackOverflow, they suggested that the strange behaviour of integrate() 
was more bug-like. I am providing a short version of the question (full 
one with plots: https://stackoverflow.com/q/55639401).

Suppose one wants integrate a function that is just a product of two 
density functions (like gamma). The support of the random variable is 
(-Inf, 0]. The scale parameter of the distribution is quite small 
(around 0.01), so often, the standard integration routine would fail to 
integrate a function that is non-zero on a very small section of the 
negative line (like [-0.02, -0.01], where it takes huge values, and 
almost 0 everywhere else). R?s integrate would often return the machine 
epsilon as a result. So I stretch the function around the zero by an 
inverse of the scale parameter, compute the integral, and then divide it 
by the scale. Sometimes, this re-scaling also failed, so I did both if 
the first result was very small.

Today when integration of the rescaled function suddenly yielded a value 
of 1.5 instead of 3.5 (not even zero). The MWE is below.

cons <- -0.020374721416129591
sc <- 0.00271245601724757383
sh <- 5.704
f <- function(x, numstab = 1) dgamma(cons - x * numstab, shape = sh, 
scale = sc) * dgamma(-x * numstab, shape = sh, scale = sc) * numstab

curve(f, -0.06, 0, n = 501, main = "Unscaled f", bty = "n")
curve(f(x, sc), -0.06 / sc, 0, n = 501, main = "Scaled f", bty = "n")

sum(f(seq(-0.08, 0, 1e-6))) * 1e-6 #? Checking by summation: 3.575294
sum(f(seq(-30, 0, 1e-4), numstab = sc)) * 1e-4 # True value, 3.575294
str(integrate(f, -Inf, 0)) # Gives 3.575294
# $ value?????? : num 3.58
# $ abs.error?? : num 1.71e-06
# $ subdivisions: int 10
str(integrate(f, -Inf, 0, numstab = sc))
# $ value?????? : num 1.5 # What?!
# $ abs.error?? : num 0.000145 # What?!
# $ subdivisions: int 2

It stop at just two subdivisions! The problem is, I cannot try various 
stabilising multipliers for the function because I have to compute this 
integral thousands of times for thousands of parameter values on 
thousands of sample windows for hundreds on models, so even in the 
super-computer cluster, this takes weeks. Besides that, reducing the 
rel.tol just to 1e-5 or 1e-6, helped a bit, but I am not sure whether 
this guarantees success (and reducing it to 1e-7 slowed down the 
computations in some cases). And I have looked at the Fortran code of 
the quadrature just to see the integration rule, and was wondering.

How can I make sure that the integration routine will not produce such 
wrong results for such a function, and the integration will still be fast?

Yours sincerely,
Andre? V. Kostyrka


From wdun|@p @end|ng |rom t|bco@com  Sun Apr 14 18:52:59 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Sun, 14 Apr 2019 09:52:59 -0700
Subject: [Rd] [r-devel] integrate over an infinite region produces wrong
 results depending on scaling
In-Reply-To: <aceaa0f9-fdf0-8df1-2d87-0e57dcf4aa2f@uni.lu>
References: <aceaa0f9-fdf0-8df1-2d87-0e57dcf4aa2f@uni.lu>
Message-ID: <CAF8bMcYfx-FMeB0By7hvs_bz0kfn_iPc9uHES84PiX4W1qHoTA@mail.gmail.com>

integrate(f, xmin, xmax) will have problems when f(x) is 0 over large parts
of (xmin,xmax).  It doesn't have any clues to where the non-zero regions
are.  It computes f(x) at 21 points at each step and if all of those are
zero (or some other constant?) for a few steps, it calls it a day.  If you
can narrow down the integration interval to the interesting part of the
function's domain you will get better results.

By the way, here is a way to see where integrate(f) evaluates f()  (the
keep.xy=TRUE argument doesn't seem to do anything).

> debugIntegrate <- function(f)
{
    n_calls <- 0
    x_args <- list()
    other_args <- list()
    value <- list()
    function(x, ...) {
        n_calls <<- n_calls + 1
        x_args[[n_calls]] <<- x
        other_args[[n_calls]] <<- list(...)
        v <- f(x, ...)
        value[[n_calls]] <<- v
        v
    }
}

> str(integrate(DF <- debugIntegrate(f), -Inf, 0, numstab = sc))
List of 5
 $ value       : num 1.5
 $ abs.error   : num 0.000145
 $ subdivisions: int 2
 $ message     : chr "OK"
 $ call        : language integrate(f = DF <- debugIntegrate(f), lower =
-Inf, upper = 0, numstab = sc)
 - attr(*, "class")= chr "integrate"
> curve(f(x, sc), min(unlist(environment(DF)$x_args)), 0, n = 501, main =
"Scaled f", bty = "n")
> with(environment(DF), points(unlist(x_args), unlist(value)))

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Sun, Apr 14, 2019 at 5:13 AM Andre? V. Kostyrka <andrei.kostyrka at uni.lu>
wrote:

> Dear all,
>
> This is the first time I am posting to the r-devel list. On
> StackOverflow, they suggested that the strange behaviour of integrate()
> was more bug-like. I am providing a short version of the question (full
> one with plots: https://stackoverflow.com/q/55639401).
>
> Suppose one wants integrate a function that is just a product of two
> density functions (like gamma). The support of the random variable is
> (-Inf, 0]. The scale parameter of the distribution is quite small
> (around 0.01), so often, the standard integration routine would fail to
> integrate a function that is non-zero on a very small section of the
> negative line (like [-0.02, -0.01], where it takes huge values, and
> almost 0 everywhere else). R?s integrate would often return the machine
> epsilon as a result. So I stretch the function around the zero by an
> inverse of the scale parameter, compute the integral, and then divide it
> by the scale. Sometimes, this re-scaling also failed, so I did both if
> the first result was very small.
>
> Today when integration of the rescaled function suddenly yielded a value
> of 1.5 instead of 3.5 (not even zero). The MWE is below.
>
> cons <- -0.020374721416129591
> sc <- 0.00271245601724757383
> sh <- 5.704
> f <- function(x, numstab = 1) dgamma(cons - x * numstab, shape = sh,
> scale = sc) * dgamma(-x * numstab, shape = sh, scale = sc) * numstab
>
> curve(f, -0.06, 0, n = 501, main = "Unscaled f", bty = "n")
> curve(f(x, sc), -0.06 / sc, 0, n = 501, main = "Scaled f", bty = "n")
>
> sum(f(seq(-0.08, 0, 1e-6))) * 1e-6 #  Checking by summation: 3.575294
> sum(f(seq(-30, 0, 1e-4), numstab = sc)) * 1e-4 # True value, 3.575294
> str(integrate(f, -Inf, 0)) # Gives 3.575294
> # $ value       : num 3.58
> # $ abs.error   : num 1.71e-06
> # $ subdivisions: int 10
> str(integrate(f, -Inf, 0, numstab = sc))
> # $ value       : num 1.5 # What?!
> # $ abs.error   : num 0.000145 # What?!
> # $ subdivisions: int 2
>
> It stop at just two subdivisions! The problem is, I cannot try various
> stabilising multipliers for the function because I have to compute this
> integral thousands of times for thousands of parameter values on
> thousands of sample windows for hundreds on models, so even in the
> super-computer cluster, this takes weeks. Besides that, reducing the
> rel.tol just to 1e-5 or 1e-6, helped a bit, but I am not sure whether
> this guarantees success (and reducing it to 1e-7 slowed down the
> computations in some cases). And I have looked at the Fortran code of
> the quadrature just to see the integration rule, and was wondering.
>
> How can I make sure that the integration routine will not produce such
> wrong results for such a function, and the integration will still be fast?
>
> Yours sincerely,
> Andre? V. Kostyrka
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @uh@rto_@nggono @end|ng |rom y@hoo@com  Sun Apr 14 21:56:33 2019
From: @uh@rto_@nggono @end|ng |rom y@hoo@com (Suharto Anggono Suharto Anggono)
Date: Sun, 14 Apr 2019 19:56:33 +0000 (UTC)
Subject: [Rd] stopifnot
References: <97998092.3517634.1555271793942.ref@mail.yahoo.com>
Message-ID: <97998092.3517634.1555271793942@mail.yahoo.com>

In current definition of function 'stopifnot' in stop.R in R 3.6.0 beta (https://svn.r-project.org/R/branches/R-3-6-branch/src/library/base/R/stop.R) or R devel (https://svn.r-project.org/R/trunk/src/library/base/R/stop.R), if 'exprs' is specified, cl[[1]] is quote(stopifnot) . To be more robust, quote(base::stopifnot) may be used instead.


Also, in current definition of function 'stopifnot' in R 3.6.0 beta or R devel, for 'cl' if 'exprs' is specified, there a case with comment "the *name* of an expression". The intent is allowing
stopifnot(exprs = ee) ,
where variable 'ee' holds an expression object, to work on the expression object.

It is not quite right to use eval(exprs) . It fails when 'stopifnot' is called inside a function, like
f <- function(ee) stopifnot(exprs = ee)
f(expression())

But, how about local=FALSE case? Should the following work?
f <- function(ee) stopifnot(exprs = ee, local = FALSE)
f(expression())

But, why bother making it work, while it is undocumented that 'exprs' argument in 'stopifnot' can be an expression? Well, yes, expectation may be set from the name "exprs" itself or from argument 'exprs' in function 'source' or 'withAutoprint'. Function 'withAutoprint' may be the closest match.

Function 'withAutoprint' has 'evaluated' argument that controls whether work is on value of? 'exprs' or on 'exprs' as given. I like the approach.


If 'E1' is an expression object,
as.call(c(quote(stopifnot), E1))
also works, without converting 'E1' to list.


I suggest to arrange "details" section in stopifnot.Rd as follows:
This function is intended ...
Since R version 3.5.0, stopifnot(exprs = { ... }) ...
stopifnot(A, B) ... is conceptually equivalent to ...
Since R version 3.5.0, expressions are evaluated sequentially ...
Since R version 3.6.0, stopifnot no longer handles potential errors or warnings ...? ---not including sys.call(<n>)
Since R version 3.4.0, ... all.equal ...
sys.call(<n>)

Use of sys.call(<n>) in 'stopifnot' actually happens since R 3.5.0, as the call included in error message produced by 'stopifnot'. In R 3.5.x, it is sys.call(-1) , that can be NULL . In current R 3.6.0 beta, it is sys.call(sys.parent(1L)) , only if sys.parent(1L) is not 0. The two may differ only for 'stopifnot' that is called via 'eval' or the like.

I think it is good if the documentation also includes an example of use of 'stopifnot' inside a function, where error message from 'stopifnot' includes call since R 3.5.0. Such an example is in https://stat.ethz.ch/pipermail/r-devel/2017-May/074303.html .

--------------------------------------------
On Mon, 1/4/19, Martin Maechler <maechler at stat.math.ethz.ch> wrote:

 Subject: Re: [Rd] stopifnot

 Cc: r-devel at r-project.org
 Date: Monday, 1 April, 2019, 8:12 PM

>>>>> Suharto Anggono Suharto Anggono via R-devel 
>>>>>? ? on Sun, 31 Mar 2019 15:26:13 +0000 writes:

[.............]
[........ "eval() inside for()" not giving call in error message .....]
[.............]

? ? > "Details" section of 'stopifnot' documentation in current R 3.6.0 alpha
? ? > (https://svn.r-project.org/R/branches/R-3-6-branch/src/library/base/man/stopifnot.Rd)
? ? > has this.

? ? >?? Since \R version 3.6.0, \code{stopifnot()} no longer handles potential
? ? >?? errors or warnings (by \code{\link{tryCatch}()} etc) for each single
? ? >?? expression but rather aims at using the correct
? ? >?? \code{\link{sys.call}(<n>)} to get the most meaningful error message in
? ? >?? case of an error.? This provides considerably less overhead.

? ? > I think part of the first sentence starting from "but rather" should be removed because it is not true.

You are right that it is not accurate... I'll modify it,
including keeping the? "considerably less overhead"
which had been one important reason for changing from 3.5.x to
the current version.

? ? > The next paragraph:

? ? >?? Since \R version 3.5.0, expressions \emph{are} evaluated sequentially,
? ? >?? and hence evaluation stops as soon as there is a \dQuote{non-TRUE}, as
? ? >?? indicated by the above conceptual equivalence statement.
? ? >?? Further, when such an expression signals an error or
? ? >?? \code{\link{warning}}, its \code{\link{conditionCall}()} no longer
? ? >?? contains the full \code{stopifnot} call, but just the erroneous
? ? >?? expression.

? ? > As I said earlier (https://stat.ethz.ch/pipermail/r-devel/2019-February/077386.html), the last sentence above is not entirely true. 

You are right to some degree:? That really was true for R 3.5.x,
but is no longer entirely accurate.

It is still true currently interestingly thanks to the "eval() in for()"
behavior that the error/warning message is most of the time only
about the relevant part and not mentioning the full stopifnot(..) call.


? ? > It may say something like:
? ? > Further, when such an expression signals an error, stopifnot() in R 3.5.x makes its conditionCall() the erroneous expression, but no longer since R 3.6.0.


? ? > Is it OK that, for
? ? > do.call(stopifnot, list(exprs = expression())) ,
? ? > the whole expression object is taken as one?

You are right; that's not so nice.
On one hand, this is fine, as there is nothing not TRUE :

? > stopifnot()? ? ? ? ? 
? > stopifnot(exprs = {})

but here,

? > do.call(stopifnot, list(exprs = expression())) 
? Error in do.call(stopifnot, list(exprs = expression())) : 
? ? expression() are not all TRUE

I'm about to commit a version [mostly from your suggestions],
where the above do.call() works as well.

? ? > End portion from running
? ? > example(stopifnot)
? ? > in R 3.5.0:

? ? stpfnt> stopifnot(all.equal(pi, 3.141593),? 2 < 2, all(1:10 < 12), "a" < "b")
? ? > Error in eval(ei, envir) : pi and 3.141593 are not equal:
? ? >?? Mean relative difference: 1.102658e-07

? ? > To me, "in eval(*)" is rather surprising and annoying and doesn't add clarity. Yes, stop() gives the same. But, in this case, just "Error", like in R before version 3.5.0, feels better to me. If
? ? > stop(simpleError(msg, call = if(p <- sys.parent()) sys.call(p)))
? ? > were used in 'stopifnot', just "Error" would be given in this case.

And you are right again... in my current version I do use your

? stop(simpleError(msg, call = if(p <- sys.parent()) sys.call(p)))

and that does solve the above.


Martin


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Apr 15 08:44:22 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 15 Apr 2019 08:44:22 +0200
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
 <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
 <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>
Message-ID: <4a46e1e6-d584-9dc6-1699-973b56c95c98@gmail.com>

On 4/13/19 12:05 PM, I?aki Ucar wrote:
> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>> I think it's worth saying that mclapply() works as documented
> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> overcommitment, and that this means that it may work nicely or fail
> spectacularly depending on whether, e.g., you operate on a long
> vector.

R cannot possibly replicate documentation of the underlying operating 
systems. It clearly says that fork() is used and readers who may not 
know what fork() is need to learn it from external sources. 
Copy-on-write is an elementary property of fork().

Reimplementing mclapply to use PSOCK does not make sense -- if someone 
wants to write code that can be used both with PSOCK and FORK, there is 
the cluster API in parallel for that.

Tomas


From |uc@r @end|ng |rom |edor@project@org  Mon Apr 15 11:02:05 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Mon, 15 Apr 2019 11:02:05 +0200
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <4a46e1e6-d584-9dc6-1699-973b56c95c98@gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
 <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
 <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>
 <4a46e1e6-d584-9dc6-1699-973b56c95c98@gmail.com>
Message-ID: <CALEXWq0R4Z=Q=BWLiSG-Suag5rYhSVoWfry24_s_ZM-Ahy1CWA@mail.gmail.com>

On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> > On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >> I think it's worth saying that mclapply() works as documented
> > Mostly, yes. But it says nothing about fork's copy-on-write and memory
> > overcommitment, and that this means that it may work nicely or fail
> > spectacularly depending on whether, e.g., you operate on a long
> > vector.
>
> R cannot possibly replicate documentation of the underlying operating
> systems. It clearly says that fork() is used and readers who may not
> know what fork() is need to learn it from external sources.
> Copy-on-write is an elementary property of fork().

Just to be precise, copy-on-write is an optimization widely deployed
in most modern *nixes, particularly for the architectures in which R
usually runs. But it is not an elementary property; it is not even
possible without an MMU.

-- 
I?aki ?car


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Apr 15 12:12:40 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 15 Apr 2019 12:12:40 +0200
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CALEXWq0R4Z=Q=BWLiSG-Suag5rYhSVoWfry24_s_ZM-Ahy1CWA@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
 <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
 <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>
 <4a46e1e6-d584-9dc6-1699-973b56c95c98@gmail.com>
 <CALEXWq0R4Z=Q=BWLiSG-Suag5rYhSVoWfry24_s_ZM-Ahy1CWA@mail.gmail.com>
Message-ID: <2a64a85b-97d5-b35e-66e6-3ac2de8b4800@gmail.com>

On 4/15/19 11:02 AM, I?aki Ucar wrote:
> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>> I think it's worth saying that mclapply() works as documented
>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>> overcommitment, and that this means that it may work nicely or fail
>>> spectacularly depending on whether, e.g., you operate on a long
>>> vector.
>> R cannot possibly replicate documentation of the underlying operating
>> systems. It clearly says that fork() is used and readers who may not
>> know what fork() is need to learn it from external sources.
>> Copy-on-write is an elementary property of fork().
> Just to be precise, copy-on-write is an optimization widely deployed
> in most modern *nixes, particularly for the architectures in which R
> usually runs. But it is not an elementary property; it is not even
> possible without an MMU.

Yes, old Unix systems without virtual memory had fork eagerly copying. 
Not relevant today, and certainly not for systems that run R, but indeed 
people interested in OS internals can look elsewhere for more precise 
information.

Tomas


From chr|@topher@h@mm||| @end|ng |rom @|ckk|d@@c@  Mon Apr 15 19:44:05 2019
From: chr|@topher@h@mm||| @end|ng |rom @|ckk|d@@c@ (Christopher Hammill)
Date: Mon, 15 Apr 2019 17:44:05 +0000
Subject: [Rd] Feature request: make file.exists interruptable
Message-ID: <YQBPR0101MB15856467D2E279C9AD0ACBA9E82B0@YQBPR0101MB1585.CANPRD01.PROD.OUTLOOK.COM>

Hi R developers,

On slow file systems with large lists of files, file.exists can take a long time to run. It would be nice if users could interrupt this function. I think it would be simple to add:

https://svn.r-project.org/R/trunk/src/main/platform.c,

at line 1373, add "R_CheckUserInterrupt();" perhaps every some number of iterations if performance is a concern here.

Thanks,

Chris


________________________________

This e-mail may contain confidential, personal and/or health information(information which may be subject to legal restrictions on use, retention and/or disclosure) for the sole use of the intended recipient. Any review or distribution by anyone other than the person for whom it was originally intended is strictly prohibited. If you have received this e-mail in error, please contact the sender and delete all copies.

	[[alternative HTML version deleted]]


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Tue Apr 16 16:24:12 2019
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Tue, 16 Apr 2019 15:24:12 +0100
Subject: [Rd] Feature request: make file.exists interruptable
In-Reply-To: <YQBPR0101MB15856467D2E279C9AD0ACBA9E82B0@YQBPR0101MB1585.CANPRD01.PROD.OUTLOOK.COM>
References: <YQBPR0101MB15856467D2E279C9AD0ACBA9E82B0@YQBPR0101MB1585.CANPRD01.PROD.OUTLOOK.COM>
Message-ID: <03a88d7d-212f-6537-bb4a-5831b8f6b2fe@stats.ox.ac.uk>

The place for feature requests is bugs.r-project.org .

On 15/04/2019 18:44, Christopher Hammill wrote:
> Hi R developers,
> 
> On slow file systems with large lists of files, file.exists can take a long time to run. It would be nice if users could interrupt this function. I think it would be simple to add:
> 
> https://svn.r-project.org/R/trunk/src/main/platform.c,
> 
> at line 1373, add "R_CheckUserInterrupt();" perhaps every some number of iterations if performance is a concern here.

It is a concern, and it is (very) unusual to call file.exists() on more 
than one file (as its name implies).  Perhaps you could give us some 
idea of what you are trying to do and how many files take how many 
seconds on what OS/filesystem.

For completeness, dir.exists() can be used with more than one path and 
potentially has the same issue.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk  Wed Apr 17 08:42:12 2019
From: georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Wed, 17 Apr 2019 06:42:12 +0000
Subject: [Rd] R CMD check does not report redundant '...' argument described
 in Rd File
Message-ID: <438D2EC9EAFE5946B2D5864670EA468E018F7165E6@MBXP02.ds.man.ac.uk>

R's checks seem to be failing to notice a redundant '...' argument described in the documentation of a function.

Consider a function:

fun_3 <- function(arg1, arg2, arg3) {
    "I am fun_3"
}

If its documentation describes an argument, say 'dummy', R check reports something like:

* checking Rd \usage sections ... WARNING
Documented arguments not in \usage in documentation object 'fun_3b':
  'dummy'
...

But if the non-existent argument is '...' or '\dots' there is no warning. The omission seems specific to the 'dots' argument. 

Checked under Windows on win-builder on 17 April 2018 with
R version 3.6.0 beta (2019-04-16 r76403), R version 3.5.3 (2019-03-11) and
R version 3.4.4 (2018-03-15).

A minimal package illustrating this is at 
https://github.com/GeoBosh/reprexes/tree/master/redundantDots


Georgi Boshnakov


From chr|@topher@h@mm||| @end|ng |rom @|ckk|d@@c@  Tue Apr 16 16:45:00 2019
From: chr|@topher@h@mm||| @end|ng |rom @|ckk|d@@c@ (Christopher Hammill)
Date: Tue, 16 Apr 2019 14:45:00 +0000
Subject: [Rd] Feature request: make file.exists interruptable
In-Reply-To: <03a88d7d-212f-6537-bb4a-5831b8f6b2fe@stats.ox.ac.uk>
References: <YQBPR0101MB15856467D2E279C9AD0ACBA9E82B0@YQBPR0101MB1585.CANPRD01.PROD.OUTLOOK.COM>,
 <03a88d7d-212f-6537-bb4a-5831b8f6b2fe@stats.ox.ac.uk>
Message-ID: <YQBPR0101MB15858B134A6CB99A3B91801BE8240@YQBPR0101MB1585.CANPRD01.PROD.OUTLOOK.COM>

Thanks Dr. Ripley,

Unfortunately it is no longer possible for new users to file bugs on the the R bugzilla. The current guidelines on https://www.r-project.org/bugs.html say to post here:

NOTE: due to abuse by spammers, since 2016-07-09 only ?members? (including all who have previously submitted bugs) can submit new bugs on R?s Bugzilla. For now, either post (e-mail) your bug report to R-devel or ask an R Core member to add you manually to R?s Bugzilla members.

Would you be able to add me to the bugzilla so that I can raise this there?

Thanks,

Chris
________________________________
From: Prof Brian Ripley <ripley at stats.ox.ac.uk>
Sent: April 16, 2019 10:24 AM
To: Christopher Hammill; r-devel at r-project.org
Subject: Re: [Rd] Feature request: make file.exists interruptable

The place for feature requests is bugs.r-project.org .

On 15/04/2019 18:44, Christopher Hammill wrote:
> Hi R developers,
>
> On slow file systems with large lists of files, file.exists can take a long time to run. It would be nice if users could interrupt this function. I think it would be simple to add:
>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__svn.r-2Dproject.org_R_trunk_src_main_platform.c&d=DwICaQ&c=Sj806OTFwmuG2UO1EEDr-2uZRzm2EPz39TfVBG2Km-o&r=lNvpYHQ4ryl-NV5xIfGm88weE3pfbkzPUhFP6JD9S0k&m=Cnn1q_4cCTrMD3ai1HxEiW5hlvocyLp-aeYwakHTkEg&s=txQR4ftIfgjYw9N4viGK_6JZv3sMwOk4VBRXQBVqTeI&e=,
>
> at line 1373, add "R_CheckUserInterrupt();" perhaps every some number of iterations if performance is a concern here.

It is a concern, and it is (very) unusual to call file.exists() on more
than one file (as its name implies).  Perhaps you could give us some
idea of what you are trying to do and how many files take how many
seconds on what OS/filesystem.

For completeness, dir.exists() can be used with more than one path and
potentially has the same issue.

--
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford

________________________________

This e-mail may contain confidential, personal and/or health information(information which may be subject to legal restrictions on use, retention and/or disclosure) for the sole use of the intended recipient. Any review or distribution by anyone other than the person for whom it was originally intended is strictly prohibited. If you have received this e-mail in error, please contact the sender and delete all copies.

	[[alternative HTML version deleted]]


From @@ren@t@@c|y@n @end|ng |rom |@t@@c@@t  Thu Apr 18 13:30:19 2019
From: @@ren@t@@c|y@n @end|ng |rom |@t@@c@@t (Saren Tasciyan)
Date: Thu, 18 Apr 2019 13:30:19 +0200
Subject: [Rd] Bug in the "reformulate" function in stats package
In-Reply-To: <23719.1502.248949.496054@stat.math.ethz.ch>
References: <ac491662-1aad-3775-1936-9e2694da50e6@ist.ac.at>
 <9409b485-7a3b-0f2c-201e-7ef2bde1de86@ist.ac.at>
 <23709.55119.213555.244342@stat.math.ethz.ch>
 <765cd87b-98d6-b23f-9a58-ad817fa5c6e5@ist.ac.at>
 <bad24743-b6e1-f4cd-97a5-8047c27c6707@gmail.com>
 <0c567c84-5c27-128c-584c-022d8d1f6892@gmail.com>
 <23717.41596.382159.209811@stat.math.ethz.ch>
 <ebdebd3e-a522-6fba-4f10-3fea3ea38aae@gmail.com>
 <23719.1502.248949.496054@stat.math.ethz.ch>
Message-ID: <db32594c-ffed-f41f-b6a8-c13b753d983e@ist.ac.at>

Hi,

Sorry for writing this late, I was very busy. I started this discussion 
here. I wish I could write to bugs.r-project.org, but I don't have an 
account and I will write here instead.

Meanwhile, I solved my problem with a simpler fix (please see attached 
file)/.
/

This requires that term labels are not "ticked". I think this is better, 
since it is easier to have column names unticked.

New development function is IMO unnecessarily complicated. It requires 
strings to be ticked or as.name(). It is more intuitive to have a vector 
of column names.

Best,

Saren


On 05.04.19 09:38, Martin Maechler wrote:
>>>>>> Ben Bolker
>>>>>>      on Thu, 4 Apr 2019 12:46:37 -0400 writes:
>    > Proposed patch
>
> Thank you Ben!
>
>
> [the rest is technical nit-picking .. but hopefully interesting
>   to the smart R-devel reader base:]
>
> There was a very subtle thinko in your patch which is not easily
> diagnosed from R's parse_Rd():
>
> Error in parse_Rd("/u/maechler/R/D/r-devel/R/src/library/stats/man/delete.response.Rd",  :
>    Unexpected end of input (in " quoted string opened at delete.response.Rd:78:63)
> In addition: Warning message:
> In parse_Rd("/u/maechler/R/D/r-devel/R/src/library/stats/man/delete.response.Rd",  :
>    newline within quoted string at delete.response.Rd:74
>
> and even I needed more than a minute to find out that the
> culprit was that
>
>    reformulate(sprintf("`%s`", x))
>
> is not ok in *.Rd  and must be
>
>    reformulate(sprintf("`\%s`", x))
>
> ---------
>
>    > (I think .txt files work OK as attachments to the list?)
>
> yes, typically -- what really counts is if your e-mail program
> marks them with MIME-type 'text/plain'
> and most E-mail programs are very "silly" / "safe" nowadays and
> don't expect to have smart users  and hence mark (and sometimes
> encode) everything unknown as non-text.
>
> Using very old flexible e-mail interfaces such as Emacs VM allow
> you to specify the MIME-type in addition to the file *and* it
> also proposes smart defaults, I think by using something like
> unix 'file' to determine that your 'foo.diff' file is plain text.
> {{ .. and we all know that Windows is sillily using file extensions
>     to determine file type and only knows  Windows-extensions plus
>     those added explicitly by software installed; so nowadays *.rda
>     is marked as an Rstudio file ... [argh].
> }}
>
> Martin
>
>      > On 2019-04-04 2:21 a.m., Martin Maechler wrote:
>      >>>>>>> Ben Bolker
>      >>>>>>> on Fri, 29 Mar 2019 12:34:50 -0400 writes:
>      >>
>      >> > I suspect that the issue is addressed (obliquely) in the examples,
>      >> > which shows that variables with spaces in them (or otherwise
>      >> > 'non-syntactic', i.e. not satisfying the constraints of legal R symbols)
>      >> > can be handled by protecting them with backticks  (``)
>      >>
>      >> > ## using non-syntactic names:
>      >> > reformulate(c("`P/E`", "`% Growth`"), response = as.name("+-"))
>      >>
>      >> > It seems to me there could be room for a *documentation* patch (stating
>      >> > explicitly that if termlabels has length > 1 its elements are
>      >> > concatenated with "+", and explicitly stating that non-syntactic names
>      >> > must be protected with back-ticks).  (There is a little bit of obscurity
>      >> > in the fact that the elements of termlabels don't have to be
>      >> > syntactically valid names: many will be included in formulas if they can
>      >> > be interpreted as *parseable* expressions, e.g. reformulate("x<2"))
>      >>
>      >> > I would be happy to give it a shot if the consensus is that it would
>      >> > be worthwhile.
>      >>
>      >> I think it would be worthwhile to add to the docs a bit.
>      >>
>      >> [With currently just your and my vote, we have a 100% consensus
>      >> ;-)]
>      >>
>      >> Martin
>      >>
>      >> > One workaround to the OP's problem is below (may be worth including
>      >> > as an example in docs)
>      >>
>      >> >> z <- c("a variable","another variable")
>      >> >> reformulate(z)
>      >> > Error in parse(text = termtext, keep.source = FALSE) :
>      >> > <text>:1:6: unexpected symbol
>      >> > 1:  ~ a variable
>      >> > ^
>      >> >> reformulate(sprintf("`%s`",z))
>      >> > ~`a variable` + `another variable`
>      >>
>      >>
>      >>
>      >>
>      >> > On 2019-03-29 11:54 a.m., J C Nash wrote:
>      >> >> The main thing is to post the "small reproducible example".
>      >> >>
>      >> >> My (rather long term experience) can be written
>      >> >>
>      >> >> if (exists("reproducible example") ) {
>      >> >> DeveloperFixHappens()
>      >> >> } else {
>      >> >> NULL
>      >> >> }
>      >> >>
>      >> >> JN
>      >> >>
>      >> >> On 2019-03-29 11:38 a.m., Saren Tasciyan wrote:
>      >> >>> Well, first I can't sign in bugzilla myself, that is why I wrote here first. Also, I don't know if I have the time at
>      >> >>> the moment to provide tests, multiple examples or more. If that is not ok or welcomed, that is fine, I can come back,
>      >> >>> whenever I have more time to properly report the bug.
>      >> >>>
>      >> >>> I didn't find the existing bug report, sorry for that.
>      >> >>>
>      >> >>> Yes, it is related. My problem was that I have column names with spaces and current solution doesn't solve it. I have a
>      >> >>> solution, which works for me and maybe also for others.
>      >> >>>
>      >> >>> Either, someone can register me to bugzilla or I can post it here, which could give some direction to developers. I
>      >> >>> don't mind whichever is preferred here.
>      >> >>>
>      >> >>> Best,
>      >> >>>
>      >> >>> Saren
>      >> >>>
>      >> >>>
>      >> >>> On 29.03.19 09:29, Martin Maechler wrote:
>      >> >>>>>>>>> Saren Tasciyan
>      >> >>>>>>>>> ???? on Thu, 28 Mar 2019 17:02:10 +0100 writes:
>      >> >>>> ???? > Hi,
>      >> >>>> ???? > I have found a bug in reformulate function and have a solution for it. I
>      >> >>>> ???? > was wondering, where I can submit it?
>      >> >>>>
>      >> >>>> ???? > Best,
>      >> >>>> ???? > Saren
>      >> >>>>
>      >> >>>>
>      >> >>>> Well, you could have given a small reproducible example
>      >> >>>> depicting the bug, notably when posting here:
>      >> >>>> Just a prose text with no R code or other technical content is
>      >> >>>> almost always not really appropriate fo the R-devel mailing list.
>      >> >>>>
>      >> >>>> Further, in such a case you should google a bit and hopefully
>      >> >>>> have found
>      >> >>>> ??????? https://www.r-project.org/bugs.html
>      >> >>>>
>      >> >>>> which also mention reproducibility (and many more useful things).
>      >> >>>>
>      >> >>>> Then it also tells you about R's bug repository, also called
>      >> >>>> "R's bugzilla" at https://bugs.r-project.org/
>      >> >>>>
>      >> >>>> and if you are diligent (but here, I'd say bugzilla is
>      >> >>>> (configured?) far from ideal), you'd also find bug PR#17359
>      >> >>>>
>      >> >>>> ??? https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17359
>      >> >>>>
>      >> >>>> which was reported already on Nov 2017 .. and only fixed
>      >> >>>> yesterday (in the "cleanup old bugs" process that happens
>      >> >>>> often before the big new spring release of R).
>      >> >>>>
>      >> >>>> So is your bug the same as that one?
>      >> >>>>
>      >> >>>> Martin
>      >> >>>>
>      >> >>>> ???? > --
>      >> >>>> ???? > Saren Tasciyan
>      >> >>>> ???? > /PhD Student / Sixt Group/
>      >> >>>> ???? > Institute of Science and Technology Austria
>      >> >>>> ???? > Am Campus 1
>      >> >>>> ???? > 3400 Klosterneuburg, Austria
>      >> >>>>
>      >> >>>> ???? > ______________________________________________
>      >> >>>> ???? > R-devel at r-project.org mailing list
>      >> >>>> ???? > https://stat.ethz.ch/mailman/listinfo/r-devel
>      >> >>>>
>      >> >>>> ______________________________________________
>      >> >>>> R-devel at r-project.org mailing list
>      >> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >> >>
>      >> >> ______________________________________________
>      >> >> R-devel at r-project.org mailing list
>      >> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >> >>
>      >>
>      >> > ______________________________________________
>      >> > R-devel at r-project.org mailing list
>      >> > https://stat.ethz.ch/mailman/listinfo/r-devel
>      >>
>      > x[DELETED ATTACHMENT external: reformulate.diff, plain text]
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
-- 
Saren Tasciyan
/PhD Student / Sixt Group/
Institute of Science and Technology Austria
Am Campus 1
3400 Klosterneuburg, Austria



From bbo|ker @end|ng |rom gm@||@com  Thu Apr 18 17:51:33 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 18 Apr 2019 11:51:33 -0400
Subject: [Rd] Bug in the "reformulate" function in stats package
In-Reply-To: <db32594c-ffed-f41f-b6a8-c13b753d983e@ist.ac.at>
References: <ac491662-1aad-3775-1936-9e2694da50e6@ist.ac.at>
 <9409b485-7a3b-0f2c-201e-7ef2bde1de86@ist.ac.at>
 <23709.55119.213555.244342@stat.math.ethz.ch>
 <765cd87b-98d6-b23f-9a58-ad817fa5c6e5@ist.ac.at>
 <bad24743-b6e1-f4cd-97a5-8047c27c6707@gmail.com>
 <0c567c84-5c27-128c-584c-022d8d1f6892@gmail.com>
 <23717.41596.382159.209811@stat.math.ethz.ch>
 <ebdebd3e-a522-6fba-4f10-3fea3ea38aae@gmail.com>
 <23719.1502.248949.496054@stat.math.ethz.ch>
 <db32594c-ffed-f41f-b6a8-c13b753d983e@ist.ac.at>
Message-ID: <d5cf30f0-adcd-a8c3-9bfa-746b88a5582a@gmail.com>


  Your file didn't make it through the mailing list (which is quite
restrictive about which types/extensions it will take).

  I appreciate your enthusiasm and persistence for this issue, but I
suspect you may have trouble convincing R-core to adopt your changes --
they are "better", "easier", "more intuitive" for you ... but how sure
are you they are completely backward compatible, have no performance
issues, will not break in unusual cases ... ?

  Hopefully someone here will set up a bugzilla account so you can post
your patch/it can be further discussed there, if you want to purseu this ...

  cheers
    Ben Bolker

On 2019-04-18 7:30 a.m., Saren Tasciyan wrote:
> Hi,
> 
> Sorry for writing this late, I was very busy. I started this discussion
> here. I wish I could write to bugs.r-project.org, but I don't have an
> account and I will write here instead.
> 
> Meanwhile, I solved my problem with a simpler fix (please see attached
> file)/.
> /
> 
> This requires that term labels are not "ticked". I think this is better,
> since it is easier to have column names unticked.
> 
> New development function is IMO unnecessarily complicated. It requires
> strings to be ticked or as.name(). It is more intuitive to have a vector
> of column names.
> 
> Best,
> 
> Saren
> 
> 
> On 05.04.19 09:38, Martin Maechler wrote:
>>>>>>> Ben Bolker
>>>>>>> ???? on Thu, 4 Apr 2019 12:46:37 -0400 writes:
>> ?? > Proposed patch
>>
>> Thank you Ben!
>>
>>
>> [the rest is technical nit-picking .. but hopefully interesting
>> ? to the smart R-devel reader base:]
>>
>> There was a very subtle thinko in your patch which is not easily
>> diagnosed from R's parse_Rd():
>>
>> Error in
>> parse_Rd("/u/maechler/R/D/r-devel/R/src/library/stats/man/delete.response.Rd",?
>> :
>> ?? Unexpected end of input (in " quoted string opened at
>> delete.response.Rd:78:63)
>> In addition: Warning message:
>> In
>> parse_Rd("/u/maechler/R/D/r-devel/R/src/library/stats/man/delete.response.Rd",?
>> :
>> ?? newline within quoted string at delete.response.Rd:74
>>
>> and even I needed more than a minute to find out that the
>> culprit was that
>>
>> ?? reformulate(sprintf("`%s`", x))
>>
>> is not ok in *.Rd? and must be
>>
>> ?? reformulate(sprintf("`\%s`", x))
>>
>> ---------
>>
>> ?? > (I think .txt files work OK as attachments to the list?)
>>
>> yes, typically -- what really counts is if your e-mail program
>> marks them with MIME-type 'text/plain'
>> and most E-mail programs are very "silly" / "safe" nowadays and
>> don't expect to have smart users? and hence mark (and sometimes
>> encode) everything unknown as non-text.
>>
>> Using very old flexible e-mail interfaces such as Emacs VM allow
>> you to specify the MIME-type in addition to the file *and* it
>> also proposes smart defaults, I think by using something like
>> unix 'file' to determine that your 'foo.diff' file is plain text.
>> {{ .. and we all know that Windows is sillily using file extensions
>> ??? to determine file type and only knows? Windows-extensions plus
>> ??? those added explicitly by software installed; so nowadays *.rda
>> ??? is marked as an Rstudio file ... [argh].
>> }}
>>
>> Martin
>>
>> ???? > On 2019-04-04 2:21 a.m., Martin Maechler wrote:
>> ???? >>>>>>> Ben Bolker
>> ???? >>>>>>> on Fri, 29 Mar 2019 12:34:50 -0400 writes:
>> ???? >>
>> ???? >> > I suspect that the issue is addressed (obliquely) in the
>> examples,
>> ???? >> > which shows that variables with spaces in them (or otherwise
>> ???? >> > 'non-syntactic', i.e. not satisfying the constraints of
>> legal R symbols)
>> ???? >> > can be handled by protecting them with backticks? (``)
>> ???? >>
>> ???? >> > ## using non-syntactic names:
>> ???? >> > reformulate(c("`P/E`", "`% Growth`"), response = as.name("+-"))
>> ???? >>
>> ???? >> > It seems to me there could be room for a *documentation*
>> patch (stating
>> ???? >> > explicitly that if termlabels has length > 1 its elements are
>> ???? >> > concatenated with "+", and explicitly stating that
>> non-syntactic names
>> ???? >> > must be protected with back-ticks).? (There is a little bit
>> of obscurity
>> ???? >> > in the fact that the elements of termlabels don't have to be
>> ???? >> > syntactically valid names: many will be included in formulas
>> if they can
>> ???? >> > be interpreted as *parseable* expressions, e.g.
>> reformulate("x<2"))
>> ???? >>
>> ???? >> > I would be happy to give it a shot if the consensus is that
>> it would
>> ???? >> > be worthwhile.
>> ???? >>
>> ???? >> I think it would be worthwhile to add to the docs a bit.
>> ???? >>
>> ???? >> [With currently just your and my vote, we have a 100% consensus
>> ???? >> ;-)]
>> ???? >>
>> ???? >> Martin
>> ???? >>
>> ???? >> > One workaround to the OP's problem is below (may be worth
>> including
>> ???? >> > as an example in docs)
>> ???? >>
>> ???? >> >> z <- c("a variable","another variable")
>> ???? >> >> reformulate(z)
>> ???? >> > Error in parse(text = termtext, keep.source = FALSE) :
>> ???? >> > <text>:1:6: unexpected symbol
>> ???? >> > 1:? ~ a variable
>> ???? >> > ^
>> ???? >> >> reformulate(sprintf("`%s`",z))
>> ???? >> > ~`a variable` + `another variable`
>> ???? >>
>> ???? >>
>> ???? >>
>> ???? >>
>> ???? >> > On 2019-03-29 11:54 a.m., J C Nash wrote:
>> ???? >> >> The main thing is to post the "small reproducible example".
>> ???? >> >>
>> ???? >> >> My (rather long term experience) can be written
>> ???? >> >>
>> ???? >> >> if (exists("reproducible example") ) {
>> ???? >> >> DeveloperFixHappens()
>> ???? >> >> } else {
>> ???? >> >> NULL
>> ???? >> >> }
>> ???? >> >>
>> ???? >> >> JN
>> ???? >> >>
>> ???? >> >> On 2019-03-29 11:38 a.m., Saren Tasciyan wrote:
>> ???? >> >>> Well, first I can't sign in bugzilla myself, that is why I
>> wrote here first. Also, I don't know if I have the time at
>> ???? >> >>> the moment to provide tests, multiple examples or more. If
>> that is not ok or welcomed, that is fine, I can come back,
>> ???? >> >>> whenever I have more time to properly report the bug.
>> ???? >> >>>
>> ???? >> >>> I didn't find the existing bug report, sorry for that.
>> ???? >> >>>
>> ???? >> >>> Yes, it is related. My problem was that I have column
>> names with spaces and current solution doesn't solve it. I have a
>> ???? >> >>> solution, which works for me and maybe also for others.
>> ???? >> >>>
>> ???? >> >>> Either, someone can register me to bugzilla or I can post
>> it here, which could give some direction to developers. I
>> ???? >> >>> don't mind whichever is preferred here.
>> ???? >> >>>
>> ???? >> >>> Best,
>> ???? >> >>>
>> ???? >> >>> Saren
>> ???? >> >>>
>> ???? >> >>>
>> ???? >> >>> On 29.03.19 09:29, Martin Maechler wrote:
>> ???? >> >>>>>>>>> Saren Tasciyan
>> ???? >> >>>>>>>>> ???? on Thu, 28 Mar 2019 17:02:10 +0100 writes:
>> ???? >> >>>> ???? > Hi,
>> ???? >> >>>> ???? > I have found a bug in reformulate function and
>> have a solution for it. I
>> ???? >> >>>> ???? > was wondering, where I can submit it?
>> ???? >> >>>>
>> ???? >> >>>> ???? > Best,
>> ???? >> >>>> ???? > Saren
>> ???? >> >>>>
>> ???? >> >>>>
>> ???? >> >>>> Well, you could have given a small reproducible example
>> ???? >> >>>> depicting the bug, notably when posting here:
>> ???? >> >>>> Just a prose text with no R code or other technical
>> content is
>> ???? >> >>>> almost always not really appropriate fo the R-devel
>> mailing list.
>> ???? >> >>>>
>> ???? >> >>>> Further, in such a case you should google a bit and
>> hopefully
>> ???? >> >>>> have found
>> ???? >> >>>> ??????? https://www.r-project.org/bugs.html
>> ???? >> >>>>
>> ???? >> >>>> which also mention reproducibility (and many more useful
>> things).
>> ???? >> >>>>
>> ???? >> >>>> Then it also tells you about R's bug repository, also called
>> ???? >> >>>> "R's bugzilla" at https://bugs.r-project.org/
>> ???? >> >>>>
>> ???? >> >>>> and if you are diligent (but here, I'd say bugzilla is
>> ???? >> >>>> (configured?) far from ideal), you'd also find bug PR#17359
>> ???? >> >>>>
>> ???? >> >>>> ???
>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17359
>> ???? >> >>>>
>> ???? >> >>>> which was reported already on Nov 2017 .. and only fixed
>> ???? >> >>>> yesterday (in the "cleanup old bugs" process that happens
>> ???? >> >>>> often before the big new spring release of R).
>> ???? >> >>>>
>> ???? >> >>>> So is your bug the same as that one?
>> ???? >> >>>>
>> ???? >> >>>> Martin
>> ???? >> >>>>
>> ???? >> >>>> ???? > --
>> ???? >> >>>> ???? > Saren Tasciyan
>> ???? >> >>>> ???? > /PhD Student / Sixt Group/
>> ???? >> >>>> ???? > Institute of Science and Technology Austria
>> ???? >> >>>> ???? > Am Campus 1
>> ???? >> >>>> ???? > 3400 Klosterneuburg, Austria
>> ???? >> >>>>
>> ???? >> >>>> ???? > ______________________________________________
>> ???? >> >>>> ???? > R-devel at r-project.org mailing list
>> ???? >> >>>> ???? > https://stat.ethz.ch/mailman/listinfo/r-devel
>> ???? >> >>>>
>> ???? >> >>>> ______________________________________________
>> ???? >> >>>> R-devel at r-project.org mailing list
>> ???? >> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ???? >> >>
>> ???? >> >> ______________________________________________
>> ???? >> >> R-devel at r-project.org mailing list
>> ???? >> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ???? >> >>
>> ???? >>
>> ???? >> > ______________________________________________
>> ???? >> > R-devel at r-project.org mailing list
>> ???? >> > https://stat.ethz.ch/mailman/listinfo/r-devel
>> ???? >>
>> ???? > x[DELETED ATTACHMENT external: reformulate.diff, plain text]
>> ???? > ______________________________________________
>> ???? > R-devel at r-project.org mailing list
>> ???? > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Apr 18 22:03:46 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 18 Apr 2019 22:03:46 +0200
Subject: [Rd] Bug in the "reformulate" function in stats package
In-Reply-To: <d5cf30f0-adcd-a8c3-9bfa-746b88a5582a@gmail.com>
References: <ac491662-1aad-3775-1936-9e2694da50e6@ist.ac.at>
 <9409b485-7a3b-0f2c-201e-7ef2bde1de86@ist.ac.at>
 <23709.55119.213555.244342@stat.math.ethz.ch>
 <765cd87b-98d6-b23f-9a58-ad817fa5c6e5@ist.ac.at>
 <bad24743-b6e1-f4cd-97a5-8047c27c6707@gmail.com>
 <0c567c84-5c27-128c-584c-022d8d1f6892@gmail.com>
 <23717.41596.382159.209811@stat.math.ethz.ch>
 <ebdebd3e-a522-6fba-4f10-3fea3ea38aae@gmail.com>
 <23719.1502.248949.496054@stat.math.ethz.ch>
 <db32594c-ffed-f41f-b6a8-c13b753d983e@ist.ac.at>
 <d5cf30f0-adcd-a8c3-9bfa-746b88a5582a@gmail.com>
Message-ID: <23736.55330.134134.895874@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Thu, 18 Apr 2019 11:51:33 -0400 writes:

    > Your file didn't make it through the mailing list (which is quite
    > restrictive about which types/extensions it will take).

    > I appreciate your enthusiasm and persistence for this issue, but I
    > suspect you may have trouble convincing R-core to adopt your changes --
    > they are "better", "easier", "more intuitive" for you ... but how sure
    > are you they are completely backward compatible, have no performance
    > issues, will not break in unusual cases ... ?

    > Hopefully someone here will set up a bugzilla account so you can post
    > your patch/it can be further discussed there, if you want to purseu this ...
This case has been closed quite a while ago, thank you.

The changes will be in R 3.6.0  that'll come in 8 days, not the
least thanks to Ben's patch (earlier in this thread).

Martin Maechler

    > cheers
    > Ben Bolker

    > On 2019-04-18 7:30 a.m., Saren Tasciyan wrote:
    >> Hi,
    >> 
    >> Sorry for writing this late, I was very busy. I started this discussion
    >> here. I wish I could write to bugs.r-project.org, but I don't have an
    >> account and I will write here instead.
    >> 
    >> Meanwhile, I solved my problem with a simpler fix (please see attached
    >> file)/.
    >> /
    >> 
    >> This requires that term labels are not "ticked". I think this is better,
    >> since it is easier to have column names unticked.
    >> 
    >> New development function is IMO unnecessarily complicated. It requires
    >> strings to be ticked or as.name(). It is more intuitive to have a vector
    >> of column names.
    >> 
    >> Best,
    >> 
    >> Saren
    >> 
    >> 
    >> On 05.04.19 09:38, Martin Maechler wrote:
    >>>>>>>> Ben Bolker
    >>>>>>>> ???? on Thu, 4 Apr 2019 12:46:37 -0400 writes:
    >>> ?? > Proposed patch
    >>> 
    >>> Thank you Ben!
    >>> 
    >>> 
    >>> [the rest is technical nit-picking .. but hopefully interesting
    >>> ? to the smart R-devel reader base:]
    >>> 
    >>> There was a very subtle thinko in your patch which is not easily
    >>> diagnosed from R's parse_Rd():
    >>> 
    >>> Error in
    >>> parse_Rd("/u/maechler/R/D/r-devel/R/src/library/stats/man/delete.response.Rd",?
    >>> :
    >>> ?? Unexpected end of input (in " quoted string opened at
    >>> delete.response.Rd:78:63)
    >>> In addition: Warning message:
    >>> In
    >>> parse_Rd("/u/maechler/R/D/r-devel/R/src/library/stats/man/delete.response.Rd",?
    >>> :
    >>> ?? newline within quoted string at delete.response.Rd:74
    >>> 
    >>> and even I needed more than a minute to find out that the
    >>> culprit was that
    >>> 
    >>> ?? reformulate(sprintf("`%s`", x))
    >>> 
    >>> is not ok in *.Rd? and must be
    >>> 
    >>> ?? reformulate(sprintf("`\%s`", x))
    >>> 
    >>> ---------
    >>> 
    >>> ?? > (I think .txt files work OK as attachments to the list?)
    >>> 
    >>> yes, typically -- what really counts is if your e-mail program
    >>> marks them with MIME-type 'text/plain'
    >>> and most E-mail programs are very "silly" / "safe" nowadays and
    >>> don't expect to have smart users? and hence mark (and sometimes
    >>> encode) everything unknown as non-text.
    >>> 
    >>> Using very old flexible e-mail interfaces such as Emacs VM allow
    >>> you to specify the MIME-type in addition to the file *and* it
    >>> also proposes smart defaults, I think by using something like
    >>> unix 'file' to determine that your 'foo.diff' file is plain text.
    >>> {{ .. and we all know that Windows is sillily using file extensions
    >>> ??? to determine file type and only knows? Windows-extensions plus
    >>> ??? those added explicitly by software installed; so nowadays *.rda
    >>> ??? is marked as an Rstudio file ... [argh].
    >>> }}
    >>> 
    >>> Martin
    >>> 
    >>> ???? > On 2019-04-04 2:21 a.m., Martin Maechler wrote:
    >>> ???? >>>>>>> Ben Bolker
    >>> ???? >>>>>>> on Fri, 29 Mar 2019 12:34:50 -0400 writes:
    >>> ???? >>
    >>> ???? >> > I suspect that the issue is addressed (obliquely) in the
    >>> examples,
    >>> ???? >> > which shows that variables with spaces in them (or otherwise
    >>> ???? >> > 'non-syntactic', i.e. not satisfying the constraints of
    >>> legal R symbols)
    >>> ???? >> > can be handled by protecting them with backticks? (``)
    >>> ???? >>
    >>> ???? >> > ## using non-syntactic names:
    >>> ???? >> > reformulate(c("`P/E`", "`% Growth`"), response = as.name("+-"))
    >>> ???? >>
    >>> ???? >> > It seems to me there could be room for a *documentation*
    >>> patch (stating
    >>> ???? >> > explicitly that if termlabels has length > 1 its elements are
    >>> ???? >> > concatenated with "+", and explicitly stating that
    >>> non-syntactic names
    >>> ???? >> > must be protected with back-ticks).? (There is a little bit
    >>> of obscurity
    >>> ???? >> > in the fact that the elements of termlabels don't have to be
    >>> ???? >> > syntactically valid names: many will be included in formulas
    >>> if they can
    >>> ???? >> > be interpreted as *parseable* expressions, e.g.
    >>> reformulate("x<2"))
    >>> ???? >>
    >>> ???? >> > I would be happy to give it a shot if the consensus is that
    >>> it would
    >>> ???? >> > be worthwhile.
    >>> ???? >>
    >>> ???? >> I think it would be worthwhile to add to the docs a bit.
    >>> ???? >>
    >>> ???? >> [With currently just your and my vote, we have a 100% consensus
    >>> ???? >> ;-)]
    >>> ???? >>
    >>> ???? >> Martin
    >>> ???? >>
    >>> ???? >> > One workaround to the OP's problem is below (may be worth
    >>> including
    >>> ???? >> > as an example in docs)
    >>> ???? >>
    >>> ???? >> >> z <- c("a variable","another variable")
    >>> ???? >> >> reformulate(z)
    >>> ???? >> > Error in parse(text = termtext, keep.source = FALSE) :
    >>> ???? >> > <text>:1:6: unexpected symbol
    >>> ???? >> > 1:? ~ a variable
    >>> ???? >> > ^
    >>> ???? >> >> reformulate(sprintf("`%s`",z))
    >>> ???? >> > ~`a variable` + `another variable`
    >>> ???? >>
    >>> ???? >>
    >>> ???? >>
    >>> ???? >>
    >>> ???? >> > On 2019-03-29 11:54 a.m., J C Nash wrote:
    >>> ???? >> >> The main thing is to post the "small reproducible example".
    >>> ???? >> >>
    >>> ???? >> >> My (rather long term experience) can be written
    >>> ???? >> >>
    >>> ???? >> >> if (exists("reproducible example") ) {
    >>> ???? >> >> DeveloperFixHappens()
    >>> ???? >> >> } else {
    >>> ???? >> >> NULL
    >>> ???? >> >> }
    >>> ???? >> >>
    >>> ???? >> >> JN
    >>> ???? >> >>
    >>> ???? >> >> On 2019-03-29 11:38 a.m., Saren Tasciyan wrote:
    >>> ???? >> >>> Well, first I can't sign in bugzilla myself, that is why I
    >>> wrote here first. Also, I don't know if I have the time at
    >>> ???? >> >>> the moment to provide tests, multiple examples or more. If
    >>> that is not ok or welcomed, that is fine, I can come back,
    >>> ???? >> >>> whenever I have more time to properly report the bug.
    >>> ???? >> >>>
    >>> ???? >> >>> I didn't find the existing bug report, sorry for that.
    >>> ???? >> >>>
    >>> ???? >> >>> Yes, it is related. My problem was that I have column
    >>> names with spaces and current solution doesn't solve it. I have a
    >>> ???? >> >>> solution, which works for me and maybe also for others.
    >>> ???? >> >>>
    >>> ???? >> >>> Either, someone can register me to bugzilla or I can post
    >>> it here, which could give some direction to developers. I
    >>> ???? >> >>> don't mind whichever is preferred here.
    >>> ???? >> >>>
    >>> ???? >> >>> Best,
    >>> ???? >> >>>
    >>> ???? >> >>> Saren
    >>> ???? >> >>>
    >>> ???? >> >>>
    >>> ???? >> >>> On 29.03.19 09:29, Martin Maechler wrote:
    >>> ???? >> >>>>>>>>> Saren Tasciyan
    >>> ???? >> >>>>>>>>> ???? on Thu, 28 Mar 2019 17:02:10 +0100 writes:
    >>> ???? >> >>>> ???? > Hi,
    >>> ???? >> >>>> ???? > I have found a bug in reformulate function and
    >>> have a solution for it. I
    >>> ???? >> >>>> ???? > was wondering, where I can submit it?
    >>> ???? >> >>>>
    >>> ???? >> >>>> ???? > Best,
    >>> ???? >> >>>> ???? > Saren
    >>> ???? >> >>>>
    >>> ???? >> >>>>
    >>> ???? >> >>>> Well, you could have given a small reproducible example
    >>> ???? >> >>>> depicting the bug, notably when posting here:
    >>> ???? >> >>>> Just a prose text with no R code or other technical
    >>> content is
    >>> ???? >> >>>> almost always not really appropriate fo the R-devel
    >>> mailing list.
    >>> ???? >> >>>>
    >>> ???? >> >>>> Further, in such a case you should google a bit and
    >>> hopefully
    >>> ???? >> >>>> have found
    >>> ???? >> >>>> ??????? https://www.r-project.org/bugs.html
    >>> ???? >> >>>>
    >>> ???? >> >>>> which also mention reproducibility (and many more useful
    >>> things).
    >>> ???? >> >>>>
    >>> ???? >> >>>> Then it also tells you about R's bug repository, also called
    >>> ???? >> >>>> "R's bugzilla" at https://bugs.r-project.org/
    >>> ???? >> >>>>
    >>> ???? >> >>>> and if you are diligent (but here, I'd say bugzilla is
    >>> ???? >> >>>> (configured?) far from ideal), you'd also find bug PR#17359
    >>> ???? >> >>>>
    >>> ???? >> >>>> ???
    >>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17359
    >>> ???? >> >>>>
    >>> ???? >> >>>> which was reported already on Nov 2017 .. and only fixed
    >>> ???? >> >>>> yesterday (in the "cleanup old bugs" process that happens
    >>> ???? >> >>>> often before the big new spring release of R).
    >>> ???? >> >>>>
    >>> ???? >> >>>> So is your bug the same as that one?
    >>> ???? >> >>>>
    >>> ???? >> >>>> Martin
    >>> ???? >> >>>>
    >>> ???? >> >>>> ???? > --
    >>> ???? >> >>>> ???? > Saren Tasciyan
    >>> ???? >> >>>> ???? > /PhD Student / Sixt Group/
    >>> ???? >> >>>> ???? > Institute of Science and Technology Austria
    >>> ???? >> >>>> ???? > Am Campus 1
    >>> ???? >> >>>> ???? > 3400 Klosterneuburg, Austria
    >>> ???? >> >>>>
    >>> ???? >> >>>> ???? > ______________________________________________
    >>> ???? >> >>>> ???? > R-devel at r-project.org mailing list
    >>> ???? >> >>>> ???? > https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> ???? >> >>>>
    >>> ???? >> >>>> ______________________________________________
    >>> ???? >> >>>> R-devel at r-project.org mailing list
    >>> ???? >> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> ???? >> >>
    >>> ???? >> >> ______________________________________________
    >>> ???? >> >> R-devel at r-project.org mailing list
    >>> ???? >> >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> ???? >> >>
    >>> ???? >>
    >>> ???? >> > ______________________________________________
    >>> ???? >> > R-devel at r-project.org mailing list
    >>> ???? >> > https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> ???? >>
    >>> ???? > x[DELETED ATTACHMENT external: reformulate.diff, plain text]
    >>> ???? > ______________________________________________
    >>> ???? > R-devel at r-project.org mailing list
    >>> ???? > https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @@ren@t@@c|y@n @end|ng |rom |@t@@c@@t  Thu Apr 18 22:21:37 2019
From: @@ren@t@@c|y@n @end|ng |rom |@t@@c@@t (Saren Tasciyan)
Date: Thu, 18 Apr 2019 22:21:37 +0200
Subject: [Rd] Bug in the "reformulate" function in stats package
In-Reply-To: <d5cf30f0-adcd-a8c3-9bfa-746b88a5582a@gmail.com>
References: <ac491662-1aad-3775-1936-9e2694da50e6@ist.ac.at>
 <9409b485-7a3b-0f2c-201e-7ef2bde1de86@ist.ac.at>
 <23709.55119.213555.244342@stat.math.ethz.ch>
 <765cd87b-98d6-b23f-9a58-ad817fa5c6e5@ist.ac.at>
 <bad24743-b6e1-f4cd-97a5-8047c27c6707@gmail.com>
 <0c567c84-5c27-128c-584c-022d8d1f6892@gmail.com>
 <23717.41596.382159.209811@stat.math.ethz.ch>
 <ebdebd3e-a522-6fba-4f10-3fea3ea38aae@gmail.com>
 <23719.1502.248949.496054@stat.math.ethz.ch>
 <db32594c-ffed-f41f-b6a8-c13b753d983e@ist.ac.at>
 <d5cf30f0-adcd-a8c3-9bfa-746b88a5582a@gmail.com>
Message-ID: <ae265c8e-951a-8973-84c0-081a3ca46d97@ist.ac.at>

So here is it as txt file. It is funny that a R file is restricted in 
R-devel mailing list.

Anyhow, in this case R-core have a few choices here:

  * ignore my solution
  * show that it is actually bad or worse
  * consider adding it

Considering, that it is a minor change from previous version and doesn't 
bother the existing usage, I saw the necessity to submit it here. But 
newer solution in the 3.6.0 may solve other problems too. I can't argue 
against that. This solves my part of the problem, without affecting 
existing usage of the function.

If R-core is hard to convince, because this is just who they are, then I 
should consider moving to other platforms. But so far, it seems to me 
that they are doing a great job. I don't mind also someone rejecting 
this tiny fix I have found, which works for me now. I can only thank for 
their time spent considering it.

Actually, I had in mind a more complex but cleaner solution with 
recursive functions to implement any kind of reformulation (not only 
with "+"). But I simple lack the big picture on R expressions, I need to 
read more. Maybe I will come back with that in the future.

Cheers to all,

Saren

On 18.04.19 17:51, Ben Bolker wrote:
>    I appreciate your enthusiasm and persistence for this issue, but I
> suspect you may have trouble convincing R-core to adopt your changes --
> they are "better", "easier", "more intuitive" for you ... but how sure
> are you they are completely backward compatible, have no performance
> issues, will not break in unusual cases ... ?
-- 
Saren Tasciyan
/PhD Student / Sixt Group/
Institute of Science and Technology Austria
Am Campus 1
3400 Klosterneuburg, Austria



-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: reformulate_solution.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190418/766f0577/attachment.txt>

From pd@|gd @end|ng |rom gm@||@com  Fri Apr 19 02:48:56 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 19 Apr 2019 02:48:56 +0200
Subject: [Rd] Bug in the "reformulate" function in stats package
In-Reply-To: <ae265c8e-951a-8973-84c0-081a3ca46d97@ist.ac.at>
References: <ac491662-1aad-3775-1936-9e2694da50e6@ist.ac.at>
 <9409b485-7a3b-0f2c-201e-7ef2bde1de86@ist.ac.at>
 <23709.55119.213555.244342@stat.math.ethz.ch>
 <765cd87b-98d6-b23f-9a58-ad817fa5c6e5@ist.ac.at>
 <bad24743-b6e1-f4cd-97a5-8047c27c6707@gmail.com>
 <0c567c84-5c27-128c-584c-022d8d1f6892@gmail.com>
 <23717.41596.382159.209811@stat.math.ethz.ch>
 <ebdebd3e-a522-6fba-4f10-3fea3ea38aae@gmail.com>
 <23719.1502.248949.496054@stat.math.ethz.ch>
 <db32594c-ffed-f41f-b6a8-c13b753d983e@ist.ac.at>
 <d5cf30f0-adcd-a8c3-9bfa-746b88a5582a@gmail.com>
 <ae265c8e-951a-8973-84c0-081a3ca46d97@ist.ac.at>
Message-ID: <41EDD673-A9F7-4545-B440-A79914C6442E@gmail.com>

I think that, also in R core, it is well recognized that it is unfortunate design that some formula manipulation tools rely on going via textual representation of the entire formula.
I'd be strongly tempted to replace the current reformulate() with something like this

> x <- c("a variable","another variable", "anormalone")
> lhs <- Reduce(function(x,y) bquote(.(x)+.(y)), lapply(x, as.name))
> as.formula(bquote(~.(lhs)))
~`a variable` + `another variable` + anormalone

However, there is a fair amount of conservatism because of the existing code base. 
In particular, one needs to watch out for nasty corner cases: E.g., reformulate(c("x","y","x:y")) contains an interaction term, not a regression variable `x:y`. It is not too clear that this is desirable, but it is quite likely that someone's code actually uses it as a feature. Of course, auto-quoting anything that isn't a plain variable name breaks the feature. And there's no progammatic way to tell whether "P/E" is intended as a variable name (price/earnings ratio) or as equal to "P + P:E", so if we want both possibilities there needs to be a way to choose between them.  Which puts us back at square one.

-pd 

> On 18 Apr 2019, at 22:21 , Saren Tasciyan <saren.tasciyan at ist.ac.at> wrote:
> 
> So here is it as txt file. It is funny that a R file is restricted in R-devel mailing list.
> 
> Anyhow, in this case R-core have a few choices here:
> 
> * ignore my solution
> * show that it is actually bad or worse
> * consider adding it
> 
> Considering, that it is a minor change from previous version and doesn't bother the existing usage, I saw the necessity to submit it here. But newer solution in the 3.6.0 may solve other problems too. I can't argue against that. This solves my part of the problem, without affecting existing usage of the function.
> 
> If R-core is hard to convince, because this is just who they are, then I should consider moving to other platforms. But so far, it seems to me that they are doing a great job. I don't mind also someone rejecting this tiny fix I have found, which works for me now. I can only thank for their time spent considering it.
> 
> Actually, I had in mind a more complex but cleaner solution with recursive functions to implement any kind of reformulation (not only with "+"). But I simple lack the big picture on R expressions, I need to read more. Maybe I will come back with that in the future.
> 
> Cheers to all,
> 
> Saren
> 
> On 18.04.19 17:51, Ben Bolker wrote:
>>   I appreciate your enthusiasm and persistence for this issue, but I
>> suspect you may have trouble convincing R-core to adopt your changes --
>> they are "better", "easier", "more intuitive" for you ... but how sure
>> are you they are completely backward compatible, have no performance
>> issues, will not break in unusual cases ... ?
> -- 
> Saren Tasciyan
> /PhD Student / Sixt Group/
> Institute of Science and Technology Austria
> Am Campus 1
> 3400 Klosterneuburg, Austria
> 
> 
> <reformulate_solution.txt>______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jte||er|@@rproject @end|ng |rom gm@||@com  Fri Apr 19 18:13:49 2019
From: jte||er|@@rproject @end|ng |rom gm@||@com (Juan Telleria Ruiz de Aguirre)
Date: Fri, 19 Apr 2019 18:13:49 +0200
Subject: [Rd] Managing Search Path Conflicts in R 3.6.0: Lazy Method
 Attachment into Search Path
Message-ID: <CAJXDcw1=Gu6Dj=Tp6yvqEU2w_gwpBKrt2WTBUHWdEYzypRT_DQ@mail.gmail.com>

Dear R Developers,

R 3.6.0 is going to introduce new features for managing search path
conflicts, explained in greater detail in the following article, and which
are greatly welcome:

https://developer.r-project.org/Blog/public/2019/03/19/managing-search-path-conflicts/index.html

In addition, another Conflict Policy could also be adopted, which I will
call "Lazy Method Attachment into the Search Path", understood as:

* All non-conflicting methods are always attached into the Search path.
* If a conflict occurs, method for a specific class object, is not
attached, unless you are going to use it, and then the user is asked in the
command prompt if you want it attached or not.

For example, if I set:

options(conflict.policy = "ask")

library(dplyr)
# All works fine.

df %>%
select(col1, col2)
# Works.

df %>%
filter(col1 == "a")
#> Do you want to attach data.frame.filter Method? y/n?

This approach would be great for dynamic programming and R Scripting, and
lay somewhere between R Core / @Luke Tierney's approach and "conflicted"
package.

Thank you!

	[[alternative HTML version deleted]]


From j@ck @end|ng |rom j@ckw@@ey@com  Thu Apr 18 23:07:37 2019
From: j@ck @end|ng |rom j@ckw@@ey@com (Jack Wasey)
Date: Thu, 18 Apr 2019 17:07:37 -0400
Subject: [Rd] R prompt updates are not validated
Message-ID: <90c94996-89c1-4f48-3874-f914e9b2f431@jackwasey.com>

I was trying to get an interactive R prompt with the current working directory. I reviewed R source 'main.c' and 'options.c', and saw that a 20 char buffer is used when in Browse debugging mode, but that no other validation is done on the length of the prompt option.

This hangs R, or takes extremely long to return:

# R --vanilla
big <- paste(sample(LETTERS, size = 1e7, replace = TRUE), collapse = "")                                                                               
options(prompt = big)

Running R with gdb and interrupting to get backtraces shows that 'pushReadLine' in 'unix/sys-std.c' results in a chain of libreadline calls, including, in my case at least, UTF-8 and a lot of __strlen_avx2 activity. 'R_PromptString' in 'main.c' should check prompt is a reasonable length, as well as a check when setting the prompt in 'options.c'. This may be a readline bug, too? I watched it do nothing for a while, it didn't seem to accumulate much or any new memory while watching 'top', but did max one core of CPU.

> sessionInfo()
R version 3.5.3 (2019-03-11)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 19.04

Matrix products: default
BLAS: /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.3.5.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.5.3
> 

I've searched R-devel and see minimal discussion of security threats in R. Has anybody fuzzed R with data or source files? As R grows in popularity, I hope there is some pro-active security work going on, which I understand may not always best be done on a public mailing list.

Jack Wasey


From irederik m@iii@g oii oib@@et  Sat Apr 20 07:27:28 2019
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Fri, 19 Apr 2019 22:27:28 -0700
Subject: [Rd] src/modules/X11/devX11.c, can we remove "#if BUG" yet
Message-ID: <20190420052728.7tgjr4zxqdddsimm@localhost>

Dear R Devel,

I know that someone put this line in src/modules/X11/devX11.c:2824 for
a reason, because commenting it out causes R to miss an important
ConfigureNotify event in my window manager. The result is that plots
are initially drawn off the window borders, unreadable.

     R_ProcessX11Events((void*) NULL);

Unfortunately for me, this line is commented in the standard release
of R, it has "#if BUG ... #endif" around it.

I guess it is also unfortunate for anyone who uses the same window
manager as I do, namely i3, which I think is pretty popular among Unix
power users these days; not to mention other full-screen window
managers which probably exhibit the same bug in R.

Maybe everyone on the Core team uses twm as their window manager? Or
RStudio on Windows? Which would be sad because then we're not
representing an important user demographic, namely those who prefer
software which is modern and powerful, yet simple to understand and
modify; fully configurable and interoperable and so on.

I first reported this bug 3 years ago. In doing research for my bug
report, I found that the line was commented out by Peter Dalgaard in
2001 with the explanation "X11 segfault fix - I hope".

I don't know what the way forward is. Obviously the Core Team has
reason to say, "look, this isn't very important, it's been broken
since 2001, maybe fixing it will cause the undocumented segfault bug
to reappear, clearly no one here uses your window manager". Do I have
to submit a correctness proof for the proposed change? What do I do?

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702

As mentioned in my bug report, I checked using gdb that
ConfigureNotify is indeed being received by the call to
R_ProcessX11Events() when it is uncommented. I haven't experienced any
segfaults.

It's good that Peter left evidence that "R_ProcessX11Events" was being
called 18 years ago from X11DeviceDriver(). If he had deleted the
line, rather than commenting it, then discovering the reason for the
window rendering bug would have been much harder for me.

However, the downside is that now it is not just a matter of inserting
the line where it belongs; I also feel a bit like I have to explain
why it was initially removed. But although I've given it some thought,
I still have no idea.

Somewhat tangentially, I am wondering if there is some way that we
could make the development of R's graphics code proceed at a faster
rate, for example by pulling it out into a separate module, so that
people could offer alternative implementations via CRAN etc., rather
than having R Core be the bottleneck. Would this make sense? Has it
already been done?

Thank you,

Frederick


From hp@ge@ @end|ng |rom |redhutch@org  Sat Apr 20 22:39:32 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Sat, 20 Apr 2019 20:39:32 +0000
Subject: [Rd] update.package() asking even when asked to not ask
Message-ID: <e1326c65-dedd-e4e6-d625-6f81931b5e84@fredhutch.org>

Hi,

I was trying to update packages today on one of our MacOS servers, and 
got this:

 ? > update.packages(ask=FALSE)

 ? ? There is a binary version available but the source version is later:
 ?? ???? binary source needs_compilation
 ? gsl 1.9-10.3? 2.1-6????????????? TRUE

 ? Do you want to install from sources the package which needs 
compilation? (Yes/no/cancel)

So it looks like 'ask=FALSE' only turns off one type of question. What 
is not immediately obvious is that in order to also turn off the type of 
question asked above one needs to set 'type' either to 
"mac.binary.el-capitan" or "source" (by default 'type' is set to "both" 
on Mac).

Some clarification in the man page about the scope of 'ask=FALSE' would 
be welcome, with possibly some hint about how to turn off all questions.

Thanks,

H.

 > sessionInfo()
R version 3.6.0 beta (2019-04-16 r76403)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: OS X El Capitan 10.11.6

Matrix products: default
BLAS: 
/Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: 
/Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats???? graphics? grDevices utils???? datasets? methods base

loaded via a namespace (and not attached):
[1] compiler_3.6.0 tools_3.6.0

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From btyner @end|ng |rom gm@||@com  Sun Apr 21 22:56:29 2019
From: btyner @end|ng |rom gm@||@com (Benjamin Tyner)
Date: Sun, 21 Apr 2019 16:56:29 -0400
Subject: [Rd] R-devel (rev 76409) fails 'make check': non-generic function
 'isSymmetric' given to findMethods()
Message-ID: <509352e9-55d5-2fbe-553d-428764c8bf77@gmail.com>

Hello,

Most likely I'm doing something wrong, but am at a loss as to what the 
issue is. I have a clean checkout of trunk here:

 ?? ~/svn/r-devel/R$ svn info
 ?? Path: .
 ?? Working Copy Root Path: /home/btyner/svn/r-devel/R
 ?? URL: https://svn.r-project.org/R/trunk
 ?? Relative URL: ^/trunk
 ?? Repository Root: https://svn.r-project.org/R
 ?? Repository UUID: 00db46b3-68df-0310-9c12-caf00c1e9a41
 ?? Revision: 76409
 ?? Node Kind: directory
 ?? Schedule: normal
 ?? Last Changed Author: ripley
 ?? Last Changed Rev: 76409
 ?? Last Changed Date: 2019-04-21 06:32:24 -0400 (Sun, 21 Apr 2019)

I then ran:

 ?? mkdir ~/svn/R-devel-build
 ?? cd ~/svn/R-devel-build
 ?? ../r-devel/R/configure --prefix=/home/btyner/R-76409 
--enable-R-shlib --with-blas --with-lapack --with-readline 
--without-recommended-packages
 ?? make
 ?? make check

which fails at reg-tests-1d.R; the failure being:

 ?? > ## str() now even works with invalid objects:
 ?? > moS <- mo <- findMethods("isSymmetric")
 ?? Error in findMethods("isSymmetric") :
 ? ?? (converted from warning) non-generic function 'isSymmetric' given 
to findMethods()
 ?? Execution halted

I am able to build revision 76407 from source just fine (using 
https://cran.r-project.org/src/base-prerelease/R-devel_2019-04-20_r76407.tar.gz) 
and all make check tests are successful.

Any ideas? Here is my sessionInfo() from the revision 76407 build:

    R Under development (unstable) (2019-04-20 r76407)
    Platform: x86_64-pc-linux-gnu (64-bit)
    Running under: Ubuntu 18.04.2 LTS

    Matrix products: default
    BLAS: /home/btyner/R-devel_2019-04-20_r76407/lib64/R/lib/libRblas.so
    LAPACK: /home/btyner/R-devel_2019-04-20_r76407/lib64/R/lib/libRlapack.so

    locale:
     ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
     ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=en_US.UTF-8
     ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
     ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
     ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
    [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

    attached base packages:
    [1] stats???? graphics? grDevices utils???? datasets? methods base

    loaded via a namespace (and not attached):
    [1] compiler_3.7.0

Regards,

Ben


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Apr 22 01:47:59 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 21 Apr 2019 19:47:59 -0400
Subject: [Rd] 
 R-devel (rev 76409) fails 'make check': non-generic function
 'isSymmetric' given to findMethods()
In-Reply-To: <509352e9-55d5-2fbe-553d-428764c8bf77@gmail.com>
References: <509352e9-55d5-2fbe-553d-428764c8bf77@gmail.com>
Message-ID: <2b58b368-0c61-2920-f476-b286ea4368c9@gmail.com>

On 21/04/2019 4:56 p.m., Benjamin Tyner wrote:
> Hello,
> 
> Most likely I'm doing something wrong, but am at a loss as to what the
> issue is. I have a clean checkout of trunk here: >
>   ?? ~/svn/r-devel/R$ svn info
>   ?? Path: .
>   ?? Working Copy Root Path: /home/btyner/svn/r-devel/R
>   ?? URL: https://svn.r-project.org/R/trunk
>   ?? Relative URL: ^/trunk
>   ?? Repository Root: https://svn.r-project.org/R
>   ?? Repository UUID: 00db46b3-68df-0310-9c12-caf00c1e9a41
>   ?? Revision: 76409
>   ?? Node Kind: directory
>   ?? Schedule: normal
>   ?? Last Changed Author: ripley
>   ?? Last Changed Rev: 76409
>   ?? Last Changed Date: 2019-04-21 06:32:24 -0400 (Sun, 21 Apr 2019)
> 
> I then ran:
> 
>   ?? mkdir ~/svn/R-devel-build
>   ?? cd ~/svn/R-devel-build
>   ?? ../r-devel/R/configure --prefix=/home/btyner/R-76409
> --enable-R-shlib --with-blas --with-lapack --with-readline
> --without-recommended-packages
>   ?? make
>   ?? make check
> 
> which fails at reg-tests-1d.R; the failure being:
> 
>   ?? > ## str() now even works with invalid objects:
>   ?? > moS <- mo <- findMethods("isSymmetric")
>   ?? Error in findMethods("isSymmetric") :
>   ? ?? (converted from warning) non-generic function 'isSymmetric' given
> to findMethods()
>   ?? Execution halted

Likely the problem is that you don't have the recommended packages 
loaded.  When I was running tests regularly, they were required.  Later, 
I think they became optional.  Perhaps a new test has been added that 
once again assumes the required packages are installed.

Duncan Murdoch

> 
> I am able to build revision 76407 from source just fine (using
> https://cran.r-project.org/src/base-prerelease/R-devel_2019-04-20_r76407.tar.gz)
> and all make check tests are successful.
> 
> Any ideas? Here is my sessionInfo() from the revision 76407 build:
> 
>      R Under development (unstable) (2019-04-20 r76407)
>      Platform: x86_64-pc-linux-gnu (64-bit)
>      Running under: Ubuntu 18.04.2 LTS
> 
>      Matrix products: default
>      BLAS: /home/btyner/R-devel_2019-04-20_r76407/lib64/R/lib/libRblas.so
>      LAPACK: /home/btyner/R-devel_2019-04-20_r76407/lib64/R/lib/libRlapack.so
> 
>      locale:
>       ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
>       ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=en_US.UTF-8
>       ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
>       ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
>       ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
>      [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> 
>      attached base packages:
>      [1] stats???? graphics? grDevices utils???? datasets? methods base
> 
>      loaded via a namespace (and not attached):
>      [1] compiler_3.7.0
> 
> Regards,
> 
> Ben
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From btyner @end|ng |rom gm@||@com  Mon Apr 22 03:02:30 2019
From: btyner @end|ng |rom gm@||@com (Benjamin Tyner)
Date: Sun, 21 Apr 2019 21:02:30 -0400
Subject: [Rd] 
 R-devel (rev 76409) fails 'make check': non-generic function
 'isSymmetric' given to findMethods()
In-Reply-To: <2b58b368-0c61-2920-f476-b286ea4368c9@gmail.com>
References: <509352e9-55d5-2fbe-553d-428764c8bf77@gmail.com>
 <2b58b368-0c61-2920-f476-b286ea4368c9@gmail.com>
Message-ID: <cc35729e-6ea2-4271-ba04-3bc9a513b0f7@gmail.com>

Duncan that does indeed look to be the case. Many thanks!

In particular, tests/reg-tests-1d.R optionally loads the Matrix 
namespace which allows the test to succeed. Compare:

    ~/R-rc_2019-04-21_r76409/bin/Rscript -e "options(warn=2);
    library(Matrix); res <- findMethods('isSymmetric'); print('success')"
    [1] "success"

versus

    ~/R-rc_2019-04-21_r76409/bin/Rscript -e "options(warn=2); res <-
    findMethods('isSymmetric'); print('success')"
    Error in findMethods("isSymmetric") :
     ? (converted from warning) non-generic function 'isSymmetric' given
    to findMethods()
    Execution halted


On 4/21/19 7:47 PM, Duncan Murdoch wrote:
>
> Likely the problem is that you don't have the recommended packages 
> loaded.? When I was running tests regularly, they were required. 
> Later, I think they became optional.? Perhaps a new test has been 
> added that once again assumes the required packages are installed.
>
> Duncan Murdoch
>


From hp@ge@ @end|ng |rom |redhutch@org  Mon Apr 22 08:16:05 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Mon, 22 Apr 2019 06:16:05 +0000
Subject: [Rd] 
 R CMD check does not report redundant '...' argument described
 in Rd File
In-Reply-To: <438D2EC9EAFE5946B2D5864670EA468E018F7165E6@MBXP02.ds.man.ac.uk>
References: <438D2EC9EAFE5946B2D5864670EA468E018F7165E6@MBXP02.ds.man.ac.uk>
Message-ID: <f1e61991-efab-c731-3124-c0d575d812f0@fredhutch.org>

Hi,

FWIW I also noticed this problem and reported it on R?s Bugzilla 4 years 
ago:

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16223

I actually had to report it twice because my first report 
(https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16153) was closed 
after a few days and tagged as NOT REPRODUCIBLE.

Cheers,
H.


On 4/16/19 23:42, Georgi Boshnakov wrote:
> R's checks seem to be failing to notice a redundant '...' argument described in the documentation of a function.
>
> Consider a function:
>
> fun_3 <- function(arg1, arg2, arg3) {
>      "I am fun_3"
> }
>
> If its documentation describes an argument, say 'dummy', R check reports something like:
>
> * checking Rd \usage sections ... WARNING
> Documented arguments not in \usage in documentation object 'fun_3b':
>    'dummy'
> ...
>
> But if the non-existent argument is '...' or '\dots' there is no warning. The omission seems specific to the 'dots' argument.
>
> Checked under Windows on win-builder on 17 April 2018 with
> R version 3.6.0 beta (2019-04-16 r76403), R version 3.5.3 (2019-03-11) and
> R version 3.4.4 (2018-03-15).
>
> A minimal package illustrating this is at
> https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_GeoBosh_reprexes_tree_master_redundantDots&d=DwIFAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=i9g7pqJ1WilGjLfFwtSiajoznNNRWj8CWL0sdNSLKFM&s=8pmMlfLXNctV2CZNAADigKW4C_ZU5phJ5J3EhY7gq7U&e=
>
>
> Georgi Boshnakov
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=i9g7pqJ1WilGjLfFwtSiajoznNNRWj8CWL0sdNSLKFM&s=VepWHiukhgfnvGnmA3S-5XhITPslNPVKxWwlBeazkEY&e=

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From btyner @end|ng |rom gm@||@com  Wed Apr 24 01:45:07 2019
From: btyner @end|ng |rom gm@||@com (Benjamin Tyner)
Date: Tue, 23 Apr 2019 19:45:07 -0400
Subject: [Rd] 
 R-devel (rev 76409) fails 'make check': non-generic function
 'isSymmetric' given to findMethods()
In-Reply-To: <cc35729e-6ea2-4271-ba04-3bc9a513b0f7@gmail.com>
References: <509352e9-55d5-2fbe-553d-428764c8bf77@gmail.com>
 <2b58b368-0c61-2920-f476-b286ea4368c9@gmail.com>
 <cc35729e-6ea2-4271-ba04-3bc9a513b0f7@gmail.com>
Message-ID: <8cd93755-1b7c-ba44-9519-50d4a5efbf96@gmail.com>

Looks fixed as of revision 76417; thanks Brian!

On 4/21/19 9:02 PM, Benjamin Tyner wrote:
> Duncan that does indeed look to be the case. Many thanks!
>
> In particular, tests/reg-tests-1d.R optionally loads the Matrix 
> namespace which allows the test to succeed. Compare:
>
> ?? ~/R-rc_2019-04-21_r76409/bin/Rscript -e "options(warn=2);
> ?? library(Matrix); res <- findMethods('isSymmetric'); print('success')"
> ?? [1] "success"
>
> versus
>
> ?? ~/R-rc_2019-04-21_r76409/bin/Rscript -e "options(warn=2); res <-
> ?? findMethods('isSymmetric'); print('success')"
> ?? Error in findMethods("isSymmetric") :
> ??? ? (converted from warning) non-generic function 'isSymmetric' given
> ?? to findMethods()
> ?? Execution halted
>
>
> On 4/21/19 7:47 PM, Duncan Murdoch wrote:
>>
>> Likely the problem is that you don't have the recommended packages 
>> loaded.? When I was running tests regularly, they were required. 
>> Later, I think they became optional.? Perhaps a new test has been 
>> added that once again assumes the required packages are installed.
>>
>> Duncan Murdoch
>>


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Wed Apr 24 02:30:44 2019
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Wed, 24 Apr 2019 12:30:44 +1200
Subject: [Rd] 
 [FORGED]  src/modules/X11/devX11.c, can we remove "#if BUG" yet
In-Reply-To: <20190420052728.7tgjr4zxqdddsimm@localhost>
References: <20190420052728.7tgjr4zxqdddsimm@localhost>
Message-ID: <3badc471-0698-42e1-581a-2988eb3bf818@stat.auckland.ac.nz>

Hi

Sorry, I can't offer an explanation for the commented-out line.
However, regarding your final question of avoiding the R-core 
bottleneck, you do have the option of creating a third-party graphics 
device package.  See, for example, the 'tikzDevice' and 'svglite' 
packages on CRAN.  Does that provide you with a way forward ?

Paul

On 20/04/2019 5:27 p.m., frederik at ofb.net wrote:
> Dear R Devel,
>
> I know that someone put this line in src/modules/X11/devX11.c:2824 for
> a reason, because commenting it out causes R to miss an important
> ConfigureNotify event in my window manager. The result is that plots
> are initially drawn off the window borders, unreadable.
>
>     R_ProcessX11Events((void*) NULL);
>
> Unfortunately for me, this line is commented in the standard release
> of R, it has "#if BUG ... #endif" around it.
>
> I guess it is also unfortunate for anyone who uses the same window
> manager as I do, namely i3, which I think is pretty popular among Unix
> power users these days; not to mention other full-screen window
> managers which probably exhibit the same bug in R.
>
> Maybe everyone on the Core team uses twm as their window manager? Or
> RStudio on Windows? Which would be sad because then we're not
> representing an important user demographic, namely those who prefer
> software which is modern and powerful, yet simple to understand and
> modify; fully configurable and interoperable and so on.
>
> I first reported this bug 3 years ago. In doing research for my bug
> report, I found that the line was commented out by Peter Dalgaard in
> 2001 with the explanation "X11 segfault fix - I hope".
>
> I don't know what the way forward is. Obviously the Core Team has
> reason to say, "look, this isn't very important, it's been broken
> since 2001, maybe fixing it will cause the undocumented segfault bug
> to reappear, clearly no one here uses your window manager". Do I have
> to submit a correctness proof for the proposed change? What do I do?
>
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702
>
> As mentioned in my bug report, I checked using gdb that
> ConfigureNotify is indeed being received by the call to
> R_ProcessX11Events() when it is uncommented. I haven't experienced any
> segfaults.
>
> It's good that Peter left evidence that "R_ProcessX11Events" was being
> called 18 years ago from X11DeviceDriver(). If he had deleted the
> line, rather than commenting it, then discovering the reason for the
> window rendering bug would have been much harder for me.
>
> However, the downside is that now it is not just a matter of inserting
> the line where it belongs; I also feel a bit like I have to explain
> why it was initially removed. But although I've given it some thought,
> I still have no idea.
>
> Somewhat tangentially, I am wondering if there is some way that we
> could make the development of R's graphics code proceed at a faster
> rate, for example by pulling it out into a separate module, so that
> people could offer alternative implementations via CRAN etc., rather
> than having R Core be the bottleneck. Would this make sense? Has it
> already been done?
>
> Thank you,
>
> Frederick
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From irederik m@iii@g oii oib@@et  Wed Apr 24 04:05:11 2019
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Tue, 23 Apr 2019 19:05:11 -0700
Subject: [Rd] 
 [FORGED]  src/modules/X11/devX11.c, can we remove "#if BUG" yet
In-Reply-To: <3badc471-0698-42e1-581a-2988eb3bf818@stat.auckland.ac.nz>
References: <20190420052728.7tgjr4zxqdddsimm@localhost>
 <3badc471-0698-42e1-581a-2988eb3bf818@stat.auckland.ac.nz>
Message-ID: <20190424020511.b2wjagtjqm5cfewl@localhost>

Thanks Paul for answering the additional question.

I admit that I've only had experience with R's X11 code through work
on a couple of bugs, but for some reason I thought it might be
nontrivial to move it all into a self-contained module due to
interactions with various event loops. The two modules you listed
appear to be used for producing output in image and document formats,
so they don't really cast light on whether this is a problem.

I am not very serious about contributing my time to an effort like
this, but maybe it is good to have some discussion here anyway. I had
thought that maybe authors of alternative plotting interfaces would
have something to say about whether the current graphics design
provides sufficient modularity. Obviously it is modular enough for
RStudio to exist.

Other improvements aside, I think it would just be better to comment
out the old "#if BUG" line, and wait for someone to complain if it
breaks something. A lot has been changed since that line was added, as
I explained in the bug report. I would expect that the bug it was
attempting to fix no longer exists.

Otherwise, what is the next milestone on this bug?

Frederick

On Wed, Apr 24, 2019 at 12:30:44PM +1200, Paul Murrell wrote:
>Hi
>
>Sorry, I can't offer an explanation for the commented-out line.
>However, regarding your final question of avoiding the R-core 
>bottleneck, you do have the option of creating a third-party graphics 
>device package.  See, for example, the 'tikzDevice' and 'svglite' 
>packages on CRAN.  Does that provide you with a way forward ?
>
>Paul
>
>On 20/04/2019 5:27 p.m., frederik at ofb.net wrote:
>>Dear R Devel,
>>
>>I know that someone put this line in src/modules/X11/devX11.c:2824 for
>>a reason, because commenting it out causes R to miss an important
>>ConfigureNotify event in my window manager. The result is that plots
>>are initially drawn off the window borders, unreadable.
>>
>>    R_ProcessX11Events((void*) NULL);
>>
>>Unfortunately for me, this line is commented in the standard release
>>of R, it has "#if BUG ... #endif" around it.
>>
>>I guess it is also unfortunate for anyone who uses the same window
>>manager as I do, namely i3, which I think is pretty popular among Unix
>>power users these days; not to mention other full-screen window
>>managers which probably exhibit the same bug in R.
>>
>>Maybe everyone on the Core team uses twm as their window manager? Or
>>RStudio on Windows? Which would be sad because then we're not
>>representing an important user demographic, namely those who prefer
>>software which is modern and powerful, yet simple to understand and
>>modify; fully configurable and interoperable and so on.
>>
>>I first reported this bug 3 years ago. In doing research for my bug
>>report, I found that the line was commented out by Peter Dalgaard in
>>2001 with the explanation "X11 segfault fix - I hope".
>>
>>I don't know what the way forward is. Obviously the Core Team has
>>reason to say, "look, this isn't very important, it's been broken
>>since 2001, maybe fixing it will cause the undocumented segfault bug
>>to reappear, clearly no one here uses your window manager". Do I have
>>to submit a correctness proof for the proposed change? What do I do?
>>
>>https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702
>>
>>As mentioned in my bug report, I checked using gdb that
>>ConfigureNotify is indeed being received by the call to
>>R_ProcessX11Events() when it is uncommented. I haven't experienced any
>>segfaults.
>>
>>It's good that Peter left evidence that "R_ProcessX11Events" was being
>>called 18 years ago from X11DeviceDriver(). If he had deleted the
>>line, rather than commenting it, then discovering the reason for the
>>window rendering bug would have been much harder for me.
>>
>>However, the downside is that now it is not just a matter of inserting
>>the line where it belongs; I also feel a bit like I have to explain
>>why it was initially removed. But although I've given it some thought,
>>I still have no idea.
>>
>>Somewhat tangentially, I am wondering if there is some way that we
>>could make the development of R's graphics code proceed at a faster
>>rate, for example by pulling it out into a separate module, so that
>>people could offer alternative implementations via CRAN etc., rather
>>than having R Core be the bottleneck. Would this make sense? Has it
>>already been done?
>>
>>Thank you,
>>
>>Frederick
>>
>>______________________________________________
>>R-devel at r-project.org mailing list
>>https://stat.ethz.ch/mailman/listinfo/r-devel
>
>-- 
>Dr Paul Murrell
>Department of Statistics
>The University of Auckland
>Private Bag 92019
>Auckland
>New Zealand
>64 9 3737599 x85392
>paul at stat.auckland.ac.nz
>http://www.stat.auckland.ac.nz/~paul/
>


From pd@|gd @end|ng |rom gm@||@com  Wed Apr 24 11:42:01 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 24 Apr 2019 11:42:01 +0200
Subject: [Rd] 
 [FORGED]  src/modules/X11/devX11.c, can we remove "#if BUG" yet
In-Reply-To: <3badc471-0698-42e1-581a-2988eb3bf818@stat.auckland.ac.nz>
References: <20190420052728.7tgjr4zxqdddsimm@localhost>
 <3badc471-0698-42e1-581a-2988eb3bf818@stat.auckland.ac.nz>
Message-ID: <4FEA2AD4-C0A6-4CEE-AB30-CD8AE209ED24@gmail.com>

I don't recall exactly what I did 18 years ago eiher and I likely don't have the time to dig into the archives and reconstruct.

I can imagine that the issue had to do with the protocol around creating and mapping windows. Presumably the segfault comes from looking for events on a window that hasn't been created yet, or has already been destroyed, leading to a NULL reference somewhere. I have a vague recollection that the issue was window manager dependent (in 2001 probably not twm, more likely xvwm on RedHat if it was affecting me). 

A proper fix should go via proper understanding of the X11 protocol - uncommenting a line is as bad as commenting it in the 1st place.... So more like "wait for window to exist THEN process events" -- but the 1st part may be WM specific, etc. 

I recall docs being quite obtuse, and the X11 "mechanism not policy" credo doesn't help as WMs are not obliged to (say) send notifications, so you can end up stalling, waiting for events that never happen.

It is entirely possible that there is stuff in here that I didn't understand properly at the time, and still don't!

- pd

> On 24 Apr 2019, at 02:30 , Paul Murrell <paul at stat.auckland.ac.nz> wrote:
> 
> Hi
> 
> Sorry, I can't offer an explanation for the commented-out line.
> However, regarding your final question of avoiding the R-core bottleneck, you do have the option of creating a third-party graphics device package.  See, for example, the 'tikzDevice' and 'svglite' packages on CRAN.  Does that provide you with a way forward ?
> 
> Paul
> 
> On 20/04/2019 5:27 p.m., frederik at ofb.net wrote:
>> Dear R Devel,
>> 
>> I know that someone put this line in src/modules/X11/devX11.c:2824 for
>> a reason, because commenting it out causes R to miss an important
>> ConfigureNotify event in my window manager. The result is that plots
>> are initially drawn off the window borders, unreadable.
>> 
>>    R_ProcessX11Events((void*) NULL);
>> 
>> Unfortunately for me, this line is commented in the standard release
>> of R, it has "#if BUG ... #endif" around it.
>> 
>> I guess it is also unfortunate for anyone who uses the same window
>> manager as I do, namely i3, which I think is pretty popular among Unix
>> power users these days; not to mention other full-screen window
>> managers which probably exhibit the same bug in R.
>> 
>> Maybe everyone on the Core team uses twm as their window manager? Or
>> RStudio on Windows? Which would be sad because then we're not
>> representing an important user demographic, namely those who prefer
>> software which is modern and powerful, yet simple to understand and
>> modify; fully configurable and interoperable and so on.
>> 
>> I first reported this bug 3 years ago. In doing research for my bug
>> report, I found that the line was commented out by Peter Dalgaard in
>> 2001 with the explanation "X11 segfault fix - I hope".
>> 
>> I don't know what the way forward is. Obviously the Core Team has
>> reason to say, "look, this isn't very important, it's been broken
>> since 2001, maybe fixing it will cause the undocumented segfault bug
>> to reappear, clearly no one here uses your window manager". Do I have
>> to submit a correctness proof for the proposed change? What do I do?
>> 
>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702
>> 
>> As mentioned in my bug report, I checked using gdb that
>> ConfigureNotify is indeed being received by the call to
>> R_ProcessX11Events() when it is uncommented. I haven't experienced any
>> segfaults.
>> 
>> It's good that Peter left evidence that "R_ProcessX11Events" was being
>> called 18 years ago from X11DeviceDriver(). If he had deleted the
>> line, rather than commenting it, then discovering the reason for the
>> window rendering bug would have been much harder for me.
>> 
>> However, the downside is that now it is not just a matter of inserting
>> the line where it belongs; I also feel a bit like I have to explain
>> why it was initially removed. But although I've given it some thought,
>> I still have no idea.
>> 
>> Somewhat tangentially, I am wondering if there is some way that we
>> could make the development of R's graphics code proceed at a faster
>> rate, for example by pulling it out into a separate module, so that
>> people could offer alternative implementations via CRAN etc., rather
>> than having R Core be the bottleneck. Would this make sense? Has it
>> already been done?
>> 
>> Thank you,
>> 
>> Frederick
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> -- 
> Dr Paul Murrell
> Department of Statistics
> The University of Auckland
> Private Bag 92019
> Auckland
> New Zealand
> 64 9 3737599 x85392
> paul at stat.auckland.ac.nz
> http://www.stat.auckland.ac.nz/~paul/
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tk @end|ng |rom tkoen|g@net  Tue Apr 23 14:59:02 2019
From: tk @end|ng |rom tkoen|g@net (=?UTF-8?Q?Thomas_K=c3=b6nig?=)
Date: Tue, 23 Apr 2019 14:59:02 +0200
Subject: [Rd] configure script issue with -flto with recent gcc and system
 ar/ranlib
Message-ID: <60fd285c-1aac-29ba-c867-dfc43c7de930@tkoenig.net>

Hi,

there can be an issue with recent gcc where the system-installed "ar"
and "ranlib" commands cannot handle LTO binaries.  On compilation, this
manifests itself with error messages claiming that they need extra
plugins.

This can be fixed by using the command line

$ AR=gcc-ar RANLIB=gcc-ranlib ./configure --enable-lto

so it is not a big issue, but it would still be nicer if the configure
script tested the functionality of ar and ranlib itself and would
select the appropriate one accordingly.

This is with R version 3.5.3.

Regards

	Thomas


From jmount @end|ng |rom w|n-vector@com  Wed Apr 24 12:28:22 2019
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Wed, 24 Apr 2019 10:28:22 -0000
Subject: [Rd] Use of C++ in Packages
In-Reply-To: <DA086757-A81C-4E25-AE4D-2E4BCA187941@R-project.org>
References: <CAD6tx97B3zHikY9Cs+DnMXdOFFUn76ONoTupZT8QTaqo7+xZCA@mail.gmail.com>
 <DA086757-A81C-4E25-AE4D-2E4BCA187941@R-project.org>
Message-ID: <19D55A99-7057-4835-8E6C-5E62C4C8EE3A@win-vector.com>

I appreciate the writing on this.

However I definitely think there is a huge difference between "use with care" and "don't use".  They just are not the same statement. 

> On Mar 29, 2019, at 10:15 AM, Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> Jim,
> 
> I think the main point of Tomas' post was to alert R users to the fact that there are very serious issues that you have to understand when interfacing R from C++. Using C++ code from R is fine, in many cases you only want to access R data, use some library or compute in C++ and return results. Such use-cases are completely fine in C++ as they don't need to trigger the issues mentioned and it should be made clear that it was not what Tomas' blog was about.
> 
> I agree with Tomas that it is safer to give an advice to not use C++ to call R API since C++ may give a false impression that you don't need to know what you're doing. Note that it is possible to avoid longjmps by using R_ExecWithCleanup() which can catch any longjmps from the called function. So if you know what you're doing you can make things work. I think the issue here is not necessarily lack of tools, it is lack of knowledge - which is why I think Tomas' post is so important.
> 
> Cheers,
> Simon
> 
> 
>> On Mar 29, 2019, at 11:19 AM, Jim Hester <james.f.hester at gmail.com> wrote:
>> 
>> First, thank you to Tomas for writing his recent post[0] on the R
>> developer blog. It raised important issues in interfacing R's C API
>> and C++ code.
>> 
>> However I do _not_ think the conclusion reached in the post is helpful
>>> don?t use C++ to interface with R
>> 
>> There are now more than 1,600 packages on CRAN using C++, the time is
>> long past when that type of warning is going to be useful to the R
>> community.
>> 
>> These same issues will also occur with any newer language (such as
>> Rust or Julia[1]) which uses RAII to manage resources and tries to
>> interface with R. It doesn't seem a productive way forward for R to
>> say it can't interface with these languages without first doing
>> expensive copies into an intermediate heap.
>> 
>> The advice to avoid C++ is also antithetical to John Chambers vision
>> of first S and R as a interface language (from Extending R [2])
>> 
>>> The *interface* principle has always been central to R and to S
>> before. An interface to subroutines was _the_ way to extend the first
>> version of S. Subroutine interfaces have continued to be central to R.
>> 
>> The book also has extensive sections on both C++ (via Rcpp) and Julia,
>> so clearly John thinks these are legitimate ways to extend R.
>> 
>> So if 'don't use C++' is not realistic and the current R API does not
>> allow safe use of C++ exceptions what are the alternatives?
>> 
>> One thing we could do is look how this is handled in other languages
>> written in C which also use longjmp for errors.
>> 
>> Lua is one example, they provide an alternative interface;
>> lua_pcall[3] and lua_cpcall[4] which wrap a normal lua call and return
>> an error code rather long jumping. These interfaces can then be safely
>> wrapped by RAII - exception based languages.
>> 
>> This alternative error code interface is not just useful for C++, but
>> also for resource cleanup in C, it is currently non-trivial to handle
>> cleanup in all the possible cases a longjmp can occur (interrupts,
>> warnings, custom conditions, timeouts any allocation etc.) even with R
>> finalizers.
>> 
>> It is past time for R to consider a non-jumpy C interface, so it can
>> continue to be used as an effective interface to programming routines
>> in the years to come.
>> 
>> [0]: https://developer.r-project.org/Blog/public/2019/03/28/use-of-c---in-packages/
>> [1]: https://github.com/JuliaLang/julia/issues/28606
>> [2]: https://doi.org/10.1201/9781315381305
>> [3]: http://www.lua.org/manual/5.1/manual.html#lua_pcall
>> [4]: http://www.lua.org/manual/5.1/manual.html#lua_cpcall
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

---------------
John Mount
http://www.win-vector.com/ <http://www.win-vector.com/> 
Our book: Practical Data Science with R http://www.manning.com/zumel/ <http://www.manning.com/zumel/>




	[[alternative HTML version deleted]]


From jpr|t|k|n @end|ng |rom pobox@com  Wed Apr 24 12:29:47 2019
From: jpr|t|k|n @end|ng |rom pobox@com (Joshua N Pritikin)
Date: Wed, 24 Apr 2019 10:29:47 -0000
Subject: [Rd] improve matrix conformability error message
Message-ID: <20190329150516.GB22898-9220@cocoa>


Incorrect code,

A <- matrix(1, 2, 2)
B <- matrix(2, 3, 2)
A %*% B

Produces

  Error in A %*% B : non-conformable arguments

It would be helpful to show the matrix dimensions,

  Error in A %*% B : non-conformable arguments of dimensions (2, 2) and (3, 2)

-- 
Joshua N. Pritikin, Ph.D.
Virginia Institute for Psychiatric and Behavioral Genetics
Virginia Commonwealth University
PO Box 980126
800 E Leigh St, Biotech One, Suite 1-133
Richmond, VA 23219
http://exuberant-island.surge.sh


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 24 13:48:09 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 24 Apr 2019 13:48:09 +0200
Subject: [Rd] R prompt updates are not validated
In-Reply-To: <90c94996-89c1-4f48-3874-f914e9b2f431@jackwasey.com>
References: <90c94996-89c1-4f48-3874-f914e9b2f431@jackwasey.com>
Message-ID: <487e9262-e583-8c89-f7bf-9c2c02dc6e13@gmail.com>

On 4/18/19 11:07 PM, Jack Wasey wrote:
> I was trying to get an interactive R prompt with the current working directory. I reviewed R source 'main.c' and 'options.c', and saw that a 20 char buffer is used when in Browse debugging mode, but that no other validation is done on the length of the prompt option.
There is no limit enforced on the length of the prompt option. There is 
nothing wrong about accepting strings of unlimited length, when they are 
handled properly. I don't see any problem in how the prompt string is 
handled in the present code base. The only reason to add such limit may 
be to hide the readline issue you found, but perhaps it would be better 
to solve that on the readline side, unless you have a realistic 
reproducible example to trigger the problem.
> This hangs R, or takes extremely long to return:
>
> # R --vanilla
> big <- paste(sample(LETTERS, size = 1e7, replace = TRUE), collapse = "")
> options(prompt = big)
>
> Running R with gdb and interrupting to get backtraces shows that 'pushReadLine' in 'unix/sys-std.c' results in a chain of libreadline calls, including, in my case at least, UTF-8 and a lot of __strlen_avx2 activity. 'R_PromptString' in 'main.c' should check prompt is a reasonable length, as well as a check when setting the prompt in 'options.c'. This may be a readline bug, too? I watched it do nothing for a while, it didn't seem to accumulate much or any new memory while watching 'top', but did max one core of CPU.

I can reproduce this issue with readline on Ubuntu and Fedora, 
rl_callback_handler_install() takes very long, spending a lot on time in 
encoding conversions, and for large inputs corrupts memory. On macOS 
with editline I could get long prompts working fine (fast and without 
crashing). I don't see how this could be a problem in R, it seems to be 
in readline: if you or anyone find it to be a problem worth spending 
time on, I would suggest creating a small standalone C example to 
trigger it and file a bug against readline.

> I've searched R-devel and see minimal discussion of security threats in R. Has anybody fuzzed R with data or source files? As R grows in popularity, I hope there is some pro-active security work going on, which I understand may not always best be done on a public mailing list.

Keep in mind that R by design lets you run arbitrary code on the machine 
without any restriction (e.g. via "system", "library", "dyn.load"), and 
there is no API in R to restrict access to those and similar functions. 
So, there is no point in exploiting say a buffer overflow bug. Of 
course, a buffer overflow bug is still a correctness problem and will be 
fixed if found and reported.

Tomas

>
> Jack Wasey
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Wed Apr 24 15:12:55 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 24 Apr 2019 15:12:55 +0200
Subject: [Rd] 
 [FORGED]  src/modules/X11/devX11.c, can we remove "#if BUG" yet
In-Reply-To: <4FEA2AD4-C0A6-4CEE-AB30-CD8AE209ED24@gmail.com>
References: <20190420052728.7tgjr4zxqdddsimm@localhost>
 <3badc471-0698-42e1-581a-2988eb3bf818@stat.auckland.ac.nz>
 <4FEA2AD4-C0A6-4CEE-AB30-CD8AE209ED24@gmail.com>
Message-ID: <3C40D480-61B5-40D1-A592-1890B090C124@gmail.com>

OK, so I did the archaeology anyway....


This was the story, R-core November 29, 2001. Part of thread "X11 still segfaults". 

------------>>
.....
Gah. I've been too tired today. Why did that take me so long?

The culprit seems to be 

R_ProcessEvents((void*) NULL)

in newX11DeviceDriver

This gets called *before* this stuff at the end of Rf_addX11Device

	dd = GEcreateDevDesc(dev);
	addDevice((DevDesc*) dd);
	initDisplayList((DevDesc*) dd);

and it is that "dd" that gets called by Rf_playDisplayList. Removing
the offending line stops the segfaulting, seemingly with no ill
effects. 

I'm not really sure what the use of that line ever was; it might be
necessary to make the call somewhere later, but it appears to have
been possible to race past it before receiving any events all the
time.

I also changed a couple of spots missing dd->newDevStruct=1

Will commit in a moment.
<<------------

And the following day, in "graphics saga part III", we had

------------->>
...

I can't make it happen in 1.3.1 but...

It is probably not unrelated to the R_ProcessEvents line that
I took out, but that was definitely wrong. However, one might reenable
it if one could change this bit of code 

 	if (!(ptr_X11DeviceDriver)((DevDesc*)(dev), display, width, height, ps, gamma, 
				      colormodel, maxcubesize, canvascolor)) {
	    free(dev);
	    errorcall(gcall, "unable to start device %s", devname);
       	}
	gsetVar(install(".Device"), mkString(devname), R_NilValue);
	dd = GEcreateDevDesc(dev);
	addDevice((DevDesc*) dd);
	initDisplayList((DevDesc*) dd);


and put the if-clause last. A cursory clance through the three
functions that are being called didn't reveal anything that would rely
on having opened the device driver first. 

Paul?

(I might try it locally, but I'm not sure I should commit anything.)

<<-----------

It seems that the suggestion was never followed up on?

-pd


> On 24 Apr 2019, at 11:42 , peter dalgaard <pdalgd at gmail.com> wrote:
> 
> I don't recall exactly what I did 18 years ago eiher and I likely don't have the time to dig into the archives and reconstruct.
> 
> I can imagine that the issue had to do with the protocol around creating and mapping windows. Presumably the segfault comes from looking for events on a window that hasn't been created yet, or has already been destroyed, leading to a NULL reference somewhere. I have a vague recollection that the issue was window manager dependent (in 2001 probably not twm, more likely xvwm on RedHat if it was affecting me). 
> 
> A proper fix should go via proper understanding of the X11 protocol - uncommenting a line is as bad as commenting it in the 1st place.... So more like "wait for window to exist THEN process events" -- but the 1st part may be WM specific, etc. 
> 
> I recall docs being quite obtuse, and the X11 "mechanism not policy" credo doesn't help as WMs are not obliged to (say) send notifications, so you can end up stalling, waiting for events that never happen.
> 
> It is entirely possible that there is stuff in here that I didn't understand properly at the time, and still don't!
> 
> - pd
> 
>> On 24 Apr 2019, at 02:30 , Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>> 
>> Hi
>> 
>> Sorry, I can't offer an explanation for the commented-out line.
>> However, regarding your final question of avoiding the R-core bottleneck, you do have the option of creating a third-party graphics device package.  See, for example, the 'tikzDevice' and 'svglite' packages on CRAN.  Does that provide you with a way forward ?
>> 
>> Paul
>> 
>> On 20/04/2019 5:27 p.m., frederik at ofb.net wrote:
>>> Dear R Devel,
>>> 
>>> I know that someone put this line in src/modules/X11/devX11.c:2824 for
>>> a reason, because commenting it out causes R to miss an important
>>> ConfigureNotify event in my window manager. The result is that plots
>>> are initially drawn off the window borders, unreadable.
>>> 
>>>   R_ProcessX11Events((void*) NULL);
>>> 
>>> Unfortunately for me, this line is commented in the standard release
>>> of R, it has "#if BUG ... #endif" around it.
>>> 
>>> I guess it is also unfortunate for anyone who uses the same window
>>> manager as I do, namely i3, which I think is pretty popular among Unix
>>> power users these days; not to mention other full-screen window
>>> managers which probably exhibit the same bug in R.
>>> 
>>> Maybe everyone on the Core team uses twm as their window manager? Or
>>> RStudio on Windows? Which would be sad because then we're not
>>> representing an important user demographic, namely those who prefer
>>> software which is modern and powerful, yet simple to understand and
>>> modify; fully configurable and interoperable and so on.
>>> 
>>> I first reported this bug 3 years ago. In doing research for my bug
>>> report, I found that the line was commented out by Peter Dalgaard in
>>> 2001 with the explanation "X11 segfault fix - I hope".
>>> 
>>> I don't know what the way forward is. Obviously the Core Team has
>>> reason to say, "look, this isn't very important, it's been broken
>>> since 2001, maybe fixing it will cause the undocumented segfault bug
>>> to reappear, clearly no one here uses your window manager". Do I have
>>> to submit a correctness proof for the proposed change? What do I do?
>>> 
>>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702
>>> 
>>> As mentioned in my bug report, I checked using gdb that
>>> ConfigureNotify is indeed being received by the call to
>>> R_ProcessX11Events() when it is uncommented. I haven't experienced any
>>> segfaults.
>>> 
>>> It's good that Peter left evidence that "R_ProcessX11Events" was being
>>> called 18 years ago from X11DeviceDriver(). If he had deleted the
>>> line, rather than commenting it, then discovering the reason for the
>>> window rendering bug would have been much harder for me.
>>> 
>>> However, the downside is that now it is not just a matter of inserting
>>> the line where it belongs; I also feel a bit like I have to explain
>>> why it was initially removed. But although I've given it some thought,
>>> I still have no idea.
>>> 
>>> Somewhat tangentially, I am wondering if there is some way that we
>>> could make the development of R's graphics code proceed at a faster
>>> rate, for example by pulling it out into a separate module, so that
>>> people could offer alternative implementations via CRAN etc., rather
>>> than having R Core be the bottleneck. Would this make sense? Has it
>>> already been done?
>>> 
>>> Thank you,
>>> 
>>> Frederick
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> -- 
>> Dr Paul Murrell
>> Department of Statistics
>> The University of Auckland
>> Private Bag 92019
>> Auckland
>> New Zealand
>> 64 9 3737599 x85392
>> paul at stat.auckland.ac.nz
>> http://www.stat.auckland.ac.nz/~paul/
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @te|@no@depret|@ @end|ng |rom ||t@|t  Wed Apr 24 16:51:07 2019
From: @te|@no@depret|@ @end|ng |rom ||t@|t (Stefano de Pretis)
Date: Wed, 24 Apr 2019 16:51:07 +0200
Subject: [Rd] Bug in "stats4" package - "confint" method
Message-ID: <72C05E94-DB99-45B7-80A7-C8BFC86A7947@iit.it>

Dear R developers,

I noticed a bug in the stats4 package, specifically in the confint method applied to ?mle? objects.
In particular, when some ?fixed? parameters define the log likelihood, these parameters are stored within the mle object but they are not used by the ?confint" method, which retrieves their value from the global environment (whenever they still exist). 

Sample code:

> ## Avoid printing to unwarranted accuracy
> od <- options(digits = 5)
> x <- 0:10
> y <- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)
> 
> ## Easy one-dimensional MLE:
> nLL <- function(lambda, y) -sum(stats::dpois(y, lambda, log = TRUE))
> fit0 <- mle(nLL, start = list(lambda = 5), fixed=list(y=y), nobs = NROW(y))
> confint(fit0)
Profiling...
  2.5 %  97.5 % 
 9.6524 13.6716 
> rm(y)
> confint(fit0)
Profiling...
Error in eval(expr, p) : object 'y' not found

In this sample code, I?m showing that after the removal of y from the global environment the method ?confint? is not able anymore to act on the object ?fit0?.

This retrieval from the global environment is actually dangerous because it?s silent and in case the user changes the value of ?y? for another purpose the method ?confint? will return a wrong evaluation of the confidence interval without throwing any warning.

I suggest to use the fixed values that are already contained within the mle object:

> fit0 at fullcoef[grep('y', names(fit0 at fullcoef))]
 y1  y2  y3  y4  y5  y6  y7  y8  y9 y10 y11 
 26  17  13  12  20   5   9   8   5   4   8 

Additionally, the method ?coef? returns both the coefficient and the fixed parameters - while should return only the parameters - , while the ?fullcoef? method is not implemented - while present in the documentation of 'mle-class?.

Best,
Stefano
 
Center for Genomic Science of IIT at SEMM

Stefano de Pretis, PhD
Postdoctoral fellow
stefano.depretis at iit.it <mailto:stefano.depretis at iit.it>
Via Adamello 16, 20139 Milan, Italy <http://maps.google.it/maps?q=Via+Adamello+16,+20139+Milan&oe=utf-8&client=firefox-a&ie=UTF8&hq=&hnear=Via+Adamello,+16,+20139+Milano,+Lombardia&gl=it&z=16>
t: +39 02 94375046



	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Wed Apr 24 17:30:26 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 24 Apr 2019 17:30:26 +0200
Subject: [Rd] Bug in "stats4" package - "confint" method
In-Reply-To: <72C05E94-DB99-45B7-80A7-C8BFC86A7947@iit.it>
References: <72C05E94-DB99-45B7-80A7-C8BFC86A7947@iit.it>
Message-ID: <333CD286-09C6-4FA6-912F-E16E7BB85CD0@gmail.com>

Yep, I know. Well, maybe I didn't, but there are also issues with propagation of fixedness in constrained optimization.

Revising mle() had neen on my todo list for way too long. The bbmle package handles this better, I believe. 

-pd

> On 24 Apr 2019, at 16:51 , Stefano de Pretis <stefano.depretis at iit.it> wrote:
> 
> Dear R developers,
> 
> I noticed a bug in the stats4 package, specifically in the confint method applied to ?mle? objects.
> In particular, when some ?fixed? parameters define the log likelihood, these parameters are stored within the mle object but they are not used by the ?confint" method, which retrieves their value from the global environment (whenever they still exist). 
> 
> Sample code:
> 
>> ## Avoid printing to unwarranted accuracy
>> od <- options(digits = 5)
>> x <- 0:10
>> y <- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)
>> 
>> ## Easy one-dimensional MLE:
>> nLL <- function(lambda, y) -sum(stats::dpois(y, lambda, log = TRUE))
>> fit0 <- mle(nLL, start = list(lambda = 5), fixed=list(y=y), nobs = NROW(y))
>> confint(fit0)
> Profiling...
>  2.5 %  97.5 % 
> 9.6524 13.6716 
>> rm(y)
>> confint(fit0)
> Profiling...
> Error in eval(expr, p) : object 'y' not found
> 
> In this sample code, I?m showing that after the removal of y from the global environment the method ?confint? is not able anymore to act on the object ?fit0?.
> 
> This retrieval from the global environment is actually dangerous because it?s silent and in case the user changes the value of ?y? for another purpose the method ?confint? will return a wrong evaluation of the confidence interval without throwing any warning.
> 
> I suggest to use the fixed values that are already contained within the mle object:
> 
>> fit0 at fullcoef[grep('y', names(fit0 at fullcoef))]
> y1  y2  y3  y4  y5  y6  y7  y8  y9 y10 y11 
> 26  17  13  12  20   5   9   8   5   4   8 
> 
> Additionally, the method ?coef? returns both the coefficient and the fixed parameters - while should return only the parameters - , while the ?fullcoef? method is not implemented - while present in the documentation of 'mle-class?.
> 
> Best,
> Stefano
> 
> Center for Genomic Science of IIT at SEMM
> 
> Stefano de Pretis, PhD
> Postdoctoral fellow
> stefano.depretis at iit.it <mailto:stefano.depretis at iit.it>
> Via Adamello 16, 20139 Milan, Italy <http://maps.google.it/maps?q=Via+Adamello+16,+20139+Milan&oe=utf-8&client=firefox-a&ie=UTF8&hq=&hnear=Via+Adamello,+16,+20139+Milano,+Lombardia&gl=it&z=16>
> t: +39 02 94375046
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From hp@ge@ @end|ng |rom |redhutch@org  Thu Apr 25 03:11:10 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Thu, 25 Apr 2019 01:11:10 +0000
Subject: [Rd] Questions/suggestions about new staged installation
Message-ID: <ba06c79e-757e-0414-d977-8a5b41f46755@fredhutch.org>

Hi,

I was playing around with inotifywait (great tool!) to see the new 
staged installation of source packages in action. In one terminal I'm 
monitoring the create/delete/move events of the installation library with:

 ? inotifywait -m --timefmt '%F %T' --format '%T -- %w %e %f' -e create 
-e delete -e move path/to/R/library/

While in another terminal I install CRAN package abc with:

 ? R CMD INSTALL abc_2.1.tar.gz

All deps are already installed.

## With R 3.5

When installing abc the first time with R 3.5 inotifywait reports the 
following events:

2019-04-24 16:57:42 -- /home/hpages/R/R-3.5.r75051/library/ CREATE,ISDIR 
00LOCK-abc
2019-04-24 16:57:42 -- /home/hpages/R/R-3.5.r75051/library/ CREATE,ISDIR abc
2019-04-24 16:57:45 -- /home/hpages/R/R-3.5.r75051/library/ DELETE,ISDIR 
00LOCK-

Then on subsequent times:

2019-04-24 16:58:14 -- /home/hpages/R/R-3.5.r75051/library/ CREATE,ISDIR 
00LOCK-abc
2019-04-24 16:58:14 -- /home/hpages/R/R-3.5.r75051/library/ 
MOVED_FROM,ISDIR abc
2019-04-24 16:58:14 -- /home/hpages/R/R-3.5.r75051/library/ CREATE,ISDIR abc
2019-04-24 16:58:17 -- /home/hpages/R/R-3.5.r75051/library/ DELETE,ISDIR 
00LOCK-abc

IIUC the additional 'MOVED_FROM,ISDIR abc'? event on subsequent installs 
is triggered by the backing up of the earlier installation in case the 
new installation fails.

## With R 3.6

First installation:

2019-04-24 17:09:04 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR 
00LOCK-abc
2019-04-24 17:09:04 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR abc
2019-04-24 17:09:08 -- /home/hpages/R/R-3.6.r76385/library/ 
MOVED_TO,ISDIR abc
2019-04-24 17:09:09 -- /home/hpages/R/R-3.6.r76385/library/ DELETE,ISDIR 
00LOCK-abc

Subsequent installations:

2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR 
00LOCK-abc
2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/ 
MOVED_FROM,ISDIR abc
2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR abc
2019-04-24 17:10:02 -- /home/hpages/R/R-3.6.r76385/library/ 
MOVED_TO,ISDIR abc
2019-04-24 17:10:03 -- /home/hpages/R/R-3.6.r76385/library/ DELETE,ISDIR 
00LOCK-abc

IIUC the new 'MOVED_TO,ISDIR abc' event is triggered by the package 
installation folder being moved from the temporary location to the final 
location.

However I wonder about the CREATE,ISDIR abc event. It looks like even 
for a staged installation tools:::.install_packages() still creates the 
empty abc dir. This should no longer be necessary because this empty 
folder is replaced later by the 'MOVED_TO,ISDIR abc' event. Am I missing 
something?

Another thing: the times indicate that the 'MOVED_TO,ISDIR abc' event 
(move from temp to final location) happens about 3-4 seconds after the 
'MOVED_FROM,ISDIR abc' event (backing up). In this interval of time, the 
abc package is missing. Wouldn't it be safer to leave the earlier 
installation where it is and to replace it when the new installation 
folder is moved from the temporary location to the final location? Said 
otherwise, the backing up step no longer seems necessary with staged 
installs. So inotifywait would report something like this:

2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR 
00LOCK-abc
2019-04-24 17:10:02 -- /home/hpages/R/R-3.6.r76385/library/ 
MOVED_TO,ISDIR abc
2019-04-24 17:10:03 -- /home/hpages/R/R-3.6.r76385/library/ DELETE,ISDIR 
00LOCK-abc

That is, only 3 events. On first and subsequent installation.

Cheers,

H.


 > sessionInfo()
R version 3.6.0 beta (2019-04-12 r76385)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.5 LTS

Matrix products: default
BLAS:?? /home/hpages/R/R-3.6.r76385/lib/libRblas.so
LAPACK: /home/hpages/R/R-3.6.r76385/lib/libRlapack.so

locale:
 ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
 ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=en_US.UTF-8
 ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
 ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
 ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats???? graphics? grDevices utils???? datasets? methods base

loaded via a namespace (and not attached):
[1] compiler_3.6.0


-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From hugh@m@rer@ @end|ng |rom gm@||@com  Wed Apr 24 18:41:36 2019
From: hugh@m@rer@ @end|ng |rom gm@||@com (Hugh Marera)
Date: Wed, 24 Apr 2019 18:41:36 +0200
Subject: [Rd] Use of C++ in Packages
In-Reply-To: <b6fa43a9-335b-5cf2-b91a-40daf38e8cae@gmail.com>
References: <CAD6tx97B3zHikY9Cs+DnMXdOFFUn76ONoTupZT8QTaqo7+xZCA@mail.gmail.com>
 <DA086757-A81C-4E25-AE4D-2E4BCA187941@R-project.org>
 <CAJXgQP2OuQ98zzj-8CNSFVBTv4OU0tsA12HH++x=r4vpxi7Osw@mail.gmail.com>
 <F68C848D-AE93-4CA9-9314-1ACDB23B87F6@r-project.org>
 <5A14862F-729A-484C-A196-CA5F1D91B524@rstudio.com>
 <b6fa43a9-335b-5cf2-b91a-40daf38e8cae@gmail.com>
Message-ID: <CAGpovd1TeS9qHffPePAJHWnd9o_C-3geUB_KZAYUk84wEi3nRw@mail.gmail.com>

Some of us are learning about development in R and use R in our work data
analysis pipelines. What is the best way to identify packages that
currently have these C++ problems? I would like to be able to help fix the
bugs but more importantly not use these packages in critical work
pipelines. Any C++ R package bug squashing events out there?

Regards

Hugh

On Mon, Apr 1, 2019 at 6:23 PM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> On 3/30/19 8:59 AM, Romain Francois wrote:
> > tl;dr: we need better C++ tools and documentation.
> >
> > We collectively know more now with the rise of tools like rchk and
> improved documentation such as Tomas?s post. That?s a start, but it appears
> that there still is a lot of knowledge that would deserve to be promoted to
> actual documentation of best practices.
> Well there is quite a bit of knowledge in Writing R Extensions and many
> problems could have been prevented had it been read more thoroughly by
> package developers. The problem that C++ runs some functions
> automatically (like destructors), should not be too hard to identify
> based on what WRE says about the need for protection against garbage
> collection.
>
>  From my experience, one can learn most about R internals from debugging
> and reading source code - when debugging PROTECT errors and other memory
> errors/memory corruption, common problems caused by bugs in native C/C++
> code - one needs to read and understand source code involved at all
> layers, one needs to understand the documentation covering code at
> different layers, and one has to think about these things, forming
> hypotheses, narrowing down to smaller examples, etc.
>
> My suggestion for package authors who write native code and want to
> learn more, and who want to be responsible (these kinds of bugs affect
> other packaged indirectly and can be woken up by inconsequential and
> correct code changes, even in R runtime): test and debug your code hard
> - look at UBSAN/ASAN/valgrind/rchk checks from CRAN and run these tools
> yourself if needed. Run with strict barrier checking and with gctorture.
> Write more tests to increase the coverage. Specifically now if you use
> C++ code, try to read all of your related code and check you do not have
> the problems I mentioned in my blog. Think of other related problems and
> if you find about them, tell others. Make sure you only use the API from
> Writing R Extensions (and R help system). If you really can't find
> anything wrong about your package, but still want to learn more, try to
> debug some bugs reported against R runtime or against your favorite
> packages you use (or their CRAN check reports from various tools). In
> addition to learning more about R internals, by spending much more time
> on debugging you may also get a different perspective on some of the
> things about C++ I pointed to. Finally, it would help us with the
> problem we have now - that many R packages in C++ have serious bugs.
>
> Tomas
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tk @end|ng |rom tkoen|g@net  Wed Apr 24 23:32:16 2019
From: tk @end|ng |rom tkoen|g@net (=?UTF-8?Q?Thomas_K=c3=b6nig?=)
Date: Wed, 24 Apr 2019 23:32:16 +0200
Subject: [Rd] R problems with lapack with gfortran
Message-ID: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>

Hi,

I have tried to pinpoint potential problems which could lead to the
LAPACK issues that are currently seen in R.  I built the current R
trunk using

AR=gcc-ar RANLIB=gcc-ranlib ./configure --prefix=$HOME --enable-lto 
--enable-BLAS-shlib=no --without-recommended-packages

and used this to find problem areas.

There are quite a few warnings that were flagged, due to mismatches
in function types.

The prototypes that R has in its header files, for example BLAS.h,
are often not compatible with gfortran function declarations.  To take
one small example, in src/main/print.c, we have

void NORET F77_NAME(xerbla)(const char *srname, int *info)

so xerbla_ is defined with two arguments.

However, gfortran passes string lengths as hidden arguments.
You can see this by compiling the small example

$ cat xer.f
       SUBROUTINE FOO
       INTEGER INFO
       CALL XERBLA ('FOO', INFO)
       END
$ gfortran -c -fdump-tree-original xer.f
$ cat xer.f.004t.original
foo ()
{
   integer(kind=4) info;

   xerbla (&"FOO"[1]{lb: 1 sz: 1}, &info, 3);
}

so here we have three arguments. This mismatch is flagged
by -Wlto-type-mismatch, which, for example, yields

print.c:1120:12: note: type 'void' should match type 'long int'
../../src/extra/blas/blas.f:357:20: warning: type of 'xerbla' does not 
match original declaration [-Wlto-type-mismatch]
   357 |          CALL XERBLA( 'DGBMV ', INFO )


So, why can gcc's r268992 / r269349 matter? Before these patches,
gfortran used the variadic calling convention for calling procedures
outside the current file, and the non-variadic calling convention for
calling procedures found in the current file.

Because the procedures were all compiled as non-variadic, the caller and
the calle's signature did not match if they were not in the same
source file, which is an ABI violation.

This violation manifested itself in https://gcc.gnu.org/PR87689 ,
where the the problem resulted in crashes on a primary gcc platform,
POWER.

How can this potentially affect R?  After the fix for PR87689,
gfortran's calls to external procedures are no longer variadic.  It is
quite possible that, while this "works" most of the time, there
is a problem with a particular LAPACK routine, the call sequence
leading up to it or the procedures it calls.

How to fix this problem?  The only clear way I see is to fix this
on the R side, by adding the string lengths to the prototypes.
These are size_t (64 bit on 64-bit systems, 32 bit on 32-bit
systems).  You should then try to make --enable-lto pass
without any warnings.

Regarding LAPACK itself, the default build system for R builds
it as a shared library.  Offhand, I did not see any way to
build a *.a file instead, so I could not use LTO to check
for mismatched prototypes between R and LAPACK.

Of course, I cannot be sure that this is really the root cause
of the problem you are seeing,but it does seem to fit quite well.
I hope this analysis helps in resolving this.

Regards

	Thomas


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr 25 11:58:21 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 25 Apr 2019 11:58:21 +0200
Subject: [Rd] Use of C++ in Packages
In-Reply-To: <CAGpovd1TeS9qHffPePAJHWnd9o_C-3geUB_KZAYUk84wEi3nRw@mail.gmail.com>
References: <CAD6tx97B3zHikY9Cs+DnMXdOFFUn76ONoTupZT8QTaqo7+xZCA@mail.gmail.com>
 <DA086757-A81C-4E25-AE4D-2E4BCA187941@R-project.org>
 <CAJXgQP2OuQ98zzj-8CNSFVBTv4OU0tsA12HH++x=r4vpxi7Osw@mail.gmail.com>
 <F68C848D-AE93-4CA9-9314-1ACDB23B87F6@r-project.org>
 <5A14862F-729A-484C-A196-CA5F1D91B524@rstudio.com>
 <b6fa43a9-335b-5cf2-b91a-40daf38e8cae@gmail.com>
 <CAGpovd1TeS9qHffPePAJHWnd9o_C-3geUB_KZAYUk84wEi3nRw@mail.gmail.com>
Message-ID: <55f34947-330d-39f9-c794-0e41db7e430e@gmail.com>

On 4/24/19 6:41 PM, Hugh Marera wrote:
> Some of us are learning about development in R and use R in our work 
> data analysis pipelines. What is the best way to identify packages 
> that currently have these C++ problems? I would like to be able to 
> help fix the bugs but more importantly not use these packages in 
> critical work pipelines. Any C++ R package bug squashing events out there?

I think the best way available now is manual inspection/review of the 
source code of the packages you are using for your critical work. Such 
review should cover more than just dangerous use of C++ - a lot of 
problems exist also in plain C code (using unexported API from R, 
violating value semantics of R, other kinds of PROTECT errors, memory 
leaks due to long jumps, etc). The review could be limited to the 
context of your pipeline, on how the package is used there and whether 
you have a reliable external process for validating the results.

Out of the problems I've mentioned in my blog, the worst for normal use 
of packages is probably a PROTECT error on the fast path due to 
allocation in a destructor or other function run automatically. Various 
memory leaks or correctness problems on error paths (long jumps) may not 
be a complete showstopper if you restart R often and if you have a 
reliable way of validating results, but such issues would still make it 
much harder to diagnose problems.

The simple steps may include looking at CRAN check results, if there 
were any errors, warnings, notes, reports from analyzers (valgrind, 
asan, ubsan, rchk). The analyzers _may_ be able to spot a PROTECT error 
due to allocation in a destructor if one is lucky (in the case I 
mentioned in the blog, there was an ASAN report), but I think manual 
inspection is needed, and it can also reveal other problems.

Tomas

>
> Regards
>
> Hugh
>
> On Mon, Apr 1, 2019 at 6:23 PM Tomas Kalibera 
> <tomas.kalibera at gmail.com <mailto:tomas.kalibera at gmail.com>> wrote:
>
>     On 3/30/19 8:59 AM, Romain Francois wrote:
>     > tl;dr: we need better C++ tools and documentation.
>     >
>     > We collectively know more now with the rise of tools like rchk
>     and improved documentation such as Tomas?s post. That?s a start,
>     but it appears that there still is a lot of knowledge that would
>     deserve to be promoted to actual documentation of best practices.
>     Well there is quite a bit of knowledge in Writing R Extensions and
>     many
>     problems could have been prevented had it been read more
>     thoroughly by
>     package developers. The problem that C++ runs some functions
>     automatically (like destructors), should not be too hard to identify
>     based on what WRE says about the need for protection against garbage
>     collection.
>
>     ?From my experience, one can learn most about R internals from
>     debugging
>     and reading source code - when debugging PROTECT errors and other
>     memory
>     errors/memory corruption, common problems caused by bugs in native
>     C/C++
>     code - one needs to read and understand source code involved at all
>     layers, one needs to understand the documentation covering code at
>     different layers, and one has to think about these things, forming
>     hypotheses, narrowing down to smaller examples, etc.
>
>     My suggestion for package authors who write native code and want to
>     learn more, and who want to be responsible (these kinds of bugs
>     affect
>     other packaged indirectly and can be woken up by inconsequential and
>     correct code changes, even in R runtime): test and debug your code
>     hard
>     - look at UBSAN/ASAN/valgrind/rchk checks from CRAN and run these
>     tools
>     yourself if needed. Run with strict barrier checking and with
>     gctorture.
>     Write more tests to increase the coverage. Specifically now if you
>     use
>     C++ code, try to read all of your related code and check you do
>     not have
>     the problems I mentioned in my blog. Think of other related
>     problems and
>     if you find about them, tell others. Make sure you only use the
>     API from
>     Writing R Extensions (and R help system). If you really can't find
>     anything wrong about your package, but still want to learn more,
>     try to
>     debug some bugs reported against R runtime or against your favorite
>     packages you use (or their CRAN check reports from various tools). In
>     addition to learning more about R internals, by spending much more
>     time
>     on debugging you may also get a different perspective on some of the
>     things about C++ I pointed to. Finally, it would help us with the
>     problem we have now - that many R packages in C++ have serious bugs.
>
>     Tomas
>
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>


	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr 25 13:57:32 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 25 Apr 2019 13:57:32 +0200
Subject: [Rd] Questions/suggestions about new staged installation
In-Reply-To: <ba06c79e-757e-0414-d977-8a5b41f46755@fredhutch.org>
References: <ba06c79e-757e-0414-d977-8a5b41f46755@fredhutch.org>
Message-ID: <cefb09df-c755-f753-a780-986b7e38aa05@gmail.com>

On 4/25/19 3:11 AM, Pages, Herve wrote:
> Hi,
>
> I was playing around with inotifywait (great tool!) to see the new
> staged installation of source packages in action. In one terminal I'm
> monitoring the create/delete/move events of the installation library with:
>
>   ? inotifywait -m --timefmt '%F %T' --format '%T -- %w %e %f' -e create
> -e delete -e move path/to/R/library/
>
> While in another terminal I install CRAN package abc with:
>
>   ? R CMD INSTALL abc_2.1.tar.gz
>
> All deps are already installed.
>
> ## With R 3.5
>
> When installing abc the first time with R 3.5 inotifywait reports the
> following events:
>
> 2019-04-24 16:57:42 -- /home/hpages/R/R-3.5.r75051/library/ CREATE,ISDIR
> 00LOCK-abc
> 2019-04-24 16:57:42 -- /home/hpages/R/R-3.5.r75051/library/ CREATE,ISDIR abc
> 2019-04-24 16:57:45 -- /home/hpages/R/R-3.5.r75051/library/ DELETE,ISDIR
> 00LOCK-
>
> Then on subsequent times:
>
> 2019-04-24 16:58:14 -- /home/hpages/R/R-3.5.r75051/library/ CREATE,ISDIR
> 00LOCK-abc
> 2019-04-24 16:58:14 -- /home/hpages/R/R-3.5.r75051/library/
> MOVED_FROM,ISDIR abc
> 2019-04-24 16:58:14 -- /home/hpages/R/R-3.5.r75051/library/ CREATE,ISDIR abc
> 2019-04-24 16:58:17 -- /home/hpages/R/R-3.5.r75051/library/ DELETE,ISDIR
> 00LOCK-abc
>
> IIUC the additional 'MOVED_FROM,ISDIR abc'? event on subsequent installs
> is triggered by the backing up of the earlier installation in case the
> new installation fails.
>
> ## With R 3.6
>
> First installation:
>
> 2019-04-24 17:09:04 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR
> 00LOCK-abc
> 2019-04-24 17:09:04 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR abc
> 2019-04-24 17:09:08 -- /home/hpages/R/R-3.6.r76385/library/
> MOVED_TO,ISDIR abc
> 2019-04-24 17:09:09 -- /home/hpages/R/R-3.6.r76385/library/ DELETE,ISDIR
> 00LOCK-abc
>
> Subsequent installations:
>
> 2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR
> 00LOCK-abc
> 2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/
> MOVED_FROM,ISDIR abc
> 2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR abc
> 2019-04-24 17:10:02 -- /home/hpages/R/R-3.6.r76385/library/
> MOVED_TO,ISDIR abc
> 2019-04-24 17:10:03 -- /home/hpages/R/R-3.6.r76385/library/ DELETE,ISDIR
> 00LOCK-abc
>
> IIUC the new 'MOVED_TO,ISDIR abc' event is triggered by the package
> installation folder being moved from the temporary location to the final
> location.
>
> However I wonder about the CREATE,ISDIR abc event. It looks like even
> for a staged installation tools:::.install_packages() still creates the
> empty abc dir. This should no longer be necessary because this empty
> folder is replaced later by the 'MOVED_TO,ISDIR abc' event. Am I missing
> somethin

Yes, the final directory location gets created before the installation. 
I did this to minimize the added cognitive complexity to the code. I 
could explore if this could be changed, if the installation could work 
without that directory (which would mean implementing and testing on all 
CRAN/BIOC, installing in different modes, so certainly some effort).? Is 
the current implementation causing any problem?

> Another thing: the times indicate that the 'MOVED_TO,ISDIR abc' event
> (move from temp to final location) happens about 3-4 seconds after the
> 'MOVED_FROM,ISDIR abc' event (backing up). In this interval of time, the
> abc package is missing. Wouldn't it be safer to leave the earlier
> installation where it is and to replace it when the new installation
> folder is moved from the temporary location to the final location? Said
> otherwise, the backing up step no longer seems necessary with staged
> installs. So inotifywait would report something like this:
>
> 2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR
> 00LOCK-abc
> 2019-04-24 17:10:02 -- /home/hpages/R/R-3.6.r76385/library/
> MOVED_TO,ISDIR abc
> 2019-04-24 17:10:03 -- /home/hpages/R/R-3.6.r76385/library/ DELETE,ISDIR
> 00LOCK-abc
>
> That is, only 3 events. On first and subsequent installation.

I don't think that would be possible. The package is test-loaded also 
from the final installation directory, and if that fails, restored from 
a back-up. This test-loading is useful as it can detect some problems 
with hard-coded directories possibly not detected before on test-loading 
from the temporary installation directory.

Best,
Tomas

>
> Cheers,
>
> H.
>
>
>   > sessionInfo()
> R version 3.6.0 beta (2019-04-12 r76385)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 16.04.5 LTS
>
> Matrix products: default
> BLAS:?? /home/hpages/R/R-3.6.r76385/lib/libRblas.so
> LAPACK: /home/hpages/R/R-3.6.r76385/lib/libRlapack.so
>
> locale:
>   ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
>   ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=en_US.UTF-8
>   ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
>   ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
>   ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats???? graphics? grDevices utils???? datasets? methods base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.6.0
>
>


From hp@ge@ @end|ng |rom |redhutch@org  Thu Apr 25 14:20:50 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Thu, 25 Apr 2019 12:20:50 +0000
Subject: [Rd] Questions/suggestions about new staged installation
In-Reply-To: <cefb09df-c755-f753-a780-986b7e38aa05@gmail.com>
References: <ba06c79e-757e-0414-d977-8a5b41f46755@fredhutch.org>
 <cefb09df-c755-f753-a780-986b7e38aa05@gmail.com>
Message-ID: <091d7f46-338a-097b-6910-b28b5ac46192@fredhutch.org>

On 4/25/19 04:57, Tomas Kalibera wrote:

> On 4/25/19 3:11 AM, Pages, Herve wrote:
>> Hi,
>>
>> I was playing around with inotifywait (great tool!) to see the new
>> staged installation of source packages in action. In one terminal I'm
>> monitoring the create/delete/move events of the installation library 
>> with:
>>
>> ? ? inotifywait -m --timefmt '%F %T' --format '%T -- %w %e %f' -e create
>> -e delete -e move path/to/R/library/
>>
>> While in another terminal I install CRAN package abc with:
>>
>> ? ? R CMD INSTALL abc_2.1.tar.gz
>>
>> All deps are already installed.
>>
>> ## With R 3.5
>>
>> When installing abc the first time with R 3.5 inotifywait reports the
>> following events:
>>
>> 2019-04-24 16:57:42 -- /home/hpages/R/R-3.5.r75051/library/ CREATE,ISDIR
>> 00LOCK-abc
>> 2019-04-24 16:57:42 -- /home/hpages/R/R-3.5.r75051/library/ 
>> CREATE,ISDIR abc
>> 2019-04-24 16:57:45 -- /home/hpages/R/R-3.5.r75051/library/ DELETE,ISDIR
>> 00LOCK-
>>
>> Then on subsequent times:
>>
>> 2019-04-24 16:58:14 -- /home/hpages/R/R-3.5.r75051/library/ CREATE,ISDIR
>> 00LOCK-abc
>> 2019-04-24 16:58:14 -- /home/hpages/R/R-3.5.r75051/library/
>> MOVED_FROM,ISDIR abc
>> 2019-04-24 16:58:14 -- /home/hpages/R/R-3.5.r75051/library/ 
>> CREATE,ISDIR abc
>> 2019-04-24 16:58:17 -- /home/hpages/R/R-3.5.r75051/library/ DELETE,ISDIR
>> 00LOCK-abc
>>
>> IIUC the additional 'MOVED_FROM,ISDIR abc'? event on subsequent installs
>> is triggered by the backing up of the earlier installation in case the
>> new installation fails.
>>
>> ## With R 3.6
>>
>> First installation:
>>
>> 2019-04-24 17:09:04 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR
>> 00LOCK-abc
>> 2019-04-24 17:09:04 -- /home/hpages/R/R-3.6.r76385/library/ 
>> CREATE,ISDIR abc
>> 2019-04-24 17:09:08 -- /home/hpages/R/R-3.6.r76385/library/
>> MOVED_TO,ISDIR abc
>> 2019-04-24 17:09:09 -- /home/hpages/R/R-3.6.r76385/library/ DELETE,ISDIR
>> 00LOCK-abc
>>
>> Subsequent installations:
>>
>> 2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR
>> 00LOCK-abc
>> 2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/
>> MOVED_FROM,ISDIR abc
>> 2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/ 
>> CREATE,ISDIR abc
>> 2019-04-24 17:10:02 -- /home/hpages/R/R-3.6.r76385/library/
>> MOVED_TO,ISDIR abc
>> 2019-04-24 17:10:03 -- /home/hpages/R/R-3.6.r76385/library/ DELETE,ISDIR
>> 00LOCK-abc
>>
>> IIUC the new 'MOVED_TO,ISDIR abc' event is triggered by the package
>> installation folder being moved from the temporary location to the final
>> location.
>>
>> However I wonder about the CREATE,ISDIR abc event. It looks like even
>> for a staged installation tools:::.install_packages() still creates the
>> empty abc dir. This should no longer be necessary because this empty
>> folder is replaced later by the 'MOVED_TO,ISDIR abc' event. Am I missing
>> somethin
>
> Yes, the final directory location gets created before the 
> installation. I did this to minimize the added cognitive complexity to 
> the code. I could explore if this could be changed, if the 
> installation could work without that directory (which would mean 
> implementing and testing on all CRAN/BIOC, installing in different 
> modes, so certainly some effort).? Is the current implementation 
> causing any problem?
>
>> Another thing: the times indicate that the 'MOVED_TO,ISDIR abc' event
>> (move from temp to final location) happens about 3-4 seconds after the
>> 'MOVED_FROM,ISDIR abc' event (backing up). In this interval of time, the
>> abc package is missing. Wouldn't it be safer to leave the earlier
>> installation where it is and to replace it when the new installation
>> folder is moved from the temporary location to the final location? Said
>> otherwise, the backing up step no longer seems necessary with staged
>> installs. So inotifywait would report something like this:
>>
>> 2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR
>> 00LOCK-abc
>> 2019-04-24 17:10:02 -- /home/hpages/R/R-3.6.r76385/library/
>> MOVED_TO,ISDIR abc
>> 2019-04-24 17:10:03 -- /home/hpages/R/R-3.6.r76385/library/ DELETE,ISDIR
>> 00LOCK-abc
>>
>> That is, only 3 events. On first and subsequent installation.
>
> I don't think that would be possible. The package is test-loaded also 
> from the final installation directory, and if that fails, restored 
> from a back-up. This test-loading is useful as it can detect some 
> problems with hard-coded directories possibly not detected before on 
> test-loading from the temporary installation directory.

Makes sense.

So backing up is still needed.

But couldn't the gap of 3-4 seconds where the abc package is missing be 
reduced by backing up right before moving the newly installed package 
from the temporary location to the final location?

In other words, instead of:

 ??? back up, then install to temp loc, then move to final loc

do:

 ??? install to temp loc, then back up, then move to final loc

This would reduce the gap to almost 0 seconds on a Unix file system 
where moving a folder is very cheap (even if the folder is big), at 
least when moving doesn't cross partition borders.

Not a big deal for a light package like abc but some Bioconductor 
packages take about 20 min. to compile!

Thanks,

H.


>
>
> Best,
> Tomas
>
>>
>> Cheers,
>>
>> H.
>>
>>
>> ? > sessionInfo()
>> R version 3.6.0 beta (2019-04-12 r76385)
>> Platform: x86_64-pc-linux-gnu (64-bit)
>> Running under: Ubuntu 16.04.5 LTS
>>
>> Matrix products: default
>> BLAS:?? /home/hpages/R/R-3.6.r76385/lib/libRblas.so
>> LAPACK: /home/hpages/R/R-3.6.r76385/lib/libRlapack.so
>>
>> locale:
>> ? ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
>> ? ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=en_US.UTF-8
>> ? ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
>> ? ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
>> ? ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
>> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>>
>> attached base packages:
>> [1] stats???? graphics? grDevices utils???? datasets? methods base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_3.6.0
>>
>>
>
-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr 25 14:41:31 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 25 Apr 2019 14:41:31 +0200
Subject: [Rd] Questions/suggestions about new staged installation
In-Reply-To: <091d7f46-338a-097b-6910-b28b5ac46192@fredhutch.org>
References: <ba06c79e-757e-0414-d977-8a5b41f46755@fredhutch.org>
 <cefb09df-c755-f753-a780-986b7e38aa05@gmail.com>
 <091d7f46-338a-097b-6910-b28b5ac46192@fredhutch.org>
Message-ID: <d554debb-fc2c-ac9f-5e08-a76b09b19584@gmail.com>

On 4/25/19 2:20 PM, Pages, Herve wrote:
> On 4/25/19 04:57, Tomas Kalibera wrote:
>
>> On 4/25/19 3:11 AM, Pages, Herve wrote:
>>> Hi,
>>>
>>> I was playing around with inotifywait (great tool!) to see the new
>>> staged installation of source packages in action. In one terminal I'm
>>> monitoring the create/delete/move events of the installation library
>>> with:
>>>
>>>  ? ? inotifywait -m --timefmt '%F %T' --format '%T -- %w %e %f' -e create
>>> -e delete -e move path/to/R/library/
>>>
>>> While in another terminal I install CRAN package abc with:
>>>
>>>  ? ? R CMD INSTALL abc_2.1.tar.gz
>>>
>>> All deps are already installed.
>>>
>>> ## With R 3.5
>>>
>>> When installing abc the first time with R 3.5 inotifywait reports the
>>> following events:
>>>
>>> 2019-04-24 16:57:42 -- /home/hpages/R/R-3.5.r75051/library/ CREATE,ISDIR
>>> 00LOCK-abc
>>> 2019-04-24 16:57:42 -- /home/hpages/R/R-3.5.r75051/library/
>>> CREATE,ISDIR abc
>>> 2019-04-24 16:57:45 -- /home/hpages/R/R-3.5.r75051/library/ DELETE,ISDIR
>>> 00LOCK-
>>>
>>> Then on subsequent times:
>>>
>>> 2019-04-24 16:58:14 -- /home/hpages/R/R-3.5.r75051/library/ CREATE,ISDIR
>>> 00LOCK-abc
>>> 2019-04-24 16:58:14 -- /home/hpages/R/R-3.5.r75051/library/
>>> MOVED_FROM,ISDIR abc
>>> 2019-04-24 16:58:14 -- /home/hpages/R/R-3.5.r75051/library/
>>> CREATE,ISDIR abc
>>> 2019-04-24 16:58:17 -- /home/hpages/R/R-3.5.r75051/library/ DELETE,ISDIR
>>> 00LOCK-abc
>>>
>>> IIUC the additional 'MOVED_FROM,ISDIR abc'? event on subsequent installs
>>> is triggered by the backing up of the earlier installation in case the
>>> new installation fails.
>>>
>>> ## With R 3.6
>>>
>>> First installation:
>>>
>>> 2019-04-24 17:09:04 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR
>>> 00LOCK-abc
>>> 2019-04-24 17:09:04 -- /home/hpages/R/R-3.6.r76385/library/
>>> CREATE,ISDIR abc
>>> 2019-04-24 17:09:08 -- /home/hpages/R/R-3.6.r76385/library/
>>> MOVED_TO,ISDIR abc
>>> 2019-04-24 17:09:09 -- /home/hpages/R/R-3.6.r76385/library/ DELETE,ISDIR
>>> 00LOCK-abc
>>>
>>> Subsequent installations:
>>>
>>> 2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR
>>> 00LOCK-abc
>>> 2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/
>>> MOVED_FROM,ISDIR abc
>>> 2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/
>>> CREATE,ISDIR abc
>>> 2019-04-24 17:10:02 -- /home/hpages/R/R-3.6.r76385/library/
>>> MOVED_TO,ISDIR abc
>>> 2019-04-24 17:10:03 -- /home/hpages/R/R-3.6.r76385/library/ DELETE,ISDIR
>>> 00LOCK-abc
>>>
>>> IIUC the new 'MOVED_TO,ISDIR abc' event is triggered by the package
>>> installation folder being moved from the temporary location to the final
>>> location.
>>>
>>> However I wonder about the CREATE,ISDIR abc event. It looks like even
>>> for a staged installation tools:::.install_packages() still creates the
>>> empty abc dir. This should no longer be necessary because this empty
>>> folder is replaced later by the 'MOVED_TO,ISDIR abc' event. Am I missing
>>> somethin
>> Yes, the final directory location gets created before the
>> installation. I did this to minimize the added cognitive complexity to
>> the code. I could explore if this could be changed, if the
>> installation could work without that directory (which would mean
>> implementing and testing on all CRAN/BIOC, installing in different
>> modes, so certainly some effort).? Is the current implementation
>> causing any problem?
>>
>>> Another thing: the times indicate that the 'MOVED_TO,ISDIR abc' event
>>> (move from temp to final location) happens about 3-4 seconds after the
>>> 'MOVED_FROM,ISDIR abc' event (backing up). In this interval of time, the
>>> abc package is missing. Wouldn't it be safer to leave the earlier
>>> installation where it is and to replace it when the new installation
>>> folder is moved from the temporary location to the final location? Said
>>> otherwise, the backing up step no longer seems necessary with staged
>>> installs. So inotifywait would report something like this:
>>>
>>> 2019-04-24 17:09:59 -- /home/hpages/R/R-3.6.r76385/library/ CREATE,ISDIR
>>> 00LOCK-abc
>>> 2019-04-24 17:10:02 -- /home/hpages/R/R-3.6.r76385/library/
>>> MOVED_TO,ISDIR abc
>>> 2019-04-24 17:10:03 -- /home/hpages/R/R-3.6.r76385/library/ DELETE,ISDIR
>>> 00LOCK-abc
>>>
>>> That is, only 3 events. On first and subsequent installation.
>> I don't think that would be possible. The package is test-loaded also
>> from the final installation directory, and if that fails, restored
>> from a back-up. This test-loading is useful as it can detect some
>> problems with hard-coded directories possibly not detected before on
>> test-loading from the temporary installation directory.
> Makes sense.
>
> So backing up is still needed.
>
> But couldn't the gap of 3-4 seconds where the abc package is missing be
> reduced by backing up right before moving the newly installed package
> from the temporary location to the final location?
>
> In other words, instead of:
>
>   ??? back up, then install to temp loc, then move to final loc
>
> do:
>
>   ??? install to temp loc, then back up, then move to final loc
>
> This would reduce the gap to almost 0 seconds on a Unix file system
> where moving a folder is very cheap (even if the folder is big), at
> least when moving doesn't cross partition borders.
>
> Not a big deal for a light package like abc but some Bioconductor
> packages take about 20 min. to compile!

It should be possible, probably. But why is the gap a problem? And why 
is a shorter gap better than long gap? (the time depends on how long it 
takes to load the package, which can be >10s for some Bioconductor 
packages).

It is not safe to run concurrently with the installation any code on the 
same library that would be accessing the packages being installed. Such 
code could access the old version of the package mixed with the new 
version. A longer gap could actually (perhaps accidentally but still) 
make such problems more visible, and easier to detect, than a short gap.

Tomas

>
> Thanks,
>
> H.
>
>
>>
>> Best,
>> Tomas
>>
>>> Cheers,
>>>
>>> H.
>>>
>>>
>>>  ? > sessionInfo()
>>> R version 3.6.0 beta (2019-04-12 r76385)
>>> Platform: x86_64-pc-linux-gnu (64-bit)
>>> Running under: Ubuntu 16.04.5 LTS
>>>
>>> Matrix products: default
>>> BLAS:?? /home/hpages/R/R-3.6.r76385/lib/libRblas.so
>>> LAPACK: /home/hpages/R/R-3.6.r76385/lib/libRlapack.so
>>>
>>> locale:
>>>  ? ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
>>>  ? ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=en_US.UTF-8
>>>  ? ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
>>>  ? ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
>>>  ? ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
>>> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>>>
>>> attached base packages:
>>> [1] stats???? graphics? grDevices utils???? datasets? methods base
>>>
>>> loaded via a namespace (and not attached):
>>> [1] compiler_3.6.0
>>>
>>>


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr 25 16:50:53 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 25 Apr 2019 16:50:53 +0200
Subject: [Rd] update.package() asking even when asked to not ask
In-Reply-To: <e1326c65-dedd-e4e6-d625-6f81931b5e84@fredhutch.org>
References: <e1326c65-dedd-e4e6-d625-6f81931b5e84@fredhutch.org>
Message-ID: <3ebf1285-7ec5-c4b8-8a9d-7cd4fc614494@gmail.com>

On 4/20/19 10:39 PM, Pages, Herve wrote:
> Hi,
>
> I was trying to update packages today on one of our MacOS servers, and
> got this:
>
>   ? > update.packages(ask=FALSE)
>
>   ? ? There is a binary version available but the source version is later:
>   ?? ???? binary source needs_compilation
>   ? gsl 1.9-10.3? 2.1-6????????????? TRUE
>
>   ? Do you want to install from sources the package which needs
> compilation? (Yes/no/cancel)
>
> So it looks like 'ask=FALSE' only turns off one type of question. What
> is not immediately obvious is that in order to also turn off the type of
> question asked above one needs to set 'type' either to
> "mac.binary.el-capitan" or "source" (by default 'type' is set to "both"
> on Mac).
>
> Some clarification in the man page about the scope of 'ask=FALSE' would
> be welcome, with possibly some hint about how to turn off all questions.

 From reading the documentation I think this behavior is intentional and 
as documented. See "Binary packages" section in ?install.packages. In 
particular there is option "install.packages.compile.from.source". 
?update.packages points to this option via "See Also:" 
?install.packages?, "The options listed for ?install.packages? under 
?options?.". The documentation for "ask" does not seem to suggest that 
this would control all options asked by update.packages(), but I've 
added a sentence to make that explicit.

Best
Tomas


> Thanks,
>
> H.
>
>   > sessionInfo()
> R version 3.6.0 beta (2019-04-16 r76403)
> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> Running under: OS X El Capitan 10.11.6
>
> Matrix products: default
> BLAS:
> /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
> LAPACK:
> /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib
>
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>
> attached base packages:
> [1] stats???? graphics? grDevices utils???? datasets? methods base
>
> loaded via a namespace (and not attached):
> [1] compiler_3.6.0 tools_3.6.0
>


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Apr 25 17:42:08 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 25 Apr 2019 17:42:08 +0200
Subject: [Rd] 
 configure script issue with -flto with recent gcc and system
 ar/ranlib
In-Reply-To: <60fd285c-1aac-29ba-c867-dfc43c7de930@tkoenig.net>
References: <60fd285c-1aac-29ba-c867-dfc43c7de930@tkoenig.net>
Message-ID: <494c2fb7-64fc-9336-7b86-ec36fb44f416@gmail.com>

On 4/23/19 2:59 PM, Thomas K?nig wrote:
> Hi,
>
> there can be an issue with recent gcc where the system-installed "ar"
> and "ranlib" commands cannot handle LTO binaries.? On compilation, this
> manifests itself with error messages claiming that they need extra
> plugins.
>
> This can be fixed by using the command line
>
> $ AR=gcc-ar RANLIB=gcc-ranlib ./configure --enable-lto
>
> so it is not a big issue, but it would still be nicer if the configure
> script tested the functionality of ar and ranlib itself and would
> select the appropriate one accordingly.
>
> This is with R version 3.5.3.

Thanks for the report. What was the version of binutils on the system 
with this problem? On my Ubuntu 18.04 I can use the binutils version of 
"ar" and "ranlib" with --enable-lto without problems.? I read that with 
recent binutils (2.25?), the LTO plugin should be loaded automatically, 
so one does not have to use the wrappers anymore.

Thanks
Tomas

>
> Regards
>
> ????Thomas
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tk @end|ng |rom tkoen|g@net  Thu Apr 25 18:11:19 2019
From: tk @end|ng |rom tkoen|g@net (=?UTF-8?Q?Thomas_K=c3=b6nig?=)
Date: Thu, 25 Apr 2019 18:11:19 +0200
Subject: [Rd] 
 configure script issue with -flto with recent gcc and system
 ar/ranlib
In-Reply-To: <494c2fb7-64fc-9336-7b86-ec36fb44f416@gmail.com>
References: <60fd285c-1aac-29ba-c867-dfc43c7de930@tkoenig.net>
 <494c2fb7-64fc-9336-7b86-ec36fb44f416@gmail.com>
Message-ID: <393de1b8-52b4-e35c-f1a3-4b550967875c@tkoenig.net>

Hi Tomas,

> On 4/23/19 2:59 PM, Thomas K?nig wrote:
>> Hi,
>>
>> there can be an issue with recent gcc where the system-installed "ar"
>> and "ranlib" commands cannot handle LTO binaries.? On compilation, this
>> manifests itself with error messages claiming that they need extra
>> plugins.

> Thanks for the report. What was the version of binutils on the system 
> with this problem? On my Ubuntu 18.04 I can use the binutils version of 
> "ar" and "ranlib" with --enable-lto without problems.? I read that with 
> recent binutils (2.25?), the LTO plugin should be loaded automatically, 
> so one does not have to use the wrappers anymore.

This was with, on x86_64-pc-linux-gnu,

GNU ar (GNU Binutils; openSUSE Leap 42.3) 2.31.1.20180828-19

and, on powerpc64le-unknown-linux-gnu,

GNU ar version 2.27-34.base.el7

both with a recent gcc 9.0.1 snapshot.

Regards

	Thomas


From hp@ge@ @end|ng |rom |redhutch@org  Thu Apr 25 21:23:52 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Thu, 25 Apr 2019 19:23:52 +0000
Subject: [Rd] update.package() asking even when asked to not ask
In-Reply-To: <3ebf1285-7ec5-c4b8-8a9d-7cd4fc614494@gmail.com>
References: <e1326c65-dedd-e4e6-d625-6f81931b5e84@fredhutch.org>
 <3ebf1285-7ec5-c4b8-8a9d-7cd4fc614494@gmail.com>
Message-ID: <d5e29a2f-72dc-cadb-53b4-ce50d8286d49@fredhutch.org>

On 4/25/19 07:50, Tomas Kalibera wrote:

> On 4/20/19 10:39 PM, Pages, Herve wrote:
>> Hi,
>>
>> I was trying to update packages today on one of our MacOS servers, and
>> got this:
>>
>> ? ? > update.packages(ask=FALSE)
>>
>> ? ? ? There is a binary version available but the source version is 
>> later:
>> ? ?? ???? binary source needs_compilation
>> ? ? gsl 1.9-10.3? 2.1-6????????????? TRUE
>>
>> ? ? Do you want to install from sources the package which needs
>> compilation? (Yes/no/cancel)
>>
>> So it looks like 'ask=FALSE' only turns off one type of question. What
>> is not immediately obvious is that in order to also turn off the type of
>> question asked above one needs to set 'type' either to
>> "mac.binary.el-capitan" or "source" (by default 'type' is set to "both"
>> on Mac).
>>
>> Some clarification in the man page about the scope of 'ask=FALSE' would
>> be welcome, with possibly some hint about how to turn off all questions.
>
> From reading the documentation I think this behavior is intentional 
> and as documented. See "Binary packages" section in ?install.packages. 
> In particular there is option "install.packages.compile.from.source". 
> ?update.packages points to this option via "See Also:" 
> ?install.packages?, "The options listed for ?install.packages? under 
> ?options?.". The documentation for "ask" does not seem to suggest that 
> this would control all options asked by update.packages(), but I've 
> added a sentence to make that explicit.

Thanks Tomas. This small addition to the description of the 'ask' 
argument helps a lot and the pointer to 
'install.packages.compile.from.source' is very useful.

Cheers,

H.


>
> Best
> Tomas
>
>
>> Thanks,
>>
>> H.
>>
>> ? > sessionInfo()
>> R version 3.6.0 beta (2019-04-16 r76403)
>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>> Running under: OS X El Capitan 10.11.6
>>
>> Matrix products: default
>> BLAS:
>> /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib 
>>
>> LAPACK:
>> /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib 
>>
>>
>> locale:
>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>
>> attached base packages:
>> [1] stats???? graphics? grDevices utils???? datasets? methods base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_3.6.0 tools_3.6.0
>>
>
-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From irederik m@iii@g oii oib@@et  Fri Apr 26 01:23:56 2019
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Thu, 25 Apr 2019 16:23:56 -0700
Subject: [Rd] 
 [FORGED]  src/modules/X11/devX11.c, can we remove "#if BUG" yet
In-Reply-To: <3C40D480-61B5-40D1-A592-1890B090C124@gmail.com>
References: <20190420052728.7tgjr4zxqdddsimm@localhost>
 <3badc471-0698-42e1-581a-2988eb3bf818@stat.auckland.ac.nz>
 <4FEA2AD4-C0A6-4CEE-AB30-CD8AE209ED24@gmail.com>
 <3C40D480-61B5-40D1-A592-1890B090C124@gmail.com>
Message-ID: <20190425232356.a6vn2unt3ju6a3f7@localhost>

Thanks Professor Dalgard.

If you have a different way to fix the bug then I'd be happy to test
it.

Or whatever. I understand that maybe some data was being referenced
before it had been initialized. I could also support moving the
R_ProcessEvents call in another place, but it seems one would also
like to generate some kind of warning message, at the location of the
bad reference, rather than segfaulting. Was it not possible to
identify this location? I'm guessing that Valgrind is a bit more
mature now than it was in 2001...?

Frederick

On Wed, Apr 24, 2019 at 03:12:55PM +0200, peter dalgaard wrote:
>OK, so I did the archaeology anyway....
>
>
>This was the story, R-core November 29, 2001. Part of thread "X11 still segfaults".
>
>------------>>
>.....
>Gah. I've been too tired today. Why did that take me so long?
>
>The culprit seems to be
>
>R_ProcessEvents((void*) NULL)
>
>in newX11DeviceDriver
>
>This gets called *before* this stuff at the end of Rf_addX11Device
>
>	dd = GEcreateDevDesc(dev);
>	addDevice((DevDesc*) dd);
>	initDisplayList((DevDesc*) dd);
>
>and it is that "dd" that gets called by Rf_playDisplayList. Removing
>the offending line stops the segfaulting, seemingly with no ill
>effects.
>
>I'm not really sure what the use of that line ever was; it might be
>necessary to make the call somewhere later, but it appears to have
>been possible to race past it before receiving any events all the
>time.
>
>I also changed a couple of spots missing dd->newDevStruct=1
>
>Will commit in a moment.
><<------------
>
>And the following day, in "graphics saga part III", we had
>
>------------->>
>...
>
>I can't make it happen in 1.3.1 but...
>
>It is probably not unrelated to the R_ProcessEvents line that
>I took out, but that was definitely wrong. However, one might reenable
>it if one could change this bit of code
>
> 	if (!(ptr_X11DeviceDriver)((DevDesc*)(dev), display, width, height, ps, gamma,
>				      colormodel, maxcubesize, canvascolor)) {
>	    free(dev);
>	    errorcall(gcall, "unable to start device %s", devname);
>       	}
>	gsetVar(install(".Device"), mkString(devname), R_NilValue);
>	dd = GEcreateDevDesc(dev);
>	addDevice((DevDesc*) dd);
>	initDisplayList((DevDesc*) dd);
>
>
>and put the if-clause last. A cursory clance through the three
>functions that are being called didn't reveal anything that would rely
>on having opened the device driver first.
>
>Paul?
>
>(I might try it locally, but I'm not sure I should commit anything.)
>
><<-----------
>
>It seems that the suggestion was never followed up on?
>
>-pd
>
>
>> On 24 Apr 2019, at 11:42 , peter dalgaard <pdalgd at gmail.com> wrote:
>>
>> I don't recall exactly what I did 18 years ago eiher and I likely don't have the time to dig into the archives and reconstruct.
>>
>> I can imagine that the issue had to do with the protocol around creating and mapping windows. Presumably the segfault comes from looking for events on a window that hasn't been created yet, or has already been destroyed, leading to a NULL reference somewhere. I have a vague recollection that the issue was window manager dependent (in 2001 probably not twm, more likely xvwm on RedHat if it was affecting me).
>>
>> A proper fix should go via proper understanding of the X11 protocol - uncommenting a line is as bad as commenting it in the 1st place.... So more like "wait for window to exist THEN process events" -- but the 1st part may be WM specific, etc.
>>
>> I recall docs being quite obtuse, and the X11 "mechanism not policy" credo doesn't help as WMs are not obliged to (say) send notifications, so you can end up stalling, waiting for events that never happen.
>>
>> It is entirely possible that there is stuff in here that I didn't understand properly at the time, and still don't!
>>
>> - pd
>>
>>> On 24 Apr 2019, at 02:30 , Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>>>
>>> Hi
>>>
>>> Sorry, I can't offer an explanation for the commented-out line.
>>> However, regarding your final question of avoiding the R-core bottleneck, you do have the option of creating a third-party graphics device package.  See, for example, the 'tikzDevice' and 'svglite' packages on CRAN.  Does that provide you with a way forward ?
>>>
>>> Paul
>>>
>>> On 20/04/2019 5:27 p.m., frederik at ofb.net wrote:
>>>> Dear R Devel,
>>>>
>>>> I know that someone put this line in src/modules/X11/devX11.c:2824 for
>>>> a reason, because commenting it out causes R to miss an important
>>>> ConfigureNotify event in my window manager. The result is that plots
>>>> are initially drawn off the window borders, unreadable.
>>>>
>>>>   R_ProcessX11Events((void*) NULL);
>>>>
>>>> Unfortunately for me, this line is commented in the standard release
>>>> of R, it has "#if BUG ... #endif" around it.
>>>>
>>>> I guess it is also unfortunate for anyone who uses the same window
>>>> manager as I do, namely i3, which I think is pretty popular among Unix
>>>> power users these days; not to mention other full-screen window
>>>> managers which probably exhibit the same bug in R.
>>>>
>>>> Maybe everyone on the Core team uses twm as their window manager? Or
>>>> RStudio on Windows? Which would be sad because then we're not
>>>> representing an important user demographic, namely those who prefer
>>>> software which is modern and powerful, yet simple to understand and
>>>> modify; fully configurable and interoperable and so on.
>>>>
>>>> I first reported this bug 3 years ago. In doing research for my bug
>>>> report, I found that the line was commented out by Peter Dalgaard in
>>>> 2001 with the explanation "X11 segfault fix - I hope".
>>>>
>>>> I don't know what the way forward is. Obviously the Core Team has
>>>> reason to say, "look, this isn't very important, it's been broken
>>>> since 2001, maybe fixing it will cause the undocumented segfault bug
>>>> to reappear, clearly no one here uses your window manager". Do I have
>>>> to submit a correctness proof for the proposed change? What do I do?
>>>>
>>>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702
>>>>
>>>> As mentioned in my bug report, I checked using gdb that
>>>> ConfigureNotify is indeed being received by the call to
>>>> R_ProcessX11Events() when it is uncommented. I haven't experienced any
>>>> segfaults.
>>>>
>>>> It's good that Peter left evidence that "R_ProcessX11Events" was being
>>>> called 18 years ago from X11DeviceDriver(). If he had deleted the
>>>> line, rather than commenting it, then discovering the reason for the
>>>> window rendering bug would have been much harder for me.
>>>>
>>>> However, the downside is that now it is not just a matter of inserting
>>>> the line where it belongs; I also feel a bit like I have to explain
>>>> why it was initially removed. But although I've given it some thought,
>>>> I still have no idea.
>>>>
>>>> Somewhat tangentially, I am wondering if there is some way that we
>>>> could make the development of R's graphics code proceed at a faster
>>>> rate, for example by pulling it out into a separate module, so that
>>>> people could offer alternative implementations via CRAN etc., rather
>>>> than having R Core be the bottleneck. Would this make sense? Has it
>>>> already been done?
>>>>
>>>> Thank you,
>>>>
>>>> Frederick
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> --
>>> Dr Paul Murrell
>>> Department of Statistics
>>> The University of Auckland
>>> Private Bag 92019
>>> Auckland
>>> New Zealand
>>> 64 9 3737599 x85392
>>> paul at stat.auckland.ac.nz
>>> http://www.stat.auckland.ac.nz/~paul/
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> --
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>
>>
>>
>>
>>
>>
>>
>>
>>
>
>-- 
>Peter Dalgaard, Professor,
>Center for Statistics, Copenhagen Business School
>Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>Phone: (+45)38153501
>Office: A 4.23
>Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>
>
>
>
>
>
>
>


From p@@|@h@@p@korv@ @end|ng |rom gm@||@com  Thu Apr 25 16:37:06 2019
From: p@@|@h@@p@korv@ @end|ng |rom gm@||@com (Pasi Haapakorva)
Date: Thu, 25 Apr 2019 17:37:06 +0300
Subject: [Rd] A bug in file.copy(), deletes file contents
Message-ID: <CAC1Ymy1Sza4DwjwRHq-2iv2Y9eBv6mkxZfW4A_0qaU2GoSHDtQ@mail.gmail.com>

Hi,

I've discovered a way to accidentally delete all your files with
file.copy(). This involves copying a directory to itself by bypassing
the check `if (recursive && to %in% from)` by pointing to a directory
with two differing ways.

Here I'm copying the directory foo to itself:

dir.create("foo")
cat(file = "foo/bar.txt", "baz\n")
readLines("foo/bar.txt")
#> [1] "baz"

file.copy("foo", ".", recursive = TRUE)
#> [1] TRUE
readLines("foo/bar.txt")
#> character(0)

Since "foo" is not ".", the directory is copied to itself and the
function calls file.create() to delete the file contents.

A simple fix would be to use `if (recursive && (to %in% from || from
%in% list.files(to)))` instead, I think. This could be slow if there
are a lot of files, so maybe this could be faster:

if (recursive && (to %in% from ||
normalizePath(dirname(normalizePath(from))) == normalizePath(to)))

There I'm looking if the parent dir of `from` matches the dir of `to`.
At least on my machine dirname() gives different path syntax than
normalizePath() so both input and output of dirname() needs to be put
though normalizePath().

There is a related bug in file.create(): it doesn't check if the file
already exists and goes on to delete contents of existing files.

Pasi Haapakorva


From pd@me@ @end|ng |rom cb@@dk  Fri Apr 26 09:41:13 2019
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Fri, 26 Apr 2019 07:41:13 +0000
Subject: [Rd] R 3.6.0 is released
Message-ID: <4C32716C-B72B-425F-B91B-44B6E80D055F@cbs.dk>

The build system rolled up R-3.6.0.tar.gz (codename "Planting of a Tree") this morning.

The list below details the changes in this release.

You can get the source code from

http://cran.r-project.org/src/base/R-3/R-3.6.0.tar.gz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course.


For the R Core Team,

Peter Dalgaard

These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = b9c44f9f78cab3184ad9898bebc854b4
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = 28a3942a7129877e9af1d5ea16202052
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = 6d227865440cc1ece3d97bdf4a8ee41e
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = eb78c4d053ec9c32b815cf0c2ebea801
MD5 (NEWS.2) = 591dcf615162127f904e4e461f330ce9
MD5 (R-latest.tar.gz) = 65601eac6d353f7efb5b48c29097c2fb
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = 529223fd3ffef95731d0a87353108435
MD5 (THANKS) = 08158353102084599797db8c9ccf8e2a
MD5 (VERSION-INFO.dcf) = 97d5e3df5e5ac56750695e4b49145fae
MD5 (R-3/R-3.6.0.tar.gz) = 65601eac6d353f7efb5b48c29097c2fb

2cde824a7b18958e5f06b391c801c8288be0f84fa8934b7ddefef23c67e60c09  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
38219d9c6221ccfbf075ef03711b420a1aa8731f890c8f2337148b602a217c2d  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
184dfa18e3069782d1092b289a6fe6ef85feb951cd4d1566b225c746d29a5420  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
12b30c724117b1b2b11484673906a6dcd48a361f69fc420b36194f9218692d01  NEWS.1
ca04f78ffe54afa326fe3ed40e7e1411aca0000ed2fa5ead97ddf51c6aa5b7bc  NEWS.2
36fcac3e452666158e62459c6fc810adc247c7109ed71c5b6c3ad5fc2bf57509  R-latest.tar.gz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
408737572ecc6e1135fdb2cf7a9dbb1a6cb27967c757f1771b8c39d1fd2f1ab9  RESOURCES
2d2e85e85574c4430951f6b070c08cd5aff1602abfd1bb162bed6d89c436b11f  THANKS
05bd1202b132c8e91a8887d923fcc525cfb3bf81c67847d15876b88bf0c68a71  VERSION-INFO.dcf
36fcac3e452666158e62459c6fc810adc247c7109ed71c5b6c3ad5fc2bf57509  R-3/R-3.6.0.tar.gz

This is the relevant part of the NEWS file

CHANGES IN R 3.6.0:

  SIGNIFICANT USER-VISIBLE CHANGES:

    * Serialization format version 3 becomes the default for
      serialization and saving of the workspace (save(), serialize(),
      saveRDS(), compiler::cmpfile()).  Serialized data in format 3
      cannot be read by versions of R prior to version 3.5.0.
      Serialization format version 2 is still supported and can be
      selected by version = 2 in the save/serialization functions.  The
      default can be changed back for the whole R session by setting
      environment variables R_DEFAULT_SAVE_VERSION and
      R_DEFAULT_SERIALIZE_VERSION to 2.  For maximal
      back-compatibility, files vignette.rds and partial.rdb generated
      by R CMD build are in serialization format version 2, and resave
      by default produces files in serialization format version 2
      (unless the original is already in format version 3).

    * The default method for generating from a discrete uniform
      distribution (used in sample(), for instance) has been changed.
      This addresses the fact, pointed out by Ottoboni and Stark, that
      the previous method made sample() noticeably non-uniform on large
      populations.  See PR#17494 for a discussion.  The previous method
      can be requested using RNGkind() or RNGversion() if necessary for
      reproduction of old results.  Thanks to Duncan Murdoch for
      contributing the patch and Gabe Becker for further assistance.

      The output of RNGkind() has been changed to also return the
      'kind' used by sample().

  NEW FEATURES:

    * Sys.setFileTime() has been vectorized so arguments path and time
      of length greater than one are now supported.

    * axis() gets new option gap.axis = NA for specifying a
      multiplication factor for the minimal "gap" (distance) between
      axis labels drawn.  Its default is 1 for labels _parallel_ to the
      axis, and 0.25 for perpendicular ones.

      Perpendicular labels no longer overlap, fixing bug PR#17384.

    * The default method of plot() gains new arguments xgap.axis = NA
      and ygap.axis = NA to be passed to the x- and y- axis(..,
      gap.axis=*) calls.

    * removeSource() now works not only for functions but also for some
      language objects.

    * as.call(), rep.int(), rep_len() and nchar() dispatch internally.

    * is(object, class2) looks for class2 in the calling namespace
      after looking in the namespace of class(object).

    * extendrange(.., f) with a length-2 f now extends separately to
      the left and the right.

    * lengths() dispatches internally to S4 methods.

    * download.file() on Windows now uses URLdecode() to determine the
      file extension, and uses binary transfer (mode = "wb") also for
      file extension .rds.

      The help page for download.file() now contains the same
      information on all platforms.

    * Setting C locale for collation _via_ environment variables LC_ALL
      and LC_COLLATE and _via_ a call to Sys.setlocale() now takes
      precedence over environment variable R_ICU_LOCALE.

    * There is a new function, nullfile(), to give the file name of the
      null system device (e.g., /dev/null) on the current platform.

    * There are two new options, keep.parse.data and
      keep.parse.data.pkgs, which control whether parse data are
      included into sources when keep.source or keep.source.pkgs is
      TRUE.  By default, keep.parse.data.pkgs is now FALSE, which
      changes previous behavior and significantly reduces space and
      time overhead when sources are kept when installing packages.

    * In rapply(x, ..), x can also be "list-like" and of length >=
      2^{31}.

    * trimws() gets new optional whitespace argument, allowing more
      extensive definitions of "space", such as including Unicode
      spaces (as wished in PR#17431).

    * weighted.mean() no longer coerces the weights to a double/numeric
      vector, since sum() now handles integer overflow. This makes
      weighted.mean() more polymorphic and endomorphic, but be aware
      that the results are no longer guaranteed to be a vector of type
      double.

    * When loading namespaces, S3 method registrations which overwrite
      previous registrations are now noted by default (using
      packageStartupMessage()).

    * compiler::cmpfile() gains a version argument, for use when the
      output file should be saved in serialization format 2.

    * The axis labeling in the default method of pairs() may now be
      toggled by new options horOdd and verOdd.

    * (Not Windows nor macOS.) Package tcltk now supports an
      environment variable R_DONT_USE_TK which if set disables Tk
      initialization.  This is intended for use to circumvent errors in
      loading the package, e.g. with recent Linux running under an
      address sanitizer.

    * The numeric method of all.equal() gets optional arguments countEQ
      and formatFUN.  If countEQ is true, the mean error is more
      sensible when many entries are *eq*ual.

    * outer(x,y, FUN = "*") is more efficient using tcrossprod(u,v)
      instead of u %*% t(v).

    * vcov(<mlm>) is more efficient via new optional arguments in
      summary.mlm().

    * The default method of summary() gets an option to choose the
      _kind_ of quantile()s to use; wish of PR#17438.

    * Fitting multiple linear models _via_ lm() does work with _matrix_
      offsets, as suggested in PR#17407.

    * The new functions mem.maxVSize() and mem.maxMSize() allow the
      maximal size of the vector heap and the maximal number of nodes
      allowed in the current R process to be queried and set.

    * news() gains support for NEWS.md files.

    * An effort has been started to have our reference manuals, i.e.,
      all help pages. show platform-independent information (rather
      than Windows or Unix-alike specifics visible only on that
      platform).  Consequently, the Windows version of X11() / x11()
      got identical formal arguments to the Unix one.

    * sessionInfo()$running has been factored out in a new variable
      osVersion.

    * slice.index() now also works for multi-dimensional margins.

    * untar() used with an external tar command assumes this supports
      decompression including xz and automagically detecting the
      compression type.  This has been true of all mainstream
      implementations since 2009 (for GNU tar, since version 1.22):
      older implementations are still supported _via_ the new argument
      support_old_tars whose default is controlled by environment
      variable R_SUPPORT_OLD_TARS.  (It looks like NetBSD and OpenBSD
      have 'older' tar commands for this purpose.)

    * The new function asplit() allow splitting an array or matrix by
      its margins.

    * New functions errorCondition() and warningCondition() provide a
      convenient way to create structured error and warning objects.

      .Deprecated() now signals a warning of class "deprecatedWarning",
      and .Defunct() now signals an error of class "defunctError".

    * Many 'package not found' errors are now signaled as errors of
      class "packageNotFoundError".

    * As an experimental feature, when loadNamespace() fails because
      the requested package is not available the error is initially
      signaled with a retry_loadNamespace restart available.  This
      allows a calling handler to try to install the package and
      continue.

    * S3method() directives in NAMESPACE can now also be used to
      perform _delayed_ S3 method registration.

    * Experimentally, setting environment variable
      _R_CHECK_LENGTH_1_LOGIC2_ will lead to warnings (or errors if the
      variable is set to a 'true' value) when && or || encounter and
      use arguments of length more than one.

    * Added "lines" and "chars" coordinate systems to grconvertX() and
      grconvertY().

    * getOption() is more efficient notably for the rare case when
      called with two arguments, from several contributors in PR#17394.

    * In .col(dim) and .row(dim), dim now may also be an integer-valued
      "double".

    * sQuote() and dQuote() get an explicit q argument with obvious
      default instead of using getOption("fancyQuotes") implicitly and
      unconditionally.

    * unzip() can list archives with comments and with spaces in file
      names even using an external unzip command.

    * Command line completion has a new setting rc.settings(dots =
      FALSE) to remove ... from the list of possible function
      arguments.

    * library() no longer checks packages with compiled code match
      R.version$platform.  loadNamespace() never has, and increasingly
      the 'canonical name' does not reflect the important
      characteristics of compiled code.

    * The primitive functions drop() and unclass() now avoid
      duplicating their data for atomic vectors that are large enough,
      by returning ALTREP wrapper objects with adjusted attributes.
      R-level assignments to change attributes will also use wrapper
      objects to avoid duplicating data for larger atomic vectors. R
      functions like structure() and unname() will therefore not
      duplicate data in these settings.  Generic vectors as produced by
      list() are not yet covered by this optimization but may be in due
      course.

    * In formals(), envir becomes an optional argument instead of being
      hardwired.

    * Instead of signalling an error for an invalid S4 object x, str(x)
      now gives a warning and subsequently still shows most parts of x,
      e.g., when slots are missing.

    * gamma(x) and lgamma(x) no longer warn when correctly returning
      Inf or underflowing to zero.  This helps maximum likelihood and
      similar computations.

    * convertColor() is now vectorized, so a lot faster for converting
      many colours at once.  The new argument vectorized to
      colorConverter() ensures that non-vectorized colour converters
      still work.  (Thanks to Brodie Gaslam.)

    * download.file() and url() get new argument headers for custom
      HTTP headers, e.g., allowing to perform basic http
      authentication, thanks to a patch contributed by G'abor Cs'ardi.

    * File-based connection functions file(), gzfile(), bzfile() and
      xzfile() now signal an error when used on a directory.

    * For approx(), splinefun() _etc_, a new setting ties =
      c("ordered", <fun>) allows skipping the sorting and still treat
      ties.

    * format(x) gives a more user friendly error message in the case
      where no method is defined.  A minimal method is provided in
      format.default(x) when isS4(x) is true.

    * which(x) now also works when x is a long vector, thanks to
      Suharto Anggono's PR#17201.  *NB*: this may return a double
      result, breaking the previous guarantee of an integer result.

    * seq.default() is more careful to return an integer (as opposed to
      double) result when its arguments are large and/or classed
      objects; see comment #9 of Suharto Anggono's PR#17497.

    * The plot() method for lm and glm fits, plot.lm(), gains a new
      option iter.smooth with a default of 0 for binomial fits, no
      longer down-weighting when smoothing the residuals.

    * zip() passes its list of files _via_ standard input to the
      external command when too long for the command line (on some
      platforms).

    * data() gains an overwrite argument.

    * t.test() now also returns the standard error (in list component
      stderr).

    * model.matrix(*, contrasts.arg = CC) now warns about invalid
      contrasts.args.

    * Performance of substr() and substring() has been improved.

    * stopifnot() has been simplified thanks to Suharto Anggono's
      proposals to become considerably faster for cheap expressions.

    * The default 'user agent' has been changed when accessing http://
      and https:// sites using libcurl.  (A site was found which caused
      libcurl to infinite-loop with the previous default.)

    * sessionInfo() now also contains RNGkind() and prints it when it
      differs from the default; based on a proposal and patch by Gabe
      Becker in PR#17535.  Also, RNGversion(getRversion()) works
      directly.

    * library() and require() now allow more control over handling
      search path conflicts when packages are attached. The policy is
      controlled by the new conflicts.policy option.

    * barplot() gets a formula method, thanks to a patch proposal by
      Arni Magnusson in PR#17521.

    * pmax() and pmin(x) now also work for long vectors, thanks to
      Suharto Anggono's PR#17533.

    * bxp() now warns when omitting duplicated arguments.

    * New hcl.colors() function to provide wide range of HCL-based
      colour palettes with much better perceptual properties than the
      existing RGB/HSV-based palettes like rainbow().

      Also a new hcl.pals() function to list available palette names
      for hcl.colors().

      Contributed by Achim Zeileis.

    * The default colours for image() and filled.contour() are now
      based on hcl.colors().

    * The palette-generating functions rainbow(), gray.colors(), etc.
      get a new rev argument to facilitate reversing the order of
      colors.

    * New str2lang() and str2expression() as streamlined versions of
      parse(text=., keep.source=FALSE) allow to abstract typical call
      constructions, e.g., in formula manipulations.  (Somewhat
      experimental)

    * Add update_PACKAGES() for incrementally updating a package
      repository index, instead of rebuilding the index from scratch.
      Thanks to Gabe Becker in PR#17544 for the patch, based on part of
      his switchr package.

  INSTALLATION on a UNIX-ALIKE:

    * The options selected for the C++ compiler default to the C++11
      standard if supported, otherwise to the C++98 standard.

    * Visibility macros such as C_VISIBILITY can now be user-set
      (including to empty), e.g. in config.site.

    * Macro FCLIBS, which has sometimes been needed on Solaris, has
      been renamed to FCLIBS_XTRA.

    * Macro F77 is always set to the value of FC, so the latter should
      be set to user-select the Fortran compiler for both fixed-form
      and free-form Fortran.  In particular, gfortran is now the first
      choice for F77, not f95.

      Macros FFLAGS and FCFLAGS remain distinct to allow for a compiler
      which needs a flag to select free- or fixed-form Fortran (most
      use the source-file extension to choose: .f is fixed-form and
      .f90 and .f95 are free-form).

      If only one of them is set, its value is used for both.

    * The special-casing of CFLAGS, CXXFLAGS and FFLAGS for Intel
      compilers on Linux has been removed: we do not have recent
      experience but the generic defaults now chosen are the same as
      those previously special-cased for x86_64.

      If necessary, override the defaults on the configure command line
      or in file config.site.

    * Long-untested configure support for HP-UX and very old versions
      of Linux has been removed.

    * configure --with-blas (without specifying a value) includes
      OpenBLAS in its search (before ATLAS and a generic BLAS).  This
      follows recent versions of the ax_blas autoconf macro.

    * The configure macro MAKEINFO has been updated to TEXI2ANY.

    * Support for make install-strip has been enhanced.

  PACKAGE INSTALLATION:

    * Source package installation is by default 'staged': the package
      is installed into a temporary location under the final library
      directory and moved into place once the installation is complete.
      The benefit is that partially-installed packages are hidden from
      other R sessions.

      The overall default is set by environment variable
      R_INSTALL_STAGED.  R CMD INSTALL has new options --staged-install
      and --no-staged-install, and packages can use the StagedInstall
      field in their DESCRIPTION file to opt out.  (That opt-out is a
      temporary measure which may be withdrawn in future.)

      Staged installation requires either --pkglock or --lock, one of
      which is used by default.

    * The interpretation of source code with extension .f is changing.
      Previously this denoted FORTRAN 77 code, but current compilers no
      longer have a FORTRAN 77 mode and interpret it as 'fixed-form'
      Fortran 90 (or later where supported) code.  Extensions .f90 and
      .f95 continue to indicate 'free-form' Fortran code.

      Legal FORTRAN 77 code is also legal fixed-form Fortran 9x;
      however this change legitimizes the use of later features, in
      particular to replace features marked 'obsolescent' in Fortran 90
      and 'deleted' in Fortran 2018 which gfortran 8.x and later warn
      about.

    * Packages containing files in the src directory with extensions
      .f90 or .f95 are now linked using the C or C++ compiler rather
      than the Fortran 9x compiler.  This is consistent with fixed-form
      Fortran code and allows mixing of C++ and free-form Fortran on
      most platforms.

      Consequentially, a package which includes free-form Fortran 9x
      code which uses OpenMP should include SHLIB_OPENMP_CFLAGS (or the
      CXXFLAGS version if they also include C++ code) in PKG_LIBS
      rather than SHLIB_OPENMP_FCFLAGS - fortunately on almost all
      current platforms they are the same flag.

    * Macro PKG_FFLAGS will be used for the compilation of both
      fixed-form and free-form Fortran code unless PKG_FCFLAGS is also
      set (in src/Makevars or src/Makevars.win).

    * The make macro F_VISIBILITY is now preferred for both fixed-form
      and free-form Fortran, for use in src/Makevars and similar.

    * R CMD INSTALL gains a new option --strip which (where supported)
      strips installed shared object(s): this can also be achieved by
      setting the environment variable _R_SHLIB_STRIP_ to a true value.

      The new option --strip-lib attempts stripping of static and
      shared libraries installed under lib.

      These are most useful on platforms using GNU binutils (such as
      Linux) and compiling with -g flags.

    * There is more support for installing UTF-8-encoded packages in a
      strict Latin-1 locale (and probably for other Latin locales):
      non-ASCII comments in R code (and NAMESPACE files) are worked
      around better.

  UTILITIES:

    * R CMD check now optionally checks makefiles for correct and
      portable use of the SHLIB_OPENMP_*FLAGS macros.

    * R CMD check now evaluates \Sexpr{} expressions (including those
      in macros) before checking the contents of Rd files and so
      detects issues both in evaluating the expressions and in the
      expanded contents.

    * R CMD check now lists missing packages separated by commas and
      with regular quotes such as to be useful as argument in calling
      install.packages(c(..)); from a suggestion by Marcel Ramos.

    * tools::Rd2latex() now uses UTF-8 as its default output encoding.

    * R CMD check now checks line endings of files with extension .hpp
      and those under inst/include.  The check now includes that a
      non-empty file is terminated with a newline.

      R CMD build will correct line endings in such files.

    * R CMD check now tries re-building all vignettes rather than
      stopping at the first error: whilst doing so it adds 'bookmarks'
      to the log.  By default (see the 'R Internals' manual) it
      re-builds each vignette in a separate process.

      It now checks for duplicated vignette titles (also known as
      'index entries'): they are used as hyperlinks on CRAN package
      pages and so do need to be unique.

    * R CMD check has more comprehensive checks on the data directory
      and the functioning of data() in a package.

    * R CMD check now checks autoconf-generated configure files have
      their corresponding source files, including optionally attempting
      to regenerate them on platforms with autoreconf.

    * R CMD build has a new option --compression to select the
      compression used for the tarball.

    * R CMD build now removes src/*.mod files on all platforms.

  C-LEVEL FACILITIES:

    * New pointer protection C functions R_PreserveInMSet and
      R_ReleaseFromMSet have been introduced to replace UNPROTECT_PTR,
      which is not safe to mix with UNPROTECT (and with
      PROTECT_WITH_INDEX). Intended for use in parsers only.

    * NAMEDMAX has been raised to 7 to allow further protection of
      intermediate results from (usually ill-advised) assignments in
      arguments to BUILTIN functions. Properly written package code
      should not be affected.

    * R_unif_index is now considered to be part of the C API.

    * R_GetCurrentEnv() allows C code to retrieve the current
      environment.

  DEPRECATED AND DEFUNCT:

    * Argument compressed of untar() is deprecated - it is only used
      for external tar commands which increasingly for extraction
      auto-detect compression and ignore their zjJ flags.

    * var(f) and hence sd(f) now give an error for factor arguments;
      they gave a deprecation warning since R 3.2.3, PR#16564.

    * Package tools' vignetteDepends() has been deprecated (it called a
      function deprecated since Feb 2016), being partly replaced by
      newly exported vignetteInfo().

    * The f77_f2c script has been removed: it no longer sufficed to
      compile the .f files in R.

    * The deprecated legacy support of make macros such as CXX1X has
      been removed: use the CXX11 forms instead.

    * Make macro F77_VISIBILITY is deprecated in favour of
      F_VISIBILITY.

    * Make macros F77, FCPIFCPLAGS and SHLIB_OPENMP_FCFLAGS are
      deprecated in favour of FC, FPICFLAGS and SHLIB_OPENMP_FFLAGS
      respectively.

    * $.data.frame had become an expensive version of the default
      method, so has been removed. (Thanks to Radford Neal for picking
      this up and to Duncan Murdoch for providing a patch.)

  BUG FIXES:

    * replayPlot(r) now also works in the same R session when r has
      been "reproduced" from serialization, typically after saving to
      and reading from an RDS file.

    * substr() and substring() now signal an error when the input is
      invalid UTF-8.

    * file.copy() now works also when its argument to is of length
      greater than one.

    * mantelhaen.test() no longer suffers from integer overflow in
      largish cases, thanks to Ben Bolker's PR#17383.

    * Calling setGeneric("foo") in a package no longer fails when the
      enclosing environment of the implicit generic foo() is
      .GlobalEnv.

    * untar(file("<some>.tar.gz"), *) now gives a better error message,
      suggesting to use gzfile() instead.

    * Method dispatch uses more relevant environments when looking up
      class definitions.

    * The documentation for identify() incorrectly claimed that the
      indices of identified points were returned in the order that the
      points were selected.  identify() now has a new argument order to
      allow the return value to include the order in which points were
      identified; the documentation has been updated.  Reported by
      Richard Rowe and Samuel Granjeaud.

    * order(...., decreasing=c(TRUE, FALSE)) could fail in some cases.
      Reported from StackOverflow via Karl Nordstr"om.

    * User macros in Rd files now accept empty and multi-line
      arguments.

    * Changes in print.*(), thanks to Lionel Henry's patches in
      PR#17398:

        * Printing lists, pairlists or attributes containing calls with
          S3 class no longer evaluate those.

        * Printing S4 objects within lists and pairlists dispatches
          with show() rather than print(), as with auto-printing.

        * The indexing tags (names or [[<n>]]) of recursive data
          structures are now printed correctly in complex cases.

        * Arguments supplied to print() are now properly forwarded to
          methods when printing lists, pairlists or attributes
          containing S3 objects.

        * The print parameters are now preserved when printing S3
          objects or deparsing symbols and calls.  Previously, printing
          lists containing S3 objects or expressions would reset these
          parameters.

        * Printing lists, pairlists or attributes containing functions
          now uses srcref attributes if present.

    * Calling install.packages() with a length zero pkgs argument now
      is a no-op (PR#17422).

    * unlist(x) now returns a correct factor when x is a nested list
      with factor leaves, fixing PR#12572 and PR#17419.

    * The documentation help(family) gives more details about the aic
      component, thanks to Ben Bolker's prompting.

    * The documentation for attributes and `attributes<-` now gives x
      as name of the first and main argument which the implementation
      has been requiring, fixing PR#17434.  For consistency, the first
      argument name is also changed from obj to x for
      `mostattributes<-`.

    * strwidth() now uses par("font") as default font face (PR#17352).

    * plot(<table>, log="x") no longer warns about log.

    * The print() method for "htest" objects now formats the test
      statistic and parameter directly and hence no longer rounds to
      units _before_ the decimal point.  Consequently, printing of
      t.test() results with a small number of digits now shows
      non-large df's to the full precision (PR#17444).

    * kruskal.test() and fligner.test() no longer erroneously insist on
      numeric g group arguments (PR#16719).

    * Printing a news db via the browser now does a much better job
      (PR#17433).

    * print.aov() missed column names in the multivariate case due to
      misspelling (reported by Chris Andrews).

    * axis() now creates valid at locations also for small subnormal
      number ranges in log scale plots.

    * format.POSIXlt() now also recycles the zone and gmtoff list
      components to full length when needed, and its internal C code
      detects have_zone in more cases.  In some cases, this changes its
      output to become compatible with format.POSIXct().

    * On Windows, detectCores() in package parallel now detects
      processors in all processor groups, not just the group R is
      running in (impacts particularly systems with more than 64
      logical processors).  Reported by Arunkumar Srinivasan.

    * On Windows, socketSelect() would hang with more than 64 sockets,
      and hence parallel::clusterApplyLB() would hang with more than 64
      workers.  Reported by Arunkumar Srinivasan.

    * as(1L, "double") now does coerce (PR#17457).

    * lm.influence(), influence.measures(), rstudent() etc now work
      (more) correctly for multivariate models ("mlm"), thanks to
      (anonymous) stackoverflow remarks.

    * sample.int(2.9, *, replace=TRUE) again behaves as documented and
      as in R < 3.0.0, namely identically to sample.int(2, ..).

    * Fixes to convertColor() for chromatic adaptation; thanks to
      Brodie Gaslam PR#17473.

    * Using \Sexpr[stage=install]{..} to create an Rd section no longer
      gives a warning in R CMD check; problem originally posted by
      G'abor Cs'ardi, then reported as PR#17479 with a partial patch by
      Duncan Murdoch.

    * Parse data now include a special node for equal assignment.

    * split.default() no longer relies on [[<-(), so it behaves as
      expected when splitting an object by a factor with the empty
      string as one of its levels.  Thanks to Brad Friedman for the
      report.

    * Line numbers in messages about .Rd files are now more reliable,
      thanks to a patch from Duncan Murdoch.

    * In the numeric method for all.equal(), a numeric scale argument
      is now checked to be positive and allowed to be of length > 1.
      (The latter worked originally and with a warning in recent
      years).

    * Deferred string conversions now record the OutDec option setting
      when not equal to the default.  Reported by Michael Sannella.

    * When y is numeric and f a factor, plot(y ~ f) nicely uses "y" and
      "f" as y- and x-labels.  The more direct boxplot(y ~ f) now does
      too.  The new argument ann = FALSE may be used to suppress these.

    * Subassignment to no/empty rows of a data frame is more consistent
      and typically a no-op in all cases instead of sometimes an error;
      part of Emil Bode's PR#17483.

    * Calls like formatC(*, zero.print = "< 0.001") no longer give an
      error and are further improved via new optional argument
      replace.zero.  Reported by David Hugh-Jones.

    * methods::formalArgs("<fn>") now finds the same function as
      formals("<fn>"), fixing Emil Bode's PR#17499.

    * The methods package better handles duplicated class names across
      packages.

    * The default method of seq() now avoids integer overflow, thanks
      to the report and "cumsum" patch of Suharto Anggono's PR#17497.

    * sub() no longer loses encodings for non-ASCII replacements
      (PR#17509).

    * Fix for rotated raster image on X11 device.  (Partial fix for
      PR#17148; thanks to Mikko Korpela).

    * formula(model.frame(frml, ..)) now returns frml in all cases,
      thanks to Bill Dunlap.  The previous behavior is available as
      DF2formula(<model.frame>).

    * ar.ols() also returns scalar var.pred in univariate case
      (PR#17517).

    * normalizePath() now treats NA path as non-existent and normalizes
      it to NA.  file.access() treats NA file name as non-existent.
      file.edit() and connection functions such as file() now treat NA
      file names as errors.

    * The internal regularize.values() auxiliary of approx(),
      splinefun() etc now warns again when there are ties and the
      caller did not specify ties.  Further, it no longer duplicates x
      and y unnecessarily when x is already sorted (PR#17515).

    * strtoi("", base) now gives NA on all platforms, following its
      documentation.  Reported by Michael Chirico.

    * In the definition of an S4 class, prototype elements are checked
      against the slots of the class, with giving a prototype for an
      undefined slot now being an error.  (Reported by Bill Dunlap.)

    * From setClassUnion(), if environment variable
      _R_METHODS_SHOW_CHECKSUBCLASSES is set to true, the internal
      .checkSubclasses() utility prints debugging info to see where it
      is used.

    * max.col(m) with an m of zero columns now returns integer NA
      (instead of 1).

    * axTicks() no longer returns small "almost zero" numbers (in
      exponential format) instead of zero, fixing Ilario Gelmetti's
      PR#17534.

    * isSymmetric(matrix(0, dimnames=list("A","b"))) is FALSE again, as
      always documented.

    * The cairo_pdf graphics device (and other Cairo-based devices) now
      clip correctly to the right and bottom border.

      There was an off-by-one-pixel bug, reported by Lee Kelvin.

    * as.roman(3) <= 2:4 and all other comparisons now work, as do
      group "Summary" function calls such as max(as.roman(sample(20)))
      and as.roman(NA).  (Partly reported by Bill Dunlap in PR#17542.)

    * reformulate("x", response = "sin(y)") no longer produces extra
      back quotes, PR#17359, and gains new optional argument env.

    * When reading console input from stdin with re-encoding (R
      --encoding=enc < input) the code on a Unix-alike now ensures that
      each converted input line is terminated with a newline even if
      re-encoding fails.

    * as.matrix.data.frame() now produces better strings from logicals,
      thanks to PR#17548 from Gabe Becker.

    * The S4 generic signature of rowSums(), rowMeans(), colSums() and
      colMeans() is restricted to "x".

    * match(x, tab) now works for long _character_ vectors x, thanks to
      PR#17552 by Andreas Kersting.

    * Class unions are unloaded when their namespace is unloaded
      (PR#17531, adapted from a patch by Brodie Gaslam).

    * selectMethod() is robust to ANY-truncation of method signatures
      (thanks to Herve Pages for the report).



-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Apr 26 14:42:33 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 26 Apr 2019 14:42:33 +0200
Subject: [Rd] 
 configure script issue with -flto with recent gcc and system
 ar/ranlib
In-Reply-To: <393de1b8-52b4-e35c-f1a3-4b550967875c@tkoenig.net>
References: <60fd285c-1aac-29ba-c867-dfc43c7de930@tkoenig.net>
 <494c2fb7-64fc-9336-7b86-ec36fb44f416@gmail.com>
 <393de1b8-52b4-e35c-f1a3-4b550967875c@tkoenig.net>
Message-ID: <450c2cfd-ac4e-a7d0-83d7-cf22cdde9525@gmail.com>

On 4/25/19 6:11 PM, Thomas K?nig wrote:
> Hi Tomas,
>
>> On 4/23/19 2:59 PM, Thomas K?nig wrote:
>>> Hi,
>>>
>>> there can be an issue with recent gcc where the system-installed "ar"
>>> and "ranlib" commands cannot handle LTO binaries.? On compilation, this
>>> manifests itself with error messages claiming that they need extra
>>> plugins.
>
>> Thanks for the report. What was the version of binutils on the system 
>> with this problem? On my Ubuntu 18.04 I can use the binutils version 
>> of "ar" and "ranlib" with --enable-lto without problems.? I read that 
>> with recent binutils (2.25?), the LTO plugin should be loaded 
>> automatically, so one does not have to use the wrappers anymore.
>
> This was with, on x86_64-pc-linux-gnu,
>
> GNU ar (GNU Binutils; openSUSE Leap 42.3) 2.31.1.20180828-19
>
> and, on powerpc64le-unknown-linux-gnu,
>
> GNU ar version 2.27-34.base.el7
>
> both with a recent gcc 9.0.1 snapshot.

Thanks. I can reproduce with Leap 42.3 and gcc-8, the binutils ar fails 
with errors "plugin needed to handle lto object". This is because "ar" 
cannot find the LTO plugin liblto_plugin.so. The plugin needs to be in 
directory /usr/lib/bfd-plugins for ar/nm/ranlib to find it. On 42.3, gcc 
installation fails to create that directory and link its plugin there. I 
read that the problem is fixed in Leap 45. To work this around in Leap 
42.3, one may build R using the wrappers (AR=gcc-ar RANLIB=gcc-ranlib 
NM=gcc-nm) or create the link.

mkdir /usr/lib/bfd-plugins
ln -s /usr/lib64/gcc/x86_64-suse-linux/8/liblto_plugin.so 
/usr/lib/bfd-plugins

Similar wrappers exist also for LLVM, but I read that LLVM installation 
on Leap 42.3 links its plugin properly from /usr/lib/bfd-plugins.

Best
Tomas

>
> Regards
>
> ????Thomas


From wo||@ch|@eger @end|ng |rom un|-m@|nz@de  Fri Apr 26 17:13:36 2019
From: wo||@ch|@eger @end|ng |rom un|-m@|nz@de (Wollschlaeger, Daniel)
Date: Fri, 26 Apr 2019 15:13:36 +0000
Subject: [Rd] Error in glm(..., family=quasi(..., variance=list(...)))
Message-ID: <47c66dfd998b4759a8ae54cc65b32427@uni-mainz.de>

In a glm() call using a quasi() family, one may define a custom variance function in the form of a "list containing components varfun, validmu, dev.resids, initialize and name" (quoting the help page for family). In trying to do so, I run into the following issue that I have not seen discussed previously:

x  <- runif(1000, min=0, max=1)
y  <- x + rnorm(1000, mean=0, sd=1)*x^(3/4)
vf <- function(mu) { abs(mu)^(3/4) }
vm <- function(mu) { rep(TRUE, length(mu)) }
dr <- function(y, mu, wt) { (y-mu)^2 }
it <- expression({ n <- rep.int(1, nobs); mustart <- y })
glm(y ~ x, family=quasi(link="identity", variance=list(varfun=vf, validmu=vm, dev.resids=dr, initialize=it, name="custom")))

This gives "Error in switch(vtemp, constant = { : EXPR must be a length 1 vector" from line 576 in file family.R (https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/stats/R/family.R#L576). I believe this is due to line 573 "vtemp <- substitute(variance)" and 574 "if (!is.character(vtemp)) vtemp <- deparse(vtemp)" where vtemp becomes a length 2 character vector because, by default, deparse() breaks lines at width.cutoff = 60L characters. In stepping through quasi() during debug, setting vtemp <- (vtemp, collapse=" ") on line 576 avoids the error.

A workaround from https://tolstoy.newcastle.edu.au/R/help/05/06/6795.html appears to be to define one's own complete quasi2() function with the desired variance function pre-stored.

Is this known/expected, or should I file a bug?

Many thanks and best regards

Daniel

> sessionInfo()
R version 3.6.0 (2019-04-26)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 14393)

Matrix products: default

locale:
[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   
[3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   
[5] LC_TIME=German_Germany.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.6.0


From Len@We|| @end|ng |rom comc@@t@net  Sat Apr 27 16:30:41 2019
From: Len@We|| @end|ng |rom comc@@t@net (Len Weil)
Date: Sat, 27 Apr 2019 10:30:41 -0400
Subject: [Rd] Suspect error in windows version of 3.60
Message-ID: <000901d4fd05$cf3e08c0$6dba1a40$@Weil@comcast.net>

Gentlemen,

 

I've observed a suspected bug in R-3.60 for Windows 10.

I am using the latest R version, but I have observed the same error in all
releases: alpha, beta RC and released.

Also the same issue occurs in the 32 and 64 bit GUI versions.  The program
header I invoke is:

 

R version 3.6.0 Patched (2019-04-26 r76431) -- "Planting of a Tree"

Copyright (C) 2019 The R Foundation for Statistical Computing

Platform: x86_64-w64-mingw32/x64 (64-bit)

 

Specifically, the menu selection Packages -> install packages fails. 

When invoked, it simply echoes: utils:::menuInstallPkgs() and returns the
prompt.

 

I found the underlying code with the getAnywhere function.

It displays:

getAnywhere(menuInstallPkgs)

A single object matching 'menuInstallPkgs' was found

It was found in the following places

  namespace:utils

with value

 

function (type = getOption("pkgType")) 

{

    install.packages(NULL, .libPaths()[1L], dependencies = NA, 

        type = type)

}

<bytecode: 0x0000000016c6a730>

<environment: namespace:utils>

 

The first argument, NULL, prevents the underlying function install.packages
from working.

I assume this is not intentional awaiting packages to catch up with the
newer R format.

 

Thanks,

Len Weil

 

len.weil at comcast.net


	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Apr 27 20:46:55 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 27 Apr 2019 14:46:55 -0400
Subject: [Rd] Suspect error in windows version of 3.60
In-Reply-To: <5cc492c2.1c69fb81.57a0a.928eSMTPIN_ADDED_BROKEN@mx.google.com>
References: <5cc492c2.1c69fb81.57a0a.928eSMTPIN_ADDED_BROKEN@mx.google.com>
Message-ID: <cdfc2705-95fc-1849-306e-9079ce5ca811@gmail.com>

On 27/04/2019 10:30 a.m., Len Weil wrote:
> Gentlemen,
> 
>   
> 
> I've observed a suspected bug in R-3.60 for Windows 10.
> 
> I am using the latest R version, but I have observed the same error in all
> releases: alpha, beta RC and released.
> 
> Also the same issue occurs in the 32 and 64 bit GUI versions.  The program
> header I invoke is:
> 
>   
> 
> R version 3.6.0 Patched (2019-04-26 r76431) -- "Planting of a Tree"
> 
> Copyright (C) 2019 The R Foundation for Statistical Computing
> 
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> 
>   
> 
> Specifically, the menu selection Packages -> install packages fails.
> 
> When invoked, it simply echoes: utils:::menuInstallPkgs() and returns the
> prompt.
> 
>   
> 
> I found the underlying code with the getAnywhere function.
> 
> It displays:
> 
> getAnywhere(menuInstallPkgs)
> 
> A single object matching 'menuInstallPkgs' was found
> 
> It was found in the following places
> 
>    namespace:utils
> 
> with value
> 
>   
> 
> function (type = getOption("pkgType"))
> 
> {
> 
>      install.packages(NULL, .libPaths()[1L], dependencies = NA,
> 
>          type = type)
> 
> }
> 
> <bytecode: 0x0000000016c6a730>
> 
> <environment: namespace:utils>
> 
>   
> 
> The first argument, NULL, prevents the underlying function install.packages
> from working.

No, it is documented to trigger presentation of a list of packages to 
install.  That list takes time to download from CRAN, so perhaps you are 
just too impatient to wait for it, or perhaps it really is broken:  but 
the NULL is not the issue.

Duncan Murdoch

> I assume this is not intentional awaiting packages to catch up with the
> newer R format.
> 
>   
> 
> Thanks,
> 
> Len Weil
> 
>   
> 
> len.weil at comcast.net
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Apr 27 21:00:20 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 27 Apr 2019 15:00:20 -0400
Subject: [Rd] Suspect error in windows version of 3.60
In-Reply-To: <cdfc2705-95fc-1849-306e-9079ce5ca811@gmail.com>
References: <5cc492c2.1c69fb81.57a0a.928eSMTPIN_ADDED_BROKEN@mx.google.com>
 <cdfc2705-95fc-1849-306e-9079ce5ca811@gmail.com>
Message-ID: <1019d9e3-13f0-2c23-adb2-ac16e53629fa@gmail.com>

On 27/04/2019 2:46 p.m., Duncan Murdoch wrote:
> On 27/04/2019 10:30 a.m., Len Weil wrote:
>> Gentlemen,
>>
>>    
>>
>> I've observed a suspected bug in R-3.60 for Windows 10.
>>
>> I am using the latest R version, but I have observed the same error in all
>> releases: alpha, beta RC and released.
>>
>> Also the same issue occurs in the 32 and 64 bit GUI versions.  The program
>> header I invoke is:
>>
>>    
>>
>> R version 3.6.0 Patched (2019-04-26 r76431) -- "Planting of a Tree"
>>
>> Copyright (C) 2019 The R Foundation for Statistical Computing
>>
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>
>>    
>>
>> Specifically, the menu selection Packages -> install packages fails.
>>
>> When invoked, it simply echoes: utils:::menuInstallPkgs() and returns the
>> prompt.
>>
>>    
>>
>> I found the underlying code with the getAnywhere function.
>>
>> It displays:
>>
>> getAnywhere(menuInstallPkgs)
>>
>> A single object matching 'menuInstallPkgs' was found
>>
>> It was found in the following places
>>
>>     namespace:utils
>>
>> with value
>>
>>    
>>
>> function (type = getOption("pkgType"))
>>
>> {
>>
>>       install.packages(NULL, .libPaths()[1L], dependencies = NA,
>>
>>           type = type)
>>
>> }
>>
>> <bytecode: 0x0000000016c6a730>
>>
>> <environment: namespace:utils>
>>
>>    
>>
>> The first argument, NULL, prevents the underlying function install.packages
>> from working.
> 
> No, it is documented to trigger presentation of a list of packages to
> install.  That list takes time to download from CRAN, so perhaps you are
> just too impatient to wait for it, or perhaps it really is broken:  but
> the NULL is not the issue.
> 

Sorry, you were right.  The docs in 3.6.0 have changed:  now the pkgs 
argument must be missing to trigger the menu.  The NULL is not missing, 
it is interpreted as specifying no packages.

Duncan Murdoch


From pd@|gd @end|ng |rom gm@||@com  Sun Apr 28 01:39:42 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 28 Apr 2019 01:39:42 +0200
Subject: [Rd] 
 [FORGED]  src/modules/X11/devX11.c, can we remove "#if BUG" yet
In-Reply-To: <20190425232356.a6vn2unt3ju6a3f7@localhost>
References: <20190420052728.7tgjr4zxqdddsimm@localhost>
 <3badc471-0698-42e1-581a-2988eb3bf818@stat.auckland.ac.nz>
 <4FEA2AD4-C0A6-4CEE-AB30-CD8AE209ED24@gmail.com>
 <3C40D480-61B5-40D1-A592-1890B090C124@gmail.com>
 <20190425232356.a6vn2unt3ju6a3f7@localhost>
Message-ID: <07AB76A5-EA6A-45AC-BFB5-170CD093DE39@gmail.com>

I had a look at the current code, and AFAICT it has essentially the same structure as it did back then. I think it may have finally dawned upon me what the issue really is:

The logic is that in Rf_addX11Device, we have 

        if (!X11DeviceDriver(dev, display, width, height,
                             ps, gamma, colormodel, maxcubesize,
                             bgcolor, canvascolor, sfonts, res,
                             xpos, ypos, title, useCairo, antialias, family)) {
            free(dev);
            errorcall(call, _("unable to start device %s"), devname);
        }
        dd = GEcreateDevDesc(dev);
        GEaddDevice2(dd, devname);

i.e., we start the device driver, and if it fails, we throw away the "dev" structure and call it a day. If it succeeds, we proceed to create a device descriptor structure and add it to the list of open devices.

This approach means that X11DeviceDriver() cannot do anything that potentially accesses the dd structure because it isn't there yet, and the things it cannot do apparently includes calling R_ProcessX11Events(). [To be completely sure that this is actually still true, I'd need to have a closer look at what handleEvent() does.]

So to fix things, it would seem that you could (a) add the device before attempting to start the driver, preparing to back it out if the driver fails to start, or (b) add a call to R_ProcessX11Events() _after_ the GEaddDevice2(dd, devname). Option (b) is probably the easiest.

Paul: Does this analysis look roughly right?

-pd




> On 26 Apr 2019, at 01:23 , frederik at ofb.net wrote:
> 
> Thanks Professor Dalgard.
> 
> If you have a different way to fix the bug then I'd be happy to test
> it.
> 
> Or whatever. I understand that maybe some data was being referenced
> before it had been initialized. I could also support moving the
> R_ProcessEvents call in another place, but it seems one would also
> like to generate some kind of warning message, at the location of the
> bad reference, rather than segfaulting. Was it not possible to
> identify this location? I'm guessing that Valgrind is a bit more
> mature now than it was in 2001...?
> 
> Frederick
> 
> On Wed, Apr 24, 2019 at 03:12:55PM +0200, peter dalgaard wrote:
>> OK, so I did the archaeology anyway....
>> 
>> 
>> This was the story, R-core November 29, 2001. Part of thread "X11 still segfaults".
>> 
>> ------------>>
>> .....
>> Gah. I've been too tired today. Why did that take me so long?
>> 
>> The culprit seems to be
>> 
>> R_ProcessEvents((void*) NULL)
>> 
>> in newX11DeviceDriver
>> 
>> This gets called *before* this stuff at the end of Rf_addX11Device
>> 
>> 	dd = GEcreateDevDesc(dev);
>> 	addDevice((DevDesc*) dd);
>> 	initDisplayList((DevDesc*) dd);
>> 
>> and it is that "dd" that gets called by Rf_playDisplayList. Removing
>> the offending line stops the segfaulting, seemingly with no ill
>> effects.
>> 
>> I'm not really sure what the use of that line ever was; it might be
>> necessary to make the call somewhere later, but it appears to have
>> been possible to race past it before receiving any events all the
>> time.
>> 
>> I also changed a couple of spots missing dd->newDevStruct=1
>> 
>> Will commit in a moment.
>> <<------------
>> 
>> And the following day, in "graphics saga part III", we had
>> 
>> ------------->>
>> ...
>> 
>> I can't make it happen in 1.3.1 but...
>> 
>> It is probably not unrelated to the R_ProcessEvents line that
>> I took out, but that was definitely wrong. However, one might reenable
>> it if one could change this bit of code
>> 
>> 	if (!(ptr_X11DeviceDriver)((DevDesc*)(dev), display, width, height, ps, gamma,
>> 				      colormodel, maxcubesize, canvascolor)) {
>> 	    free(dev);
>> 	    errorcall(gcall, "unable to start device %s", devname);
>>      	}
>> 	gsetVar(install(".Device"), mkString(devname), R_NilValue);
>> 	dd = GEcreateDevDesc(dev);
>> 	addDevice((DevDesc*) dd);
>> 	initDisplayList((DevDesc*) dd);
>> 
>> 
>> and put the if-clause last. A cursory clance through the three
>> functions that are being called didn't reveal anything that would rely
>> on having opened the device driver first.
>> 
>> Paul?
>> 
>> (I might try it locally, but I'm not sure I should commit anything.)
>> 
>> <<-----------
>> 
>> It seems that the suggestion was never followed up on?
>> 
>> -pd
>> 
>> 
>>> On 24 Apr 2019, at 11:42 , peter dalgaard <pdalgd at gmail.com> wrote:
>>> 
>>> I don't recall exactly what I did 18 years ago eiher and I likely don't have the time to dig into the archives and reconstruct.
>>> 
>>> I can imagine that the issue had to do with the protocol around creating and mapping windows. Presumably the segfault comes from looking for events on a window that hasn't been created yet, or has already been destroyed, leading to a NULL reference somewhere. I have a vague recollection that the issue was window manager dependent (in 2001 probably not twm, more likely xvwm on RedHat if it was affecting me).
>>> 
>>> A proper fix should go via proper understanding of the X11 protocol - uncommenting a line is as bad as commenting it in the 1st place.... So more like "wait for window to exist THEN process events" -- but the 1st part may be WM specific, etc.
>>> 
>>> I recall docs being quite obtuse, and the X11 "mechanism not policy" credo doesn't help as WMs are not obliged to (say) send notifications, so you can end up stalling, waiting for events that never happen.
>>> 
>>> It is entirely possible that there is stuff in here that I didn't understand properly at the time, and still don't!
>>> 
>>> - pd
>>> 
>>>> On 24 Apr 2019, at 02:30 , Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>>>> 
>>>> Hi
>>>> 
>>>> Sorry, I can't offer an explanation for the commented-out line.
>>>> However, regarding your final question of avoiding the R-core bottleneck, you do have the option of creating a third-party graphics device package.  See, for example, the 'tikzDevice' and 'svglite' packages on CRAN.  Does that provide you with a way forward ?
>>>> 
>>>> Paul
>>>> 
>>>> On 20/04/2019 5:27 p.m., frederik at ofb.net wrote:
>>>>> Dear R Devel,
>>>>> 
>>>>> I know that someone put this line in src/modules/X11/devX11.c:2824 for
>>>>> a reason, because commenting it out causes R to miss an important
>>>>> ConfigureNotify event in my window manager. The result is that plots
>>>>> are initially drawn off the window borders, unreadable.
>>>>> 
>>>>>  R_ProcessX11Events((void*) NULL);
>>>>> 
>>>>> Unfortunately for me, this line is commented in the standard release
>>>>> of R, it has "#if BUG ... #endif" around it.
>>>>> 
>>>>> I guess it is also unfortunate for anyone who uses the same window
>>>>> manager as I do, namely i3, which I think is pretty popular among Unix
>>>>> power users these days; not to mention other full-screen window
>>>>> managers which probably exhibit the same bug in R.
>>>>> 
>>>>> Maybe everyone on the Core team uses twm as their window manager? Or
>>>>> RStudio on Windows? Which would be sad because then we're not
>>>>> representing an important user demographic, namely those who prefer
>>>>> software which is modern and powerful, yet simple to understand and
>>>>> modify; fully configurable and interoperable and so on.
>>>>> 
>>>>> I first reported this bug 3 years ago. In doing research for my bug
>>>>> report, I found that the line was commented out by Peter Dalgaard in
>>>>> 2001 with the explanation "X11 segfault fix - I hope".
>>>>> 
>>>>> I don't know what the way forward is. Obviously the Core Team has
>>>>> reason to say, "look, this isn't very important, it's been broken
>>>>> since 2001, maybe fixing it will cause the undocumented segfault bug
>>>>> to reappear, clearly no one here uses your window manager". Do I have
>>>>> to submit a correctness proof for the proposed change? What do I do?
>>>>> 
>>>>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702
>>>>> 
>>>>> As mentioned in my bug report, I checked using gdb that
>>>>> ConfigureNotify is indeed being received by the call to
>>>>> R_ProcessX11Events() when it is uncommented. I haven't experienced any
>>>>> segfaults.
>>>>> 
>>>>> It's good that Peter left evidence that "R_ProcessX11Events" was being
>>>>> called 18 years ago from X11DeviceDriver(). If he had deleted the
>>>>> line, rather than commenting it, then discovering the reason for the
>>>>> window rendering bug would have been much harder for me.
>>>>> 
>>>>> However, the downside is that now it is not just a matter of inserting
>>>>> the line where it belongs; I also feel a bit like I have to explain
>>>>> why it was initially removed. But although I've given it some thought,
>>>>> I still have no idea.
>>>>> 
>>>>> Somewhat tangentially, I am wondering if there is some way that we
>>>>> could make the development of R's graphics code proceed at a faster
>>>>> rate, for example by pulling it out into a separate module, so that
>>>>> people could offer alternative implementations via CRAN etc., rather
>>>>> than having R Core be the bottleneck. Would this make sense? Has it
>>>>> already been done?
>>>>> 
>>>>> Thank you,
>>>>> 
>>>>> Frederick
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>>> --
>>>> Dr Paul Murrell
>>>> Department of Statistics
>>>> The University of Auckland
>>>> Private Bag 92019
>>>> Auckland
>>>> New Zealand
>>>> 64 9 3737599 x85392
>>>> paul at stat.auckland.ac.nz
>>>> http://www.stat.auckland.ac.nz/~paul/
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> --
>>> Peter Dalgaard, Professor,
>>> Center for Statistics, Copenhagen Business School
>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>> Phone: (+45)38153501
>>> Office: A 4.23
>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>> 
>> -- 
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Sun Apr 28 11:06:42 2019
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Sun, 28 Apr 2019 05:06:42 -0400
Subject: [Rd] Inno Setup 6.0.2 fails before creating exe file on Windows
 (R-3.6.0)
Message-ID: <CAL6gwnJxT2qGRsoiTJHXgYA3PrKTc_Gev351XCxe5iW=OdR87w@mail.gmail.com>

I am working on compiling R-3.6.0 for Windows 10 64bit using rtools40
(beta 11). I had also installed the most recent update of Inno setup,
which is now 6.0.2.With that version, `make risntaller` fails at the
call to ""C:/R/Inno/iscc" R.iss > R-3.6.0.log 2>&1" and just exits,
pointing to line 175 of the makefile which is:

$(RPREFIX)-win.exe: R.iss
    "$(ISDIR)/iscc" R.iss > $(RPREFIX).log 2>&1

Reinstalling Inno Setup 5.6.1 does allow the exe file to be created.

Thank you,

Avi


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Apr 29 10:19:53 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 29 Apr 2019 10:19:53 +0200
Subject: [Rd] Suspect error in windows version of 3.60
In-Reply-To: <1019d9e3-13f0-2c23-adb2-ac16e53629fa@gmail.com>
References: <5cc492c2.1c69fb81.57a0a.928eSMTPIN_ADDED_BROKEN@mx.google.com>
 <cdfc2705-95fc-1849-306e-9079ce5ca811@gmail.com>
 <1019d9e3-13f0-2c23-adb2-ac16e53629fa@gmail.com>
Message-ID: <23750.45993.351309.582275@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Sat, 27 Apr 2019 15:00:20 -0400 writes:

    > On 27/04/2019 2:46 p.m., Duncan Murdoch wrote:
    >> On 27/04/2019 10:30 a.m., Len Weil wrote:
    >>> Gentlemen,
    >>> 
    >>> I've observed a suspected bug in R-3.60 for Windows 10.
    >>> 
    >>> I am using the latest R version, but I have observed the same error in all
    >>> releases: alpha, beta RC and released.
    >>> 
    >>> Also the same issue occurs in the 32 and 64 bit GUI versions.  The program
    >>> header I invoke is:
    >>> 
    >>> 
    >>> R version 3.6.0 Patched (2019-04-26 r76431) -- "Planting of a Tree"
    >>> Copyright (C) 2019 The R Foundation for Statistical Computing
    >>> Platform: x86_64-w64-mingw32/x64 (64-bit)
    >>> 
    >>> Specifically, the menu selection Packages -> install packages fails.
    >>> 
    >>> When invoked, it simply echoes: utils:::menuInstallPkgs() and returns the
    >>> prompt.
    >>> 
    >>> 
    >>> I found the underlying code with the getAnywhere function.
    >>> 
    >>> It displays:
    >>> 
    >>> getAnywhere(menuInstallPkgs)
    >>> 
    >>> A single object matching 'menuInstallPkgs' was found
    >>> It was found in the following places
    >>> namespace:utils
    >>> with value
    >>> 
    >>> function (type = getOption("pkgType"))
    >>> {
    >>>   install.packages(NULL, .libPaths()[1L], dependencies = NA,
    >>>                    type = type)
    >>> }
    >>> 
    >>> <bytecode: 0x0000000016c6a730>
    >>> <environment: namespace:utils>
    >>> 
    >>> 
    >>> The first argument, NULL, prevents the underlying function install.packages
    >>> from working.
    >> 
    >> No, it is documented to trigger presentation of a list of packages to
    >> install.  That list takes time to download from CRAN, so perhaps you are
    >> just too impatient to wait for it, or perhaps it really is broken:  but
    >> the NULL is not the issue.
    >> 

    > Sorry, you were right.  The docs in 3.6.0 have changed:  now the pkgs 
    > argument must be missing to trigger the menu.  The NULL is not missing, 
    > it is interpreted as specifying no packages.

    > Duncan Murdoch

Thank you, Len and Duncan;
Duncan additionally for the formal R bug report with patch PR#17556 :
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17556

I cannot easily build R for windows from the sources either, but
committed Duncan's fix to the R-devel sources for now,
in svn rev 76434,  so we can all install a binary version of
R-devel for Windows (>= rev 76434) in a day or two
from CRAN https://cran.r-project.org/bin/windows/base/rdevel.html
thanks to Jeroen Ooms'  autobuilder.

If that confirms the problem fixed, we will of course port it to
R 3.6.0 patched, so it will be in R 3.6.1 (which is *not* scheduled yet).

Martin Maechler
ETH Zurich and R Core Team


From irederik m@iii@g oii oib@@et  Tue Apr 30 03:28:46 2019
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Mon, 29 Apr 2019 18:28:46 -0700
Subject: [Rd] patch to improve matrix conformability error message
In-Reply-To: <20190405160536.GB13959@cocoa>
References: <20190405160536.GB13959@cocoa>
Message-ID: <20190430012846.qxov5i622l6osklu@localhost>

I think this is a good idea. Is there a reason why it got no interest?
Slippery slope?

Or maybe others were also just occupied trying to figure out how
Joshua's second message had timestamp earlier than his first message?

On Fri, Apr 05, 2019 at 12:05:36PM -0400, Joshua N Pritikin wrote:
>With this patch,
>
>> A <- matrix(1, 2, 2)
>> B <- matrix(2, 3, 2)
>> A %*% B
>Error in A %*% B :
>  non-conformable arguments of dimension (2, 2) and (3, 2)
>
>From 205b591d4d14b5ff667325fb233a6deb08314726 Mon Sep 17 00:00:00 2001
>From: Joshua Nathaniel Pritikin <jpritikin at pobox.com>
>Date: Fri, 5 Apr 2019 12:03:58 -0400
>Subject: [PATCH] Improve non-conformable arguments error message
>
>---
> src/main/array.c | 9 ++++++---
> 1 file changed, 6 insertions(+), 3 deletions(-)
>
>diff --git a/src/main/array.c b/src/main/array.c
>index 4b95e33..cedf627 100644
>--- a/src/main/array.c
>+++ b/src/main/array.c
>@@ -1350,15 +1350,18 @@ SEXP attribute_hidden do_matprod(SEXP call, SEXP op, SEXP args, SEXP rho)
>     if (PRIMVAL(op) == 0) {
> 	/* primitive, so use call */
> 	if (ncx != nry)
>-	    errorcall(call, _("non-conformable arguments"));
>+	  errorcall(call, _("non-conformable arguments of dimension (%d, %d) and (%d, %d)"),
>+		    nrx, ncx, nry, ncy);
>     }
>     else if (PRIMVAL(op) == 1) {
> 	if (nrx != nry)
>-	    error(_("non-conformable arguments"));
>+	  error(_("non-conformable arguments of dimension (%d, %d) and (%d, %d)"),
>+		nrx, ncx, nry, ncy);
>     }
>     else {
> 	if (ncx != ncy)
>-	    error(_("non-conformable arguments"));
>+	  error(_("non-conformable arguments of dimension (%d, %d) and (%d, %d)"),
>+		nrx, ncx, nry, ncy);
>     }
>
>     if (isComplex(CAR(args)) || isComplex(CADR(args)))
>-- 
>2.19.1
>
>______________________________________________
>R-devel at r-project.org mailing list
>https://stat.ethz.ch/mailman/listinfo/r-devel
>


From jpr|t|k|n @end|ng |rom pobox@com  Tue Apr 30 04:08:43 2019
From: jpr|t|k|n @end|ng |rom pobox@com (Joshua N Pritikin)
Date: Mon, 29 Apr 2019 22:08:43 -0400
Subject: [Rd] patch to improve matrix conformability error message
In-Reply-To: <20190430012846.qxov5i622l6osklu@localhost>
References: <20190405160536.GB13959@cocoa>
 <20190430012846.qxov5i622l6osklu@localhost>
Message-ID: <20190430020843.GG847@cocoa>

On Mon, Apr 29, 2019 at 06:28:46PM -0700, frederik at ofb.net wrote:
> I think this is a good idea. Is there a reason why it got no interest?
> Slippery slope?

What's the next step? Can it get committed?

> Or maybe others were also just occupied trying to figure out how
> Joshua's second message had timestamp earlier than his first message?

As a new subscriber, I guess my messages got caught in moderation.

-- 
Joshua N. Pritikin, Ph.D.
Virginia Institute for Psychiatric and Behavioral Genetics
Virginia Commonwealth University
PO Box 980126
800 E Leigh St, Biotech One, Suite 1-133
Richmond, VA 23219
http://exuberant-island.surge.sh


From irederik m@iii@g oii oib@@et  Tue Apr 30 06:59:29 2019
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Mon, 29 Apr 2019 21:59:29 -0700
Subject: [Rd] patch to improve matrix conformability error message
In-Reply-To: <20190430020843.GG847@cocoa>
References: <20190405160536.GB13959@cocoa>
 <20190430012846.qxov5i622l6osklu@localhost>
 <20190430020843.GG847@cocoa>
Message-ID: <20190430045929.jeozyr2u45jpnmhc@localhost>

I'm not really the one who makes these decisions; I'd just wait for
someone on the Core team to reply to this thread. Maybe they are all
just busy right now.

On Mon, Apr 29, 2019 at 10:08:43PM -0400, Joshua N Pritikin wrote:
>On Mon, Apr 29, 2019 at 06:28:46PM -0700, frederik at ofb.net wrote:
>> I think this is a good idea. Is there a reason why it got no interest?
>> Slippery slope?
>
>What's the next step? Can it get committed?
>
>> Or maybe others were also just occupied trying to figure out how
>> Joshua's second message had timestamp earlier than his first message?
>
>As a new subscriber, I guess my messages got caught in moderation.
>
>-- 
>Joshua N. Pritikin, Ph.D.
>Virginia Institute for Psychiatric and Behavioral Genetics
>Virginia Commonwealth University
>PO Box 980126
>800 E Leigh St, Biotech One, Suite 1-133
>Richmond, VA 23219
>http://exuberant-island.surge.sh
>


From c@@rd|@g@bor @end|ng |rom gm@||@com  Tue Apr 30 21:44:35 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Tue, 30 Apr 2019 20:44:35 +0100
Subject: [Rd] Background R session on Unix and SIGINT
Message-ID: <CABtg=Km=Bj_gDr3jsYSvQf479eJhPunRYyU8UQEfaV-YtKvqqQ@mail.gmail.com>

Hi All,

I realize that this is not a really nice reprex, but anyone has an
idea why a background R session would "remember" an interrupt (SIGINT)
on Unix?

rs <- callr::r_session$new()
rs$interrupt()     # just sends a SIGINT
#> [1] TRUE

rs$run(function() 1+1)
#> Error: interrupt

rs$run(function() 1+1)
#> [1] 2

It seems that the main loop somehow stores the SIGINT it receives
while it is waiting on stdin, and then it triggers it when some input
comes in.... Maybe. Just speculating....

Thanks,
Gabor


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Apr 30 22:13:43 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 30 Apr 2019 16:13:43 -0400
Subject: [Rd] Background R session on Unix and SIGINT
In-Reply-To: <CABtg=Km=Bj_gDr3jsYSvQf479eJhPunRYyU8UQEfaV-YtKvqqQ@mail.gmail.com>
References: <CABtg=Km=Bj_gDr3jsYSvQf479eJhPunRYyU8UQEfaV-YtKvqqQ@mail.gmail.com>
Message-ID: <3A2C4184-FD39-410A-8392-28C473AAC8D0@R-project.org>

Interrupts are not synchronous in R - the signal only flags the request for interruption. Nothing actually happens until R_CheckUserInterrupt() is called at an interruptible point. In you case your code is apparently not calling R_CheckUserInterrupt() until later as a side-effect of the next evaluation.

Cheers,
Simon


> On Apr 30, 2019, at 3:44 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> Hi All,
> 
> I realize that this is not a really nice reprex, but anyone has an
> idea why a background R session would "remember" an interrupt (SIGINT)
> on Unix?
> 
> rs <- callr::r_session$new()
> rs$interrupt()     # just sends a SIGINT
> #> [1] TRUE
> 
> rs$run(function() 1+1)
> #> Error: interrupt
> 
> rs$run(function() 1+1)
> #> [1] 2
> 
> It seems that the main loop somehow stores the SIGINT it receives
> while it is waiting on stdin, and then it triggers it when some input
> comes in.... Maybe. Just speculating....
> 
> Thanks,
> Gabor
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From c@@rd|@g@bor @end|ng |rom gm@||@com  Tue Apr 30 22:17:58 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Tue, 30 Apr 2019 21:17:58 +0100
Subject: [Rd] Background R session on Unix and SIGINT
In-Reply-To: <3A2C4184-FD39-410A-8392-28C473AAC8D0@R-project.org>
References: <CABtg=Km=Bj_gDr3jsYSvQf479eJhPunRYyU8UQEfaV-YtKvqqQ@mail.gmail.com>
 <3A2C4184-FD39-410A-8392-28C473AAC8D0@R-project.org>
Message-ID: <CABtg=KkfXU4+7F=Yr2=v=ssg=-naEkYDGM_A6j7UGNWSkjVoTw@mail.gmail.com>

Yeah, I get that they are async.

What happens is that the background process is not doing anything when
the process gets a SIGINT. I.e. the background process is just
listening on its standard input.

AFAICT for an interactive process such a SIGINT is just swallowed,
with a newline outputted to the terminal.

But apparently, for this background process, it is not swallowed, and
it is triggered later. FWIW it does not happen on Windows, not very
surprisingly.

Gabor

On Tue, Apr 30, 2019 at 9:13 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Interrupts are not synchronous in R - the signal only flags the request for interruption. Nothing actually happens until R_CheckUserInterrupt() is called at an interruptible point. In you case your code is apparently not calling R_CheckUserInterrupt() until later as a side-effect of the next evaluation.
>
> Cheers,
> Simon
>
>
> > On Apr 30, 2019, at 3:44 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >
> > Hi All,
> >
> > I realize that this is not a really nice reprex, but anyone has an
> > idea why a background R session would "remember" an interrupt (SIGINT)
> > on Unix?
> >
> > rs <- callr::r_session$new()
> > rs$interrupt()     # just sends a SIGINT
> > #> [1] TRUE
> >
> > rs$run(function() 1+1)
> > #> Error: interrupt
> >
> > rs$run(function() 1+1)
> > #> [1] 2
> >
> > It seems that the main loop somehow stores the SIGINT it receives
> > while it is waiting on stdin, and then it triggers it when some input
> > comes in.... Maybe. Just speculating....
> >
> > Thanks,
> > Gabor
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Apr 30 22:31:39 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 30 Apr 2019 16:31:39 -0400
Subject: [Rd] Background R session on Unix and SIGINT
In-Reply-To: <CABtg=KkfXU4+7F=Yr2=v=ssg=-naEkYDGM_A6j7UGNWSkjVoTw@mail.gmail.com>
References: <CABtg=Km=Bj_gDr3jsYSvQf479eJhPunRYyU8UQEfaV-YtKvqqQ@mail.gmail.com>
 <3A2C4184-FD39-410A-8392-28C473AAC8D0@R-project.org>
 <CABtg=KkfXU4+7F=Yr2=v=ssg=-naEkYDGM_A6j7UGNWSkjVoTw@mail.gmail.com>
Message-ID: <EDAD9282-9026-4B88-A1A3-B2A63A6ADC3E@R-project.org>

Can you give an example without callr? The key is how is the process stated and what it is doing which is entirely opaque in callr.

Windows doesn't have signals, so the process there is entirely different. Most of the WIN32 processing is event-based.

Cheers,
Simon


> On Apr 30, 2019, at 4:17 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> Yeah, I get that they are async.
> 
> What happens is that the background process is not doing anything when
> the process gets a SIGINT. I.e. the background process is just
> listening on its standard input.
> 
> AFAICT for an interactive process such a SIGINT is just swallowed,
> with a newline outputted to the terminal.
> 
> But apparently, for this background process, it is not swallowed, and
> it is triggered later. FWIW it does not happen on Windows, not very
> surprisingly.
> 
> Gabor
> 
> On Tue, Apr 30, 2019 at 9:13 PM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> Interrupts are not synchronous in R - the signal only flags the request for interruption. Nothing actually happens until R_CheckUserInterrupt() is called at an interruptible point. In you case your code is apparently not calling R_CheckUserInterrupt() until later as a side-effect of the next evaluation.
>> 
>> Cheers,
>> Simon
>> 
>> 
>>> On Apr 30, 2019, at 3:44 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>> 
>>> Hi All,
>>> 
>>> I realize that this is not a really nice reprex, but anyone has an
>>> idea why a background R session would "remember" an interrupt (SIGINT)
>>> on Unix?
>>> 
>>> rs <- callr::r_session$new()
>>> rs$interrupt()     # just sends a SIGINT
>>> #> [1] TRUE
>>> 
>>> rs$run(function() 1+1)
>>> #> Error: interrupt
>>> 
>>> rs$run(function() 1+1)
>>> #> [1] 2
>>> 
>>> It seems that the main loop somehow stores the SIGINT it receives
>>> while it is waiting on stdin, and then it triggers it when some input
>>> comes in.... Maybe. Just speculating....
>>> 
>>> Thanks,
>>> Gabor
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
> 


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Tue Apr 30 23:09:28 2019
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Wed, 1 May 2019 09:09:28 +1200
Subject: [Rd] 
 [FORGED] src/modules/X11/devX11.c, can we remove "#if BUG" yet
In-Reply-To: <07AB76A5-EA6A-45AC-BFB5-170CD093DE39@gmail.com>
References: <20190420052728.7tgjr4zxqdddsimm@localhost>
 <3badc471-0698-42e1-581a-2988eb3bf818@stat.auckland.ac.nz>
 <4FEA2AD4-C0A6-4CEE-AB30-CD8AE209ED24@gmail.com>
 <3C40D480-61B5-40D1-A592-1890B090C124@gmail.com>
 <20190425232356.a6vn2unt3ju6a3f7@localhost>
 <07AB76A5-EA6A-45AC-BFB5-170CD093DE39@gmail.com>
Message-ID: <69efc4f1-4fe0-b93f-eff7-9a22ceaf3c9d@stat.auckland.ac.nz>

Hi Peter

Yes, that looks roughly right to me.  I would be in favour of your 
option (b), partly because it is probably easiest and partly because 
that retains the basic graphics device startup logic pattern that is 
replicated across all(?) graphics devices.

Paul

On 28/04/19 11:39 AM, peter dalgaard wrote:
> I had a look at the current code, and AFAICT it has essentially the same structure as it did back then. I think it may have finally dawned upon me what the issue really is:
> 
> The logic is that in Rf_addX11Device, we have
> 
>          if (!X11DeviceDriver(dev, display, width, height,
>                               ps, gamma, colormodel, maxcubesize,
>                               bgcolor, canvascolor, sfonts, res,
>                               xpos, ypos, title, useCairo, antialias, family)) {
>              free(dev);
>              errorcall(call, _("unable to start device %s"), devname);
>          }
>          dd = GEcreateDevDesc(dev);
>          GEaddDevice2(dd, devname);
> 
> i.e., we start the device driver, and if it fails, we throw away the "dev" structure and call it a day. If it succeeds, we proceed to create a device descriptor structure and add it to the list of open devices.
> 
> This approach means that X11DeviceDriver() cannot do anything that potentially accesses the dd structure because it isn't there yet, and the things it cannot do apparently includes calling R_ProcessX11Events(). [To be completely sure that this is actually still true, I'd need to have a closer look at what handleEvent() does.]
> 
> So to fix things, it would seem that you could (a) add the device before attempting to start the driver, preparing to back it out if the driver fails to start, or (b) add a call to R_ProcessX11Events() _after_ the GEaddDevice2(dd, devname). Option (b) is probably the easiest.
> 
> Paul: Does this analysis look roughly right?
> 
> -pd
> 
> 
> 
> 
>> On 26 Apr 2019, at 01:23 , frederik at ofb.net wrote:
>>
>> Thanks Professor Dalgard.
>>
>> If you have a different way to fix the bug then I'd be happy to test
>> it.
>>
>> Or whatever. I understand that maybe some data was being referenced
>> before it had been initialized. I could also support moving the
>> R_ProcessEvents call in another place, but it seems one would also
>> like to generate some kind of warning message, at the location of the
>> bad reference, rather than segfaulting. Was it not possible to
>> identify this location? I'm guessing that Valgrind is a bit more
>> mature now than it was in 2001...?
>>
>> Frederick
>>
>> On Wed, Apr 24, 2019 at 03:12:55PM +0200, peter dalgaard wrote:
>>> OK, so I did the archaeology anyway....
>>>
>>>
>>> This was the story, R-core November 29, 2001. Part of thread "X11 still segfaults".
>>>
>>> ------------>>
>>> .....
>>> Gah. I've been too tired today. Why did that take me so long?
>>>
>>> The culprit seems to be
>>>
>>> R_ProcessEvents((void*) NULL)
>>>
>>> in newX11DeviceDriver
>>>
>>> This gets called *before* this stuff at the end of Rf_addX11Device
>>>
>>> 	dd = GEcreateDevDesc(dev);
>>> 	addDevice((DevDesc*) dd);
>>> 	initDisplayList((DevDesc*) dd);
>>>
>>> and it is that "dd" that gets called by Rf_playDisplayList. Removing
>>> the offending line stops the segfaulting, seemingly with no ill
>>> effects.
>>>
>>> I'm not really sure what the use of that line ever was; it might be
>>> necessary to make the call somewhere later, but it appears to have
>>> been possible to race past it before receiving any events all the
>>> time.
>>>
>>> I also changed a couple of spots missing dd->newDevStruct=1
>>>
>>> Will commit in a moment.
>>> <<------------
>>>
>>> And the following day, in "graphics saga part III", we had
>>>
>>> ------------->>
>>> ...
>>>
>>> I can't make it happen in 1.3.1 but...
>>>
>>> It is probably not unrelated to the R_ProcessEvents line that
>>> I took out, but that was definitely wrong. However, one might reenable
>>> it if one could change this bit of code
>>>
>>> 	if (!(ptr_X11DeviceDriver)((DevDesc*)(dev), display, width, height, ps, gamma,
>>> 				      colormodel, maxcubesize, canvascolor)) {
>>> 	    free(dev);
>>> 	    errorcall(gcall, "unable to start device %s", devname);
>>>       	}
>>> 	gsetVar(install(".Device"), mkString(devname), R_NilValue);
>>> 	dd = GEcreateDevDesc(dev);
>>> 	addDevice((DevDesc*) dd);
>>> 	initDisplayList((DevDesc*) dd);
>>>
>>>
>>> and put the if-clause last. A cursory clance through the three
>>> functions that are being called didn't reveal anything that would rely
>>> on having opened the device driver first.
>>>
>>> Paul?
>>>
>>> (I might try it locally, but I'm not sure I should commit anything.)
>>>
>>> <<-----------
>>>
>>> It seems that the suggestion was never followed up on?
>>>
>>> -pd
>>>
>>>
>>>> On 24 Apr 2019, at 11:42 , peter dalgaard <pdalgd at gmail.com> wrote:
>>>>
>>>> I don't recall exactly what I did 18 years ago eiher and I likely don't have the time to dig into the archives and reconstruct.
>>>>
>>>> I can imagine that the issue had to do with the protocol around creating and mapping windows. Presumably the segfault comes from looking for events on a window that hasn't been created yet, or has already been destroyed, leading to a NULL reference somewhere. I have a vague recollection that the issue was window manager dependent (in 2001 probably not twm, more likely xvwm on RedHat if it was affecting me).
>>>>
>>>> A proper fix should go via proper understanding of the X11 protocol - uncommenting a line is as bad as commenting it in the 1st place.... So more like "wait for window to exist THEN process events" -- but the 1st part may be WM specific, etc.
>>>>
>>>> I recall docs being quite obtuse, and the X11 "mechanism not policy" credo doesn't help as WMs are not obliged to (say) send notifications, so you can end up stalling, waiting for events that never happen.
>>>>
>>>> It is entirely possible that there is stuff in here that I didn't understand properly at the time, and still don't!
>>>>
>>>> - pd
>>>>
>>>>> On 24 Apr 2019, at 02:30 , Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>>>>>
>>>>> Hi
>>>>>
>>>>> Sorry, I can't offer an explanation for the commented-out line.
>>>>> However, regarding your final question of avoiding the R-core bottleneck, you do have the option of creating a third-party graphics device package.  See, for example, the 'tikzDevice' and 'svglite' packages on CRAN.  Does that provide you with a way forward ?
>>>>>
>>>>> Paul
>>>>>
>>>>> On 20/04/2019 5:27 p.m., frederik at ofb.net wrote:
>>>>>> Dear R Devel,
>>>>>>
>>>>>> I know that someone put this line in src/modules/X11/devX11.c:2824 for
>>>>>> a reason, because commenting it out causes R to miss an important
>>>>>> ConfigureNotify event in my window manager. The result is that plots
>>>>>> are initially drawn off the window borders, unreadable.
>>>>>>
>>>>>>   R_ProcessX11Events((void*) NULL);
>>>>>>
>>>>>> Unfortunately for me, this line is commented in the standard release
>>>>>> of R, it has "#if BUG ... #endif" around it.
>>>>>>
>>>>>> I guess it is also unfortunate for anyone who uses the same window
>>>>>> manager as I do, namely i3, which I think is pretty popular among Unix
>>>>>> power users these days; not to mention other full-screen window
>>>>>> managers which probably exhibit the same bug in R.
>>>>>>
>>>>>> Maybe everyone on the Core team uses twm as their window manager? Or
>>>>>> RStudio on Windows? Which would be sad because then we're not
>>>>>> representing an important user demographic, namely those who prefer
>>>>>> software which is modern and powerful, yet simple to understand and
>>>>>> modify; fully configurable and interoperable and so on.
>>>>>>
>>>>>> I first reported this bug 3 years ago. In doing research for my bug
>>>>>> report, I found that the line was commented out by Peter Dalgaard in
>>>>>> 2001 with the explanation "X11 segfault fix - I hope".
>>>>>>
>>>>>> I don't know what the way forward is. Obviously the Core Team has
>>>>>> reason to say, "look, this isn't very important, it's been broken
>>>>>> since 2001, maybe fixing it will cause the undocumented segfault bug
>>>>>> to reappear, clearly no one here uses your window manager". Do I have
>>>>>> to submit a correctness proof for the proposed change? What do I do?
>>>>>>
>>>>>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702
>>>>>>
>>>>>> As mentioned in my bug report, I checked using gdb that
>>>>>> ConfigureNotify is indeed being received by the call to
>>>>>> R_ProcessX11Events() when it is uncommented. I haven't experienced any
>>>>>> segfaults.
>>>>>>
>>>>>> It's good that Peter left evidence that "R_ProcessX11Events" was being
>>>>>> called 18 years ago from X11DeviceDriver(). If he had deleted the
>>>>>> line, rather than commenting it, then discovering the reason for the
>>>>>> window rendering bug would have been much harder for me.
>>>>>>
>>>>>> However, the downside is that now it is not just a matter of inserting
>>>>>> the line where it belongs; I also feel a bit like I have to explain
>>>>>> why it was initially removed. But although I've given it some thought,
>>>>>> I still have no idea.
>>>>>>
>>>>>> Somewhat tangentially, I am wondering if there is some way that we
>>>>>> could make the development of R's graphics code proceed at a faster
>>>>>> rate, for example by pulling it out into a separate module, so that
>>>>>> people could offer alternative implementations via CRAN etc., rather
>>>>>> than having R Core be the bottleneck. Would this make sense? Has it
>>>>>> already been done?
>>>>>>
>>>>>> Thank you,
>>>>>>
>>>>>> Frederick
>>>>>>
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>>> --
>>>>> Dr Paul Murrell
>>>>> Department of Statistics
>>>>> The University of Auckland
>>>>> Private Bag 92019
>>>>> Auckland
>>>>> New Zealand
>>>>> 64 9 3737599 x85392
>>>>> paul at stat.auckland.ac.nz
>>>>> http://www.stat.auckland.ac.nz/~paul/
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>> --
>>>> Peter Dalgaard, Professor,
>>>> Center for Statistics, Copenhagen Business School
>>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>>> Phone: (+45)38153501
>>>> Office: A 4.23
>>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>
>>> -- 
>>> Peter Dalgaard, Professor,
>>> Center for Statistics, Copenhagen Business School
>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>> Phone: (+45)38153501
>>> Office: A 4.23
>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
> 

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From c@@rd|@g@bor @end|ng |rom gm@||@com  Tue Apr 30 23:09:51 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Tue, 30 Apr 2019 22:09:51 +0100
Subject: [Rd] Background R session on Unix and SIGINT
In-Reply-To: <EDAD9282-9026-4B88-A1A3-B2A63A6ADC3E@R-project.org>
References: <CABtg=Km=Bj_gDr3jsYSvQf479eJhPunRYyU8UQEfaV-YtKvqqQ@mail.gmail.com>
 <3A2C4184-FD39-410A-8392-28C473AAC8D0@R-project.org>
 <CABtg=KkfXU4+7F=Yr2=v=ssg=-naEkYDGM_A6j7UGNWSkjVoTw@mail.gmail.com>
 <EDAD9282-9026-4B88-A1A3-B2A63A6ADC3E@R-project.org>
Message-ID: <CABtg=Knor462S640xB8bAZbMG+TAq7hur14gaBTt4aUiP5mXoQ@mail.gmail.com>

OK, I managed to create an example without callr, but it is still
somewhat cumbersome. Anyway, here it is.

Terminal 1:
mkfifo fif
R --no-readline --slave --no-save --no-restore < fif

Terminal 2:
cat > fif
Sys.getpid()

This will make Terminal 1 print the pid of the R process, so we can
send a SIGINT:

Terminal 3:
kill -INT pid

The R process is of course still running happily.

Terminal 2 again:
tryCatch(Sys.sleep(10), interrupt = function(e) e)

and then Terminal 1 prints the interrupt condition:
<interrupt: >

This is macOS and 3.5.3, although I don't think it matters much.

Thanks much!
G.

On Tue, Apr 30, 2019 at 9:50 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Can you give an example without callr? The key is how is the process stated and what it is doing which is entirely opaque in callr.
>
> Windows doesn't have signals, so the process there is entirely different. Most of the WIN32 processing is event-based.
>
> Cheers,
> Simon
>
>
> > On Apr 30, 2019, at 4:17 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >
> > Yeah, I get that they are async.
> >
> > What happens is that the background process is not doing anything when
> > the process gets a SIGINT. I.e. the background process is just
> > listening on its standard input.
> >
> > AFAICT for an interactive process such a SIGINT is just swallowed,
> > with a newline outputted to the terminal.
> >
> > But apparently, for this background process, it is not swallowed, and
> > it is triggered later. FWIW it does not happen on Windows, not very
> > surprisingly.
> >
> > Gabor
> >
> > On Tue, Apr 30, 2019 at 9:13 PM Simon Urbanek
> > <simon.urbanek at r-project.org> wrote:
> >>
> >> Interrupts are not synchronous in R - the signal only flags the request for interruption. Nothing actually happens until R_CheckUserInterrupt() is called at an interruptible point. In you case your code is apparently not calling R_CheckUserInterrupt() until later as a side-effect of the next evaluation.
> >>
> >> Cheers,
> >> Simon
> >>
> >>
> >>> On Apr 30, 2019, at 3:44 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >>>
> >>> Hi All,
> >>>
> >>> I realize that this is not a really nice reprex, but anyone has an
> >>> idea why a background R session would "remember" an interrupt (SIGINT)
> >>> on Unix?
> >>>
> >>> rs <- callr::r_session$new()
> >>> rs$interrupt()     # just sends a SIGINT
> >>> #> [1] TRUE
> >>>
> >>> rs$run(function() 1+1)
> >>> #> Error: interrupt
> >>>
> >>> rs$run(function() 1+1)
> >>> #> [1] 2
> >>>
> >>> It seems that the main loop somehow stores the SIGINT it receives
> >>> while it is waiting on stdin, and then it triggers it when some input
> >>> comes in.... Maybe. Just speculating....
> >>>
> >>> Thanks,
> >>> Gabor
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >>
> >
>


From |uke-t|erney @end|ng |rom u|ow@@edu  Tue Apr 30 23:55:46 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Tue, 30 Apr 2019 21:55:46 +0000
Subject: [Rd] [External] Re:  Background R session on Unix and SIGINT
In-Reply-To: <CABtg=Knor462S640xB8bAZbMG+TAq7hur14gaBTt4aUiP5mXoQ@mail.gmail.com>
References: <CABtg=Km=Bj_gDr3jsYSvQf479eJhPunRYyU8UQEfaV-YtKvqqQ@mail.gmail.com>
 <3A2C4184-FD39-410A-8392-28C473AAC8D0@R-project.org>
 <CABtg=KkfXU4+7F=Yr2=v=ssg=-naEkYDGM_A6j7UGNWSkjVoTw@mail.gmail.com>
 <EDAD9282-9026-4B88-A1A3-B2A63A6ADC3E@R-project.org>
 <CABtg=Knor462S640xB8bAZbMG+TAq7hur14gaBTt4aUiP5mXoQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1904301641090.2842@luke-Latitude-7480>

A Simon pointed out the interrupt is recorded but not processed until
a safe point.

When reading from a fifo or pipe R runs non-interactive, which means
is sits in a read() system call and the interrupt isn't seen until
sometime during evaluation when a safe checkpoint is reached.

When reading from a terminal R will use select() to wait for input and
periodically wake and check for interrupts. In that case the interrupt
will probably be seen sooner.

If the interactive behavior is what you want you can add --interactive
to the arguments used to start R.

Best,

luke

On Tue, 30 Apr 2019, G?bor Cs?rdi wrote:

> OK, I managed to create an example without callr, but it is still
> somewhat cumbersome. Anyway, here it is.
>
> Terminal 1:
> mkfifo fif
> R --no-readline --slave --no-save --no-restore < fif
>
> Terminal 2:
> cat > fif
> Sys.getpid()
>
> This will make Terminal 1 print the pid of the R process, so we can
> send a SIGINT:
>
> Terminal 3:
> kill -INT pid
>
> The R process is of course still running happily.
>
> Terminal 2 again:
> tryCatch(Sys.sleep(10), interrupt = function(e) e)
>
> and then Terminal 1 prints the interrupt condition:
> <interrupt: >
>
> This is macOS and 3.5.3, although I don't think it matters much.
>
> Thanks much!
> G.
>
> On Tue, Apr 30, 2019 at 9:50 PM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>>
>> Can you give an example without callr? The key is how is the process stated and what it is doing which is entirely opaque in callr.
>>
>> Windows doesn't have signals, so the process there is entirely different. Most of the WIN32 processing is event-based.
>>
>> Cheers,
>> Simon
>>
>>
>>> On Apr 30, 2019, at 4:17 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>
>>> Yeah, I get that they are async.
>>>
>>> What happens is that the background process is not doing anything when
>>> the process gets a SIGINT. I.e. the background process is just
>>> listening on its standard input.
>>>
>>> AFAICT for an interactive process such a SIGINT is just swallowed,
>>> with a newline outputted to the terminal.
>>>
>>> But apparently, for this background process, it is not swallowed, and
>>> it is triggered later. FWIW it does not happen on Windows, not very
>>> surprisingly.
>>>
>>> Gabor
>>>
>>> On Tue, Apr 30, 2019 at 9:13 PM Simon Urbanek
>>> <simon.urbanek at r-project.org> wrote:
>>>>
>>>> Interrupts are not synchronous in R - the signal only flags the request for interruption. Nothing actually happens until R_CheckUserInterrupt() is called at an interruptible point. In you case your code is apparently not calling R_CheckUserInterrupt() until later as a side-effect of the next evaluation.
>>>>
>>>> Cheers,
>>>> Simon
>>>>
>>>>
>>>>> On Apr 30, 2019, at 3:44 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>>
>>>>> Hi All,
>>>>>
>>>>> I realize that this is not a really nice reprex, but anyone has an
>>>>> idea why a background R session would "remember" an interrupt (SIGINT)
>>>>> on Unix?
>>>>>
>>>>> rs <- callr::r_session$new()
>>>>> rs$interrupt()     # just sends a SIGINT
>>>>> #> [1] TRUE
>>>>>
>>>>> rs$run(function() 1+1)
>>>>> #> Error: interrupt
>>>>>
>>>>> rs$run(function() 1+1)
>>>>> #> [1] 2
>>>>>
>>>>> It seems that the main loop somehow stores the SIGINT it receives
>>>>> while it is waiting on stdin, and then it triggers it when some input
>>>>> comes in.... Maybe. Just speculating....
>>>>>
>>>>> Thanks,
>>>>> Gabor
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>>
>>>
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

