From m@rk@c|ement@ @end|ng |rom k|@@e  Sun Sep  1 14:42:35 2024
From: m@rk@c|ement@ @end|ng |rom k|@@e (Mark Clements)
Date: Sun, 1 Sep 2024 12:42:35 +0000
Subject: [Rd] R compilation (revision 87083) failed after upgrade to Ubuntu
 24.04 (libtirpc missing)
Message-ID: <MM0P280MB0008F1C95663520452BBDEB1F0912@MM0P280MB0008.SWEP280.PROD.OUTLOOK.COM>

Following an upgrade from Ubuntu 22.04 LTS to 24.04.1, revision 87083 failed to compile with an error:

"No rule to make target '/usr/include/tirpc/rpc/types.h', needed by 'saveload.o'"

where the file /usr/include/tirpc/rpc/types.h did not exist. After installing libtirpc-dev:

> sudo apt install libtirpc-dev

compilation proceeded smoothly. I understand that this may be local to my system.

Sincerely, Mark.



N?r du skickar e-post till Karolinska Institutet (KI) inneb?r detta att KI kommer att behandla dina personuppgifter. H?r finns information om hur KI behandlar personuppgifter<https://ki.se/om-ki/integritetsskyddspolicy>.


Sending email to Karolinska Institutet (KI) will result in KI processing your personal data. You can read more about KI's processing of personal data here<https://staff.ki.se/data-protection-policy>.

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Sep  2 16:04:43 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 2 Sep 2024 16:04:43 +0200
Subject: [Rd] Big speedup in install.packages() by re-using connections
In-Reply-To: <20240425180109.418ca5f4@arachnoid>
References: <CABFfbXtpXChZLeLREEWFHFWP24cvD8Ox-7xfBGj0p+N0Rjzwbg@mail.gmail.com>
 <CABFfbXtnteY=_qRz8ZBQ4aAPi-j+HjasRvU-fcLPJm2nu+QwLQ@mail.gmail.com>
 <20240425180109.418ca5f4@arachnoid>
Message-ID: <248ad6c4-ec50-4a3c-b9e4-05346840dbf0@gmail.com>


On 4/25/24 17:01, Ivan Krylov via R-devel wrote:
> On Thu, 25 Apr 2024 14:45:04 +0200
> Jeroen Ooms <jeroenooms at gmail.com> wrote:
>
>> Thoughts?
> How verboten would it be to create an empty external pointer object,
> add it to the preserved list, and set an on-exit finalizer to clean up
> the curl multi-handle? As far as I can tell, the internet module is not
> supposed to be unloaded, so this would not introduce an opportunity to
> jump to an unmapped address. This makes it possible to avoid adding a
> CurlCleanup() function to the internet module:

Cleaning up this way in principle would probably be fine, but R already 
has support for re-using connections. Even more, R can download files in 
parallel (in a single thread), which particularly helps with bigger 
latencies (e.g. typically users connecting from home, etc). See 
?download.file(), look for "simultaneous".

I've improved the existing support in R-devel and made it the default in 
install.packages() and download.packages(). I am seeing speedups 
somewhere between 2x and 9x on several systems (with quiet=TRUE) when 
downloading many packages.

Sequential downloads by default (quiet=FALSE) show a progress bar, which 
can be rather slow, particularly on Windows. Turning that off can help 
with slow downloads in already released versions of R. Consequently, via 
disabling the progress bar, the speedups with R-devel could seem even 
bigger than the range.

A common practice when installing/checking say all packages from CRAN or 
Bioconductor is to set up a local mirror of the repositories and 
download/update it with "rsync". When R then "downloads" packages from 
the local mirror using the "file://" protocol, it completely avoids 
these problems. The increased performance of download in R-devel cannot 
beat this setup.

However, the improvement should help a little bit users installing 
binary packages (on Windows, macOS), where the download time can play a 
visible role, when they install packages with many (uninstalled) 
dependencies. Users installing from source, particularly with packages 
needing compilation, would probably not notice.

Tomas


>
> Index: src/modules/internet/libcurl.c
> ===================================================================
> --- src/modules/internet/libcurl.c	(revision 86484)
> +++ src/modules/internet/libcurl.c	(working copy)
> @@ -55,6 +55,47 @@
>   
>   static int current_timeout = 0;
>   
> +// The multi-handle is shared between downloads for reusing connections
> +static CURLM *shared_mhnd = NULL;
> +static SEXP mhnd_sentinel = NULL;
> +
> +static void cleanup_mhnd(SEXP ignored)
> +{
> +    if(shared_mhnd){
> +        curl_multi_cleanup(shared_mhnd);
> +        shared_mhnd = NULL;
> +    }
> +    curl_global_cleanup();
> +}
> +static void rollback_mhnd_sentinel(void* sentinel) {
> +    // Failed to allocate memory while registering a finalizer,
> +    // therefore must release the object
> +    R_ReleaseObject((SEXP)sentinel);
> +}
> +static CURLM *get_mhnd(void)
> +{
> +    if (!mhnd_sentinel) {
> +      SEXP sentinel = PROTECT(R_MakeExternalPtr(NULL, R_NilValue, R_NilValue));
> +      R_PreserveObject(sentinel);
> +      UNPROTECT(1);
> +      // Avoid leaking the sentinel before setting the finalizer
> +      RCNTXT cntxt;
> +      begincontext(&cntxt, CTXT_CCODE, R_NilValue, R_BaseEnv, R_BaseEnv,
> +                   R_NilValue, R_NilValue);
> +      cntxt.cend = &rollback_mhnd_sentinel;
> +      cntxt.cenddata = sentinel;
> +      R_RegisterCFinalizerEx(sentinel, cleanup_mhnd, TRUE);
> +      // Succeeded, no need to clean up if endcontext() fails allocation
> +      mhnd_sentinel = sentinel;
> +      cntxt.cend = NULL;
> +      endcontext(&cntxt);
> +    }
> +    if(!shared_mhnd) {
> +      shared_mhnd = curl_multi_init();
> +    }
> +    return shared_mhnd;
> +}
> +
>   # if LIBCURL_VERSION_MAJOR < 7 || (LIBCURL_VERSION_MAJOR == 7 && LIBCURL_VERSION_MINOR < 28)
>   
>   // curl/curl.h includes <sys/select.h> and headers it requires.
> @@ -565,8 +606,6 @@
>   	if (c->hnd && c->hnd[i])
>   	    curl_easy_cleanup(c->hnd[i]);
>       }
> -    if (c->mhnd)
> -	curl_multi_cleanup(c->mhnd);
>       if (c->headers)
>   	curl_slist_free_all(c->headers);
>   
> @@ -668,7 +707,7 @@
>   	c.headers = headers = tmp;
>       }
>   
> -    CURLM *mhnd = curl_multi_init();
> +    CURLM *mhnd = get_mhnd();
>       if (!mhnd)
>   	error(_("could not create curl handle"));
>       c.mhnd = mhnd;
>
>


From ggrothend|eck @end|ng |rom gm@||@com  Sun Sep  8 13:30:36 2024
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sun, 8 Sep 2024 07:30:36 -0400
Subject: [Rd] Inconsistency between row and nrow
Message-ID: <CAP01uRnVmJ1ETMq93gE7=peHTNZWNLPE49ah8zd9a2A8Sh4SXw@mail.gmail.com>

In the following nrow provides the expected result but row gives an
error.  I would have thought that they would both work or both fail.

  aa <- array(dim = 5:3)

  nrow(aa)
  ## [1] 5

  row(aa)
  ## Error in row(aa) : a matrix-like object is required as argument to 'row'

  # this does work:
  slice.index(aa, 1)

-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From m@rc_@chw@rtz @end|ng |rom me@com  Sun Sep  8 14:26:53 2024
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Sun, 08 Sep 2024 08:26:53 -0400
Subject: [Rd] Inconsistency between row and nrow
In-Reply-To: <CAP01uRnVmJ1ETMq93gE7=peHTNZWNLPE49ah8zd9a2A8Sh4SXw@mail.gmail.com>
References: <CAP01uRnVmJ1ETMq93gE7=peHTNZWNLPE49ah8zd9a2A8Sh4SXw@mail.gmail.com>
Message-ID: <0453329E-F005-4EB6-86D1-EA9BDEC349CC@me.com>

Hi Gabor,

In strictly reading the help files for both nrow() and row(), the 'x' argument in the former case is "a vector, array, data frame, or NULL.", whereas in the latter case it is "a matrix-like object, that is one with a two-dimensional dim.".

Thus, I would expect row() to fail on a >= 3-dimensional array, as your example shows.

In reading the help file for slice.index(), there is the following in the See Also section:

"row and col for determining row and column indexes; in fact, these are special cases of slice.index corresponding to MARGIN equal to 1 and 2, respectively when x is a matrix."

further differentiating the behavior of row() and col() as more specific implementations in the 2-dimensional case.

To my read then, the difference in behavior appears to be intentional and expected.

Regards,

Marc Schwartz


?-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org <mailto:r-devel-bounces at r-project.org>> on behalf of Gabor Grothendieck <ggrothendieck at gmail.com <mailto:ggrothendieck at gmail.com>>
Date: Sunday, September 8, 2024 at 7:31 AM
To: "r-devel at r-project.org <mailto:r-devel at r-project.org>" <r-devel at r-project.org <mailto:r-devel at r-project.org>>
Subject: [Rd] Inconsistency between row and nrow


In the following nrow provides the expected result but row gives an
error. I would have thought that they would both work or both fail.


aa <- array(dim = 5:3)


nrow(aa)
## [1] 5


row(aa)
## Error in row(aa) : a matrix-like object is required as argument to 'row'


# this does work:
slice.index(aa, 1)


-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


______________________________________________
R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel <https://stat.ethz.ch/mailman/listinfo/r-devel>


From ggrothend|eck @end|ng |rom gm@||@com  Sun Sep  8 14:36:41 2024
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sun, 8 Sep 2024 08:36:41 -0400
Subject: [Rd] Inconsistency between row and nrow
In-Reply-To: <0453329E-F005-4EB6-86D1-EA9BDEC349CC@me.com>
References: <CAP01uRnVmJ1ETMq93gE7=peHTNZWNLPE49ah8zd9a2A8Sh4SXw@mail.gmail.com>
 <0453329E-F005-4EB6-86D1-EA9BDEC349CC@me.com>
Message-ID: <CAP01uRk+k_2w84YtY9i3NDxbr0RNqiC75i70rct7gTTY2cEhUg@mail.gmail.com>

The fact that it is consistent with the documentation is not the
point.  The  point is that the design itself is inconsistent.

On Sun, Sep 8, 2024 at 8:27?AM Marc Schwartz <marc_schwartz at me.com> wrote:
>
> Hi Gabor,
>
> In strictly reading the help files for both nrow() and row(), the 'x' argument in the former case is "a vector, array, data frame, or NULL.", whereas in the latter case it is "a matrix-like object, that is one with a two-dimensional dim.".
>
> Thus, I would expect row() to fail on a >= 3-dimensional array, as your example shows.
>
> In reading the help file for slice.index(), there is the following in the See Also section:
>
> "row and col for determining row and column indexes; in fact, these are special cases of slice.index corresponding to MARGIN equal to 1 and 2, respectively when x is a matrix."
>
> further differentiating the behavior of row() and col() as more specific implementations in the 2-dimensional case.
>
> To my read then, the difference in behavior appears to be intentional and expected.
>
> Regards,
>
> Marc Schwartz
>
>
> ?-----Original Message-----
> From: R-devel <r-devel-bounces at r-project.org <mailto:r-devel-bounces at r-project.org>> on behalf of Gabor Grothendieck <ggrothendieck at gmail.com <mailto:ggrothendieck at gmail.com>>
> Date: Sunday, September 8, 2024 at 7:31 AM
> To: "r-devel at r-project.org <mailto:r-devel at r-project.org>" <r-devel at r-project.org <mailto:r-devel at r-project.org>>
> Subject: [Rd] Inconsistency between row and nrow
>
>
> In the following nrow provides the expected result but row gives an
> error. I would have thought that they would both work or both fail.
>
>
> aa <- array(dim = 5:3)
>
>
> nrow(aa)
> ## [1] 5
>
>
> row(aa)
> ## Error in row(aa) : a matrix-like object is required as argument to 'row'
>
>
> # this does work:
> slice.index(aa, 1)
>
>
> --
> Statistics & Software Consulting
> GKX Group, GKX Associates Inc.
> tel: 1-877-GKX-GROUP
> email: ggrothendieck at gmail.com
>
>
> ______________________________________________
> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel <https://stat.ethz.ch/mailman/listinfo/r-devel>
>
>
>
>


-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From ggrothend|eck @end|ng |rom gm@||@com  Sun Sep  8 14:38:58 2024
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sun, 8 Sep 2024 08:38:58 -0400
Subject: [Rd] transform
In-Reply-To: <3b755353-abee-41aa-8621-bbfd49876200@fau.de>
References: <CAP01uR=DJOOJFBh-kwGAstC1aryt8uMh7c0vceYRYAtyeD59SA@mail.gmail.com>
 <9629D1E6-A493-41E4-80EB-1A2289F42F60@gmail.com>
 <3b755353-abee-41aa-8621-bbfd49876200@fau.de>
Message-ID: <CAP01uRn4dVscOaXdbkLTCL2ZbA_nV=zJzU69_X5ZwQOJp1rGGA@mail.gmail.com>

Suggest you look at dplyr::mutate as this functionality is widely used
there and has shown itself to be useful.

On Tue, Aug 27, 2024 at 9:16?AM Sebastian Meyer <seb.meyer at fau.de> wrote:
>
> Am 27.08.24 um 11:55 schrieb peter dalgaard:
> > Yes. A quirk, rather than a bug I'd say. One issue is that the internal logic of transform() relies on
> >
> >      e <- eval(substitute(list(...)), `_data`, parent.frame())
> >      tags <- names(e)
> >
> > so untagged entries in ... will not be included.
>
> ... unless at least one is tagged:
>
> R> transform(BOD, 0:5, 1:6)
>    Time demand
> 1    1    8.3
> 2    2   10.3
> 3    3   19.0
> 4    4   16.0
> 5    5   15.6
> 6    7   19.8
>
> R> transform(BOD, 0:5, 1:6, foo = 1)
>    Time demand 0:5 1:6 foo
> 1    1    8.3   0   1   1
> 2    2   10.3   1   2   1
> 3    3   19.0   2   3   1
> 4    4   16.0   3   4   1
> 5    5   15.6   4   5   1
> 6    7   19.8   5   6   1
>
> But as transform.data.frame is only documented for tagged vector
> expressions, all examples provided in this thread were formal misuses.
> (It might make sense to warn about untagged entries.)
>
> Personally, I'd be quite confused about what to expect from syntax like
>
>      transform(BOD, data.frame(y = 1:6))
>
> as really no transformation is specified. Looks like cbind() or
> data.frame() was meant.
>
>         Sebastian
>
>
> > The other part is a direct consequence of a quirk in data.frame:
> >
> >> data.frame(head(airquality), y=data.frame(x=rnorm(6)))
> >    Ozone Solar.R Wind Temp Month Day          x
> > 1    41     190  7.4   67     5   1  0.3075402
> > 2    36     118  8.0   72     5   2  0.7765265
> > 3    12     149 12.6   74     5   3  0.3909341
> > 4    18     313 11.5   62     5   4  0.4733170
> > 5    NA      NA 14.3   56     5   5 -0.6947709
> > 6    28      NA 14.9   66     5   6  0.1126040
> >
> > whereas (the wisdom of this escapes me)
> >
> >> data.frame(head(airquality), y=data.frame(x=rnorm(6),z=rnorm(6)))
> >    Ozone Solar.R Wind Temp Month Day        y.x         y.z
> > 1    41     190  7.4   67     5   1 -0.9250228  0.46483406
> > 2    36     118  8.0   72     5   2 -0.5035793  0.28822668
> > ...
> >
> > On the whole, I think that transform was never designed (nor documented) to take data frame arguments, so caveat emptor.
> >
> > - Peter
> >
> >
> >> On 24 Aug 2024, at 16:41 , Gabor Grothendieck <ggrothendieck at gmail.com> wrote:
> >>
> >> One oddity in transform that I recently noticed.  It seems that to include
> >> a one-column data frame in the arguments one must name it even though the
> >> name is ignored.  If the data frame has more than one column then it must
> >> also be named but in that case it is not ignored and the names are made up of
> >> a combination of that name and the data frame's names.  I would have thought
> >> that if we did not want a combination of names we would just not name the
> >> argument.
> >>
> >>   # ignores second argument returning BOD unchanged
> >>   transform(BOD, data.frame(y = 1:6)) |> names()
> >>   ## [1] "Time"   "demand"
> >>
> >>   # ignores second argument returning BOD unchanged
> >>   transform(BOD, data.frame(y = 1:6, z = 6:1)) |> names()
> >>   ## [1] "Time"   "demand"
> >>
> >>   # with one column in data frame it adds the column and names it y ignoring x
> >>   transform(BOD, x = data.frame(y = 1:6)) |> names()
> >>   ## [1] "Time"   "demand" "y"
> >>
> >>   # with multiple columns in data frame it uses x.y and x.z as names
> >>   transform(BOD, data.frame(y = 1:6, z = 6:1)) |> names()
> >>   ## [1] "Time"   "demand" "x.y"    "x.z"
> >>
> >>
> >> --
> >> Statistics & Software Consulting
> >> GKX Group, GKX Associates Inc.
> >> tel: 1-877-GKX-GROUP
> >> email: ggrothendieck at gmail.com
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From @vi@e@gross m@iii@g oii gm@ii@com  Sun Sep  8 21:10:07 2024
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Sun, 8 Sep 2024 15:10:07 -0400
Subject: [Rd] Inconsistency between row and nrow
In-Reply-To: <CAP01uRk+k_2w84YtY9i3NDxbr0RNqiC75i70rct7gTTY2cEhUg@mail.gmail.com>
References: <CAP01uRnVmJ1ETMq93gE7=peHTNZWNLPE49ah8zd9a2A8Sh4SXw@mail.gmail.com>
 <0453329E-F005-4EB6-86D1-EA9BDEC349CC@me.com>
 <CAP01uRk+k_2w84YtY9i3NDxbr0RNqiC75i70rct7gTTY2cEhUg@mail.gmail.com>
Message-ID: <003701db0222$b84b0730$28e11590$@gmail.com>


Why would a design made by perhaps different people at different times have to be consistent?

Why complicate a simple design meant to be used in 2-D objects to also handle other things?

It is a bit like asking why for a vector you cannot use the same verb to measure length as in one sense a vector is about the same as a 1-D matrix. Why use length(vec) and not nrow(vec) or something

-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Gabor Grothendieck
Sent: Sunday, September 8, 2024 8:37 AM
To: Marc Schwartz <marc_schwartz at me.com>
Cc: r-devel at r-project.org
Subject: Re: [Rd] Inconsistency between row and nrow

The fact that it is consistent with the documentation is not the
point.  The  point is that the design itself is inconsistent.

On Sun, Sep 8, 2024 at 8:27?AM Marc Schwartz <marc_schwartz at me.com> wrote:
>
> Hi Gabor,
>
> In strictly reading the help files for both nrow() and row(), the 'x' argument in the former case is "a vector, array, data frame, or NULL.", whereas in the latter case it is "a matrix-like object, that is one with a two-dimensional dim.".
>
> Thus, I would expect row() to fail on a >= 3-dimensional array, as your example shows.
>
> In reading the help file for slice.index(), there is the following in the See Also section:
>
> "row and col for determining row and column indexes; in fact, these are special cases of slice.index corresponding to MARGIN equal to 1 and 2, respectively when x is a matrix."
>
> further differentiating the behavior of row() and col() as more specific implementations in the 2-dimensional case.
>
> To my read then, the difference in behavior appears to be intentional and expected.
>
> Regards,
>
> Marc Schwartz
>
>
> ?-----Original Message-----
> From: R-devel <r-devel-bounces at r-project.org <mailto:r-devel-bounces at r-project.org>> on behalf of Gabor Grothendieck <ggrothendieck at gmail.com <mailto:ggrothendieck at gmail.com>>
> Date: Sunday, September 8, 2024 at 7:31 AM
> To: "r-devel at r-project.org <mailto:r-devel at r-project.org>" <r-devel at r-project.org <mailto:r-devel at r-project.org>>
> Subject: [Rd] Inconsistency between row and nrow
>
>
> In the following nrow provides the expected result but row gives an
> error. I would have thought that they would both work or both fail.
>
>
> aa <- array(dim = 5:3)
>
>
> nrow(aa)
> ## [1] 5
>
>
> row(aa)
> ## Error in row(aa) : a matrix-like object is required as argument to 'row'
>
>
> # this does work:
> slice.index(aa, 1)
>
>
> --
> Statistics & Software Consulting
> GKX Group, GKX Associates Inc.
> tel: 1-877-GKX-GROUP
> email: ggrothendieck at gmail.com
>
>
> ______________________________________________
> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel <https://stat.ethz.ch/mailman/listinfo/r-devel>
>
>
>
>


-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From jeroenoom@ @end|ng |rom gm@||@com  Sun Sep  8 23:14:22 2024
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Sun, 8 Sep 2024 17:14:22 -0400
Subject: [Rd] Big speedup in install.packages() by re-using connections
In-Reply-To: <248ad6c4-ec50-4a3c-b9e4-05346840dbf0@gmail.com>
References: <CABFfbXtpXChZLeLREEWFHFWP24cvD8Ox-7xfBGj0p+N0Rjzwbg@mail.gmail.com>
 <CABFfbXtnteY=_qRz8ZBQ4aAPi-j+HjasRvU-fcLPJm2nu+QwLQ@mail.gmail.com>
 <20240425180109.418ca5f4@arachnoid>
 <248ad6c4-ec50-4a3c-b9e4-05346840dbf0@gmail.com>
Message-ID: <CABFfbXs8n4Okup+8y2zt-P_f7WymoknBP4WAYuQ8dTwNgMAeLg@mail.gmail.com>

On Mon, Sep 2, 2024 at 10:05?AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
>
> On 4/25/24 17:01, Ivan Krylov via R-devel wrote:
> > On Thu, 25 Apr 2024 14:45:04 +0200
> > Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >
> >> Thoughts?
> > How verboten would it be to create an empty external pointer object,
> > add it to the preserved list, and set an on-exit finalizer to clean up
> > the curl multi-handle? As far as I can tell, the internet module is not
> > supposed to be unloaded, so this would not introduce an opportunity to
> > jump to an unmapped address. This makes it possible to avoid adding a
> > CurlCleanup() function to the internet module:
>
> Cleaning up this way in principle would probably be fine, but R already
> has support for re-using connections. Even more, R can download files in
> parallel (in a single thread), which particularly helps with bigger
> latencies (e.g. typically users connecting from home, etc). See
> ?download.file(), look for "simultaneous".

Thank you for looking at this. A few ideas wrt parallel downloading:

Additional improvement on Windows can be achieved by enabling the
nghttp2 driver in libcurl in rtools, such that it takes advantage of
http2 multiplexing for parallel downloads
(https://bugs.r-project.org/show_bug.cgi?id=18664).

Moreover, one concern is that install.packages() may fail more
frequently on low bandwidth connections due to reaching the "download
timeout" when downloading files in parallel:

R has an unusual definition of the http timeout, which by default
aborts in-progress downloads after 60 seconds for no obvious reason.
(by contrast, browsers enforce a timeout on unresponsive/stalled
downloads only, which can be achieved in libcurl by setting
CURLOPT_CONNECTTIMEOUT or CURLOPT_LOW_SPEED_TIME).

The above is already a problem on slow networks, where large packages
can fail to install with a timeout error in the download stage. Users
may assume there must be a problem with the network, as it is not
obvious that machines on slower internet connection need to work
around R's defaults and modify options(timeout) before
install.packages(). This problem could become more prevalent when
using parallel downloads while still enforcing the same total timeout.

For example: the MacOS binary for package "sf" is close to 90mb, hence
currently, under the default R settings of options(timeout=60),
install.packages will error with a download timeout on clients with
less than 1.5MB/s bandwidth. But with the parallel implementation,
install.packages() will share the bandwidth on 6 parallel downloads,
so if "sf" is downloaded with all its dependencies, we need at least
9MB/s (i.e. a 100mbit connection) for the default settings to not
cause a timeout.

Hopefully this can be revised to enforce the timeout on stalled
downloads only, as is common practice.


From @vi@e@gross m@iii@g oii gm@ii@com  Mon Sep  9 00:36:34 2024
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Sun, 8 Sep 2024 18:36:34 -0400
Subject: [Rd] Inconsistency between row and nrow
In-Reply-To: <0453329E-F005-4EB6-86D1-EA9BDEC349CC@me.com>
References: <CAP01uRnVmJ1ETMq93gE7=peHTNZWNLPE49ah8zd9a2A8Sh4SXw@mail.gmail.com>
 <0453329E-F005-4EB6-86D1-EA9BDEC349CC@me.com>
Message-ID: <004001db023f$8f984d80$aec8e880$@gmail.com>

It can be informative to look at what the actual functions being discussed do.

Dim is an internal, meaning written in some variant of C, perhaps:

> dim
function (x)  .Primitive("dim")

The function nrow, in my distribution, actually just calls dim() and throws away one dimension:

> nrow
function (x) 
dim(x)[1L]
<bytecode: 0x0000022df4d6f348>
<environment: namespace:base>

The function row is a bit related in calling dim in one of several ways:

> row
function (x, as.factor = FALSE) 
{
    if (as.factor) {
        labs <- rownames(x, do.NULL = FALSE, prefix = "")
        res <- factor(.Internal(row(dim(x))), labels = labs)
        dim(res) <- dim(x)
        res
    }
    else .Internal(row(dim(x)))
}
<bytecode: 0x0000022d87fbfb98>
<environment: namespace:base>

Does this shed any light on why the result may be inconsistent?

-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Marc Schwartz via R-devel
Sent: Sunday, September 8, 2024 8:27 AM
To: Gabor Grothendieck <ggrothendieck at gmail.com>; r-devel at r-project.org
Subject: Re: [Rd] Inconsistency between row and nrow

Hi Gabor,

In strictly reading the help files for both nrow() and row(), the 'x' argument in the former case is "a vector, array, data frame, or NULL.", whereas in the latter case it is "a matrix-like object, that is one with a two-dimensional dim.".

Thus, I would expect row() to fail on a >= 3-dimensional array, as your example shows.

In reading the help file for slice.index(), there is the following in the See Also section:

"row and col for determining row and column indexes; in fact, these are special cases of slice.index corresponding to MARGIN equal to 1 and 2, respectively when x is a matrix."

further differentiating the behavior of row() and col() as more specific implementations in the 2-dimensional case.

To my read then, the difference in behavior appears to be intentional and expected.

Regards,

Marc Schwartz


?-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org <mailto:r-devel-bounces at r-project.org>> on behalf of Gabor Grothendieck <ggrothendieck at gmail.com <mailto:ggrothendieck at gmail.com>>
Date: Sunday, September 8, 2024 at 7:31 AM
To: "r-devel at r-project.org <mailto:r-devel at r-project.org>" <r-devel at r-project.org <mailto:r-devel at r-project.org>>
Subject: [Rd] Inconsistency between row and nrow


In the following nrow provides the expected result but row gives an
error. I would have thought that they would both work or both fail.


aa <- array(dim = 5:3)


nrow(aa)
## [1] 5


row(aa)
## Error in row(aa) : a matrix-like object is required as argument to 'row'


# this does work:
slice.index(aa, 1)


-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


______________________________________________
R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel <https://stat.ethz.ch/mailman/listinfo/r-devel>

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From ||u|@@rev|||@ @end|ng |rom gm@||@com  Mon Sep  9 08:00:00 2024
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Mon, 9 Sep 2024 08:00:00 +0200
Subject: [Rd] Documentation cross references
Message-ID: <CAN+W6_sBbuyThDTJX27rYAxwyrZLBsm1FKYtDtRnttAYP+6Ltg@mail.gmail.com>

Hi all,

I am checking the cross references at CRAN and base R, and I am having
trouble understanding how to reconcile the documentation and how R
help links work.

Checking the documentation [1] it seems that in a cross reference such
as \link[pkg:x]{text} x should be a topic (created with \alias{topic}
in R documentation).
But I found some cases exploring the output of
tools::base_rdxrefs_db() where it is a file name (without the .Rd
extension).
For instance, ?print has a link with text (Target as named by the
output) ".print.via.format" and the anchor "tools:print.via.format".
The topic would be print.via.format, but if one uses:
help(topic = "print.via.format", package = "tools"):
     No documentation for 'print.via.format' in specified packages and
libraries:
     you could try '??print.via.format'

However, if one accesses the html help page and clicks
.print.via.format, is redirected to the right help page (found in the
REPL too with help(topic = ".print.via.format", package = "tools") ).

I see a paragraph in R 4.1 NEWS about a change in behaviour [2] (also
hinted in WRE), where it is described as:
... "and fall back to a file link only if the topic is not found in
the target package. The earlier rule which prioritized file names over
topics can be restored by setting the environment variable
_R_HELP_LINKS_TO_TOPICS_ to a false value."

The internal variable _R_HELP_LINKS_TO_TOPICS_ isn't mentioned on
R-internals and this behaviour of html pages is not mentioned on WRE.
 - Perhaps documentation at R-internals and WRE could be updated to
show how html page links are created?
 - And/or the behaviour could continue the path started on R 4.1 and
start complaining about anchors pointing to files?

In the second case, ~10 links in base R would be affected but on CRAN
this could affect ~1700 more packages than those currently with "Rd
cross-references" notes.

Regards,

Llu?s

[1]: https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#Cross_002dreferences
[2]: https://developer.r-project.org/blosxom.cgi/R-4-1-branch/NEWS/2021/04/20#n2021-04-21


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Sep  9 11:11:02 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 9 Sep 2024 11:11:02 +0200
Subject: [Rd] Big speedup in install.packages() by re-using connections
In-Reply-To: <CABFfbXs8n4Okup+8y2zt-P_f7WymoknBP4WAYuQ8dTwNgMAeLg@mail.gmail.com>
References: <CABFfbXtpXChZLeLREEWFHFWP24cvD8Ox-7xfBGj0p+N0Rjzwbg@mail.gmail.com>
 <CABFfbXtnteY=_qRz8ZBQ4aAPi-j+HjasRvU-fcLPJm2nu+QwLQ@mail.gmail.com>
 <20240425180109.418ca5f4@arachnoid>
 <248ad6c4-ec50-4a3c-b9e4-05346840dbf0@gmail.com>
 <CABFfbXs8n4Okup+8y2zt-P_f7WymoknBP4WAYuQ8dTwNgMAeLg@mail.gmail.com>
Message-ID: <905cd9c7-5c1f-43eb-b104-d540a5598d96@gmail.com>


On 9/8/24 23:14, Jeroen Ooms wrote:
> On Mon, Sep 2, 2024 at 10:05?AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>
>> On 4/25/24 17:01, Ivan Krylov via R-devel wrote:
>>> On Thu, 25 Apr 2024 14:45:04 +0200
>>> Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>>
>>>> Thoughts?
>>> How verboten would it be to create an empty external pointer object,
>>> add it to the preserved list, and set an on-exit finalizer to clean up
>>> the curl multi-handle? As far as I can tell, the internet module is not
>>> supposed to be unloaded, so this would not introduce an opportunity to
>>> jump to an unmapped address. This makes it possible to avoid adding a
>>> CurlCleanup() function to the internet module:
>> Cleaning up this way in principle would probably be fine, but R already
>> has support for re-using connections. Even more, R can download files in
>> parallel (in a single thread), which particularly helps with bigger
>> latencies (e.g. typically users connecting from home, etc). See
>> ?download.file(), look for "simultaneous".
> Thank you for looking at this. A few ideas wrt parallel downloading:
>
> Additional improvement on Windows can be achieved by enabling the
> nghttp2 driver in libcurl in rtools, such that it takes advantage of
> http2 multiplexing for parallel downloads
> (https://bugs.r-project.org/show_bug.cgi?id=18664).

Anyone who wants to cooperate and help is more than welcome to 
contribute patches to upstream MXE.

In case of nghttp2, thanks to Andrew Johnson, who contributed nghttp2 
support to upstream MXE. It will be part of the next Rtools (probably 
Rtools45).

> Moreover, one concern is that install.packages() may fail more
> frequently on low bandwidth connections due to reaching the "download
> timeout" when downloading files in parallel:
>
> R has an unusual definition of the http timeout, which by default
> aborts in-progress downloads after 60 seconds for no obvious reason.
> (by contrast, browsers enforce a timeout on unresponsive/stalled
> downloads only, which can be achieved in libcurl by setting
> CURLOPT_CONNECTTIMEOUT or CURLOPT_LOW_SPEED_TIME).
>
> The above is already a problem on slow networks, where large packages
> can fail to install with a timeout error in the download stage. Users
> may assume there must be a problem with the network, as it is not
> obvious that machines on slower internet connection need to work
> around R's defaults and modify options(timeout) before
> install.packages(). This problem could become more prevalent when
> using parallel downloads while still enforcing the same total timeout.
>
> For example: the MacOS binary for package "sf" is close to 90mb, hence
> currently, under the default R settings of options(timeout=60),
> install.packages will error with a download timeout on clients with
> less than 1.5MB/s bandwidth. But with the parallel implementation,
> install.packages() will share the bandwidth on 6 parallel downloads,
> so if "sf" is downloaded with all its dependencies, we need at least
> 9MB/s (i.e. a 100mbit connection) for the default settings to not
> cause a timeout.
>
> Hopefully this can be revised to enforce the timeout on stalled
> downloads only, as is common practice.

Yes, this is work in progress, I am aware that the timeout could use 
some thought re simultaneous downloads.

If anyone wants to help with testing the current implementation of 
simultaneous download and report any bugs found, that would be nice.

Best
Tomas


From jeroenoom@ @end|ng |rom gm@||@com  Mon Sep  9 18:19:12 2024
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Mon, 9 Sep 2024 18:19:12 +0200
Subject: [Rd] Big speedup in install.packages() by re-using connections
In-Reply-To: <905cd9c7-5c1f-43eb-b104-d540a5598d96@gmail.com>
References: <CABFfbXtpXChZLeLREEWFHFWP24cvD8Ox-7xfBGj0p+N0Rjzwbg@mail.gmail.com>
 <CABFfbXtnteY=_qRz8ZBQ4aAPi-j+HjasRvU-fcLPJm2nu+QwLQ@mail.gmail.com>
 <20240425180109.418ca5f4@arachnoid>
 <248ad6c4-ec50-4a3c-b9e4-05346840dbf0@gmail.com>
 <CABFfbXs8n4Okup+8y2zt-P_f7WymoknBP4WAYuQ8dTwNgMAeLg@mail.gmail.com>
 <905cd9c7-5c1f-43eb-b104-d540a5598d96@gmail.com>
Message-ID: <CABFfbXtxuX+7JqQ0ZSc=JaVs-1sOH_JtDHEpNBHQd76trPA2sg@mail.gmail.com>

On Mon, Sep 9, 2024 at 11:11?AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
>
> On 9/8/24 23:14, Jeroen Ooms wrote:
> > On Mon, Sep 2, 2024 at 10:05?AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>
> >> On 4/25/24 17:01, Ivan Krylov via R-devel wrote:
> >>> On Thu, 25 Apr 2024 14:45:04 +0200
> >>> Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >>>
> >>>> Thoughts?
> >>> How verboten would it be to create an empty external pointer object,
> >>> add it to the preserved list, and set an on-exit finalizer to clean up
> >>> the curl multi-handle? As far as I can tell, the internet module is not
> >>> supposed to be unloaded, so this would not introduce an opportunity to
> >>> jump to an unmapped address. This makes it possible to avoid adding a
> >>> CurlCleanup() function to the internet module:
> >> Cleaning up this way in principle would probably be fine, but R already
> >> has support for re-using connections. Even more, R can download files in
> >> parallel (in a single thread), which particularly helps with bigger
> >> latencies (e.g. typically users connecting from home, etc). See
> >> ?download.file(), look for "simultaneous".
> > Thank you for looking at this. A few ideas wrt parallel downloading:
> >
> > Additional improvement on Windows can be achieved by enabling the
> > nghttp2 driver in libcurl in rtools, such that it takes advantage of
> > http2 multiplexing for parallel downloads
> > (https://bugs.r-project.org/show_bug.cgi?id=18664).
>
> Anyone who wants to cooperate and help is more than welcome to
> contribute patches to upstream MXE.
>
> In case of nghttp2, thanks to Andrew Johnson, who contributed nghttp2
> support to upstream MXE. It will be part of the next Rtools (probably
> Rtools45).
>
> > Moreover, one concern is that install.packages() may fail more
> > frequently on low bandwidth connections due to reaching the "download
> > timeout" when downloading files in parallel:
> >
> > R has an unusual definition of the http timeout, which by default
> > aborts in-progress downloads after 60 seconds for no obvious reason.
> > (by contrast, browsers enforce a timeout on unresponsive/stalled
> > downloads only, which can be achieved in libcurl by setting
> > CURLOPT_CONNECTTIMEOUT or CURLOPT_LOW_SPEED_TIME).
> >
> > The above is already a problem on slow networks, where large packages
> > can fail to install with a timeout error in the download stage. Users
> > may assume there must be a problem with the network, as it is not
> > obvious that machines on slower internet connection need to work
> > around R's defaults and modify options(timeout) before
> > install.packages(). This problem could become more prevalent when
> > using parallel downloads while still enforcing the same total timeout.
> >
> > For example: the MacOS binary for package "sf" is close to 90mb, hence
> > currently, under the default R settings of options(timeout=60),
> > install.packages will error with a download timeout on clients with
> > less than 1.5MB/s bandwidth. But with the parallel implementation,
> > install.packages() will share the bandwidth on 6 parallel downloads,
> > so if "sf" is downloaded with all its dependencies, we need at least
> > 9MB/s (i.e. a 100mbit connection) for the default settings to not
> > cause a timeout.
> >
> > Hopefully this can be revised to enforce the timeout on stalled
> > downloads only, as is common practice.
>
> Yes, this is work in progress, I am aware that the timeout could use
> some thought re simultaneous downloads.

OK that is good to hear.


> If anyone wants to help with testing the current implementation of
> simultaneous download and report any bugs found, that would be nice.

R-universe has ran this a few thousand times to recheck packages on
r-devel on both linux and windows, and it works well. It reduces the
CI process by a few seconds, and there are less random connection
failures. If you want to inspect some recent logs for yourself, click
the rightmost column on https://r-universe.dev/builds and then on the
GitHub Actions page, look under the "Build R-devel for Windows /
Linux" runs to see the log files.

I was also able to confirm an edge case that install.packages() does
not abort if any of the dependencies fails to download with http-404,
which I think is desired behavior. If there is anything else
specifically that you would like to see tested I can look at that.


From @|mon@@ndrew@ @end|ng |rom b@br@h@m@@c@uk  Thu Sep 12 14:01:54 2024
From: @|mon@@ndrew@ @end|ng |rom b@br@h@m@@c@uk (Simon Andrews)
Date: Thu, 12 Sep 2024 12:01:54 +0000
Subject: [Rd] Can gzfile be given the same method option as file
Message-ID: <CWXP123MB619012B710931D02CF91B812D0642@CWXP123MB6190.GBRP123.PROD.OUTLOOK.COM>

Recently my employer has introduced a security system which generates SSL certificates on the fly to be able to see the content of https connections.  To make this work they add a new root certificate to the windows certificate store.

In R this causes problems because the default library used to download data from URLs doesn't look at this store, however the "wininet" download method works so where this is used then things work (albeit with a warning about future deprecation).

For functions like download.file this works great, but it fails when running readRDS:

readRDS('https://seurat.nygenome.org/azimuth/references/homologs.rds')
Error in gzfile(file, "rb") : cannot open the connection
In addition: Warning message:
In gzfile(file, "rb") :
  cannot open compressed file 'https://seurat.nygenome.org/azimuth/references/homologs.rds', probable reason 'Invalid argument'

After some debugging I see that the root cause is from the gzfile function.

> gzfile('https://seurat.nygenome.org/azimuth/references/homologs.rds') -> g
> open(g, open="r")
Error in open.connection(g, open = "r") : cannot open the connection
In addition: Warning message:
In open.connection(g, open = "r") :
  cannot open compressed file 'https://seurat.nygenome.org/azimuth/references/homologs.rds', probable reason 'Invalid argument'

If this was not a compressed file then using file rather than gzfile we can make this work by setting the url.method option:

> options("url.method"="wininet")
> file('https://seurat.nygenome.org/azimuth/references/homologs.rds') -> g
> open(g, open="r")
Warning message:
In open.connection(g, open = "r") :
  the 'wininet' method of url() is deprecated for http:// and https:// URLs

So I get a warning, but it works.

I guess this boils down to two questions:


  1.  Is it possible to add the same "method" argument to gzfile that file uses so that people in my situation have a work round?
  2.  Given the warnings we're getting when using wininet, are their plans to make windows certficates be supported in another way?

Thanks

Simon.












	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Thu Sep 12 16:27:37 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Thu, 12 Sep 2024 17:27:37 +0300
Subject: [Rd] Can gzfile be given the same method option as file
In-Reply-To: <CWXP123MB619012B710931D02CF91B812D0642@CWXP123MB6190.GBRP123.PROD.OUTLOOK.COM>
References: <CWXP123MB619012B710931D02CF91B812D0642@CWXP123MB6190.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <20240912172737.1202b2bd@arachnoid>

? Thu, 12 Sep 2024 12:01:54 +0000
Simon Andrews via R-devel <r-devel at r-project.org> ?????:

> readRDS('https://seurat.nygenome.org/azimuth/references/homologs.rds')
> Error in gzfile(file, "rb") : cannot open the connection

I don't think that gzfile works with URLs. gzcon(), on the other hand,
does work with url() connections, which accepts the 'method' argument
and the getOption('url.method') default.

h <- readRDS(url(
 'https://seurat.nygenome.org/azimuth/references/homologs.rds'
))

But that only works with gzip-compressed files. For example, CRAN's
PACKAGES.rds is xz-compressed, and I don't see a way to read it the
same way:

readBin(
 index <- file.path(
  contrib.url(getOption('repos')['CRAN']),
  'PACKAGES.rds'
 ), raw(), 5
) |> rawToChar()
# [1] "\xfd7zXZ" <-- note the "7zXZ" header
readRDS(url(index))
# Error in readRDS(url(index)) : unknown input format

>   2.  Given the warnings we're getting when using wininet, are their
> plans to make windows certficates be supported in another way?

What does libcurlVersion() return for you? In theory, it should be
possible to make libcurl use schannel and therefore the system
certificate store for TLS verification purposes.

-- 
Best regards,
Ivan


From @|mon@@ndrew@ @end|ng |rom b@br@h@m@@c@uk  Thu Sep 12 17:06:50 2024
From: @|mon@@ndrew@ @end|ng |rom b@br@h@m@@c@uk (Simon Andrews)
Date: Thu, 12 Sep 2024 15:06:50 +0000
Subject: [Rd] Can gzfile be given the same method option as file
In-Reply-To: <20240912172737.1202b2bd@arachnoid>
References: <CWXP123MB619012B710931D02CF91B812D0642@CWXP123MB6190.GBRP123.PROD.OUTLOOK.COM>
 <20240912172737.1202b2bd@arachnoid>
Message-ID: <CWXP123MB6190D38EB374D47862DC5E52D0642@CWXP123MB6190.GBRP123.PROD.OUTLOOK.COM>

Thankyou!  This helped a lot.  I had mis-understood some of the chain of functions which got to the eventual failure.  I can confirm that it does indeed work if you create a url() first and it picks the appropriate back end as long as the url.method option is set.

For the schannel back end I have:

> libcurlVersion()
[1] "8.6.0"
attr(,"ssl_version")
[1] "(OpenSSL/3.2.1) Schannel"
attr(,"libssh_version")
[1] "libssh2/1.11.0"

However I can't get either of the curl related methods to work.

> download.file('https://seurat.nygenome.org/azimuth/references/homologs.rds', destfile = "c:/Users/andrewss/homologs.rds", method="libcurl")
trying URL 'https://seurat.nygenome.org/azimuth/references/homologs.rds'
Error in download.file("https://seurat.nygenome.org/azimuth/references/homologs.rds",  : 
  cannot open URL 'https://seurat.nygenome.org/azimuth/references/homologs.rds'
In addition: Warning message:
In download.file("https://seurat.nygenome.org/azimuth/references/homologs.rds",  :
  URL 'https://seurat.nygenome.org/azimuth/references/homologs.rds': status was 'SSL connect error'

> download.file('https://seurat.nygenome.org/azimuth/references/homologs.rds', destfile = "c:/Users/andrewss/homologs.rds", method="curl")
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
curl: (35) schannel: next InitializeSecurityContext failed: CRYPT_E_NO_REVOCATION_CHECK (0x80092012) - The revocation function was unable to check revocation for the certificate.
Error in download.file("https://seurat.nygenome.org/azimuth/references/homologs.rds",  : 
  'curl' call had nonzero exit status

I realise that this may not be as simple as the certificate not being seen, and that the system here may not fake the revocation infrastructure too, but I don't see that this is going to change, and it's only the winet method which actually allows anything to connect.

Simon.




-----Original Message-----
From: Ivan Krylov <ikrylov at disroot.org> 
Sent: 12 September 2024 15:28
To: Simon Andrews via R-devel <r-devel at r-project.org>
Cc: Simon Andrews <simon.andrews at babraham.ac.uk>
Subject: Re: [Rd] Can gzfile be given the same method option as file

? Thu, 12 Sep 2024 12:01:54 +0000
Simon Andrews via R-devel <r-devel at r-project.org> ?????:

> readRDS('https://seurat.nygenome.org/azimuth/references/homologs.rds')
> Error in gzfile(file, "rb") : cannot open the connection

I don't think that gzfile works with URLs. gzcon(), on the other hand, does work with url() connections, which accepts the 'method' argument and the getOption('url.method') default.

h <- readRDS(url(
 'https://seurat.nygenome.org/azimuth/references/homologs.rds'
))

But that only works with gzip-compressed files. For example, CRAN's PACKAGES.rds is xz-compressed, and I don't see a way to read it the same way:

readBin(
 index <- file.path(
  contrib.url(getOption('repos')['CRAN']),
  'PACKAGES.rds'
 ), raw(), 5
) |> rawToChar()
# [1] "\xfd7zXZ" <-- note the "7zXZ" header
readRDS(url(index))
# Error in readRDS(url(index)) : unknown input format

>   2.  Given the warnings we're getting when using wininet, are their 
> plans to make windows certficates be supported in another way?

What does libcurlVersion() return for you? In theory, it should be possible to make libcurl use schannel and therefore the system certificate store for TLS verification purposes.

--
Best regards,
Ivan

------------------------------------
This email has been scanned for spam & viruses. If you believe this email should have been stopped by our filters, click the following link to report it (https://portal-uk.mailanyone.net/index.html#/outer/reportspam?token=dXNlcj1zaW1vbi5hbmRyZXdzQGJhYnJhaGFtLmFjLnVrO3RzPTE3MjYxNTEyNjU7dXVpZD02NkUyRkE2MDJDNjczRjRCREUwOTMxQUM4NTdCNkY3Nzt0b2tlbj1lNWI5MzU2NGJmOWE1MTcwYmM4ZmY2YjNhNTYwMWQ5ZmFkOTU2YWE1Ow%3D%3D).


From |kry|ov @end|ng |rom d|@root@org  Thu Sep 12 17:23:02 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Thu, 12 Sep 2024 18:23:02 +0300
Subject: [Rd] Can gzfile be given the same method option as file
In-Reply-To: <CWXP123MB6190D38EB374D47862DC5E52D0642@CWXP123MB6190.GBRP123.PROD.OUTLOOK.COM>
References: <CWXP123MB619012B710931D02CF91B812D0642@CWXP123MB6190.GBRP123.PROD.OUTLOOK.COM>
 <20240912172737.1202b2bd@arachnoid>
 <CWXP123MB6190D38EB374D47862DC5E52D0642@CWXP123MB6190.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <20240912182302.5ddbe5a8@arachnoid>

? Thu, 12 Sep 2024 15:06:50 +0000
Simon Andrews <simon.andrews at babraham.ac.uk> ?????:

> > download.file('https://seurat.nygenome.org/azimuth/references/homologs.rds',
> > destfile = "c:/Users/andrewss/homologs.rds", method="libcurl")  
<...>
> status was 'SSL connect error'
> 
> > download.file('https://seurat.nygenome.org/azimuth/references/homologs.rds',
> > destfile = "c:/Users/andrewss/homologs.rds", method="curl")  
<...>
> curl: (35) schannel: next InitializeSecurityContext
> failed: CRYPT_E_NO_REVOCATION_CHECK (0x80092012) - The revocation
> function was unable to check revocation for the certificate.

This extra error code is useful, thank you for trying the "curl"
method. https://github.com/curl/curl/issues/14315 suggests a libcurl
option and a curl command line option.

Does download.file(method = 'curl', extra = '--ssl-no-revoke') work for
you?

Since R-4.2.2, R understands the R_LIBCURL_SSL_REVOKE_BEST_EFFORT
environment variable. Does it help to set it to "TRUE" (e.g. in the
.Renviron file) before invoking download.file(method = "libcurl")?

Some extra context can be found in
news(grepl('R_LIBCURL_SSL_REVOKE_BEST_EFFORT', Text)) and
<https://bugs.r-project.org/show_bug.cgi?id=18379>.

-- 
Best regards,
Ivan


From @|mon@@ndrew@ @end|ng |rom b@br@h@m@@c@uk  Thu Sep 12 17:36:32 2024
From: @|mon@@ndrew@ @end|ng |rom b@br@h@m@@c@uk (Simon Andrews)
Date: Thu, 12 Sep 2024 15:36:32 +0000
Subject: [Rd] Can gzfile be given the same method option as file
In-Reply-To: <20240912182302.5ddbe5a8@arachnoid>
References: <CWXP123MB619012B710931D02CF91B812D0642@CWXP123MB6190.GBRP123.PROD.OUTLOOK.COM>
 <20240912172737.1202b2bd@arachnoid>
 <CWXP123MB6190D38EB374D47862DC5E52D0642@CWXP123MB6190.GBRP123.PROD.OUTLOOK.COM>
 <20240912182302.5ddbe5a8@arachnoid>
Message-ID: <CWXP123MB6190EF5BCE48303117C82AA4D0642@CWXP123MB6190.GBRP123.PROD.OUTLOOK.COM>

? Thu, 12 Sep 2024 15:06:50 +0000
Simon Andrews <simon.andrews at babraham.ac.uk> ?????:

> > > download.file('https://seurat.nygenome.org/azimuth/references/homolo
> > > gs.rds', destfile = "c:/Users/andrewss/homologs.rds", method="curl")
<...>
> > curl: (35) schannel: next InitializeSecurityContext
> > failed: CRYPT_E_NO_REVOCATION_CHECK (0x80092012) - The revocation 
> > function was unable to check revocation for the certificate.

> This extra error code is useful, thank you for trying the "curl"
> method. https://github.com/curl/curl/issues/14315 suggests a libcurl option and a curl command line option.
> 
> Does download.file(method = 'curl', extra = '--ssl-no-revoke') work for you?

Yes!  Adding that option does indeed work and generates no warnings.

> Since R-4.2.2, R understands the R_LIBCURL_SSL_REVOKE_BEST_EFFORT environment variable. Does it help to set it > to "TRUE" (e.g. in the .Renviron file) before invoking download.file(method = "libcurl")?

Yes, this also works and will provide a workable solution for our environment

> Sys.getenv("R_LIBCURL_SSL_REVOKE_BEST_EFFORT")
[1] "TRUE"
> download.file('https://seurat.nygenome.org/azimuth/references/homologs.rds', destfile = "c:/Users/andrewss/homologs.rds", method="libcurl")
trying URL 'https://seurat.nygenome.org/azimuth/references/homologs.rds'
Content type 'application/octet-stream' length 3458249 bytes (3.3 MB)
downloaded 3.3 MB

Thank you so much for your help with this.  I shall implement this for the rest of our organisation.

Simon.


From therne@u @end|ng |rom m@yo@edu  Sun Sep 15 02:43:31 2024
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Sun, 15 Sep 2024 00:43:31 +0000
Subject: [Rd] Possible update to survival
Message-ID: <BL0PR01MB4658BCF7EF86EAD903545CD7AE672@BL0PR01MB4658.prod.exchangelabs.com>

I got good feedback from the list about a scope issue, so I am coming back for more.
Prior issue:   users who type survival::coxph(survival::Surv(time, status) ~ x1 + x2 + surv ival::strata(group), data=mydata)
This messes up the character string matching for strata, done via   tt <- terms(formula, specials= ?strata?).  The code runs, and gives the wrong answer (group is treated as an ordinary covariate).

The solution

  1.  Add code very early that rewrites the formula without the offendinge survival:: string
  2.  Before calling model.frame(), insert my copy of strata into the calling chain
    coxenv <- new.env(parent= environment(formula))
    assign("strata", survival::strata, envir= coxenv)
    environment(formula) <- coxenv

The second part of this deals with those who want to use survival functions but not use library(survival).


Now to the question.
I had always (naively) assumed that the Surv(), strata(), etc calls within a coxph formula would be resolved first within the survival namespace.  I realize now that this is not true: they get resoloved within model.frame.  If a user has their own Surv, it will get used.
For ultimate safety, I am thinking of extending the above to all of the internal survival functions that might be used in a formula: Surv, strata, pspline, cluster, ratetable  (I think that?s all).   An intitial limited test looks okay, but before anything migrates to CRAN I am looking for any feedback.   The current test version also prints a warning when removing the extraneous ?survival::? modifier, which I will retain for at least a little while although I personally detest receiving such messages.

Terry T.

	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Mon Sep 16 16:47:20 2024
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Mon, 16 Sep 2024 10:47:20 -0400
Subject: [Rd] numerical issue with t.test
Message-ID: <CALK03d1EgjSDw69yKHyqO2y=-7-NVW58LikosoxrNqJhUmZ8OQ@mail.gmail.com>

Hi! I expected that t.test should report a very large p-value (close
to 1), even when using paired=TRUE, for the data below (which are very
similar). However, I observe p-value = 0.02503 which indicates a
significant difference, even though there is none. Can this be fixed
please? This is with R-4.4.1. For reference below I use paired=FALSE
with the same data, and I get p-value = 1 as expected.

> err1 = c(-1.6076199373862132, -1.658521185520103, -1.6549424312339873, -1.5887767975086149, -1.634129577540383, -1.7442711937982249)
> err2 = c(-1.6076199373862132, -1.6585211855201032, -1.6549424312339875, -1.5887767975086149, -1.6341295775403832, -1.7442711937982252)
> t.test(err1,err2,paired=TRUE)

    Paired t-test

data:  err1 and err2
t = 3.1623, df = 5, p-value = 0.02503
alternative hypothesis: true mean difference is not equal to 0
95 percent confidence interval:
 2.769794e-17 2.683615e-16
sample estimates:
mean difference
   1.480297e-16

> t.test(err1,err2,paired=FALSE)

    Welch Two Sample t-test

data:  err1 and err2
t = 0, df = 10, p-value = 1
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
 -0.06988771  0.06988771
sample estimates:
mean of x mean of y
-1.648044 -1.648044


From ||@t@ @end|ng |rom dewey@myzen@co@uk  Mon Sep 16 16:54:11 2024
From: ||@t@ @end|ng |rom dewey@myzen@co@uk (Michael Dewey)
Date: Mon, 16 Sep 2024 15:54:11 +0100
Subject: [Rd] numerical issue with t.test
In-Reply-To: <CALK03d1EgjSDw69yKHyqO2y=-7-NVW58LikosoxrNqJhUmZ8OQ@mail.gmail.com>
References: <CALK03d1EgjSDw69yKHyqO2y=-7-NVW58LikosoxrNqJhUmZ8OQ@mail.gmail.com>
Message-ID: <2e646d2d-5ad3-052f-3b24-1de9d3eb8596@dewey.myzen.co.uk>

Dear Toby

I see no problem there. If you compute the mean and variance of err1 - 
err2 which is what the paired test is working on then that might help to 
see what is going on.

Michael

On 16/09/2024 15:47, Toby Hocking wrote:
> Hi! I expected that t.test should report a very large p-value (close
> to 1), even when using paired=TRUE, for the data below (which are very
> similar). However, I observe p-value = 0.02503 which indicates a
> significant difference, even though there is none. Can this be fixed
> please? This is with R-4.4.1. For reference below I use paired=FALSE
> with the same data, and I get p-value = 1 as expected.
> 
>> err1 = c(-1.6076199373862132, -1.658521185520103, -1.6549424312339873, -1.5887767975086149, -1.634129577540383, -1.7442711937982249)
>> err2 = c(-1.6076199373862132, -1.6585211855201032, -1.6549424312339875, -1.5887767975086149, -1.6341295775403832, -1.7442711937982252)
>> t.test(err1,err2,paired=TRUE)
> 
>      Paired t-test
> 
> data:  err1 and err2
> t = 3.1623, df = 5, p-value = 0.02503
> alternative hypothesis: true mean difference is not equal to 0
> 95 percent confidence interval:
>   2.769794e-17 2.683615e-16
> sample estimates:
> mean difference
>     1.480297e-16
> 
>> t.test(err1,err2,paired=FALSE)
> 
>      Welch Two Sample t-test
> 
> data:  err1 and err2
> t = 0, df = 10, p-value = 1
> alternative hypothesis: true difference in means is not equal to 0
> 95 percent confidence interval:
>   -0.06988771  0.06988771
> sample estimates:
> mean of x mean of y
> -1.648044 -1.648044
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Michael


From bbo|ker @end|ng |rom gm@||@com  Mon Sep 16 16:57:29 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 16 Sep 2024 10:57:29 -0400
Subject: [Rd] numerical issue with t.test
In-Reply-To: <2e646d2d-5ad3-052f-3b24-1de9d3eb8596@dewey.myzen.co.uk>
References: <CALK03d1EgjSDw69yKHyqO2y=-7-NVW58LikosoxrNqJhUmZ8OQ@mail.gmail.com>
 <2e646d2d-5ad3-052f-3b24-1de9d3eb8596@dewey.myzen.co.uk>
Message-ID: <0af3164f-c5f5-4dfb-b1b8-c950fef3b925@gmail.com>

   To be more specific, this replicates the computations that t.test is 
doing (stripped of all the different cases that stats:::t.test.default 
handles)

z <- err1-err2
se <- sqrt(var(z)/length(z))
mz <- mean(z)
tstat <- mz/se
2*pt(tstat, df= length(z)-1, lower.tail = FALSE)

On 2024-09-16 10:54 a.m., Michael Dewey wrote:
> Dear Toby
> 
> I see no problem there. If you compute the mean and variance of err1 - 
> err2 which is what the paired test is working on then that might help to 
> see what is going on.
> 
> Michael
> 
> On 16/09/2024 15:47, Toby Hocking wrote:
>> Hi! I expected that t.test should report a very large p-value (close
>> to 1), even when using paired=TRUE, for the data below (which are very
>> similar). However, I observe p-value = 0.02503 which indicates a
>> significant difference, even though there is none. Can this be fixed
>> please? This is with R-4.4.1. For reference below I use paired=FALSE
>> with the same data, and I get p-value = 1 as expected.
>>
>>> err1 = c(-1.6076199373862132, -1.658521185520103, 
>>> -1.6549424312339873, -1.5887767975086149, -1.634129577540383, 
>>> -1.7442711937982249)
>>> err2 = c(-1.6076199373862132, -1.6585211855201032, 
>>> -1.6549424312339875, -1.5887767975086149, -1.6341295775403832, 
>>> -1.7442711937982252)
>>> t.test(err1,err2,paired=TRUE)
>>
>> ???? Paired t-test
>>
>> data:? err1 and err2
>> t = 3.1623, df = 5, p-value = 0.02503
>> alternative hypothesis: true mean difference is not equal to 0
>> 95 percent confidence interval:
>> ? 2.769794e-17 2.683615e-16
>> sample estimates:
>> mean difference
>> ??? 1.480297e-16
>>
>>> t.test(err1,err2,paired=FALSE)
>>
>> ???? Welch Two Sample t-test
>>
>> data:? err1 and err2
>> t = 0, df = 10, p-value = 1
>> alternative hypothesis: true difference in means is not equal to 0
>> 95 percent confidence interval:
>> ? -0.06988771? 0.06988771
>> sample estimates:
>> mean of x mean of y
>> -1.648044 -1.648044
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
 > E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From ggrothend|eck @end|ng |rom gm@||@com  Mon Sep 16 17:21:55 2024
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Mon, 16 Sep 2024 11:21:55 -0400
Subject: [Rd] findInterval
Message-ID: <CAP01uRk6m9yzFBRNwybY85-XFMjq850+MREtAF_Oo=4TdshEVw@mail.gmail.com>

Suppose we have `dat` shown below and we want to find the the `y` value
corresponding to the last value in `x` equal to the corresponding component
of `seek` and we wish to return an output the same length as `seek` using
`findInterval` to perform  the search.  This returns the correct result:

  dat <- data.frame(x = c(2, 2, 3, 4, 4, 4),
    y = c(37, 12, 19, 30, 6, 15),
    seek = 1:6)

  zero2na <- function(x) replace(x, x == 0, NA)
  dat |>
    transform(dat, result = y[ zero2na(findInterval(seek, x)) ] ) |>
    _$result
   ## [1] NA 12 19 15 15 15

Since `findInterval` returns an index it is natural that the next step be
to use the index and it is also common that we want a result that is the
same length as the input.

The extra step here is to convert the 0 which `findInterval`
hard codes as missing to NA.

If, like `match`, the `findInterval` function had a `nomatch=` argument we
could have written this as follows which is shorter, more understandable
and avoids the need for zero2na:

  # if nomatch= were implemented
  seek |>
    transform(result = y[ findInterval(x, nomatch = NA) ] ) |>
    _$result

-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From |jj0731 @end|ng |rom gm@||@com  Tue Sep 17 04:58:25 2024
From: |jj0731 @end|ng |rom gm@||@com (LJJ)
Date: Tue, 17 Sep 2024 10:58:25 +0800
Subject: [Rd] Degree of freedom issue on chi-square test of goodness of fit
Message-ID: <CAJnvaVdz31unfGmMbcX6_4Ta17mO0Q_rhdFttHEmW10xib+vGw@mail.gmail.com>

I am running chi-square test of goodness of fit, the observation data was
well groupped to observation freq. I assume the data obey the normal
distribution N(? ?^2), while ? and ?^2 are unknown. So I use their
estimation. Consequently, I calculated out the probabilities and input in
vector p

>x<-c(6,13,14,27,25,19,10,6)  #observation freq>p<-c(0.0505, 0.0874, 0.1533, 0.2088, 0.2088, 0.1533, 0.0874, 0.0505)
                                 #probabilities from normal distribution
test_result<-chisq.test(x=x,p=p)
test_result

    Chi-squared test for given probabilities

data:  x
X-squared = 1.8468, df = 7, p-value = 0.9678


from the out put, the degree of freedon is 7 (df=7),  because the data
was in 8 groups so df=8-1=7

That is perfect if the parameters (? and ?^2) in normal distribution is
precise. However, in this case, they are unknow and I used ther
estimations.

 If the observation group is n, number of unknow parameters in distribution
is r, then in chi-square test, the degree of freedom should be n-r-1. But
in chisq.test() output, it is always n-1.

In this case, the degree of freedom should be 8-2-1=5 (there are two unknow
parameters). I have to run function pchisq() for rest calculation manually.

I propose to enhance function chisq.test() in degree of freedom. In
practice, there are unknow parameters in distribution function.

	[[alternative HTML version deleted]]


From |@go@bonn|c| @end|ng |rom umontpe|||er@|r  Tue Sep 17 12:28:19 2024
From: |@go@bonn|c| @end|ng |rom umontpe|||er@|r (Iago Bonnici)
Date: Tue, 17 Sep 2024 12:28:19 +0200
Subject: [Rd] Wrong/incomplete documentation regarding the 100-bytes path
 length limit.
Message-ID: <070e35bd-8f13-4a54-b76a-cedf003f5a25@umontpellier.fr>

Hello @r-devel,

 ??? From what I read in the following thread:

https://stat.ethz.ch/pipermail/r-package-devel/2023q4/010197.html

 ??? The major reason to limit paths lengths in R packages is to help 
support MS Windows 260-chars paths lengths limit (pre-W10).

 ??? However, the official documentation at this address:

https://cran.r-project.org/doc/manuals/R-exts.html#Package-structure-1

 ??? States:

 > /packages are normally distributed as tarballs, and these have a 
limit on path lengths: for maximal portability 100 bytes.

/??? This is the wrong explanation. Tar has been supporting 256-chars 
paths since POSIX.1-1988 and unlimited paths since POSIX.1-2001. The 
limitation should be deferred to MS Windows instead of tar.

 ??? Considering that the manuals are ? /edited by the R Development 
Core Team /? <https://cran.r-project.org/manuals.html>, I suppose that 
this is the right list to point out this inconsistency? How can I help 
in fixing this? Should I open a bug at R Bugzilla?

 ??? Note: I am not discussing whether the limit itself should be 
reconsidered. That discussion seems yet covered by the aforementioned 
thread (but it's non-official), and by bug #18637 
<https://bugs.r-project.org/show_bug.cgi?id=18637> (but it's stale). In 
any case, I think there is no blocker to clarifying the situation in the 
documentation.

 ??? Best regards,

--
Iago-lito
	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Sep 17 14:45:01 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 17 Sep 2024 14:45:01 +0200
Subject: [Rd] 
 Wrong/incomplete documentation regarding the 100-bytes path
 length limit.
In-Reply-To: <070e35bd-8f13-4a54-b76a-cedf003f5a25@umontpellier.fr>
References: <070e35bd-8f13-4a54-b76a-cedf003f5a25@umontpellier.fr>
Message-ID: <c296a460-0a8e-473a-849a-3b40687cd40c@gmail.com>

On 9/17/24 12:28, Iago Bonnici via R-devel wrote:
> Hello @r-devel,
>
>   ??? From what I read in the following thread:
>
> https://stat.ethz.ch/pipermail/r-package-devel/2023q4/010197.html
>
>   ??? The major reason to limit paths lengths in R packages is to help
> support MS Windows 260-chars paths lengths limit (pre-W10).
Not really, the limit on Windows is a reason why path length is a scarce 
resource in portable applications. And it exists also on Windows 10 and 
newer - it is a limitation now in Windows applications, inherited by a 
limit in early versions of Windows operating system. R itself doesn't 
have this limitation anymore.
>   ??? However, the official documentation at this address:
>
> https://cran.r-project.org/doc/manuals/R-exts.html#Package-structure-1
>
>   ??? States:
>
>   > /packages are normally distributed as tarballs, and these have a
> limit on path lengths: for maximal portability 100 bytes.
>
> /??? This is the wrong explanation. Tar has been supporting 256-chars
> paths since POSIX.1-1988 and unlimited paths since POSIX.1-2001. The
> limitation should be deferred to MS Windows instead of tar.
>
>   ??? Considering that the manuals are ? /edited by the R Development
> Core Team /? <https://cran.r-project.org/manuals.html>, I suppose that
> this is the right list to point out this inconsistency? How can I help
> in fixing this? Should I open a bug at R Bugzilla?
>
>   ??? Note: I am not discussing whether the limit itself should be
> reconsidered. That discussion seems yet covered by the aforementioned
> thread (but it's non-official), and by bug #18637
> <https://bugs.r-project.org/show_bug.cgi?id=18637> (but it's stale). In
> any case, I think there is no blocker to clarifying the situation in the
> documentation.

I have added a sentence to R-exts mentioning Windows is also a reason 
why it makes sense to keep paths short.

Best
Tomas

>
>   ??? Best regards,
>
> --
> Iago-lito
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Sep 17 18:14:56 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 17 Sep 2024 18:14:56 +0200
Subject: [Rd] findInterval
In-Reply-To: <CAP01uRk6m9yzFBRNwybY85-XFMjq850+MREtAF_Oo=4TdshEVw@mail.gmail.com>
References: <CAP01uRk6m9yzFBRNwybY85-XFMjq850+MREtAF_Oo=4TdshEVw@mail.gmail.com>
Message-ID: <26345.43776.640449.934216@stat.math.ethz.ch>

>>>>> Gabor Grothendieck 
>>>>>     on Mon, 16 Sep 2024 11:21:55 -0400 writes:

    > Suppose we have `dat` shown below and we want to find the the `y` value
    > corresponding to the last value in `x` equal to the corresponding component
    > of `seek` and we wish to return an output the same length as `seek` using
    > `findInterval` to perform  the search.  This returns the correct result:

    > dat <- data.frame(x = c(2, 2, 3, 4, 4, 4),
    > 	     		y = c(37, 12, 19, 30, 6, 15),
    >                  seek = 1:6)

    > zero2na <- function(x) replace(x, x == 0, NA)

    > dat |>
    > transform(dat, result = y[ zero2na(findInterval(seek, x)) ] ) |>
    > _$result
    > ## [1] NA 12 19 15 15 15

I'd write that as

    with(dat, y[ zero2na(findInterval(seek, x)) ] )

so I can read it with jumping hoops and stand on my head ...

    > Since `findInterval` returns an index it is natural that the next step be
    > to use the index and it is also common that we want a result that is the
    > same length as the input.

I think your example where x and y are of the same length
not typical.

Not that the design of   findInterval(x, vec, ..)  is indeed to always return
an index, but there isn't any "nomatch", but rather a
- "left of the leftmost", i.e.,  an x[i] < vec[1]  (as 'vec' must be
  sorted increasingly) or
- "right of rightmost"  , i.e.,  an x[i] > vec[length(vec)]

and these should give *different* results (and not both the
same).

I don't think 'nomatch' would improve the relatively clean  findInterval()
behavior.

There are  three logical switches  ... which allow   2^3
variants of which I now guess only 6  differ:

Here's some R code showing the possibilities:


(argsTF <- names(formals(findInterval))[-(1:2)]) # "rightmost.closed"  "all.inside" "left.open"       
FT <- c(FALSE, TRUE)
allFT <- as.matrix(expand.grid(rightmost.closed = FT,
                               all.inside       = FT,
                               left.open        = FT))
allFT
(cn <- substr(colnames(allFT), 1,1)) #  "r" "a" "l"

x <- 2:18
v <- c(5, 10, 15) # create two bins [5,10) and [10,15)

fiAll <- apply(allFT, 1, function(r.a.f)
    do.call(findInterval, c(list(x, v), as.list(r.a.f))))

cbind(x, fiAll) # has all info

## must find cool 'column names' for fiAll: construct from r.., a.., l.. = F / T
(cn1 <- apply(`dim<-`(c(".","|")[allFT+1L], dim(allFT)), 1, paste0, collapse=""))
##  "..." "|.." ".|." "||." "..|" "|.|" ".||" "|||"
colnames(fiAll) <- cn1
cbind(x, fiAll) ## --> col. 3 == 4  and  7 == 8
##==> show only unique columns:
cbind(x, t(unique(t(fiAll))))
 ##  x ... |.. .|. ..| |.| .||
 ##  2   0   0   1   0   0   1
 ##  3   0   0   1   0   0   1
 ##  4   0   0   1   0   0   1
 ##  5   1   1   1   0   1   1
 ##  6   1   1   1   1   1   1
 ##  7   1   1   1   1   1   1
 ##  8   1   1   1   1   1   1
 ##  9   1   1   1   1   1   1
 ## 10   2   2   2   1   1   1
 ## 11   2   2   2   2   2   2
 ## 12   2   2   2   2   2   2
 ## 13   2   2   2   2   2   2
 ## 14   2   2   2   2   2   2
 ## 15   3   2   2   2   2   2
 ## 16   3   3   2   3   3   2
 ## 17   3   3   2   3   3   2
 ## 18   3   3   2   3   3   2
  

Martin


From ggrothend|eck @end|ng |rom gm@||@com  Tue Sep 17 19:27:35 2024
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Tue, 17 Sep 2024 13:27:35 -0400
Subject: [Rd] findInterval
In-Reply-To: <26345.43776.640449.934216@stat.math.ethz.ch>
References: <CAP01uRk6m9yzFBRNwybY85-XFMjq850+MREtAF_Oo=4TdshEVw@mail.gmail.com>
 <26345.43776.640449.934216@stat.math.ethz.ch>
Message-ID: <CAP01uRnhW1XebRd5TaQd-C24KhepRX++weMwaJW5oyEhwMr1Yg@mail.gmail.com>

The other problem in this example is setting NA's.

   replace(x, x == 0, NA)

requires two instances of x making it not very pipe friendly.  In
dplyr there is na_if
to address that problem and base R might have something that addresses this
so we don't have to define our own zero2na as the base of R now has pipes.


On Tue, Sep 17, 2024 at 12:14?PM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Gabor Grothendieck
> >>>>>     on Mon, 16 Sep 2024 11:21:55 -0400 writes:
>
>     > Suppose we have `dat` shown below and we want to find the the `y` value
>     > corresponding to the last value in `x` equal to the corresponding component
>     > of `seek` and we wish to return an output the same length as `seek` using
>     > `findInterval` to perform  the search.  This returns the correct result:
>
>     > dat <- data.frame(x = c(2, 2, 3, 4, 4, 4),
>     >                   y = c(37, 12, 19, 30, 6, 15),
>     >                  seek = 1:6)
>
>     > zero2na <- function(x) replace(x, x == 0, NA)
>
>     > dat |>
>     > transform(dat, result = y[ zero2na(findInterval(seek, x)) ] ) |>
>     > _$result
>     > ## [1] NA 12 19 15 15 15
>
> I'd write that as
>
>     with(dat, y[ zero2na(findInterval(seek, x)) ] )
>
> so I can read it with jumping hoops and stand on my head ...
>
>     > Since `findInterval` returns an index it is natural that the next step be
>     > to use the index and it is also common that we want a result that is the
>     > same length as the input.
>
> I think your example where x and y are of the same length
> not typical.
>
> Not that the design of   findInterval(x, vec, ..)  is indeed to always return
> an index, but there isn't any "nomatch", but rather a
> - "left of the leftmost", i.e.,  an x[i] < vec[1]  (as 'vec' must be
>   sorted increasingly) or
> - "right of rightmost"  , i.e.,  an x[i] > vec[length(vec)]
>
> and these should give *different* results (and not both the
> same).
>
> I don't think 'nomatch' would improve the relatively clean  findInterval()
> behavior.
>
> There are  three logical switches  ... which allow   2^3
> variants of which I now guess only 6  differ:
>
> Here's some R code showing the possibilities:
>
>
> (argsTF <- names(formals(findInterval))[-(1:2)]) # "rightmost.closed"  "all.inside" "left.open"
> FT <- c(FALSE, TRUE)
> allFT <- as.matrix(expand.grid(rightmost.closed = FT,
>                                all.inside       = FT,
>                                left.open        = FT))
> allFT
> (cn <- substr(colnames(allFT), 1,1)) #  "r" "a" "l"
>
> x <- 2:18
> v <- c(5, 10, 15) # create two bins [5,10) and [10,15)
>
> fiAll <- apply(allFT, 1, function(r.a.f)
>     do.call(findInterval, c(list(x, v), as.list(r.a.f))))
>
> cbind(x, fiAll) # has all info
>
> ## must find cool 'column names' for fiAll: construct from r.., a.., l.. = F / T
> (cn1 <- apply(`dim<-`(c(".","|")[allFT+1L], dim(allFT)), 1, paste0, collapse=""))
> ##  "..." "|.." ".|." "||." "..|" "|.|" ".||" "|||"
> colnames(fiAll) <- cn1
> cbind(x, fiAll) ## --> col. 3 == 4  and  7 == 8
> ##==> show only unique columns:
> cbind(x, t(unique(t(fiAll))))
>  ##  x ... |.. .|. ..| |.| .||
>  ##  2   0   0   1   0   0   1
>  ##  3   0   0   1   0   0   1
>  ##  4   0   0   1   0   0   1
>  ##  5   1   1   1   0   1   1
>  ##  6   1   1   1   1   1   1
>  ##  7   1   1   1   1   1   1
>  ##  8   1   1   1   1   1   1
>  ##  9   1   1   1   1   1   1
>  ## 10   2   2   2   1   1   1
>  ## 11   2   2   2   2   2   2
>  ## 12   2   2   2   2   2   2
>  ## 13   2   2   2   2   2   2
>  ## 14   2   2   2   2   2   2
>  ## 15   3   2   2   2   2   2
>  ## 16   3   3   2   3   3   2
>  ## 17   3   3   2   3   3   2
>  ## 18   3   3   2   3   3   2
>
>
> Martin



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From j|ox @end|ng |rom mcm@@ter@c@  Fri Sep 20 18:49:00 2024
From: j|ox @end|ng |rom mcm@@ter@c@ (John Fox)
Date: Fri, 20 Sep 2024 12:49:00 -0400
Subject: [Rd] model.matrix() may be misleading for "lme" models
Message-ID: <a7d44ccb-10b4-4fbb-b34c-154aaa687ef7@mcmaster.ca>

Dear r-devel list members,

I'm posting this message here because it concerns the nlme package, 
which is maintained by R-core. The problem I'm about to describe is 
somewhere between a bug and a feature request, and so I thought it a 
good idea to ask here rather posting a bug report to the R bugzilla.

I was made aware (by Ben Bolker) that the car::Anova() method for "lme" 
models reports unreasonable results and warnings for mixed models in 
which non-default contrasts are used for factors. I traced the problem 
to a call to model.matrix() on "lme" objects, which was introduced into 
car:::Anova.lme() a couple of years ago to check for problems in the 
model matrix. That invokes model.matrix.default(), which ignores the 
contrasts defined in a call to lme().

Here's a simple direct example:

------- snip -------

 > library(nlme)
 > m <- lme(distance ~ Sex, random = ~ 1 | Subject,
+          data=Orthodont, contrasts=list(Sex = "contr.sum"))
 > m

Linear mixed-effects model fit by REML
   Data: Orthodont
   Log-restricted-likelihood: -253.629
   Fixed: distance ~ Sex
(Intercept)        Sex1
   23.808239    1.160511

Random effects:
  Formula: ~1 | Subject
         (Intercept) Residual
StdDev:    1.595838 2.220312

Number of Observations: 108
Number of Groups: 27

 > model.matrix(m, data=Orthodont)

     (Intercept) SexFemale
1             1         0
2             1         0
3             1         0

. . .

106           1         1
107           1         1
108           1         1
attr(,"assign")
[1] 0 1
attr(,"contrasts")
attr(,"contrasts")$Sex
[1] "contr.treatment"

--------- snip ---------

So model.matrix() constructs the model matrix using contr.treatment() 
even though contr.sum() was used by lme() to fit the model.

In contrast (pun intended), model.matrix() works as expected with an 
"lm" model (via model.matrix.lm()):

--------- snip ---------

 > m.lm <- lm(distance ~ Sex, data=Orthodont,
+            contrasts=list(Sex = "contr.sum"))
 > m.lm

Call:
lm(formula = distance ~ Sex, data = Orthodont,
    contrasts = list(Sex = "contr.sum"))

Coefficients:
(Intercept)         Sex1
      23.808        1.161

 > model.matrix(m.lm)
     (Intercept) Sex1
1             1    1
2             1    1
3             1    1

. . .

106           1   -1
107           1   -1
108           1   -1
attr(,"assign")
[1] 0 1
attr(,"contrasts")
attr(,"contrasts")$Sex
[1] "contr.sum"

--------- snip ---------

I was able to get around this problem by defining a model.matrix.lme() 
method, which is used internally in the car package but not registered:

--------- snip ---------

model.matrix.lme <- function(object, ...){

   data <- object$data
   contrasts <- object$contrasts

   if (length(contrasts) == 0) {
     xlev <- NULL
   } else {
     xlev <- vector(length(contrasts), mode="list")
     names(xlev) <- names <- names(contrasts)
     for (name in names){
       xlev[[name]] <- rownames(contrasts[[name]])
     }
   }

   if (is.null(data)){
     NextMethod(formula(object), data=eval(object$call$data),
                  contrasts.arg=contrasts, xlev=xlev, ...)
   } else {
     NextMethod(formula(object), data=data,
                     contrasts.arg=contrasts, xlev=xlev, ...)
   }
}

--------- snip ---------

This function is a bit awkward, particularly the part that constructs 
the xlev argument, but it does appear to work as intended (note, 
however, that the contrast matrix for Sex rather than "contr.sum" is 
reported in the "contrasts" attribute):

--------- snip ---------

 > model.matrix(m)
     (Intercept) Sex1
1             1    1
2             1    1
3             1    1

. . .

106           1   -1
107           1   -1
108           1   -1
attr(,"assign")
[1] 0 1
attr(,"contrasts")
attr(,"contrasts")$Sex
        [,1]
Male      1
Female   -1

 > sessionInfo()
R version 4.4.1 (2024-06-14)
Platform: aarch64-apple-darwin20
Running under: macOS Sonoma 14.6.1

Matrix products: default
BLAS: 
/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib 

LAPACK: 
/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib; 
  LAPACK version 3.12.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: America/Toronto
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] nlme_3.1-165

loaded via a namespace (and not attached):
[1] compiler_4.4.1 tools_4.4.1    grid_4.4.1     lattice_0.22-6

--------- snip ---------

Although this apparently solves the problem for car::Anova(), the 
problem is likely more general. For example, insight::get_modelmatrix() 
also reports the wrong model matrix for the "lme" model m above.

My suggestion: Include a correct model.matrix.lme() method in the nlme 
package. That could be my version, but I expect that R-core could come 
up with something better.

Thank you,
  John
-- 
John Fox, Professor Emeritus
McMaster University
Hamilton, Ontario, Canada
web: https://www.john-fox.ca/
--


From j|ox @end|ng |rom mcm@@ter@c@  Sat Sep 21 18:47:49 2024
From: j|ox @end|ng |rom mcm@@ter@c@ (John Fox)
Date: Sat, 21 Sep 2024 12:47:49 -0400
Subject: [Rd] model.matrix() may be misleading for "lme" models
In-Reply-To: <a7d44ccb-10b4-4fbb-b34c-154aaa687ef7@mcmaster.ca>
References: <a7d44ccb-10b4-4fbb-b34c-154aaa687ef7@mcmaster.ca>
Message-ID: <b60df077-eab0-451c-a8c5-67e5e333b2da@mcmaster.ca>

Dear list members,

After further testing, I found that the following simplified version of 
model.matrix.lme(), which omits passing xlev to the default method, is 
more robust. The previous version generated spurious warnings in some 
circumstances.

model.matrix.lme <- function(object, ...){
   data <- object$data
   if (is.null(data)){
     NextMethod(formula(object),  data=eval(object$call$data),
                contrasts.arg=object$contrasts)
   } else {
     NextMethod(formula(object), data=data,
                contrasts.arg=object$contrasts)
   }
}

Best,
  John


On 2024-09-20 12:49 p.m., John Fox wrote:
> Caution: External email.
> 
> 
> Dear r-devel list members,
> 
> I'm posting this message here because it concerns the nlme package,
> which is maintained by R-core. The problem I'm about to describe is
> somewhere between a bug and a feature request, and so I thought it a
> good idea to ask here rather posting a bug report to the R bugzilla.
> 
> I was made aware (by Ben Bolker) that the car::Anova() method for "lme"
> models reports unreasonable results and warnings for mixed models in
> which non-default contrasts are used for factors. I traced the problem
> to a call to model.matrix() on "lme" objects, which was introduced into
> car:::Anova.lme() a couple of years ago to check for problems in the
> model matrix. That invokes model.matrix.default(), which ignores the
> contrasts defined in a call to lme().
> 
> Here's a simple direct example:
> 
> ------- snip -------
> 
>  > library(nlme)
>  > m <- lme(distance ~ Sex, random = ~ 1 | Subject,
> +????????? data=Orthodont, contrasts=list(Sex = "contr.sum"))
>  > m
> 
> Linear mixed-effects model fit by REML
>  ? Data: Orthodont
>  ? Log-restricted-likelihood: -253.629
>  ? Fixed: distance ~ Sex
> (Intercept)??????? Sex1
>  ? 23.808239??? 1.160511
> 
> Random effects:
>  ?Formula: ~1 | Subject
>  ??????? (Intercept) Residual
> StdDev:??? 1.595838 2.220312
> 
> Number of Observations: 108
> Number of Groups: 27
> 
>  > model.matrix(m, data=Orthodont)
> 
>  ??? (Intercept) SexFemale
> 1???????????? 1???????? 0
> 2???????????? 1???????? 0
> 3???????????? 1???????? 0
> 
> . . .
> 
> 106?????????? 1???????? 1
> 107?????????? 1???????? 1
> 108?????????? 1???????? 1
> attr(,"assign")
> [1] 0 1
> attr(,"contrasts")
> attr(,"contrasts")$Sex
> [1] "contr.treatment"
> 
> --------- snip ---------
> 
> So model.matrix() constructs the model matrix using contr.treatment()
> even though contr.sum() was used by lme() to fit the model.
> 
> In contrast (pun intended), model.matrix() works as expected with an
> "lm" model (via model.matrix.lm()):
> 
> --------- snip ---------
> 
>  > m.lm <- lm(distance ~ Sex, data=Orthodont,
> +??????????? contrasts=list(Sex = "contr.sum"))
>  > m.lm
> 
> Call:
> lm(formula = distance ~ Sex, data = Orthodont,
>  ?? contrasts = list(Sex = "contr.sum"))
> 
> Coefficients:
> (Intercept)???????? Sex1
>  ???? 23.808??????? 1.161
> 
>  > model.matrix(m.lm)
>  ??? (Intercept) Sex1
> 1???????????? 1??? 1
> 2???????????? 1??? 1
> 3???????????? 1??? 1
> 
> . . .
> 
> 106?????????? 1?? -1
> 107?????????? 1?? -1
> 108?????????? 1?? -1
> attr(,"assign")
> [1] 0 1
> attr(,"contrasts")
> attr(,"contrasts")$Sex
> [1] "contr.sum"
> 
> --------- snip ---------
> 
> I was able to get around this problem by defining a model.matrix.lme()
> method, which is used internally in the car package but not registered:
> 
> --------- snip ---------
> 
> model.matrix.lme <- function(object, ...){
> 
>  ? data <- object$data
>  ? contrasts <- object$contrasts
> 
>  ? if (length(contrasts) == 0) {
>  ??? xlev <- NULL
>  ? } else {
>  ??? xlev <- vector(length(contrasts), mode="list")
>  ??? names(xlev) <- names <- names(contrasts)
>  ??? for (name in names){
>  ????? xlev[[name]] <- rownames(contrasts[[name]])
>  ??? }
>  ? }
> 
>  ? if (is.null(data)){
>  ??? NextMethod(formula(object), data=eval(object$call$data),
>  ???????????????? contrasts.arg=contrasts, xlev=xlev, ...)
>  ? } else {
>  ??? NextMethod(formula(object), data=data,
>  ??????????????????? contrasts.arg=contrasts, xlev=xlev, ...)
>  ? }
> }
> 
> --------- snip ---------
> 
> This function is a bit awkward, particularly the part that constructs
> the xlev argument, but it does appear to work as intended (note,
> however, that the contrast matrix for Sex rather than "contr.sum" is
> reported in the "contrasts" attribute):
> 
> --------- snip ---------
> 
>  > model.matrix(m)
>  ??? (Intercept) Sex1
> 1???????????? 1??? 1
> 2???????????? 1??? 1
> 3???????????? 1??? 1
> 
> . . .
> 
> 106?????????? 1?? -1
> 107?????????? 1?? -1
> 108?????????? 1?? -1
> attr(,"assign")
> [1] 0 1
> attr(,"contrasts")
> attr(,"contrasts")$Sex
>  ?????? [,1]
> Male????? 1
> Female?? -1
> 
>  > sessionInfo()
> R version 4.4.1 (2024-06-14)
> Platform: aarch64-apple-darwin20
> Running under: macOS Sonoma 14.6.1
> 
> Matrix products: default
> BLAS:
> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/ 
> vecLib.framework/Versions/A/libBLAS.dylib
> 
> LAPACK:
> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/ 
> libRlapack.dylib;
>  ?LAPACK version 3.12.0
> 
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> 
> time zone: America/Toronto
> tzcode source: internal
> 
> attached base packages:
> [1] stats???? graphics? grDevices utils???? datasets? methods?? base
> 
> other attached packages:
> [1] nlme_3.1-165
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.4.1 tools_4.4.1??? grid_4.4.1???? lattice_0.22-6
> 
> --------- snip ---------
> 
> Although this apparently solves the problem for car::Anova(), the
> problem is likely more general. For example, insight::get_modelmatrix()
> also reports the wrong model matrix for the "lme" model m above.
> 
> My suggestion: Include a correct model.matrix.lme() method in the nlme
> package. That could be my version, but I expect that R-core could come
> up with something better.
> 
> Thank you,
>  ?John
> -- 
> John Fox, Professor Emeritus
> McMaster University
> Hamilton, Ontario, Canada
> web: https://www.john-fox.ca/
> -- 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |kry|ov @end|ng |rom d|@root@org  Sat Sep 21 20:51:56 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Sat, 21 Sep 2024 21:51:56 +0300
Subject: [Rd] model.matrix() may be misleading for "lme" models
In-Reply-To: <b60df077-eab0-451c-a8c5-67e5e333b2da@mcmaster.ca>
References: <a7d44ccb-10b4-4fbb-b34c-154aaa687ef7@mcmaster.ca>
 <b60df077-eab0-451c-a8c5-67e5e333b2da@mcmaster.ca>
Message-ID: <20240921215156.1c65b61a@trisector>

Dear Prof. John Fox,

? Sat, 21 Sep 2024 12:47:49 -0400
John Fox <jfox at mcmaster.ca> ?????:

>      NextMethod(formula(object),  data=eval(object$call$data),
>                 contrasts.arg=object$contrasts)

The use of NextMethod worries me a bit. It will work as intended as
long as everyone gives fully-named arguments to the generic, without
relying on positional or partial matching, but may give unexpected
results otherwise:

foo <- \(x, ...) UseMethod('foo')
foo.default <- \(x, foo = 'default', baz = 'baz', ...)
 list(foo = foo, baz = baz, '...' = list(...))
# try to override the argument to the default method
foo.bar <- \(x, ...) NextMethod(x, foo = 'override')
x <- structure(list(), class = 'bar')
foo(x) # works, gives the right argument to foo.default
# $foo
# [1] "override"
# 
# $baz
# [1] "baz"
# 
# $...
# list()

# this used to work with foo.default, but now doesn't:
foo(x, fo = 'bar') # not matched to foo=
# $foo
# [1] "override"
# 
# $baz
# [1] "baz"
# 
# $...
# $...$fo
# [1] "bar"

foo(x, 'bar') # not matched to foo=, given to baz=
# $foo
# [1] "override"
# 
# $baz
# [1] "bar"
# 
# $...
# list()

This happens because NextMethod() overwrites named arguments already
present in the call, but any other arguments just get appended, without
any regard to whether they had already matched an argument before the
call was modified. In fact, I'm not seeing a way to safely override
some of the arguments for the next S3 method. The "attempt 4" described
by Henrik Bengtsson at [1] seems to work only if an argument is given
as part of the call:

foo.bar <- \(x, foo, ...) { foo <- 'override'; NextMethod() }
foo(x) # doesn't work
# $foo
# [1] "default"
# 
# $baz
# [1] "baz"
# 
# $...
# list()

foo(x, 1) # does work
# $foo
# [1] "override"
# 
# $baz
# [1] "baz"
#
# $...
# list()

Evaluating object$call$data in the environment of the suggested
nlme:::model.matrix.lme function may also not work right. Without an
explicit copy of the data, the best environment to evaluate it in would
be parent.frame().

-- 
Best regards,
Ivan

[1] https://github.com/HenrikBengtsson/Wishlist-for-R/issues/44


From j|ox @end|ng |rom mcm@@ter@c@  Sun Sep 22 16:23:50 2024
From: j|ox @end|ng |rom mcm@@ter@c@ (John Fox)
Date: Sun, 22 Sep 2024 10:23:50 -0400
Subject: [Rd] model.matrix() may be misleading for "lme" models
In-Reply-To: <20240921215156.1c65b61a@trisector>
References: <a7d44ccb-10b4-4fbb-b34c-154aaa687ef7@mcmaster.ca>
 <b60df077-eab0-451c-a8c5-67e5e333b2da@mcmaster.ca>
 <20240921215156.1c65b61a@trisector>
Message-ID: <ee50e3bd-364a-4f37-ba03-62aed1df5a8e@mcmaster.ca>

Dear Ivan,

Thank you for addressing my questions with your usual thoroughness. 
Please see below:

On 2024-09-21 2:51 p.m., Ivan Krylov wrote:
> [You don't often get email from ikrylov at disroot.org. Learn why this is important at https://aka.ms/LearnAboutSenderIdentification ]
> 
> Caution: External email.
> 
> 
> Dear Prof. John Fox,
> 
> ? Sat, 21 Sep 2024 12:47:49 -0400
> John Fox <jfox at mcmaster.ca> ?????:
> 
>>       NextMethod(formula(object),  data=eval(object$call$data),
>>                  contrasts.arg=object$contrasts)
> 
> The use of NextMethod worries me a bit. It will work as intended as
> long as everyone gives fully-named arguments to the generic, without
> relying on positional or partial matching, but may give unexpected
> results otherwise:

That's not an issue for car:::model.matrix.lme(), which isn't registered 
and so isn't accessible to users, but could be a problem if 
model.matrix.lme() is incorporated in the nlme package, as I suggested. 
An alternative that I think should work would be to call

     model.matrix(formula(object),  data=eval(object$call$data), 

                  contrasts.arg=object$contrasts, ...)

rather than NextMethod() from model.matrix.lme().

. . .

> Evaluating object$call$data in the environment of the suggested
> nlme:::model.matrix.lme function may also not work right. Without an
> explicit copy of the data, the best environment to evaluate it in would
> be parent.frame().

I'm afraid that I don't understand the suggestion. Isn't parent.frame() 
the default for the envir argument of eval()? Do you mean the parent 
frame of the call to model.matrix.lme()?

I tested car:::Anova.lme()/model.matrix.lme() with models fit to data in 
the global environment, in an attach()ed data frame, and within another 
function(), and didn't encounter any problems. For example:

------ snip -----

 > f <- function(){
+   OD <- Orthodont
+   m7 <- with(OD, lme(distance ~ Sex, random = ~ 1 | Subject,
+                      contrasts=list(Sex=contr.sum)))
+   Anova(m7, type=3)
+ }

 > f()
Analysis of Deviance Table (Type III tests)

Response: distance
                 Chisq Df Pr(>Chisq)
(Intercept) 3910.8377  1  < 2.2e-16
Sex            9.2921  1   0.002301

------ snip -----

Best,
  John

> 
> --
> Best regards,
> Ivan
> 
> [1] https://github.com/HenrikBengtsson/Wishlist-for-R/issues/44


From |kry|ov @end|ng |rom d|@root@org  Mon Sep 23 21:54:17 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Mon, 23 Sep 2024 22:54:17 +0300
Subject: [Rd] model.matrix() may be misleading for "lme" models
In-Reply-To: <ee50e3bd-364a-4f37-ba03-62aed1df5a8e@mcmaster.ca>
References: <a7d44ccb-10b4-4fbb-b34c-154aaa687ef7@mcmaster.ca>
 <b60df077-eab0-451c-a8c5-67e5e333b2da@mcmaster.ca>
 <20240921215156.1c65b61a@trisector>
 <ee50e3bd-364a-4f37-ba03-62aed1df5a8e@mcmaster.ca>
Message-ID: <20240923225417.08fef4c1@Tarkus>

? Sun, 22 Sep 2024 10:23:50 -0400
John Fox <jfox at mcmaster.ca> ?????:

> > Evaluating object$call$data in the environment of the suggested
> > nlme:::model.matrix.lme function may also not work right. Without an
> > explicit copy of the data, the best environment to evaluate it in
> > would be parent.frame().  
> 
> I'm afraid that I don't understand the suggestion. Isn't
> parent.frame() the default for the envir argument of eval()? Do you
> mean the parent frame of the call to model.matrix.lme()?

Yes, I do mean the parent frame of the model.matrix.lme() function
call. While eval()'s default for the 'envir' argument is
parent.frame(), this default value is evaluated in the context of the
eval() call. Letting model.matrix.lme() call eval() results in the
'envir' being the eval()'s parent, the model.matrix.lme() call frame.

In most cases, model.matrix.lme() works as intended: either lme() has
been given the 'data' argument, so object$data is not NULL and the
branch to eval() is not taken, or 'data' has not been given, so both
object$data and object$call$data are NULL, and NULL doesn't cause any
harm when evaluated in any environment. In the latter case
model.matrix.default() can access the variables in the environment of
the formula.

With keep.data = FALSE, the function may evaluate object$call$data in
the wrong environment:

maybe_model_matrix <- function(X)
 model.matrix(lme(distance ~ Sex, random = ~ 1 | Subject, X,
                  contrasts=list(Sex=contr.sum), keep.data=FALSE))

maybe_model_matrix(Orthodont)
# Error in eval(object$call$data) : object 'X' not found

...but then model.matrix.default doesn't work on such objects either,
and if the user wanted the data to be accessible, they could have set
keep.data = TRUE. I can't tell whether evaluating object$call$data in
environment(object$formula) is a better or worse idea than
parent.frame().

-- 
Best regards,
Ivan


From bbo|ker @end|ng |rom gm@||@com  Mon Sep 23 22:25:46 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 23 Sep 2024 16:25:46 -0400
Subject: [Rd] model.matrix() may be misleading for "lme" models
In-Reply-To: <20240923225417.08fef4c1@Tarkus>
References: <a7d44ccb-10b4-4fbb-b34c-154aaa687ef7@mcmaster.ca>
 <b60df077-eab0-451c-a8c5-67e5e333b2da@mcmaster.ca>
 <20240921215156.1c65b61a@trisector>
 <ee50e3bd-364a-4f37-ba03-62aed1df5a8e@mcmaster.ca>
 <20240923225417.08fef4c1@Tarkus>
Message-ID: <CABghstTfAjaU+D-GkN19J6eb-V=6Sc234jEV085PgQR2vTc+qg@mail.gmail.com>

>  I can't tell whether evaluating object$call$data in
environment(object$formula) is a better or worse idea than parent.frame().

I have struggled with this a lot over the years. There is a bunch of
wonky code in lme4, e.g. here
<https://github.com/lme4/lme4/blob/master/R/lmer.R#L814-L838>, that
tries to look for data in different possible locations, but I don't
think anything works perfectly/robustly.

https://stackoverflow.com/questions/14945274/determine-whether-evaluation-of-an-argument-will-fail-due-to-non-existence

On Mon, Sep 23, 2024 at 3:54?PM Ivan Krylov via R-devel
<r-devel at r-project.org> wrote:
>
> ? Sun, 22 Sep 2024 10:23:50 -0400
> John Fox <jfox at mcmaster.ca> ?????:
>
> > > Evaluating object$call$data in the environment of the suggested
> > > nlme:::model.matrix.lme function may also not work right. Without an
> > > explicit copy of the data, the best environment to evaluate it in
> > > would be parent.frame().
> >
> > I'm afraid that I don't understand the suggestion. Isn't
> > parent.frame() the default for the envir argument of eval()? Do you
> > mean the parent frame of the call to model.matrix.lme()?
>
> Yes, I do mean the parent frame of the model.matrix.lme() function
> call. While eval()'s default for the 'envir' argument is
> parent.frame(), this default value is evaluated in the context of the
> eval() call. Letting model.matrix.lme() call eval() results in the
> 'envir' being the eval()'s parent, the model.matrix.lme() call frame.
>
> In most cases, model.matrix.lme() works as intended: either lme() has
> been given the 'data' argument, so object$data is not NULL and the
> branch to eval() is not taken, or 'data' has not been given, so both
> object$data and object$call$data are NULL, and NULL doesn't cause any
> harm when evaluated in any environment. In the latter case
> model.matrix.default() can access the variables in the environment of
> the formula.
>
> With keep.data = FALSE, the function may evaluate object$call$data in
> the wrong environment:
>
> maybe_model_matrix <- function(X)
>  model.matrix(lme(distance ~ Sex, random = ~ 1 | Subject, X,
>                   contrasts=list(Sex=contr.sum), keep.data=FALSE))
>
> maybe_model_matrix(Orthodont)
> # Error in eval(object$call$data) : object 'X' not found
>
> ...but then model.matrix.default doesn't work on such objects either,
> and if the user wanted the data to be accessible, they could have set
> keep.data = TRUE. I can't tell whether evaluating object$call$data in
> environment(object$formula) is a better or worse idea than
> parent.frame().
>
> --
> Best regards,
> Ivan
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j|ox @end|ng |rom mcm@@ter@c@  Mon Sep 23 23:31:10 2024
From: j|ox @end|ng |rom mcm@@ter@c@ (John Fox)
Date: Mon, 23 Sep 2024 17:31:10 -0400
Subject: [Rd] model.matrix() may be misleading for "lme" models
In-Reply-To: <CABghstTfAjaU+D-GkN19J6eb-V=6Sc234jEV085PgQR2vTc+qg@mail.gmail.com>
References: <a7d44ccb-10b4-4fbb-b34c-154aaa687ef7@mcmaster.ca>
 <b60df077-eab0-451c-a8c5-67e5e333b2da@mcmaster.ca>
 <20240921215156.1c65b61a@trisector>
 <ee50e3bd-364a-4f37-ba03-62aed1df5a8e@mcmaster.ca>
 <20240923225417.08fef4c1@Tarkus>
 <CABghstTfAjaU+D-GkN19J6eb-V=6Sc234jEV085PgQR2vTc+qg@mail.gmail.com>
Message-ID: <dbef8aa6-8e59-43bd-ae6f-7f127c1f5756@mcmaster.ca>

Thank you Ivan and Ben for your recent further comments.

I think that the current code for the unregistered model.matrix.lme() in 
the development version of the car package is pretty robust and 
certainly an improvement over what was there before (which returned 
incorrect results for non-default contrasts!).

I expect that if someone in R-core picks up the task of writing a 
model.matrix.lme() for the nlme package, they would do a better job than 
I did, and I'd then be able to retire the version in the car package.

Again, thanks,
  John

On 2024-09-23 4:25 p.m., Ben Bolker wrote:
> Caution: External email.
> 
> 
>>   I can't tell whether evaluating object$call$data in
> environment(object$formula) is a better or worse idea than parent.frame().
> 
> I have struggled with this a lot over the years. There is a bunch of
> wonky code in lme4, e.g. here
> <https://github.com/lme4/lme4/blob/master/R/lmer.R#L814-L838>, that
> tries to look for data in different possible locations, but I don't
> think anything works perfectly/robustly.
> 
> https://stackoverflow.com/questions/14945274/determine-whether-evaluation-of-an-argument-will-fail-due-to-non-existence
> 
> On Mon, Sep 23, 2024 at 3:54?PM Ivan Krylov via R-devel
> <r-devel at r-project.org> wrote:
>>
>> ? Sun, 22 Sep 2024 10:23:50 -0400
>> John Fox <jfox at mcmaster.ca> ?????:
>>
>>>> Evaluating object$call$data in the environment of the suggested
>>>> nlme:::model.matrix.lme function may also not work right. Without an
>>>> explicit copy of the data, the best environment to evaluate it in
>>>> would be parent.frame().
>>>
>>> I'm afraid that I don't understand the suggestion. Isn't
>>> parent.frame() the default for the envir argument of eval()? Do you
>>> mean the parent frame of the call to model.matrix.lme()?
>>
>> Yes, I do mean the parent frame of the model.matrix.lme() function
>> call. While eval()'s default for the 'envir' argument is
>> parent.frame(), this default value is evaluated in the context of the
>> eval() call. Letting model.matrix.lme() call eval() results in the
>> 'envir' being the eval()'s parent, the model.matrix.lme() call frame.
>>
>> In most cases, model.matrix.lme() works as intended: either lme() has
>> been given the 'data' argument, so object$data is not NULL and the
>> branch to eval() is not taken, or 'data' has not been given, so both
>> object$data and object$call$data are NULL, and NULL doesn't cause any
>> harm when evaluated in any environment. In the latter case
>> model.matrix.default() can access the variables in the environment of
>> the formula.
>>
>> With keep.data = FALSE, the function may evaluate object$call$data in
>> the wrong environment:
>>
>> maybe_model_matrix <- function(X)
>>   model.matrix(lme(distance ~ Sex, random = ~ 1 | Subject, X,
>>                    contrasts=list(Sex=contr.sum), keep.data=FALSE))
>>
>> maybe_model_matrix(Orthodont)
>> # Error in eval(object$call$data) : object 'X' not found
>>
>> ...but then model.matrix.default doesn't work on such objects either,
>> and if the user wanted the data to be accessible, they could have set
>> keep.data = TRUE. I can't tell whether evaluating object$call$data in
>> environment(object$formula) is a better or worse idea than
>> parent.frame().
>>
>> --
>> Best regards,
>> Ivan
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From |kry|ov @end|ng |rom d|@root@org  Tue Sep 24 16:11:30 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Tue, 24 Sep 2024 17:11:30 +0300
Subject: [Rd] Possible update to survival
In-Reply-To: <BL0PR01MB4658BCF7EF86EAD903545CD7AE672@BL0PR01MB4658.prod.exchangelabs.com>
References: <BL0PR01MB4658BCF7EF86EAD903545CD7AE672@BL0PR01MB4658.prod.exchangelabs.com>
Message-ID: <20240924171130.4627a70e@arachnoid>

? Sun, 15 Sep 2024 00:43:31 +0000
"Therneau, Terry M., Ph.D. via R-devel" <r-devel at r-project.org> ?????:

>   2.  Before calling model.frame(), insert my copy of strata into the
> calling chain coxenv <- new.env(parent= environment(formula))
>     assign("strata", survival::strata, envir= coxenv)
>     environment(formula) <- coxenv

<...>

> For ultimate safety, I am thinking of extending the above to all of
> the internal survival functions that might be used in a formula:
> Surv, strata, pspline, cluster, ratetable  (I think that_s all).   An
> intitial limited test looks okay, but before anything migrates to
> CRAN I am looking for any feedback.

What do you think of the following approach?

When changing the environment of the formula, construct the following
environment chain:

1. Top: your 'coxenv' environment with the special survival functions
2. Enclosing environment: list2env(data)
3. Enclosing^2 environment: original environment(formula)

Since the environment chain constructed by eval() when called by
model.frame() looks different (top: data -> enclosure:
environment(formula)), someone truly determined to shoot themselves in
the foot could still sneak a 'strata' function inside their 'data'
argument.

Having said that, what you are planning to implement may be already
reliable enough.

-- 
Best regards,
Ivan


