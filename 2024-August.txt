From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Aug  1 12:49:57 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 1 Aug 2024 12:49:57 +0200
Subject: [Rd] Question about regexp edge case
In-Reply-To: <20240729103757.11201601@Tarkus>
References: <497933d4-d8f5-4242-99aa-3c335d694ebd@gmail.com>
 <20240729103757.11201601@Tarkus>
Message-ID: <48ccdd83-47b0-4f06-b652-3e1e91117abf@gmail.com>


On 7/29/24 09:37, Ivan Krylov via R-devel wrote:
> ? Sun, 28 Jul 2024 20:02:21 -0400
> Duncan Murdoch <murdoch.duncan at gmail.com> ?????:
>
>> gsub("^([0-9]{,5}).*","\\1","123456789")
>> [1] "123456"
> This is in TRE itself: for "^([0-9]{,1})" tre_regexecb returns {.rm_so
> = 0, .rm_eo = 1}, matching "1", but for "^([0-9]{,2})" and above it
> returns an off-by-one result, {.rm_so = 0, .rm_eo = 3}.
>
> Compiling with TRE_DEBUG, I see it parsed correctly:
>
> catenation, sub 0, 0 tags
>    assertions: bol
>    iteration {-1, 2}, sub -1, 0 tags, greedy
>      literal (0, 9) (48, 57), pos 0, sub -1, 0 tags
>
> ...but after tre_expand_ast I see
>
> catenation, sub 0, 1 tags
>    assertions: bol
>    catenation, sub -1, 1 tags
>      tag 0
>      union, sub -1, 0 tags
>        literal empty
>        catenation, sub -1, 0 tags
>          literal (0, 9) (48, 57), pos 2, sub -1, 0 tags
>          union, sub -1, 0 tags
>            literal empty
>            catenation, sub -1, 0 tags
>              literal (0, 9) (48, 57), pos 1, sub -1, 0 tags
>              union, sub -1, 0 tags
>                literal empty
>                literal (0, 9) (48, 57), pos 0, sub -1, 0 tags
>
> ...which has one too many copies of "literal (0,9)". I think it's due
> to the expansion loop on line 942 of src/extra/tre/tre-compile.c being
>
> for (j = iter->min; j < iter->max; j++)
>
> ...where 'min' is -1 to denote no minimum. This is further confirmed by
> "{0,3}", "{1,3}", "{2,3}", "{3,3}" all working correctly.
>
> Neither TRE documentation [1] nor POSIX [2] specify the {,n} syntax:
> from my reading, it looks like if the upper boundary is specified, the
> lower boundary must be specified too. But if we do want to fix this, it
> will have to be a special case for iter->min == -1.

Thanks. It seems that TRE is now maintained again upstream, so it would 
be best to discuss this with TRE maintainers directly (if not already 
solved by https://github.com/laurikari/tre/pull/98).

The same applies to any other open TRE issues.

Best Tomas


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Aug  1 20:55:36 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 1 Aug 2024 14:55:36 -0400
Subject: [Rd] Question about regexp edge case
In-Reply-To: <48ccdd83-47b0-4f06-b652-3e1e91117abf@gmail.com>
References: <497933d4-d8f5-4242-99aa-3c335d694ebd@gmail.com>
 <20240729103757.11201601@Tarkus>
 <48ccdd83-47b0-4f06-b652-3e1e91117abf@gmail.com>
Message-ID: <8cfbc0a2-661a-40db-91e4-84af793c52e1@gmail.com>

Thanks Tomas.  Do note that my original post also mentioned a bug or doc 
error in the PCRE docs for this regexp:

>   - perl = TRUE does *not* give the documented result on at least one 
> system (which is "123456789", because "{,5}" is documented to not be a 
> quantifier, so it should only match the literal string "{,5}").

Duncan

On 2024-08-01 6:49 a.m., Tomas Kalibera wrote:
> 
> On 7/29/24 09:37, Ivan Krylov via R-devel wrote:
>> ? Sun, 28 Jul 2024 20:02:21 -0400
>> Duncan Murdoch <murdoch.duncan at gmail.com> ?????:
>>
>>> gsub("^([0-9]{,5}).*","\\1","123456789")
>>> [1] "123456"
>> This is in TRE itself: for "^([0-9]{,1})" tre_regexecb returns {.rm_so
>> = 0, .rm_eo = 1}, matching "1", but for "^([0-9]{,2})" and above it
>> returns an off-by-one result, {.rm_so = 0, .rm_eo = 3}.
>>
>> Compiling with TRE_DEBUG, I see it parsed correctly:
>>
>> catenation, sub 0, 0 tags
>>     assertions: bol
>>     iteration {-1, 2}, sub -1, 0 tags, greedy
>>       literal (0, 9) (48, 57), pos 0, sub -1, 0 tags
>>
>> ...but after tre_expand_ast I see
>>
>> catenation, sub 0, 1 tags
>>     assertions: bol
>>     catenation, sub -1, 1 tags
>>       tag 0
>>       union, sub -1, 0 tags
>>         literal empty
>>         catenation, sub -1, 0 tags
>>           literal (0, 9) (48, 57), pos 2, sub -1, 0 tags
>>           union, sub -1, 0 tags
>>             literal empty
>>             catenation, sub -1, 0 tags
>>               literal (0, 9) (48, 57), pos 1, sub -1, 0 tags
>>               union, sub -1, 0 tags
>>                 literal empty
>>                 literal (0, 9) (48, 57), pos 0, sub -1, 0 tags
>>
>> ...which has one too many copies of "literal (0,9)". I think it's due
>> to the expansion loop on line 942 of src/extra/tre/tre-compile.c being
>>
>> for (j = iter->min; j < iter->max; j++)
>>
>> ...where 'min' is -1 to denote no minimum. This is further confirmed by
>> "{0,3}", "{1,3}", "{2,3}", "{3,3}" all working correctly.
>>
>> Neither TRE documentation [1] nor POSIX [2] specify the {,n} syntax:
>> from my reading, it looks like if the upper boundary is specified, the
>> lower boundary must be specified too. But if we do want to fix this, it
>> will have to be a special case for iter->min == -1.
> 
> Thanks. It seems that TRE is now maintained again upstream, so it would
> be best to discuss this with TRE maintainers directly (if not already
> solved by https://github.com/laurikari/tre/pull/98).
> 
> The same applies to any other open TRE issues.
> 
> Best Tomas
>


From pd@|gd @end|ng |rom gm@||@com  Fri Aug  2 12:21:20 2024
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 2 Aug 2024 12:21:20 +0200
Subject: [Rd] R-patched on CRAN is R-4.3.3
In-Reply-To: <f50fcfef-86df-4ca8-9d83-20d472ed8aaf@gmail.com>
References: <CA+hbrhWeSLh+RhrC5FgRhbG396SNrCVbdsY0CfL4Ut387t896Q@mail.gmail.com>
 <f50fcfef-86df-4ca8-9d83-20d472ed8aaf@gmail.com>
Message-ID: <E09E33E1-D146-41FB-B7DF-6B9C96E631B1@gmail.com>

Apologies for not seeing this until now. The files on CRAN https://cran.r-project.org/src/base-prerelease/ contain R-patched versions that should be up to date. The Zurich R-patched seems to be 4.4.1 patched too now. 

The text in R-admin is a bit out of date (it predates nightly builds of tarballs on the machine that does the final releases), and so is the text on CRAN. We might change them to point to the CRAN directory as the primary source.

(Martin: Are there changes in the situation at Zurich that are relevant to this?) 

- Peter D.

> On 15 Jul 2024, at 09:56 , Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> 
> 
> On 7/15/24 07:08, Peter Langfelder wrote:
>> Hi all,
>> 
>> apologies if I missed something here. Just downloaded and compiled
>> R-patched from https://stat.ethz.ch/R/daily/ but it reports as R-4.3.3
>> (2024-04-09 r86895) -- "Angel Food Cake". The last dated R-patched is
>> from 2024-04-09, about 3 months old. Are R-patched not updated
>> anymore, am I looking at a wrong directory or even a wrong server? The
>> current R Installation and Administration manual
>> (https://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Getting-patched-and-development-versions)
>> suggests that the current R-patched should be where I looked for it:
>> 
>> A patched version of the current release, ?r-patched?, and the current
>> development version, ?r-devel?, are available as daily tarballs and
>> via access to the R Subversion repository. (For the two weeks prior to
>> the release of a minor (4.x.0) version, ?r-patched? tarballs may refer
>> to beta/release candidates of the upcoming release, the patched
>> version of the current release being available via Subversion.)
>> 
>> The tarballs are available from https://stat.ethz.ch/R/daily/.
>> Download R-patched.tar.gz or R-devel.tar.gz (or the .tar.bz2 versions)
>> and unpack as described in the previous section. They are built in
>> exactly the same way as distributions of R releases.
> 
> Before this gets resolved, you can get the latest version of R-patched from svn:
> 
> https://svn.r-project.org/R/branches/R-4-4-branch
> 
> (and the current R release from https://cran.r-project.org/src/base/R-4/R-4.4.1.tar.gz)
> 
> Tomas
> 
>> 
>> Thanks,
>> 
>> Peter
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From rob@tee|e @end|ng |rom y@hoo@com  Tue Aug  6 16:19:25 2024
From: rob@tee|e @end|ng |rom y@hoo@com (Rob Steele)
Date: Tue, 6 Aug 2024 10:19:25 -0400
Subject: [Rd] Another issue using multi-processing linear algebra libraries
References: <BE21EBCB-E162-4E1A-BC7A-13779832D311.ref@yahoo.com>
Message-ID: <BE21EBCB-E162-4E1A-BC7A-13779832D311@yahoo.com>

From the R Installation and Admin manual:

	"There is a tendency for re-distributors of R to use ?enhanced? linear algebra libraries without explaining their downsides.?

There?s a downside not mentioned in the manual that caught and baffled me for a while. I was using all 64 cores of an AWS instance via parallel::mclapply() and doing matrix multiplications in the parallelized function. If the matrices were big enough the linked BLAS or LAPACK would try to use all 64 cores for each multiplication, which meant 64^2 processes or threads in some combination and that was the end of all useful work. I worked around the problem by rewriting the matrix multiply as ?colSums(x * t(y))?. It also worked to build R from source, which I guess uses the built-in BLAS and LAPACK.

Would it make sense to add a parameter somewhere, to mclapply(), say, telling R to not use multiprocessing libraries? Does R even know whether a linked library is doing multi-processing? Does R build its own BLAS and LAPACK if its also linking external ones?

Thanks,
Rob
	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Tue Aug  6 17:09:05 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Tue, 6 Aug 2024 18:09:05 +0300
Subject: [Rd] 
 Another issue using multi-processing linear algebra libraries
In-Reply-To: <BE21EBCB-E162-4E1A-BC7A-13779832D311@yahoo.com>
References: <BE21EBCB-E162-4E1A-BC7A-13779832D311.ref@yahoo.com>
 <BE21EBCB-E162-4E1A-BC7A-13779832D311@yahoo.com>
Message-ID: <20240806180905.2b4dab31@arachnoid>

? Tue, 6 Aug 2024 10:19:25 -0400
Rob Steele via R-devel <r-devel at r-project.org> ?????:

> Would it make sense to add a parameter somewhere, to mclapply(), say,
> telling R to not use multiprocessing libraries?

It would be great if we had a way to limit all kinds of multiprocessing
(child processes, OpenMP threads, pthreads, forks, MPI, PVM, 'parallel'
clusters, <insert many more methods here>) in a single setting, but
there is currently no such setting, and it may be impossible to
implement. Particularly problematic may be nested parallellism:
sometimes desirable (e.g. 4-machine cluster, each machine in it using
OpenMP threads), sometimes undesired (e.g. your case). A single setting
is probably far from enough.

> Does R even know whether a linked library is doing multi-processing?

Unfortunately, no, there is no standard interface for that. Best I can
recommend is to link your R installation with FlexiBLAS and then use the
'flexiblas' CRAN package to talk to it.

> Does R build its own BLAS and LAPACK if its also linking external
> ones?

I think it doesn't.

-- 
Best regards,
Ivan


From d|pter|x@w@ng @end|ng |rom gm@||@com  Wed Aug  7 13:47:38 2024
From: d|pter|x@w@ng @end|ng |rom gm@||@com (Dipterix Wang)
Date: Wed, 7 Aug 2024 07:47:38 -0400
Subject: [Rd] 
 Another issue using multi-processing linear algebra libraries
In-Reply-To: <mailman.54426.5.1723024802.5780.r-devel@r-project.org>
References: <mailman.54426.5.1723024802.5780.r-devel@r-project.org>
Message-ID: <8A410D3E-CE79-4151-99AC-9F7D574B31A4@gmail.com>

I also have this questions for this. I wonder if R initiates a system environment or options to instruct the packages on the number of cores to use?

It doesn't have to be mandatory for now, but at least package maintainers can have shared consensus and start to adopt this humble settings rather than abusing parallel::detectCores() to max out the number of threads by default. 

> On Aug 7, 2024, at 6:00?AM, r-devel-request at r-project.org wrote:
> 
>> Would it make sense to add a parameter somewhere, to mclapply(), say,
>> telling R to not use multiprocessing libraries?
> 
> It would be great if we had a way to limit all kinds of multiprocessing
> (child processes, OpenMP threads, pthreads, forks, MPI, PVM, 'parallel'
> clusters, <insert many more methods here>) in a single setting, but
> there is currently no such setting, and it may be impossible to
> implement. Particularly problematic may be nested parallellism:
> sometimes desirable (e.g. 4-machine cluster, each machine in it using
> OpenMP threads), sometimes undesired (e.g. your case). A single setting
> is probably far from enough.
> 
>> Does R even know whether a linked library is doing multi-processing?
> 
> Unfortunately, no, there is no standard interface for that. Best I can
> recommend is to link your R installation with FlexiBLAS and then use the
> 'flexiblas' CRAN package to talk to it.


	[[alternative HTML version deleted]]


From merv|n@|@n@|er @end|ng |rom br|c@ku@dk  Thu Aug  8 10:45:40 2024
From: merv|n@|@n@|er @end|ng |rom br|c@ku@dk (Mervin Milton Fansler Iv)
Date: Thu, 8 Aug 2024 08:45:40 +0000
Subject: [Rd] Another issue using multi-processing linear algebra libraries
Message-ID: <D4ACBE0A-2DF6-4B07-B787-EC1F8FF29965@contoso.com>

> "There?s a downside not mentioned in the manual that caught and baffled me for a while. I was using all 64 cores of an AWS instance via parallel::mclapply() and doing matrix multiplications in the parallelized function. If the matrices were big enough the linked BLAS or LAPACK would try to use all 64 cores for each multiplication, which meant 64^2 processes or threads in some combination and that was the end of all useful work. I worked around the problem by rewriting the matrix multiply as ?colSums(x * t(y))?. It also worked to build R from source, which I guess uses the built-in BLAS and LAPACK."

I believe one can control the number of BLAS threads via the `RhpcBLASctl` package: https://cran.r-project.org/package=RhpcBLASctl I?ve definitely used it in the other direction, when `betareg` was *not* multiprocessing. https://stackoverflow.com/a/66540693/570918

> "Does R build its own BLAS and LAPACK if it's also linking external ones?"

No, it will not. On Conda Forge, there was even some trickery on certain platforms (osx-arm64) where external BLAS/LAPACK were used, but symlinks were used to fill in the typical R delivered ones (Rblas.dylib, Rlapack.dylib) to allow previously built packages using rpath links to support the swap.

BTW, one can easily select the Conda Forge BLAS/LAPACK implementation. It doesn't provide the R-vendored ones, but the reference standard is Netlib, e.g., `conda install 'blas=*=netlib'`. But that's also the slowest by all metrics and on all platforms.

	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Thu Aug  8 12:43:08 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Thu, 8 Aug 2024 13:43:08 +0300
Subject: [Rd] 
 Another issue using multi-processing linear algebra libraries
In-Reply-To: <8A410D3E-CE79-4151-99AC-9F7D574B31A4@gmail.com>
References: <mailman.54426.5.1723024802.5780.r-devel@r-project.org>
 <8A410D3E-CE79-4151-99AC-9F7D574B31A4@gmail.com>
Message-ID: <20240808134308.56ca8be5@arachnoid>

? Wed, 7 Aug 2024 07:47:38 -0400
Dipterix Wang <dipterix.wang at gmail.com> ?????:

> I wonder if R initiates a system environment or options to instruct
> the packages on the number of cores to use?

A lot of thought and experience with various HPC systems went into
availableCores(), a function from the zero-dependency 'parallelly'
package by Henrik Bengtsson:
https://search.r-project.org/CRAN/refmans/parallelly/html/availableCores.html
If you cannot accept a pre-created cluster object or 'future' plan or
'BiocParallel' parameters or the number of OpenMP threads from the
user, this must be a safer default than parallel::detectCores().

Building such a limiter into R poses a number of problems. Here is a
summary from a previous discussion on R-pkg-devel [1] with wise
contributions from Dirk Eddelbuettel, Reed A. Cartwright, Vladimir
Dergachev, and Andrew Robbins.

 - R is responsible for the BLAS it is linked to and therefore must
   actively manage the BLAS threads when the user sets the thread
   limit. This requires writing BLAS-specific code to talk to the
   libraries, like done in FlexiBLAS and the RhpcBLASctl package. Some
   BLASes (like ATLAS) only have a compile-time thread limit. R should
   somehow give all threads to BLAS by default but take them away when
   some other form of parallelism is requested.

 - Should R be managing the OpenMP thread limit by itself? If not,
   that's a lot of extra work for every OpenMP-using package developer.
   If yes, R is now responsible for initialising OpenMP.

 - Managing the BLAS and OpenMP thread limits is already a hard problem
   because some BLASes may or may not be following the OpenMP thread
   limits.

 - What if two packages both consult the thread limit and create N^2
   processes as a result of one calling the other? Dividing a single
   computer between BLAS threads, OpenMP threads, child processes and
   their threads needs a very reliable global inter-process semaphore.
   R would have to grow a jobserver like in GNU Make, a separate
   process because the main R thread will be blocked waiting for the
   computation result, especially if we want to automatically recover
   job slots from crashed processes. That's probably not impossible,
   but involves a lot of OS-specific code.

 - What happens with the thread limit when starting remote R processes?
   It's best to avoid having to set it manually. If multiple people
   unknowingly start R on a shared server, how to avoid the R instances
   competing for the CPU (or the ownership of the semaphore)?

 - It will take a lot of political power to actually make this scheme
   work. The limiter can only be cooperative (unless you override the
   clone() syscall and make it fail? I expect everything to crash after
   that), so it takes one piece of software to unknowingly ignore the
   limit and break everything.

-- 
Best regards,
Ivan

[1] https://stat.ethz.ch/pipermail/r-package-devel/2023q4/009956.html


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Aug  9 10:28:19 2024
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 9 Aug 2024 10:28:19 +0200
Subject: [Rd] R-patched on CRAN is R-4.3.3
In-Reply-To: <E09E33E1-D146-41FB-B7DF-6B9C96E631B1@gmail.com>
References: <CA+hbrhWeSLh+RhrC5FgRhbG396SNrCVbdsY0CfL4Ut387t896Q@mail.gmail.com>
 <f50fcfef-86df-4ca8-9d83-20d472ed8aaf@gmail.com>
 <E09E33E1-D146-41FB-B7DF-6B9C96E631B1@gmail.com>
Message-ID: <CABtg=K=JASqeG8RfhHz6bP0KX-UO-DihzL5WWKGKEgkQxXbihw@mail.gmail.com>

Possibly related to this, it seems that
https://cran.r-project.org/src/base-prerelease/R-latest.tar.gz
is not available any more.

This file was very convenient, because it pointed to R-RC, R-beta, R-alpha
or R-patched, as appropriate.

Our nightly "next version of R" builds [1] depend on it. Do you think
you can still create this file or link?

Thank you,
Gabor

[1] https://github.com/r-hub/r-builds/actions/runs/10312982067

On Fri, Aug 2, 2024 at 12:21?PM peter dalgaard <pdalgd at gmail.com> wrote:
>
> Apologies for not seeing this until now. The files on CRAN https://cran.r-project.org/src/base-prerelease/ contain R-patched versions that should be up to date. The Zurich R-patched seems to be 4.4.1 patched too now.
>
> The text in R-admin is a bit out of date (it predates nightly builds of tarballs on the machine that does the final releases), and so is the text on CRAN. We might change them to point to the CRAN directory as the primary source.
>
> (Martin: Are there changes in the situation at Zurich that are relevant to this?)
>
> - Peter D.
>
> > On 15 Jul 2024, at 09:56 , Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >
> >
> > On 7/15/24 07:08, Peter Langfelder wrote:
> >> Hi all,
> >>
> >> apologies if I missed something here. Just downloaded and compiled
> >> R-patched from https://stat.ethz.ch/R/daily/ but it reports as R-4.3.3
> >> (2024-04-09 r86895) -- "Angel Food Cake". The last dated R-patched is
> >> from 2024-04-09, about 3 months old. Are R-patched not updated
> >> anymore, am I looking at a wrong directory or even a wrong server? The
> >> current R Installation and Administration manual
> >> (https://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Getting-patched-and-development-versions)
> >> suggests that the current R-patched should be where I looked for it:
> >>
> >> A patched version of the current release, ?r-patched?, and the current
> >> development version, ?r-devel?, are available as daily tarballs and
> >> via access to the R Subversion repository. (For the two weeks prior to
> >> the release of a minor (4.x.0) version, ?r-patched? tarballs may refer
> >> to beta/release candidates of the upcoming release, the patched
> >> version of the current release being available via Subversion.)
> >>
> >> The tarballs are available from https://stat.ethz.ch/R/daily/.
> >> Download R-patched.tar.gz or R-devel.tar.gz (or the .tar.bz2 versions)
> >> and unpack as described in the previous section. They are built in
> >> exactly the same way as distributions of R releases.
> >
> > Before this gets resolved, you can get the latest version of R-patched from svn:
> >
> > https://svn.r-project.org/R/branches/R-4-4-branch
> >
> > (and the current R release from https://cran.r-project.org/src/base/R-4/R-4.4.1.tar.gz)
> >
> > Tomas
> >
> >>
> >> Thanks,
> >>
> >> Peter
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |kry|ov @end|ng |rom d|@root@org  Fri Aug  9 10:33:34 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Fri, 9 Aug 2024 11:33:34 +0300
Subject: [Rd] R-patched on CRAN is R-4.3.3
In-Reply-To: <CABtg=K=JASqeG8RfhHz6bP0KX-UO-DihzL5WWKGKEgkQxXbihw@mail.gmail.com>
References: <CA+hbrhWeSLh+RhrC5FgRhbG396SNrCVbdsY0CfL4Ut387t896Q@mail.gmail.com>
 <f50fcfef-86df-4ca8-9d83-20d472ed8aaf@gmail.com>
 <E09E33E1-D146-41FB-B7DF-6B9C96E631B1@gmail.com>
 <CABtg=K=JASqeG8RfhHz6bP0KX-UO-DihzL5WWKGKEgkQxXbihw@mail.gmail.com>
Message-ID: <20240809113334.58316907@Tarkus>

? Fri, 9 Aug 2024 10:28:19 +0200
G?bor Cs?rdi <csardi.gabor at gmail.com> ?????:

> Possibly related to this, it seems that
> https://cran.r-project.org/src/base-prerelease/R-latest.tar.gz
> is not available any more.

I think it's now R-patched.tar.?z:
https://github.com/r-devel/r-dev-web/commit/8e146a769206924ec60ae08e2841910ac8e23083

-- 
Best regards,
Ivan


From pd@|gd @end|ng |rom gm@||@com  Fri Aug  9 10:41:18 2024
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 9 Aug 2024 10:41:18 +0200
Subject: [Rd] R-patched on CRAN is R-4.3.3
In-Reply-To: <20240809113334.58316907@Tarkus>
References: <CA+hbrhWeSLh+RhrC5FgRhbG396SNrCVbdsY0CfL4Ut387t896Q@mail.gmail.com>
 <f50fcfef-86df-4ca8-9d83-20d472ed8aaf@gmail.com>
 <E09E33E1-D146-41FB-B7DF-6B9C96E631B1@gmail.com>
 <CABtg=K=JASqeG8RfhHz6bP0KX-UO-DihzL5WWKGKEgkQxXbihw@mail.gmail.com>
 <20240809113334.58316907@Tarkus>
Message-ID: <D5EA39C5-4254-49B5-94EF-AC11AA0FE91B@gmail.com>

Exactly. I was in the process of getting the CRAN texts to point at base-prerelease, rather than Martin's versions i Zurich and decided that his names were better than mine. "R-latest" makes better sense for the actual releases over in src/base.

-pd 

> On 9 Aug 2024, at 10:33 , Ivan Krylov via R-devel <r-devel at r-project.org> wrote:
> 
> ? Fri, 9 Aug 2024 10:28:19 +0200
> G?bor Cs?rdi <csardi.gabor at gmail.com> ?????:
> 
>> Possibly related to this, it seems that
>> https://cran.r-project.org/src/base-prerelease/R-latest.tar.gz
>> is not available any more.
> 
> I think it's now R-patched.tar.?z:
> https://github.com/r-devel/r-dev-web/commit/8e146a769206924ec60ae08e2841910ac8e23083
> 
> -- 
> Best regards,
> Ivan
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Aug  9 10:44:31 2024
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 9 Aug 2024 10:44:31 +0200
Subject: [Rd] R-patched on CRAN is R-4.3.3
In-Reply-To: <D5EA39C5-4254-49B5-94EF-AC11AA0FE91B@gmail.com>
References: <CA+hbrhWeSLh+RhrC5FgRhbG396SNrCVbdsY0CfL4Ut387t896Q@mail.gmail.com>
 <f50fcfef-86df-4ca8-9d83-20d472ed8aaf@gmail.com>
 <E09E33E1-D146-41FB-B7DF-6B9C96E631B1@gmail.com>
 <CABtg=K=JASqeG8RfhHz6bP0KX-UO-DihzL5WWKGKEgkQxXbihw@mail.gmail.com>
 <20240809113334.58316907@Tarkus>
 <D5EA39C5-4254-49B5-94EF-AC11AA0FE91B@gmail.com>
Message-ID: <CABtg=Km1p4PTYoAZhQQkREGzwNa0wbeet_Cu=S7_tVBSi+8qPA@mail.gmail.com>

Thanks!

So, to make sure I got this right, when the time of beta, alpha, RC
comes, they'll also have a link called R-patched.tar.gz?

Thanks again!
Gabor

On Fri, Aug 9, 2024 at 10:41?AM peter dalgaard <pdalgd at gmail.com> wrote:
>
> Exactly. I was in the process of getting the CRAN texts to point at base-prerelease, rather than Martin's versions i Zurich and decided that his names were better than mine. "R-latest" makes better sense for the actual releases over in src/base.
>
> -pd
>
> > On 9 Aug 2024, at 10:33 , Ivan Krylov via R-devel <r-devel at r-project.org> wrote:
> >
> > ? Fri, 9 Aug 2024 10:28:19 +0200
> > G?bor Cs?rdi <csardi.gabor at gmail.com> ?????:
> >
> >> Possibly related to this, it seems that
> >> https://cran.r-project.org/src/base-prerelease/R-latest.tar.gz
> >> is not available any more.
> >
> > I think it's now R-patched.tar.?z:
> > https://github.com/r-devel/r-dev-web/commit/8e146a769206924ec60ae08e2841910ac8e23083
> >
> > --
> > Best regards,
> > Ivan
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Aug  9 11:01:59 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 9 Aug 2024 11:01:59 +0200
Subject: [Rd] Question about regexp edge case
In-Reply-To: <8cfbc0a2-661a-40db-91e4-84af793c52e1@gmail.com>
References: <497933d4-d8f5-4242-99aa-3c335d694ebd@gmail.com>
 <20240729103757.11201601@Tarkus>
 <48ccdd83-47b0-4f06-b652-3e1e91117abf@gmail.com>
 <8cfbc0a2-661a-40db-91e4-84af793c52e1@gmail.com>
Message-ID: <aa7749fb-dc8b-4cf4-bfc2-669a42ae57fb@gmail.com>


On 8/1/24 20:55, Duncan Murdoch wrote:
> Thanks Tomas.? Do note that my original post also mentioned a bug or 
> doc error in the PCRE docs for this regexp:
>
>> ? - perl = TRUE does *not* give the documented result on at least one 
>> system (which is "123456789", because "{,5}" is documented to not be 
>> a quantifier, so it should only match the literal string "{,5}").

This is a change in documented behavior in PCRE. PCRE2 10.43 
(share/man/man3/pcre2pattern.3) says:

"If the first number is omitted, the lower limit is taken as zero; in 
this case the upper limit must be present. X{,4} is interpreted as 
X{0,4}. In earlier versions such a sequence was not interpreted as a 
quantifier. Other regular expression engines may behave either way."

And the changelog:

"29. Perl 5.34.0 changed the meaning of (for example) {,3} which did not 
used to be treated as a quantifier. Now it is interpreted as {0,3} and 
PCRE2 has changed to match. Note that {,} is still not a quantifier."

Sadly the previous behavior was also documented in pcre2pattern.3:

"For example, {,6} is not a quantifier, but a literal string of four 
characters"

I've confirmed with R built with PCRE2 10.42, 10.43 and 10.44. In 
practice, users would most likely see the new behavior on Windows, where 
Rtools44 has PCRE2 10.43.

The R documentation (?regex) refers to the PCRE2 documentation for 
"complete details", mentioning how to find out what is the version of 
PCRE(2) used.? I've now added a warning about that PCRE behavior may 
change between versions, with the {,m} as an example. I don't think we 
can do much more - I don't think we should be replicating the PCRE 
documentation/changelog - but we could add more examples, if any 
important appear. Also, we don't want to write R programs that depend on 
concrete versions of PCRE.

It is a good thing that ?regex doesn't document "{,m}", because it 
cannot be used reliably/portably. One should use some of the documented 
forms, instead, i.e. "{0,m}". Indeed there is the problem of how to use 
only the documented subset of behavior (in ?regex), because one also 
needs to avoid accidentally running into undocumented expressions with 
special meaning, like in this case. But perhaps still authors could try 
to defensively avoid risky expressions in literals in patterns, such as 
those involving "{}" or otherwise similar to documented expressions with 
a special meaning.

Best
Tomas


>
> Duncan
>
> On 2024-08-01 6:49 a.m., Tomas Kalibera wrote:
>>
>> On 7/29/24 09:37, Ivan Krylov via R-devel wrote:
>>> ? Sun, 28 Jul 2024 20:02:21 -0400
>>> Duncan Murdoch <murdoch.duncan at gmail.com> ?????:
>>>
>>>> gsub("^([0-9]{,5}).*","\\1","123456789")
>>>> [1] "123456"
>>> This is in TRE itself: for "^([0-9]{,1})" tre_regexecb returns {.rm_so
>>> = 0, .rm_eo = 1}, matching "1", but for "^([0-9]{,2})" and above it
>>> returns an off-by-one result, {.rm_so = 0, .rm_eo = 3}.
>>>
>>> Compiling with TRE_DEBUG, I see it parsed correctly:
>>>
>>> catenation, sub 0, 0 tags
>>> ??? assertions: bol
>>> ??? iteration {-1, 2}, sub -1, 0 tags, greedy
>>> ????? literal (0, 9) (48, 57), pos 0, sub -1, 0 tags
>>>
>>> ...but after tre_expand_ast I see
>>>
>>> catenation, sub 0, 1 tags
>>> ??? assertions: bol
>>> ??? catenation, sub -1, 1 tags
>>> ????? tag 0
>>> ????? union, sub -1, 0 tags
>>> ??????? literal empty
>>> ??????? catenation, sub -1, 0 tags
>>> ????????? literal (0, 9) (48, 57), pos 2, sub -1, 0 tags
>>> ????????? union, sub -1, 0 tags
>>> ??????????? literal empty
>>> ??????????? catenation, sub -1, 0 tags
>>> ????????????? literal (0, 9) (48, 57), pos 1, sub -1, 0 tags
>>> ????????????? union, sub -1, 0 tags
>>> ??????????????? literal empty
>>> ??????????????? literal (0, 9) (48, 57), pos 0, sub -1, 0 tags
>>>
>>> ...which has one too many copies of "literal (0,9)". I think it's due
>>> to the expansion loop on line 942 of src/extra/tre/tre-compile.c being
>>>
>>> for (j = iter->min; j < iter->max; j++)
>>>
>>> ...where 'min' is -1 to denote no minimum. This is further confirmed by
>>> "{0,3}", "{1,3}", "{2,3}", "{3,3}" all working correctly.
>>>
>>> Neither TRE documentation [1] nor POSIX [2] specify the {,n} syntax:
>>> from my reading, it looks like if the upper boundary is specified, the
>>> lower boundary must be specified too. But if we do want to fix this, it
>>> will have to be a special case for iter->min == -1.
>>
>> Thanks. It seems that TRE is now maintained again upstream, so it would
>> be best to discuss this with TRE maintainers directly (if not already
>> solved by https://github.com/laurikari/tre/pull/98).
>>
>> The same applies to any other open TRE issues.
>>
>> Best Tomas
>>
>


From pd@|gd @end|ng |rom gm@||@com  Fri Aug  9 11:13:57 2024
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 9 Aug 2024 11:13:57 +0200
Subject: [Rd] R-patched on CRAN is R-4.3.3
In-Reply-To: <CABtg=Km1p4PTYoAZhQQkREGzwNa0wbeet_Cu=S7_tVBSi+8qPA@mail.gmail.com>
References: <CA+hbrhWeSLh+RhrC5FgRhbG396SNrCVbdsY0CfL4Ut387t896Q@mail.gmail.com>
 <f50fcfef-86df-4ca8-9d83-20d472ed8aaf@gmail.com>
 <E09E33E1-D146-41FB-B7DF-6B9C96E631B1@gmail.com>
 <CABtg=K=JASqeG8RfhHz6bP0KX-UO-DihzL5WWKGKEgkQxXbihw@mail.gmail.com>
 <20240809113334.58316907@Tarkus>
 <D5EA39C5-4254-49B5-94EF-AC11AA0FE91B@gmail.com>
 <CABtg=Km1p4PTYoAZhQQkREGzwNa0wbeet_Cu=S7_tVBSi+8qPA@mail.gmail.com>
Message-ID: <E4971186-073E-414B-A052-A53BA0D89A83@gmail.com>

Yep. (Perhaps slightly unfortunate, but a varying name would be, um, counterproductive.)

-pd

> On 9 Aug 2024, at 10:44 , G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> Thanks!
> 
> So, to make sure I got this right, when the time of beta, alpha, RC
> comes, they'll also have a link called R-patched.tar.gz?
> 
> Thanks again!
> Gabor
> 
> On Fri, Aug 9, 2024 at 10:41?AM peter dalgaard <pdalgd at gmail.com> wrote:
>> 
>> Exactly. I was in the process of getting the CRAN texts to point at base-prerelease, rather than Martin's versions i Zurich and decided that his names were better than mine. "R-latest" makes better sense for the actual releases over in src/base.
>> 
>> -pd
>> 
>>> On 9 Aug 2024, at 10:33 , Ivan Krylov via R-devel <r-devel at r-project.org> wrote:
>>> 
>>> ? Fri, 9 Aug 2024 10:28:19 +0200
>>> G?bor Cs?rdi <csardi.gabor at gmail.com> ?????:
>>> 
>>>> Possibly related to this, it seems that
>>>> https://cran.r-project.org/src/base-prerelease/R-latest.tar.gz
>>>> is not available any more.
>>> 
>>> I think it's now R-patched.tar.?z:
>>> https://github.com/r-devel/r-dev-web/commit/8e146a769206924ec60ae08e2841910ac8e23083
>>> 
>>> --
>>> Best regards,
>>> Ivan
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> --
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Aug  9 11:44:32 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 9 Aug 2024 05:44:32 -0400
Subject: [Rd] Question about regexp edge case
In-Reply-To: <aa7749fb-dc8b-4cf4-bfc2-669a42ae57fb@gmail.com>
References: <497933d4-d8f5-4242-99aa-3c335d694ebd@gmail.com>
 <20240729103757.11201601@Tarkus>
 <48ccdd83-47b0-4f06-b652-3e1e91117abf@gmail.com>
 <8cfbc0a2-661a-40db-91e4-84af793c52e1@gmail.com>
 <aa7749fb-dc8b-4cf4-bfc2-669a42ae57fb@gmail.com>
Message-ID: <606008b1-4969-4d73-80d2-86b7f57d9f81@gmail.com>

Thanks!  I think your suggested additions to the docs are perfect.

Duncan Murdoch

On 2024-08-09 5:01 a.m., Tomas Kalibera wrote:
> 
> On 8/1/24 20:55, Duncan Murdoch wrote:
>> Thanks Tomas.? Do note that my original post also mentioned a bug or
>> doc error in the PCRE docs for this regexp:
>>
>>>  ? - perl = TRUE does *not* give the documented result on at least one
>>> system (which is "123456789", because "{,5}" is documented to not be
>>> a quantifier, so it should only match the literal string "{,5}").
> 
> This is a change in documented behavior in PCRE. PCRE2 10.43
> (share/man/man3/pcre2pattern.3) says:
> 
> "If the first number is omitted, the lower limit is taken as zero; in
> this case the upper limit must be present. X{,4} is interpreted as
> X{0,4}. In earlier versions such a sequence was not interpreted as a
> quantifier. Other regular expression engines may behave either way."
> 
> And the changelog:
> 
> "29. Perl 5.34.0 changed the meaning of (for example) {,3} which did not
> used to be treated as a quantifier. Now it is interpreted as {0,3} and
> PCRE2 has changed to match. Note that {,} is still not a quantifier."
> 
> Sadly the previous behavior was also documented in pcre2pattern.3:
> 
> "For example, {,6} is not a quantifier, but a literal string of four
> characters"
> 
> I've confirmed with R built with PCRE2 10.42, 10.43 and 10.44. In
> practice, users would most likely see the new behavior on Windows, where
> Rtools44 has PCRE2 10.43.
> 
> The R documentation (?regex) refers to the PCRE2 documentation for
> "complete details", mentioning how to find out what is the version of
> PCRE(2) used.? I've now added a warning about that PCRE behavior may
> change between versions, with the {,m} as an example. I don't think we
> can do much more - I don't think we should be replicating the PCRE
> documentation/changelog - but we could add more examples, if any
> important appear. Also, we don't want to write R programs that depend on
> concrete versions of PCRE.
> 
> It is a good thing that ?regex doesn't document "{,m}", because it
> cannot be used reliably/portably. One should use some of the documented
> forms, instead, i.e. "{0,m}". Indeed there is the problem of how to use
> only the documented subset of behavior (in ?regex), because one also
> needs to avoid accidentally running into undocumented expressions with
> special meaning, like in this case. But perhaps still authors could try
> to defensively avoid risky expressions in literals in patterns, such as
> those involving "{}" or otherwise similar to documented expressions with
> a special meaning.
> 
> Best
> Tomas
> 
> 
>>
>> Duncan
>>
>> On 2024-08-01 6:49 a.m., Tomas Kalibera wrote:
>>>
>>> On 7/29/24 09:37, Ivan Krylov via R-devel wrote:
>>>> ? Sun, 28 Jul 2024 20:02:21 -0400
>>>> Duncan Murdoch <murdoch.duncan at gmail.com> ?????:
>>>>
>>>>> gsub("^([0-9]{,5}).*","\\1","123456789")
>>>>> [1] "123456"
>>>> This is in TRE itself: for "^([0-9]{,1})" tre_regexecb returns {.rm_so
>>>> = 0, .rm_eo = 1}, matching "1", but for "^([0-9]{,2})" and above it
>>>> returns an off-by-one result, {.rm_so = 0, .rm_eo = 3}.
>>>>
>>>> Compiling with TRE_DEBUG, I see it parsed correctly:
>>>>
>>>> catenation, sub 0, 0 tags
>>>>  ??? assertions: bol
>>>>  ??? iteration {-1, 2}, sub -1, 0 tags, greedy
>>>>  ????? literal (0, 9) (48, 57), pos 0, sub -1, 0 tags
>>>>
>>>> ...but after tre_expand_ast I see
>>>>
>>>> catenation, sub 0, 1 tags
>>>>  ??? assertions: bol
>>>>  ??? catenation, sub -1, 1 tags
>>>>  ????? tag 0
>>>>  ????? union, sub -1, 0 tags
>>>>  ??????? literal empty
>>>>  ??????? catenation, sub -1, 0 tags
>>>>  ????????? literal (0, 9) (48, 57), pos 2, sub -1, 0 tags
>>>>  ????????? union, sub -1, 0 tags
>>>>  ??????????? literal empty
>>>>  ??????????? catenation, sub -1, 0 tags
>>>>  ????????????? literal (0, 9) (48, 57), pos 1, sub -1, 0 tags
>>>>  ????????????? union, sub -1, 0 tags
>>>>  ??????????????? literal empty
>>>>  ??????????????? literal (0, 9) (48, 57), pos 0, sub -1, 0 tags
>>>>
>>>> ...which has one too many copies of "literal (0,9)". I think it's due
>>>> to the expansion loop on line 942 of src/extra/tre/tre-compile.c being
>>>>
>>>> for (j = iter->min; j < iter->max; j++)
>>>>
>>>> ...where 'min' is -1 to denote no minimum. This is further confirmed by
>>>> "{0,3}", "{1,3}", "{2,3}", "{3,3}" all working correctly.
>>>>
>>>> Neither TRE documentation [1] nor POSIX [2] specify the {,n} syntax:
>>>> from my reading, it looks like if the upper boundary is specified, the
>>>> lower boundary must be specified too. But if we do want to fix this, it
>>>> will have to be a special case for iter->min == -1.
>>>
>>> Thanks. It seems that TRE is now maintained again upstream, so it would
>>> be best to discuss this with TRE maintainers directly (if not already
>>> solved by https://github.com/laurikari/tre/pull/98).
>>>
>>> The same applies to any other open TRE issues.
>>>
>>> Best Tomas
>>>
>>


From Ben@Engber@ @end|ng |rom Be-Log|c@|@n|  Thu Aug 15 14:57:13 2024
From: Ben@Engber@ @end|ng |rom Be-Log|c@|@n| (Ben Engbers)
Date: Thu, 15 Aug 2024 14:57:13 +0200
Subject: [Rd] Certificates are not trusted
Message-ID: <37b7e0a7-1080-4a20-a60d-35910a7752fc@Be-Logical.nl>

Hi,

After returning home from holiday I tried to update my Fedora 
installation with the command 'sudo dnf update -y'.

This command now terminates with the following error:
error: Verifying a signature using certificate 
3124D2EF76DA4D972F6BE4AC9D60CBB71A3B4456 (iucar_cran (None) 
<iucar#cran at copr.fedorahosted.org>):
   1. Certificiate 9D60CBB71A3B4456 invalid: certificate is not alive
       because: The primary key is not live
       because: Expired on 2024-08-13T00:46:08Z
   2. Key 9D60CBB71A3B4456 invalid: key is not alive
       because: The primary key is not live
       because: Expired on 2024-08-13T00:46:08Z
error: Verifying a signature using certificate 
3124D2EF76DA4D972F6BE4AC9D60CBB71A3B4456 (iucar_cran (None) 
<iucar#cran at copr.fedorahosted.org>):
   1. Certificiate 9D60CBB71A3B4456 invalid: certificate is not alive
       because: The primary key is not live
       because: Expired on 2024-08-13T00:46:08Z
   2. Key 9D60CBB71A3B4456 invalid: key is not alive
       because: The primary key is not live
       because: Expired on 2024-08-13T00:46:08Z
Copr repo for cran owned by iucar 
 
                       11 kB/s | 985  B     00:00
GPG-sleutel op 
https://download.copr.fedorainfracloud.org/results/iucar/cran/pubkey.gpg 
(0x1A3B4456) is al ge?nstalleerd
error: Verifying a signature using certificate 
3124D2EF76DA4D972F6BE4AC9D60CBB71A3B4456 (iucar_cran (None) 
<iucar#cran at copr.fedorahosted.org>):
   1. Certificiate 9D60CBB71A3B4456 invalid: certificate is not alive
       because: The primary key is not live
       because: Expired on 2024-08-13T00:46:08Z
   2. Key 9D60CBB71A3B4456 invalid: key is not alive
       because: The primary key is not live
       because: Expired on 2024-08-13T00:46:08Z
error: Verifying a signature using certificate 
3124D2EF76DA4D972F6BE4AC9D60CBB71A3B4456 (iucar_cran (None) 
<iucar#cran at copr.fedorahosted.org>):
   1. Certificiate 9D60CBB71A3B4456 invalid: certificate is not alive
       because: The primary key is not live
       because: Expired on 2024-08-13T00:46:08Z
   2. Key 9D60CBB71A3B4456 invalid: key is not alive
       because: The primary key is not live
       because: Expired on 2024-08-13T00:46:08Z
error: Verifying a signature using certificate 
3124D2EF76DA4D972F6BE4AC9D60CBB71A3B4456 (iucar_cran (None) 
<iucar#cran at copr.fedorahosted.org>):
   1. Certificiate 9D60CBB71A3B4456 invalid: certificate is not alive
       because: The primary key is not live
       because: Expired on 2024-08-13T00:46:08Z
   2. Key 9D60CBB71A3B4456 invalid: key is not alive
       because: The primary key is not live
       because: Expired on 2024-08-13T00:46:08Z
error: Verifying a signature using certificate 
3124D2EF76DA4D972F6BE4AC9D60CBB71A3B4456 (iucar_cran (None) 
<iucar#cran at copr.fedorahosted.org>):
   1. Certificiate 9D60CBB71A3B4456 invalid: certificate is not alive
       because: The primary key is not live
       because: Expired on 2024-08-13T00:46:08Z
   2. Key 9D60CBB71A3B4456 invalid: key is not alive
       because: The primary key is not live
       because: Expired on 2024-08-13T00:46:08Z
De GPG-sleutels bedoeld voor repository "Copr repo for cran owned by 
iucar" zijn al ge?nstalleerd maar niet correct voor dit pakket.
Controleer of de juiste sleutel-URLs voor deze repository zijn 
opgegeven.. Pakket dat mislukt is: 
R-CRAN-kernlab-0.9.33-1.fc40.copr7906033.x86_64
  GPG-sleutels zijn geconfigureerd als: 
https://download.copr.fedorainfracloud.org/results/iucar/cran/pubkey.gpg
Publieke sleutel voor 
R-CRAN-tseries-0.10.57-1.fc40.copr7906036.x86_64.rpm is niet vertrouwd. 
Pakket dat mislukt is: R-CRAN-tseries-0.10.57-1.fc40.copr7906036.x86_64
  GPG-sleutels zijn geconfigureerd als: 
https://download.copr.fedorainfracloud.org/results/iucar/cran/pubkey.gpg
De gedownloade pakketten zijn in de cache opgeslagen tot de volgende 
sucessvolle transactie.
Je kan pakketten in de cache verwijderen met het uitvoeren van 'dnf 
clean packages'.
Fout: GPG-check is MISLUKT

Deepl translates the last part of this message as:
The GPG keys intended for repository ?Copr repo for cran owned by
iucar? are already installed but not correctly for this package.
Check
  whether the correct key URLs are specified for this repository. Package
that failed is: R-CRAN-kernlab-0.9.33-1.fc40.copr7906033.x86_64
  GPG keys are configured as: 
https://download.copr.fedorainfracloud.org/results/iucar/cran/pubkey.gpg
Public
  key for R-CRAN-tseries-0.10.57-1.fc40.copr7906036.x86_64.rpm is
not trusted. Package failed:
R-CRAN-tseries-0.10.57-1.fc40.copr7906036.x86_64
  GPG keys are configured as: 
https://download.copr.fedorainfracloud.org/results/iucar/cran/pubkey.gpg
The downloaded packages are cached until the next successful transaction.
You can delete cached packages by running ?dnf clean packages?.
Error: GPG check failed

Translated with DeepL.com (free version)

How can I renew or update the certificates?

Ben Engbers

From Ben@Engber@ @end|ng |rom Be-Log|c@|@n|  Thu Aug 15 15:40:37 2024
From: Ben@Engber@ @end|ng |rom Be-Log|c@|@n| (Ben Engbers)
Date: Thu, 15 Aug 2024 15:40:37 +0200
Subject: [Rd] Certificates are not trusted
In-Reply-To: <37b7e0a7-1080-4a20-a60d-35910a7752fc@Be-Logical.nl>
References: <37b7e0a7-1080-4a20-a60d-35910a7752fc@Be-Logical.nl>
Message-ID: <f74df1ce-0d97-4e9f-856e-4a310645f856@Be-Logical.nl>

I checked the installed versions from R-CRAN-kernlab and R-CRAN-tseries
R-CRAN-kernlab = 0.9.32
R-CRAN-tseries = 0.10.56
.
Updating these packages fails because of incorrect installation


Op 15-08-2024 om 14:57 schreef Ben Engbers:
> Hi,

> The GPG keys intended for repository ?Copr repo for cran owned by
> iucar? are already installed but not correctly for this package.
> Check
>  ?whether the correct key URLs are specified for thiconfigured as: 
> https://download.copr.fedorainfracloud.org/results/iucar/cran/pubkey.gpg
> Publics repository. Package
> that failed is: R-CRAN-kernlab-0.9.33-1.fc40.copr7906033.x86_64
>  ?GPG keys are 
>  ?key for R-CRAN-tseries-0.10.57-1.fc40.copr7906036.x86_64.rpm is
> not trusted. Package failed:
> R-CRAN-tseries-0.10.57-1.fc40.copr7906036.x86_64
>  ?GPG keys are configured as: 
> https://download.copr.fedorainfracloud.org/results/iucar/cran/pubkey.gpg
> The downloaded packages are cached until the next successful transaction.
> You can delete cached packages by running ?dnf clean packages?.
> Error: GPG check failed

> Ben Engbers
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Ben Engbers
Grietjeshof 77
6721 VH  Bennekom
+31 6 23634840

From |kry|ov @end|ng |rom d|@root@org  Thu Aug 15 15:48:40 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Thu, 15 Aug 2024 16:48:40 +0300
Subject: [Rd] Certificates are not trusted
In-Reply-To: <37b7e0a7-1080-4a20-a60d-35910a7752fc@Be-Logical.nl>
References: <37b7e0a7-1080-4a20-a60d-35910a7752fc@Be-Logical.nl>
Message-ID: <20240815164840.14104ae2@arachnoid>

? Thu, 15 Aug 2024 14:57:13 +0200
Ben Engbers <Ben.Engbers at Be-Logical.nl> ?????:

> GPG-sleutel op 
> https://download.copr.fedorainfracloud.org/results/iucar/cran/pubkey.gpg 
> (0x1A3B4456) is al ge?nstalleerd
> error: Verifying a signature using certificate 
> 3124D2EF76DA4D972F6BE4AC9D60CBB71A3B4456 (iucar_cran (None) 
> <iucar#cran at copr.fedorahosted.org>):
>    1. Certificiate 9D60CBB71A3B4456 invalid: certificate is not alive
>        because: The primary key is not live
>        because: Expired on 2024-08-13T00:46:08Z

The copy of I?aki Ucar's public key stored on your computer has
expired. Meanwhile, the public key at
https://download.copr.fedorainfracloud.org/results/iucar/cran/pubkey.gpg
has not expired (the current file will expire in 2028).

The suggested workaround is to download the public key anew and import
it manually: https://github.com/fedora-copr/copr/issues/2894

Either way, this is a problem related to Fedora Copr, not an R-devel
problem. May be a better fit for R-SIG-Fedora at r-project.org.

-- 
Best regards,
Ivan


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Aug 15 15:58:14 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 15 Aug 2024 15:58:14 +0200
Subject: [Rd] 'Fedora' (only!!) -- Certificates are not trusted
In-Reply-To: <f74df1ce-0d97-4e9f-856e-4a310645f856@Be-Logical.nl>
References: <37b7e0a7-1080-4a20-a60d-35910a7752fc@Be-Logical.nl>
 <f74df1ce-0d97-4e9f-856e-4a310645f856@Be-Logical.nl>
Message-ID: <26302.2422.104069.521333@stat.math.ethz.ch>

>>>>> Ben Engbers 
>>>>>     on Thu, 15 Aug 2024 15:40:37 +0200 writes:

    > I checked the installed versions from R-CRAN-kernlab and R-CRAN-tseries
    > R-CRAN-kernlab = 0.9.32
    > R-CRAN-tseries = 0.10.56
    > .
    > Updating these packages fails because of incorrect installation

PLEASE !!!   Do not spam the R-devel mailing list with things
that should've gone to  R-SIG-Fedora at r-project.org

{ where I *did* CC this (a different msg), a moment ago
  This E-mail is hopefully the *LAST* one on R-devel with this topic!! }

Martin
(co-maintainer of the R-devel mailing list)

--
Martin Maechler
ETH Zurich and R-Core

    > Op 15-08-2024 om 14:57 schreef Ben Engbers:
    >> Hi,

    >> The GPG keys intended for repository ?Copr repo for cran owned by
    >> iucar? are already installed but not correctly for this package.
    >> Check whether the correct key URLs are specified for thiconfigured as: 
    >> https://download.copr.fedorainfracloud.org/results/iucar/cran/pubkey.gpg
    >> Publics repository. 
    >> Package that failed is: R-CRAN-kernlab-0.9.33-1.fc40.copr7906033.x86_64

.............


From @zwj|08 @end|ng |rom gm@||@com  Sat Aug 17 02:45:37 2024
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Fri, 16 Aug 2024 19:45:37 -0500
Subject: [Rd] Strange Behavior in RNG
Message-ID: <CAGiFhPM0v-FPH8B7F0tgM842caji2M+sFVhgj0ANoUso6SJC1w@mail.gmail.com>

Hi,

I just observed a strange behavior in R. The rnorm function does not
give me the numbers with a given length. I think it is somehow related
to the internal representation of double-type numbers but I am not
sure if this is supposed to happen. Below is a reproducible example

```
## Create a list, we will only take the forth value, which is 0.6
nList <- seq(0,1,0.2)
n <- nList[4]
n
# [1] 0.6
length(rnorm(1000*n))
# [1] 600
length(rnorm(1000-1000*n))
# [1] 399 <--- What happened here?
length(rnorm(1000-1000*0.6))
# [1] 400
1000-1000*n
# [1] 400 <- this looks good to me...
1000-1000*0.6
# [1] 400
identical(n, 0.6)
# [1] FALSE
.Internal(inspect(n))
# @0x00000217c75d79d0 14 REALSXP g0c1 [REF(1)] (len=1, tl=0) 0.6
.Internal(inspect(0.6))
# @0x00000217c791e0c8 14 REALSXP g0c1 [REF(2)] (len=1, tl=0) 0.6
```

As you can see, length(rnorm(1000-1000*n)) does not really give me the
result I want. This is somewhat surprising because it is hard to
imagine that a manually-typed 0.6 can behave differently than 0.6 from
a sequence. Furthermore, 0.6 is the only problematic number from
`nList`. The rest numbers work fine. I can guess it is due to the
rounding mechanism, but I think this should be treated as a bug: if
the print function can show the result of 1000-1000*n correctly, it
will be strange that rnorm behaves differently. Below is my session
info

R version 4.3.0 (2023-04-21 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19045)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.utf8
[2] LC_CTYPE=English_United States.utf8
[3] LC_MONETARY=English_United States.utf8
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.utf8

time zone: America/Chicago
tzcode source: internal


From j|ox @end|ng |rom mcm@@ter@c@  Sat Aug 17 04:35:43 2024
From: j|ox @end|ng |rom mcm@@ter@c@ (John Fox)
Date: Fri, 16 Aug 2024 22:35:43 -0400
Subject: [Rd] Strange Behavior in RNG
In-Reply-To: <CAGiFhPM0v-FPH8B7F0tgM842caji2M+sFVhgj0ANoUso6SJC1w@mail.gmail.com>
References: <CAGiFhPM0v-FPH8B7F0tgM842caji2M+sFVhgj0ANoUso6SJC1w@mail.gmail.com>
Message-ID: <33d1b324-b9ec-44db-bd78-d0af4d5c7ac1@mcmaster.ca>

Dear Jiefei Wang,

This is really a more appropriate question for the r-help list than for 
the r-devel list.

Neverthless, see item 7.31 in the R FAQ 
<https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f>, 
about floating-point arithmetic.

I hope this helps,
  John
-- 
John Fox, Professor Emeritus
McMaster University
Hamilton, Ontario, Canada
web: https://www.john-fox.ca/
--

On 2024-08-16 8:45 p.m., Jiefei Wang wrote:
> Caution: External email.
> 
> 
> Hi,
> 
> I just observed a strange behavior in R. The rnorm function does not
> give me the numbers with a given length. I think it is somehow related
> to the internal representation of double-type numbers but I am not
> sure if this is supposed to happen. Below is a reproducible example
> 
> ```
> ## Create a list, we will only take the forth value, which is 0.6
> nList <- seq(0,1,0.2)
> n <- nList[4]
> n
> # [1] 0.6
> length(rnorm(1000*n))
> # [1] 600
> length(rnorm(1000-1000*n))
> # [1] 399 <--- What happened here?
> length(rnorm(1000-1000*0.6))
> # [1] 400
> 1000-1000*n
> # [1] 400 <- this looks good to me...
> 1000-1000*0.6
> # [1] 400
> identical(n, 0.6)
> # [1] FALSE
> .Internal(inspect(n))
> # @0x00000217c75d79d0 14 REALSXP g0c1 [REF(1)] (len=1, tl=0) 0.6
> .Internal(inspect(0.6))
> # @0x00000217c791e0c8 14 REALSXP g0c1 [REF(2)] (len=1, tl=0) 0.6
> ```
> 
> As you can see, length(rnorm(1000-1000*n)) does not really give me the
> result I want. This is somewhat surprising because it is hard to
> imagine that a manually-typed 0.6 can behave differently than 0.6 from
> a sequence. Furthermore, 0.6 is the only problematic number from
> `nList`. The rest numbers work fine. I can guess it is due to the
> rounding mechanism, but I think this should be treated as a bug: if
> the print function can show the result of 1000-1000*n correctly, it
> will be strange that rnorm behaves differently. Below is my session
> info
> 
> R version 4.3.0 (2023-04-21 ucrt)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 19045)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=English_United States.utf8
> [2] LC_CTYPE=English_United States.utf8
> [3] LC_MONETARY=English_United States.utf8
> [4] LC_NUMERIC=C
> [5] LC_TIME=English_United States.utf8
> 
> time zone: America/Chicago
> tzcode source: internal
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sat Aug 17 05:19:24 2024
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sat, 17 Aug 2024 04:19:24 +0100
Subject: [Rd] Strange Behavior in RNG
In-Reply-To: <CAGiFhPM0v-FPH8B7F0tgM842caji2M+sFVhgj0ANoUso6SJC1w@mail.gmail.com>
References: <CAGiFhPM0v-FPH8B7F0tgM842caji2M+sFVhgj0ANoUso6SJC1w@mail.gmail.com>
Message-ID: <6144d21c-bad4-410a-a6e2-22709e23c68b@sapo.pt>

?s 01:45 de 17/08/2024, Jiefei Wang escreveu:
> Hi,
> 
> I just observed a strange behavior in R. The rnorm function does not
> give me the numbers with a given length. I think it is somehow related
> to the internal representation of double-type numbers but I am not
> sure if this is supposed to happen. Below is a reproducible example
> 
> ```
> ## Create a list, we will only take the forth value, which is 0.6
> nList <- seq(0,1,0.2)
> n <- nList[4]
> n
> # [1] 0.6
> length(rnorm(1000*n))
> # [1] 600
> length(rnorm(1000-1000*n))
> # [1] 399 <--- What happened here?
> length(rnorm(1000-1000*0.6))
> # [1] 400
> 1000-1000*n
> # [1] 400 <- this looks good to me...
> 1000-1000*0.6
> # [1] 400
> identical(n, 0.6)
> # [1] FALSE
> .Internal(inspect(n))
> # @0x00000217c75d79d0 14 REALSXP g0c1 [REF(1)] (len=1, tl=0) 0.6
> .Internal(inspect(0.6))
> # @0x00000217c791e0c8 14 REALSXP g0c1 [REF(2)] (len=1, tl=0) 0.6
> ```
> 
> As you can see, length(rnorm(1000-1000*n)) does not really give me the
> result I want. This is somewhat surprising because it is hard to
> imagine that a manually-typed 0.6 can behave differently than 0.6 from
> a sequence. Furthermore, 0.6 is the only problematic number from
> `nList`. The rest numbers work fine. I can guess it is due to the
> rounding mechanism, but I think this should be treated as a bug: if
> the print function can show the result of 1000-1000*n correctly, it
> will be strange that rnorm behaves differently. Below is my session
> info
> 
> R version 4.3.0 (2023-04-21 ucrt)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 19045)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=English_United States.utf8
> [2] LC_CTYPE=English_United States.utf8
> [3] LC_MONETARY=English_United States.utf8
> [4] LC_NUMERIC=C
> [5] LC_TIME=English_United States.utf8
> 
> time zone: America/Chicago
> tzcode source: internal
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
Hello,

This is R FAQ 7.31.
In fact, the sequences

seq(0, 1, 0.1)
seq(0, 1, 0.2)

should probably be a FAQ 7.31 example.
If you print the numbers with more decimals you will see why the error.



# generate the list
nList <- seq(0,1,0.2)
# compare the list with manually typed numbers
nList != c(0, 0.2, 0.4, 0.6, 0.8, 1)
#> [1] FALSE FALSE FALSE  TRUE FALSE FALSE

# note the value of 0.6
print(nList, digits = 16L)
#> [1] 0.0000000000000000 0.2000000000000000 0.4000000000000000 
0.6000000000000001
#> [5] 0.8000000000000000 1.0000000000000000


Hope this helps,

Rui Barradas



-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From @zwj|08 @end|ng |rom gm@||@com  Sat Aug 17 06:11:21 2024
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Fri, 16 Aug 2024 23:11:21 -0500
Subject: [Rd] Strange Behavior in RNG
In-Reply-To: <6144d21c-bad4-410a-a6e2-22709e23c68b@sapo.pt>
References: <CAGiFhPM0v-FPH8B7F0tgM842caji2M+sFVhgj0ANoUso6SJC1w@mail.gmail.com>
 <6144d21c-bad4-410a-a6e2-22709e23c68b@sapo.pt>
Message-ID: <CAGiFhPNCE-ZYb+G5Nkqe81bzC-v_ezbeQbEu1NPrRsVR91eYkw@mail.gmail.com>

Hi Rui and John,

Thanks for your reply. I'm not sure if this is a question for R-help as I
think the behavior of RNG is weird, but I will happy to move this
discussion if the admin think this is not their topic.

I was a C/C++ developer so I understand the double-type numbers sometimes
can generate surprising results, but what unexpected here is that even the
number is super close to 400 'rnorm' still rounds it down to 399. Shouldn't
it be round up in this case? Probably the underlying code just convert the
number into an int type, but I was expecting that the function can tolerate
a certain degree of errors. Maybe I have too much expectations for it...

Best,
Jiefei



On Fri, Aug 16, 2024, 22:19 Rui Barradas <ruipbarradas at sapo.pt> wrote:

> ?s 01:45 de 17/08/2024, Jiefei Wang escreveu:
> > Hi,
> >
> > I just observed a strange behavior in R. The rnorm function does not
> > give me the numbers with a given length. I think it is somehow related
> > to the internal representation of double-type numbers but I am not
> > sure if this is supposed to happen. Below is a reproducible example
> >
> > ```
> > ## Create a list, we will only take the forth value, which is 0.6
> > nList <- seq(0,1,0.2)
> > n <- nList[4]
> > n
> > # [1] 0.6
> > length(rnorm(1000*n))
> > # [1] 600
> > length(rnorm(1000-1000*n))
> > # [1] 399 <--- What happened here?
> > length(rnorm(1000-1000*0.6))
> > # [1] 400
> > 1000-1000*n
> > # [1] 400 <- this looks good to me...
> > 1000-1000*0.6
> > # [1] 400
> > identical(n, 0.6)
> > # [1] FALSE
> > .Internal(inspect(n))
> > # @0x00000217c75d79d0 14 REALSXP g0c1 [REF(1)] (len=1, tl=0) 0.6
> > .Internal(inspect(0.6))
> > # @0x00000217c791e0c8 14 REALSXP g0c1 [REF(2)] (len=1, tl=0) 0.6
> > ```
> >
> > As you can see, length(rnorm(1000-1000*n)) does not really give me the
> > result I want. This is somewhat surprising because it is hard to
> > imagine that a manually-typed 0.6 can behave differently than 0.6 from
> > a sequence. Furthermore, 0.6 is the only problematic number from
> > `nList`. The rest numbers work fine. I can guess it is due to the
> > rounding mechanism, but I think this should be treated as a bug: if
> > the print function can show the result of 1000-1000*n correctly, it
> > will be strange that rnorm behaves differently. Below is my session
> > info
> >
> > R version 4.3.0 (2023-04-21 ucrt)
> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> > Running under: Windows 10 x64 (build 19045)
> >
> > Matrix products: default
> >
> > locale:
> > [1] LC_COLLATE=English_United States.utf8
> > [2] LC_CTYPE=English_United States.utf8
> > [3] LC_MONETARY=English_United States.utf8
> > [4] LC_NUMERIC=C
> > [5] LC_TIME=English_United States.utf8
> >
> > time zone: America/Chicago
> > tzcode source: internal
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> Hello,
>
> This is R FAQ 7.31.
> In fact, the sequences
>
> seq(0, 1, 0.1)
> seq(0, 1, 0.2)
>
> should probably be a FAQ 7.31 example.
> If you print the numbers with more decimals you will see why the error.
>
>
>
> # generate the list
> nList <- seq(0,1,0.2)
> # compare the list with manually typed numbers
> nList != c(0, 0.2, 0.4, 0.6, 0.8, 1)
> #> [1] FALSE FALSE FALSE  TRUE FALSE FALSE
>
> # note the value of 0.6
> print(nList, digits = 16L)
> #> [1] 0.0000000000000000 0.2000000000000000 0.4000000000000000
> 0.6000000000000001
> #> [5] 0.8000000000000000 1.0000000000000000
>
>
> Hope this helps,
>
> Rui Barradas
>
>
>
> --
> Este e-mail foi analisado pelo software antiv?rus AVG para verificar a
> presen?a de v?rus.
> www.avg.com
>

	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Sat Aug 17 14:09:06 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 17 Aug 2024 08:09:06 -0400
Subject: [Rd] Strange Behavior in RNG
In-Reply-To: <CAGiFhPNCE-ZYb+G5Nkqe81bzC-v_ezbeQbEu1NPrRsVR91eYkw@mail.gmail.com>
References: <CAGiFhPM0v-FPH8B7F0tgM842caji2M+sFVhgj0ANoUso6SJC1w@mail.gmail.com>
 <6144d21c-bad4-410a-a6e2-22709e23c68b@sapo.pt>
 <CAGiFhPNCE-ZYb+G5Nkqe81bzC-v_ezbeQbEu1NPrRsVR91eYkw@mail.gmail.com>
Message-ID: <CABghstSAsAZjmE7nTH8Jth6HDhJ9KXcQdaRJUSWR+uKHpzxH+A@mail.gmail.com>

You could argue that the 'n' argument should be rounded rather than
truncated, but this form of coercion from float to integer is
common/standard (in C, for example). In any case, it's a long standing part
of R and is very unlikely to be changed ...

On Sat, Aug 17, 2024, 12:11 AM Jiefei Wang <szwjf08 at gmail.com> wrote:

> Hi Rui and John,
>
> Thanks for your reply. I'm not sure if this is a question for R-help as I
> think the behavior of RNG is weird, but I will happy to move this
> discussion if the admin think this is not their topic.
>
> I was a C/C++ developer so I understand the double-type numbers sometimes
> can generate surprising results, but what unexpected here is that even the
> number is super close to 400 'rnorm' still rounds it down to 399. Shouldn't
> it be round up in this case? Probably the underlying code just convert the
> number into an int type, but I was expecting that the function can tolerate
> a certain degree of errors. Maybe I have too much expectations for it...
>
> Best,
> Jiefei
>
>
>
> On Fri, Aug 16, 2024, 22:19 Rui Barradas <ruipbarradas at sapo.pt> wrote:
>
> > ?s 01:45 de 17/08/2024, Jiefei Wang escreveu:
> > > Hi,
> > >
> > > I just observed a strange behavior in R. The rnorm function does not
> > > give me the numbers with a given length. I think it is somehow related
> > > to the internal representation of double-type numbers but I am not
> > > sure if this is supposed to happen. Below is a reproducible example
> > >
> > > ```
> > > ## Create a list, we will only take the forth value, which is 0.6
> > > nList <- seq(0,1,0.2)
> > > n <- nList[4]
> > > n
> > > # [1] 0.6
> > > length(rnorm(1000*n))
> > > # [1] 600
> > > length(rnorm(1000-1000*n))
> > > # [1] 399 <--- What happened here?
> > > length(rnorm(1000-1000*0.6))
> > > # [1] 400
> > > 1000-1000*n
> > > # [1] 400 <- this looks good to me...
> > > 1000-1000*0.6
> > > # [1] 400
> > > identical(n, 0.6)
> > > # [1] FALSE
> > > .Internal(inspect(n))
> > > # @0x00000217c75d79d0 14 REALSXP g0c1 [REF(1)] (len=1, tl=0) 0.6
> > > .Internal(inspect(0.6))
> > > # @0x00000217c791e0c8 14 REALSXP g0c1 [REF(2)] (len=1, tl=0) 0.6
> > > ```
> > >
> > > As you can see, length(rnorm(1000-1000*n)) does not really give me the
> > > result I want. This is somewhat surprising because it is hard to
> > > imagine that a manually-typed 0.6 can behave differently than 0.6 from
> > > a sequence. Furthermore, 0.6 is the only problematic number from
> > > `nList`. The rest numbers work fine. I can guess it is due to the
> > > rounding mechanism, but I think this should be treated as a bug: if
> > > the print function can show the result of 1000-1000*n correctly, it
> > > will be strange that rnorm behaves differently. Below is my session
> > > info
> > >
> > > R version 4.3.0 (2023-04-21 ucrt)
> > > Platform: x86_64-w64-mingw32/x64 (64-bit)
> > > Running under: Windows 10 x64 (build 19045)
> > >
> > > Matrix products: default
> > >
> > > locale:
> > > [1] LC_COLLATE=English_United States.utf8
> > > [2] LC_CTYPE=English_United States.utf8
> > > [3] LC_MONETARY=English_United States.utf8
> > > [4] LC_NUMERIC=C
> > > [5] LC_TIME=English_United States.utf8
> > >
> > > time zone: America/Chicago
> > > tzcode source: internal
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > Hello,
> >
> > This is R FAQ 7.31.
> > In fact, the sequences
> >
> > seq(0, 1, 0.1)
> > seq(0, 1, 0.2)
> >
> > should probably be a FAQ 7.31 example.
> > If you print the numbers with more decimals you will see why the error.
> >
> >
> >
> > # generate the list
> > nList <- seq(0,1,0.2)
> > # compare the list with manually typed numbers
> > nList != c(0, 0.2, 0.4, 0.6, 0.8, 1)
> > #> [1] FALSE FALSE FALSE  TRUE FALSE FALSE
> >
> > # note the value of 0.6
> > print(nList, digits = 16L)
> > #> [1] 0.0000000000000000 0.2000000000000000 0.4000000000000000
> > 0.6000000000000001
> > #> [5] 0.8000000000000000 1.0000000000000000
> >
> >
> > Hope this helps,
> >
> > Rui Barradas
> >
> >
> >
> > --
> > Este e-mail foi analisado pelo software antiv?rus AVG para verificar a
> > presen?a de v?rus.
> > www.avg.com
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @hrekt@n @end|ng |rom 126@com  Sat Aug 17 13:20:46 2024
From: @hrekt@n @end|ng |rom 126@com (=?utf-8?B?6LCt5pi+6Iux?=)
Date: Sat, 17 Aug 2024 19:20:46 +0800 (GMT+08:00)
Subject: [Rd] Strange Behavior in RNG
In-Reply-To: <CAGiFhPNCE-ZYb+G5Nkqe81bzC-v_ezbeQbEu1NPrRsVR91eYkw@mail.gmail.com>
References: <CAGiFhPM0v-FPH8B7F0tgM842caji2M+sFVhgj0ANoUso6SJC1w@mail.gmail.com>
 <6144d21c-bad4-410a-a6e2-22709e23c68b@sapo.pt>
 <CAGiFhPNCE-ZYb+G5Nkqe81bzC-v_ezbeQbEu1NPrRsVR91eYkw@mail.gmail.com>
Message-ID: <119c6429.110fb.19160118606.Coremail.shrektan@126.com>

Hi Jiefei,

I don't believe there's an issue with the RNG (Random Number Generator).

The unexpected result you're seeing is due to providing a float number to the rnorm() function, which expects an integer. When you input a float, R coerces it to an integer using as.integer(). This function truncates the decimal part rather than rounding.

Here's an example to illustrate:

nList <- seq(0, 1, 0.2)

 n <- nList[4] 

n

 [1] 0.6

1000 - 1000 * n 

[1] 400

as.integer(1000 - 1000 * n) 

[1] 399

As you can see, it is truncated to 399.





Regards,


Xianying Tan (shrektan)




---- Replied Message ----
| From | Jiefei Wang<szwjf08 at gmail.com> |
| Date | 08/17/2024 12:11 |
| To | Rui Barradas<ruipbarradas at sapo.pt> |
| Cc | r-devel<R-devel at r-project.org> |
| Subject | Re: [Rd] Strange Behavior in RNG |
Hi Rui and John,

Thanks for your reply. I'm not sure if this is a question for R-help as I
think the behavior of RNG is weird, but I will happy to move this
discussion if the admin think this is not their topic.

I was a C/C++ developer so I understand the double-type numbers sometimes
can generate surprising results, but what unexpected here is that even the
number is super close to 400 'rnorm' still rounds it down to 399. Shouldn't
it be round up in this case? Probably the underlying code just convert the
number into an int type, but I was expecting that the function can tolerate
a certain degree of errors. Maybe I have too much expectations for it...

Best,
Jiefei



On Fri, Aug 16, 2024, 22:19 Rui Barradas <ruipbarradas at sapo.pt> wrote:

?s 01:45 de 17/08/2024, Jiefei Wang escreveu:
Hi,

I just observed a strange behavior in R. The rnorm function does not
give me the numbers with a given length. I think it is somehow related
to the internal representation of double-type numbers but I am not
sure if this is supposed to happen. Below is a reproducible example

```
## Create a list, we will only take the forth value, which is 0.6
nList <- seq(0,1,0.2)
n <- nList[4]
n
# [1] 0.6
length(rnorm(1000*n))
# [1] 600
length(rnorm(1000-1000*n))
# [1] 399 <--- What happened here?
length(rnorm(1000-1000*0.6))
# [1] 400
1000-1000*n
# [1] 400 <- this looks good to me...
1000-1000*0.6
# [1] 400
identical(n, 0.6)
# [1] FALSE
.Internal(inspect(n))
# @0x00000217c75d79d0 14 REALSXP g0c1 [REF(1)] (len=1, tl=0) 0.6
.Internal(inspect(0.6))
# @0x00000217c791e0c8 14 REALSXP g0c1 [REF(2)] (len=1, tl=0) 0.6
```

As you can see, length(rnorm(1000-1000*n)) does not really give me the
result I want. This is somewhat surprising because it is hard to
imagine that a manually-typed 0.6 can behave differently than 0.6 from
a sequence. Furthermore, 0.6 is the only problematic number from
`nList`. The rest numbers work fine. I can guess it is due to the
rounding mechanism, but I think this should be treated as a bug: if
the print function can show the result of 1000-1000*n correctly, it
will be strange that rnorm behaves differently. Below is my session
info

R version 4.3.0 (2023-04-21 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19045)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.utf8
[2] LC_CTYPE=English_United States.utf8
[3] LC_MONETARY=English_United States.utf8
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.utf8

time zone: America/Chicago
tzcode source: internal

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel
Hello,

This is R FAQ 7.31.
In fact, the sequences

seq(0, 1, 0.1)
seq(0, 1, 0.2)

should probably be a FAQ 7.31 example.
If you print the numbers with more decimals you will see why the error.



# generate the list
nList <- seq(0,1,0.2)
# compare the list with manually typed numbers
nList != c(0, 0.2, 0.4, 0.6, 0.8, 1)
#> [1] FALSE FALSE FALSE  TRUE FALSE FALSE

# note the value of 0.6
print(nList, digits = 16L)
#> [1] 0.0000000000000000 0.2000000000000000 0.4000000000000000
0.6000000000000001
#> [5] 0.8000000000000000 1.0000000000000000


Hope this helps,

Rui Barradas



--
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a
presen?a de v?rus.
www.avg.com


[[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From @th@@n @end|ng |rom edu@@@u@@t  Thu Aug 22 16:03:09 2024
From: @th@@n @end|ng |rom edu@@@u@@t (Haan, Stefan)
Date: Thu, 22 Aug 2024 14:03:09 +0000
Subject: [Rd] Make factanal accept functions for rotation parameter
Message-ID: <6993086d488b554efa1c7f5d9a6863d1af49b0ce.camel@edu.aau.at>

Dear R developers,

Would it be possible to make `factanal` to also accept functions and
not just function names for its `rotation` parameter? If I understand
correctly, `do.call` also supports this.

Best greetings,
Stefan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: patch.diff
Type: text/x-patch
Size: 568 bytes
Desc: patch.diff
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20240822/1e44bee6/attachment.bin>

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Aug 22 18:09:45 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 22 Aug 2024 18:09:45 +0200
Subject: [Rd] Make factanal accept functions for rotation parameter
In-Reply-To: <6993086d488b554efa1c7f5d9a6863d1af49b0ce.camel@edu.aau.at>
References: <6993086d488b554efa1c7f5d9a6863d1af49b0ce.camel@edu.aau.at>
Message-ID: <26311.25289.119466.797669@stat.math.ethz.ch>

>>>>> Haan, Stefan via R-devel 
>>>>>     on Thu, 22 Aug 2024 14:03:09 +0000 writes:

    > Dear R developers,
    > Would it be possible to make `factanal` to also accept functions and
    > not just function names for its `rotation` parameter? If I understand
    > correctly, `do.call` also supports this.

    > Best greetings,
    > Stefan

> Index: src/library/stats/R/factanal.R
> ===================================================================
> --- src/library/stats/R/factanal.R	(revision 87038)
> +++ src/library/stats/R/factanal.R	(working copy)
> @@ -137,7 +137,7 @@
>                        "unable to optimize from these starting values"),
>               domain = NA)
>      load <- fit$loadings
> -    if(rotation != "none") {
> +    if(rotation != "none" || is.function(rotation)) {
>          rot <- do.call(rotation, c(list(load), cn$rotate))
>          load <- if (is.list(rot)) {
>            load <- rot$loadings

I'm not a factanal user myself, but I think this is a very good,
even "obvious" (in hindsight)  suggestion.
.... unless I'm forgetting something.

Can you please provide useful (but *small*) example,  which I
then also could add to the help page ?

Best regards,
Martin

--
Martin Maechler
ETH Zurich  and   R Core team


From @th@@n @end|ng |rom edu@@@u@@t  Thu Aug 22 18:31:07 2024
From: @th@@n @end|ng |rom edu@@@u@@t (Haan, Stefan)
Date: Thu, 22 Aug 2024 16:31:07 +0000
Subject: [Rd] Make factanal accept functions for rotation parameter
In-Reply-To: <26311.25289.119466.797669@stat.math.ethz.ch>
References: <6993086d488b554efa1c7f5d9a6863d1af49b0ce.camel@edu.aau.at>
 <26311.25289.119466.797669@stat.math.ethz.ch>
Message-ID: <35efd7ba073ab16401ac2b118b97a701051d6dfa.camel@edu.aau.at>

Dear Martin,

The thing I was trying to do, when I tried to pass a function for the
rotation parameter was to call factanal repeatedly with different
rotations to see which factor model would give the best
interpretability.

```R
rotate <- function(phi) {
	G <- matrix(c(cos(phi), sin(phi), -sin(phi), cos(phi)),
nrow=2, ncol=2)
	function(loadings) loadings %*% G
}

phi <- seq(0, pi/2, length.out=10)

par(mfcol=c(2,5))
for (i in 1:10) {
	model <- factanal(x=mydata, factors=2,
rotation=rotate(phi[i]), scores="regression")
	plot(model$scores[,1], model$scores[,2], type="n",
xlab="Factor 1", ylab="Factor 2", sub=paste("phi #",i,sep=""))
	text(model$scores[,1], model$scores[,2],
labels=rownames(mydata))
}
```

However thinking about it, I don't really want this to be an example in
the documentation as it quite wastefully recomputes the estimates for
the loadings and scores for each phi, when I could just fit the model
once and then multiply the loadings and scores with G(phi) and
t(G(phi)) respectively for each phi before plotting them.

Also, as Duncan Murdoch helpfully pointed out, the condition should
really be
```
is.function(rotation) || rotation != "none"
```
as != would fail before is.function(rotation) is evaluated.

Best greetings,
Stefan

On Thu, 2024-08-22 at 18:09 +0200, Martin Maechler wrote:
> > > > > > Haan, Stefan via R-devel 
> > > > > > ??? on Thu, 22 Aug 2024 14:03:09 +0000 writes:
> 
> ??? > Dear R developers,
> ??? > Would it be possible to make `factanal` to also accept
> functions and
> ??? > not just function names for its `rotation` parameter? If I
> understand
> ??? > correctly, `do.call` also supports this.
> 
> ??? > Best greetings,
> ??? > Stefan
> 
> > Index: src/library/stats/R/factanal.R
> > ===================================================================
> > --- src/library/stats/R/factanal.R	(revision 87038)
> > +++ src/library/stats/R/factanal.R	(working copy)
> > @@ -137,7 +137,7 @@
> > ?????????????????????? "unable to optimize from these starting
> > values"),
> > ????????????? domain = NA)
> > ???? load <- fit$loadings
> > -??? if(rotation != "none") {
> > +??? if(rotation != "none" || is.function(rotation)) {
> > ???????? rot <- do.call(rotation, c(list(load), cn$rotate))
> > ???????? load <- if (is.list(rot)) {
> > ?????????? load <- rot$loadings
> 
> I'm not a factanal user myself, but I think this is a very good,
> even "obvious" (in hindsight)? suggestion.
> .... unless I'm forgetting something.
> 
> Can you please provide useful (but *small*) example,? which I
> then also could add to the help page ?
> 
> Best regards,
> Martin
> 
> --
> Martin Maechler
> ETH Zurich? and?? R Core team
> 


From ggrothend|eck @end|ng |rom gm@||@com  Sat Aug 24 16:41:57 2024
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sat, 24 Aug 2024 10:41:57 -0400
Subject: [Rd] transform
Message-ID: <CAP01uR=DJOOJFBh-kwGAstC1aryt8uMh7c0vceYRYAtyeD59SA@mail.gmail.com>

One oddity in transform that I recently noticed.  It seems that to include
a one-column data frame in the arguments one must name it even though the
name is ignored.  If the data frame has more than one column then it must
also be named but in that case it is not ignored and the names are made up of
a combination of that name and the data frame's names.  I would have thought
that if we did not want a combination of names we would just not name the
argument.

  # ignores second argument returning BOD unchanged
  transform(BOD, data.frame(y = 1:6)) |> names()
  ## [1] "Time"   "demand"

  # ignores second argument returning BOD unchanged
  transform(BOD, data.frame(y = 1:6, z = 6:1)) |> names()
  ## [1] "Time"   "demand"

  # with one column in data frame it adds the column and names it y ignoring x
  transform(BOD, x = data.frame(y = 1:6)) |> names()
  ## [1] "Time"   "demand" "y"

  # with multiple columns in data frame it uses x.y and x.z as names
  transform(BOD, data.frame(y = 1:6, z = 6:1)) |> names()
  ## [1] "Time"   "demand" "x.y"    "x.z"


-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From j|nghu@zh@o @end|ng |rom hotm@||@com  Mon Aug 26 10:46:01 2024
From: j|nghu@zh@o @end|ng |rom hotm@||@com (jing hua zhao)
Date: Mon, 26 Aug 2024 08:46:01 +0000
Subject: [Rd] CRAN package submission
In-Reply-To: <E1shNq2-009CgQ-1v@gannet.stats.ox.ac.uk>
References: <E1shNq2-009CgQ-1v@gannet.stats.ox.ac.uk>
Message-ID: <CWLP123MB6299C1869E98227915B50C19A58B2@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>

Dear CRAN / All,

I appeared not to receive any email notification after upload a package update (to furnish the confirmation) -- is the system down?

Many thanks,



Jing Hua


From bbo|ker @end|ng |rom gm@||@com  Mon Aug 26 12:43:18 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 26 Aug 2024 06:43:18 -0400
Subject: [Rd] CRAN package submission
In-Reply-To: <CWLP123MB6299C1869E98227915B50C19A58B2@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
References: <E1shNq2-009CgQ-1v@gannet.stats.ox.ac.uk>
 <CWLP123MB6299C1869E98227915B50C19A58B2@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <CABghstR4a8asYwQmkEmFUetUChYvNOCOzFdLe72Z4MgvawJBsg@mail.gmail.com>

Try the foghorn package for checking the status of your submission in the
CRAN queue?

On Mon, Aug 26, 2024, 4:46 AM jing hua zhao <jinghuazhao at hotmail.com> wrote:

> Dear CRAN / All,
>
> I appeared not to receive any email notification after upload a package
> update (to furnish the confirmation) -- is the system down?
>
> Many thanks,
>
>
>
> Jing Hua
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From j|nghu@zh@o @end|ng |rom hotm@||@com  Mon Aug 26 13:04:49 2024
From: j|nghu@zh@o @end|ng |rom hotm@||@com (jing hua zhao)
Date: Mon, 26 Aug 2024 11:04:49 +0000
Subject: [Rd] CRAN package submission
In-Reply-To: <CABghstR4a8asYwQmkEmFUetUChYvNOCOzFdLe72Z4MgvawJBsg@mail.gmail.com>
References: <E1shNq2-009CgQ-1v@gannet.stats.ox.ac.uk>
 <CWLP123MB6299C1869E98227915B50C19A58B2@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
 <CABghstR4a8asYwQmkEmFUetUChYvNOCOzFdLe72Z4MgvawJBsg@mail.gmail.com>
Message-ID: <CWLP123MB629934763FDA8C5AAD89C811A58B2@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>

Thanks for the suggestion - I gather I might have done something wrong , since I can see,

>        cran_incoming() |> data.frame()
                 package  version cran_folder                time size
1                   ghyp    1.6.5     pretest 2024-08-26 12:54:00 1.8M
...

It is nice to know about the package and in my case I didn't receive email (so as to click) to proceed to Step 3 of the submission.

From: Ben Bolker <bbolker at gmail.com>
Sent: Monday, August 26, 2024 11:43 AM
To: jing hua zhao <jinghuazhao at hotmail.com>
Cc: R-devel <R-devel at r-project.org>
Subject: Re: [Rd] CRAN package submission


Try the foghorn package for checking the status of your submission in the CRAN queue?

On Mon, Aug 26, 2024, 4:46 AM jing hua zhao <jinghuazhao at hotmail.com<mailto:jinghuazhao at hotmail.com>> wrote:
Dear CRAN / All,

I appeared not to receive any email notification after upload a package update (to furnish the confirmation) -- is the system down?

Many thanks,



Jing Hua

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Mon Aug 26 16:42:10 2024
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 26 Aug 2024 09:42:10 -0500
Subject: [Rd] specials and ::
Message-ID: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>

The survival package makes significant use of the "specials" argument of terms(), before 
calling model.frame; it is part of nearly every modeling function. The reason is that 
strata argments simply have to be handled differently than other things on the right hand 
side. Likewise for tt() and cluster(), though those are much less frequent.

I now get "bug reports" from the growing segment that believes one should put 
packagename:: in front of every single instance.?? For instance
 ????? fit <- survival::survdiff( survival::Surv(time, status) ~ ph.karno + 
survival::strata(inst),? data= survival::lung)

This fails to give the correct answer because it fools terms(formula, specials= 
"strata").??? I've stood firm in my response of "that's your bug, not mine", but I begin 
to believe I am swimming uphill.?? One person responded that it was company policy to 
qualify everything.

I don't see an easy way to fix survival, and even if I did it would be a tremendous amout 
of work.?? What are other's thoughts?

Terry



-- 

Terry M Therneau, PhD
Department of Quantitative Health Sciences
Mayo Clinic
therneau at mayo.edu

"TERR-ree THUR-noh"

	[[alternative HTML version deleted]]


From kev|n@r@coombe@ @end|ng |rom gm@||@com  Mon Aug 26 17:57:30 2024
From: kev|n@r@coombe@ @end|ng |rom gm@||@com (Kevin R. Coombes)
Date: Mon, 26 Aug 2024 11:57:30 -0400
Subject: [Rd] specials and ::
In-Reply-To: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
Message-ID: <81a609e8-112b-4540-95a2-54d5960cf75c@gmail.com>

I know I'm a curmudgeon, but it seems to me that if their "company 
policy" is causing a problem while trying to use free software, then the 
company should pay to fix it.

 ? Kevin

On 8/26/2024 10:42 AM, Therneau, Terry M., Ph.D. via R-devel wrote:
> The survival package makes significant use of the "specials" argument of terms(), before
> calling model.frame; it is part of nearly every modeling function. The reason is that
> strata argments simply have to be handled differently than other things on the right hand
> side. Likewise for tt() and cluster(), though those are much less frequent.
>
> I now get "bug reports" from the growing segment that believes one should put
> packagename:: in front of every single instance.?? For instance
>   ????? fit <- survival::survdiff( survival::Surv(time, status) ~ ph.karno +
> survival::strata(inst),? data= survival::lung)
>
> This fails to give the correct answer because it fools terms(formula, specials=
> "strata").??? I've stood firm in my response of "that's your bug, not mine", but I begin
> to believe I am swimming uphill.?? One person responded that it was company policy to
> qualify everything.
>
> I don't see an easy way to fix survival, and even if I did it would be a tremendous amout
> of work.?? What are other's thoughts?
>
> Terry
>
>
>


From berw|n@tur|@ch @end|ng |rom gm@||@com  Mon Aug 26 18:16:43 2024
From: berw|n@tur|@ch @end|ng |rom gm@||@com (Berwin A Turlach)
Date: Tue, 27 Aug 2024 00:16:43 +0800
Subject: [Rd] specials and ::
In-Reply-To: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
Message-ID: <20240827001235.65de0157@absentia>

G'day Terry,

On Mon, 26 Aug 2024 09:42:10 -0500
"Therneau, Terry M., Ph.D. via R-devel" <r-devel at r-project.org> wrote:

[...]
> I now get "bug reports" from the growing segment that believes one
> should put packagename:: in front of every single instance.?
[...]
> What are other's thoughts?

Not that I want to start a flame war, or say anything controversial,
but IMHO people who want to put packagename:: in front of every
function do not understand S3 method dispatch and are just clutching at
a comfort blanket that sets them up for failure. ;-)

Admittedly, it is now quite a while back that I had the joy of
debugging the following situation (but it happened at least twice in
this millennium if memory serves correctly):

  * Author of package X relies on foo(bar) to be dispatched to
    foo.default().
  * Author of package Y loads a zillion packages, one of which defines
    (and registers) a method foo.bar()
  * User first attaches package X and then package Y (well, order does
    not really matter).
    There is no warning about masked functions (why would there be?) or
    anything else.
  * User calls function in package X that relies on foo(bar) to be
    dispatched to foo.default(), but it is now dispatched to foo.bar().
  * foo.bar() returns something different to foo.default() on an object
    of class bar and, hence, all hell breaks lose in the function in
    package X that used the call foo(bar).

And you can put packagename:: in front of every function call in
package X (and Y and Z &c) until the cows come home and it would not
avoid this problem.

Sorry, but except if the "put package:: in front of every function"
crowd does not also start advocating that generics are not be used but
rather the desired method be called directly, I don't think they can be
taken seriously.

Just my 0.02 (Australian of course).

Cheers,

	Berwin


From berw|n@tur|@ch @end|ng |rom gm@||@com  Mon Aug 26 18:23:42 2024
From: berw|n@tur|@ch @end|ng |rom gm@||@com (Berwin A Turlach)
Date: Tue, 27 Aug 2024 00:23:42 +0800
Subject: [Rd] specials and ::
In-Reply-To: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
Message-ID: <20240827001235.65de0157@absentia>

G'day Terry,

On Mon, 26 Aug 2024 09:42:10 -0500
"Therneau, Terry M., Ph.D. via R-devel" <r-devel at r-project.org> wrote:

[...]
> I now get "bug reports" from the growing segment that believes one
> should put packagename:: in front of every single instance.?
[...]
> What are other's thoughts?

Not that I want to start a flame war, or say anything controversial,
but IMHO people who want to put packagename:: in front of every
function do not understand S3 method dispatch and are just clutching at
a comfort blanket that sets them up for failure. ;-)

Admittedly, it is now quite a while back that I had the joy of
debugging the following situation (but it happened at least twice in
this millennium if memory serves correctly):

  * Author of package X relies on foo(bar) to be dispatched to
    foo.default().
  * Author of package Y loads a zillion packages, one of which defines
    (and registers) a method foo.bar()
  * User first attaches package X and then package Y (well, order does
    not really matter).
    There is no warning about masked functions (why would there be?) or
    anything else.
  * User calls function in package X that relies on foo(bar) to be
    dispatched to foo.default(), but it is now dispatched to foo.bar().
  * foo.bar() returns something different to foo.default() on an object
    of class bar and, hence, all hell breaks lose in the function in
    package X that used the call foo(bar).

And you can put packagename:: in front of every function call in
package X (and Y and Z &c) until the cows come home and it would not
avoid this problem.

Sorry, but except if the "put package:: in front of every function"
crowd does not also start advocating that generics are not be used but
rather the desired method be called directly, I don't think they can be
taken seriously.

Just my 0.02 (Australian of course).

Cheers,

	Berwin


From chr|@ @end|ng |rom ckb|@ck@org  Mon Aug 26 18:26:46 2024
From: chr|@ @end|ng |rom ckb|@ck@org (Chris Black)
Date: Mon, 26 Aug 2024 09:26:46 -0700
Subject: [Rd] specials and ::
In-Reply-To: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
Message-ID: <B78A75F8-97BC-4EBC-8E16-374B7CDB4781@ckblack.org>

It?s completely reasonable to decline to do extra work to support it, but at the same time: Qualified calls are widely used and recommended, and users are also being completely reasonable when they try to use them (probably without checking the manual!) and expect them to work.

Would there be a tolerably easy way to make the fit fail loudly on `survival::strata(?)` rather than return the wrong result?



> On Aug 26, 2024, at 7:42?AM, Therneau, Terry M., Ph.D. via R-devel <r-devel at r-project.org> wrote:
> 
> The survival package makes significant use of the "specials" argument of terms(), before 
> calling model.frame; it is part of nearly every modeling function. The reason is that 
> strata argments simply have to be handled differently than other things on the right hand 
> side. Likewise for tt() and cluster(), though those are much less frequent.
> 
> I now get "bug reports" from the growing segment that believes one should put 
> packagename:: in front of every single instance.   For instance
>       fit <- survival::survdiff( survival::Surv(time, status) ~ ph.karno + 
> survival::strata(inst),  data= survival::lung)
> 
> This fails to give the correct answer because it fools terms(formula, specials= 
> "strata").    I've stood firm in my response of "that's your bug, not mine", but I begin 
> to believe I am swimming uphill.   One person responded that it was company policy to 
> qualify everything.
> 
> I don't see an easy way to fix survival, and even if I did it would be a tremendous amout 
> of work.   What are other's thoughts?
> 
> Terry
> 
> 
> 
> -- 
> 
> Terry M Therneau, PhD
> Department of Quantitative Health Sciences
> Mayo Clinic
> therneau at mayo.edu
> 
> "TERR-ree THUR-noh"
> 
> [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From berw|n@tur|@ch @end|ng |rom gm@||@com  Mon Aug 26 18:28:07 2024
From: berw|n@tur|@ch @end|ng |rom gm@||@com (Berwin A Turlach)
Date: Tue, 27 Aug 2024 00:28:07 +0800
Subject: [Rd] specials and ::
In-Reply-To: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
Message-ID: <CACRw43t+aM0h2k2Bb0BCTK35=JBhvn39ubXTdXD67q84n3h8qA@mail.gmail.com>

G'day Terry,

On Mon, 26 Aug 2024 09:42:10 -0500
"Therneau, Terry M., Ph.D. via R-devel" <r-devel at r-project.org> wrote:

[...]

> I now get "bug reports" from the growing segment that believes one
> should put packagename:: in front of every single instance.
[...]

> What are other's thoughts?

Not that I want to start a flame war, or say anything controversial,
but IMHO people who want to put packagename:: in front of every
function do not understand S3 method dispatch and are just clutching at
a comfort blanket that sets them up for failure. ;-)

Admittedly, it is now quite a while back that I had the joy of
debugging the following situation (but it happened at least twice in
this millennium if memory serves correctly):

  * Author of package X relies on foo(bar) to be dispatched to
    foo.default().
  * Author of package Y loads a zillion packages, one of which defines
    (and registers) a method foo.bar()
  * User first attaches package X and then package Y (well, order does
    not.
    There is no warning about masked functions (why would there be?) or
    anything else.
  * User calls function in package X that relies on foo(bar) to be
    dispatched to foo.default(), but it is now dispatched to foo.bar().
  * foo.bar() returns something different to foo.default() on an object
    of class bar and, hence, all hell breaks lose in the function in
    package X that used the call foo(bar).

And you can put packagename:: in front of every function call in
package X (and Y and Z &c) until the cows come home and it would not
avoid this problem.

Sorry, but except if the "put package:: in front of every function"
crowd does not also start advocating that generics are not be used but
rather the desired method be called directly, I don't think they can be
taken seriously.

Just my 0.02 (Australian of course).

Cheers,

        Berwin

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Aug 26 18:34:25 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 26 Aug 2024 12:34:25 -0400
Subject: [Rd] specials and ::
In-Reply-To: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
Message-ID: <706f24df-54e6-490e-bfae-f66937c83312@gmail.com>

On 2024-08-26 10:42 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> The survival package makes significant use of the "specials" argument of terms(), before
> calling model.frame; it is part of nearly every modeling function. The reason is that
> strata argments simply have to be handled differently than other things on the right hand
> side. Likewise for tt() and cluster(), though those are much less frequent.
> 
> I now get "bug reports" from the growing segment that believes one should put
> packagename:: in front of every single instance.?? For instance
>   ????? fit <- survival::survdiff( survival::Surv(time, status) ~ ph.karno +
> survival::strata(inst),? data= survival::lung)
> 
> This fails to give the correct answer because it fools terms(formula, specials=
> "strata").??? I've stood firm in my response of "that's your bug, not mine", but I begin
> to believe I am swimming uphill.?? One person responded that it was company policy to
> qualify everything.
> 
> I don't see an easy way to fix survival, and even if I did it would be a tremendous amout
> of work.?? What are other's thoughts?

I received a similar complaint about the tables package, which had 
assumed during argument processing that it was on the search list in 
order to find a function (see 
https://github.com/dmurdoch/tables/issues/30 if you want the details). 
In my case there's only one function exported by tables that wasn't 
being found, "labelSubset".

I don't know any of the details of the survival problems.  When I try 
your example code above without attaching survival, it appears to work. 
So my solution might be irrelevant to you.

The way I found to work around this was to use this code early in the 
processing, when it is trying to turn the data argument into an environment:

     parent <- if (is.environment(data)) data else environment(table)
     if (!exists("labelSubset", envir = parent)) {
       withTableFns <- new.env(parent = parent)
       withTableFns$labelSubset <- labelSubset
     } else
       withTableFns <- parent

     if (is.null(data))
     	data <- withTableFns
     else if (is.list(data))
     	data <- list2env(data, parent = withTableFns)
     else if (!is.environment(data))
     	stop("'data' must be a dataframe, list or environment")
     	
This inserts a new environment containing just that one tables function.

One issue is if a user has "labelSubset" already in the environment; I 
decided to use that one on the assumption that the user did it 
intentionally.  It would have been better to use a name that was less 
likely to show up in another package, but it's old code.

This isn't on CRAN yet, so I'd be interested in hearing about problems 
with this approach, or better solutions.

Duncan Murdoch


From w||||@mwdun|@p @end|ng |rom gm@||@com  Mon Aug 26 18:35:55 2024
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Mon, 26 Aug 2024 09:35:55 -0700
Subject: [Rd] specials and ::
In-Reply-To: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
Message-ID: <CAHqSRuSdhv_14hEyqN38Jv_BbqsjpO9xH37Duwe3u9wcwB9www@mail.gmail.com>

One could define a function that removes all instances of 'survival::' from
an expression, returning the fixed up expression, and applying it to all
formulae given as arguments to your survival functions.  E.g.,

removeDoubleColonSurvival <- function (formula)
{
  doubleColon <- as.name("::")
  survival <- as.name("survival")
  fix <- function(expr) {
    if (is.call(expr) && identical(expr[[1]], doubleColon) &&
identical(expr[[2]], survival)){
      expr <- expr[[3]]
    } else if (is.call(expr)) {
      for(i in seq_along(expr)){
        expr[[i]] <- fix(expr[[i]])
      }
    }
    expr
  }
  fix(formula)
}

identical(f(y ~ f(x) + survival::g(x,10) + z),
                  y ~ f(x) + g(x,10) + z)
# [1] TRUE

-Bill

On Mon, Aug 26, 2024 at 7:42?AM Therneau, Terry M., Ph.D. via R-devel <
r-devel at r-project.org> wrote:

> The survival package makes significant use of the "specials" argument of
> terms(), before
> calling model.frame; it is part of nearly every modeling function. The
> reason is that
> strata argments simply have to be handled differently than other things on
> the right hand
> side. Likewise for tt() and cluster(), though those are much less frequent.
>
> I now get "bug reports" from the growing segment that believes one should
> put
> packagename:: in front of every single instance.   For instance
>        fit <- survival::survdiff( survival::Surv(time, status) ~ ph.karno
> +
> survival::strata(inst),  data= survival::lung)
>
> This fails to give the correct answer because it fools terms(formula,
> specials=
> "strata").    I've stood firm in my response of "that's your bug, not
> mine", but I begin
> to believe I am swimming uphill.   One person responded that it was
> company policy to
> qualify everything.
>
> I don't see an easy way to fix survival, and even if I did it would be a
> tremendous amout
> of work.   What are other's thoughts?
>
> Terry
>
>
>
> --
>
> Terry M Therneau, PhD
> Department of Quantitative Health Sciences
> Mayo Clinic
> therneau at mayo.edu
>
> "TERR-ree THUR-noh"
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Aug 26 18:42:03 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 26 Aug 2024 12:42:03 -0400
Subject: [Rd] specials and ::
In-Reply-To: <B78A75F8-97BC-4EBC-8E16-374B7CDB4781@ckblack.org>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
 <B78A75F8-97BC-4EBC-8E16-374B7CDB4781@ckblack.org>
Message-ID: <32188110-d9af-415a-a752-8fc19d258552@gmail.com>

On 2024-08-26 12:26 p.m., Chris Black wrote:
> It?s completely reasonable to decline to do extra work to support it, but at the same time: Qualified calls are widely used and recommended, and users are also being completely reasonable when they try to use them (probably without checking the manual!) and expect them to work.

If the issues in survival are the same as the issues I saw in the tables 
package, the way to issue such a message would be to put code like

  if (! ("package:survival" %in% search()))
    stop("'survival' needs to be attached using library() or require()")

in functions that could trigger the problems.

Duncan Murdoch

> 
> Would there be a tolerably easy way to make the fit fail loudly on `survival::strata(?)` rather than return the wrong result?
> 
> 
> 
>> On Aug 26, 2024, at 7:42?AM, Therneau, Terry M., Ph.D. via R-devel <r-devel at r-project.org> wrote:
>>
>> The survival package makes significant use of the "specials" argument of terms(), before
>> calling model.frame; it is part of nearly every modeling function. The reason is that
>> strata argments simply have to be handled differently than other things on the right hand
>> side. Likewise for tt() and cluster(), though those are much less frequent.
>>
>> I now get "bug reports" from the growing segment that believes one should put
>> packagename:: in front of every single instance.   For instance
>>        fit <- survival::survdiff( survival::Surv(time, status) ~ ph.karno +
>> survival::strata(inst),  data= survival::lung)
>>
>> This fails to give the correct answer because it fools terms(formula, specials=
>> "strata").    I've stood firm in my response of "that's your bug, not mine", but I begin
>> to believe I am swimming uphill.   One person responded that it was company policy to
>> qualify everything.
>>
>> I don't see an easy way to fix survival, and even if I did it would be a tremendous amout
>> of work.   What are other's thoughts?
>>
>> Terry
>>
>>
>>
>> -- 
>>
>> Terry M Therneau, PhD
>> Department of Quantitative Health Sciences
>> Mayo Clinic
>> therneau at mayo.edu
>>
>> "TERR-ree THUR-noh"
>>
>> [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |kry|ov @end|ng |rom d|@root@org  Mon Aug 26 18:43:38 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Mon, 26 Aug 2024 19:43:38 +0300
Subject: [Rd] specials and ::
In-Reply-To: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
Message-ID: <20240826194322.02e03aee@Tarkus>

? Mon, 26 Aug 2024 09:42:10 -0500
"Therneau, Terry M., Ph.D. via R-devel" <r-devel at r-project.org> ?????:

> For instance
>  ????? fit <- survival::survdiff( survival::Surv(time, status) ~
> ph.karno + survival::strata(inst),? data= survival::lung)
> 
> This fails to give the correct answer because it fools terms(formula,
> specials= "strata").

Apologies if the following has no chance to work for reasons obvious to
everyone else, but *currently*, terms(formula, specials= c('strata',
'survival::strata')) seems to recognise `survival::strata`. Would it be
possible to then post-process the terms object and retain only one kind
of 'strata' special?

Having said that, if https://bugs.r-project.org/show_bug.cgi?id=18568
is merged, this will probably break and will instead require
recognising `::` as a special and then manually figuring out which
function is being imported from which package.


-- 
Best regards,
Ivan


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Aug 26 18:58:06 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 26 Aug 2024 12:58:06 -0400
Subject: [Rd] specials and ::
In-Reply-To: <706f24df-54e6-490e-bfae-f66937c83312@gmail.com>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
 <706f24df-54e6-490e-bfae-f66937c83312@gmail.com>
Message-ID: <c3d10de4-0536-4ca0-a761-f4c5d9718ef8@gmail.com>

On 2024-08-26 12:34 p.m., Duncan Murdoch wrote:
> On 2024-08-26 10:42 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
>> The survival package makes significant use of the "specials" argument of terms(), before
>> calling model.frame; it is part of nearly every modeling function. The reason is that
>> strata argments simply have to be handled differently than other things on the right hand
>> side. Likewise for tt() and cluster(), though those are much less frequent.
>>
>> I now get "bug reports" from the growing segment that believes one should put
>> packagename:: in front of every single instance.?? For instance
>>    ????? fit <- survival::survdiff( survival::Surv(time, status) ~ ph.karno +
>> survival::strata(inst),? data= survival::lung)
>>
>> This fails to give the correct answer because it fools terms(formula, specials=
>> "strata").??? I've stood firm in my response of "that's your bug, not mine", but I begin
>> to believe I am swimming uphill.?? One person responded that it was company policy to
>> qualify everything.
>>
>> I don't see an easy way to fix survival, and even if I did it would be a tremendous amout
>> of work.?? What are other's thoughts?
> 
> I received a similar complaint about the tables package, which had
> assumed during argument processing that it was on the search list in
> order to find a function (see
> https://github.com/dmurdoch/tables/issues/30 if you want the details).
> In my case there's only one function exported by tables that wasn't
> being found, "labelSubset".
> 
> I don't know any of the details of the survival problems.  When I try
> your example code above without attaching survival, it appears to work.
> So my solution might be irrelevant to you.
> 
> The way I found to work around this was to use this code early in the
> processing, when it is trying to turn the data argument into an environment:
> 
>       parent <- if (is.environment(data)) data else environment(table)
>       if (!exists("labelSubset", envir = parent)) {
>         withTableFns <- new.env(parent = parent)
>         withTableFns$labelSubset <- labelSubset
>       } else
>         withTableFns <- parent
> 
>       if (is.null(data))
>       	data <- withTableFns
>       else if (is.list(data))
>       	data <- list2env(data, parent = withTableFns)
>       else if (!is.environment(data))
>       	stop("'data' must be a dataframe, list or environment")

Of course, posting this meant I discovered a bug in it:  if 
is.environment(data) was TRUE, the modification was ignored.  Line 8 
should be

        if (is.null(data) || is.environment(data))

to handle that case.

Duncan Murdoch

>       	
> This inserts a new environment containing just that one tables function.
> 
> One issue is if a user has "labelSubset" already in the environment; I
> decided to use that one on the assumption that the user did it
> intentionally.  It would have been better to use a name that was less
> likely to show up in another package, but it's old code.
> 
> This isn't on CRAN yet, so I'd be interested in hearing about problems
> with this approach, or better solutions.
> 
> Duncan Murdoch


From therne@u @end|ng |rom m@yo@edu  Mon Aug 26 21:44:17 2024
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 26 Aug 2024 14:44:17 -0500
Subject: [Rd] specials and ::
In-Reply-To: <20240827001235.65de0157@absentia>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
 <20240827001235.65de0157@absentia>
Message-ID: <a20187d6-a111-4a5e-90ee-a3107dc1b73a@mayo.edu>

Thanks to all for the responses. A couple notes It is nice to get the overall feedback 
that I'm not nuts to be terribly annoyed by this, and don't need to fix it tomorrow. 
Berwin 's note brings to mind the old adage that "The reason it is so hard to make things 
foolproof is that fools are so ingeneous." 1. Using survival::strata(inst) in the rhs of 
the survdiff call does not generate an error message. Because the stata function is not 
recognized as special one instead gets the wrong answer. (Or I should say, "the correct 
answer to a different question".) Ditto for most of the rest of the package functions. The 
very worst kind of bug. 2. Using specials =c("strata", "survival::strata") could work. I 
always process the result with a small "untangle.specials" function, a leftover from when 
R and Splus returned slightly different formula structures. I could put post-processing 
there. I'll think on this some more. But Ivan's follow-up was not encouraging. 3. Bill's 
suggestion to pre-fix the formula. Not a bad idea. If I followed the Call <- match.call() 
that lives at the top of my code by an immediate fix of the formula portion of the list, 
then all else would flow. And as perhaps a bit of a snark, the user would see the 
corrected form in their printout. The nuts who want to call a survival routine without 
attaching the name space will be out of luck though. Terry
	[[alternative HTML version deleted]]


From j|nghu@zh@o @end|ng |rom hotm@||@com  Mon Aug 26 23:59:48 2024
From: j|nghu@zh@o @end|ng |rom hotm@||@com (jing hua zhao)
Date: Mon, 26 Aug 2024 21:59:48 +0000
Subject: [Rd] CRAN package submission
In-Reply-To: <CWLP123MB629934763FDA8C5AAD89C811A58B2@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
References: <E1shNq2-009CgQ-1v@gannet.stats.ox.ac.uk>
 <CWLP123MB6299C1869E98227915B50C19A58B2@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
 <CABghstR4a8asYwQmkEmFUetUChYvNOCOzFdLe72Z4MgvawJBsg@mail.gmail.com>
 <CWLP123MB629934763FDA8C5AAD89C811A58B2@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <CWLP123MB6299D229D2B939A66A620B1DA58B2@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>

Hi Ben / All,

It turned out to be the most basic - I found message from CRAN in the junk email folder (we have emails on MicroSoft server from which I still received the confirmation in Inbox!). As expected, I can see from foghorn,

> cran_incoming()
# A tibble: 108 ? 5
   package         version    cran_folder time                size
   <chr>           <pckg_vrs> <chr>       <dttm>              <chr>
1 gap             1.6        pretest     2024-08-26 23:53:00 4.3M
2 dst             1.7.1      pretest     2024-08-26 23:33:00 494K
3 cpp11           0.5.0      pretest     2024-08-26 23:20:00 263K
4 GPEMR           0.1.0      pretest     2024-08-26 23:13:00 277K
...

Best wishes,


Jing Hua


From: jing hua zhao
Sent: Monday, August 26, 2024 12:05 PM
To: Ben Bolker <bbolker at gmail.com>
Cc: R-devel <R-devel at r-project.org>
Subject: RE: [Rd] CRAN package submission

Thanks for the suggestion - I gather I might have done something wrong , since I can see,

>        cran_incoming() |> data.frame()
                 package  version cran_folder                time size
1                   ghyp    1.6.5     pretest 2024-08-26 12:54:00 1.8M
...

It is nice to know about the package and in my case I didn't receive email (so as to click) to proceed to Step 3 of the submission.

From: Ben Bolker <bbolker at gmail.com<mailto:bbolker at gmail.com>>
Sent: Monday, August 26, 2024 11:43 AM
To: jing hua zhao <jinghuazhao at hotmail.com<mailto:jinghuazhao at hotmail.com>>
Cc: R-devel <R-devel at r-project.org<mailto:R-devel at r-project.org>>
Subject: Re: [Rd] CRAN package submission


Try the foghorn package for checking the status of your submission in the CRAN queue?

On Mon, Aug 26, 2024, 4:46 AM jing hua zhao <jinghuazhao at hotmail.com<mailto:jinghuazhao at hotmail.com>> wrote:
Dear CRAN / All,

I appeared not to receive any email notification after upload a package update (to furnish the confirmation) -- is the system down?

Many thanks,



Jing Hua

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From jo@|@h@p@rry @end|ng |rom gm@||@com  Tue Aug 27 00:08:56 2024
From: jo@|@h@p@rry @end|ng |rom gm@||@com (Josiah Parry)
Date: Mon, 26 Aug 2024 15:08:56 -0700
Subject: [Rd] specials and ::
In-Reply-To: <a20187d6-a111-4a5e-90ee-a3107dc1b73a@mayo.edu>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
 <20240827001235.65de0157@absentia>
 <a20187d6-a111-4a5e-90ee-a3107dc1b73a@mayo.edu>
Message-ID: <CAL3ufU+nC1iFuC0pf2TO+xLXqtXXe51zs0ErKohTOo1QaidyTg@mail.gmail.com>

I wouldn't go so far as to call people who don't want to wholesale attach
namespaces as "nuts."

{survival} is provided via the {censored} R package to integrate into the
{tidymodels} ecosystem.
And the reverse imports of the package is massive! Assuming that each and
every one of them
should attach the entire namespace is a bit presumptuous!

I am one of those nuts that likes to namespace everything. It just takes
one conflicting method to
taint it :)



On Mon, Aug 26, 2024 at 12:44?PM Therneau, Terry M., Ph.D. via R-devel <
r-devel at r-project.org> wrote:

> Thanks to all for the responses. A couple notes It is nice to get the
> overall feedback
> that I'm not nuts to be terribly annoyed by this, and don't need to fix it
> tomorrow.
> Berwin 's note brings to mind the old adage that "The reason it is so hard
> to make things
> foolproof is that fools are so ingeneous." 1. Using survival::strata(inst)
> in the rhs of
> the survdiff call does not generate an error message. Because the stata
> function is not
> recognized as special one instead gets the wrong answer. (Or I should say,
> "the correct
> answer to a different question".) Ditto for most of the rest of the
> package functions. The
> very worst kind of bug. 2. Using specials =c("strata", "survival::strata")
> could work. I
> always process the result with a small "untangle.specials" function, a
> leftover from when
> R and Splus returned slightly different formula structures. I could put
> post-processing
> there. I'll think on this some more. But Ivan's follow-up was not
> encouraging. 3. Bill's
> suggestion to pre-fix the formula. Not a bad idea. If I followed the Call
> <- match.call()
> that lives at the top of my code by an immediate fix of the formula
> portion of the list,
> then all else would flow. And as perhaps a bit of a snark, the user would
> see the
> corrected form in their printout. The nuts who want to call a survival
> routine without
> attaching the name space will be out of luck though. Terry
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Tue Aug 27 02:06:50 2024
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 27 Aug 2024 00:06:50 +0000
Subject: [Rd] specials and ::
In-Reply-To: <CAL3ufU+nC1iFuC0pf2TO+xLXqtXXe51zs0ErKohTOo1QaidyTg@mail.gmail.com>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
 <20240827001235.65de0157@absentia>
 <a20187d6-a111-4a5e-90ee-a3107dc1b73a@mayo.edu>
 <CAL3ufU+nC1iFuC0pf2TO+xLXqtXXe51zs0ErKohTOo1QaidyTg@mail.gmail.com>
Message-ID: <BL0PR01MB4658EE542356772F711591C3AE8B2@BL0PR01MB4658.prod.exchangelabs.com>

The survival package itself has a tiny list of reverse imports, so there is no savings from avoiding the survival namespace.   (I don?t have a choice: since it is on the recommended list I can only depend on base and recommended.  The vignettes in particular would be nicer in knitr than Sweave?).   So yes, I think that avoiding this particular namespace is being a bit excessive.

The penchant of tidy users to ?import the universe? is a separate issue.   I have colleagues with a dozen ?standard?s that they place at the top of every analysis file whether they need them or not.   I work in medical research and it is important to be able to exactly recreate an analysis later, e.g., when a paper review or more seriously an FDA auditor appears, adding lots of dependencies just makes that harder.  But that is a within-group debate that I will lose (?old fogey?).

But perhaps most pertinent: I understand using survival::coxph() on the outer call, but futher adding survival::Surv or survival::strata or ? WITHIN  said call is completely unnecessary, since the routine looks in its own namespace first.   (Unless you start mucking about with the language model, with posix rather likes to do?)

Terry T

From: Josiah Parry <josiah.parry at gmail.com>
Date: Monday, August 26, 2024 at 5:09?PM
To: Therneau, Terry M., Ph.D. <therneau at mayo.edu>
Cc: r-devel at r-project.org <r-devel at r-project.org>
Subject: [EXTERNAL] Re: [Rd] specials and ::
I wouldn't go so far as to call people who don't want to wholesale attach namespaces as "nuts."

{survival} is provided via the {censored} R package to integrate into the {tidymodels} ecosystem.
And the reverse imports of the package is massive! Assuming that each and every one of them
should attach the entire namespace is a bit presumptuous!

I am one of those nuts that likes to namespace everything. It just takes one conflicting method to
taint it :)



On Mon, Aug 26, 2024 at 12:44?PM Therneau, Terry M., Ph.D. via R-devel <r-devel at r-project.org<mailto:r-devel at r-project.org>> wrote:
Thanks to all for the responses. A couple notes It is nice to get the overall feedback
that I'm not nuts to be terribly annoyed by this, and don't need to fix it tomorrow.
Berwin 's note brings to mind the old adage that "The reason it is so hard to make things
foolproof is that fools are so ingeneous." 1. Using survival::strata(inst) in the rhs of
the survdiff call does not generate an error message. Because the stata function is not
recognized as special one instead gets the wrong answer. (Or I should say, "the correct
answer to a different question".) Ditto for most of the rest of the package functions. The
very worst kind of bug. 2. Using specials =c("strata", "survival::strata") could work. I
always process the result with a small "untangle.specials" function, a leftover from when
R and Splus returned slightly different formula structures. I could put post-processing
there. I'll think on this some more. But Ivan's follow-up was not encouraging. 3. Bill's
suggestion to pre-fix the formula. Not a bad idea. If I followed the Call <- match.call()
that lives at the top of my code by an immediate fix of the formula portion of the list,
then all else would flow. And as perhaps a bit of a snark, the user would see the
corrected form in their printout. The nuts who want to call a survival routine without
attaching the name space will be out of luck though. Terry
        [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Tue Aug 27 10:38:18 2024
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 27 Aug 2024 10:38:18 +0200
Subject: [Rd] specials and ::
In-Reply-To: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
Message-ID: <7731F5CF-9FB5-43B2-BDE5-1348949AC8C4@gmail.com>

In my view, that's just plain wrong, because strata() is not a function but a special operator in a model formula. Wouldn't it also blow up on stats::offset()?

Oh, yes it would:

> lm(y~x+offset(z))

Call:
lm(formula = y ~ x + offset(z))

Coefficients:
(Intercept)            x  
     0.7350       0.0719  

> lm(y~x+stats::offset(z))

Call:
lm(formula = y ~ x + stats::offset(z))

Coefficients:
     (Intercept)                 x  stats::offset(z)  
          0.6457            0.1078            0.8521  


Or, to be facetious:

> lm(y~base::"+"(x,z))

Call:
lm(formula = y ~ base::"+"(x, z))

Coefficients:
    (Intercept)  base::"+"(x, z)  
         0.4516           0.4383  



-pd

> On 26 Aug 2024, at 16:42 , Therneau, Terry M., Ph.D. via R-devel <r-devel at r-project.org> wrote:
> 
> The survival package makes significant use of the "specials" argument of terms(), before 
> calling model.frame; it is part of nearly every modeling function. The reason is that 
> strata argments simply have to be handled differently than other things on the right hand 
> side. Likewise for tt() and cluster(), though those are much less frequent.
> 
> I now get "bug reports" from the growing segment that believes one should put 
> packagename:: in front of every single instance.   For instance
>       fit <- survival::survdiff( survival::Surv(time, status) ~ ph.karno + 
> survival::strata(inst),  data= survival::lung)
> 
> This fails to give the correct answer because it fools terms(formula, specials= 
> "strata").    I've stood firm in my response of "that's your bug, not mine", but I begin 
> to believe I am swimming uphill.   One person responded that it was company policy to 
> qualify everything.
> 
> I don't see an easy way to fix survival, and even if I did it would be a tremendous amout 
> of work.   What are other's thoughts?
> 
> Terry
> 
> 
> 
> -- 
> 
> Terry M Therneau, PhD
> Department of Quantitative Health Sciences
> Mayo Clinic
> therneau at mayo.edu
> 
> "TERR-ree THUR-noh"
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Tue Aug 27 11:55:16 2024
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 27 Aug 2024 11:55:16 +0200
Subject: [Rd] transform
In-Reply-To: <CAP01uR=DJOOJFBh-kwGAstC1aryt8uMh7c0vceYRYAtyeD59SA@mail.gmail.com>
References: <CAP01uR=DJOOJFBh-kwGAstC1aryt8uMh7c0vceYRYAtyeD59SA@mail.gmail.com>
Message-ID: <9629D1E6-A493-41E4-80EB-1A2289F42F60@gmail.com>

Yes. A quirk, rather than a bug I'd say. One issue is that the internal logic of transform() relies on

    e <- eval(substitute(list(...)), `_data`, parent.frame())
    tags <- names(e)

so untagged entries in ... will not be included. The other part is a direct consequence of a quirk in data.frame:

> data.frame(head(airquality), y=data.frame(x=rnorm(6)))
  Ozone Solar.R Wind Temp Month Day          x
1    41     190  7.4   67     5   1  0.3075402
2    36     118  8.0   72     5   2  0.7765265
3    12     149 12.6   74     5   3  0.3909341
4    18     313 11.5   62     5   4  0.4733170
5    NA      NA 14.3   56     5   5 -0.6947709
6    28      NA 14.9   66     5   6  0.1126040

whereas (the wisdom of this escapes me)

> data.frame(head(airquality), y=data.frame(x=rnorm(6),z=rnorm(6)))
  Ozone Solar.R Wind Temp Month Day        y.x         y.z
1    41     190  7.4   67     5   1 -0.9250228  0.46483406
2    36     118  8.0   72     5   2 -0.5035793  0.28822668
...

On the whole, I think that transform was never designed (nor documented) to take data frame arguments, so caveat emptor.

- Peter


> On 24 Aug 2024, at 16:41 , Gabor Grothendieck <ggrothendieck at gmail.com> wrote:
> 
> One oddity in transform that I recently noticed.  It seems that to include
> a one-column data frame in the arguments one must name it even though the
> name is ignored.  If the data frame has more than one column then it must
> also be named but in that case it is not ignored and the names are made up of
> a combination of that name and the data frame's names.  I would have thought
> that if we did not want a combination of names we would just not name the
> argument.
> 
>  # ignores second argument returning BOD unchanged
>  transform(BOD, data.frame(y = 1:6)) |> names()
>  ## [1] "Time"   "demand"
> 
>  # ignores second argument returning BOD unchanged
>  transform(BOD, data.frame(y = 1:6, z = 6:1)) |> names()
>  ## [1] "Time"   "demand"
> 
>  # with one column in data frame it adds the column and names it y ignoring x
>  transform(BOD, x = data.frame(y = 1:6)) |> names()
>  ## [1] "Time"   "demand" "y"
> 
>  # with multiple columns in data frame it uses x.y and x.z as names
>  transform(BOD, data.frame(y = 1:6, z = 6:1)) |> names()
>  ## [1] "Time"   "demand" "x.y"    "x.z"
> 
> 
> -- 
> Statistics & Software Consulting
> GKX Group, GKX Associates Inc.
> tel: 1-877-GKX-GROUP
> email: ggrothendieck at gmail.com
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From ggrothend|eck @end|ng |rom gm@||@com  Tue Aug 27 14:45:46 2024
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Tue, 27 Aug 2024 08:45:46 -0400
Subject: [Rd] transform
In-Reply-To: <9629D1E6-A493-41E4-80EB-1A2289F42F60@gmail.com>
References: <CAP01uR=DJOOJFBh-kwGAstC1aryt8uMh7c0vceYRYAtyeD59SA@mail.gmail.com>
 <9629D1E6-A493-41E4-80EB-1A2289F42F60@gmail.com>
Message-ID: <CAP01uR=cLcG9MPtVsuztc+pvnmoHNk9cNH0G-zMd5eTxb9V0AQ@mail.gmail.com>

It could be enhanced to handle data frame argos.  Unnamed args are
currently just ignored so adding such would be backwards compatible.
Any interest in this?

On Tue, Aug 27, 2024 at 5:55?AM peter dalgaard <pdalgd at gmail.com> wrote:
>
> Yes. A quirk, rather than a bug I'd say. One issue is that the internal logic of transform() relies on
>
>     e <- eval(substitute(list(...)), `_data`, parent.frame())
>     tags <- names(e)
>
> so untagged entries in ... will not be included. The other part is a direct consequence of a quirk in data.frame:
>
> > data.frame(head(airquality), y=data.frame(x=rnorm(6)))
>   Ozone Solar.R Wind Temp Month Day          x
> 1    41     190  7.4   67     5   1  0.3075402
> 2    36     118  8.0   72     5   2  0.7765265
> 3    12     149 12.6   74     5   3  0.3909341
> 4    18     313 11.5   62     5   4  0.4733170
> 5    NA      NA 14.3   56     5   5 -0.6947709
> 6    28      NA 14.9   66     5   6  0.1126040
>
> whereas (the wisdom of this escapes me)
>
> > data.frame(head(airquality), y=data.frame(x=rnorm(6),z=rnorm(6)))
>   Ozone Solar.R Wind Temp Month Day        y.x         y.z
> 1    41     190  7.4   67     5   1 -0.9250228  0.46483406
> 2    36     118  8.0   72     5   2 -0.5035793  0.28822668
> ...
>
> On the whole, I think that transform was never designed (nor documented) to take data frame arguments, so caveat emptor.
>
> - Peter
>
>
> > On 24 Aug 2024, at 16:41 , Gabor Grothendieck <ggrothendieck at gmail.com> wrote:
> >
> > One oddity in transform that I recently noticed.  It seems that to include
> > a one-column data frame in the arguments one must name it even though the
> > name is ignored.  If the data frame has more than one column then it must
> > also be named but in that case it is not ignored and the names are made up of
> > a combination of that name and the data frame's names.  I would have thought
> > that if we did not want a combination of names we would just not name the
> > argument.
> >
> >  # ignores second argument returning BOD unchanged
> >  transform(BOD, data.frame(y = 1:6)) |> names()
> >  ## [1] "Time"   "demand"
> >
> >  # ignores second argument returning BOD unchanged
> >  transform(BOD, data.frame(y = 1:6, z = 6:1)) |> names()
> >  ## [1] "Time"   "demand"
> >
> >  # with one column in data frame it adds the column and names it y ignoring x
> >  transform(BOD, x = data.frame(y = 1:6)) |> names()
> >  ## [1] "Time"   "demand" "y"
> >
> >  # with multiple columns in data frame it uses x.y and x.z as names
> >  transform(BOD, data.frame(y = 1:6, z = 6:1)) |> names()
> >  ## [1] "Time"   "demand" "x.y"    "x.z"
> >
> >
> > --
> > Statistics & Software Consulting
> > GKX Group, GKX Associates Inc.
> > tel: 1-877-GKX-GROUP
> > email: ggrothendieck at gmail.com
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>


-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From @eb@meyer @end|ng |rom |@u@de  Tue Aug 27 15:16:14 2024
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Tue, 27 Aug 2024 15:16:14 +0200
Subject: [Rd] transform
In-Reply-To: <9629D1E6-A493-41E4-80EB-1A2289F42F60@gmail.com>
References: <CAP01uR=DJOOJFBh-kwGAstC1aryt8uMh7c0vceYRYAtyeD59SA@mail.gmail.com>
 <9629D1E6-A493-41E4-80EB-1A2289F42F60@gmail.com>
Message-ID: <3b755353-abee-41aa-8621-bbfd49876200@fau.de>

Am 27.08.24 um 11:55 schrieb peter dalgaard:
> Yes. A quirk, rather than a bug I'd say. One issue is that the internal logic of transform() relies on
> 
>      e <- eval(substitute(list(...)), `_data`, parent.frame())
>      tags <- names(e)
> 
> so untagged entries in ... will not be included.

... unless at least one is tagged:

R> transform(BOD, 0:5, 1:6)
   Time demand
1    1    8.3
2    2   10.3
3    3   19.0
4    4   16.0
5    5   15.6
6    7   19.8

R> transform(BOD, 0:5, 1:6, foo = 1)
   Time demand 0:5 1:6 foo
1    1    8.3   0   1   1
2    2   10.3   1   2   1
3    3   19.0   2   3   1
4    4   16.0   3   4   1
5    5   15.6   4   5   1
6    7   19.8   5   6   1

But as transform.data.frame is only documented for tagged vector 
expressions, all examples provided in this thread were formal misuses.
(It might make sense to warn about untagged entries.)

Personally, I'd be quite confused about what to expect from syntax like

     transform(BOD, data.frame(y = 1:6))

as really no transformation is specified. Looks like cbind() or 
data.frame() was meant.

	Sebastian


> The other part is a direct consequence of a quirk in data.frame:
> 
>> data.frame(head(airquality), y=data.frame(x=rnorm(6)))
>    Ozone Solar.R Wind Temp Month Day          x
> 1    41     190  7.4   67     5   1  0.3075402
> 2    36     118  8.0   72     5   2  0.7765265
> 3    12     149 12.6   74     5   3  0.3909341
> 4    18     313 11.5   62     5   4  0.4733170
> 5    NA      NA 14.3   56     5   5 -0.6947709
> 6    28      NA 14.9   66     5   6  0.1126040
> 
> whereas (the wisdom of this escapes me)
> 
>> data.frame(head(airquality), y=data.frame(x=rnorm(6),z=rnorm(6)))
>    Ozone Solar.R Wind Temp Month Day        y.x         y.z
> 1    41     190  7.4   67     5   1 -0.9250228  0.46483406
> 2    36     118  8.0   72     5   2 -0.5035793  0.28822668
> ...
> 
> On the whole, I think that transform was never designed (nor documented) to take data frame arguments, so caveat emptor.
> 
> - Peter
> 
> 
>> On 24 Aug 2024, at 16:41 , Gabor Grothendieck <ggrothendieck at gmail.com> wrote:
>>
>> One oddity in transform that I recently noticed.  It seems that to include
>> a one-column data frame in the arguments one must name it even though the
>> name is ignored.  If the data frame has more than one column then it must
>> also be named but in that case it is not ignored and the names are made up of
>> a combination of that name and the data frame's names.  I would have thought
>> that if we did not want a combination of names we would just not name the
>> argument.
>>
>>   # ignores second argument returning BOD unchanged
>>   transform(BOD, data.frame(y = 1:6)) |> names()
>>   ## [1] "Time"   "demand"
>>
>>   # ignores second argument returning BOD unchanged
>>   transform(BOD, data.frame(y = 1:6, z = 6:1)) |> names()
>>   ## [1] "Time"   "demand"
>>
>>   # with one column in data frame it adds the column and names it y ignoring x
>>   transform(BOD, x = data.frame(y = 1:6)) |> names()
>>   ## [1] "Time"   "demand" "y"
>>
>>   # with multiple columns in data frame it uses x.y and x.z as names
>>   transform(BOD, data.frame(y = 1:6, z = 6:1)) |> names()
>>   ## [1] "Time"   "demand" "x.y"    "x.z"
>>
>>
>> -- 
>> Statistics & Software Consulting
>> GKX Group, GKX Associates Inc.
>> tel: 1-877-GKX-GROUP
>> email: ggrothendieck at gmail.com
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From therne@u @end|ng |rom m@yo@edu  Tue Aug 27 15:43:43 2024
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 27 Aug 2024 08:43:43 -0500
Subject: [Rd] specials and ::
In-Reply-To: <7731F5CF-9FB5-43B2-BDE5-1348949AC8C4@gmail.com>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
 <7731F5CF-9FB5-43B2-BDE5-1348949AC8C4@gmail.com>
Message-ID: <a02d86ae-ff13-4312-b438-39f6e2d879ab@mayo.edu>

You are right of course, Peter, but I can see where some will get confused.?? In a formula 
some symbols and functions are special operators, and others are simple functions.?? That 
is the reason one needs I(events/time) to put a rate in as a variable.??? Someone who 
types 'offset' at the command line will see that there actually IS a function behind the 
scenes.

Does anyone see a downside to Bill Dunlap's suggestion where the first step of my formula 
processing would be to "clean off" any survival:: modifiers???? That is, something that 
will break? After all, the code already has a lot of? "if (....) "? lines for other common 
user errors.?? I could view it as just saving me the time to deal with the 'we found an 
error' emails.?? I would output the corrected version as the "call" component.

Terry

On 8/27/24 03:38, peter dalgaard wrote:
> In my view, that's just plain wrong, because strata() is not a function but a special operator in a model formula. Wouldn't it also blow up on stats::offset()?
>
> Oh, yes it would:
>
>> lm(y~x+offset(z))
> Call:
> lm(formula = y ~ x + offset(z))
>
> Coefficients:
> (Intercept)            x
>       0.7350       0.0719
>
>> lm(y~x+stats::offset(z))
> Call:
> lm(formula = y ~ x + stats::offset(z))
>
> Coefficients:
>       (Intercept)                 x  stats::offset(z)
>            0.6457            0.1078            0.8521
>
>
> Or, to be facetious:
>
>> lm(y~base::"+"(x,z))
> Call:
> lm(formula = y ~ base::"+"(x, z))
>
> Coefficients:
>      (Intercept)  base::"+"(x, z)
>           0.4516           0.4383
>
>
>
> -pd
>
>> On 26 Aug 2024, at 16:42 , Therneau, Terry M., Ph.D. via R-devel<r-devel at r-project.org>  wrote:
>>
>> The survival package makes significant use of the "specials" argument of terms(), before
>> calling model.frame; it is part of nearly every modeling function. The reason is that
>> strata argments simply have to be handled differently than other things on the right hand
>> side. Likewise for tt() and cluster(), though those are much less frequent.
>>
>> I now get "bug reports" from the growing segment that believes one should put
>> packagename:: in front of every single instance.   For instance
>>        fit <- survival::survdiff( survival::Surv(time, status) ~ ph.karno +
>> survival::strata(inst),  data= survival::lung)
>>
>> This fails to give the correct answer because it fools terms(formula, specials=
>> "strata").    I've stood firm in my response of "that's your bug, not mine", but I begin
>> to believe I am swimming uphill.   One person responded that it was company policy to
>> qualify everything.
>>
>> I don't see an easy way to fix survival, and even if I did it would be a tremendous amout
>> of work.   What are other's thoughts?
>>
>> Terry
>>
>>
>>
>> -- 
>>
>> Terry M Therneau, PhD
>> Department of Quantitative Health Sciences
>> Mayo Clinic
>> therneau at mayo.edu
>>
>> "TERR-ree THUR-noh"
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org  mailing list
>> https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&data=05%7C02%7Ctherneau%40mayo.edu%7C7659a5f0f0d34746966a08dcc6739fed%7Ca25fff9c3f634fb29a8ad9bdd0321f9a%7C0%7C0%7C638603447151664511%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C0%7C%7C%7C&sdata=UAkeksswfFdLwOdzQIOXUPC2Ey255oW%2FX41kptNZNcU%3D&reserved=0

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Aug 27 16:00:42 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 27 Aug 2024 10:00:42 -0400
Subject: [Rd] specials and ::
In-Reply-To: <a02d86ae-ff13-4312-b438-39f6e2d879ab@mayo.edu>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
 <7731F5CF-9FB5-43B2-BDE5-1348949AC8C4@gmail.com>
 <a02d86ae-ff13-4312-b438-39f6e2d879ab@mayo.edu>
Message-ID: <061bc9e7-5603-4e14-8396-5e3adf54968d@gmail.com>

On 2024-08-27 9:43 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> You are right of course, Peter, but I can see where some will get confused.?? In a formula
> some symbols and functions are special operators, and others are simple functions.?? That
> is the reason one needs I(events/time) to put a rate in as a variable.??? Someone who
> types 'offset' at the command line will see that there actually IS a function behind the
> scenes.
> 
> Does anyone see a downside to Bill Dunlap's suggestion where the first step of my formula
> processing would be to "clean off" any survival:: modifiers???? That is, something that
> will break? After all, the code already has a lot of? "if (....) "? lines for other common
> user errors.?? I could view it as just saving me the time to deal with the 'we found an
> error' emails.?? I would output the corrected version as the "call" component.

I don't know if you have any data vectors that someone might use in a 
fit, but conceivably

   survdiff( Surv(time, status) ~ survival::datavector +
             strata(inst),  data=lung)

would mean something different than

   survdiff( Surv(time, status) ~ datavector +
             strata(inst),  data=lung)

if a user had a vector named datavector.

Duncan Murdoch

> 
> Terry
> 
> On 8/27/24 03:38, peter dalgaard wrote:
>> In my view, that's just plain wrong, because strata() is not a function but a special operator in a model formula. Wouldn't it also blow up on stats::offset()?
>>
>> Oh, yes it would:
>>
>>> lm(y~x+offset(z))
>> Call:
>> lm(formula = y ~ x + offset(z))
>>
>> Coefficients:
>> (Intercept)            x
>>        0.7350       0.0719
>>
>>> lm(y~x+stats::offset(z))
>> Call:
>> lm(formula = y ~ x + stats::offset(z))
>>
>> Coefficients:
>>        (Intercept)                 x  stats::offset(z)
>>             0.6457            0.1078            0.8521
>>
>>
>> Or, to be facetious:
>>
>>> lm(y~base::"+"(x,z))
>> Call:
>> lm(formula = y ~ base::"+"(x, z))
>>
>> Coefficients:
>>       (Intercept)  base::"+"(x, z)
>>            0.4516           0.4383
>>
>>
>>
>> -pd
>>
>>> On 26 Aug 2024, at 16:42 , Therneau, Terry M., Ph.D. via R-devel<r-devel at r-project.org>  wrote:
>>>
>>> The survival package makes significant use of the "specials" argument of terms(), before
>>> calling model.frame; it is part of nearly every modeling function. The reason is that
>>> strata argments simply have to be handled differently than other things on the right hand
>>> side. Likewise for tt() and cluster(), though those are much less frequent.
>>>
>>> I now get "bug reports" from the growing segment that believes one should put
>>> packagename:: in front of every single instance.   For instance
>>>         fit <- survival::survdiff( survival::Surv(time, status) ~ ph.karno +
>>> survival::strata(inst),  data= survival::lung)
>>>
>>> This fails to give the correct answer because it fools terms(formula, specials=
>>> "strata").    I've stood firm in my response of "that's your bug, not mine", but I begin
>>> to believe I am swimming uphill.   One person responded that it was company policy to
>>> qualify everything.
>>>
>>> I don't see an easy way to fix survival, and even if I did it would be a tremendous amout
>>> of work.   What are other's thoughts?
>>>
>>> Terry
>>>
>>>
>>>
>>> -- 
>>>
>>> Terry M Therneau, PhD
>>> Department of Quantitative Health Sciences
>>> Mayo Clinic
>>> therneau at mayo.edu
>>>
>>> "TERR-ree THUR-noh"
>>>
>>> 	[[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org  mailing list
>>> https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&data=05%7C02%7Ctherneau%40mayo.edu%7C7659a5f0f0d34746966a08dcc6739fed%7Ca25fff9c3f634fb29a8ad9bdd0321f9a%7C0%7C0%7C638603447151664511%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C0%7C%7C%7C&sdata=UAkeksswfFdLwOdzQIOXUPC2Ey255oW%2FX41kptNZNcU%3D&reserved=0
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Tue Aug 27 16:04:14 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 27 Aug 2024 10:04:14 -0400
Subject: [Rd] specials and ::
In-Reply-To: <a02d86ae-ff13-4312-b438-39f6e2d879ab@mayo.edu>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
 <7731F5CF-9FB5-43B2-BDE5-1348949AC8C4@gmail.com>
 <a02d86ae-ff13-4312-b438-39f6e2d879ab@mayo.edu>
Message-ID: <5acd06f9-86b6-4ee6-9c91-0718b406fa32@gmail.com>

   I don't see a big downside, but I will say that there's always a bit 
of a tradeoff between "train the users to do it right" (by writing clear 
documentation and informative error messages) and "make things easy for 
the user" (by making the code more complicated to handle things for them 
automatically).

    For example, part of me wishes that (1) there were only one way to 
provide a response variable for a binomial variable with N>1 (preferably 
by specifying proportions and a weights argument) and (2) grouping 
variables in lme4/nlme/et al always had to be specified as factors 
(rather than automatically being coerced to factors). Making those 
decisions would avoid so much code complexity ... (and eliminate one 
class of errors, i.e. people including a continuous covariate as a 
random-effect grouping variable because they think of 'random effect' 
and 'nuisance variable' as synonyms ...)

   But taking the "train the users to do it right" path does also 
involve more discussion with users ("if your software knows what I 
should be doing why can't it just do it for me?")

   cheers
    Ben Bolker

On 2024-08-27 9:43 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> You are right of course, Peter, but I can see where some will get confused.?? In a formula
> some symbols and functions are special operators, and others are simple functions.?? That
> is the reason one needs I(events/time) to put a rate in as a variable.??? Someone who
> types 'offset' at the command line will see that there actually IS a function behind the
> scenes.
> 
> Does anyone see a downside to Bill Dunlap's suggestion where the first step of my formula
> processing would be to "clean off" any survival:: modifiers???? That is, something that
> will break? After all, the code already has a lot of? "if (....) "? lines for other common
> user errors.?? I could view it as just saving me the time to deal with the 'we found an
> error' emails.?? I would output the corrected version as the "call" component.
> 
> Terry
> 
> On 8/27/24 03:38, peter dalgaard wrote:
>> In my view, that's just plain wrong, because strata() is not a function but a special operator in a model formula. Wouldn't it also blow up on stats::offset()?
>>
>> Oh, yes it would:
>>
>>> lm(y~x+offset(z))
>> Call:
>> lm(formula = y ~ x + offset(z))
>>
>> Coefficients:
>> (Intercept)            x
>>        0.7350       0.0719
>>
>>> lm(y~x+stats::offset(z))
>> Call:
>> lm(formula = y ~ x + stats::offset(z))
>>
>> Coefficients:
>>        (Intercept)                 x  stats::offset(z)
>>             0.6457            0.1078            0.8521
>>
>>
>> Or, to be facetious:
>>
>>> lm(y~base::"+"(x,z))
>> Call:
>> lm(formula = y ~ base::"+"(x, z))
>>
>> Coefficients:
>>       (Intercept)  base::"+"(x, z)
>>            0.4516           0.4383
>>
>>
>>
>> -pd
>>
>>> On 26 Aug 2024, at 16:42 , Therneau, Terry M., Ph.D. via R-devel<r-devel at r-project.org>  wrote:
>>>
>>> The survival package makes significant use of the "specials" argument of terms(), before
>>> calling model.frame; it is part of nearly every modeling function. The reason is that
>>> strata argments simply have to be handled differently than other things on the right hand
>>> side. Likewise for tt() and cluster(), though those are much less frequent.
>>>
>>> I now get "bug reports" from the growing segment that believes one should put
>>> packagename:: in front of every single instance.   For instance
>>>         fit <- survival::survdiff( survival::Surv(time, status) ~ ph.karno +
>>> survival::strata(inst),  data= survival::lung)
>>>
>>> This fails to give the correct answer because it fools terms(formula, specials=
>>> "strata").    I've stood firm in my response of "that's your bug, not mine", but I begin
>>> to believe I am swimming uphill.   One person responded that it was company policy to
>>> qualify everything.
>>>
>>> I don't see an easy way to fix survival, and even if I did it would be a tremendous amout
>>> of work.   What are other's thoughts?
>>>
>>> Terry
>>>
>>>
>>>
>>> -- 
>>>
>>> Terry M Therneau, PhD
>>> Department of Quantitative Health Sciences
>>> Mayo Clinic
>>> therneau at mayo.edu
>>>
>>> "TERR-ree THUR-noh"
>>>
>>> 	[[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org  mailing list
>>> https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&data=05%7C02%7Ctherneau%40mayo.edu%7C7659a5f0f0d34746966a08dcc6739fed%7Ca25fff9c3f634fb29a8ad9bdd0321f9a%7C0%7C0%7C638603447151664511%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C0%7C%7C%7C&sdata=UAkeksswfFdLwOdzQIOXUPC2Ey255oW%2FX41kptNZNcU%3D&reserved=0
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
 > E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From greg @end|ng |rom w@rne@@net  Tue Aug 27 16:45:29 2024
From: greg @end|ng |rom w@rne@@net (Gregory R. Warnes)
Date: Tue, 27 Aug 2024 10:45:29 -0400
Subject: [Rd] specials and ::
In-Reply-To: <5acd06f9-86b6-4ee6-9c91-0718b406fa32@gmail.com>
References: <5acd06f9-86b6-4ee6-9c91-0718b406fa32@gmail.com>
Message-ID: <6B05FEF8-4EDD-4F55-A23F-CF0179DB9818@warnes.net>

How about a hybrid of ?fix it up for the user? and ?train the user to do it right? by checking for ?survival::?, generating an informative warning message, removing it and proceeding with execution.

Two birds, one stone ?
-G

--  
Change your thoughts and you change the world.
--Dr. Norman Vincent Peale

> On Aug 27, 2024, at 10:04?AM, Ben Bolker <bbolker at gmail.com> wrote:
> 
> ?  I don't see a big downside, but I will say that there's always a bit of a tradeoff between "train the users to do it right" (by writing clear documentation and informative error messages) and "make things easy for the user" (by making the code more complicated to handle things for them automatically).
> 
>   For example, part of me wishes that (1) there were only one way to provide a response variable for a binomial variable with N>1 (preferably by specifying proportions and a weights argument) and (2) grouping variables in lme4/nlme/et al always had to be specified as factors (rather than automatically being coerced to factors). Making those decisions would avoid so much code complexity ... (and eliminate one class of errors, i.e. people including a continuous covariate as a random-effect grouping variable because they think of 'random effect' and 'nuisance variable' as synonyms ...)
> 
>  But taking the "train the users to do it right" path does also involve more discussion with users ("if your software knows what I should be doing why can't it just do it for me?")
> 
>  cheers
>   Ben Bolker
> 
>> On 2024-08-27 9:43 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
>> You are right of course, Peter, but I can see where some will get confused.   In a formula
>> some symbols and functions are special operators, and others are simple functions.   That
>> is the reason one needs I(events/time) to put a rate in as a variable.    Someone who
>> types 'offset' at the command line will see that there actually IS a function behind the
>> scenes.
>> Does anyone see a downside to Bill Dunlap's suggestion where the first step of my formula
>> processing would be to "clean off" any survival:: modifiers?    That is, something that
>> will break? After all, the code already has a lot of  "if (....) "  lines for other common
>> user errors.   I could view it as just saving me the time to deal with the 'we found an
>> error' emails.   I would output the corrected version as the "call" component.
>> Terry
>>> On 8/27/24 03:38, peter dalgaard wrote:
>>> In my view, that's just plain wrong, because strata() is not a function but a special operator in a model formula. Wouldn't it also blow up on stats::offset()?
>>> 
>>> Oh, yes it would:
>>> 
>>>> lm(y~x+offset(z))
>>> Call:
>>> lm(formula = y ~ x + offset(z))
>>> 
>>> Coefficients:
>>> (Intercept)            x
>>>       0.7350       0.0719
>>> 
>>>> lm(y~x+stats::offset(z))
>>> Call:
>>> lm(formula = y ~ x + stats::offset(z))
>>> 
>>> Coefficients:
>>>       (Intercept)                 x  stats::offset(z)
>>>            0.6457            0.1078            0.8521
>>> 
>>> 
>>> Or, to be facetious:
>>> 
>>>> lm(y~base::"+"(x,z))
>>> Call:
>>> lm(formula = y ~ base::"+"(x, z))
>>> 
>>> Coefficients:
>>>      (Intercept)  base::"+"(x, z)
>>>           0.4516           0.4383
>>> 
>>> 
>>> 
>>> -pd
>>> 
>>>> On 26 Aug 2024, at 16:42 , Therneau, Terry M., Ph.D. via R-devel<r-devel at r-project.org>  wrote:
>>>> 
>>>> The survival package makes significant use of the "specials" argument of terms(), before
>>>> calling model.frame; it is part of nearly every modeling function. The reason is that
>>>> strata argments simply have to be handled differently than other things on the right hand
>>>> side. Likewise for tt() and cluster(), though those are much less frequent.
>>>> 
>>>> I now get "bug reports" from the growing segment that believes one should put
>>>> packagename:: in front of every single instance.   For instance
>>>>        fit <- survival::survdiff( survival::Surv(time, status) ~ ph.karno +
>>>> survival::strata(inst),  data= survival::lung)
>>>> 
>>>> This fails to give the correct answer because it fools terms(formula, specials=
>>>> "strata").    I've stood firm in my response of "that's your bug, not mine", but I begin
>>>> to believe I am swimming uphill.   One person responded that it was company policy to
>>>> qualify everything.
>>>> 
>>>> I don't see an easy way to fix survival, and even if I did it would be a tremendous amout
>>>> of work.   What are other's thoughts?
>>>> 
>>>> Terry
>>>> 
>>>> 
>>>> 
>>>> --
>>>> 
>>>> Terry M Therneau, PhD
>>>> Department of Quantitative Health Sciences
>>>> Mayo Clinic
>>>> therneau at mayo.edu
>>>> 
>>>> "TERR-ree THUR-noh"
>>>> 
>>>>    [[alternative HTML version deleted]]
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org  mailing list
>>>> https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&data=05%7C02%7Ctherneau%40mayo.edu%7C7659a5f0f0d34746966a08dcc6739fed%7Ca25fff9c3f634fb29a8ad9bdd0321f9a%7C0%7C0%7C638603447151664511%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C0%7C%7C%7C&sdata=UAkeksswfFdLwOdzQIOXUPC2Ey255oW%2FX41kptNZNcU%3D&reserved=0
>>    [[alternative HTML version deleted]]
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> --
> Dr. Benjamin Bolker
> Professor, Mathematics & Statistics and Biology, McMaster University
> Director, School of Computational Science and Engineering
> > E-mail is sent at my convenience; I don't expect replies outside of working hours.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From w||||@mwdun|@p @end|ng |rom gm@||@com  Tue Aug 27 19:27:04 2024
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Tue, 27 Aug 2024 10:27:04 -0700
Subject: [Rd] specials and ::
In-Reply-To: <061bc9e7-5603-4e14-8396-5e3adf54968d@gmail.com>
References: <abb8d9d4-7463-4365-90e5-da155a36c679@mayo.edu>
 <7731F5CF-9FB5-43B2-BDE5-1348949AC8C4@gmail.com>
 <a02d86ae-ff13-4312-b438-39f6e2d879ab@mayo.edu>
 <061bc9e7-5603-4e14-8396-5e3adf54968d@gmail.com>
Message-ID: <CAHqSRuRoSyNRn+BwNGU1KaHUxE4MW7GZOFLVUxuXPaeijNwy8Q@mail.gmail.com>

removeDoubleColonSurvival (or 'f', as it was shown in the example) could be
changed to only remove the 'survival::' from expressions that involve the
names to be used in specials.  E.g., change

if (is.call(expr) && identical(expr[[1]], doubleColon) &&
identical(expr[[2]], survival))

to
specialNames <- c("strata", "whatever")
...
if (is.call(expr)
    && identical(expr[[1]], doubleColon)
    && identical(expr[[2]], survival)
    && is.name(expr[[3]]) && is.element(as.character(expr[[3]]),
specialNames))

-Bill

On Tue, Aug 27, 2024 at 7:01?AM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 2024-08-27 9:43 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> > You are right of course, Peter, but I can see where some will get
> confused.   In a formula
> > some symbols and functions are special operators, and others are simple
> functions.   That
> > is the reason one needs I(events/time) to put a rate in as a
> variable.    Someone who
> > types 'offset' at the command line will see that there actually IS a
> function behind the
> > scenes.
> >
> > Does anyone see a downside to Bill Dunlap's suggestion where the first
> step of my formula
> > processing would be to "clean off" any survival:: modifiers?    That is,
> something that
> > will break? After all, the code already has a lot of  "if (....) "
> lines for other common
> > user errors.   I could view it as just saving me the time to deal with
> the 'we found an
> > error' emails.   I would output the corrected version as the "call"
> component.
>
> I don't know if you have any data vectors that someone might use in a
> fit, but conceivably
>
>    survdiff( Surv(time, status) ~ survival::datavector +
>              strata(inst),  data=lung)
>
> would mean something different than
>
>    survdiff( Surv(time, status) ~ datavector +
>              strata(inst),  data=lung)
>
> if a user had a vector named datavector.
>
> Duncan Murdoch
>
> >
> > Terry
> >
> > On 8/27/24 03:38, peter dalgaard wrote:
> >> In my view, that's just plain wrong, because strata() is not a function
> but a special operator in a model formula. Wouldn't it also blow up on
> stats::offset()?
> >>
> >> Oh, yes it would:
> >>
> >>> lm(y~x+offset(z))
> >> Call:
> >> lm(formula = y ~ x + offset(z))
> >>
> >> Coefficients:
> >> (Intercept)            x
> >>        0.7350       0.0719
> >>
> >>> lm(y~x+stats::offset(z))
> >> Call:
> >> lm(formula = y ~ x + stats::offset(z))
> >>
> >> Coefficients:
> >>        (Intercept)                 x  stats::offset(z)
> >>             0.6457            0.1078            0.8521
> >>
> >>
> >> Or, to be facetious:
> >>
> >>> lm(y~base::"+"(x,z))
> >> Call:
> >> lm(formula = y ~ base::"+"(x, z))
> >>
> >> Coefficients:
> >>       (Intercept)  base::"+"(x, z)
> >>            0.4516           0.4383
> >>
> >>
> >>
> >> -pd
> >>
> >>> On 26 Aug 2024, at 16:42 , Therneau, Terry M., Ph.D. via R-devel<
> r-devel at r-project.org>  wrote:
> >>>
> >>> The survival package makes significant use of the "specials" argument
> of terms(), before
> >>> calling model.frame; it is part of nearly every modeling function. The
> reason is that
> >>> strata argments simply have to be handled differently than other
> things on the right hand
> >>> side. Likewise for tt() and cluster(), though those are much less
> frequent.
> >>>
> >>> I now get "bug reports" from the growing segment that believes one
> should put
> >>> packagename:: in front of every single instance.   For instance
> >>>         fit <- survival::survdiff( survival::Surv(time, status) ~
> ph.karno +
> >>> survival::strata(inst),  data= survival::lung)
> >>>
> >>> This fails to give the correct answer because it fools terms(formula,
> specials=
> >>> "strata").    I've stood firm in my response of "that's your bug, not
> mine", but I begin
> >>> to believe I am swimming uphill.   One person responded that it was
> company policy to
> >>> qualify everything.
> >>>
> >>> I don't see an easy way to fix survival, and even if I did it would be
> a tremendous amout
> >>> of work.   What are other's thoughts?
> >>>
> >>> Terry
> >>>
> >>>
> >>>
> >>> --
> >>>
> >>> Terry M Therneau, PhD
> >>> Department of Quantitative Health Sciences
> >>> Mayo Clinic
> >>> therneau at mayo.edu
> >>>
> >>> "TERR-ree THUR-noh"
> >>>
> >>>     [[alternative HTML version deleted]]
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org  mailing list
> >>>
> https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&data=05%7C02%7Ctherneau%40mayo.edu%7C7659a5f0f0d34746966a08dcc6739fed%7Ca25fff9c3f634fb29a8ad9bdd0321f9a%7C0%7C0%7C638603447151664511%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C0%7C%7C%7C&sdata=UAkeksswfFdLwOdzQIOXUPC2Ey255oW%2FX41kptNZNcU%3D&reserved=0
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @|@ergbox @end|ng |rom gm@||@com  Wed Aug 28 23:59:51 2024
From: @|@ergbox @end|ng |rom gm@||@com (Alexey Sergushichev)
Date: Wed, 28 Aug 2024 16:59:51 -0500
Subject: [Rd] Apply .Rbuildignore before copying files in R CMD build
Message-ID: <CAMGHQ97WmxeRc+qmrV7Mr5WWciU=08DOTBqK8zE334zbCJ40cA@mail.gmail.com>

Hi,

Is there any reason why .Rbuildignore is not used before copying package
files in R CMD build?

For some of the packages I develop I have rather large directories with
miscellaneous files for testing and other purposes. They are in my
.Rbuildignore (and .gitignore) file, but that doesn't prevent R CMD build
from trying to copy them on the build process. Having them copied either
breaks the build completely because /tmp directory gets out of space, or
just slows it down a lot. So I wonder if there is a specific reason for
this behavior and whether it could be change or controlled by some
parameter.

There is some discussion in the context of pkgbuild package:
https://github.com/r-lib/pkgbuild/issues/59 It provides a hackish
workaround for that, which also does not work on Windows.

Best,
Alexey

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Aug 29 00:11:52 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 28 Aug 2024 18:11:52 -0400
Subject: [Rd] Apply .Rbuildignore before copying files in R CMD build
In-Reply-To: <CAMGHQ97WmxeRc+qmrV7Mr5WWciU=08DOTBqK8zE334zbCJ40cA@mail.gmail.com>
References: <CAMGHQ97WmxeRc+qmrV7Mr5WWciU=08DOTBqK8zE334zbCJ40cA@mail.gmail.com>
Message-ID: <adf96f17-54a4-4670-8b2f-ad36e02b749f@gmail.com>

On 2024-08-28 5:59 p.m., Alexey Sergushichev wrote:
> Hi,
> 
> Is there any reason why .Rbuildignore is not used before copying package
> files in R CMD build?
> 
> For some of the packages I develop I have rather large directories with
> miscellaneous files for testing and other purposes. They are in my
> .Rbuildignore (and .gitignore) file, but that doesn't prevent R CMD build
> from trying to copy them on the build process. Having them copied either
> breaks the build completely because /tmp directory gets out of space, or
> just slows it down a lot. So I wonder if there is a specific reason for
> this behavior and whether it could be change or controlled by some
> parameter.
> 
> There is some discussion in the context of pkgbuild package:
> https://github.com/r-lib/pkgbuild/issues/59 It provides a hackish
> workaround for that, which also does not work on Windows.

I think the reason is simplicity.  The build process can add, delete or 
modify files.  You wouldn't want that to happen on the original source 
files, so R copies the files to a temporary location to run things.

If it applied .Rbuildignore first, then important files for the build 
might not be available, and the build could fail.

Having an R package that needs so much data that you can't fit two 
copies of it on your disk is a really unusual situation.  I think it 
will have to be up to you to fix it (by increasing your temp space, or 
decreasing the size of some of those files, or something else).

Duncan Murdoch


From kev|nu@hey @end|ng |rom gm@||@com  Thu Aug 29 00:12:43 2024
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Wed, 28 Aug 2024 15:12:43 -0700
Subject: [Rd] Apply .Rbuildignore before copying files in R CMD build
In-Reply-To: <CAMGHQ97WmxeRc+qmrV7Mr5WWciU=08DOTBqK8zE334zbCJ40cA@mail.gmail.com>
References: <CAMGHQ97WmxeRc+qmrV7Mr5WWciU=08DOTBqK8zE334zbCJ40cA@mail.gmail.com>
Message-ID: <CAJXgQP2Zmg3sEO5=Ts+Wh5mWbfL9BR1BLWHpmz-s2eiRk4N9-g@mail.gmail.com>

Hi Alexey,

It's kind of gross, but if you need a local solution, you could put
your own executable `cp` script on your PATH somewhere, and have that
do something "smart" when it's invoked by R. One way to detect that
would be to check if the `R_CMD` environment variable is set. For
example:

https://gist.github.com/kevinushey/2351194ba540627831fa2d58073c097a

For posterity, this was filed some time ago on R's bug tracker at:

https://bugs.r-project.org/show_bug.cgi?id=17549

Best,
Kevin


On Wed, Aug 28, 2024 at 3:00?PM Alexey Sergushichev <alsergbox at gmail.com> wrote:
>
> Hi,
>
> Is there any reason why .Rbuildignore is not used before copying package
> files in R CMD build?
>
> For some of the packages I develop I have rather large directories with
> miscellaneous files for testing and other purposes. They are in my
> .Rbuildignore (and .gitignore) file, but that doesn't prevent R CMD build
> from trying to copy them on the build process. Having them copied either
> breaks the build completely because /tmp directory gets out of space, or
> just slows it down a lot. So I wonder if there is a specific reason for
> this behavior and whether it could be change or controlled by some
> parameter.
>
> There is some discussion in the context of pkgbuild package:
> https://github.com/r-lib/pkgbuild/issues/59 It provides a hackish
> workaround for that, which also does not work on Windows.
>
> Best,
> Alexey
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|@ergbox @end|ng |rom gm@||@com  Thu Aug 29 00:24:24 2024
From: @|@ergbox @end|ng |rom gm@||@com (Alexey Sergushichev)
Date: Wed, 28 Aug 2024 17:24:24 -0500
Subject: [Rd] Apply .Rbuildignore before copying files in R CMD build
In-Reply-To: <adf96f17-54a4-4670-8b2f-ad36e02b749f@gmail.com>
References: <CAMGHQ97WmxeRc+qmrV7Mr5WWciU=08DOTBqK8zE334zbCJ40cA@mail.gmail.com>
 <adf96f17-54a4-4670-8b2f-ad36e02b749f@gmail.com>
Message-ID: <CAMGHQ96LRNgWcMMK9ioZUFx1OQ9Ebhpjd8vjWsVQCpCrNDLzTA@mail.gmail.com>

> I think the reason is simplicity.  The build process can add, delete or
modify files.  You wouldn't want that to happen on the original source
files, so R copies the files to a temporary location to run things.

> If it applied .Rbuildignore first, then important files for the build
might not be available, and the build could fail.

Yeah, I guess that makes sense. Thanks, I didn't realize that.

> Having an R package that needs so much data that you can't fit two
copies of it on your disk is a really unusual situation.  I think it
will have to be up to you to fix it (by increasing your temp space, or
decreasing the size of some of those files, or something else).

These files are not required, but help to run and test some things. But I
guess I have to deal with that.

--
Alexey


On Wed, Aug 28, 2024 at 5:11?PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 2024-08-28 5:59 p.m., Alexey Sergushichev wrote:
> > Hi,
> >
> > Is there any reason why .Rbuildignore is not used before copying package
> > files in R CMD build?
> >
> > For some of the packages I develop I have rather large directories with
> > miscellaneous files for testing and other purposes. They are in my
> > .Rbuildignore (and .gitignore) file, but that doesn't prevent R CMD build
> > from trying to copy them on the build process. Having them copied either
> > breaks the build completely because /tmp directory gets out of space, or
> > just slows it down a lot. So I wonder if there is a specific reason for
> > this behavior and whether it could be change or controlled by some
> > parameter.
> >
> > There is some discussion in the context of pkgbuild package:
> > https://github.com/r-lib/pkgbuild/issues/59 It provides a hackish
> > workaround for that, which also does not work on Windows.
>
> I think the reason is simplicity.  The build process can add, delete or
> modify files.  You wouldn't want that to happen on the original source
> files, so R copies the files to a temporary location to run things.
>
> If it applied .Rbuildignore first, then important files for the build
> might not be available, and the build could fail.
>
> Having an R package that needs so much data that you can't fit two
> copies of it on your disk is a really unusual situation.  I think it
> will have to be up to you to fix it (by increasing your temp space, or
> decreasing the size of some of those files, or something else).
>
> Duncan Murdoch
>
>

	[[alternative HTML version deleted]]


From @|@ergbox @end|ng |rom gm@||@com  Thu Aug 29 00:28:20 2024
From: @|@ergbox @end|ng |rom gm@||@com (Alexey Sergushichev)
Date: Wed, 28 Aug 2024 17:28:20 -0500
Subject: [Rd] Apply .Rbuildignore before copying files in R CMD build
In-Reply-To: <CAJXgQP2Zmg3sEO5=Ts+Wh5mWbfL9BR1BLWHpmz-s2eiRk4N9-g@mail.gmail.com>
References: <CAMGHQ97WmxeRc+qmrV7Mr5WWciU=08DOTBqK8zE334zbCJ40cA@mail.gmail.com>
 <CAJXgQP2Zmg3sEO5=Ts+Wh5mWbfL9BR1BLWHpmz-s2eiRk4N9-g@mail.gmail.com>
Message-ID: <CAMGHQ97cYEHRZ=wKEo_uGYB0NKuEe7yUYjGpAt4-8jPzMOBC9w@mail.gmail.com>

> It's kind of gross, but if you need a local solution, you could put
your own executable `cp` script on your PATH somewhere, and have that
do something "smart" when it's invoked by R.

Hah! Currently I opted out to using pkgbuild functions and specified
`Config/build/copy-method: link` in my DESCRIPTION file (
https://pkgbuild.r-lib.org/reference/build.html). It's also a bit weird,
but at least easy to do now.

> For posterity, this was filed some time ago on R's bug tracker at:
https://bugs.r-project.org/show_bug.cgi?id=17549

Thanks for the link!

--
ALexey

On Wed, Aug 28, 2024 at 5:13?PM Kevin Ushey <kevinushey at gmail.com> wrote:

> Hi Alexey,
>
> It's kind of gross, but if you need a local solution, you could put
> your own executable `cp` script on your PATH somewhere, and have that
> do something "smart" when it's invoked by R. One way to detect that
> would be to check if the `R_CMD` environment variable is set. For
> example:
>
> https://gist.github.com/kevinushey/2351194ba540627831fa2d58073c097a
>
> For posterity, this was filed some time ago on R's bug tracker at:
>
> https://bugs.r-project.org/show_bug.cgi?id=17549
>
> Best,
> Kevin
>
>
> On Wed, Aug 28, 2024 at 3:00?PM Alexey Sergushichev <alsergbox at gmail.com>
> wrote:
> >
> > Hi,
> >
> > Is there any reason why .Rbuildignore is not used before copying package
> > files in R CMD build?
> >
> > For some of the packages I develop I have rather large directories with
> > miscellaneous files for testing and other purposes. They are in my
> > .Rbuildignore (and .gitignore) file, but that doesn't prevent R CMD build
> > from trying to copy them on the build process. Having them copied either
> > breaks the build completely because /tmp directory gets out of space, or
> > just slows it down a lot. So I wonder if there is a specific reason for
> > this behavior and whether it could be change or controlled by some
> > parameter.
> >
> > There is some discussion in the context of pkgbuild package:
> > https://github.com/r-lib/pkgbuild/issues/59 It provides a hackish
> > workaround for that, which also does not work on Windows.
> >
> > Best,
> > Alexey
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Thu Aug 29 21:34:52 2024
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Thu, 29 Aug 2024 21:34:52 +0200
Subject: [Rd] Apply .Rbuildignore before copying files in R CMD build
In-Reply-To: <adf96f17-54a4-4670-8b2f-ad36e02b749f@gmail.com>
References: <CAMGHQ97WmxeRc+qmrV7Mr5WWciU=08DOTBqK8zE334zbCJ40cA@mail.gmail.com>
 <adf96f17-54a4-4670-8b2f-ad36e02b749f@gmail.com>
Message-ID: <CABtg=KmCz7BCugBQY4fF0f_O07LrTtPaESJP4DFDT=jzFRHdXQ@mail.gmail.com>

On Thu, Aug 29, 2024 at 12:12?AM Duncan Murdoch
<murdoch.duncan at gmail.com> wrote:
[...]
> I think the reason is simplicity.  The build process can add, delete or
> modify files.  You wouldn't want that to happen on the original source
> files, so R copies the files to a temporary location to run things.
>
> If it applied .Rbuildignore first, then important files for the build
> might not be available, and the build could fail.

AFAICT the ignored files are deleted right after the copy, so they
are not present during the build process. (But FIXME.)


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Aug 29 21:58:11 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 29 Aug 2024 15:58:11 -0400
Subject: [Rd] Apply .Rbuildignore before copying files in R CMD build
In-Reply-To: <CABtg=KmCz7BCugBQY4fF0f_O07LrTtPaESJP4DFDT=jzFRHdXQ@mail.gmail.com>
References: <CAMGHQ97WmxeRc+qmrV7Mr5WWciU=08DOTBqK8zE334zbCJ40cA@mail.gmail.com>
 <adf96f17-54a4-4670-8b2f-ad36e02b749f@gmail.com>
 <CABtg=KmCz7BCugBQY4fF0f_O07LrTtPaESJP4DFDT=jzFRHdXQ@mail.gmail.com>
Message-ID: <ae93621f-6cdd-4f17-bdc9-f6e5f032704d@gmail.com>

On 2024-08-29 3:34 p.m., G?bor Cs?rdi wrote:
> On Thu, Aug 29, 2024 at 12:12?AM Duncan Murdoch
> <murdoch.duncan at gmail.com> wrote:
> [...]
>> I think the reason is simplicity.  The build process can add, delete or
>> modify files.  You wouldn't want that to happen on the original source
>> files, so R copies the files to a temporary location to run things.
>>
>> If it applied .Rbuildignore first, then important files for the build
>> might not be available, and the build could fail.
> 
> AFAICT the ignored files are deleted right after the copy, so they
> are not present during the build process. (But FIXME.)

I think some builds do that, but builds of packages with vignettes 
generally do an install of the package, and that might need the ignored 
files.  There could be other situations too.

You probably know this, but for the benefit of those who don't:  you can 
read the build operations in the 1100 line function 
tools:::.build_packages, which starts here: 
https://github.com/wch/r-source/blob/1bdf2503322b43ce8698008eb5bc1f55bc8a58c2/src/library/tools/R/build.R#L93

The prepare_pkg() function is run between the copy and the cleanup, and 
it might do a package install.

Duncan Murdoch


