From irederik m@iii@g oii oib@@et  Wed Jan  1 03:56:52 2020
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Tue, 31 Dec 2019 18:56:52 -0800
Subject: [Rd] best way to build from Git
In-Reply-To: <CABtg=Kkr9P9=go2XCCZ5h9=hGipAo16Cw0ccCDWcogHwZsxV0Q@mail.gmail.com>
References: <20191226013717.GA320941@localhost>
 <CABtg=K=XO8+Ti6UGAGraaufh5T_ua7cFnC_tUnTE=vsmX4Dgyg@mail.gmail.com>
 <24068.43472.496118.798873@stat.math.ethz.ch>
 <CABtg=Kkr9P9=go2XCCZ5h9=hGipAo16Cw0ccCDWcogHwZsxV0Q@mail.gmail.com>
Message-ID: <20200101025652.GF466999@localhost>

Thank you all for your replies.

On Thu, Dec 26, 2019 at 01:06:48PM +0000, G?bor Cs?rdi wrote:
>On Thu, Dec 26, 2019 at 12:39 PM Martin Maechler
>> ...
>> It would probably really be useful, if Lionel (or someone else)
>> updated his nice write-up and auxiliary {script / make} - files
>> so things work too when build with "src-dir != build-dir".
>
>I am not sure what you mean, what is wrong with this build directory?
>https://bookdown.org/lionel/contributing/building-r.html#sec:build

Yes it seems that Lionel's instructions successfully build a Git repo
containing R into a separate build directory. Thank you Lionel.

I've adapted these instructions, together with Lionel's GNUmakefile
and make-svn-revision script, to suit my (Linux-based) environment. I
put it in a little GitHub repository. Currently the following commands
work for me to download and install R in my home directory:

     git clone https://github.com/navarum/tweaks
     PREFIX=~/.local ./tweaks/r/BUILD install

For now it applies one example patch on top of a fixed recent commit
to the upstream repo https://github.com/wch/r-source/ . I noticed that
the first commit hash I selected from 'git log' was not stable, so I'm
not sure if this script will work tomorrow or next week. However, I
thought I ought to share it in case others find it useful. I tried to
make the (Bash) code concise enough that it would be possible for
others to see what it is doing and adapt it to maintaining their own
patch series on top of some version of R. I've been using this tool to
maintain custom versions of other software packages as well, so there
may be a little "too much information" in there - but someone could
obviously fork it and keep just what they need. The system tries to be
somewhat intelligent about remembering whether configure was run,
checking if the patches need to be reapplied, not overwriting any
changes I might have made to the cloned r-source git repo, and so on.

Just for the record, my original question on this thread was about the
reasons for not having R's default build system work with different
revision control systems, as well as some apparent typos in the
Makefile that comes with R.

Thank you,

Frederick


From j@goreck| @end|ng |rom w|t@edu@p|  Wed Jan  1 07:16:31 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Wed, 1 Jan 2020 11:46:31 +0530
Subject: [Rd] New R function is.nana = is.na & !is.nan
Message-ID: <CAOO9MKU3XO+whkOUhEAY5ymJPphL=3snc5JB949Y3tNLw4tang@mail.gmail.com>

Hello R-devel,

Best wishes in the new year. I am writing to kindly request new R
function so NA_real_ can be more easily detected.
Currently if one wants to test for NA_real_ (but not NaN) then extra
work has to be done: `is.na(x) & !is.nan(x)`
Required functionality is already at C level so to address my request
there is not that much to do.
Kevin Ushey made a nice summary of current R C api in:
https://stackoverflow.com/a/26262984/2490497
Pasting related part below, extra row added by me is a requested feature.

    +---------------------+
    | C fun    | NaN | NA | R fun
    +---------------------+
    | ISNAN    |  t  | t  | is.na
    | R_IsNaN  |  t  | f  | is.nan
    | ISNA     |  f  | t  | is.na && !is.nan
    | R_IsNA   |  f  | t  | is.na && !is.nan
    +---------------------+
    +---------------------+
    | R fun    | NaN | NA | C fun
    +---------------------+
    | is.na    |  t  | t  | ISNAN
    | is.nan   |  t  | f  | R_IsNaN
    +---------------------+
    | is.nana  |  f  | t  | R_IsNA
    +---------------------+

Strictly speaking, I am asking for a new R function:

    is.nana <- function(x) if (typeof(x)=="numeric")
.Primitive("is.nana") else .Primitive("is.na")

Then probably a copy of C function `do_isnan` as `do_isnana` with a
minor change from `R_IsNaN` to `R_IsNA`.

Best,
Jan Gorecki


From hp@ge@ @end|ng |rom |redhutch@org  Wed Jan  1 23:08:26 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Wed, 1 Jan 2020 22:08:26 +0000
Subject: [Rd] New R function is.nana = is.na & !is.nan
In-Reply-To: <CAOO9MKU3XO+whkOUhEAY5ymJPphL=3snc5JB949Y3tNLw4tang@mail.gmail.com>
References: <CAOO9MKU3XO+whkOUhEAY5ymJPphL=3snc5JB949Y3tNLw4tang@mail.gmail.com>
Message-ID: <584ae6fa-f537-c996-d135-96b06aa758b4@fredhutch.org>

Happy New Year everybody!

The name (is.nana) doesn't make much sense to me. Can you explain it?

One alternative would be to add an extra argument (e.g. 'strict') to 
is.na(). FALSE by default, and ignored (with or w/o a warning) when the 
type of 'x' is not "numeric".

H.


On 12/31/19 22:16, Jan Gorecki wrote:
> Hello R-devel,
> 
> Best wishes in the new year. I am writing to kindly request new R
> function so NA_real_ can be more easily detected.
> Currently if one wants to test for NA_real_ (but not NaN) then extra
> work has to be done: `is.na(x) & !is.nan(x)`
> Required functionality is already at C level so to address my request
> there is not that much to do.
> Kevin Ushey made a nice summary of current R C api in:
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stackoverflow.com_a_26262984_2490497&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=oWT1wDiy7pogVlJHGtdOoM3zdB45t9zZVyGYU8qcOgo&s=zFj3lh-N_YlNBRlDKeO-aTs0Bf2qtWLUHKlw_nh2Q4o&e=
> Pasting related part below, extra row added by me is a requested feature.
> 
>      +---------------------+
>      | C fun    | NaN | NA | R fun
>      +---------------------+
>      | ISNAN    |  t  | t  | is.na
>      | R_IsNaN  |  t  | f  | is.nan
>      | ISNA     |  f  | t  | is.na && !is.nan
>      | R_IsNA   |  f  | t  | is.na && !is.nan
>      +---------------------+
>      +---------------------+
>      | R fun    | NaN | NA | C fun
>      +---------------------+
>      | is.na    |  t  | t  | ISNAN
>      | is.nan   |  t  | f  | R_IsNaN
>      +---------------------+
>      | is.nana  |  f  | t  | R_IsNA
>      +---------------------+
> 
> Strictly speaking, I am asking for a new R function:
> 
>      is.nana <- function(x) if (typeof(x)=="numeric")
> .Primitive("is.nana") else .Primitive("is.na")
> 
> Then probably a copy of C function `do_isnan` as `do_isnana` with a
> minor change from `R_IsNaN` to `R_IsNA`.
> 
> Best,
> Jan Gorecki
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=oWT1wDiy7pogVlJHGtdOoM3zdB45t9zZVyGYU8qcOgo&s=tCCxZtQj30QrtAYORMODT-OnjeKiXxiF0qlZtgyj1Mc&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From j@goreck| @end|ng |rom w|t@edu@p|  Thu Jan  2 03:09:02 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Thu, 2 Jan 2020 07:39:02 +0530
Subject: [Rd] New R function is.nana = is.na & !is.nan
In-Reply-To: <584ae6fa-f537-c996-d135-96b06aa758b4@fredhutch.org>
References: <CAOO9MKU3XO+whkOUhEAY5ymJPphL=3snc5JB949Y3tNLw4tang@mail.gmail.com>
 <584ae6fa-f537-c996-d135-96b06aa758b4@fredhutch.org>
Message-ID: <CAOO9MKVbNVWd6s+qwtshbst267HPfQCh3_bPTNmH=f7f21rViQ@mail.gmail.com>

"nana" is meant to express "NA, really NA".
Your suggestion sounds good.

On Thu 2 Jan, 2020, 3:38 AM Pages, Herve, <hpages at fredhutch.org> wrote:

> Happy New Year everybody!
>
> The name (is.nana) doesn't make much sense to me. Can you explain it?
>
> One alternative would be to add an extra argument (e.g. 'strict') to
> is.na(). FALSE by default, and ignored (with or w/o a warning) when the
> type of 'x' is not "numeric".
>
> H.
>
>
> On 12/31/19 22:16, Jan Gorecki wrote:
> > Hello R-devel,
> >
> > Best wishes in the new year. I am writing to kindly request new R
> > function so NA_real_ can be more easily detected.
> > Currently if one wants to test for NA_real_ (but not NaN) then extra
> > work has to be done: `is.na(x) & !is.nan(x)`
> > Required functionality is already at C level so to address my request
> > there is not that much to do.
> > Kevin Ushey made a nice summary of current R C api in:
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stackoverflow.com_a_26262984_2490497&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=oWT1wDiy7pogVlJHGtdOoM3zdB45t9zZVyGYU8qcOgo&s=zFj3lh-N_YlNBRlDKeO-aTs0Bf2qtWLUHKlw_nh2Q4o&e=
> > Pasting related part below, extra row added by me is a requested feature.
> >
> >      +---------------------+
> >      | C fun    | NaN | NA | R fun
> >      +---------------------+
> >      | ISNAN    |  t  | t  | is.na
> >      | R_IsNaN  |  t  | f  | is.nan
> >      | ISNA     |  f  | t  | is.na && !is.nan
> >      | R_IsNA   |  f  | t  | is.na && !is.nan
> >      +---------------------+
> >      +---------------------+
> >      | R fun    | NaN | NA | C fun
> >      +---------------------+
> >      | is.na    |  t  | t  | ISNAN
> >      | is.nan   |  t  | f  | R_IsNaN
> >      +---------------------+
> >      | is.nana  |  f  | t  | R_IsNA
> >      +---------------------+
> >
> > Strictly speaking, I am asking for a new R function:
> >
> >      is.nana <- function(x) if (typeof(x)=="numeric")
> > .Primitive("is.nana") else .Primitive("is.na")
> >
> > Then probably a copy of C function `do_isnan` as `do_isnana` with a
> > minor change from `R_IsNaN` to `R_IsNA`.
> >
> > Best,
> > Jan Gorecki
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=oWT1wDiy7pogVlJHGtdOoM3zdB45t9zZVyGYU8qcOgo&s=tCCxZtQj30QrtAYORMODT-OnjeKiXxiF0qlZtgyj1Mc&e=
> >
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Jan  2 21:11:56 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 2 Jan 2020 21:11:56 +0100
Subject: [Rd] New R function is.nana = is.na & !is.nan
In-Reply-To: <CAOO9MKVbNVWd6s+qwtshbst267HPfQCh3_bPTNmH=f7f21rViQ@mail.gmail.com>
References: <CAOO9MKU3XO+whkOUhEAY5ymJPphL=3snc5JB949Y3tNLw4tang@mail.gmail.com>
 <584ae6fa-f537-c996-d135-96b06aa758b4@fredhutch.org>
 <CAOO9MKVbNVWd6s+qwtshbst267HPfQCh3_bPTNmH=f7f21rViQ@mail.gmail.com>
Message-ID: <b4fa0b85-9e27-05cb-b0aa-b3ef1a61abb3@gmail.com>

Please note that ?NaN says

"Computations involving ?NaN? will return ?NaN? or perhaps ?NA?: which 
of those two is not guaranteed and may depend on the R platform (since 
compilers may re-order computations)."

It is not reliable to depend on the distinction between NA and (non-NA) 
NaN. Part of the problem is that on some current systems it is not 
specified what the NaN payload will be after even simple arithmetic 
operations. Unfortunately changing R to make such distinction reliable? 
would be a major effort, most likely incur performance overhead even for 
computations where the distinction is not needed, and code changes would 
be required also in packages.

I think given this it is better not to offer a function to directly 
differentiate between NaN and NA.

Best
Tomas

On 1/2/20 3:09 AM, Jan Gorecki wrote:
> "nana" is meant to express "NA, really NA".
> Your suggestion sounds good.
>
> On Thu 2 Jan, 2020, 3:38 AM Pages, Herve, <hpages at fredhutch.org> wrote:
>
>> Happy New Year everybody!
>>
>> The name (is.nana) doesn't make much sense to me. Can you explain it?
>>
>> One alternative would be to add an extra argument (e.g. 'strict') to
>> is.na(). FALSE by default, and ignored (with or w/o a warning) when the
>> type of 'x' is not "numeric".
>>
>> H.
>>
>>
>> On 12/31/19 22:16, Jan Gorecki wrote:
>>> Hello R-devel,
>>>
>>> Best wishes in the new year. I am writing to kindly request new R
>>> function so NA_real_ can be more easily detected.
>>> Currently if one wants to test for NA_real_ (but not NaN) then extra
>>> work has to be done: `is.na(x) & !is.nan(x)`
>>> Required functionality is already at C level so to address my request
>>> there is not that much to do.
>>> Kevin Ushey made a nice summary of current R C api in:
>>>
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stackoverflow.com_a_26262984_2490497&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=oWT1wDiy7pogVlJHGtdOoM3zdB45t9zZVyGYU8qcOgo&s=zFj3lh-N_YlNBRlDKeO-aTs0Bf2qtWLUHKlw_nh2Q4o&e=
>>> Pasting related part below, extra row added by me is a requested feature.
>>>
>>>       +---------------------+
>>>       | C fun    | NaN | NA | R fun
>>>       +---------------------+
>>>       | ISNAN    |  t  | t  | is.na
>>>       | R_IsNaN  |  t  | f  | is.nan
>>>       | ISNA     |  f  | t  | is.na && !is.nan
>>>       | R_IsNA   |  f  | t  | is.na && !is.nan
>>>       +---------------------+
>>>       +---------------------+
>>>       | R fun    | NaN | NA | C fun
>>>       +---------------------+
>>>       | is.na    |  t  | t  | ISNAN
>>>       | is.nan   |  t  | f  | R_IsNaN
>>>       +---------------------+
>>>       | is.nana  |  f  | t  | R_IsNA
>>>       +---------------------+
>>>
>>> Strictly speaking, I am asking for a new R function:
>>>
>>>       is.nana <- function(x) if (typeof(x)=="numeric")
>>> .Primitive("is.nana") else .Primitive("is.na")
>>>
>>> Then probably a copy of C function `do_isnan` as `do_isnana` with a
>>> minor change from `R_IsNaN` to `R_IsNA`.
>>>
>>> Best,
>>> Jan Gorecki
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>>
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=oWT1wDiy7pogVlJHGtdOoM3zdB45t9zZVyGYU8qcOgo&s=tCCxZtQj30QrtAYORMODT-OnjeKiXxiF0qlZtgyj1Mc&e=
>> --
>> Herv? Pag?s
>>
>> Program in Computational Biology
>> Division of Public Health Sciences
>> Fred Hutchinson Cancer Research Center
>> 1100 Fairview Ave. N, M1-B514
>> P.O. Box 19024
>> Seattle, WA 98109-1024
>>
>> E-mail: hpages at fredhutch.org
>> Phone:  (206) 667-5791
>> Fax:    (206) 667-1319
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @nto|ne@|@br| @end|ng |rom gm@||@com  Thu Jan  2 23:10:36 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Thu, 2 Jan 2020 23:10:36 +0100
Subject: [Rd] Bug/unhelpful error message when rbinding data frames
 containing data frame columns
Message-ID: <CAEKh8uj1QXrM+f30P_VnAomZWZ-nPLWH2bpOC6AjsduXkyAJ2g@mail.gmail.com>

Dear rdevel,

See the example below :

x <- data.frame(a=1)
x$b <- data.frame(z=1)
y <- x
rbind(x,y)
# Error in `.rowNamesDF<-`(x, value = value) :
#   duplicate 'row.names' are not allowed
# In addition: Warning message:
#   non-unique value when setting 'row.names': ?1?

I believe, that either it is a bug, and the data frame columns should be
rbind-ed themselves, or
an error should explicitly state that we can't use rbind on data frames
containing data frame columns (and it should be documented).

Thanks and happy 2020!

Antoine

	[[alternative HTML version deleted]]


From @ko@ty@h@k @end|ng |rom u||@edu  Sat Jan  4 22:35:23 2020
From: @ko@ty@h@k @end|ng |rom u||@edu (Scott Kostyshak)
Date: Sat, 4 Jan 2020 16:35:23 -0500
Subject: [Rd] [patch] add sanity checks to quantile()
In-Reply-To: <20190531052855.5zzdb2x7i4et3vyb@boogie>
References: <20190531052855.5zzdb2x7i4et3vyb@boogie>
Message-ID: <20200104213523.xl4v4772qtiqbe7o@tallinn>

On Fri, May 31, 2019 at 01:28:55AM -0400, Scott Kostyshak wrote:
> The attached patch adds some sanity checks to the "type" argument of
> quantile(). Output from the following commands show the change of
> behavior with the current patch:
> 
>   vec <- 1:10
>   quantile(vec, type = c(1, 2))
>   quantile(vec, type = 10)
>   quantile(vec, type = "aaa")
>   quantile(vec, type = NA_real_)
>   quantile(vec, type = 4.3)
>   quantile(vec, type = -1)
> 
> Current behavior (i.e., without the patch):
> 
>   > vec <- 1:10
>   > quantile(vec, type = c(1, 2))
>   Error in switch(type, (nppm > j), ((nppm > j) + 1)/2, (nppm != j) | ((j%%2L) ==  : 
>     EXPR must be a length 1 vector
>   In addition: Warning messages:
>   1: In if (type == 7) { :
>     the condition has length > 1 and only the first element will be used
>   2: In if (type <= 3) { :
>     the condition has length > 1 and only the first element will be used
>   3: In if (type == 3) n * probs - 0.5 else n * probs :
>     the condition has length > 1 and only the first element will be used
>   > quantile(vec, type = 10)
>   Error in quantile.default(vec, type = 10) : object 'a' not found
>   > quantile(vec, type = "aaa")
>   Error in type - 3 : non-numeric argument to binary operator
>   > quantile(vec, type = NA_real_)
>   Error in if (type == 7) { : missing value where TRUE/FALSE needed
>   > quantile(vec, type = 4.3)
>     0%  25%  50%  75% 100% 
>    1.0  2.5  5.0  7.5 10.0 
>   > quantile(vec, type = -1)
>     0%  25%  50%  75% 100% 
>      1    2    5    7   10 
> 
> 
> Behavior with the patch:
> 
>   > vec <- 1:10
>   > quantile(vec, type = c(1, 2))
>   Error in quantile.default(vec, type = c(1, 2)) : 
>     'type' must be of length 1
>   > quantile(vec, type = 10)
>   Error in quantile.default(vec, type = 10) : 
>     'type' must be an integer between 1 and 9
>   > quantile(vec, type = "aaa")
>   Error in quantile.default(vec, type = "aaa") : 
>     'type' must be an integer between 1 and 9
>   > quantile(vec, type = NA_real_)
>   Error in quantile.default(vec, type = NA_real_) : 
>     'type' must be an integer between 1 and 9
>   > quantile(vec, type = 4.3)
>   Error in quantile.default(vec, type = 4.3) : 
>     'type' must be an integer between 1 and 9
>   > quantile(vec, type = -1)
>   Error in quantile.default(vec, type = -1) : 
>     'type' must be an integer between 1 and 9
> 
> 
> Note that with the patch, quantile() gives an error in some cases where
> the current code does not. Specifically, the following two calls to
> quantile() do not give an error without the patch:
> 
>   quantile(vec, type = 4.3)
>   quantile(vec, type = -1)
> 
> Thus, this patch could cause current code to give an error. If it is
> desired, I could change the patch such that it only gives an error when
> current R gives an error (i.e., the only benefit of the patch would be
> better error messages), or I can change the patch to give a warning in
> these cases.
> 
> Scott
> 
> 
> -- 
> Scott Kostyshak
> Assistant Professor of Economics
> University of Florida
> https://people.clas.ufl.edu/skostyshak/
> 

Bump. For this type of patch proposal, is it better to use the
bug tracker?

Thanks,

Scott


-- 
Scott Kostyshak
Assistant Professor of Economics
University of Florida
https://people.clas.ufl.edu/skostyshak/


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Jan  5 00:32:15 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 4 Jan 2020 18:32:15 -0500
Subject: [Rd] [patch] add sanity checks to quantile()
In-Reply-To: <20200104213523.xl4v4772qtiqbe7o@tallinn>
References: <20190531052855.5zzdb2x7i4et3vyb@boogie>
 <20200104213523.xl4v4772qtiqbe7o@tallinn>
Message-ID: <a445f4ee-04cb-7746-58c9-37982a327cf2@gmail.com>

On 04/01/2020 4:35 p.m., Scott Kostyshak wrote:
> On Fri, May 31, 2019 at 01:28:55AM -0400, Scott Kostyshak wrote:
>> The attached patch adds some sanity checks to the "type" argument of
...
> Bump. For this type of patch proposal, is it better to use the
> bug tracker?

For almost any patch proposal it is.  Certainly if you don't get action 
(or at least discussion) within a few days, any other proposal will be 
forgotten.

Duncan Murdoch


From @ko@ty@h@k @end|ng |rom u||@edu  Sun Jan  5 05:08:23 2020
From: @ko@ty@h@k @end|ng |rom u||@edu (Scott Kostyshak)
Date: Sat, 4 Jan 2020 23:08:23 -0500
Subject: [Rd] [patch] add sanity checks to quantile()
In-Reply-To: <a445f4ee-04cb-7746-58c9-37982a327cf2@gmail.com>
References: <20190531052855.5zzdb2x7i4et3vyb@boogie>
 <20200104213523.xl4v4772qtiqbe7o@tallinn>
 <a445f4ee-04cb-7746-58c9-37982a327cf2@gmail.com>
Message-ID: <20200105040823.egrytyujuq6rtj4h@tallinn>

On Sat, Jan 04, 2020 at 06:32:15PM -0500, Duncan Murdoch wrote:
> 
> On 04/01/2020 4:35 p.m., Scott Kostyshak wrote:
> > On Fri, May 31, 2019 at 01:28:55AM -0400, Scott Kostyshak wrote:
> > > The attached patch adds some sanity checks to the "type" argument of
> ...
> > Bump. For this type of patch proposal, is it better to use the
> > bug tracker?
> 
> For almost any patch proposal it is.  Certainly if you don't get action
> (or at least discussion) within a few days, any other proposal will be
> forgotten.
> 
> Duncan Murdoch

That makes sense. Thanks for the quick reply and advice. Here is the
ticket:

  https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17683

Scott


-- 
Scott Kostyshak
Assistant Professor of Economics
University of Florida
https://people.clas.ufl.edu/skostyshak/


From @dutky @end|ng |rom gm@||@com  Wed Jan  1 17:46:19 2020
From: @dutky @end|ng |rom gm@||@com (Steve Dutky)
Date: Wed, 1 Jan 2020 11:46:19 -0500
Subject: [Rd] standard naming for components of R data structures
Message-ID: <CAF6+P4e6COJgrNEMKfM9w+_Yx=uR5jD-8F8Jb+fyErTQBg=2Jw-5030@mail.gmail.com>

I need to write some documentation:

I'm looking for a standard, consistent way of referring  to the components
and attributes of R data structures.   Googling and Stackoverflow yield a
variety of github sites that do not seem to be particularly authoritative.

I was hoping to find a BNF/ABNF grammar for R.

I've looked at the output of bison -v ./R-3.6.2/src/main/gram.y but it does
not appear helpful.

I appreciate any suggestions for where to look or what to do.

Thanks, Steve

-- 

Ever tried, Ever failed, No Matter:

Try again, Fail again, Fail Better.

Samuel Beckett *Worstward Ho*

	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Mon Jan  6 21:18:23 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Tue, 7 Jan 2020 09:18:23 +1300
Subject: [Rd] standard naming for components of R data structures
In-Reply-To: <CAF6+P4e6COJgrNEMKfM9w+_Yx=uR5jD-8F8Jb+fyErTQBg=2Jw-5030@mail.gmail.com>
References: <CAF6+P4e6COJgrNEMKfM9w+_Yx=uR5jD-8F8Jb+fyErTQBg=2Jw-5030@mail.gmail.com>
Message-ID: <CAB8pepyJxQ5XBhyQhj6xhM5=QTHy01Q2aK8B1jdgc-5q4HFHwQ@mail.gmail.com>

Do you just need something on pen and paper?
(In which case, I don't see why it needs to be "standard").

Or do you need something that can be used with bison/yacc/cup/etc to
produce a parser?

On a side note, I would say that the R Language Definition is the
"standard" way.
But I do recognize that this has a different flavour to modern
language implementation *theory*.

https://cran.r-project.org/doc/manuals/r-release/R-lang.html


On Tue, Jan 7, 2020 at 5:17 AM Steve Dutky <sdutky at gmail.com> wrote:
>
> I need to write some documentation:
>
> I'm looking for a standard, consistent way of referring  to the components
> and attributes of R data structures.   Googling and Stackoverflow yield a
> variety of github sites that do not seem to be particularly authoritative.
>
> I was hoping to find a BNF/ABNF grammar for R.
>
> I've looked at the output of bison -v ./R-3.6.2/src/main/gram.y but it does
> not appear helpful.
>
> I appreciate any suggestions for where to look or what to do.
>
> Thanks, Steve
>
> --
>
> Ever tried, Ever failed, No Matter:
>
> Try again, Fail again, Fail Better.
>
> Samuel Beckett *Worstward Ho*
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From neon|r@ @end|ng |rom gm@||@com  Mon Jan  6 23:19:07 2020
From: neon|r@ @end|ng |rom gm@||@com (neonira Arinoem)
Date: Mon, 6 Jan 2020 23:19:07 +0100
Subject: [Rd] standard naming for components of R data structures
In-Reply-To: <CAB8pepyJxQ5XBhyQhj6xhM5=QTHy01Q2aK8B1jdgc-5q4HFHwQ@mail.gmail.com>
References: <CAF6+P4e6COJgrNEMKfM9w+_Yx=uR5jD-8F8Jb+fyErTQBg=2Jw-5030@mail.gmail.com>
 <CAB8pepyJxQ5XBhyQhj6xhM5=QTHy01Q2aK8B1jdgc-5q4HFHwQ@mail.gmail.com>
Message-ID: <CAN--Dz0naS+k+e5rNFgXi_sCptUUQuhK3nFJzCZm1A3rsN6OcQ@mail.gmail.com>

@steve

Seek for online document named "writing R extensions" chapter 2. It tells
how to describe a list structure using item markup for R documentation
files, if indeed this matches your search, thing I am not sure. Something
that looks like...

value{
The \\code{list} owns following names
\\item{alpha}{double vector}
\\item{beta}{integer vector}
\\item{delta}{raw vector}
}

Best

Le lun. 6 janv. 2020 ? 21:18, Abby Spurdle <spurdle.a at gmail.com> a ?crit :

> Do you just need something on pen and paper?
> (In which case, I don't see why it needs to be "standard").
>
> Or do you need something that can be used with bison/yacc/cup/etc to
> produce a parser?
>
> On a side note, I would say that the R Language Definition is the
> "standard" way.
> But I do recognize that this has a different flavour to modern
> language implementation *theory*.
>
> https://cran.r-project.org/doc/manuals/r-release/R-lang.html
>
>
> On Tue, Jan 7, 2020 at 5:17 AM Steve Dutky <sdutky at gmail.com> wrote:
> >
> > I need to write some documentation:
> >
> > I'm looking for a standard, consistent way of referring  to the
> components
> > and attributes of R data structures.   Googling and Stackoverflow yield a
> > variety of github sites that do not seem to be particularly
> authoritative.
> >
> > I was hoping to find a BNF/ABNF grammar for R.
> >
> > I've looked at the output of bison -v ./R-3.6.2/src/main/gram.y but it
> does
> > not appear helpful.
> >
> > I appreciate any suggestions for where to look or what to do.
> >
> > Thanks, Steve
> >
> > --
> >
> > Ever tried, Ever failed, No Matter:
> >
> > Try again, Fail again, Fail Better.
> >
> > Samuel Beckett *Worstward Ho*
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Jan  6 23:40:02 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 6 Jan 2020 17:40:02 -0500
Subject: [Rd] standard naming for components of R data structures
In-Reply-To: <CAN--Dz0naS+k+e5rNFgXi_sCptUUQuhK3nFJzCZm1A3rsN6OcQ@mail.gmail.com>
References: <CAF6+P4e6COJgrNEMKfM9w+_Yx=uR5jD-8F8Jb+fyErTQBg=2Jw-5030@mail.gmail.com>
 <CAB8pepyJxQ5XBhyQhj6xhM5=QTHy01Q2aK8B1jdgc-5q4HFHwQ@mail.gmail.com>
 <CAN--Dz0naS+k+e5rNFgXi_sCptUUQuhK3nFJzCZm1A3rsN6OcQ@mail.gmail.com>
Message-ID: <bc009c7b-6c9f-cff8-2983-85ae7838ca88@gmail.com>

On 06/01/2020 5:19 p.m., neonira Arinoem wrote:
> @steve
> 
> Seek for online document named "writing R extensions" chapter 2. It tells

You hardly need to look for it online:  it is included with every copy 
of R.  Just run help.start() in R (or look in the menus for the GUI 
versions).

Duncan Murdoch

> how to describe a list structure using item markup for R documentation
> files, if indeed this matches your search, thing I am not sure. Something
> that looks like...
> 
> value{
> The \\code{list} owns following names
> \\item{alpha}{double vector}
> \\item{beta}{integer vector}
> \\item{delta}{raw vector}
> }
> 
> Best
> 
> Le lun. 6 janv. 2020 ? 21:18, Abby Spurdle <spurdle.a at gmail.com> a ?crit :
> 
>> Do you just need something on pen and paper?
>> (In which case, I don't see why it needs to be "standard").
>>
>> Or do you need something that can be used with bison/yacc/cup/etc to
>> produce a parser?
>>
>> On a side note, I would say that the R Language Definition is the
>> "standard" way.
>> But I do recognize that this has a different flavour to modern
>> language implementation *theory*.
>>
>> https://cran.r-project.org/doc/manuals/r-release/R-lang.html
>>
>>
>> On Tue, Jan 7, 2020 at 5:17 AM Steve Dutky <sdutky at gmail.com> wrote:
>>>
>>> I need to write some documentation:
>>>
>>> I'm looking for a standard, consistent way of referring  to the
>> components
>>> and attributes of R data structures.   Googling and Stackoverflow yield a
>>> variety of github sites that do not seem to be particularly
>> authoritative.
>>>
>>> I was hoping to find a BNF/ABNF grammar for R.
>>>
>>> I've looked at the output of bison -v ./R-3.6.2/src/main/gram.y but it
>> does
>>> not appear helpful.
>>>
>>> I appreciate any suggestions for where to look or what to do.
>>>
>>> Thanks, Steve
>>>
>>> --
>>>
>>> Ever tried, Ever failed, No Matter:
>>>
>>> Try again, Fail again, Fail Better.
>>>
>>> Samuel Beckett *Worstward Ho*
>>>
>>>          [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan  7 12:58:15 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 7 Jan 2020 12:58:15 +0100
Subject: [Rd] Another wish (?) for R 4.0.0:  print(*,  width = <n>)
Message-ID: <24084.29271.786439.788271@stat.math.ethz.ch>

One of the things I often wish R would work with:

When calling print() explicitly --- as I do not so rarely, e.g.,
specifying  digits = <nd> ---
it sometimes seems awkward that from the printing options() ,
one can specify 'digits' and it has default  digits = NULL which is
documented to be equivalent to  digits = getOption("digits"),
but one cannot specify 'width'
... well "even worse": one *can* specify 'width = .' but it is
silently ignored - as well documented  on  ?print.default

Before considering to add this for R 4.0.0, doing the work
myself, I'd quickly wanted to hear opinions / caveats / .. about this.

wishing you all a  Happy New Year,
Martin

Martin Maechler
ETH Zurich and R Core Team


From @dutky @end|ng |rom gm@||@com  Mon Jan  6 21:40:31 2020
From: @dutky @end|ng |rom gm@||@com (Steve Dutky)
Date: Mon, 6 Jan 2020 15:40:31 -0500
Subject: [Rd] standard naming for components of R data structures
In-Reply-To: <CAB8pepyJxQ5XBhyQhj6xhM5=QTHy01Q2aK8B1jdgc-5q4HFHwQ@mail.gmail.com>
References: <CAF6+P4e6COJgrNEMKfM9w+_Yx=uR5jD-8F8Jb+fyErTQBg=2Jw-5030@mail.gmail.com>
 <CAB8pepyJxQ5XBhyQhj6xhM5=QTHy01Q2aK8B1jdgc-5q4HFHwQ@mail.gmail.com>
Message-ID: <CAF6+P4dtgTWFRvyX9XbjkOSuXEuyMYOPZvnusMLnnAWW_8cOxA@mail.gmail.com>

Thank you: the R Language Definition is very helpful.

On Mon, Jan 6, 2020 at 3:18 PM Abby Spurdle <spurdle.a at gmail.com> wrote:

> Do you just need something on pen and paper?
> (In which case, I don't see why it needs to be "standard").
>
> Or do you need something that can be used with bison/yacc/cup/etc to
> produce a parser?
>
> On a side note, I would say that the R Language Definition is the
> "standard" way.
> But I do recognize that this has a different flavour to modern
> language implementation *theory*.
>
> https://cran.r-project.org/doc/manuals/r-release/R-lang.html
>
>
> On Tue, Jan 7, 2020 at 5:17 AM Steve Dutky <sdutky at gmail.com> wrote:
> >
> > I need to write some documentation:
> >
> > I'm looking for a standard, consistent way of referring  to the
> components
> > and attributes of R data structures.   Googling and Stackoverflow yield a
> > variety of github sites that do not seem to be particularly
> authoritative.
> >
> > I was hoping to find a BNF/ABNF grammar for R.
> >
> > I've looked at the output of bison -v ./R-3.6.2/src/main/gram.y but it
> does
> > not appear helpful.
> >
> > I appreciate any suggestions for where to look or what to do.
> >
> > Thanks, Steve
> >
> > --
> >
> > Ever tried, Ever failed, No Matter:
> >
> > Try again, Fail again, Fail Better.
> >
> > Samuel Beckett *Worstward Ho*
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 

Ever tried, Ever failed, No Matter:

Try again, Fail again, Fail Better.

Samuel Beckett *Worstward Ho*

	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Tue Jan  7 15:13:29 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Tue, 7 Jan 2020 14:13:29 +0000 (UTC)
Subject: [Rd] Another wish (?) for R 4.0.0:  print(*,  width = <n>)
In-Reply-To: <24084.29271.786439.788271@stat.math.ethz.ch>
References: <24084.29271.786439.788271@stat.math.ethz.ch>
Message-ID: <176003077.7828620.1578406409268@mail.yahoo.com>

 For whatever my 2c are worth I think this would be nice.? I'm still uncomfortable at having to call `options` in my package `diffobj` to set output width.

And since the topic is here, what about `show`?? Feels like it should accept `...` so that it too could be given some set of standard or non standard parameters, including `width`.
Happy new decade.
B.

    On Tuesday, January 7, 2020, 6:58:32 AM EST, Martin Maechler <maechler at stat.math.ethz.ch> wrote:  
 
 One of the things I often wish R would work with:

When calling print() explicitly --- as I do not so rarely, e.g.,
specifying? digits = <nd> ---
it sometimes seems awkward that from the printing options() ,
one can specify 'digits' and it has default? digits = NULL which is
documented to be equivalent to? digits = getOption("digits"),
but one cannot specify 'width'
... well "even worse": one *can* specify 'width = .' but it is
silently ignored - as well documented? on? ?print.default

Before considering to add this for R 4.0.0, doing the work
myself, I'd quickly wanted to hear opinions / caveats / .. about this.

wishing you all a? Happy New Year,
Martin

Martin Maechler
ETH Zurich and R Core Team

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel
  
	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue Jan  7 22:31:18 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 7 Jan 2020 13:31:18 -0800
Subject: [Rd] Another wish (?) for R 4.0.0: print(*, width = <n>)
In-Reply-To: <176003077.7828620.1578406409268@mail.yahoo.com>
References: <24084.29271.786439.788271@stat.math.ethz.ch>
 <176003077.7828620.1578406409268@mail.yahoo.com>
Message-ID: <CAFDcVCTgwTbPzPtb4aLOs_2uAVVa0t3SL1dauKMXubU2_OiftQ@mail.gmail.com>

On Tue, Jan 7, 2020 at 6:14 AM brodie gaslam via R-devel
<r-devel at r-project.org> wrote:
>
>  For whatever my 2c are worth I think this would be nice.  I'm still uncomfortable at having to call `options` in my package `diffobj` to set output width.

Adding a few more cents: It might be worth considering "who" should be
allow to control the 'width' argument.  In an interactive session,
it's neat for the user to quickly be able to adjust 'width'.  But in
what cases should this be controlled by a (package) developer?  What
assumptions can the developer safely make about the 'width' of the end
user?  I don't know the answer to this and I'm sure one can find valid
cases where it makes sense to set the 'width' in a package - maybe
like width = 0.90 * getOption("width", 80)?

Could it be that print() ignoring 'width' has protected us from
packages producing output with a fixed, hardcoded width that is set by
the developer?  If print() us updated to acknowledge 'width', will we
start seeing print(..., width = 120) and so on in package code?  Is
this good or bad?  This might be a complementary problem to what we
have with 'stringsAsFactors' where the user's settings can override
the intention of the developer.

/Henrik





>
> And since the topic is here, what about `show`?  Feels like it should accept `...` so that it too could be given some set of standard or non standard parameters, including `width`.
> Happy new decade.
> B.
>
>     On Tuesday, January 7, 2020, 6:58:32 AM EST, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>
>  One of the things I often wish R would work with:
>
> When calling print() explicitly --- as I do not so rarely, e.g.,
> specifying  digits = <nd> ---
> it sometimes seems awkward that from the printing options() ,
> one can specify 'digits' and it has default  digits = NULL which is
> documented to be equivalent to  digits = getOption("digits"),
> but one cannot specify 'width'
> ... well "even worse": one *can* specify 'width = .' but it is
> silently ignored - as well documented  on  ?print.default
>
> Before considering to add this for R 4.0.0, doing the work
> myself, I'd quickly wanted to hear opinions / caveats / .. about this.
>
> wishing you all a  Happy New Year,
> Martin
>
> Martin Maechler
> ETH Zurich and R Core Team
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hp@ge@ @end|ng |rom |redhutch@org  Wed Jan  8 02:04:51 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Wed, 8 Jan 2020 01:04:51 +0000
Subject: [Rd] Another wish (?) for R 4.0.0: print(*, width = <n>)
In-Reply-To: <176003077.7828620.1578406409268@mail.yahoo.com>
References: <24084.29271.786439.788271@stat.math.ethz.ch>
 <176003077.7828620.1578406409268@mail.yahoo.com>
Message-ID: <200dd96b-bfac-dc07-f9ff-65b651d8d1c4@fredhutch.org>

On 1/7/20 06:13, brodie gaslam via R-devel wrote:
...
> Happy new decade.

  *** caught segfault ***
conflicting decade boundaries

Traceback:
  1: new_decade <- 2020:2029
  2: previous_decade <- 2011:2020
  3: previous_previous_decade <- 2001:2010
  4: current_millenium <- 2001:3000
  5: previous_millenium <- 1001:2000
  6: previous_previous_millenium <- 1:1000

Cheers,
H.


-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From |uc@r @end|ng |rom |edor@project@org  Wed Jan  8 08:29:31 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 8 Jan 2020 08:29:31 +0100
Subject: [Rd] Another wish (?) for R 4.0.0: print(*, width = <n>)
In-Reply-To: <200dd96b-bfac-dc07-f9ff-65b651d8d1c4@fredhutch.org>
References: <24084.29271.786439.788271@stat.math.ethz.ch>
 <176003077.7828620.1578406409268@mail.yahoo.com>
 <200dd96b-bfac-dc07-f9ff-65b651d8d1c4@fredhutch.org>
Message-ID: <CALEXWq1qHD5f=MgOJW3FWYurRwntaL6q3wNstj8aXZTSjYupmA@mail.gmail.com>

On Wed, 8 Jan 2020 at 02:05, Pages, Herve <hpages at fredhutch.org> wrote:
>
> On 1/7/20 06:13, brodie gaslam via R-devel wrote:
> ...
> > Happy new decade.
>
>   *** caught segfault ***
> conflicting decade boundaries

https://xkcd.com/2249/ ;-)

>
> Traceback:
>   1: new_decade <- 2020:2029
>   2: previous_decade <- 2011:2020
>   3: previous_previous_decade <- 2001:2010
>   4: current_millenium <- 2001:3000
>   5: previous_millenium <- 1001:2000
>   6: previous_previous_millenium <- 1:1000
>
> Cheers,
> H.

I?aki


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Jan  8 09:42:34 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 8 Jan 2020 09:42:34 +0100
Subject: [Rd] Another wish (?) for R 4.0.0: print(*, width = <n>)
In-Reply-To: <CAFDcVCTgwTbPzPtb4aLOs_2uAVVa0t3SL1dauKMXubU2_OiftQ@mail.gmail.com>
References: <24084.29271.786439.788271@stat.math.ethz.ch>
 <176003077.7828620.1578406409268@mail.yahoo.com>
 <CAFDcVCTgwTbPzPtb4aLOs_2uAVVa0t3SL1dauKMXubU2_OiftQ@mail.gmail.com>
Message-ID: <24085.38394.272781.364321@stat.math.ethz.ch>

>>>>> Henrik Bengtsson 
>>>>>     on Tue, 7 Jan 2020 13:31:18 -0800 writes:

    > On Tue, Jan 7, 2020 at 6:14 AM brodie gaslam via R-devel
    > <r-devel at r-project.org> wrote:
    >> 
    >> For whatever my 2c are worth I think this would be nice.  I'm still uncomfortable at having to call `options` in my package `diffobj` to set output width.

    > Adding a few more cents: It might be worth considering "who" should be
    > allow to control the 'width' argument.  

Well, I tend to disagree; this is not about control (and playing
police .. ;-).
Everbody can set  options() even now and that is a pretty bad
thing unless they are properly localized
{with which I mean: It's +- okay, if you use

- in a function

   op <- options(..) ; on.exit(options(op))

- in a script

   op <- options(..)

   ................
   ................

   options(op)

}
and yes I know people even invented  withOptions(...) etc.

Good programmring style for *functions* according to my book is
to have them depend only on their arguments, and if a global
option really (reall? think twice!) should influence behavior,
there should be arguments of the function which have a default
determined by the global option. 

{ And then in my personal style book, global options should never
  influence anything but "output" {print, plot, ..} and so the
  stringsAsFactors global option is an atrocity and horror ......}


    > In an interactive session,
    > it's neat for the user to quickly be able to adjust 'width'.  But in
    > what cases should this be controlled by a (package) developer?  

packages can set global options now which is much worse than
using it explicitly in some function calls.

Making 'width' an explicit argument {only in some cases, you
cannot do it for auto-printing of course!}

    > What assumptions can the developer safely make about the 'width' of the end
    > user?  I don't know the answer to this and I'm sure one can find valid
    > cases where it makes sense to set the 'width' in a package - maybe
    > like width = 0.90 * getOption("width", 80)?

Indeed.
I also would want to set width in  tests/*.R where I use *.Rout.save
or even more often in \examples{..} in help pages
when printing things that look best, say with  width=111
rather than the default 80.


    > Could it be that print() ignoring 'width' has protected us from
    > packages producing output with a fixed, hardcoded width that is set by
    > the developer?  If print() us updated to acknowledge 'width', will we
    > start seeing print(..., width = 120) and so on in package code?  Is
    > this good or bad?  This might be a complementary problem to what we
    > have with 'stringsAsFactors' where the user's settings can override
    > the intention of the developer.

    > /Henrik

A good package developer will think many times before doing that
(but maybe do it in examples, as I mentioned); careless package
developers do all kind of things anyway.
R (and free software in general) is also about giving freedom to
useRs ..  .. and some of us old folks know that with freedom
comes responsibility .. 

Thank you, Henrik, for your valuable thoughts!


[Brodie G.:]
    >> And since the topic is here, what about `show`?  Feels like it should accept `...` so that it too could be given some set of standard or non standard parameters, including `width`.

I'm not proposing to touch show().
Very often when working with S4 objects, I devise a
sophisticated print() method, with defaults, (often times "smart",
i.e. depending on other arguments) for all but the first
argument and then the show() method just calls that print method.

Best, Martin


    >> Happy new decade.
    >> B.
    >> 
    >> On Tuesday, January 7, 2020, 6:58:32 AM EST, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
    >> 
    >> One of the things I often wish R would work with:
    >> 
    >> When calling print() explicitly --- as I do not so rarely, e.g.,
    >> specifying  digits = <nd> ---
    >> it sometimes seems awkward that from the printing options() ,
    >> one can specify 'digits' and it has default  digits = NULL which is
    >> documented to be equivalent to  digits = getOption("digits"),
    >> but one cannot specify 'width'
    >> ... well "even worse": one *can* specify 'width = .' but it is
    >> silently ignored - as well documented  on  ?print.default
    >> 
    >> Before considering to add this for R 4.0.0, doing the work
    >> myself, I'd quickly wanted to hear opinions / caveats / .. about this.
    >> 
    >> wishing you all a  Happy New Year,
    >> Martin
    >> 
    >> Martin Maechler
    >> ETH Zurich and R Core Team


From |r|end|y @end|ng |rom yorku@c@  Wed Jan  8 16:06:09 2020
From: |r|end|y @end|ng |rom yorku@c@ (Michael Friendly)
Date: Wed, 8 Jan 2020 10:06:09 -0500
Subject: [Rd] re-submission of package after CRAN-pretest notes
Message-ID: <b626aafe-7897-66fa-045a-66bda6bb9565@yorku.ca>

It used to be the case that when I submitted a package and it gave notes 
or warnings in the CRAN checks, I was required to bump the package 
version before re-submission.

I hope this is no longer the case.? I recently submitted a package that 
gave one fairly trivial NOTE, fixed that, and would like to re-submit.

-Michael


-- 
Michael Friendly     Email: friendly AT yorku DOT ca
Professor, Psychology Dept. & Chair, ASA Statistical Graphics Section
York University      Voice: 416 736-2100 x66249
4700 Keele Street    Web: http://www.datavis.ca | @datavisFriendly
Toronto, ONT  M3J 1P3 CANADA


From edd @end|ng |rom deb|@n@org  Wed Jan  8 16:09:29 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 8 Jan 2020 09:09:29 -0600
Subject: [Rd] re-submission of package after CRAN-pretest notes
In-Reply-To: <b626aafe-7897-66fa-045a-66bda6bb9565@yorku.ca>
References: <b626aafe-7897-66fa-045a-66bda6bb9565@yorku.ca>
Message-ID: <24085.61609.924436.538862@rob.eddelbuettel.com>


On 8 January 2020 at 10:06, Michael Friendly wrote:
| It used to be the case that when I submitted a package and it gave notes 
| or warnings in the CRAN checks, I was required to bump the package 
| version before re-submission.
| 
| I hope this is no longer the case.? I recently submitted a package that 
| gave one fairly trivial NOTE, fixed that, and would like to re-submit.

Quoting from the bottom of the current CRAN Repo Policy:

   Re-submission

      Re-submission is done in the same way as submission, using the ?Optional
      comment? field on the webform (and not a separate email) to explain how
      the feedback on previous submission(s) has been addressed.

      Updates to previously-published packages must have an increased version.
      Increasing the version number at each submission reduces confusion so is
      preferred even when a previous submission was not accepted.

      [...]

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From tdhock5 @end|ng |rom gm@||@com  Wed Jan  8 19:20:55 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 8 Jan 2020 08:20:55 -1000
Subject: [Rd] add jsslogo.jpg to R sources?
Message-ID: <CALK03d0h7P2TB8L8Xj8mKttuAfvWas7zWndm7Hr+EyDQAPodLg@mail.gmail.com>

Hi R-core, I was wondering if somebody could please add jsslogo.jpg to the
R sources? (as I reported yesterday in this bug)

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17687

R already includes jss.cls which is the document class file for Journal of
Statistical Software. Actually, for the jss.cls file to be useful, it also
requires jsslogo.jpg in order to compile JSS articles without error.

This is an issue for me because I am writing a JSS paper that includes
figures created using tikzDevice, which I am telling to use the jss class
for computing metrics. On debian/ubuntu the R-src/share/texmf directory is
copied to /usr/share/texmf/tex/latex/R, so tikzDevice is finding jss.cls in
/usr/share/texmf/tex/latex/R/tex/latex/jss.cls but it is failing with a
'jsslogo not found' error -- the fix is to also include jsslogo.jpg in the
R sources (in the same directory as jss.cls).

thanks and happy new year
Toby

	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Wed Jan  8 19:44:50 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 8 Jan 2020 19:44:50 +0100
Subject: [Rd] add jsslogo.jpg to R sources?
In-Reply-To: <CALK03d0h7P2TB8L8Xj8mKttuAfvWas7zWndm7Hr+EyDQAPodLg@mail.gmail.com>
References: <CALK03d0h7P2TB8L8Xj8mKttuAfvWas7zWndm7Hr+EyDQAPodLg@mail.gmail.com>
Message-ID: <CALEXWq3Ze7PMO2CZ+4LXpejeKVW4gq+0SAiebsoR28373NCJqw@mail.gmail.com>

On Wed, 8 Jan 2020 at 19:21, Toby Hocking <tdhock5 at gmail.com> wrote:
>
> Hi R-core, I was wondering if somebody could please add jsslogo.jpg to the
> R sources? (as I reported yesterday in this bug)
>
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17687
>
> R already includes jss.cls which is the document class file for Journal of
> Statistical Software. Actually, for the jss.cls file to be useful, it also
> requires jsslogo.jpg in order to compile JSS articles without error.
>
> This is an issue for me because I am writing a JSS paper that includes
> figures created using tikzDevice, which I am telling to use the jss class
> for computing metrics. On debian/ubuntu the R-src/share/texmf directory is
> copied to /usr/share/texmf/tex/latex/R, so tikzDevice is finding jss.cls in
> /usr/share/texmf/tex/latex/R/tex/latex/jss.cls but it is failing with a
> 'jsslogo not found' error -- the fix is to also include jsslogo.jpg in the
> R sources (in the same directory as jss.cls).

Why don't you just include jsslogo.jpg in your working directory?
jss.cls is included in the R sources because there are many vignettes
with the JSS style, but always *without* the logo. The logo should
only be used for actual JSS publication, so I think that the R sources
are no place for it.

-- 
I?aki ?car


From Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t  Wed Jan  8 20:16:45 2020
From: Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t (Achim Zeileis)
Date: Wed, 8 Jan 2020 20:16:45 +0100 (CET)
Subject: [Rd] add jsslogo.jpg to R sources?
In-Reply-To: <CALEXWq3Ze7PMO2CZ+4LXpejeKVW4gq+0SAiebsoR28373NCJqw@mail.gmail.com>
References: <CALK03d0h7P2TB8L8Xj8mKttuAfvWas7zWndm7Hr+EyDQAPodLg@mail.gmail.com>
 <CALEXWq3Ze7PMO2CZ+4LXpejeKVW4gq+0SAiebsoR28373NCJqw@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2001082009310.4109@paninaro>

On Wed, 8 Jan 2020, I?aki Ucar wrote:

> On Wed, 8 Jan 2020 at 19:21, Toby Hocking <tdhock5 at gmail.com> wrote:
>>
>> Hi R-core, I was wondering if somebody could please add jsslogo.jpg to the
>> R sources? (as I reported yesterday in this bug)
>>
>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17687
>>
>> R already includes jss.cls which is the document class file for Journal of
>> Statistical Software. Actually, for the jss.cls file to be useful, it also
>> requires jsslogo.jpg in order to compile JSS articles without error.
>>
>> This is an issue for me because I am writing a JSS paper that includes
>> figures created using tikzDevice, which I am telling to use the jss class
>> for computing metrics. On debian/ubuntu the R-src/share/texmf directory is
>> copied to /usr/share/texmf/tex/latex/R, so tikzDevice is finding jss.cls in
>> /usr/share/texmf/tex/latex/R/tex/latex/jss.cls but it is failing with a
>> 'jsslogo not found' error -- the fix is to also include jsslogo.jpg in the
>> R sources (in the same directory as jss.cls).
>
> Why don't you just include jsslogo.jpg in your working directory?
> jss.cls is included in the R sources because there are many vignettes
> with the JSS style, but always *without* the logo. The logo should
> only be used for actual JSS publication, so I think that the R sources
> are no place for it.

Thanks, I?aki, you are right. The motivation for including jss.cls and 
jss.bst in the R sources was to facilitate turning JSS papers into 
vignettes (see the FAQ at https://www.jstatsoft.org/pages/view/style) with 
\documentclass[nojss]{jss}. Before jss.cls/bst were shipped along with 
base R many packages shipped with their own copy which seemed like a waste 
of resources and source of confusion.

When preparing new papers for submission in JSS you can also use the 
"nojss" option, this is also accepted by the journal.

Hope that helps,
Achim

P.S.: Toby, if you plan on discussing an such an issue anyway, I would 
recommend to wait with the bug report. Cross-posting on different channels 
is always a bit of a nuisance.

From g@bembecker @end|ng |rom gm@||@com  Wed Jan  8 21:28:53 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 8 Jan 2020 12:28:53 -0800
Subject: [Rd] re-submission of package after CRAN-pretest notes
In-Reply-To: <24085.61609.924436.538862@rob.eddelbuettel.com>
References: <b626aafe-7897-66fa-045a-66bda6bb9565@yorku.ca>
 <24085.61609.924436.538862@rob.eddelbuettel.com>
Message-ID: <CAD4oTHG2-wywDx_j5JF3aVr5TJSmkpYmFWQeEZxskBwePmi8+A@mail.gmail.com>

Hi Michael,

At the risk of sounding like I'm just name-dropping, R. Gentleman once told
me something along the lines of "version numbers are cheap, don't be afrai
to use a lot of them".

I get that its a bit annoying but its for good reason, imho. Any change, no
matter how trivial will change the MD5 of the package tarball. And as
someone who has administered a large shared R platform, I don't really ever
want 2 (source) tarballs of the "same version" of a package to differ like
that. Bumping the smallest portion of the version number doesn't seem a
very high price to avoid any possibility of that kind of confusion, to me
at least.

Obviously this only holds for published package versions, installing
directly from source control is a different story all together (which is
why, imho, it is so dangerous and should be avoided whenever its not
absolutely necessary, e.g., developing your own package against dev
versions of other packages). I could go on a lot more about that, but I'll
spare everyone the rant :)

Just my 2c

Best,
~G

On Wed, Jan 8, 2020 at 7:09 AM Dirk Eddelbuettel <edd at debian.org> wrote:

>
> On 8 January 2020 at 10:06, Michael Friendly wrote:
> | It used to be the case that when I submitted a package and it gave notes
> | or warnings in the CRAN checks, I was required to bump the package
> | version before re-submission.
> |
> | I hope this is no longer the case.  I recently submitted a package that
> | gave one fairly trivial NOTE, fixed that, and would like to re-submit.
>
> Quoting from the bottom of the current CRAN Repo Policy:
>
>    Re-submission
>
>       Re-submission is done in the same way as submission, using the
> ?Optional
>       comment? field on the webform (and not a separate email) to explain
> how
>       the feedback on previous submission(s) has been addressed.
>
>       Updates to previously-published packages must have an increased
> version.
>       Increasing the version number at each submission reduces confusion
> so is
>       preferred even when a previous submission was not accepted.
>
>       [...]
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From ||||e@@tor @end|ng |rom gmx@com  Thu Jan  9 12:48:24 2020
From: ||||e@@tor @end|ng |rom gmx@com (lille stor)
Date: Thu, 9 Jan 2020 12:48:24 +0100
Subject: [Rd] Get memory address of an R data frame
Message-ID: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>

Hello,

I would like for my C function to be able to manipulate some values stored in an R data frame.

To achieve this, a need the (real) memory address where the R data frame stores its data (hopefully in a contiguous way). Then, from R, I call the C function and passing this memory address as a parameter.

The question: how can we get the memory address of the R data frame?

Thank you!

L.


From ezztucker @end|ng |rom gm@||@com  Thu Jan  9 13:03:39 2020
From: ezztucker @end|ng |rom gm@||@com (Ezra Tucker)
Date: Thu, 9 Jan 2020 07:03:39 -0500
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
Message-ID: <CAP0QTermHXvc4acercTa-Nrxnx0y5RcqaZyt5=5-bwh90QBWvA@mail.gmail.com>

Hi Lille,

Is it possible you're looking for tracemem() or inspect() ?

> x <- data.frame(z = 1:10)> tracemem(x)[1] "<0x55aa743e0bc0>"

> x[1] <- 2Ltracemem[0x55aa743e0bc0 -> 0x55aa778f6ad0]:
tracemem[0x55aa778f6ad0 -> 0x55aa778f6868]: [<-.data.frame [<-
tracemem[0x55aa778f6868 -> 0x55aa778f5b48]: [<-.data.frame [<-

> .Internal(inspect(x)) @55aa743e0bc0 19 VECSXP g0c1
[OBJ,MARK,NAM(7),TR,ATT] (len=1, tl=0) @55aa7440d420 13 INTSXP g0c0
[MARK,NAM(7)] 1 : 10 (compact) ATTRIB: @55aa743f9ea0 02 LISTSXP g0c0 [MARK]
TAG: @55aa72ac98a0 01 SYMSXP g0c0 [MARK,NAM(7),LCK,gp=0x6000] "names" (has
value) @55aa743e0fb0 16 STRSXP g0c1 [MARK,NAM(7)] (len=1, tl=0)
@55aa72be1c70 09 CHARSXP g0c1 [MARK,gp=0x61] [ASCII] [cached] "z" TAG:
@55aa72ac9d70 01 SYMSXP g0c0 [MARK,NAM(7),LCK,gp=0x4000] "class" (has
value) @55aa73ca59b8 16 STRSXP g0c1 [MARK,NAM(7)] (len=1, tl=0)
@55aa72b562b8 09 CHARSXP g0c2 [MARK,gp=0x61,ATT] [ASCII] [cached]
"data.frame" TAG: @55aa72ac9670 01 SYMSXP g0c0 [MARK,NAM(7),LCK,gp=0x4000]
"row.names" (has value) @55aa743e1c98 13 INTSXP g0c1 [MARK,NAM(7)] (len=2,
tl=0) -2147483648,-10



On Thu, Jan 9, 2020 at 6:48 AM lille stor <lille.stor at gmx.com> wrote:

> Hello,
>
> I would like for my C function to be able to manipulate some values stored
> in an R data frame.
>
> To achieve this, a need the (real) memory address where the R data frame
> stores its data (hopefully in a contiguous way). Then, from R, I call the C
> function and passing this memory address as a parameter.
>
> The question: how can we get the memory address of the R data frame?
>
> Thank you!
>
> L.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From je@n-|uc@||p@tz @end|ng |rom |n@ee@|r  Thu Jan  9 13:40:57 2020
From: je@n-|uc@||p@tz @end|ng |rom |n@ee@|r (Lipatz Jean-Luc)
Date: Thu, 9 Jan 2020 12:40:57 +0000
Subject: [Rd] mean
Message-ID: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>

Hello,

Is there a reason for the following behaviour?
> mean(c("1","2","3"))
[1] NA
Warning message:
In mean.default(c("1", "2", "3")) :
  l'argument n'est ni num?rique, ni logique : renvoi de NA

But:
> var(c("1","2","3"))
[1] 1

And also:
> median(c("1","2","3"))
[1] "2"

But:
> quantile(c("1","2","3"),p=.5)
Error in (1 - h) * qs[i] : 
  argument non num?rique pour un op?rateur binaire

It sounds like a lack of symetry. 
Best regards.


Jean-Luc LIPATZ
Insee - Direction g?n?rale
Responsable de la coordination sur le d?veloppement de R et la mise en oeuvre d'alternatives ? SAS


From jor|@mey@ @end|ng |rom gm@||@com  Thu Jan  9 13:58:19 2020
From: jor|@mey@ @end|ng |rom gm@||@com (Joris Meys)
Date: Thu, 9 Jan 2020 13:58:19 +0100
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
Message-ID: <CAO1zAVabrcDK1S1Fr_e55NX8EkkV3a+EmD+457b-r7e+8Ad9TQ@mail.gmail.com>

Hi Lille,

To my understanding, there's no need to get the actual memory address of
the R data frame, as using .Call() or .External() can be used in a "call by
reference" way as well. This would be contrary to standard R behaviour, so
if you use that in a package, make sure you indicate this!

There's a detailed explanation on how to deal with R objects in C code in
the manual "Writing R extensions" here :

https://cran.r-project.org/doc/manuals/R-exts.html#Handling-R-objects-in-C

Especially check the section "Named objects and copying", which explains in
more detail how to control the standard R behaviour. Also keep in mind that
data frames are list-like structures, which are handled differently from
atomic vectors.

Hope this helps.
Kind regards
Joris

On Thu, Jan 9, 2020 at 12:48 PM lille stor <lille.stor at gmx.com> wrote:

> Hello,
>
> I would like for my C function to be able to manipulate some values stored
> in an R data frame.
>
> To achieve this, a need the (real) memory address where the R data frame
> stores its data (hopefully in a contiguous way). Then, from R, I call the C
> function and passing this memory address as a parameter.
>
> The question: how can we get the memory address of the R data frame?
>
> Thank you!
>
> L.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From m@rc_@chw@rtz @end|ng |rom me@com  Thu Jan  9 14:18:39 2020
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Thu, 9 Jan 2020 08:18:39 -0500
Subject: [Rd] mean
In-Reply-To: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
References: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
Message-ID: <8A0E38C4-A2EA-4342-930B-503ECFE00D59@me.com>


> On Jan 9, 2020, at 7:40 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
> 
> Hello,
> 
> Is there a reason for the following behaviour?
>> mean(c("1","2","3"))
> [1] NA
> Warning message:
> In mean.default(c("1", "2", "3")) :
>  l'argument n'est ni num?rique, ni logique : renvoi de NA
> 
> But:
>> var(c("1","2","3"))
> [1] 1
> 
> And also:
>> median(c("1","2","3"))
> [1] "2"
> 
> But:
>> quantile(c("1","2","3"),p=.5)
> Error in (1 - h) * qs[i] : 
>  argument non num?rique pour un op?rateur binaire
> 
> It sounds like a lack of symetry. 
> Best regards.
> 
> 
> Jean-Luc LIPATZ
> Insee - Direction g?n?rale
> Responsable de la coordination sur le d?veloppement de R et la mise en oeuvre d'alternatives ? SAS


Hi,

It would appear, whether by design or just inconsistent implementations, perhaps by different authors over time, that the checks for whether or not the input vector is numeric differ across the functions.

A further inconsistency is for median(), where:

> median(c("1", "2", "3", "4"))
[1] NA
Warning message:
In mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]) :
  argument is not numeric or logical: returning NA

as a result of there being 4 elements, rather than 3, and the internal checks in the code, where in the case of the input vector having an even number of elements, mean() is used:

    if (n%%2L == 1L) 
        sort(x, partial = half)[half]
    else mean(sort(x, partial = half + 0L:1L)[half + 0L:1L])


Similarly:

> median(factor(c("1", "2", "3")))
Error in median.default(factor(c("1", "2", "3"))) : need numeric data

because the input vector is a factor, rather than character, and the initial check has:

  if (is.factor(x) || is.data.frame(x)) 
          stop("need numeric data")


Regards,

Marc Schwartz


From m@rc_@chw@rtz @end|ng |rom me@com  Thu Jan  9 14:49:48 2020
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Thu, 9 Jan 2020 08:49:48 -0500
Subject: [Rd] mean
In-Reply-To: <FEF25E56AFC7064784FA97C576467E0A020580AD4F@pdexchbalwst01.ad.insee.intra>
References: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
 <8A0E38C4-A2EA-4342-930B-503ECFE00D59@me.com>
 <FEF25E56AFC7064784FA97C576467E0A020580AD4F@pdexchbalwst01.ad.insee.intra>
Message-ID: <FC19B55E-5208-469A-91DC-93E5ACD2AD69@me.com>

Jean-Luc,

Please keep the communications on the list, for the benefit of others, now and in the future, via the list archive. I am adding r-devel back here.

I can't speak to the rationale in some of these cases. As I noted, it may be (is likely) due to differing authors over time, and there may have been relevant use cases at the time that the code was written, resulting in the various checks. Presumably, the additional checks were not incorporated into the other functions to enforce a level of consistency.

We will need to wait for someone from R Core to comment.

Regards,

Marc

> On Jan 9, 2020, at 8:34 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
> 
> Ok, inconstencies.
> 
> The last test you wrote is a bit strange. I agree that it is useful to warn about a computation that have no sense in the case of factors. But why testing data;frames? If you go that way using random structures, you can also try :
> 
>> median(list(1,2),list(3,4),list(4,5))
> Error in if (na.rm) x <- x[!is.na(x)] else if (any(is.na(x))) return(x[FALSE][NA]) : 
>  l'argument n'est pas interpr?table comme une valeur logique
> De plus : Warning message:
> In if (na.rm) x <- x[!is.na(x)] else if (any(is.na(x))) return(x[FALSE][NA]) :
>  la condition a une longueur > 1 et seul le premier ?l?ment est utilis?
> 
> giving a message which, despite of his length, doesn't really explain the reason of the error.
> 
> Why not a test on arguments like?
>  if (!is.numeric(x)) 
>          stop("need numeric data")
> 
> 
> -----Message d'origine-----
> De : Marc Schwartz <marc_schwartz at me.com> 
> Envoy? : jeudi 9 janvier 2020 14:19
> ? : Lipatz Jean-Luc <jean-luc.lipatz at insee.fr>
> Cc : R-Devel <r-devel at r-project.org>
> Objet : Re: [Rd] mean
> 
> 
>> On Jan 9, 2020, at 7:40 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
>> 
>> Hello,
>> 
>> Is there a reason for the following behaviour?
>>> mean(c("1","2","3"))
>> [1] NA
>> Warning message:
>> In mean.default(c("1", "2", "3")) :
>> l'argument n'est ni num?rique, ni logique : renvoi de NA
>> 
>> But:
>>> var(c("1","2","3"))
>> [1] 1
>> 
>> And also:
>>> median(c("1","2","3"))
>> [1] "2"
>> 
>> But:
>>> quantile(c("1","2","3"),p=.5)
>> Error in (1 - h) * qs[i] : 
>> argument non num?rique pour un op?rateur binaire
>> 
>> It sounds like a lack of symetry. 
>> Best regards.
>> 
>> 
>> Jean-Luc LIPATZ
>> Insee - Direction g?n?rale
>> Responsable de la coordination sur le d?veloppement de R et la mise en oeuvre d'alternatives ? SAS
> 
> 
> Hi,
> 
> It would appear, whether by design or just inconsistent implementations, perhaps by different authors over time, that the checks for whether or not the input vector is numeric differ across the functions.
> 
> A further inconsistency is for median(), where:
> 
>> median(c("1", "2", "3", "4"))
> [1] NA
> Warning message:
> In mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]) :
>  argument is not numeric or logical: returning NA
> 
> as a result of there being 4 elements, rather than 3, and the internal checks in the code, where in the case of the input vector having an even number of elements, mean() is used:
> 
>    if (n%%2L == 1L) 
>        sort(x, partial = half)[half]
>    else mean(sort(x, partial = half + 0L:1L)[half + 0L:1L])
> 
> 
> Similarly:
> 
>> median(factor(c("1", "2", "3")))
> Error in median.default(factor(c("1", "2", "3"))) : need numeric data
> 
> because the input vector is a factor, rather than character, and the initial check has:
> 
>  if (is.factor(x) || is.data.frame(x)) 
>          stop("need numeric data")
> 
> 
> Regards,
> 
> Marc Schwartz
> 
> 


From @tep@n@@|nde|@r @end|ng |rom or@c|e@com  Thu Jan  9 15:05:26 2020
From: @tep@n@@|nde|@r @end|ng |rom or@c|e@com (Stepan)
Date: Thu, 9 Jan 2020 15:05:26 +0100
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
Message-ID: <830d3acf-aa30-5f26-408d-f35b5f0cc2d9@oracle.com>

Hello Lille,

raw data of a data.frame (or more precisely a list, because data.frame 
is just a list with "data.frame" class) is an array of R specific data 
structures (SEXP), so a generic C function will not be able to work with 
them.

As a per-processing step, you may allocate an array for the pointers to 
the raw data of the columns yourself (there will be hopefully only a few 
compared to the size of the columns themselves). For this you'll need 
functions VECTOR_ELT to access the columns and DATAPTR to get their raw 
data (eventually TYPEOF to find out their type). Note that this won't 
work for a data frame that contains another list. If this memory layout 
doesn't work for you, then you may need to copy the whole data frame.

If you want to update the data from C, then keep in mind that

1) R vectors have value semantics and you should not be altering raw 
data of any vector unless you know that its not referenced from anywhere 
else -- otherwise you should make a copy, alter that copy instead and 
return it as the result from your C function.

2) R has generational garbage collector, so it *must* know about 
references between R objects and so you should use SET_VECTOR_ELT to 
update the data of a list (some would say that you can update the raw 
data if you really understand how the GC and R internals work, I would 
say: just don't)

Best,
Stepan

On 09. 01. 20 12:48, lille stor wrote:
> Hello,
>
> I would like for my C function to be able to manipulate some values stored in an R data frame.
>
> To achieve this, a need the (real) memory address where the R data frame stores its data (hopefully in a contiguous way). Then, from R, I call the C function and passing this memory address as a parameter.
>
> The question: how can we get the memory address of the R data frame?
>
> Thank you!
>
> L.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=ob3rEYy-Pk9cOE-VcE6_0TaHPYjGJ4kHYZru_jqXf38&s=AV2V5CyECZzyfSMZdViD_co5mAGurLNEu4jhA_CTDsk&e=


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Jan  9 15:16:27 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 9 Jan 2020 15:16:27 +0100
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <CAP0QTermHXvc4acercTa-Nrxnx0y5RcqaZyt5=5-bwh90QBWvA@mail.gmail.com>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
 <CAP0QTermHXvc4acercTa-Nrxnx0y5RcqaZyt5=5-bwh90QBWvA@mail.gmail.com>
Message-ID: <510b5943-af48-0010-dd2c-da2ed48f425e@gmail.com>

On 1/9/20 1:03 PM, Ezra Tucker wrote:
> Hi Lille,
>
> Is it possible you're looking for tracemem() or inspect() ?

Please note these functions are only for debugging. They should never be 
called from programs or packages. One should never try to manipulate 
pointers from R directly or even hold them (except for what "external 
pointer" objects allow and is described in Writing R Extensions).

Tomas
>
>> x <- data.frame(z = 1:10)> tracemem(x)[1] "<0x55aa743e0bc0>"
>> x[1] <- 2Ltracemem[0x55aa743e0bc0 -> 0x55aa778f6ad0]:
> tracemem[0x55aa778f6ad0 -> 0x55aa778f6868]: [<-.data.frame [<-
> tracemem[0x55aa778f6868 -> 0x55aa778f5b48]: [<-.data.frame [<-
>
>> .Internal(inspect(x)) @55aa743e0bc0 19 VECSXP g0c1
> [OBJ,MARK,NAM(7),TR,ATT] (len=1, tl=0) @55aa7440d420 13 INTSXP g0c0
> [MARK,NAM(7)] 1 : 10 (compact) ATTRIB: @55aa743f9ea0 02 LISTSXP g0c0 [MARK]
> TAG: @55aa72ac98a0 01 SYMSXP g0c0 [MARK,NAM(7),LCK,gp=0x6000] "names" (has
> value) @55aa743e0fb0 16 STRSXP g0c1 [MARK,NAM(7)] (len=1, tl=0)
> @55aa72be1c70 09 CHARSXP g0c1 [MARK,gp=0x61] [ASCII] [cached] "z" TAG:
> @55aa72ac9d70 01 SYMSXP g0c0 [MARK,NAM(7),LCK,gp=0x4000] "class" (has
> value) @55aa73ca59b8 16 STRSXP g0c1 [MARK,NAM(7)] (len=1, tl=0)
> @55aa72b562b8 09 CHARSXP g0c2 [MARK,gp=0x61,ATT] [ASCII] [cached]
> "data.frame" TAG: @55aa72ac9670 01 SYMSXP g0c0 [MARK,NAM(7),LCK,gp=0x4000]
> "row.names" (has value) @55aa743e1c98 13 INTSXP g0c1 [MARK,NAM(7)] (len=2,
> tl=0) -2147483648,-10
>
>
>
> On Thu, Jan 9, 2020 at 6:48 AM lille stor <lille.stor at gmx.com> wrote:
>
>> Hello,
>>
>> I would like for my C function to be able to manipulate some values stored
>> in an R data frame.
>>
>> To achieve this, a need the (real) memory address where the R data frame
>> stores its data (hopefully in a contiguous way). Then, from R, I call the C
>> function and passing this memory address as a parameter.
>>
>> The question: how can we get the memory address of the R data frame?
>>
>> Thank you!
>>
>> L.
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @tep@n@@|nde|@r @end|ng |rom or@c|e@com  Thu Jan  9 15:56:45 2020
From: @tep@n@@|nde|@r @end|ng |rom or@c|e@com (Stepan)
Date: Thu, 9 Jan 2020 15:56:45 +0100
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <trinity-6d5c6b7f-e9e8-4cdf-90ca-b9ec4b97a11a-1578580918843@3c-app-mailcom-bs07>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
 <830d3acf-aa30-5f26-408d-f35b5f0cc2d9@oracle.com>
 <trinity-6d5c6b7f-e9e8-4cdf-90ca-b9ec4b97a11a-1578580918843@3c-app-mailcom-bs07>
Message-ID: <736437f6-22b9-da92-8fb3-e931a83de39d@oracle.com>

On 09. 01. 20 15:41, lille stor wrote:

> I believe this could be done without creating side effects (e.g. 
> crash) as we are just talking about changing values.

that is exactly the issue that my last two points warn about. Example:

a <- mtcars
.Call("my_innocent_function", a)

Would you expect that mtcars data.frame would be altered after this code 
is executed? What if some existing code relies on mtcars always 
containing the same data, which is a perfectly valid assumption given R 
specification.

If what you are trying to do is to have mutable data frame, then this 
goes against the philosophy of R. You can get mutability with 
environments and other R types that are intentionally mutable and their 
mutability is documented.

You can get data.frame mutability with the data.table package, but the 
tricks it's doing under the hood may bite back. In its source code you 
can also see how these things can be done, but unless you really need 
to, I would advise against implementing this yourself.

Best,
Stepan


From pd@|gd @end|ng |rom gm@||@com  Thu Jan  9 16:46:01 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Thu, 9 Jan 2020 16:46:01 +0100
Subject: [Rd] mean
In-Reply-To: <FC19B55E-5208-469A-91DC-93E5ACD2AD69@me.com>
References: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
 <8A0E38C4-A2EA-4342-930B-503ECFE00D59@me.com>
 <FEF25E56AFC7064784FA97C576467E0A020580AD4F@pdexchbalwst01.ad.insee.intra>
 <FC19B55E-5208-469A-91DC-93E5ACD2AD69@me.com>
Message-ID: <692FB5BD-523B-4498-9F95-78B17866B5E3@gmail.com>

I think median() behaves as designed: As long as the argument can be ordered, the "middle observation" makes sense, except when the middle falls between two categories, and you can't define and average of the two candidates for a median.

The "sick man" would seem to be var(). Notice that it is also inconsistent with cov():

> cov(c("1","2","3","4"),c("1","2","3","4") )
Error in cov(c("1", "2", "3", "4"), c("1", "2", "3", "4")) : 
  is.numeric(x) || is.logical(x) is not TRUE
> var(c("1","2","3","4"),c("1","2","3","4") )
[1] 1.666667

-pd


> On 9 Jan 2020, at 14:49 , Marc Schwartz via R-devel <r-devel at r-project.org> wrote:
> 
> Jean-Luc,
> 
> Please keep the communications on the list, for the benefit of others, now and in the future, via the list archive. I am adding r-devel back here.
> 
> I can't speak to the rationale in some of these cases. As I noted, it may be (is likely) due to differing authors over time, and there may have been relevant use cases at the time that the code was written, resulting in the various checks. Presumably, the additional checks were not incorporated into the other functions to enforce a level of consistency.
> 
> We will need to wait for someone from R Core to comment.
> 
> Regards,
> 
> Marc
> 
>> On Jan 9, 2020, at 8:34 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
>> 
>> Ok, inconstencies.
>> 
>> The last test you wrote is a bit strange. I agree that it is useful to warn about a computation that have no sense in the case of factors. But why testing data;frames? If you go that way using random structures, you can also try :
>> 
>>> median(list(1,2),list(3,4),list(4,5))
>> Error in if (na.rm) x <- x[!is.na(x)] else if (any(is.na(x))) return(x[FALSE][NA]) : 
>> l'argument n'est pas interpr?table comme une valeur logique
>> De plus : Warning message:
>> In if (na.rm) x <- x[!is.na(x)] else if (any(is.na(x))) return(x[FALSE][NA]) :
>> la condition a une longueur > 1 et seul le premier ?l?ment est utilis?
>> 
>> giving a message which, despite of his length, doesn't really explain the reason of the error.
>> 
>> Why not a test on arguments like?
>> if (!is.numeric(x)) 
>>         stop("need numeric data")
>> 
>> 
>> -----Message d'origine-----
>> De : Marc Schwartz <marc_schwartz at me.com> 
>> Envoy? : jeudi 9 janvier 2020 14:19
>> ? : Lipatz Jean-Luc <jean-luc.lipatz at insee.fr>
>> Cc : R-Devel <r-devel at r-project.org>
>> Objet : Re: [Rd] mean
>> 
>> 
>>> On Jan 9, 2020, at 7:40 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
>>> 
>>> Hello,
>>> 
>>> Is there a reason for the following behaviour?
>>>> mean(c("1","2","3"))
>>> [1] NA
>>> Warning message:
>>> In mean.default(c("1", "2", "3")) :
>>> l'argument n'est ni num?rique, ni logique : renvoi de NA
>>> 
>>> But:
>>>> var(c("1","2","3"))
>>> [1] 1
>>> 
>>> And also:
>>>> median(c("1","2","3"))
>>> [1] "2"
>>> 
>>> But:
>>>> quantile(c("1","2","3"),p=.5)
>>> Error in (1 - h) * qs[i] : 
>>> argument non num?rique pour un op?rateur binaire
>>> 
>>> It sounds like a lack of symetry. 
>>> Best regards.
>>> 
>>> 
>>> Jean-Luc LIPATZ
>>> Insee - Direction g?n?rale
>>> Responsable de la coordination sur le d?veloppement de R et la mise en oeuvre d'alternatives ? SAS
>> 
>> 
>> Hi,
>> 
>> It would appear, whether by design or just inconsistent implementations, perhaps by different authors over time, that the checks for whether or not the input vector is numeric differ across the functions.
>> 
>> A further inconsistency is for median(), where:
>> 
>>> median(c("1", "2", "3", "4"))
>> [1] NA
>> Warning message:
>> In mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]) :
>> argument is not numeric or logical: returning NA
>> 
>> as a result of there being 4 elements, rather than 3, and the internal checks in the code, where in the case of the input vector having an even number of elements, mean() is used:
>> 
>>   if (n%%2L == 1L) 
>>       sort(x, partial = half)[half]
>>   else mean(sort(x, partial = half + 0L:1L)[half + 0L:1L])
>> 
>> 
>> Similarly:
>> 
>>> median(factor(c("1", "2", "3")))
>> Error in median.default(factor(c("1", "2", "3"))) : need numeric data
>> 
>> because the input vector is a factor, rather than character, and the initial check has:
>> 
>> if (is.factor(x) || is.data.frame(x)) 
>>         stop("need numeric data")
>> 
>> 
>> Regards,
>> 
>> Marc Schwartz
>> 
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@rc_@chw@rtz @end|ng |rom me@com  Thu Jan  9 17:52:19 2020
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Thu, 9 Jan 2020 11:52:19 -0500
Subject: [Rd] mean
In-Reply-To: <692FB5BD-523B-4498-9F95-78B17866B5E3@gmail.com>
References: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
 <8A0E38C4-A2EA-4342-930B-503ECFE00D59@me.com>
 <FEF25E56AFC7064784FA97C576467E0A020580AD4F@pdexchbalwst01.ad.insee.intra>
 <FC19B55E-5208-469A-91DC-93E5ACD2AD69@me.com>
 <692FB5BD-523B-4498-9F95-78B17866B5E3@gmail.com>
Message-ID: <753F0139-3672-4D36-BC59-DA0877C054FE@me.com>

Peter,

Thanks for the reply.

If that were the case, then should not the following be allowed to work with ordered factors?

> median(factor(c("1", "2", "3"), ordered = TRUE))
Error in median.default(factor(c("1", "2", "3"), ordered = TRUE)) : 
  need numeric data

At least on the surface, if you can lexically order a character vector:

> median(c("red", "blue", "green"))
[1] "green"

you can also order a factor, or ordered factor, and if the number of elements is odd, return a median value.

Regards,

Marc


> On Jan 9, 2020, at 10:46 AM, peter dalgaard <pdalgd at gmail.com> wrote:
> 
> I think median() behaves as designed: As long as the argument can be ordered, the "middle observation" makes sense, except when the middle falls between two categories, and you can't define and average of the two candidates for a median.
> 
> The "sick man" would seem to be var(). Notice that it is also inconsistent with cov():
> 
>> cov(c("1","2","3","4"),c("1","2","3","4") )
> Error in cov(c("1", "2", "3", "4"), c("1", "2", "3", "4")) : 
>  is.numeric(x) || is.logical(x) is not TRUE
>> var(c("1","2","3","4"),c("1","2","3","4") )
> [1] 1.666667
> 
> -pd
> 
> 
>> On 9 Jan 2020, at 14:49 , Marc Schwartz via R-devel <r-devel at r-project.org> wrote:
>> 
>> Jean-Luc,
>> 
>> Please keep the communications on the list, for the benefit of others, now and in the future, via the list archive. I am adding r-devel back here.
>> 
>> I can't speak to the rationale in some of these cases. As I noted, it may be (is likely) due to differing authors over time, and there may have been relevant use cases at the time that the code was written, resulting in the various checks. Presumably, the additional checks were not incorporated into the other functions to enforce a level of consistency.
>> 
>> We will need to wait for someone from R Core to comment.
>> 
>> Regards,
>> 
>> Marc
>> 
>>> On Jan 9, 2020, at 8:34 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
>>> 
>>> Ok, inconstencies.
>>> 
>>> The last test you wrote is a bit strange. I agree that it is useful to warn about a computation that have no sense in the case of factors. But why testing data;frames? If you go that way using random structures, you can also try :
>>> 
>>>> median(list(1,2),list(3,4),list(4,5))
>>> Error in if (na.rm) x <- x[!is.na(x)] else if (any(is.na(x))) return(x[FALSE][NA]) : 
>>> l'argument n'est pas interpr?table comme une valeur logique
>>> De plus : Warning message:
>>> In if (na.rm) x <- x[!is.na(x)] else if (any(is.na(x))) return(x[FALSE][NA]) :
>>> la condition a une longueur > 1 et seul le premier ?l?ment est utilis?
>>> 
>>> giving a message which, despite of his length, doesn't really explain the reason of the error.
>>> 
>>> Why not a test on arguments like?
>>> if (!is.numeric(x)) 
>>>        stop("need numeric data")
>>> 
>>> 
>>> -----Message d'origine-----
>>> De : Marc Schwartz <marc_schwartz at me.com> 
>>> Envoy? : jeudi 9 janvier 2020 14:19
>>> ? : Lipatz Jean-Luc <jean-luc.lipatz at insee.fr>
>>> Cc : R-Devel <r-devel at r-project.org>
>>> Objet : Re: [Rd] mean
>>> 
>>> 
>>>> On Jan 9, 2020, at 7:40 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
>>>> 
>>>> Hello,
>>>> 
>>>> Is there a reason for the following behaviour?
>>>>> mean(c("1","2","3"))
>>>> [1] NA
>>>> Warning message:
>>>> In mean.default(c("1", "2", "3")) :
>>>> l'argument n'est ni num?rique, ni logique : renvoi de NA
>>>> 
>>>> But:
>>>>> var(c("1","2","3"))
>>>> [1] 1
>>>> 
>>>> And also:
>>>>> median(c("1","2","3"))
>>>> [1] "2"
>>>> 
>>>> But:
>>>>> quantile(c("1","2","3"),p=.5)
>>>> Error in (1 - h) * qs[i] : 
>>>> argument non num?rique pour un op?rateur binaire
>>>> 
>>>> It sounds like a lack of symetry. 
>>>> Best regards.
>>>> 
>>>> 
>>>> Jean-Luc LIPATZ
>>>> Insee - Direction g?n?rale
>>>> Responsable de la coordination sur le d?veloppement de R et la mise en oeuvre d'alternatives ? SAS
>>> 
>>> 
>>> Hi,
>>> 
>>> It would appear, whether by design or just inconsistent implementations, perhaps by different authors over time, that the checks for whether or not the input vector is numeric differ across the functions.
>>> 
>>> A further inconsistency is for median(), where:
>>> 
>>>> median(c("1", "2", "3", "4"))
>>> [1] NA
>>> Warning message:
>>> In mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]) :
>>> argument is not numeric or logical: returning NA
>>> 
>>> as a result of there being 4 elements, rather than 3, and the internal checks in the code, where in the case of the input vector having an even number of elements, mean() is used:
>>> 
>>>  if (n%%2L == 1L) 
>>>      sort(x, partial = half)[half]
>>>  else mean(sort(x, partial = half + 0L:1L)[half + 0L:1L])
>>> 
>>> 
>>> Similarly:
>>> 
>>>> median(factor(c("1", "2", "3")))
>>> Error in median.default(factor(c("1", "2", "3"))) : need numeric data
>>> 
>>> because the input vector is a factor, rather than character, and the initial check has:
>>> 
>>> if (is.factor(x) || is.data.frame(x)) 
>>>        stop("need numeric data")
>>> 
>>> 
>>> Regards,
>>> 
>>> Marc Schwartz
>>> 
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 


From S@E|||@on @end|ng |rom LGCGroup@com  Thu Jan  9 18:03:16 2020
From: S@E|||@on @end|ng |rom LGCGroup@com (Stephen Ellison)
Date: Thu, 9 Jan 2020 17:03:16 +0000
Subject: [Rd] mean
In-Reply-To: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
References: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
Message-ID: <15997474164944d2874c0d00359d18be@GBDCVPEXC04.corp.lgc-group.com>

Note that in 

> > quantile(c("1","2","3"),p=.5)
> Error in (1 - h) * qs[i] : 
>  argument non num?rique pour un op?rateur binaire
the default quantile type (7) does not work for non-numerics.

Quantile types 1 and 3 work as expected:

> quantile(c("1","2","3"),p=.5, type=1)
50% 
"2" 
> quantile(c("1","2","3"),p=.5, type=3)
50% 
"2"


Steve E



*******************************************************************
This email and any attachments are confidential. Any use, copying or
disclosure other than by the intended recipient is unauthorised. If 
you have received this message in error, please notify the sender 
immediately via +44(0)20 8943 7000 or notify postmaster at lgcgroup.com 
and delete this message and any copies from your computer and network. 
LGC Limited. Registered in England 2991879. 
Registered office: Queens Road, Teddington, Middlesex, TW11 0LY, UK

From hp@ge@ @end|ng |rom |redhutch@org  Thu Jan  9 18:31:54 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Thu, 9 Jan 2020 17:31:54 +0000
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <736437f6-22b9-da92-8fb3-e931a83de39d@oracle.com>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
 <830d3acf-aa30-5f26-408d-f35b5f0cc2d9@oracle.com>
 <trinity-6d5c6b7f-e9e8-4cdf-90ca-b9ec4b97a11a-1578580918843@3c-app-mailcom-bs07>
 <736437f6-22b9-da92-8fb3-e931a83de39d@oracle.com>
Message-ID: <b81a3e70-9bc9-bcc7-8d8f-843413bb64b5@fredhutch.org>

On 1/9/20 06:56, Stepan wrote:
> On 09. 01. 20 15:41, lille stor wrote:
> 
>> I believe this could be done without creating side effects (e.g. 
>> crash) as we are just talking about changing values.

A crash would certainly be an annoying "side effect" ;-)

As Stepan explained, data.frame objects like most objects in R should 
never be modified in-place. If you're looking for a data-frame-like 
structure with a reference semantic where in-place modifications are 
allowed, please take a look at the data.table package.

H.

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Jan 10 07:33:51 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Thu, 9 Jan 2020 22:33:51 -0800
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <2a64a85b-97d5-b35e-66e6-3ac2de8b4800@gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
 <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
 <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>
 <4a46e1e6-d584-9dc6-1699-973b56c95c98@gmail.com>
 <CALEXWq0R4Z=Q=BWLiSG-Suag5rYhSVoWfry24_s_ZM-Ahy1CWA@mail.gmail.com>
 <2a64a85b-97d5-b35e-66e6-3ac2de8b4800@gmail.com>
Message-ID: <CAFDcVCRo8WaP6EM=OmjjkYpahe_4XyXLGB0xLcVKJqpycv+P6Q@mail.gmail.com>

I'd like to pick up this thread started on 2019-04-11
(https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
Modulo all the other suggestions in this thread, would my proposal of
being able to disable forked processing via an option or an
environment variable make sense?  I've prototyped a working patch that
works like:

> options(fork.allowed = FALSE)
> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
[1] 14058 14058
> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
[1] 14058 14058
> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
[1] 14058.1 14058.2
> f <- parallel::mcparallel(Sys.getpid())
Error in allowFork(assert = TRUE) :
  Forked processing is not allowed per option ?fork.allowed? or
environment variable ?R_FORK_ALLOWED?
> cl <- parallel::makeForkCluster(1L)
Error in allowFork(assert = TRUE) :
  Forked processing is not allowed per option ?fork.allowed? or
environment variable ?R_FORK_ALLOWED?
>


The patch is:

Index: src/library/parallel/R/unix/forkCluster.R
===================================================================
--- src/library/parallel/R/unix/forkCluster.R (revision 77648)
+++ src/library/parallel/R/unix/forkCluster.R (working copy)
@@ -30,6 +30,7 @@

 newForkNode <- function(..., options = defaultClusterOptions, rank)
 {
+    allowFork(assert = TRUE)
     options <- addClusterOptions(options, list(...))
     outfile <- getClusterOption("outfile", options)
     port <- getClusterOption("port", options)
Index: src/library/parallel/R/unix/mclapply.R
===================================================================
--- src/library/parallel/R/unix/mclapply.R (revision 77648)
+++ src/library/parallel/R/unix/mclapply.R (working copy)
@@ -28,7 +28,7 @@
         stop("'mc.cores' must be >= 1")
     .check_ncores(cores)

-    if (isChild() && !isTRUE(mc.allow.recursive))
+    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
         return(lapply(X = X, FUN = FUN, ...))

     ## Follow lapply
Index: src/library/parallel/R/unix/mcparallel.R
===================================================================
--- src/library/parallel/R/unix/mcparallel.R (revision 77648)
+++ src/library/parallel/R/unix/mcparallel.R (working copy)
@@ -20,6 +20,7 @@

 mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
 {
+    allowFork(assert = TRUE)
     f <- mcfork(detached)
     env <- parent.frame()
     if (isTRUE(mc.set.seed)) mc.advance.stream()
Index: src/library/parallel/R/unix/pvec.R
===================================================================
--- src/library/parallel/R/unix/pvec.R (revision 77648)
+++ src/library/parallel/R/unix/pvec.R (working copy)
@@ -25,7 +25,7 @@

     cores <- as.integer(mc.cores)
     if(cores < 1L) stop("'mc.cores' must be >= 1")
-    if(cores == 1L) return(FUN(v, ...))
+    if(cores == 1L || !allowFork()) return(FUN(v, ...))
     .check_ncores(cores)

     if(mc.set.seed) mc.reset.stream()

with a new file src/library/parallel/R/unix/allowFork.R:

allowFork <- function(assert = FALSE) {
    value <- Sys.getenv("R_FORK_ALLOWED")
    if (nzchar(value)) {
        value <- switch(value,
           "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
           "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
            stop(gettextf("invalid environment variable value: %s==%s",
           "R_FORK_ALLOWED", value)))
value <- as.logical(value)
    } else {
        value <- TRUE
    }
    value <- getOption("fork.allowed", value)
    if (is.na(value)) {
        stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
    }
    if (assert && !value) {
      stop(gettextf("Forked processing is not allowed per option %s or
environment variable %s", sQuote("fork.allowed"),
sQuote("R_FORK_ALLOWED")))
    }
    value
}

/Henrik

On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 4/15/19 11:02 AM, I?aki Ucar wrote:
> > On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> >>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >>>> I think it's worth saying that mclapply() works as documented
> >>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> >>> overcommitment, and that this means that it may work nicely or fail
> >>> spectacularly depending on whether, e.g., you operate on a long
> >>> vector.
> >> R cannot possibly replicate documentation of the underlying operating
> >> systems. It clearly says that fork() is used and readers who may not
> >> know what fork() is need to learn it from external sources.
> >> Copy-on-write is an elementary property of fork().
> > Just to be precise, copy-on-write is an optimization widely deployed
> > in most modern *nixes, particularly for the architectures in which R
> > usually runs. But it is not an elementary property; it is not even
> > possible without an MMU.
>
> Yes, old Unix systems without virtual memory had fork eagerly copying.
> Not relevant today, and certainly not for systems that run R, but indeed
> people interested in OS internals can look elsewhere for more precise
> information.
>
> Tomas
>


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Jan 10 10:34:28 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 10 Jan 2020 10:34:28 +0100
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAFDcVCRo8WaP6EM=OmjjkYpahe_4XyXLGB0xLcVKJqpycv+P6Q@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
 <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
 <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>
 <4a46e1e6-d584-9dc6-1699-973b56c95c98@gmail.com>
 <CALEXWq0R4Z=Q=BWLiSG-Suag5rYhSVoWfry24_s_ZM-Ahy1CWA@mail.gmail.com>
 <2a64a85b-97d5-b35e-66e6-3ac2de8b4800@gmail.com>
 <CAFDcVCRo8WaP6EM=OmjjkYpahe_4XyXLGB0xLcVKJqpycv+P6Q@mail.gmail.com>
Message-ID: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>

On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
> I'd like to pick up this thread started on 2019-04-11
> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
> Modulo all the other suggestions in this thread, would my proposal of
> being able to disable forked processing via an option or an
> environment variable make sense?

I don't think R should be doing that. There are caveats with using fork, 
and they are mentioned in the documentation of the parallel package, so 
people can easily avoid functions that use it, and this all has been 
discussed here recently.

If it is the case, we can expand the documentation in parallel package, 
add a warning against the use of forking with RStudio, but for that I it 
would be good to know at least why it is not working. From the github 
issue I have the impression that it is not really known why, whether it 
could be fixed, and if so, where. The same github issue reflects also 
that some people want to use forking for performance reasons, and even 
with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it 
is just some race condition somewhere?

Tomas

>   I've prototyped a working patch that
> works like:
>
>> options(fork.allowed = FALSE)
>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
> [1] 14058 14058
>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
> [1] 14058 14058
>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
> [1] 14058.1 14058.2
>> f <- parallel::mcparallel(Sys.getpid())
> Error in allowFork(assert = TRUE) :
>    Forked processing is not allowed per option ?fork.allowed? or
> environment variable ?R_FORK_ALLOWED?
>> cl <- parallel::makeForkCluster(1L)
> Error in allowFork(assert = TRUE) :
>    Forked processing is not allowed per option ?fork.allowed? or
> environment variable ?R_FORK_ALLOWED?
>
> The patch is:
>
> Index: src/library/parallel/R/unix/forkCluster.R
> ===================================================================
> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
> @@ -30,6 +30,7 @@
>
>   newForkNode <- function(..., options = defaultClusterOptions, rank)
>   {
> +    allowFork(assert = TRUE)
>       options <- addClusterOptions(options, list(...))
>       outfile <- getClusterOption("outfile", options)
>       port <- getClusterOption("port", options)
> Index: src/library/parallel/R/unix/mclapply.R
> ===================================================================
> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
> +++ src/library/parallel/R/unix/mclapply.R (working copy)
> @@ -28,7 +28,7 @@
>           stop("'mc.cores' must be >= 1")
>       .check_ncores(cores)
>
> -    if (isChild() && !isTRUE(mc.allow.recursive))
> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
>           return(lapply(X = X, FUN = FUN, ...))
>
>       ## Follow lapply
> Index: src/library/parallel/R/unix/mcparallel.R
> ===================================================================
> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
> @@ -20,6 +20,7 @@
>
>   mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
>   {
> +    allowFork(assert = TRUE)
>       f <- mcfork(detached)
>       env <- parent.frame()
>       if (isTRUE(mc.set.seed)) mc.advance.stream()
> Index: src/library/parallel/R/unix/pvec.R
> ===================================================================
> --- src/library/parallel/R/unix/pvec.R (revision 77648)
> +++ src/library/parallel/R/unix/pvec.R (working copy)
> @@ -25,7 +25,7 @@
>
>       cores <- as.integer(mc.cores)
>       if(cores < 1L) stop("'mc.cores' must be >= 1")
> -    if(cores == 1L) return(FUN(v, ...))
> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
>       .check_ncores(cores)
>
>       if(mc.set.seed) mc.reset.stream()
>
> with a new file src/library/parallel/R/unix/allowFork.R:
>
> allowFork <- function(assert = FALSE) {
>      value <- Sys.getenv("R_FORK_ALLOWED")
>      if (nzchar(value)) {
>          value <- switch(value,
>             "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
>             "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
>              stop(gettextf("invalid environment variable value: %s==%s",
>             "R_FORK_ALLOWED", value)))
> value <- as.logical(value)
>      } else {
>          value <- TRUE
>      }
>      value <- getOption("fork.allowed", value)
>      if (is.na(value)) {
>          stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
>      }
>      if (assert && !value) {
>        stop(gettextf("Forked processing is not allowed per option %s or
> environment variable %s", sQuote("fork.allowed"),
> sQuote("R_FORK_ALLOWED")))
>      }
>      value
> }
>
> /Henrik
>
> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>>>> I think it's worth saying that mclapply() works as documented
>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>>>> overcommitment, and that this means that it may work nicely or fail
>>>>> spectacularly depending on whether, e.g., you operate on a long
>>>>> vector.
>>>> R cannot possibly replicate documentation of the underlying operating
>>>> systems. It clearly says that fork() is used and readers who may not
>>>> know what fork() is need to learn it from external sources.
>>>> Copy-on-write is an elementary property of fork().
>>> Just to be precise, copy-on-write is an optimization widely deployed
>>> in most modern *nixes, particularly for the architectures in which R
>>> usually runs. But it is not an elementary property; it is not even
>>> possible without an MMU.
>> Yes, old Unix systems without virtual memory had fork eagerly copying.
>> Not relevant today, and certainly not for systems that run R, but indeed
>> people interested in OS internals can look elsewhere for more precise
>> information.
>>
>> Tomas
>>


From konr@d@rudo|ph @end|ng |rom gm@||@com  Fri Jan 10 11:59:16 2020
From: konr@d@rudo|ph @end|ng |rom gm@||@com (Konrad Rudolph)
Date: Fri, 10 Jan 2020 10:59:16 +0000
Subject: [Rd] Operator precedence of =, <- and ?
Message-ID: <CAM2gKPZ6PjQBqFGsmbsUXMRtZWFBRzAf=w2DQUFOhNBwMewieg@mail.gmail.com>

The documentation (help("Syntax")) gives the operator precedence of the
assignment operators and help, from highest to lowest, as:

       ?<- <<-?           assignment (right to left)
       ?=?                assignment (right to left)
       ???                help (unary and binary)

If I understand correctly this implies that `a = b ? c` and `a <- b ? c`
should parse identically. Or, if using the unary version, `?a = b` and `?a
<- b` should parse identically.

However, as noted by Antoine Fabri on Stack Overflow [1], they have
different parses (on R 3.5.3 and 3.6.1, at least), which puts the
precedence of `?` *between* that of `<-` and `=`. In fact, src/main/gram.y
[2] appears to show the same precedence table as the documentation;
presumably the parser at some point rewrites the parse tree manually.

At any rate, should this be fixed in the documentation? Or is the
documentation ?correct?, and there?s a bug in the parser (in some versions
of R)?

[1] <
https://stackoverflow.com/questions/1741820/51564252#comment105506343_51564252
>
[2] <
https://github.com/wch/r-source/blob/386c3a93cbcaf95017fa6ae52453530fb95149f4/src/main/gram.y#L384-L390
>

--
Konrad Rudolph

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Fri Jan 10 13:37:05 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 10 Jan 2020 06:37:05 -0600
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <b81a3e70-9bc9-bcc7-8d8f-843413bb64b5@fredhutch.org>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
 <830d3acf-aa30-5f26-408d-f35b5f0cc2d9@oracle.com>
 <trinity-6d5c6b7f-e9e8-4cdf-90ca-b9ec4b97a11a-1578580918843@3c-app-mailcom-bs07>
 <736437f6-22b9-da92-8fb3-e931a83de39d@oracle.com>
 <b81a3e70-9bc9-bcc7-8d8f-843413bb64b5@fredhutch.org>
Message-ID: <24088.28657.733498.962304@rob.eddelbuettel.com>


lille stor,

As a general rule, please do not cross-post.

And almost certainly do not simultaneously as you did here and on
https://stackoverflow.com/questions/59663174/get-memory-address-of-an-r-data-frame

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @|mon@urb@nek @end|ng |rom r-project@org  Fri Jan 10 14:31:10 2020
From: @|mon@urb@nek @end|ng |rom r-project@org (Simon Urbanek)
Date: Fri, 10 Jan 2020 08:31:10 -0500
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
Message-ID: <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>

If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.

Cheers,
Simon

Sent from my iPhone

>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> 
>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
>> I'd like to pick up this thread started on 2019-04-11
>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
>> Modulo all the other suggestions in this thread, would my proposal of
>> being able to disable forked processing via an option or an
>> environment variable make sense?
> 
> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
> 
> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
> 
> Tomas
> 
>> I've prototyped a working patch that
>> works like:
>>> options(fork.allowed = FALSE)
>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
>> [1] 14058 14058
>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
>> [1] 14058 14058
>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
>> [1] 14058.1 14058.2
>>> f <- parallel::mcparallel(Sys.getpid())
>> Error in allowFork(assert = TRUE) :
>>  Forked processing is not allowed per option ?fork.allowed? or
>> environment variable ?R_FORK_ALLOWED?
>>> cl <- parallel::makeForkCluster(1L)
>> Error in allowFork(assert = TRUE) :
>>  Forked processing is not allowed per option ?fork.allowed? or
>> environment variable ?R_FORK_ALLOWED?
>> The patch is:
>> Index: src/library/parallel/R/unix/forkCluster.R
>> ===================================================================
>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
>> @@ -30,6 +30,7 @@
>> newForkNode <- function(..., options = defaultClusterOptions, rank)
>> {
>> +    allowFork(assert = TRUE)
>>     options <- addClusterOptions(options, list(...))
>>     outfile <- getClusterOption("outfile", options)
>>     port <- getClusterOption("port", options)
>> Index: src/library/parallel/R/unix/mclapply.R
>> ===================================================================
>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
>> @@ -28,7 +28,7 @@
>>         stop("'mc.cores' must be >= 1")
>>     .check_ncores(cores)
>> -    if (isChild() && !isTRUE(mc.allow.recursive))
>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
>>         return(lapply(X = X, FUN = FUN, ...))
>>     ## Follow lapply
>> Index: src/library/parallel/R/unix/mcparallel.R
>> ===================================================================
>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
>> @@ -20,6 +20,7 @@
>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
>> {
>> +    allowFork(assert = TRUE)
>>     f <- mcfork(detached)
>>     env <- parent.frame()
>>     if (isTRUE(mc.set.seed)) mc.advance.stream()
>> Index: src/library/parallel/R/unix/pvec.R
>> ===================================================================
>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
>> +++ src/library/parallel/R/unix/pvec.R (working copy)
>> @@ -25,7 +25,7 @@
>>     cores <- as.integer(mc.cores)
>>     if(cores < 1L) stop("'mc.cores' must be >= 1")
>> -    if(cores == 1L) return(FUN(v, ...))
>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
>>     .check_ncores(cores)
>>     if(mc.set.seed) mc.reset.stream()
>> with a new file src/library/parallel/R/unix/allowFork.R:
>> allowFork <- function(assert = FALSE) {
>>    value <- Sys.getenv("R_FORK_ALLOWED")
>>    if (nzchar(value)) {
>>        value <- switch(value,
>>           "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
>>           "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
>>            stop(gettextf("invalid environment variable value: %s==%s",
>>           "R_FORK_ALLOWED", value)))
>> value <- as.logical(value)
>>    } else {
>>        value <- TRUE
>>    }
>>    value <- getOption("fork.allowed", value)
>>    if (is.na(value)) {
>>        stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
>>    }
>>    if (assert && !value) {
>>      stop(gettextf("Forked processing is not allowed per option %s or
>> environment variable %s", sQuote("fork.allowed"),
>> sQuote("R_FORK_ALLOWED")))
>>    }
>>    value
>> }
>> /Henrik
>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>>>>> I think it's worth saying that mclapply() works as documented
>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>>>>> overcommitment, and that this means that it may work nicely or fail
>>>>>> spectacularly depending on whether, e.g., you operate on a long
>>>>>> vector.
>>>>> R cannot possibly replicate documentation of the underlying operating
>>>>> systems. It clearly says that fork() is used and readers who may not
>>>>> know what fork() is need to learn it from external sources.
>>>>> Copy-on-write is an elementary property of fork().
>>>> Just to be precise, copy-on-write is an optimization widely deployed
>>>> in most modern *nixes, particularly for the architectures in which R
>>>> usually runs. But it is not an elementary property; it is not even
>>>> possible without an MMU.
>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
>>> Not relevant today, and certainly not for systems that run R, but indeed
>>> people interested in OS internals can look elsewhere for more precise
>>> information.
>>> Tomas
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Jan 10 16:58:13 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 10 Jan 2020 07:58:13 -0800
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
Message-ID: <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>

The RStudio GUI was just one example.  AFAIK, and please correct me if
I'm wrong, another example is where multi-threaded code is used in
forked processing and that's sometimes unstable.  Yes another, which
might be multi-thread related or not, is
https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:

res <- parallel::mclapply(urls, function(url) {
  download.file(url, basename(url))
})

That was reported to fail on macOS with the default method="libcurl"
but not for method="curl" or method="wget".

Further documentation is needed and would help but I don't believe
it's sufficient to solve everyday problems.  The argument for
introducing an option/env var to disable forking is to give the end
user a quick workaround for newly introduced bugs.  Neither the
develop nor the end user have full control of the R package stack,
which is always in flux.  For instance, above mclapply() code might
have been in a package on CRAN and then all of a sudden
method="libcurl" became the new default in base R.  The above
mclapply() code is now buggy on macOS, and not necessarily caught by
CRAN checks.  The package developer might not notice this because they
are on Linux or Windows.  It can take a very long time before this
problem is even noticed and even further before it is tracked down and
fixed.   Similarly, as more and more code turn to native code and it
becomes easier and easier to implement multi-threading, more and more
of these bugs across package dependencies risk sneaking in the
backdoor wherever forked processing is in place.

For the end user, but also higher-up upstream package developers, the
quickest workaround would be disable forking.  If you're conservative,
you could even disable it all of your R processing.  Being able to
quickly disable forking will also provide a mechanism for quickly
testing the hypothesis that forking is the underlying problem, i.e.
"Please retry with options(fork.allowed = FALSE)" will become handy
for troubleshooting.

/Henrik

On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
>
> Cheers,
> Simon
>
> Sent from my iPhone
>
> >> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>
> >> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
> >> I'd like to pick up this thread started on 2019-04-11
> >> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
> >> Modulo all the other suggestions in this thread, would my proposal of
> >> being able to disable forked processing via an option or an
> >> environment variable make sense?
> >
> > I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
> >
> > If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
> >
> > Tomas
> >
> >> I've prototyped a working patch that
> >> works like:
> >>> options(fork.allowed = FALSE)
> >>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
> >> [1] 14058 14058
> >>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
> >> [1] 14058 14058
> >>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
> >> [1] 14058.1 14058.2
> >>> f <- parallel::mcparallel(Sys.getpid())
> >> Error in allowFork(assert = TRUE) :
> >>  Forked processing is not allowed per option ?fork.allowed? or
> >> environment variable ?R_FORK_ALLOWED?
> >>> cl <- parallel::makeForkCluster(1L)
> >> Error in allowFork(assert = TRUE) :
> >>  Forked processing is not allowed per option ?fork.allowed? or
> >> environment variable ?R_FORK_ALLOWED?
> >> The patch is:
> >> Index: src/library/parallel/R/unix/forkCluster.R
> >> ===================================================================
> >> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
> >> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
> >> @@ -30,6 +30,7 @@
> >> newForkNode <- function(..., options = defaultClusterOptions, rank)
> >> {
> >> +    allowFork(assert = TRUE)
> >>     options <- addClusterOptions(options, list(...))
> >>     outfile <- getClusterOption("outfile", options)
> >>     port <- getClusterOption("port", options)
> >> Index: src/library/parallel/R/unix/mclapply.R
> >> ===================================================================
> >> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
> >> +++ src/library/parallel/R/unix/mclapply.R (working copy)
> >> @@ -28,7 +28,7 @@
> >>         stop("'mc.cores' must be >= 1")
> >>     .check_ncores(cores)
> >> -    if (isChild() && !isTRUE(mc.allow.recursive))
> >> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
> >>         return(lapply(X = X, FUN = FUN, ...))
> >>     ## Follow lapply
> >> Index: src/library/parallel/R/unix/mcparallel.R
> >> ===================================================================
> >> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
> >> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
> >> @@ -20,6 +20,7 @@
> >> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
> >> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
> >> {
> >> +    allowFork(assert = TRUE)
> >>     f <- mcfork(detached)
> >>     env <- parent.frame()
> >>     if (isTRUE(mc.set.seed)) mc.advance.stream()
> >> Index: src/library/parallel/R/unix/pvec.R
> >> ===================================================================
> >> --- src/library/parallel/R/unix/pvec.R (revision 77648)
> >> +++ src/library/parallel/R/unix/pvec.R (working copy)
> >> @@ -25,7 +25,7 @@
> >>     cores <- as.integer(mc.cores)
> >>     if(cores < 1L) stop("'mc.cores' must be >= 1")
> >> -    if(cores == 1L) return(FUN(v, ...))
> >> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
> >>     .check_ncores(cores)
> >>     if(mc.set.seed) mc.reset.stream()
> >> with a new file src/library/parallel/R/unix/allowFork.R:
> >> allowFork <- function(assert = FALSE) {
> >>    value <- Sys.getenv("R_FORK_ALLOWED")
> >>    if (nzchar(value)) {
> >>        value <- switch(value,
> >>           "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
> >>           "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
> >>            stop(gettextf("invalid environment variable value: %s==%s",
> >>           "R_FORK_ALLOWED", value)))
> >> value <- as.logical(value)
> >>    } else {
> >>        value <- TRUE
> >>    }
> >>    value <- getOption("fork.allowed", value)
> >>    if (is.na(value)) {
> >>        stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
> >>    }
> >>    if (assert && !value) {
> >>      stop(gettextf("Forked processing is not allowed per option %s or
> >> environment variable %s", sQuote("fork.allowed"),
> >> sQuote("R_FORK_ALLOWED")))
> >>    }
> >>    value
> >> }
> >> /Henrik
> >>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
> >>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> >>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >>>>>>> I think it's worth saying that mclapply() works as documented
> >>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> >>>>>> overcommitment, and that this means that it may work nicely or fail
> >>>>>> spectacularly depending on whether, e.g., you operate on a long
> >>>>>> vector.
> >>>>> R cannot possibly replicate documentation of the underlying operating
> >>>>> systems. It clearly says that fork() is used and readers who may not
> >>>>> know what fork() is need to learn it from external sources.
> >>>>> Copy-on-write is an elementary property of fork().
> >>>> Just to be precise, copy-on-write is an optimization widely deployed
> >>>> in most modern *nixes, particularly for the architectures in which R
> >>>> usually runs. But it is not an elementary property; it is not even
> >>>> possible without an MMU.
> >>> Yes, old Unix systems without virtual memory had fork eagerly copying.
> >>> Not relevant today, and certainly not for systems that run R, but indeed
> >>> people interested in OS internals can look elsewhere for more precise
> >>> information.
> >>> Tomas
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Jan 10 20:23:00 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 10 Jan 2020 14:23:00 -0500
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
Message-ID: <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>

Henrik,

the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries. That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.

Cheers,
Simon
 


> On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> 
> The RStudio GUI was just one example.  AFAIK, and please correct me if
> I'm wrong, another example is where multi-threaded code is used in
> forked processing and that's sometimes unstable.  Yes another, which
> might be multi-thread related or not, is
> https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
> 
> res <- parallel::mclapply(urls, function(url) {
>  download.file(url, basename(url))
> })
> 
> That was reported to fail on macOS with the default method="libcurl"
> but not for method="curl" or method="wget".
> 
> Further documentation is needed and would help but I don't believe
> it's sufficient to solve everyday problems.  The argument for
> introducing an option/env var to disable forking is to give the end
> user a quick workaround for newly introduced bugs.  Neither the
> develop nor the end user have full control of the R package stack,
> which is always in flux.  For instance, above mclapply() code might
> have been in a package on CRAN and then all of a sudden
> method="libcurl" became the new default in base R.  The above
> mclapply() code is now buggy on macOS, and not necessarily caught by
> CRAN checks.  The package developer might not notice this because they
> are on Linux or Windows.  It can take a very long time before this
> problem is even noticed and even further before it is tracked down and
> fixed.   Similarly, as more and more code turn to native code and it
> becomes easier and easier to implement multi-threading, more and more
> of these bugs across package dependencies risk sneaking in the
> backdoor wherever forked processing is in place.
> 
> For the end user, but also higher-up upstream package developers, the
> quickest workaround would be disable forking.  If you're conservative,
> you could even disable it all of your R processing.  Being able to
> quickly disable forking will also provide a mechanism for quickly
> testing the hypothesis that forking is the underlying problem, i.e.
> "Please retry with options(fork.allowed = FALSE)" will become handy
> for troubleshooting.
> 
> /Henrik
> 
> On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
>> 
>> Cheers,
>> Simon
>> 
>> Sent from my iPhone
>> 
>>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>> 
>>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
>>>> I'd like to pick up this thread started on 2019-04-11
>>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
>>>> Modulo all the other suggestions in this thread, would my proposal of
>>>> being able to disable forked processing via an option or an
>>>> environment variable make sense?
>>> 
>>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
>>> 
>>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
>>> 
>>> Tomas
>>> 
>>>> I've prototyped a working patch that
>>>> works like:
>>>>> options(fork.allowed = FALSE)
>>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
>>>> [1] 14058 14058
>>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
>>>> [1] 14058 14058
>>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
>>>> [1] 14058.1 14058.2
>>>>> f <- parallel::mcparallel(Sys.getpid())
>>>> Error in allowFork(assert = TRUE) :
>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>> environment variable ?R_FORK_ALLOWED?
>>>>> cl <- parallel::makeForkCluster(1L)
>>>> Error in allowFork(assert = TRUE) :
>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>> environment variable ?R_FORK_ALLOWED?
>>>> The patch is:
>>>> Index: src/library/parallel/R/unix/forkCluster.R
>>>> ===================================================================
>>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
>>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
>>>> @@ -30,6 +30,7 @@
>>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
>>>> {
>>>> +    allowFork(assert = TRUE)
>>>>    options <- addClusterOptions(options, list(...))
>>>>    outfile <- getClusterOption("outfile", options)
>>>>    port <- getClusterOption("port", options)
>>>> Index: src/library/parallel/R/unix/mclapply.R
>>>> ===================================================================
>>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
>>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
>>>> @@ -28,7 +28,7 @@
>>>>        stop("'mc.cores' must be >= 1")
>>>>    .check_ncores(cores)
>>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
>>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
>>>>        return(lapply(X = X, FUN = FUN, ...))
>>>>    ## Follow lapply
>>>> Index: src/library/parallel/R/unix/mcparallel.R
>>>> ===================================================================
>>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
>>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
>>>> @@ -20,6 +20,7 @@
>>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
>>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
>>>> {
>>>> +    allowFork(assert = TRUE)
>>>>    f <- mcfork(detached)
>>>>    env <- parent.frame()
>>>>    if (isTRUE(mc.set.seed)) mc.advance.stream()
>>>> Index: src/library/parallel/R/unix/pvec.R
>>>> ===================================================================
>>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
>>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
>>>> @@ -25,7 +25,7 @@
>>>>    cores <- as.integer(mc.cores)
>>>>    if(cores < 1L) stop("'mc.cores' must be >= 1")
>>>> -    if(cores == 1L) return(FUN(v, ...))
>>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
>>>>    .check_ncores(cores)
>>>>    if(mc.set.seed) mc.reset.stream()
>>>> with a new file src/library/parallel/R/unix/allowFork.R:
>>>> allowFork <- function(assert = FALSE) {
>>>>   value <- Sys.getenv("R_FORK_ALLOWED")
>>>>   if (nzchar(value)) {
>>>>       value <- switch(value,
>>>>          "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
>>>>          "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
>>>>           stop(gettextf("invalid environment variable value: %s==%s",
>>>>          "R_FORK_ALLOWED", value)))
>>>> value <- as.logical(value)
>>>>   } else {
>>>>       value <- TRUE
>>>>   }
>>>>   value <- getOption("fork.allowed", value)
>>>>   if (is.na(value)) {
>>>>       stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
>>>>   }
>>>>   if (assert && !value) {
>>>>     stop(gettextf("Forked processing is not allowed per option %s or
>>>> environment variable %s", sQuote("fork.allowed"),
>>>> sQuote("R_FORK_ALLOWED")))
>>>>   }
>>>>   value
>>>> }
>>>> /Henrik
>>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
>>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>>>>>>> I think it's worth saying that mclapply() works as documented
>>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>>>>>>> overcommitment, and that this means that it may work nicely or fail
>>>>>>>> spectacularly depending on whether, e.g., you operate on a long
>>>>>>>> vector.
>>>>>>> R cannot possibly replicate documentation of the underlying operating
>>>>>>> systems. It clearly says that fork() is used and readers who may not
>>>>>>> know what fork() is need to learn it from external sources.
>>>>>>> Copy-on-write is an elementary property of fork().
>>>>>> Just to be precise, copy-on-write is an optimization widely deployed
>>>>>> in most modern *nixes, particularly for the architectures in which R
>>>>>> usually runs. But it is not an elementary property; it is not even
>>>>>> possible without an MMU.
>>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
>>>>> Not relevant today, and certainly not for systems that run R, but indeed
>>>>> people interested in OS internals can look elsewhere for more precise
>>>>> information.
>>>>> Tomas
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Jan 10 21:10:55 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 10 Jan 2020 20:10:55 +0000
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
Message-ID: <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>

On Fri, Jan 10, 2020 at 7:23 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Henrik,
>
> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries.

I think it works now, because Apple switched to a different SSL
library for libcurl. It usually crashes or fails on older macOS
versions, with the CRAN build of R as well.

It is not a bug in any library, it is just that macOS does not support
fork() without an immediate exec().

In general, any code that calls the macOS system libraries might
crash. (Except for CoreFoundation, which seems to be fine, but AFAIR
there is no guarantee for that, either.)

You get crashes in the terminal as well, without multithreading. E.g.
the keyring package links for the Security library on macOS, so you
get:

? R --vanilla -q
> .libPaths("~/R/3.6")
> keyring::key_list()[1:2,]
        service                                                  username
1    CommCenter                             kEntitlementsUniqueIDCacheKey
2           ids                                   identity-rsa-public-key
> parallel::mclapply(1:10, function(i) keyring::key_list()[1:2,])

 *** caught segfault ***
address 0x110, cause 'memory not mapped'

 *** caught segfault ***
address 0x110, cause 'memory not mapped'

AFAICT only Apple can do anything about this, and they won't.

Gabor

> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.
>
> Cheers,
> Simon
>
>
>
> > On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> >
> > The RStudio GUI was just one example.  AFAIK, and please correct me if
> > I'm wrong, another example is where multi-threaded code is used in
> > forked processing and that's sometimes unstable.  Yes another, which
> > might be multi-thread related or not, is
> > https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
> >
> > res <- parallel::mclapply(urls, function(url) {
> >  download.file(url, basename(url))
> > })
> >
> > That was reported to fail on macOS with the default method="libcurl"
> > but not for method="curl" or method="wget".
> >
> > Further documentation is needed and would help but I don't believe
> > it's sufficient to solve everyday problems.  The argument for
> > introducing an option/env var to disable forking is to give the end
> > user a quick workaround for newly introduced bugs.  Neither the
> > develop nor the end user have full control of the R package stack,
> > which is always in flux.  For instance, above mclapply() code might
> > have been in a package on CRAN and then all of a sudden
> > method="libcurl" became the new default in base R.  The above
> > mclapply() code is now buggy on macOS, and not necessarily caught by
> > CRAN checks.  The package developer might not notice this because they
> > are on Linux or Windows.  It can take a very long time before this
> > problem is even noticed and even further before it is tracked down and
> > fixed.   Similarly, as more and more code turn to native code and it
> > becomes easier and easier to implement multi-threading, more and more
> > of these bugs across package dependencies risk sneaking in the
> > backdoor wherever forked processing is in place.
> >
> > For the end user, but also higher-up upstream package developers, the
> > quickest workaround would be disable forking.  If you're conservative,
> > you could even disable it all of your R processing.  Being able to
> > quickly disable forking will also provide a mechanism for quickly
> > testing the hypothesis that forking is the underlying problem, i.e.
> > "Please retry with options(fork.allowed = FALSE)" will become handy
> > for troubleshooting.
> >
> > /Henrik
> >
> > On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
> > <simon.urbanek at r-project.org> wrote:
> >>
> >> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
> >>
> >> Cheers,
> >> Simon
> >>
> >> Sent from my iPhone
> >>
> >>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>
> >>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
> >>>> I'd like to pick up this thread started on 2019-04-11
> >>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
> >>>> Modulo all the other suggestions in this thread, would my proposal of
> >>>> being able to disable forked processing via an option or an
> >>>> environment variable make sense?
> >>>
> >>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
> >>>
> >>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
> >>>
> >>> Tomas
> >>>
> >>>> I've prototyped a working patch that
> >>>> works like:
> >>>>> options(fork.allowed = FALSE)
> >>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
> >>>> [1] 14058 14058
> >>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
> >>>> [1] 14058 14058
> >>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
> >>>> [1] 14058.1 14058.2
> >>>>> f <- parallel::mcparallel(Sys.getpid())
> >>>> Error in allowFork(assert = TRUE) :
> >>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>> environment variable ?R_FORK_ALLOWED?
> >>>>> cl <- parallel::makeForkCluster(1L)
> >>>> Error in allowFork(assert = TRUE) :
> >>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>> environment variable ?R_FORK_ALLOWED?
> >>>> The patch is:
> >>>> Index: src/library/parallel/R/unix/forkCluster.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
> >>>> @@ -30,6 +30,7 @@
> >>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
> >>>> {
> >>>> +    allowFork(assert = TRUE)
> >>>>    options <- addClusterOptions(options, list(...))
> >>>>    outfile <- getClusterOption("outfile", options)
> >>>>    port <- getClusterOption("port", options)
> >>>> Index: src/library/parallel/R/unix/mclapply.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
> >>>> @@ -28,7 +28,7 @@
> >>>>        stop("'mc.cores' must be >= 1")
> >>>>    .check_ncores(cores)
> >>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
> >>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
> >>>>        return(lapply(X = X, FUN = FUN, ...))
> >>>>    ## Follow lapply
> >>>> Index: src/library/parallel/R/unix/mcparallel.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
> >>>> @@ -20,6 +20,7 @@
> >>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
> >>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
> >>>> {
> >>>> +    allowFork(assert = TRUE)
> >>>>    f <- mcfork(detached)
> >>>>    env <- parent.frame()
> >>>>    if (isTRUE(mc.set.seed)) mc.advance.stream()
> >>>> Index: src/library/parallel/R/unix/pvec.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
> >>>> @@ -25,7 +25,7 @@
> >>>>    cores <- as.integer(mc.cores)
> >>>>    if(cores < 1L) stop("'mc.cores' must be >= 1")
> >>>> -    if(cores == 1L) return(FUN(v, ...))
> >>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
> >>>>    .check_ncores(cores)
> >>>>    if(mc.set.seed) mc.reset.stream()
> >>>> with a new file src/library/parallel/R/unix/allowFork.R:
> >>>> allowFork <- function(assert = FALSE) {
> >>>>   value <- Sys.getenv("R_FORK_ALLOWED")
> >>>>   if (nzchar(value)) {
> >>>>       value <- switch(value,
> >>>>          "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
> >>>>          "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
> >>>>           stop(gettextf("invalid environment variable value: %s==%s",
> >>>>          "R_FORK_ALLOWED", value)))
> >>>> value <- as.logical(value)
> >>>>   } else {
> >>>>       value <- TRUE
> >>>>   }
> >>>>   value <- getOption("fork.allowed", value)
> >>>>   if (is.na(value)) {
> >>>>       stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
> >>>>   }
> >>>>   if (assert && !value) {
> >>>>     stop(gettextf("Forked processing is not allowed per option %s or
> >>>> environment variable %s", sQuote("fork.allowed"),
> >>>> sQuote("R_FORK_ALLOWED")))
> >>>>   }
> >>>>   value
> >>>> }
> >>>> /Henrik
> >>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
> >>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> >>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >>>>>>>>> I think it's worth saying that mclapply() works as documented
> >>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> >>>>>>>> overcommitment, and that this means that it may work nicely or fail
> >>>>>>>> spectacularly depending on whether, e.g., you operate on a long
> >>>>>>>> vector.
> >>>>>>> R cannot possibly replicate documentation of the underlying operating
> >>>>>>> systems. It clearly says that fork() is used and readers who may not
> >>>>>>> know what fork() is need to learn it from external sources.
> >>>>>>> Copy-on-write is an elementary property of fork().
> >>>>>> Just to be precise, copy-on-write is an optimization widely deployed
> >>>>>> in most modern *nixes, particularly for the architectures in which R
> >>>>>> usually runs. But it is not an elementary property; it is not even
> >>>>>> possible without an MMU.
> >>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
> >>>>> Not relevant today, and certainly not for systems that run R, but indeed
> >>>>> people interested in OS internals can look elsewhere for more precise
> >>>>> information.
> >>>>> Tomas
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Jan 10 21:34:19 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 10 Jan 2020 12:34:19 -0800
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
Message-ID: <CAFDcVCR-aMss6QNrscaYgVfYANYkznFTxRdqxUVeu51qTFTnDg@mail.gmail.com>

On Fri, Jan 10, 2020 at 11:23 AM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Henrik,
>
> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries.

Thanks for ruling that example out.

> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.

I think this is worth pursuing and will help improve and stabilize
things.  But issuing a warning or stop on fork will not allow end
users from running the pipeline, or am I missing something?

I'm trying to argue that this is still a real problem that users and
developers run into on a regular basis.  Since parallel::mclapply() is
such a common and readily available solution it is also a low hanging
fruit to make it possible to have those forking functions fall back to
sequential processing.  The only(*) way to achieve this fall back
right now is to run the same pipeline on MS Windows - I just think it
would be very useful to have the same fallback option available on
Unix and macOS.  Having this in base R could also serve as standard
for other parallel/forking packages/implementations who also wish to
have a fallback to sequential processing.

==> What would the disadvantages be to provide a mechanism/setting for
disabling forking in the parallel::mc*** API? <==

(*) One can also somewhat disable forking in 'parallel' by using
'cgroups' limiting the process to a single core (see also
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17641).  That will
handle code that uses mc.cores = parallel::detectCores(), which there
is a lot of.  I guess it will cause run-time error (on 'mc.cores' must
be >= 1) for code that uses the second most common used mc.cores =
parallel::detectCores() - 1, which is unfortunately also very common.
I find the use of hardcoded detectCores() unfortunate but that is a
slightly different topic.  OTH, if there would a standardized option
in R for disabling all types of parallel processing by forcing a
single core, one could imagine other parallel APIs to implement
fallbacks to sequential processing as well. (I'm aware that not all
use cases of async processing is about parallelization, so it might
not apply everywhere).

Cheers,

Henrik

>
> Cheers,
> Simon
>
>
>
> > On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> >
> > The RStudio GUI was just one example.  AFAIK, and please correct me if
> > I'm wrong, another example is where multi-threaded code is used in
> > forked processing and that's sometimes unstable.  Yes another, which
> > might be multi-thread related or not, is
> > https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
> >
> > res <- parallel::mclapply(urls, function(url) {
> >  download.file(url, basename(url))
> > })
> >
> > That was reported to fail on macOS with the default method="libcurl"
> > but not for method="curl" or method="wget".
> >
> > Further documentation is needed and would help but I don't believe
> > it's sufficient to solve everyday problems.  The argument for
> > introducing an option/env var to disable forking is to give the end
> > user a quick workaround for newly introduced bugs.  Neither the
> > develop nor the end user have full control of the R package stack,
> > which is always in flux.  For instance, above mclapply() code might
> > have been in a package on CRAN and then all of a sudden
> > method="libcurl" became the new default in base R.  The above
> > mclapply() code is now buggy on macOS, and not necessarily caught by
> > CRAN checks.  The package developer might not notice this because they
> > are on Linux or Windows.  It can take a very long time before this
> > problem is even noticed and even further before it is tracked down and
> > fixed.   Similarly, as more and more code turn to native code and it
> > becomes easier and easier to implement multi-threading, more and more
> > of these bugs across package dependencies risk sneaking in the
> > backdoor wherever forked processing is in place.
> >
> > For the end user, but also higher-up upstream package developers, the
> > quickest workaround would be disable forking.  If you're conservative,
> > you could even disable it all of your R processing.  Being able to
> > quickly disable forking will also provide a mechanism for quickly
> > testing the hypothesis that forking is the underlying problem, i.e.
> > "Please retry with options(fork.allowed = FALSE)" will become handy
> > for troubleshooting.
> >
> > /Henrik
> >
> > On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
> > <simon.urbanek at r-project.org> wrote:
> >>
> >> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
> >>
> >> Cheers,
> >> Simon
> >>
> >> Sent from my iPhone
> >>
> >>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>
> >>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
> >>>> I'd like to pick up this thread started on 2019-04-11
> >>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
> >>>> Modulo all the other suggestions in this thread, would my proposal of
> >>>> being able to disable forked processing via an option or an
> >>>> environment variable make sense?
> >>>
> >>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
> >>>
> >>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
> >>>
> >>> Tomas
> >>>
> >>>> I've prototyped a working patch that
> >>>> works like:
> >>>>> options(fork.allowed = FALSE)
> >>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
> >>>> [1] 14058 14058
> >>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
> >>>> [1] 14058 14058
> >>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
> >>>> [1] 14058.1 14058.2
> >>>>> f <- parallel::mcparallel(Sys.getpid())
> >>>> Error in allowFork(assert = TRUE) :
> >>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>> environment variable ?R_FORK_ALLOWED?
> >>>>> cl <- parallel::makeForkCluster(1L)
> >>>> Error in allowFork(assert = TRUE) :
> >>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>> environment variable ?R_FORK_ALLOWED?
> >>>> The patch is:
> >>>> Index: src/library/parallel/R/unix/forkCluster.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
> >>>> @@ -30,6 +30,7 @@
> >>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
> >>>> {
> >>>> +    allowFork(assert = TRUE)
> >>>>    options <- addClusterOptions(options, list(...))
> >>>>    outfile <- getClusterOption("outfile", options)
> >>>>    port <- getClusterOption("port", options)
> >>>> Index: src/library/parallel/R/unix/mclapply.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
> >>>> @@ -28,7 +28,7 @@
> >>>>        stop("'mc.cores' must be >= 1")
> >>>>    .check_ncores(cores)
> >>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
> >>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
> >>>>        return(lapply(X = X, FUN = FUN, ...))
> >>>>    ## Follow lapply
> >>>> Index: src/library/parallel/R/unix/mcparallel.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
> >>>> @@ -20,6 +20,7 @@
> >>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
> >>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
> >>>> {
> >>>> +    allowFork(assert = TRUE)
> >>>>    f <- mcfork(detached)
> >>>>    env <- parent.frame()
> >>>>    if (isTRUE(mc.set.seed)) mc.advance.stream()
> >>>> Index: src/library/parallel/R/unix/pvec.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
> >>>> @@ -25,7 +25,7 @@
> >>>>    cores <- as.integer(mc.cores)
> >>>>    if(cores < 1L) stop("'mc.cores' must be >= 1")
> >>>> -    if(cores == 1L) return(FUN(v, ...))
> >>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
> >>>>    .check_ncores(cores)
> >>>>    if(mc.set.seed) mc.reset.stream()
> >>>> with a new file src/library/parallel/R/unix/allowFork.R:
> >>>> allowFork <- function(assert = FALSE) {
> >>>>   value <- Sys.getenv("R_FORK_ALLOWED")
> >>>>   if (nzchar(value)) {
> >>>>       value <- switch(value,
> >>>>          "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
> >>>>          "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
> >>>>           stop(gettextf("invalid environment variable value: %s==%s",
> >>>>          "R_FORK_ALLOWED", value)))
> >>>> value <- as.logical(value)
> >>>>   } else {
> >>>>       value <- TRUE
> >>>>   }
> >>>>   value <- getOption("fork.allowed", value)
> >>>>   if (is.na(value)) {
> >>>>       stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
> >>>>   }
> >>>>   if (assert && !value) {
> >>>>     stop(gettextf("Forked processing is not allowed per option %s or
> >>>> environment variable %s", sQuote("fork.allowed"),
> >>>> sQuote("R_FORK_ALLOWED")))
> >>>>   }
> >>>>   value
> >>>> }
> >>>> /Henrik
> >>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
> >>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> >>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >>>>>>>>> I think it's worth saying that mclapply() works as documented
> >>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> >>>>>>>> overcommitment, and that this means that it may work nicely or fail
> >>>>>>>> spectacularly depending on whether, e.g., you operate on a long
> >>>>>>>> vector.
> >>>>>>> R cannot possibly replicate documentation of the underlying operating
> >>>>>>> systems. It clearly says that fork() is used and readers who may not
> >>>>>>> know what fork() is need to learn it from external sources.
> >>>>>>> Copy-on-write is an elementary property of fork().
> >>>>>> Just to be precise, copy-on-write is an optimization widely deployed
> >>>>>> in most modern *nixes, particularly for the architectures in which R
> >>>>>> usually runs. But it is not an elementary property; it is not even
> >>>>>> possible without an MMU.
> >>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
> >>>>> Not relevant today, and certainly not for systems that run R, but indeed
> >>>>> people interested in OS internals can look elsewhere for more precise
> >>>>> information.
> >>>>> Tomas
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Jan 10 21:43:15 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 10 Jan 2020 20:43:15 +0000
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
Message-ID: <CABtg=Kkkernz+QCSopbCt7MFUL9fZ-5igs8GObDvJ6Wg1viB-Q@mail.gmail.com>

On Fri, Jan 10, 2020 at 7:23 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Henrik,
>
> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries. That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.

Btw. what other packages do fork() without an exec() call()?

Gbaor
[...]


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Jan 11 04:23:52 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 10 Jan 2020 22:23:52 -0500
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAFDcVCR-aMss6QNrscaYgVfYANYkznFTxRdqxUVeu51qTFTnDg@mail.gmail.com>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CAFDcVCR-aMss6QNrscaYgVfYANYkznFTxRdqxUVeu51qTFTnDg@mail.gmail.com>
Message-ID: <EA77CEE0-1018-4667-856D-1F3C98D015BB@R-project.org>

Henrik,

the whole point and only purpose of mc* functions is to fork. That's what the multicore package was about, so if you don't want to fork, don't use mc* functions - they don't have any other purpose. I really fail to see the point - if you use mc* functions you're very explicitly asking for forking - so your argument is like saying that print() should have an option to not print anything - it just makes no sense. If you have code that is fork-incompatilble, you clearly cannot use it in mcparallel - that's why there is a very explicit warning in the documentation. As I said, if you have some software that embeds R and has issue with forks, then that software should be use pthread_atfork() to control the behavior.

Cheers,
Simon



> On Jan 10, 2020, at 3:34 PM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> 
> On Fri, Jan 10, 2020 at 11:23 AM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> Henrik,
>> 
>> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries.
> 
> Thanks for ruling that example out.
> 
>> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.
> 
> I think this is worth pursuing and will help improve and stabilize
> things.  But issuing a warning or stop on fork will not allow end
> users from running the pipeline, or am I missing something?
> 
> I'm trying to argue that this is still a real problem that users and
> developers run into on a regular basis.  Since parallel::mclapply() is
> such a common and readily available solution it is also a low hanging
> fruit to make it possible to have those forking functions fall back to
> sequential processing.  The only(*) way to achieve this fall back
> right now is to run the same pipeline on MS Windows - I just think it
> would be very useful to have the same fallback option available on
> Unix and macOS.  Having this in base R could also serve as standard
> for other parallel/forking packages/implementations who also wish to
> have a fallback to sequential processing.
> 
> ==> What would the disadvantages be to provide a mechanism/setting for
> disabling forking in the parallel::mc*** API? <==
> 
> (*) One can also somewhat disable forking in 'parallel' by using
> 'cgroups' limiting the process to a single core (see also
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17641).  That will
> handle code that uses mc.cores = parallel::detectCores(), which there
> is a lot of.  I guess it will cause run-time error (on 'mc.cores' must
> be >= 1) for code that uses the second most common used mc.cores =
> parallel::detectCores() - 1, which is unfortunately also very common.
> I find the use of hardcoded detectCores() unfortunate but that is a
> slightly different topic.  OTH, if there would a standardized option
> in R for disabling all types of parallel processing by forcing a
> single core, one could imagine other parallel APIs to implement
> fallbacks to sequential processing as well. (I'm aware that not all
> use cases of async processing is about parallelization, so it might
> not apply everywhere).
> 
> Cheers,
> 
> Henrik
> 
>> 
>> Cheers,
>> Simon
>> 
>> 
>> 
>>> On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>>> 
>>> The RStudio GUI was just one example.  AFAIK, and please correct me if
>>> I'm wrong, another example is where multi-threaded code is used in
>>> forked processing and that's sometimes unstable.  Yes another, which
>>> might be multi-thread related or not, is
>>> https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
>>> 
>>> res <- parallel::mclapply(urls, function(url) {
>>> download.file(url, basename(url))
>>> })
>>> 
>>> That was reported to fail on macOS with the default method="libcurl"
>>> but not for method="curl" or method="wget".
>>> 
>>> Further documentation is needed and would help but I don't believe
>>> it's sufficient to solve everyday problems.  The argument for
>>> introducing an option/env var to disable forking is to give the end
>>> user a quick workaround for newly introduced bugs.  Neither the
>>> develop nor the end user have full control of the R package stack,
>>> which is always in flux.  For instance, above mclapply() code might
>>> have been in a package on CRAN and then all of a sudden
>>> method="libcurl" became the new default in base R.  The above
>>> mclapply() code is now buggy on macOS, and not necessarily caught by
>>> CRAN checks.  The package developer might not notice this because they
>>> are on Linux or Windows.  It can take a very long time before this
>>> problem is even noticed and even further before it is tracked down and
>>> fixed.   Similarly, as more and more code turn to native code and it
>>> becomes easier and easier to implement multi-threading, more and more
>>> of these bugs across package dependencies risk sneaking in the
>>> backdoor wherever forked processing is in place.
>>> 
>>> For the end user, but also higher-up upstream package developers, the
>>> quickest workaround would be disable forking.  If you're conservative,
>>> you could even disable it all of your R processing.  Being able to
>>> quickly disable forking will also provide a mechanism for quickly
>>> testing the hypothesis that forking is the underlying problem, i.e.
>>> "Please retry with options(fork.allowed = FALSE)" will become handy
>>> for troubleshooting.
>>> 
>>> /Henrik
>>> 
>>> On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
>>> <simon.urbanek at r-project.org> wrote:
>>>> 
>>>> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
>>>> 
>>>> Cheers,
>>>> Simon
>>>> 
>>>> Sent from my iPhone
>>>> 
>>>>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>> 
>>>>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
>>>>>> I'd like to pick up this thread started on 2019-04-11
>>>>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
>>>>>> Modulo all the other suggestions in this thread, would my proposal of
>>>>>> being able to disable forked processing via an option or an
>>>>>> environment variable make sense?
>>>>> 
>>>>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
>>>>> 
>>>>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
>>>>> 
>>>>> Tomas
>>>>> 
>>>>>> I've prototyped a working patch that
>>>>>> works like:
>>>>>>> options(fork.allowed = FALSE)
>>>>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
>>>>>> [1] 14058 14058
>>>>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
>>>>>> [1] 14058 14058
>>>>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
>>>>>> [1] 14058.1 14058.2
>>>>>>> f <- parallel::mcparallel(Sys.getpid())
>>>>>> Error in allowFork(assert = TRUE) :
>>>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>>>> environment variable ?R_FORK_ALLOWED?
>>>>>>> cl <- parallel::makeForkCluster(1L)
>>>>>> Error in allowFork(assert = TRUE) :
>>>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>>>> environment variable ?R_FORK_ALLOWED?
>>>>>> The patch is:
>>>>>> Index: src/library/parallel/R/unix/forkCluster.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
>>>>>> @@ -30,6 +30,7 @@
>>>>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
>>>>>> {
>>>>>> +    allowFork(assert = TRUE)
>>>>>>   options <- addClusterOptions(options, list(...))
>>>>>>   outfile <- getClusterOption("outfile", options)
>>>>>>   port <- getClusterOption("port", options)
>>>>>> Index: src/library/parallel/R/unix/mclapply.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
>>>>>> @@ -28,7 +28,7 @@
>>>>>>       stop("'mc.cores' must be >= 1")
>>>>>>   .check_ncores(cores)
>>>>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
>>>>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
>>>>>>       return(lapply(X = X, FUN = FUN, ...))
>>>>>>   ## Follow lapply
>>>>>> Index: src/library/parallel/R/unix/mcparallel.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
>>>>>> @@ -20,6 +20,7 @@
>>>>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
>>>>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
>>>>>> {
>>>>>> +    allowFork(assert = TRUE)
>>>>>>   f <- mcfork(detached)
>>>>>>   env <- parent.frame()
>>>>>>   if (isTRUE(mc.set.seed)) mc.advance.stream()
>>>>>> Index: src/library/parallel/R/unix/pvec.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
>>>>>> @@ -25,7 +25,7 @@
>>>>>>   cores <- as.integer(mc.cores)
>>>>>>   if(cores < 1L) stop("'mc.cores' must be >= 1")
>>>>>> -    if(cores == 1L) return(FUN(v, ...))
>>>>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
>>>>>>   .check_ncores(cores)
>>>>>>   if(mc.set.seed) mc.reset.stream()
>>>>>> with a new file src/library/parallel/R/unix/allowFork.R:
>>>>>> allowFork <- function(assert = FALSE) {
>>>>>>  value <- Sys.getenv("R_FORK_ALLOWED")
>>>>>>  if (nzchar(value)) {
>>>>>>      value <- switch(value,
>>>>>>         "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
>>>>>>         "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
>>>>>>          stop(gettextf("invalid environment variable value: %s==%s",
>>>>>>         "R_FORK_ALLOWED", value)))
>>>>>> value <- as.logical(value)
>>>>>>  } else {
>>>>>>      value <- TRUE
>>>>>>  }
>>>>>>  value <- getOption("fork.allowed", value)
>>>>>>  if (is.na(value)) {
>>>>>>      stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
>>>>>>  }
>>>>>>  if (assert && !value) {
>>>>>>    stop(gettextf("Forked processing is not allowed per option %s or
>>>>>> environment variable %s", sQuote("fork.allowed"),
>>>>>> sQuote("R_FORK_ALLOWED")))
>>>>>>  }
>>>>>>  value
>>>>>> }
>>>>>> /Henrik
>>>>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
>>>>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>>>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>>>>>>>>> I think it's worth saying that mclapply() works as documented
>>>>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>>>>>>>>> overcommitment, and that this means that it may work nicely or fail
>>>>>>>>>> spectacularly depending on whether, e.g., you operate on a long
>>>>>>>>>> vector.
>>>>>>>>> R cannot possibly replicate documentation of the underlying operating
>>>>>>>>> systems. It clearly says that fork() is used and readers who may not
>>>>>>>>> know what fork() is need to learn it from external sources.
>>>>>>>>> Copy-on-write is an elementary property of fork().
>>>>>>>> Just to be precise, copy-on-write is an optimization widely deployed
>>>>>>>> in most modern *nixes, particularly for the architectures in which R
>>>>>>>> usually runs. But it is not an elementary property; it is not even
>>>>>>>> possible without an MMU.
>>>>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
>>>>>>> Not relevant today, and certainly not for systems that run R, but indeed
>>>>>>> people interested in OS internals can look elsewhere for more precise
>>>>>>> information.
>>>>>>> Tomas
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Jan 11 04:27:50 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 10 Jan 2020 22:27:50 -0500
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>
Message-ID: <51292B2D-56D6-44B5-B64A-78408C452503@R-project.org>



> On Jan 10, 2020, at 3:10 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> On Fri, Jan 10, 2020 at 7:23 PM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> Henrik,
>> 
>> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries.
> 
> I think it works now, because Apple switched to a different SSL
> library for libcurl. It usually crashes or fails on older macOS
> versions, with the CRAN build of R as well.
> 

That is not true - Apple has not changed the SSL back-end for many years. The issue in that post is presumably in the homebrew version of SSL.

Cheers,
Simon


> It is not a bug in any library, it is just that macOS does not support
> fork() without an immediate exec().
> 
> In general, any code that calls the macOS system libraries might
> crash. (Except for CoreFoundation, which seems to be fine, but AFAIR
> there is no guarantee for that, either.)
> 
> You get crashes in the terminal as well, without multithreading. E.g.
> the keyring package links for the Security library on macOS, so you
> get:
> 
> ? R --vanilla -q
>> .libPaths("~/R/3.6")
>> keyring::key_list()[1:2,]
>        service                                                  username
> 1    CommCenter                             kEntitlementsUniqueIDCacheKey
> 2           ids                                   identity-rsa-public-key
>> parallel::mclapply(1:10, function(i) keyring::key_list()[1:2,])
> 
> *** caught segfault ***
> address 0x110, cause 'memory not mapped'
> 
> *** caught segfault ***
> address 0x110, cause 'memory not mapped'
> 
> AFAICT only Apple can do anything about this, and they won't.
> 
> Gabor
> 
>> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.
>> 
>> Cheers,
>> Simon
>> 
>> 
>> 
>>> On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>>> 
>>> The RStudio GUI was just one example.  AFAIK, and please correct me if
>>> I'm wrong, another example is where multi-threaded code is used in
>>> forked processing and that's sometimes unstable.  Yes another, which
>>> might be multi-thread related or not, is
>>> https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
>>> 
>>> res <- parallel::mclapply(urls, function(url) {
>>> download.file(url, basename(url))
>>> })
>>> 
>>> That was reported to fail on macOS with the default method="libcurl"
>>> but not for method="curl" or method="wget".
>>> 
>>> Further documentation is needed and would help but I don't believe
>>> it's sufficient to solve everyday problems.  The argument for
>>> introducing an option/env var to disable forking is to give the end
>>> user a quick workaround for newly introduced bugs.  Neither the
>>> develop nor the end user have full control of the R package stack,
>>> which is always in flux.  For instance, above mclapply() code might
>>> have been in a package on CRAN and then all of a sudden
>>> method="libcurl" became the new default in base R.  The above
>>> mclapply() code is now buggy on macOS, and not necessarily caught by
>>> CRAN checks.  The package developer might not notice this because they
>>> are on Linux or Windows.  It can take a very long time before this
>>> problem is even noticed and even further before it is tracked down and
>>> fixed.   Similarly, as more and more code turn to native code and it
>>> becomes easier and easier to implement multi-threading, more and more
>>> of these bugs across package dependencies risk sneaking in the
>>> backdoor wherever forked processing is in place.
>>> 
>>> For the end user, but also higher-up upstream package developers, the
>>> quickest workaround would be disable forking.  If you're conservative,
>>> you could even disable it all of your R processing.  Being able to
>>> quickly disable forking will also provide a mechanism for quickly
>>> testing the hypothesis that forking is the underlying problem, i.e.
>>> "Please retry with options(fork.allowed = FALSE)" will become handy
>>> for troubleshooting.
>>> 
>>> /Henrik
>>> 
>>> On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
>>> <simon.urbanek at r-project.org> wrote:
>>>> 
>>>> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
>>>> 
>>>> Cheers,
>>>> Simon
>>>> 
>>>> Sent from my iPhone
>>>> 
>>>>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>> 
>>>>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
>>>>>> I'd like to pick up this thread started on 2019-04-11
>>>>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
>>>>>> Modulo all the other suggestions in this thread, would my proposal of
>>>>>> being able to disable forked processing via an option or an
>>>>>> environment variable make sense?
>>>>> 
>>>>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
>>>>> 
>>>>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
>>>>> 
>>>>> Tomas
>>>>> 
>>>>>> I've prototyped a working patch that
>>>>>> works like:
>>>>>>> options(fork.allowed = FALSE)
>>>>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
>>>>>> [1] 14058 14058
>>>>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
>>>>>> [1] 14058 14058
>>>>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
>>>>>> [1] 14058.1 14058.2
>>>>>>> f <- parallel::mcparallel(Sys.getpid())
>>>>>> Error in allowFork(assert = TRUE) :
>>>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>>>> environment variable ?R_FORK_ALLOWED?
>>>>>>> cl <- parallel::makeForkCluster(1L)
>>>>>> Error in allowFork(assert = TRUE) :
>>>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>>>> environment variable ?R_FORK_ALLOWED?
>>>>>> The patch is:
>>>>>> Index: src/library/parallel/R/unix/forkCluster.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
>>>>>> @@ -30,6 +30,7 @@
>>>>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
>>>>>> {
>>>>>> +    allowFork(assert = TRUE)
>>>>>>   options <- addClusterOptions(options, list(...))
>>>>>>   outfile <- getClusterOption("outfile", options)
>>>>>>   port <- getClusterOption("port", options)
>>>>>> Index: src/library/parallel/R/unix/mclapply.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
>>>>>> @@ -28,7 +28,7 @@
>>>>>>       stop("'mc.cores' must be >= 1")
>>>>>>   .check_ncores(cores)
>>>>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
>>>>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
>>>>>>       return(lapply(X = X, FUN = FUN, ...))
>>>>>>   ## Follow lapply
>>>>>> Index: src/library/parallel/R/unix/mcparallel.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
>>>>>> @@ -20,6 +20,7 @@
>>>>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
>>>>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
>>>>>> {
>>>>>> +    allowFork(assert = TRUE)
>>>>>>   f <- mcfork(detached)
>>>>>>   env <- parent.frame()
>>>>>>   if (isTRUE(mc.set.seed)) mc.advance.stream()
>>>>>> Index: src/library/parallel/R/unix/pvec.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
>>>>>> @@ -25,7 +25,7 @@
>>>>>>   cores <- as.integer(mc.cores)
>>>>>>   if(cores < 1L) stop("'mc.cores' must be >= 1")
>>>>>> -    if(cores == 1L) return(FUN(v, ...))
>>>>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
>>>>>>   .check_ncores(cores)
>>>>>>   if(mc.set.seed) mc.reset.stream()
>>>>>> with a new file src/library/parallel/R/unix/allowFork.R:
>>>>>> allowFork <- function(assert = FALSE) {
>>>>>>  value <- Sys.getenv("R_FORK_ALLOWED")
>>>>>>  if (nzchar(value)) {
>>>>>>      value <- switch(value,
>>>>>>         "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
>>>>>>         "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
>>>>>>          stop(gettextf("invalid environment variable value: %s==%s",
>>>>>>         "R_FORK_ALLOWED", value)))
>>>>>> value <- as.logical(value)
>>>>>>  } else {
>>>>>>      value <- TRUE
>>>>>>  }
>>>>>>  value <- getOption("fork.allowed", value)
>>>>>>  if (is.na(value)) {
>>>>>>      stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
>>>>>>  }
>>>>>>  if (assert && !value) {
>>>>>>    stop(gettextf("Forked processing is not allowed per option %s or
>>>>>> environment variable %s", sQuote("fork.allowed"),
>>>>>> sQuote("R_FORK_ALLOWED")))
>>>>>>  }
>>>>>>  value
>>>>>> }
>>>>>> /Henrik
>>>>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
>>>>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>>>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>>>>>>>>> I think it's worth saying that mclapply() works as documented
>>>>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>>>>>>>>> overcommitment, and that this means that it may work nicely or fail
>>>>>>>>>> spectacularly depending on whether, e.g., you operate on a long
>>>>>>>>>> vector.
>>>>>>>>> R cannot possibly replicate documentation of the underlying operating
>>>>>>>>> systems. It clearly says that fork() is used and readers who may not
>>>>>>>>> know what fork() is need to learn it from external sources.
>>>>>>>>> Copy-on-write is an elementary property of fork().
>>>>>>>> Just to be precise, copy-on-write is an optimization widely deployed
>>>>>>>> in most modern *nixes, particularly for the architectures in which R
>>>>>>>> usually runs. But it is not an elementary property; it is not even
>>>>>>>> possible without an MMU.
>>>>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
>>>>>>> Not relevant today, and certainly not for systems that run R, but indeed
>>>>>>> people interested in OS internals can look elsewhere for more precise
>>>>>>> information.
>>>>>>> Tomas
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Jan 11 05:14:07 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 10 Jan 2020 23:14:07 -0500
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>
Message-ID: <606FA782-721B-443A-9399-9B6CE8AF47DD@R-project.org>



> On Jan 10, 2020, at 3:10 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> On Fri, Jan 10, 2020 at 7:23 PM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> Henrik,
>> 
>> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries.
> 
> I think it works now, because Apple switched to a different SSL
> library for libcurl. It usually crashes or fails on older macOS
> versions, with the CRAN build of R as well.
> 
> It is not a bug in any library, it is just that macOS does not support
> fork() without an immediate exec().
> 
> In general, any code that calls the macOS system libraries might
> crash. (Except for CoreFoundation, which seems to be fine, but AFAIR
> there is no guarantee for that, either.)
> 

That is not true, either. macOS itself is fork-safe (it is POSIX-certified after all), but libraries may or may not. The rules are pretty clear - fork() shares open descriptors and only inherits the main thread (see the POSIX documentation for pthread_atfork() - it illustrates the issues nicely). So as a user of APIs it may be your responsibility to make sure things are handled properly - again, that's what pthread_atfork() is for. Most libraries don't allow duplicated fds or have rules about thread safety, so it is your responsibility in the package to abide by those rules if you want it to function after forking. Some libraries don't allow forking at all, e.g., JVMs cannot be forked (because they are too complex to make them fork-safe). In general, you cannot assume that (non-R) code is fork-safe unless it has been designed to be. That's why mcparallel() should only be used for pure R code (and even that is with I/O limitations) and C code that is explicitly fork-safe. As I said, using mc* functions explicitly says that you are ok with forking, so you if you run code that is not fork-safe it is clearly a user error.

That's exactly why we have the long "Warning" section in the documentation. If you have suggestions for its improvements, please feel free to supply patches.

Cheers,
Simon


> You get crashes in the terminal as well, without multithreading. E.g.
> the keyring package links for the Security library on macOS, so you
> get:
> 
> ? R --vanilla -q
>> .libPaths("~/R/3.6")
>> keyring::key_list()[1:2,]
>        service                                                  username
> 1    CommCenter                             kEntitlementsUniqueIDCacheKey
> 2           ids                                   identity-rsa-public-key
>> parallel::mclapply(1:10, function(i) keyring::key_list()[1:2,])
> 
> *** caught segfault ***
> address 0x110, cause 'memory not mapped'
> 
> *** caught segfault ***
> address 0x110, cause 'memory not mapped'
> 
> AFAICT only Apple can do anything about this, and they won't.
> 
> Gabor
> 
>> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.
>> 
>> Cheers,
>> Simon
>> 
>> 
>> 
>>> On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>>> 
>>> The RStudio GUI was just one example.  AFAIK, and please correct me if
>>> I'm wrong, another example is where multi-threaded code is used in
>>> forked processing and that's sometimes unstable.  Yes another, which
>>> might be multi-thread related or not, is
>>> https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
>>> 
>>> res <- parallel::mclapply(urls, function(url) {
>>> download.file(url, basename(url))
>>> })
>>> 
>>> That was reported to fail on macOS with the default method="libcurl"
>>> but not for method="curl" or method="wget".
>>> 
>>> Further documentation is needed and would help but I don't believe
>>> it's sufficient to solve everyday problems.  The argument for
>>> introducing an option/env var to disable forking is to give the end
>>> user a quick workaround for newly introduced bugs.  Neither the
>>> develop nor the end user have full control of the R package stack,
>>> which is always in flux.  For instance, above mclapply() code might
>>> have been in a package on CRAN and then all of a sudden
>>> method="libcurl" became the new default in base R.  The above
>>> mclapply() code is now buggy on macOS, and not necessarily caught by
>>> CRAN checks.  The package developer might not notice this because they
>>> are on Linux or Windows.  It can take a very long time before this
>>> problem is even noticed and even further before it is tracked down and
>>> fixed.   Similarly, as more and more code turn to native code and it
>>> becomes easier and easier to implement multi-threading, more and more
>>> of these bugs across package dependencies risk sneaking in the
>>> backdoor wherever forked processing is in place.
>>> 
>>> For the end user, but also higher-up upstream package developers, the
>>> quickest workaround would be disable forking.  If you're conservative,
>>> you could even disable it all of your R processing.  Being able to
>>> quickly disable forking will also provide a mechanism for quickly
>>> testing the hypothesis that forking is the underlying problem, i.e.
>>> "Please retry with options(fork.allowed = FALSE)" will become handy
>>> for troubleshooting.
>>> 
>>> /Henrik
>>> 
>>> On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
>>> <simon.urbanek at r-project.org> wrote:
>>>> 
>>>> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
>>>> 
>>>> Cheers,
>>>> Simon
>>>> 
>>>> Sent from my iPhone
>>>> 
>>>>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>> 
>>>>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
>>>>>> I'd like to pick up this thread started on 2019-04-11
>>>>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
>>>>>> Modulo all the other suggestions in this thread, would my proposal of
>>>>>> being able to disable forked processing via an option or an
>>>>>> environment variable make sense?
>>>>> 
>>>>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
>>>>> 
>>>>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
>>>>> 
>>>>> Tomas
>>>>> 
>>>>>> I've prototyped a working patch that
>>>>>> works like:
>>>>>>> options(fork.allowed = FALSE)
>>>>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
>>>>>> [1] 14058 14058
>>>>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
>>>>>> [1] 14058 14058
>>>>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
>>>>>> [1] 14058.1 14058.2
>>>>>>> f <- parallel::mcparallel(Sys.getpid())
>>>>>> Error in allowFork(assert = TRUE) :
>>>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>>>> environment variable ?R_FORK_ALLOWED?
>>>>>>> cl <- parallel::makeForkCluster(1L)
>>>>>> Error in allowFork(assert = TRUE) :
>>>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>>>> environment variable ?R_FORK_ALLOWED?
>>>>>> The patch is:
>>>>>> Index: src/library/parallel/R/unix/forkCluster.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
>>>>>> @@ -30,6 +30,7 @@
>>>>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
>>>>>> {
>>>>>> +    allowFork(assert = TRUE)
>>>>>>   options <- addClusterOptions(options, list(...))
>>>>>>   outfile <- getClusterOption("outfile", options)
>>>>>>   port <- getClusterOption("port", options)
>>>>>> Index: src/library/parallel/R/unix/mclapply.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
>>>>>> @@ -28,7 +28,7 @@
>>>>>>       stop("'mc.cores' must be >= 1")
>>>>>>   .check_ncores(cores)
>>>>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
>>>>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
>>>>>>       return(lapply(X = X, FUN = FUN, ...))
>>>>>>   ## Follow lapply
>>>>>> Index: src/library/parallel/R/unix/mcparallel.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
>>>>>> @@ -20,6 +20,7 @@
>>>>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
>>>>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
>>>>>> {
>>>>>> +    allowFork(assert = TRUE)
>>>>>>   f <- mcfork(detached)
>>>>>>   env <- parent.frame()
>>>>>>   if (isTRUE(mc.set.seed)) mc.advance.stream()
>>>>>> Index: src/library/parallel/R/unix/pvec.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
>>>>>> @@ -25,7 +25,7 @@
>>>>>>   cores <- as.integer(mc.cores)
>>>>>>   if(cores < 1L) stop("'mc.cores' must be >= 1")
>>>>>> -    if(cores == 1L) return(FUN(v, ...))
>>>>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
>>>>>>   .check_ncores(cores)
>>>>>>   if(mc.set.seed) mc.reset.stream()
>>>>>> with a new file src/library/parallel/R/unix/allowFork.R:
>>>>>> allowFork <- function(assert = FALSE) {
>>>>>>  value <- Sys.getenv("R_FORK_ALLOWED")
>>>>>>  if (nzchar(value)) {
>>>>>>      value <- switch(value,
>>>>>>         "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
>>>>>>         "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
>>>>>>          stop(gettextf("invalid environment variable value: %s==%s",
>>>>>>         "R_FORK_ALLOWED", value)))
>>>>>> value <- as.logical(value)
>>>>>>  } else {
>>>>>>      value <- TRUE
>>>>>>  }
>>>>>>  value <- getOption("fork.allowed", value)
>>>>>>  if (is.na(value)) {
>>>>>>      stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
>>>>>>  }
>>>>>>  if (assert && !value) {
>>>>>>    stop(gettextf("Forked processing is not allowed per option %s or
>>>>>> environment variable %s", sQuote("fork.allowed"),
>>>>>> sQuote("R_FORK_ALLOWED")))
>>>>>>  }
>>>>>>  value
>>>>>> }
>>>>>> /Henrik
>>>>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
>>>>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>>>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>>>>>>>>> I think it's worth saying that mclapply() works as documented
>>>>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>>>>>>>>> overcommitment, and that this means that it may work nicely or fail
>>>>>>>>>> spectacularly depending on whether, e.g., you operate on a long
>>>>>>>>>> vector.
>>>>>>>>> R cannot possibly replicate documentation of the underlying operating
>>>>>>>>> systems. It clearly says that fork() is used and readers who may not
>>>>>>>>> know what fork() is need to learn it from external sources.
>>>>>>>>> Copy-on-write is an elementary property of fork().
>>>>>>>> Just to be precise, copy-on-write is an optimization widely deployed
>>>>>>>> in most modern *nixes, particularly for the architectures in which R
>>>>>>>> usually runs. But it is not an elementary property; it is not even
>>>>>>>> possible without an MMU.
>>>>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
>>>>>>> Not relevant today, and certainly not for systems that run R, but indeed
>>>>>>> people interested in OS internals can look elsewhere for more precise
>>>>>>> information.
>>>>>>> Tomas
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From tdhock5 @end|ng |rom gm@||@com  Sat Jan 11 06:22:11 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Fri, 10 Jan 2020 19:22:11 -1000
Subject: [Rd] add jsslogo.jpg to R sources?
In-Reply-To: <alpine.DEB.2.21.2001082009310.4109@paninaro>
References: <CALK03d0h7P2TB8L8Xj8mKttuAfvWas7zWndm7Hr+EyDQAPodLg@mail.gmail.com>
 <CALEXWq3Ze7PMO2CZ+4LXpejeKVW4gq+0SAiebsoR28373NCJqw@mail.gmail.com>
 <alpine.DEB.2.21.2001082009310.4109@paninaro>
Message-ID: <CALK03d1B9K+Xi71qn3xwvOckgofTtW_99586X0kTKBhS4-aygw@mail.gmail.com>

hi there, thanks for the feedback, sorry about the cross-posting, and that
makes sense given the nojss option, which I was not aware of.

On Wed, Jan 8, 2020 at 9:16 AM Achim Zeileis <Achim.Zeileis at uibk.ac.at>
wrote:

> On Wed, 8 Jan 2020, I?aki Ucar wrote:
>
> > On Wed, 8 Jan 2020 at 19:21, Toby Hocking <tdhock5 at gmail.com> wrote:
> >>
> >> Hi R-core, I was wondering if somebody could please add jsslogo.jpg to
> the
> >> R sources? (as I reported yesterday in this bug)
> >>
> >> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17687
> >>
> >> R already includes jss.cls which is the document class file for Journal
> of
> >> Statistical Software. Actually, for the jss.cls file to be useful, it
> also
> >> requires jsslogo.jpg in order to compile JSS articles without error.
> >>
> >> This is an issue for me because I am writing a JSS paper that includes
> >> figures created using tikzDevice, which I am telling to use the jss
> class
> >> for computing metrics. On debian/ubuntu the R-src/share/texmf directory
> is
> >> copied to /usr/share/texmf/tex/latex/R, so tikzDevice is finding
> jss.cls in
> >> /usr/share/texmf/tex/latex/R/tex/latex/jss.cls but it is failing with a
> >> 'jsslogo not found' error -- the fix is to also include jsslogo.jpg in
> the
> >> R sources (in the same directory as jss.cls).
> >
> > Why don't you just include jsslogo.jpg in your working directory?
> > jss.cls is included in the R sources because there are many vignettes
> > with the JSS style, but always *without* the logo. The logo should
> > only be used for actual JSS publication, so I think that the R sources
> > are no place for it.
>
> Thanks, I?aki, you are right. The motivation for including jss.cls and
> jss.bst in the R sources was to facilitate turning JSS papers into
> vignettes (see the FAQ at https://www.jstatsoft.org/pages/view/style)
> with
> \documentclass[nojss]{jss}. Before jss.cls/bst were shipped along with
> base R many packages shipped with their own copy which seemed like a waste
> of resources and source of confusion.
>
> When preparing new papers for submission in JSS you can also use the
> "nojss" option, this is also accepted by the journal.
>
> Hope that helps,
> Achim
>
> P.S.: Toby, if you plan on discussing an such an issue anyway, I would
> recommend to wait with the bug report. Cross-posting on different channels
> is always a bit of a nuisance.

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sat Jan 11 09:59:19 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 11 Jan 2020 08:59:19 +0000
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <606FA782-721B-443A-9399-9B6CE8AF47DD@R-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>
 <606FA782-721B-443A-9399-9B6CE8AF47DD@R-project.org>
Message-ID: <CABtg=K=QAkuXE6RL3KJzkxeBGYr6ThBVRVew5z6SfzRCUG=2oQ@mail.gmail.com>

On Sat, Jan 11, 2020 at 4:14 AM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
[...]
> > In general, any code that calls the macOS system libraries might
> > crash. (Except for CoreFoundation, which seems to be fine, but AFAIR
> > there is no guarantee for that, either.)
> >
>
> That is not true, either. macOS itself is fork-safe (it is POSIX-certified after all), but libraries may or may not.

Right, so CoreFoundation should be fine. Well, as much as it can be.

[...]
>  As I said, using mc* functions explicitly says that you are ok with forking, so you if you run code that is not fork-safe it is clearly a user error.

Just to clarify, this basically means that you cannot use mc* in
portable code. Even base R functions might fail, see e.g. the previous
crashes with libcurl.

> That's exactly why we have the long "Warning" section in the documentation. If you have suggestions for its improvements, please feel free to supply patches.

One suggestion would be to export the parallel::isChild(), so that we
can guard against crashes.

Best,
Gabor

> Cheers,
> Simon
>
>
> > You get crashes in the terminal as well, without multithreading. E.g.
> > the keyring package links for the Security library on macOS, so you
> > get:
> >
> > ? R --vanilla -q
> >> .libPaths("~/R/3.6")
> >> keyring::key_list()[1:2,]
> >        service                                                  username
> > 1    CommCenter                             kEntitlementsUniqueIDCacheKey
> > 2           ids                                   identity-rsa-public-key
> >> parallel::mclapply(1:10, function(i) keyring::key_list()[1:2,])
> >
> > *** caught segfault ***
> > address 0x110, cause 'memory not mapped'
> >
> > *** caught segfault ***
> > address 0x110, cause 'memory not mapped'
> >
> > AFAICT only Apple can do anything about this, and they won't.
> >
> > Gabor
> >
> >> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.
> >>
> >> Cheers,
> >> Simon
> >>
> >>
> >>
> >>> On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> >>>
> >>> The RStudio GUI was just one example.  AFAIK, and please correct me if
> >>> I'm wrong, another example is where multi-threaded code is used in
> >>> forked processing and that's sometimes unstable.  Yes another, which
> >>> might be multi-thread related or not, is
> >>> https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
> >>>
> >>> res <- parallel::mclapply(urls, function(url) {
> >>> download.file(url, basename(url))
> >>> })
> >>>
> >>> That was reported to fail on macOS with the default method="libcurl"
> >>> but not for method="curl" or method="wget".
> >>>
> >>> Further documentation is needed and would help but I don't believe
> >>> it's sufficient to solve everyday problems.  The argument for
> >>> introducing an option/env var to disable forking is to give the end
> >>> user a quick workaround for newly introduced bugs.  Neither the
> >>> develop nor the end user have full control of the R package stack,
> >>> which is always in flux.  For instance, above mclapply() code might
> >>> have been in a package on CRAN and then all of a sudden
> >>> method="libcurl" became the new default in base R.  The above
> >>> mclapply() code is now buggy on macOS, and not necessarily caught by
> >>> CRAN checks.  The package developer might not notice this because they
> >>> are on Linux or Windows.  It can take a very long time before this
> >>> problem is even noticed and even further before it is tracked down and
> >>> fixed.   Similarly, as more and more code turn to native code and it
> >>> becomes easier and easier to implement multi-threading, more and more
> >>> of these bugs across package dependencies risk sneaking in the
> >>> backdoor wherever forked processing is in place.
> >>>
> >>> For the end user, but also higher-up upstream package developers, the
> >>> quickest workaround would be disable forking.  If you're conservative,
> >>> you could even disable it all of your R processing.  Being able to
> >>> quickly disable forking will also provide a mechanism for quickly
> >>> testing the hypothesis that forking is the underlying problem, i.e.
> >>> "Please retry with options(fork.allowed = FALSE)" will become handy
> >>> for troubleshooting.
> >>>
> >>> /Henrik
> >>>
> >>> On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
> >>> <simon.urbanek at r-project.org> wrote:
> >>>>
> >>>> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
> >>>>
> >>>> Cheers,
> >>>> Simon
> >>>>
> >>>> Sent from my iPhone
> >>>>
> >>>>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>
> >>>>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
> >>>>>> I'd like to pick up this thread started on 2019-04-11
> >>>>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
> >>>>>> Modulo all the other suggestions in this thread, would my proposal of
> >>>>>> being able to disable forked processing via an option or an
> >>>>>> environment variable make sense?
> >>>>>
> >>>>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
> >>>>>
> >>>>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
> >>>>>
> >>>>> Tomas
> >>>>>
> >>>>>> I've prototyped a working patch that
> >>>>>> works like:
> >>>>>>> options(fork.allowed = FALSE)
> >>>>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
> >>>>>> [1] 14058 14058
> >>>>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
> >>>>>> [1] 14058 14058
> >>>>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
> >>>>>> [1] 14058.1 14058.2
> >>>>>>> f <- parallel::mcparallel(Sys.getpid())
> >>>>>> Error in allowFork(assert = TRUE) :
> >>>>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>>>> environment variable ?R_FORK_ALLOWED?
> >>>>>>> cl <- parallel::makeForkCluster(1L)
> >>>>>> Error in allowFork(assert = TRUE) :
> >>>>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>>>> environment variable ?R_FORK_ALLOWED?
> >>>>>> The patch is:
> >>>>>> Index: src/library/parallel/R/unix/forkCluster.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
> >>>>>> @@ -30,6 +30,7 @@
> >>>>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
> >>>>>> {
> >>>>>> +    allowFork(assert = TRUE)
> >>>>>>   options <- addClusterOptions(options, list(...))
> >>>>>>   outfile <- getClusterOption("outfile", options)
> >>>>>>   port <- getClusterOption("port", options)
> >>>>>> Index: src/library/parallel/R/unix/mclapply.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
> >>>>>> @@ -28,7 +28,7 @@
> >>>>>>       stop("'mc.cores' must be >= 1")
> >>>>>>   .check_ncores(cores)
> >>>>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
> >>>>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
> >>>>>>       return(lapply(X = X, FUN = FUN, ...))
> >>>>>>   ## Follow lapply
> >>>>>> Index: src/library/parallel/R/unix/mcparallel.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
> >>>>>> @@ -20,6 +20,7 @@
> >>>>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
> >>>>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
> >>>>>> {
> >>>>>> +    allowFork(assert = TRUE)
> >>>>>>   f <- mcfork(detached)
> >>>>>>   env <- parent.frame()
> >>>>>>   if (isTRUE(mc.set.seed)) mc.advance.stream()
> >>>>>> Index: src/library/parallel/R/unix/pvec.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
> >>>>>> @@ -25,7 +25,7 @@
> >>>>>>   cores <- as.integer(mc.cores)
> >>>>>>   if(cores < 1L) stop("'mc.cores' must be >= 1")
> >>>>>> -    if(cores == 1L) return(FUN(v, ...))
> >>>>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
> >>>>>>   .check_ncores(cores)
> >>>>>>   if(mc.set.seed) mc.reset.stream()
> >>>>>> with a new file src/library/parallel/R/unix/allowFork.R:
> >>>>>> allowFork <- function(assert = FALSE) {
> >>>>>>  value <- Sys.getenv("R_FORK_ALLOWED")
> >>>>>>  if (nzchar(value)) {
> >>>>>>      value <- switch(value,
> >>>>>>         "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
> >>>>>>         "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
> >>>>>>          stop(gettextf("invalid environment variable value: %s==%s",
> >>>>>>         "R_FORK_ALLOWED", value)))
> >>>>>> value <- as.logical(value)
> >>>>>>  } else {
> >>>>>>      value <- TRUE
> >>>>>>  }
> >>>>>>  value <- getOption("fork.allowed", value)
> >>>>>>  if (is.na(value)) {
> >>>>>>      stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
> >>>>>>  }
> >>>>>>  if (assert && !value) {
> >>>>>>    stop(gettextf("Forked processing is not allowed per option %s or
> >>>>>> environment variable %s", sQuote("fork.allowed"),
> >>>>>> sQuote("R_FORK_ALLOWED")))
> >>>>>>  }
> >>>>>>  value
> >>>>>> }
> >>>>>> /Henrik
> >>>>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
> >>>>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> >>>>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >>>>>>>>>>> I think it's worth saying that mclapply() works as documented
> >>>>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> >>>>>>>>>> overcommitment, and that this means that it may work nicely or fail
> >>>>>>>>>> spectacularly depending on whether, e.g., you operate on a long
> >>>>>>>>>> vector.
> >>>>>>>>> R cannot possibly replicate documentation of the underlying operating
> >>>>>>>>> systems. It clearly says that fork() is used and readers who may not
> >>>>>>>>> know what fork() is need to learn it from external sources.
> >>>>>>>>> Copy-on-write is an elementary property of fork().
> >>>>>>>> Just to be precise, copy-on-write is an optimization widely deployed
> >>>>>>>> in most modern *nixes, particularly for the architectures in which R
> >>>>>>>> usually runs. But it is not an elementary property; it is not even
> >>>>>>>> possible without an MMU.
> >>>>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
> >>>>>>> Not relevant today, and certainly not for systems that run R, but indeed
> >>>>>>> people interested in OS internals can look elsewhere for more precise
> >>>>>>> information.
> >>>>>>> Tomas
> >>>>>
> >>>>> ______________________________________________
> >>>>> R-devel at r-project.org mailing list
> >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sat Jan 11 15:09:39 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 11 Jan 2020 14:09:39 +0000
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <51292B2D-56D6-44B5-B64A-78408C452503@R-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>
 <51292B2D-56D6-44B5-B64A-78408C452503@R-project.org>
Message-ID: <CABtg=KkTjF4YCmmQ68D=cOVYK9k6vB2o-Zrx_d3=6dRs--VY3g@mail.gmail.com>

On Sat, Jan 11, 2020 at 12:53 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
[...]
> > I think it works now, because Apple switched to a different SSL
> > library for libcurl. It usually crashes or fails on older macOS
> > versions, with the CRAN build of R as well.
> >
>
> That is not true - Apple has not changed the SSL back-end for many years. The issue in that post is presumably in the homebrew version of SSL.

This is CRAN R 3.6.2 on El Capitan crashing for HTTPS. Homebrew is not
installed on the machine.

> download.file("https://httpbin.org/status/200", tempfile(), method = "libcurl")
trying URL 'https://httpbin.org/status/200'
downloaded 0 bytes

> parallel::mclapply(1:10, function(x) download.file("https://httpbin.org/status/200", tempfile(), method = "libcurl"))
trying URL 'https://httpbin.org/status/200'
trying URL 'https://httpbin.org/status/200'

 *** caught segfault ***

address 0x110, cause 'memory not mapped'

I assume the crash is coming from the SSL library/ies because it does
work for HTTP, only crashes for HTTPS.

FWIW these are the libraries the system libcurl uses on El Capitan:

Rhubs-Mac-3:macoscheck rhub$ otool -L /usr/lib/libcurl.4.dylib
/usr/lib/libcurl.4.dylib:
     /usr/lib/libcurl.4.dylib (compatibility version 7.0.0, current
version 8.0.0)
     /System/Library/Frameworks/Security.framework/Versions/A/Security
(compatibility version 1.0.0, current version 57332.0.0)
     /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
(compatibility version 150.0.0, current version 1231.0.0)
     /System/Library/Frameworks/LDAP.framework/Versions/A/LDAP
(compatibility version 1.0.0, current version 2.4.0)
     /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos
(compatibility version 5.0.0, current version 6.0.0)
     /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.5)
     /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current
version 1225.0.0)

and this is Mojave:

? otool -L /usr/lib/libcurl.4.dylib
/usr/lib/libcurl.4.dylib:
     /usr/lib/libcurl.4.dylib (compatibility version 7.0.0, current
version 9.0.0)
     /usr/lib/libcrypto.42.dylib (compatibility version 43.0.0,
current version 43.0.0)
     /usr/lib/libssl.44.dylib (compatibility version 45.0.0, current
version 45.1.0)
     /System/Library/Frameworks/LDAP.framework/Versions/A/LDAP
(compatibility version 1.0.0, current version 2.4.0)
     /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos
(compatibility version 5.0.0, current version 6.0.0)
     /usr/lib/libapple_nghttp2.dylib (compatibility version 1.0.0,
current version 1.24.1)
     /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.11)
     /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current
version 1252.250.1)

So the SSL libs do look different to me, but please FIXME. Relatedly,
on El Capitan an HTTPS download with download.file() starts up extra
threads, whereas on Mojave it does not.

Gabor

> Cheers,
> Simon
[...]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Sun Jan 12 00:48:33 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Sat, 11 Jan 2020 15:48:33 -0800
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <EA77CEE0-1018-4667-856D-1F3C98D015BB@R-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CAFDcVCR-aMss6QNrscaYgVfYANYkznFTxRdqxUVeu51qTFTnDg@mail.gmail.com>
 <EA77CEE0-1018-4667-856D-1F3C98D015BB@R-project.org>
Message-ID: <CAFDcVCRg7Ygr1F+=fgaHq2NaJsM5RsUTLUsNdC3=6x=agigJ1Q@mail.gmail.com>

On Fri, Jan 10, 2020 at 7:23 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Henrik,
>
> the whole point and only purpose of mc* functions is to fork. That's what the multicore package was about, so if you don't want to fork, don't use mc* functions - they don't have any other purpose.

But, with that same argument I'm surprised we have fake
implementations of the mc***() functions for MS Windows.

> I really fail to see the point - if you use mc* functions you're very explicitly asking for forking - so your argument is like saying that print() should have an option to not print anything - it just makes no sense. If you have code that is fork-incompatilble, you clearly cannot use it in mcparallel - that's why there is a very explicit warning in the documentation.

I think you're casting the word "you" too wide here - what I've been
trying to argue is that users don't always have this control - the
length of loadedNamespaces() can easily be 100's of packages these
days.  Usage of forking will come and go in that software stack
completely out of control to the user. They could be in control if
there was an option to disable it.

I don't think the analogue to print() is relevant here.

> As I said, if you have some software that embeds R and has issue with forks, then that software should be use pthread_atfork() to control the behavior.

If I understand this correctly, this only applies to discussions such
as RStudio and similar.  It is not a relevant solution to ordinary
users of R, correct?

I'm not sure if you're playing devils advocate here, or I'm really
really bad at explaining the problem, but here's my last attempt of an
example:

Consider PkgA::train() that calls mclapply(..., PkgB::estimate). Life
is good. Then PkgB fixes a bug in the estimator + optimizes some the
internals/native code - unfortunately, the latter is not meant to work
in forked parallel processing.  Author of PkgB have not idea that this
change will affect PkgA negatively. When PkgB hits CRAN, the problem
in PkgA might go undetected, e.g. low code coverage in package tests
or for other reasons.  Now CRAN distributes an unstable software
stack.  All code bases relying on PkgA::train() is now completely
useless to some or all users.  Only after major troubleshooting and
responsive package maintainers, these type of problems can be resolved
quickly - until then, users will have to turn to complicated
workarounds such as installing old versions of PkgA + backporting bug
fixes, etc.   A lot of users don't even consider this as an option.

Usage of 'parallel::mc***()' functions is very common; 357 packages on
CRAN call them directly, and even more indirectly via doMC and
doParallel.  I expect the risk for instability to happen for at least
some of these.

If the stance on this is that mclapply() and friends should only be
used when you are 100% sure that it is fork safe, then I'd like to
argue that those functions should never ever be allowed to call other
packages, because you are not in full control of such code.  This
should certainly be documented and it shouldn't be too hard to add
assertions for this in 'R CMD check'.

A final plead: Adding an option to disable forking, at least in the
'parallel' package only, will spare people (end users, developers,
sysadms, ...) many many hours of troubleshooting and eventually trying
to find workarounds. Those hours adds up quickly given the number of R
users we have out there.  We have more important things to spend our
time on.  I can easily count days wasted due to troubleshooting and
helping others remotely on problems related to instability of forked
processing. Being able to disable it, would have shortcut this quite a
bit.

/Henrik

>
> Cheers,
> Simon
>
>
>
> > On Jan 10, 2020, at 3:34 PM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> >
> > On Fri, Jan 10, 2020 at 11:23 AM Simon Urbanek
> > <simon.urbanek at r-project.org> wrote:
> >>
> >> Henrik,
> >>
> >> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries.
> >
> > Thanks for ruling that example out.
> >
> >> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.
> >
> > I think this is worth pursuing and will help improve and stabilize
> > things.  But issuing a warning or stop on fork will not allow end
> > users from running the pipeline, or am I missing something?
> >
> > I'm trying to argue that this is still a real problem that users and
> > developers run into on a regular basis.  Since parallel::mclapply() is
> > such a common and readily available solution it is also a low hanging
> > fruit to make it possible to have those forking functions fall back to
> > sequential processing.  The only(*) way to achieve this fall back
> > right now is to run the same pipeline on MS Windows - I just think it
> > would be very useful to have the same fallback option available on
> > Unix and macOS.  Having this in base R could also serve as standard
> > for other parallel/forking packages/implementations who also wish to
> > have a fallback to sequential processing.
> >
> > ==> What would the disadvantages be to provide a mechanism/setting for
> > disabling forking in the parallel::mc*** API? <==
> >
> > (*) One can also somewhat disable forking in 'parallel' by using
> > 'cgroups' limiting the process to a single core (see also
> > https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17641).  That will
> > handle code that uses mc.cores = parallel::detectCores(), which there
> > is a lot of.  I guess it will cause run-time error (on 'mc.cores' must
> > be >= 1) for code that uses the second most common used mc.cores =
> > parallel::detectCores() - 1, which is unfortunately also very common.
> > I find the use of hardcoded detectCores() unfortunate but that is a
> > slightly different topic.  OTH, if there would a standardized option
> > in R for disabling all types of parallel processing by forcing a
> > single core, one could imagine other parallel APIs to implement
> > fallbacks to sequential processing as well. (I'm aware that not all
> > use cases of async processing is about parallelization, so it might
> > not apply everywhere).
> >
> > Cheers,
> >
> > Henrik
> >
> >>
> >> Cheers,
> >> Simon
> >>
> >>
> >>
> >>> On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> >>>
> >>> The RStudio GUI was just one example.  AFAIK, and please correct me if
> >>> I'm wrong, another example is where multi-threaded code is used in
> >>> forked processing and that's sometimes unstable.  Yes another, which
> >>> might be multi-thread related or not, is
> >>> https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
> >>>
> >>> res <- parallel::mclapply(urls, function(url) {
> >>> download.file(url, basename(url))
> >>> })
> >>>
> >>> That was reported to fail on macOS with the default method="libcurl"
> >>> but not for method="curl" or method="wget".
> >>>
> >>> Further documentation is needed and would help but I don't believe
> >>> it's sufficient to solve everyday problems.  The argument for
> >>> introducing an option/env var to disable forking is to give the end
> >>> user a quick workaround for newly introduced bugs.  Neither the
> >>> develop nor the end user have full control of the R package stack,
> >>> which is always in flux.  For instance, above mclapply() code might
> >>> have been in a package on CRAN and then all of a sudden
> >>> method="libcurl" became the new default in base R.  The above
> >>> mclapply() code is now buggy on macOS, and not necessarily caught by
> >>> CRAN checks.  The package developer might not notice this because they
> >>> are on Linux or Windows.  It can take a very long time before this
> >>> problem is even noticed and even further before it is tracked down and
> >>> fixed.   Similarly, as more and more code turn to native code and it
> >>> becomes easier and easier to implement multi-threading, more and more
> >>> of these bugs across package dependencies risk sneaking in the
> >>> backdoor wherever forked processing is in place.
> >>>
> >>> For the end user, but also higher-up upstream package developers, the
> >>> quickest workaround would be disable forking.  If you're conservative,
> >>> you could even disable it all of your R processing.  Being able to
> >>> quickly disable forking will also provide a mechanism for quickly
> >>> testing the hypothesis that forking is the underlying problem, i.e.
> >>> "Please retry with options(fork.allowed = FALSE)" will become handy
> >>> for troubleshooting.
> >>>
> >>> /Henrik
> >>>
> >>> On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
> >>> <simon.urbanek at r-project.org> wrote:
> >>>>
> >>>> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
> >>>>
> >>>> Cheers,
> >>>> Simon
> >>>>
> >>>> Sent from my iPhone
> >>>>
> >>>>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>
> >>>>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
> >>>>>> I'd like to pick up this thread started on 2019-04-11
> >>>>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
> >>>>>> Modulo all the other suggestions in this thread, would my proposal of
> >>>>>> being able to disable forked processing via an option or an
> >>>>>> environment variable make sense?
> >>>>>
> >>>>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
> >>>>>
> >>>>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
> >>>>>
> >>>>> Tomas
> >>>>>
> >>>>>> I've prototyped a working patch that
> >>>>>> works like:
> >>>>>>> options(fork.allowed = FALSE)
> >>>>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
> >>>>>> [1] 14058 14058
> >>>>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
> >>>>>> [1] 14058 14058
> >>>>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
> >>>>>> [1] 14058.1 14058.2
> >>>>>>> f <- parallel::mcparallel(Sys.getpid())
> >>>>>> Error in allowFork(assert = TRUE) :
> >>>>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>>>> environment variable ?R_FORK_ALLOWED?
> >>>>>>> cl <- parallel::makeForkCluster(1L)
> >>>>>> Error in allowFork(assert = TRUE) :
> >>>>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>>>> environment variable ?R_FORK_ALLOWED?
> >>>>>> The patch is:
> >>>>>> Index: src/library/parallel/R/unix/forkCluster.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
> >>>>>> @@ -30,6 +30,7 @@
> >>>>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
> >>>>>> {
> >>>>>> +    allowFork(assert = TRUE)
> >>>>>>   options <- addClusterOptions(options, list(...))
> >>>>>>   outfile <- getClusterOption("outfile", options)
> >>>>>>   port <- getClusterOption("port", options)
> >>>>>> Index: src/library/parallel/R/unix/mclapply.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
> >>>>>> @@ -28,7 +28,7 @@
> >>>>>>       stop("'mc.cores' must be >= 1")
> >>>>>>   .check_ncores(cores)
> >>>>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
> >>>>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
> >>>>>>       return(lapply(X = X, FUN = FUN, ...))
> >>>>>>   ## Follow lapply
> >>>>>> Index: src/library/parallel/R/unix/mcparallel.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
> >>>>>> @@ -20,6 +20,7 @@
> >>>>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
> >>>>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
> >>>>>> {
> >>>>>> +    allowFork(assert = TRUE)
> >>>>>>   f <- mcfork(detached)
> >>>>>>   env <- parent.frame()
> >>>>>>   if (isTRUE(mc.set.seed)) mc.advance.stream()
> >>>>>> Index: src/library/parallel/R/unix/pvec.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
> >>>>>> @@ -25,7 +25,7 @@
> >>>>>>   cores <- as.integer(mc.cores)
> >>>>>>   if(cores < 1L) stop("'mc.cores' must be >= 1")
> >>>>>> -    if(cores == 1L) return(FUN(v, ...))
> >>>>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
> >>>>>>   .check_ncores(cores)
> >>>>>>   if(mc.set.seed) mc.reset.stream()
> >>>>>> with a new file src/library/parallel/R/unix/allowFork.R:
> >>>>>> allowFork <- function(assert = FALSE) {
> >>>>>>  value <- Sys.getenv("R_FORK_ALLOWED")
> >>>>>>  if (nzchar(value)) {
> >>>>>>      value <- switch(value,
> >>>>>>         "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
> >>>>>>         "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
> >>>>>>          stop(gettextf("invalid environment variable value: %s==%s",
> >>>>>>         "R_FORK_ALLOWED", value)))
> >>>>>> value <- as.logical(value)
> >>>>>>  } else {
> >>>>>>      value <- TRUE
> >>>>>>  }
> >>>>>>  value <- getOption("fork.allowed", value)
> >>>>>>  if (is.na(value)) {
> >>>>>>      stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
> >>>>>>  }
> >>>>>>  if (assert && !value) {
> >>>>>>    stop(gettextf("Forked processing is not allowed per option %s or
> >>>>>> environment variable %s", sQuote("fork.allowed"),
> >>>>>> sQuote("R_FORK_ALLOWED")))
> >>>>>>  }
> >>>>>>  value
> >>>>>> }
> >>>>>> /Henrik
> >>>>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
> >>>>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> >>>>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >>>>>>>>>>> I think it's worth saying that mclapply() works as documented
> >>>>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> >>>>>>>>>> overcommitment, and that this means that it may work nicely or fail
> >>>>>>>>>> spectacularly depending on whether, e.g., you operate on a long
> >>>>>>>>>> vector.
> >>>>>>>>> R cannot possibly replicate documentation of the underlying operating
> >>>>>>>>> systems. It clearly says that fork() is used and readers who may not
> >>>>>>>>> know what fork() is need to learn it from external sources.
> >>>>>>>>> Copy-on-write is an elementary property of fork().
> >>>>>>>> Just to be precise, copy-on-write is an optimization widely deployed
> >>>>>>>> in most modern *nixes, particularly for the architectures in which R
> >>>>>>>> usually runs. But it is not an elementary property; it is not even
> >>>>>>>> possible without an MMU.
> >>>>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
> >>>>>>> Not relevant today, and certainly not for systems that run R, but indeed
> >>>>>>> people interested in OS internals can look elsewhere for more precise
> >>>>>>> information.
> >>>>>>> Tomas
> >>>>>
> >>>>> ______________________________________________
> >>>>> R-devel at r-project.org mailing list
> >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>


From |uc@r @end|ng |rom |edor@project@org  Sun Jan 12 16:03:06 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Sun, 12 Jan 2020 16:03:06 +0100
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAFDcVCRg7Ygr1F+=fgaHq2NaJsM5RsUTLUsNdC3=6x=agigJ1Q@mail.gmail.com>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CAFDcVCR-aMss6QNrscaYgVfYANYkznFTxRdqxUVeu51qTFTnDg@mail.gmail.com>
 <EA77CEE0-1018-4667-856D-1F3C98D015BB@R-project.org>
 <CAFDcVCRg7Ygr1F+=fgaHq2NaJsM5RsUTLUsNdC3=6x=agigJ1Q@mail.gmail.com>
Message-ID: <CALEXWq2NvtwHFMhbCV5y4d-aG-M25V7aoD_CKJyfGtYn5jDZ-w@mail.gmail.com>

On Sun, 12 Jan 2020 at 00:49, Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> [snip]
>
> A final plead: Adding an option to disable forking, at least in the
> 'parallel' package only, will spare people (end users, developers,
> sysadms, ...) many many hours of troubleshooting and eventually trying
> to find workarounds. Those hours adds up quickly given the number of R
> users we have out there.  We have more important things to spend our
> time on.  I can easily count days wasted due to troubleshooting and
> helping others remotely on problems related to instability of forked
> processing. Being able to disable it, would have shortcut this quite a
> bit.

+1 to such an option. I don't see how this could be implemented in
another package. One could do something like

stop_on_fork <- inline::cfunction(
  body='pthread_atfork(stop, NULL, NULL);',
  includes='#include <pthread.h>', convention=".C",
  otherdefs='void stop() { Rf_error("Fork disabled"); }')
stop_on_fork()
parallel::mclapply(1:2, force)

which works nice in a standalone R session, but freezes RStudio.
Another workaround would be

unlockBinding("mclapply", getNamespace("parallel"))
assignInNamespace("mclapply", function(...) stop("Fork disabled"), "parallel")
parallel::mclapply(1:2, force)

(plus several more bindings to cover all the cases), but that's not
allowed, and shouldn't be allowed, on CRAN.

I?aki


From therne@u @end|ng |rom m@yo@edu  Mon Jan 13 17:02:06 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 13 Jan 2020 10:02:06 -0600
Subject: [Rd] as-cran issue
Message-ID: <28fddd$d2evua@ironport10.mayo.edu>

Where can I find out (and replicate) what options as-cran turns on?

The issue: the following lines generate an error in R CMD check --as-cran? for coxme.? But 
there is no error without as-cran nor is there one when I run the code in a terminal window.

ismat <- function(x)? inherits(x, "matrix") || inherits(x, "bdsmatrix") || inherits(x, 
"Matrix")
if (ismat(kmat)? ) ....

(The second line is repeated multiple times for multiple arguments.? The ismat function is 
defined simply to save typing.)

The check log contains multiple instances of the lines below:

< Warning message:
< In if (ismat(kmat)) { :
<?? the condition has length > 1 and only the first element will be used

I don't see how the error could arise, but if I know what as-cran is doing perhaps I can 
replicate it.

 >sessionInfo()
R Under development (unstable) (2020-01-13 r77659)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:?? /usr/local/src/R-devel/lib/libRblas.so
LAPACK: /usr/local/src/R-devel/lib/libRlapack.so

locale:
 ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
 ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=C
 ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
 ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
 ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats???? graphics? grDevices utils???? datasets? methods base

loaded via a namespace (and not attached):
[1] compiler_4.0.0 tools_4.0.0
 >



	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Mon Jan 13 17:22:15 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 13 Jan 2020 10:22:15 -0600
Subject: [Rd] as-cran issue
In-Reply-To: <28fddd$d2evua@ironport10.mayo.edu>
References: <28fddd$d2evua@ironport10.mayo.edu>
Message-ID: <24092.39223.677206.772099@rob.eddelbuettel.com>


On 13 January 2020 at 10:02, Therneau, Terry M., Ph.D. via R-devel wrote:
| Where can I find out (and replicate) what options as-cran turns on?

See the file src/library/tools/R/check.R in the R sources, and grep for
as_cran which is the internal variable controlled by the --as-cran option

[...]

| The check log contains multiple instances of the lines below:
| 
| < Warning message:
| < In if (ismat(kmat)) { :
| <?? the condition has length > 1 and only the first element will be used
| 
| I don't see how the error could arise, but if I know what as-cran is doing perhaps I can 
| replicate it.

This was widely discussed on this list and should also be in the NEWS file.

The change is about what the message says: the if () tests a scalar logical,
it appears that ismat(kmat) returns more than a scalar.

There has always been an opt-in for this to error -- cf many messages by Henrik
over the years as he tried to convince us all to use it more.


Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From therne@u @end|ng |rom m@yo@edu  Mon Jan 13 17:28:32 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 13 Jan 2020 10:28:32 -0600
Subject: [Rd] Error in R CMD check --as-cran ?
Message-ID: <28fddd$d2fabs@ironport10.mayo.edu>

I've been fighting a CMD check error for coxme this morning.?? I thought I had it fixed, 
but instead I had forgotton --as-cran on my last test run.? So the version just submitted 
to CRAN has warning messages in the log.

I think it is an issue with CRAN.?? I've sent a message to R-devel asking for help.?? 
Since then, as a guess, I renamed my internal "ismat" function to something else and the 
error went away.

Here is the code block in coxme,? it is part of the "check user arguments for validity" 
block at the start of the function.?? Run coxme in a terminal and all is well, run R CMD 
check without as-cran and all is well, but with --as-cran the ismat function gives 
warnings.? Changing the name to something else fixes the issue.?? The function exists only 
to save some typing.? (No need to really read the block, just notice the multiple calls to 
ismat()

 ??? ismat <- function (x) {
 ??????? inherits(x, c("matrix", "bdsmatrix", "Matrix"), which=FALSE)
 ??? }
 ??? if (missing(varlist) || is.null(varlist)) {
 ??????? varlist <- vector('list', nrandom)
 ??????? for (i in 1:nrandom) varlist[[i]] <- coxmeFull() #default
 ??? }
 ??? else {
 ??????? if (is.function(varlist)) varlist <- varlist()
 ??????? if (inherits(varlist, 'coxmevar')) varlist <- list(varlist)
 ??????? else if (ismat(varlist))
 ??????????? varlist <- list(coxmeMlist(list(varlist)))
 ??????? else {
 ??????????? if (!is.list(varlist)) stop("Invalid varlist argument")
 ??????????? if (all(sapply(varlist, ismat))) {
 ??????????????? # A list of matrices
 ??????????????? if (nrandom >1)
 ??????????????????? stop(paste("An unlabeled list of matrices is",
 ?????????????????????????????? "ambiguous when there are multiple random terms"))
 ??????????????? else varlist <- list(coxmeMlist(varlist))
 ??????????? }
 ??????????? else {? #the user gave me a list, not all matrices
 ??????????????? for (i in 1:length(varlist)) {
 ??????????????????? if (is.function(varlist[[i]]))
 ??????????????????????? varlist[[i]] <-varlist[[i]]()
 ??????????????????? if (ismat(varlist[[i]]))
 ??????????????????????? varlist[[i]] <- coxmeMlist(list(varlist[[i]]))
 ??????????????????? if (class(varlist[[i]]) != 'coxmevar') {
 ??????????????????????? if (is.list(varlist[[i]])) {
 ??????????????????????????? if (all(sapply(varlist[[i]], ismat)))
 ??????????????????????????????? varlist[[i]] <- coxmeMlist(varlist[[i]])
 ??????????????????????????? else stop("Invalid varlist element")
 ??????????????????????? }
 ??????????????????????? else stop("Invalid varlist element")
 ??????????????????? }
 ??????????????? }
 ??????????? }
 ??????? }
 ??????? while(length(varlist) < nrandom) varlist <- c(varlist, list(coxmeFull()))
 ??? }


	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Mon Jan 13 17:46:18 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 13 Jan 2020 10:46:18 -0600
Subject: [Rd] as-cran issue
In-Reply-To: <24092.39223.677206.772099@rob.eddelbuettel.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
Message-ID: <28fddd$d2fh9r@ironport10.mayo.edu>

Thanks for the feedback Dirk.   I sent my follow-up before I saw it.

Looking at the source code, it appears that there is no options() call to turn this on. 
Nor does "R --help" reveal a command line option.
How then does a user turn this on outside of the R CMD check envirionment, so as to chase 
things like this down?

The fact that 1. renaming my function makes the error go away, 2. my function is just a 
wrapper to inherits(), and 3. its a new error in code that hasn't changed, all point me 
towards some oddity with the check function.

Terry


On 1/13/20 10:22 AM, Dirk Eddelbuettel wrote:
> 
> On 13 January 2020 at 10:02, Therneau, Terry M., Ph.D. via R-devel wrote:
> | Where can I find out (and replicate) what options as-cran turns on?
> 
> See the file src/library/tools/R/check.R in the R sources, and grep for
> as_cran which is the internal variable controlled by the --as-cran option
> 
> [...]
> 
> | The check log contains multiple instances of the lines below:
> |
> | < Warning message:
> | < In if (ismat(kmat)) { :
> | <?? the condition has length > 1 and only the first element will be used
> |
> | I don't see how the error could arise, but if I know what as-cran is doing perhaps I can
> | replicate it.
> 
> This was widely discussed on this list and should also be in the NEWS file.
> 
> The change is about what the message says: the if () tests a scalar logical,
> it appears that ismat(kmat) returns more than a scalar.
> 
> There has always been an opt-in for this to error -- cf many messages by Henrik
> over the years as he tried to convince us all to use it more.
> 
> 
> Dirk
>


From bbo|ker @end|ng |rom gm@||@com  Mon Jan 13 17:49:09 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 13 Jan 2020 11:49:09 -0500
Subject: [Rd] as-cran issue
In-Reply-To: <28fddd$d2fh9r@ironport10.mayo.edu>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
Message-ID: <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>

  From R NEWS (changes in 3.6.0)

Experimentally, setting environment variable _R_CHECK_LENGTH_1_LOGIC2_
will lead to warnings (or errors if the variable is set to a ?true?
value) when && or || encounter and use arguments of length more than one.

On 2020-01-13 11:46 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> Thanks for the feedback Dirk.?? I sent my follow-up before I saw it.
> 
> Looking at the source code, it appears that there is no options() call
> to turn this on. Nor does "R --help" reveal a command line option.
> How then does a user turn this on outside of the R CMD check
> envirionment, so as to chase things like this down?
> 
> The fact that 1. renaming my function makes the error go away, 2. my
> function is just a wrapper to inherits(), and 3. its a new error in code
> that hasn't changed, all point me towards some oddity with the check
> function.
> 
> Terry
> 
> 
> On 1/13/20 10:22 AM, Dirk Eddelbuettel wrote:
>>
>> On 13 January 2020 at 10:02, Therneau, Terry M., Ph.D. via R-devel wrote:
>> | Where can I find out (and replicate) what options as-cran turns on?
>>
>> See the file src/library/tools/R/check.R in the R sources, and grep for
>> as_cran which is the internal variable controlled by the --as-cran option
>>
>> [...]
>>
>> | The check log contains multiple instances of the lines below:
>> |
>> | < Warning message:
>> | < In if (ismat(kmat)) { :
>> | <?? the condition has length > 1 and only the first element will be
>> used
>> |
>> | I don't see how the error could arise, but if I know what as-cran is
>> doing perhaps I can
>> | replicate it.
>>
>> This was widely discussed on this list and should also be in the NEWS
>> file.
>>
>> The change is about what the message says: the if () tests a scalar
>> logical,
>> it appears that ismat(kmat) returns more than a scalar.
>>
>> There has always been an opt-in for this to error -- cf many messages
>> by Henrik
>> over the years as he tried to convince us all to use it more.
>>
>>
>> Dirk
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Jan 13 18:02:08 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 13 Jan 2020 12:02:08 -0500
Subject: [Rd] as-cran issue
In-Reply-To: <28fddd$d2evua@ironport10.mayo.edu>
References: <28fddd$d2evua@ironport10.mayo.edu>
Message-ID: <4d4df998-9a1c-ce8b-7abf-7c4bc476165f@gmail.com>

On 13/01/2020 11:02 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> Where can I find out (and replicate) what options as-cran turns on?
> 
> The issue: the following lines generate an error in R CMD check --as-cran? for coxme.? But
> there is no error without as-cran nor is there one when I run the code in a terminal window.
> 
> ismat <- function(x)? inherits(x, "matrix") || inherits(x, "bdsmatrix") || inherits(x,
> "Matrix")
> if (ismat(kmat)? ) ....
> 
> (The second line is repeated multiple times for multiple arguments.? The ismat function is
> defined simply to save typing.)
> 
> The check log contains multiple instances of the lines below:
> 
> < Warning message:
> < In if (ismat(kmat)) { :
> <?? the condition has length > 1 and only the first element will be used
> 
> I don't see how the error could arise, but if I know what as-cran is doing perhaps I can
> replicate it.
> 
>   >sessionInfo()
> R Under development (unstable) (2020-01-13 r77659)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 18.04.3 LTS
> 
> Matrix products: default
> BLAS:?? /usr/local/src/R-devel/lib/libRblas.so
> LAPACK: /usr/local/src/R-devel/lib/libRlapack.so
> 
> locale:
>   ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
>   ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=C
>   ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
>   ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
>   ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> 
> attached base packages:
> [1] stats???? graphics? grDevices utils???? datasets? methods base
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.0.0 tools_4.0.0

You have ismat() defined in two places in the package.  In the 
definition in coxme.R, you've got a typo:

     ismat <- function (x) {
         inherits(x, "matrix") || inherits(x, "bdsmatrix") | inherits(x, 
"Matrix")
     }

Notice the "|" instead of "||".  I can't see how this would lead to the 
issue you saw, but it should be fixed.

It's not easy to say what --as-cran does, other than to look at the 
function that implements R CMD check.  That function is the huge 
tools:::.check_packages.  You can run it in an R session using

   options(warn = 2, error = recover)
   tools:::.check_packages(c("--as-cran", "coxme_2.2-14.tar.gz"))

When I do that I get a different error report; it reports this test instead:

    if(class(varlist) == "coxmevar")

That appears in a number of places in the coxme source, and clearly 
needs to be updated to use inherits().

Duncan Murdoch


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jan 13 18:24:17 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 13 Jan 2020 18:24:17 +0100
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
Message-ID: <24092.42945.719678.758685@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Mon, 13 Jan 2020 11:49:09 -0500 writes:

    > From R NEWS (changes in 3.6.0)
    > Experimentally, setting environment variable _R_CHECK_LENGTH_1_LOGIC2_
    > will lead to warnings (or errors if the variable is set to a ?true?
    > value) when && or || encounter and use arguments of length more than one.

Indeed,  thank you, Ben.

Note (Dirk) this is not just something 
  "by Henrik (..) as he tried to convince us all to use it more"

I've activated this (and the other
  _R_CHECK_LENGTH_1_CONDITION_ ! )
for years (maybe not many years, it just feels like it), and *EVERY TIME*
it triggers, it's been revealing a programmeR's thinko / bug / ..,
something where the code was clearly suboptimal and should've been improved.
(Unfortunately, the bug has often been in packages, and sometimes I had to
 disable the setting when I wanted that "buggy" package to work ..)

Occasionally being puristic, let me state this:
   __________________________________________________________________
  /------------------------------------------------------------------\
  |                                                                  | 
  | Every careful R programmer should use (something like "true",    | 
  | "verbose", or even package=... )                                 | 
  |                                                                  | 
  | export _R_CHECK_LENGTH_1_CONDITION_=true                         | 
  | export _R_CHECK_LENGTH_1_LOGIC2_=verbose                         | 
  |                                                                  | 
  | in her/his ~/.profile equivalent (*)                             | 
  \__________________________________________________________________/


*) well assuming a careful R programmer would never develop on
   Windows anyway (where you need different means to set such
   environment variables). 



    > On 2020-01-13 11:46 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
    >> Thanks for the feedback Dirk.?? I sent my follow-up before I saw it.
    >> 
    >> Looking at the source code, it appears that there is no options() call
    >> to turn this on. Nor does "R --help" reveal a command line option.
    >> How then does a user turn this on outside of the R CMD check
    >> envirionment, so as to chase things like this down?
    >> 
    >> The fact that 1. renaming my function makes the error go away, 2. my
    >> function is just a wrapper to inherits(), and 3. its a new error in code
    >> that hasn't changed, all point me towards some oddity with the check
    >> function.
    >> 
    >> Terry
    >> 
    >> 
    >> On 1/13/20 10:22 AM, Dirk Eddelbuettel wrote:
    >>> 
    >>> On 13 January 2020 at 10:02, Therneau, Terry M., Ph.D. via R-devel wrote:
    >>> | Where can I find out (and replicate) what options as-cran turns on?
    >>> 
    >>> See the file src/library/tools/R/check.R in the R sources, and grep for
    >>> as_cran which is the internal variable controlled by the --as-cran option
    >>> 
    >>> [...]
    >>> 
    >>> | The check log contains multiple instances of the lines below:
    >>> |
    >>> | < Warning message:
    >>> | < In if (ismat(kmat)) { :
    >>> | <?? the condition has length > 1 and only the first element will be
    >>> used
    >>> |
    >>> | I don't see how the error could arise, but if I know what as-cran is
    >>> doing perhaps I can
    >>> | replicate it.
    >>> 
    >>> This was widely discussed on this list and should also be in the NEWS
    >>> file.
    >>> 
    >>> The change is about what the message says: the if () tests a scalar
    >>> logical,
    >>> it appears that ismat(kmat) returns more than a scalar.
    >>> 
    >>> There has always been an opt-in for this to error -- cf many messages
    >>> by Henrik
    >>> over the years as he tried to convince us all to use it more.
    >>> 
    >>> 
    >>> Dirk
    >>> 
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Mon Jan 13 20:38:12 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Mon, 13 Jan 2020 14:38:12 -0500
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <24092.42945.719678.758685@stat.math.ethz.ch>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
 <24092.42945.719678.758685@stat.math.ethz.ch>
Message-ID: <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>

Those of us stuck on Windows but who attempt to develop properly are
wounded to the quick, sir!

:)

Avi

On Mon, Jan 13, 2020 at 12:24 PM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> Ben Bolker
> >>>>>     on Mon, 13 Jan 2020 11:49:09 -0500 writes:
>
>     > From R NEWS (changes in 3.6.0)
>     > Experimentally, setting environment variable
> _R_CHECK_LENGTH_1_LOGIC2_
>     > will lead to warnings (or errors if the variable is set to a ?true?
>     > value) when && or || encounter and use arguments of length more than
> one.
>
> Indeed,  thank you, Ben.
>
> Note (Dirk) this is not just something
>   "by Henrik (..) as he tried to convince us all to use it more"
>
> I've activated this (and the other
>   _R_CHECK_LENGTH_1_CONDITION_ ! )
> for years (maybe not many years, it just feels like it), and *EVERY TIME*
> it triggers, it's been revealing a programmeR's thinko / bug / ..,
> something where the code was clearly suboptimal and should've been
> improved.
> (Unfortunately, the bug has often been in packages, and sometimes I had to
>  disable the setting when I wanted that "buggy" package to work ..)
>
> Occasionally being puristic, let me state this:
>    __________________________________________________________________
>   /------------------------------------------------------------------\
>   |                                                                  |
>   | Every careful R programmer should use (something like "true",    |
>   | "verbose", or even package=... )                                 |
>   |                                                                  |
>   | export _R_CHECK_LENGTH_1_CONDITION_=true                         |
>   | export _R_CHECK_LENGTH_1_LOGIC2_=verbose                         |
>   |                                                                  |
>   | in her/his ~/.profile equivalent (*)                             |
>   \__________________________________________________________________/
>
>
> *) well assuming a careful R programmer would never develop on
>    Windows anyway (where you need different means to set such
>    environment variables).
>
>
>
>     > On 2020-01-13 11:46 a.m., Therneau, Terry M., Ph.D. via R-devel
> wrote:
>     >> Thanks for the feedback Dirk.   I sent my follow-up before I saw it.
>     >>
>     >> Looking at the source code, it appears that there is no options()
> call
>     >> to turn this on. Nor does "R --help" reveal a command line option.
>     >> How then does a user turn this on outside of the R CMD check
>     >> envirionment, so as to chase things like this down?
>     >>
>     >> The fact that 1. renaming my function makes the error go away, 2. my
>     >> function is just a wrapper to inherits(), and 3. its a new error in
> code
>     >> that hasn't changed, all point me towards some oddity with the check
>     >> function.
>     >>
>     >> Terry
>     >>
>     >>
>     >> On 1/13/20 10:22 AM, Dirk Eddelbuettel wrote:
>     >>>
>     >>> On 13 January 2020 at 10:02, Therneau, Terry M., Ph.D. via R-devel
> wrote:
>     >>> | Where can I find out (and replicate) what options as-cran turns
> on?
>     >>>
>     >>> See the file src/library/tools/R/check.R in the R sources, and
> grep for
>     >>> as_cran which is the internal variable controlled by the --as-cran
> option
>     >>>
>     >>> [...]
>     >>>
>     >>> | The check log contains multiple instances of the lines below:
>     >>> |
>     >>> | < Warning message:
>     >>> | < In if (ismat(kmat)) { :
>     >>> | <   the condition has length > 1 and only the first element will
> be
>     >>> used
>     >>> |
>     >>> | I don't see how the error could arise, but if I know what
> as-cran is
>     >>> doing perhaps I can
>     >>> | replicate it.
>     >>>
>     >>> This was widely discussed on this list and should also be in the
> NEWS
>     >>> file.
>     >>>
>     >>> The change is about what the message says: the if () tests a scalar
>     >>> logical,
>     >>> it appears that ismat(kmat) returns more than a scalar.
>     >>>
>     >>> There has always been an opt-in for this to error -- cf many
> messages
>     >>> by Henrik
>     >>> over the years as he tried to convince us all to use it more.
>     >>>
>     >>>
>     >>> Dirk
>     >>>
>     >>
>     >> ______________________________________________
>     >> R-devel at r-project.org mailing list
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Mon Jan 13 21:51:19 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 13 Jan 2020 14:51:19 -0600
Subject: [Rd] as-cran issue, SOLVED
In-Reply-To: <4d4df998-9a1c-ce8b-7abf-7c4bc476165f@gmail.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <4d4df998-9a1c-ce8b-7abf-7c4bc476165f@gmail.com>
Message-ID: <28fddd$d2i78g@ironport10.mayo.edu>

Thank you to all who replied with helpful suggestions.?? I had to run off to meetings and 
talks for a bit so am now processing it all.

1. It turns out that the issue was not with coxme, but with bsdmatrix, a package that 
coxme calls.? It just happens to have a function ismat() with the same general purpose and 
some similar variable names, which led me down the rabbit hole.?? That package contained a 
"class(x) == " flaw, now fixed.?? (The fact that bdsmatrix has been stable and unchanged 
for nearly a decade helped with the deception.)

2. As pointed out by Duncan and Kurt, the coxme function also had a class(x)== flaw.? None 
of my test cases triggered this, but since 'x' is an argument that can be supplied by a 
user, it certainly would have happened in package use.? Good catch.

3. Dirk gave good input about the flags in R CMD check and how to find them.?? One more 
line in the "Writing R Extensions" manual would have been helpful, namely that many of the 
options are NOT available in the options() command nor as arguments to R.??? As near as I 
can tell, there is no way to turn on these logic checks within a standard R session.?? A 
desire to do this is where I started: I would have set options(warn=2, error=recover) and 
found the actual offender in a few minutes; and never had to bother all you worthy readers.

4. I agree completely with Martin that errors like this should not be ignored.? In fact, 
except for? "variable may be used before initialized" messages from the C compiler, I have 
become grateful for EVERY complaint that comes out R CMD check.?? Notice the verb "have 
become" -- I did not start out so enthusiastic.

Again, thanks for the help.

Terry T.




	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Mon Jan 13 22:18:57 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 13 Jan 2020 15:18:57 -0600
Subject: [Rd] as-cran issue, SOLVED
In-Reply-To: <28fddd$d2i78e@ironport10.mayo.edu>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <4d4df998-9a1c-ce8b-7abf-7c4bc476165f@gmail.com>
 <28fddd$d2i78e@ironport10.mayo.edu>
Message-ID: <24092.57025.339926.171914@rob.eddelbuettel.com>


On 13 January 2020 at 14:51, Therneau, Terry M., Ph.D. wrote:
| 3. Dirk gave good input about the flags in R CMD check and how to find them.?? One more 
| line in the "Writing R Extensions" manual would have been helpful, namely that many of the 
| options are NOT available in the options() command nor as arguments to R.??? As near as I 
| can tell, there is no way to turn on these logic checks within a standard R session.?? A 

Section 8 of R Internals:

   8 Tools
   *******

   The behavior of 'R CMD check' can be controlled through a variety of
   command line arguments and environment variables.

   [...]


or online at

   https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Tools


Also, if I may, and as I may not have been clear enough earlier (as it
confused at least Martin): these "rolling" tightenings of "standards" and
tests are IMHO one the many rather clever "devices" R Core and CRAN use to
keep improving the quality of the code we all produce.  It's a good thing.

That said, and just like Terry, I have also searched many times for these
variables, and part of me thinks that it a crime that the material is spread
over (at least) three different manuals but _c'est la vie_. Until we get a
dedicated volunteer editor, or, deity forbid we decide to spend some
(collective) money on professional documentation.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 14 09:20:27 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 14 Jan 2020 09:20:27 +0100
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
 <24092.42945.719678.758685@stat.math.ethz.ch>
 <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>
Message-ID: <24093.31179.751562.718817@stat.math.ethz.ch>

>>>>> Avraham Adler 
>>>>>     on Mon, 13 Jan 2020 14:38:12 -0500 writes:

    > Those of us stuck on Windows but who attempt to develop properly are
    > wounded to the quick, sir!

    > :)

    > Avi

Indeed, you had a ' :) ' , but others have perceived this as an insult.
I'm really really sorry for that and do want to apologize to all
of you affected.

Indeed, on one hand, not everybody has a choice, and even then,
I'm (and 100s of 1000s of others) are very grateful to those
among you who develop and test R (and other free software, say,
Emacs, or Rstudio) on Windows. 

I do want to entice people to have a long look beyond closed
source OS into the world of Free Software where not only R is
FOSS (Free and Open Source Software) but (all / almost) all the
tools you use are of that same spirit.

Best,
Martin



    > On Mon, Jan 13, 2020 at 12:24 PM Martin Maechler <maechler at stat.math.ethz.ch>
    > wrote:

    >> >>>>> Ben Bolker
    >> >>>>>     on Mon, 13 Jan 2020 11:49:09 -0500 writes:
    >> 
    >> > From R NEWS (changes in 3.6.0)
    >> > Experimentally, setting environment variable
    >> _R_CHECK_LENGTH_1_LOGIC2_
    >> > will lead to warnings (or errors if the variable is set to a ?true?
    >> > value) when && or || encounter and use arguments of length more than
    >> one.
    >> 
    >> Indeed,  thank you, Ben.
    >> 
    >> Note (Dirk) this is not just something
    >> "by Henrik (..) as he tried to convince us all to use it more"
    >> 
    >> I've activated this (and the other
    >> _R_CHECK_LENGTH_1_CONDITION_ ! )
    >> for years (maybe not many years, it just feels like it), and *EVERY TIME*
    >> it triggers, it's been revealing a programmeR's thinko / bug / ..,
    >> something where the code was clearly suboptimal and should've been
    >> improved.
    >> (Unfortunately, the bug has often been in packages, and sometimes I had to
    >> disable the setting when I wanted that "buggy" package to work ..)
    >> 
    >> Occasionally being puristic, let me state this:
    >> __________________________________________________________________
    >> /------------------------------------------------------------------\
    >> |                                                                  |
    >> | Every careful R programmer should use (something like "true",    |
    >> | "verbose", or even package=... )                                 |
    >> |                                                                  |
    >> | export _R_CHECK_LENGTH_1_CONDITION_=true                         |
    >> | export _R_CHECK_LENGTH_1_LOGIC2_=verbose                         |
    >> |                                                                  |
    >> | in her/his ~/.profile equivalent (*)                             |
    >> \__________________________________________________________________/
    >> 
    >> 
    >> *) well assuming a careful R programmer would never develop on
    >> Windows anyway (where you need different means to set such
    >> environment variables).
    >> 
    >> 
    >> 
    >> > On 2020-01-13 11:46 a.m., Therneau, Terry M., Ph.D. via R-devel
    >> wrote:
    >> >> Thanks for the feedback Dirk.   I sent my follow-up before I saw it.
    >> >>
    >> >> Looking at the source code, it appears that there is no options()
    >> call
    >> >> to turn this on. Nor does "R --help" reveal a command line option.
    >> >> How then does a user turn this on outside of the R CMD check
    >> >> envirionment, so as to chase things like this down?
    >> >>
    >> >> The fact that 1. renaming my function makes the error go away, 2. my
    >> >> function is just a wrapper to inherits(), and 3. its a new error in
    >> code
    >> >> that hasn't changed, all point me towards some oddity with the check
    >> >> function.
    >> >>
    >> >> Terry
    >> >>
    >> >>
    >> >> On 1/13/20 10:22 AM, Dirk Eddelbuettel wrote:
    >> >>>
    >> >>> On 13 January 2020 at 10:02, Therneau, Terry M., Ph.D. via R-devel
    >> wrote:
    >> >>> | Where can I find out (and replicate) what options as-cran turns
    >> on?
    >> >>>
    >> >>> See the file src/library/tools/R/check.R in the R sources, and
    >> grep for
    >> >>> as_cran which is the internal variable controlled by the --as-cran
    >> option
    >> >>>
    >> >>> [...]
    >> >>>
    >> >>> | The check log contains multiple instances of the lines below:
    >> >>> |
    >> >>> | < Warning message:
    >> >>> | < In if (ismat(kmat)) { :
    >> >>> | <   the condition has length > 1 and only the first element will
    >> be
    >> >>> used
    >> >>> |
    >> >>> | I don't see how the error could arise, but if I know what
    >> as-cran is
    >> >>> doing perhaps I can
    >> >>> | replicate it.
    >> >>>
    >> >>> This was widely discussed on this list and should also be in the
    >> NEWS
    >> >>> file.
    >> >>>
    >> >>> The change is about what the message says: the if () tests a scalar
    >> >>> logical,
    >> >>> it appears that ismat(kmat) returns more than a scalar.
    >> >>>
    >> >>> There has always been an opt-in for this to error -- cf many
    >> messages
    >> >>> by Henrik
    >> >>> over the years as he tried to convince us all to use it more.
    >> >>>
    >> >>>
    >> >>> Dirk
    >> >>>
    >> >>
    >> >> ______________________________________________
    >> >> R-devel at r-project.org mailing list
    >> >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> > ______________________________________________
    >> > R-devel at r-project.org mailing list
    >> > https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    > -- 
    > Sent from Gmail Mobile

    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Tue Jan 14 11:00:46 2020
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Tue, 14 Jan 2020 11:00:46 +0100
Subject: [Rd] possible bug in win R-devel in check/test environment
Message-ID: <71dd9543-bd8c-214f-9655-f011c889b7c1@insa-toulouse.fr>

Hi,

During my recent r2sundials development, I've came across a strange test 
failing during 'R CMD check' exclusively on win R-devel which I could 
reproduce with a minimal example that I present here.
The toy packages testarma1 [1] and testarma2 [2] are minimal 
modifications of a skeleton package produced by 
RcppArmadillo.package.skeleton().
They are almost identical. The first one fails to passe its tests on win 
R-devel [3] while the second one is OK [4]. The reason of test failing 
in testarma1 boils down to not finding a package during tests (here 
RcppArmadillo) although it is well present in LinkingTo field of the 
DESCRIPTION file (the mechanism of the error is detailed in [5]). To 
make the tests pass, I had to add RcppArmadillo and r2sundials to 
'Suggests:' field too (as can be seen in testarma2)

In my understanding, the presence of a package name in the LinkingTo 
field should be sufficient for finding it during the test phase. 
Instead, one have to add it to 'Suggests:' field too.

Am I wrong or this behavior is unexpected?

Best,
Serguei.

[1] https://github.com/sgsokol/testarma1 
<https://github.com/sgsokol/testarma2>
[2] https://github.com/sgsokol/testarma2
[3] https://win-builder.r-project.org/v0nBoFleT48y/00check.log
[4] https://win-builder.r-project.org/TMKbnEBncFNc/00check.log
[5] https://github.com/RcppCore/Rcpp/issues/1026

<https://github.com/sgsokol/testarma2>


From @|eg|r|ed@koe@t|me|er @end|ng |rom gm@||@com  Tue Jan 14 11:46:03 2020
From: @|eg|r|ed@koe@t|me|er @end|ng |rom gm@||@com (=?iso-8859-1?Q?Siegfried_K=F6stlmeier?=)
Date: Tue, 14 Jan 2020 11:46:03 +0100
Subject: [Rd] CRAN check fails if website is unavailable on Fedora platforms
Message-ID: <02c301d5cac7$d19ce240$74d6a6c0$@gmail.com>

Hi all,

 

I maintain the package ?qrandom? which is based on a web API. In last time
the testthat tests failed because the website was down.
I implemented the following code in v1.2.2 to ensure that tests are only run
if the website is accessible and to avoid the CRAN checks to fail:

 

> library(testthat)
> library(qrandom)

 

> check_qrng <- function(){
>   tryCatch(
>     expr = {
>       req <- curl::curl_fetch_memory('https://qrng.anu.edu.au/index.php')
>       req$status_code
>     },
>     error = function(e){
>       -1
>     }
>   )
> }

 

> ## test package separated with filter due to limited Travis-CI build time
> ## HTTP status 200 indicates ?OK?
> if(curl::has_internet() & check_qrng() == 200){
>    test_check('qrandom', filter = "qrandom")
>    test_check('qrandom', filter = "qrandomunif")
>    test_check('qrandom', filter = "qrandomnorm")
>    test_check('qrandom', filter = "qUUID")
>    test_check('qrandom', filter = "qrandommaxint")
> }

 

I was informed that the check results
<https://cran.r-project.org/web/checks/check_results_qrandom.html>  had an
error status for both flavor r-devel-linux-x86_64-fedora-clang and
r-devel-linux-x86_64-fedora-gcc, while the other platforms showed the status
?OK?. Currently, the status is ?OK? for all updated package versions 1.2.2
because the website is available again.

 

What is it that the above code does not prevent the checks to be run if the
website is not available specifically on Fedora systems? May it be that curl
is platform dependent or are CRAN package checks run different here? I would
be pleased to avoid these check fails in future.

 

Best,
skoestlmeier


	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Tue Jan 14 15:45:30 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Tue, 14 Jan 2020 15:45:30 +0100
Subject: [Rd] 
 CRAN check fails if website is unavailable on Fedora platforms
In-Reply-To: <02c301d5cac7$d19ce240$74d6a6c0$@gmail.com>
References: <02c301d5cac7$d19ce240$74d6a6c0$@gmail.com>
Message-ID: <CALEXWq0VnrVqqwvUivSh9k=LtJ0OJuNsMaGgByAbWMt6XWdVEg@mail.gmail.com>

On Tue, 14 Jan 2020 at 15:06, Siegfried K?stlmeier
<siegfried.koestlmeier at gmail.com> wrote:
>
> Hi all,
>
> I maintain the package ?qrandom? which is based on a web API. In last time
> the testthat tests failed because the website was down.
> I implemented the following code in v1.2.2 to ensure that tests are only run
> if the website is accessible and to avoid the CRAN checks to fail:
>
> > library(testthat)
> > library(qrandom)
>
> > check_qrng <- function(){
> >   tryCatch(
> >     expr = {
> >       req <- curl::curl_fetch_memory('https://qrng.anu.edu.au/index.php')
> >       req$status_code
> >     },
> >     error = function(e){
> >       -1
> >     }
> >   )
> > }
>
> > ## test package separated with filter due to limited Travis-CI build time
> > ## HTTP status 200 indicates ?OK?
> > if(curl::has_internet() & check_qrng() == 200){
> >    test_check('qrandom', filter = "qrandom")
> >    test_check('qrandom', filter = "qrandomunif")
> >    test_check('qrandom', filter = "qrandomnorm")
> >    test_check('qrandom', filter = "qUUID")
> >    test_check('qrandom', filter = "qrandommaxint")
> > }
>
> I was informed that the check results
> <https://cran.r-project.org/web/checks/check_results_qrandom.html>  had an
> error status for both flavor r-devel-linux-x86_64-fedora-clang and
> r-devel-linux-x86_64-fedora-gcc, while the other platforms showed the status
> ?OK?. Currently, the status is ?OK? for all updated package versions 1.2.2
> because the website is available again.
>
> What is it that the above code does not prevent the checks to be run if the
> website is not available specifically on Fedora systems? May it be that curl
> is platform dependent or are CRAN package checks run different here? I would
> be pleased to avoid these check fails in future.

Since you use testthat, you can use skip_on_cran() to skip tests that
require an Internet connection. Yet it would be a better idea to mock
those tests on CRAN (see packages vcr, webmockr, httptest, and
probably others).

I?aki


From edd @end|ng |rom deb|@n@org  Tue Jan 14 15:59:00 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 14 Jan 2020 08:59:00 -0600
Subject: [Rd] possible bug in win R-devel in check/test environment
In-Reply-To: <71dd9543-bd8c-214f-9655-f011c889b7c1@insa-toulouse.fr>
References: <71dd9543-bd8c-214f-9655-f011c889b7c1@insa-toulouse.fr>
Message-ID: <24093.55092.383362.709454@rob.eddelbuettel.com>


Hi Serguei,

Nice analysis!

On 14 January 2020 at 11:00, Serguei Sokol wrote:
| During my recent r2sundials development, I've came across a strange test 
| failing during 'R CMD check' exclusively on win R-devel which I could 
| reproduce with a minimal example that I present here.
| The toy packages testarma1 [1] and testarma2 [2] are minimal 
| modifications of a skeleton package produced by 
| RcppArmadillo.package.skeleton().
| They are almost identical. The first one fails to passe its tests on win 
| R-devel [3] while the second one is OK [4]. The reason of test failing 
| in testarma1 boils down to not finding a package during tests (here 
| RcppArmadillo) although it is well present in LinkingTo field of the 
| DESCRIPTION file (the mechanism of the error is detailed in [5]). To 
| make the tests pass, I had to add RcppArmadillo and r2sundials to 
| 'Suggests:' field too (as can be seen in testarma2)
| 
| In my understanding, the presence of a package name in the LinkingTo 
| field should be sufficient for finding it during the test phase.

I thought so too. But thinking about it a little more it clears up a little.

A bit more context: One can be more fine-grained on Depends. And Debian does
that, and R sometimes followed Debian's model of declaring dependencies. One
element we are missing here is to distinguish between _build-time_ needs (we
call that Build-Depends: in Debian) and _run_time_ needs.  We currently only
have the latter as Depends:, which for example pains a million dplyr users on
Windows who have to download 120mb worth of our BH package because it is used
to _build_ the binary zipfile, but not thereafter.  That is a wart.

Now, _LinkingTo_ always implies build-dependecies or else it would croak at
that stage.

And I had assumed that this would cover all run-time but ...

| Instead, one have to add it to 'Suggests:' field too.

... tests are indeed treated differently and this may just be a different
code path.

If you have something in Suggests: and test for it, you should condition the
test. I have argued that part a few times but mostly to no avail so I too now
mostly give up and _unconditionally_ install Suggests to support tests when I
run bulk tests for reverse dependencies.  But it is still wrong.

So here the ball is in your court. Your tests for r2sundials should probably
condition on RcppArmadillo being present and skip tests requiring it if it is
not present.  Or, if you don't like that, make it an Imports: too.

Hope this helps.

Cheers, Dirk

| Am I wrong or this behavior is unexpected?
| 
| Best,
| Serguei.
| 
| [1] https://github.com/sgsokol/testarma1 
| <https://github.com/sgsokol/testarma2>
| [2] https://github.com/sgsokol/testarma2
| [3] https://win-builder.r-project.org/v0nBoFleT48y/00check.log
| [4] https://win-builder.r-project.org/TMKbnEBncFNc/00check.log
| [5] https://github.com/RcppCore/Rcpp/issues/1026
| 
| <https://github.com/sgsokol/testarma2>
| 
| ______________________________________________
| R-devel at r-project.org mailing list
| https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From pd@|gd @end|ng |rom gm@||@com  Tue Jan 14 16:07:44 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 14 Jan 2020 16:07:44 +0100
Subject: [Rd] [R] choose(n, k) as n approaches k
In-Reply-To: <A3522327-CF54-4960-A09F-D334C408BB84@pitt.edu>
References: <A3522327-CF54-4960-A09F-D334C408BB84@pitt.edu>
Message-ID: <65C7647D-9E6C-4D4A-B8F7-63EBA0320E09@gmail.com>

Yep, that looks wrong (probably want to continue discussion over on R-devel)

I think the culprit is here (in src/nmath/choose.c)
 
   if (k < k_small_max) {
        int j;
        if(n-k < k && n >= 0 && R_IS_INT(n)) k = n-k; /* <- Symmetry */
        if (k <  0) return 0.;
        if (k == 0) return 1.;
        /* else: k >= 1 */

if n is a near-integer, then k can become non-integer and negative. In your case, 

n == 4 - 1e-7
k == 4
n - k == -1e-7 < 4
n >= 0 
R_IS_INT(n) = TRUE (relative diff < 1e-7 is allowed)

so k gets set to

n - k == -1e-7

which is less than 0, so we return 0. However, as you point out, 1 would be more reasonable and in accordance with the limit as n -> 4, e.g.

> factorial(4 - 1e-10)/factorial(1e-10)/factorial(4) -1
[1] -9.289025e-11

I guess that the fix could be as simple as replacing n by R_forceint(n) in the k = n - k step.

-pd



> On 14 Jan 2020, at 00:33 , Wright, Erik Scott <ESWRIGHT at pitt.edu> wrote:
> 
> This struck me as incorrect:
> 
>> choose(3.999999, 4)
> [1] 0.9999979
>> choose(3.9999999, 4)
> [1] 0
>> choose(4, 4)
> [1] 1
>> choose(4.0000001, 4)
> [1] 4
>> choose(4.000001, 4)
> [1] 1.000002
> 
> Should base::choose(n, k) check whether n is within machine precision of k and return 1?
> 
> Thanks,
> Erik
> 
> ***
> sessionInfo()
> R version 3.6.0 beta (2019-04-15 r76395)
> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> Running under: macOS High Sierra 10.13.6
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Jan 14 16:21:13 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 14 Jan 2020 10:21:13 -0500
Subject: [Rd] [R] choose(n, k) as n approaches k
In-Reply-To: <65C7647D-9E6C-4D4A-B8F7-63EBA0320E09@gmail.com>
References: <A3522327-CF54-4960-A09F-D334C408BB84@pitt.edu>
 <65C7647D-9E6C-4D4A-B8F7-63EBA0320E09@gmail.com>
Message-ID: <ae3139e1-c728-83e5-0aa7-a17135b31df6@gmail.com>

On 14/01/2020 10:07 a.m., peter dalgaard wrote:
> Yep, that looks wrong (probably want to continue discussion over on R-devel)
> 
> I think the culprit is here (in src/nmath/choose.c)
>   
>     if (k < k_small_max) {
>          int j;
>          if(n-k < k && n >= 0 && R_IS_INT(n)) k = n-k; /* <- Symmetry */
>          if (k <  0) return 0.;
>          if (k == 0) return 1.;
>          /* else: k >= 1 */
> 
> if n is a near-integer, then k can become non-integer and negative. In your case,
> 
> n == 4 - 1e-7
> k == 4
> n - k == -1e-7 < 4
> n >= 0
> R_IS_INT(n) = TRUE (relative diff < 1e-7 is allowed)
> 
> so k gets set to
> 
> n - k == -1e-7
> 
> which is less than 0, so we return 0. However, as you point out, 1 would be more reasonable and in accordance with the limit as n -> 4, e.g.
> 
>> factorial(4 - 1e-10)/factorial(1e-10)/factorial(4) -1
> [1] -9.289025e-11
> 
> I guess that the fix could be as simple as replacing n by R_forceint(n) in the k = n - k step.

I think that would break symmetry:  you want choose(n, k) to equal 
choose(n, n-k) when n is very close to an integer.  So I'd suggest the 
replacement whenever R_IS_INT(n) is true.

Duncan Murdoch

> 
> -pd
> 
> 
> 
>> On 14 Jan 2020, at 00:33 , Wright, Erik Scott <ESWRIGHT at pitt.edu> wrote:
>>
>> This struck me as incorrect:
>>
>>> choose(3.999999, 4)
>> [1] 0.9999979
>>> choose(3.9999999, 4)
>> [1] 0
>>> choose(4, 4)
>> [1] 1
>>> choose(4.0000001, 4)
>> [1] 4
>>> choose(4.000001, 4)
>> [1] 1.000002
>>
>> Should base::choose(n, k) check whether n is within machine precision of k and return 1?
>>
>> Thanks,
>> Erik
>>
>> ***
>> sessionInfo()
>> R version 3.6.0 beta (2019-04-15 r76395)
>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>> Running under: macOS High Sierra 10.13.6
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>


From pd@|gd @end|ng |rom gm@||@com  Tue Jan 14 16:50:52 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 14 Jan 2020 16:50:52 +0100
Subject: [Rd] [R] choose(n, k) as n approaches k
In-Reply-To: <ae3139e1-c728-83e5-0aa7-a17135b31df6@gmail.com>
References: <A3522327-CF54-4960-A09F-D334C408BB84@pitt.edu>
 <65C7647D-9E6C-4D4A-B8F7-63EBA0320E09@gmail.com>
 <ae3139e1-c728-83e5-0aa7-a17135b31df6@gmail.com>
Message-ID: <6B40064A-8B62-4FC3-967D-3695F2E46EFA@gmail.com>



> On 14 Jan 2020, at 16:21 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> On 14/01/2020 10:07 a.m., peter dalgaard wrote:
>> Yep, that looks wrong (probably want to continue discussion over on R-devel)
>> I think the culprit is here (in src/nmath/choose.c)
>>      if (k < k_small_max) {
>>         int j;
>>         if(n-k < k && n >= 0 && R_IS_INT(n)) k = n-k; /* <- Symmetry */
>>         if (k <  0) return 0.;
>>         if (k == 0) return 1.;
>>         /* else: k >= 1 */
>> if n is a near-integer, then k can become non-integer and negative. In your case,
>> n == 4 - 1e-7
>> k == 4
>> n - k == -1e-7 < 4
>> n >= 0
>> R_IS_INT(n) = TRUE (relative diff < 1e-7 is allowed)
>> so k gets set to
>> n - k == -1e-7
>> which is less than 0, so we return 0. However, as you point out, 1 would be more reasonable and in accordance with the limit as n -> 4, e.g.
>>> factorial(4 - 1e-10)/factorial(1e-10)/factorial(4) -1
>> [1] -9.289025e-11
>> I guess that the fix could be as simple as replacing n by R_forceint(n) in the k = n - k step.
> 
> I think that would break symmetry:  you want choose(n, k) to equal choose(n, n-k) when n is very close to an integer.  So I'd suggest the replacement whenever R_IS_INT(n) is true.
> 

But choose() very deliberately ensures that k is integer, so choose(n, n-k) is ill-defined for non-integer n.

    double r, k0 = k;
    k = R_forceint(k);
...
    if (fabs(k - k0) > 1e-7)
        MATHLIB_WARNING2(_("'k' (%.2f) must be integer, rounded to %.0f"), k0, k);
  

> Duncan Murdoch
> 
>> -pd
>>> On 14 Jan 2020, at 00:33 , Wright, Erik Scott <ESWRIGHT at pitt.edu> wrote:
>>> 
>>> This struck me as incorrect:
>>> 
>>>> choose(3.999999, 4)
>>> [1] 0.9999979
>>>> choose(3.9999999, 4)
>>> [1] 0
>>>> choose(4, 4)
>>> [1] 1
>>>> choose(4.0000001, 4)
>>> [1] 4
>>>> choose(4.000001, 4)
>>> [1] 1.000002
>>> 
>>> Should base::choose(n, k) check whether n is within machine precision of k and return 1?
>>> 
>>> Thanks,
>>> Erik
>>> 
>>> ***
>>> sessionInfo()
>>> R version 3.6.0 beta (2019-04-15 r76395)
>>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>>> Running under: macOS High Sierra 10.13.6
>>> 
>>> 	[[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Jan 14 17:02:20 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 14 Jan 2020 11:02:20 -0500
Subject: [Rd] [R] choose(n, k) as n approaches k
In-Reply-To: <6B40064A-8B62-4FC3-967D-3695F2E46EFA@gmail.com>
References: <A3522327-CF54-4960-A09F-D334C408BB84@pitt.edu>
 <65C7647D-9E6C-4D4A-B8F7-63EBA0320E09@gmail.com>
 <ae3139e1-c728-83e5-0aa7-a17135b31df6@gmail.com>
 <6B40064A-8B62-4FC3-967D-3695F2E46EFA@gmail.com>
Message-ID: <7cf77331-6ee2-a980-e781-8ee2a6e8dad6@gmail.com>

On 14/01/2020 10:50 a.m., peter dalgaard wrote:
> 
> 
>> On 14 Jan 2020, at 16:21 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> On 14/01/2020 10:07 a.m., peter dalgaard wrote:
>>> Yep, that looks wrong (probably want to continue discussion over on R-devel)
>>> I think the culprit is here (in src/nmath/choose.c)
>>>       if (k < k_small_max) {
>>>          int j;
>>>          if(n-k < k && n >= 0 && R_IS_INT(n)) k = n-k; /* <- Symmetry */
>>>          if (k <  0) return 0.;
>>>          if (k == 0) return 1.;
>>>          /* else: k >= 1 */
>>> if n is a near-integer, then k can become non-integer and negative. In your case,
>>> n == 4 - 1e-7
>>> k == 4
>>> n - k == -1e-7 < 4
>>> n >= 0
>>> R_IS_INT(n) = TRUE (relative diff < 1e-7 is allowed)
>>> so k gets set to
>>> n - k == -1e-7
>>> which is less than 0, so we return 0. However, as you point out, 1 would be more reasonable and in accordance with the limit as n -> 4, e.g.
>>>> factorial(4 - 1e-10)/factorial(1e-10)/factorial(4) -1
>>> [1] -9.289025e-11
>>> I guess that the fix could be as simple as replacing n by R_forceint(n) in the k = n - k step.
>>
>> I think that would break symmetry:  you want choose(n, k) to equal choose(n, n-k) when n is very close to an integer.  So I'd suggest the replacement whenever R_IS_INT(n) is true.
>>
> 
> But choose() very deliberately ensures that k is integer, so choose(n, n-k) is ill-defined for non-integer n.

That's only true if there's a big difference.  I'd be worried about 
cases where n and k are close to integers (within 1e-7).  In those 
cases, k is silently rounded to integer.  As I read your suggestion, n 
would only be rounded to integer if k > n-k.  I think both n and k 
should be rounded to integer in this near-integer situation, regardless 
of the value of k.

I believe that lchoose(n, k) already does this.

Duncan Murdoch

> 
>      double r, k0 = k;
>      k = R_forceint(k);
> ...
>      if (fabs(k - k0) > 1e-7)
>          MATHLIB_WARNING2(_("'k' (%.2f) must be integer, rounded to %.0f"), k0, k);
>    
> 
>> Duncan Murdoch
>>
>>> -pd
>>>> On 14 Jan 2020, at 00:33 , Wright, Erik Scott <ESWRIGHT at pitt.edu> wrote:
>>>>
>>>> This struck me as incorrect:
>>>>
>>>>> choose(3.999999, 4)
>>>> [1] 0.9999979
>>>>> choose(3.9999999, 4)
>>>> [1] 0
>>>>> choose(4, 4)
>>>> [1] 1
>>>>> choose(4.0000001, 4)
>>>> [1] 4
>>>>> choose(4.000001, 4)
>>>> [1] 1.000002
>>>>
>>>> Should base::choose(n, k) check whether n is within machine precision of k and return 1?
>>>>
>>>> Thanks,
>>>> Erik
>>>>
>>>> ***
>>>> sessionInfo()
>>>> R version 3.6.0 beta (2019-04-15 r76395)
>>>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>>>> Running under: macOS High Sierra 10.13.6
>>>>
>>>> 	[[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>>> and provide commented, minimal, self-contained, reproducible code.
>


From pd@|gd @end|ng |rom gm@||@com  Tue Jan 14 19:20:22 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 14 Jan 2020 19:20:22 +0100
Subject: [Rd] [R] choose(n, k) as n approaches k
In-Reply-To: <7cf77331-6ee2-a980-e781-8ee2a6e8dad6@gmail.com>
References: <A3522327-CF54-4960-A09F-D334C408BB84@pitt.edu>
 <65C7647D-9E6C-4D4A-B8F7-63EBA0320E09@gmail.com>
 <ae3139e1-c728-83e5-0aa7-a17135b31df6@gmail.com>
 <6B40064A-8B62-4FC3-967D-3695F2E46EFA@gmail.com>
 <7cf77331-6ee2-a980-e781-8ee2a6e8dad6@gmail.com>
Message-ID: <0E56B63E-E9C5-4C92-B9ED-F73CEAF9C053@gmail.com>

OK, I see what you mean. But in those cases, we don't get the catastrophic failures from the 

        if (k <  0) return 0.;
        if (k == 0) return 1.;
        /* else: k >= 1 */

part, because at that point k is sure to be integer, possibly after rounding. 

It is when n-k is approximately but not exactly zero and we should return 1, that we either return 0 (negative case) or n (positive case; because the n(n-1)(n-2)... product has at least one factor). In the other cases, we get 1 or n(n-1)(n-2)...(n-k+1) which if n is near-integer gets rounded to produce an integer, due to the

        return R_IS_INT(n) ? R_forceint(r) : r;

part.

-pd



> On 14 Jan 2020, at 17:02 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> On 14/01/2020 10:50 a.m., peter dalgaard wrote:
>>> On 14 Jan 2020, at 16:21 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>> 
>>> On 14/01/2020 10:07 a.m., peter dalgaard wrote:
>>>> Yep, that looks wrong (probably want to continue discussion over on R-devel)
>>>> I think the culprit is here (in src/nmath/choose.c)
>>>>      if (k < k_small_max) {
>>>>         int j;
>>>>         if(n-k < k && n >= 0 && R_IS_INT(n)) k = n-k; /* <- Symmetry */
>>>>         if (k <  0) return 0.;
>>>>         if (k == 0) return 1.;
>>>>         /* else: k >= 1 */
>>>> if n is a near-integer, then k can become non-integer and negative. In your case,
>>>> n == 4 - 1e-7
>>>> k == 4
>>>> n - k == -1e-7 < 4
>>>> n >= 0
>>>> R_IS_INT(n) = TRUE (relative diff < 1e-7 is allowed)
>>>> so k gets set to
>>>> n - k == -1e-7
>>>> which is less than 0, so we return 0. However, as you point out, 1 would be more reasonable and in accordance with the limit as n -> 4, e.g.
>>>>> factorial(4 - 1e-10)/factorial(1e-10)/factorial(4) -1
>>>> [1] -9.289025e-11
>>>> I guess that the fix could be as simple as replacing n by R_forceint(n) in the k = n - k step.
>>> 
>>> I think that would break symmetry:  you want choose(n, k) to equal choose(n, n-k) when n is very close to an integer.  So I'd suggest the replacement whenever R_IS_INT(n) is true.
>>> 
>> But choose() very deliberately ensures that k is integer, so choose(n, n-k) is ill-defined for non-integer n.
> 
> That's only true if there's a big difference.  I'd be worried about cases where n and k are close to integers (within 1e-7).  In those cases, k is silently rounded to integer.  As I read your suggestion, n would only be rounded to integer if k > n-k.  I think both n and k should be rounded to integer in this near-integer situation, regardless of the value of k.
> 
> I believe that lchoose(n, k) already does this.
> 
> Duncan Murdoch
> 
>>     double r, k0 = k;
>>     k = R_forceint(k);
>> ...
>>     if (fabs(k - k0) > 1e-7)
>>         MATHLIB_WARNING2(_("'k' (%.2f) must be integer, rounded to %.0f"), k0, k);
>>   
>>> Duncan Murdoch
>>> 
>>>> -pd
>>>>> On 14 Jan 2020, at 00:33 , Wright, Erik Scott <ESWRIGHT at pitt.edu> wrote:
>>>>> 
>>>>> This struck me as incorrect:
>>>>> 
>>>>>> choose(3.999999, 4)
>>>>> [1] 0.9999979
>>>>>> choose(3.9999999, 4)
>>>>> [1] 0
>>>>>> choose(4, 4)
>>>>> [1] 1
>>>>>> choose(4.0000001, 4)
>>>>> [1] 4
>>>>>> choose(4.000001, 4)
>>>>> [1] 1.000002
>>>>> 
>>>>> Should base::choose(n, k) check whether n is within machine precision of k and return 1?
>>>>> 
>>>>> Thanks,
>>>>> Erik
>>>>> 
>>>>> ***
>>>>> sessionInfo()
>>>>> R version 3.6.0 beta (2019-04-15 r76395)
>>>>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>>>>> Running under: macOS High Sierra 10.13.6
>>>>> 
>>>>> 	[[alternative HTML version deleted]]
>>>>> 
>>>>> ______________________________________________
>>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>>>> and provide commented, minimal, self-contained, reproducible code.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jmount @end|ng |rom w|n-vector@com  Tue Jan 14 19:36:15 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Tue, 14 Jan 2020 10:36:15 -0800
Subject: [Rd] [R] choose(n, k) as n approaches k
In-Reply-To: <0E56B63E-E9C5-4C92-B9ED-F73CEAF9C053@gmail.com>
References: <A3522327-CF54-4960-A09F-D334C408BB84@pitt.edu>
 <65C7647D-9E6C-4D4A-B8F7-63EBA0320E09@gmail.com>
 <ae3139e1-c728-83e5-0aa7-a17135b31df6@gmail.com>
 <6B40064A-8B62-4FC3-967D-3695F2E46EFA@gmail.com>
 <7cf77331-6ee2-a980-e781-8ee2a6e8dad6@gmail.com>
 <0E56B63E-E9C5-4C92-B9ED-F73CEAF9C053@gmail.com>
Message-ID: <DA3BC314-5415-47A3-AA73-4FA3A36CAECA@win-vector.com>


At the risk of throwing oil on a fire.  If we are talking about fractional values of choose() doesn't it make sense to look to the gamma function for the correct analytic continuation?  In particular k<0 may not imply the function should evaluate to zero until we get k<=-1.

Example:

``` r
choose(5, 4)
#> [1] 5

gchoose <- function(n, k) { 
  gamma(n+1)/(gamma(n+1-k) * gamma(k+1))
}

gchoose(5, 4)
#> [1] 5
gchoose(5, 0)
#> [1] 1
gchoose(5, -0.5)
#> [1] 0.2351727
```

> On Jan 14, 2020, at 10:20 AM, peter dalgaard <pdalgd at gmail.com> wrote:
> 
> OK, I see what you mean. But in those cases, we don't get the catastrophic failures from the 
> 
>        if (k <  0) return 0.;
>        if (k == 0) return 1.;
>        /* else: k >= 1 */
> 
> part, because at that point k is sure to be integer, possibly after rounding. 
> 
> It is when n-k is approximately but not exactly zero and we should return 1, that we either return 0 (negative case) or n (positive case; because the n(n-1)(n-2)... product has at least one factor). In the other cases, we get 1 or n(n-1)(n-2)...(n-k+1) which if n is near-integer gets rounded to produce an integer, due to the
> 
>        return R_IS_INT(n) ? R_forceint(r) : r;
> 
> part.
> 
> -pd
> 
> 
> 
>> On 14 Jan 2020, at 17:02 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>> 
>> On 14/01/2020 10:50 a.m., peter dalgaard wrote:
>>>> On 14 Jan 2020, at 16:21 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>> 
>>>> On 14/01/2020 10:07 a.m., peter dalgaard wrote:
>>>>> Yep, that looks wrong (probably want to continue discussion over on R-devel)
>>>>> I think the culprit is here (in src/nmath/choose.c)
>>>>>     if (k < k_small_max) {
>>>>>        int j;
>>>>>        if(n-k < k && n >= 0 && R_IS_INT(n)) k = n-k; /* <- Symmetry */
>>>>>        if (k <  0) return 0.;
>>>>>        if (k == 0) return 1.;
>>>>>        /* else: k >= 1 */
>>>>> if n is a near-integer, then k can become non-integer and negative. In your case,
>>>>> n == 4 - 1e-7
>>>>> k == 4
>>>>> n - k == -1e-7 < 4
>>>>> n >= 0
>>>>> R_IS_INT(n) = TRUE (relative diff < 1e-7 is allowed)
>>>>> so k gets set to
>>>>> n - k == -1e-7
>>>>> which is less than 0, so we return 0. However, as you point out, 1 would be more reasonable and in accordance with the limit as n -> 4, e.g.
>>>>>> factorial(4 - 1e-10)/factorial(1e-10)/factorial(4) -1
>>>>> [1] -9.289025e-11
>>>>> I guess that the fix could be as simple as replacing n by R_forceint(n) in the k = n - k step.
>>>> 
>>>> I think that would break symmetry:  you want choose(n, k) to equal choose(n, n-k) when n is very close to an integer.  So I'd suggest the replacement whenever R_IS_INT(n) is true.
>>>> 
>>> But choose() very deliberately ensures that k is integer, so choose(n, n-k) is ill-defined for non-integer n.
>> 
>> That's only true if there's a big difference.  I'd be worried about cases where n and k are close to integers (within 1e-7).  In those cases, k is silently rounded to integer.  As I read your suggestion, n would only be rounded to integer if k > n-k.  I think both n and k should be rounded to integer in this near-integer situation, regardless of the value of k.
>> 
>> I believe that lchoose(n, k) already does this.
>> 
>> Duncan Murdoch
>> 
>>>    double r, k0 = k;
>>>    k = R_forceint(k);
>>> ...
>>>    if (fabs(k - k0) > 1e-7)
>>>        MATHLIB_WARNING2(_("'k' (%.2f) must be integer, rounded to %.0f"), k0, k);
>>> 
>>>> Duncan Murdoch
>>>> 
>>>>> -pd
>>>>>> On 14 Jan 2020, at 00:33 , Wright, Erik Scott <ESWRIGHT at pitt.edu> wrote:
>>>>>> 
>>>>>> This struck me as incorrect:
>>>>>> 
>>>>>>> choose(3.999999, 4)
>>>>>> [1] 0.9999979
>>>>>>> choose(3.9999999, 4)
>>>>>> [1] 0
>>>>>>> choose(4, 4)
>>>>>> [1] 1
>>>>>>> choose(4.0000001, 4)
>>>>>> [1] 4
>>>>>>> choose(4.000001, 4)
>>>>>> [1] 1.000002
>>>>>> 
>>>>>> Should base::choose(n, k) check whether n is within machine precision of k and return 1?
>>>>>> 
>>>>>> Thanks,
>>>>>> Erik
>>>>>> 
>>>>>> ***
>>>>>> sessionInfo()
>>>>>> R version 3.6.0 beta (2019-04-15 r76395)
>>>>>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>>>>>> Running under: macOS High Sierra 10.13.6
>>>>>> 
>>>>>> 	[[alternative HTML version deleted]]
>>>>>> 
>>>>>> ______________________________________________
>>>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>>>>> and provide commented, minimal, self-contained, reproducible code.
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

---------------
John Mount
http://www.win-vector.com/ <http://www.win-vector.com/> 
Our book: Practical Data Science with R
http://practicaldatascience.com <http://practicaldatascience.com/> 






	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Tue Jan 14 21:29:14 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Wed, 15 Jan 2020 09:29:14 +1300
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <24093.31179.751562.718817@stat.math.ethz.ch>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
 <24092.42945.719678.758685@stat.math.ethz.ch>
 <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>
 <24093.31179.751562.718817@stat.math.ethz.ch>
Message-ID: <CAB8pepxxy5sF=5AuqeRKY3S+n_fqRp62Zf-P0JPa9AJ6nRu-Wg@mail.gmail.com>

> I do want to entice people to have a long look beyond closed
> source OS into the world of Free Software where not only R is
> FOSS (Free and Open Source Software) but (all / almost) all the
> tools you use are of that same spirit.

And while everyone is talking about operating systems...

Recently, I tried to install R on Fedora.
However, it only gave me the option of downloading and installing R
3.6.1, when the current release is/was R 3.6.2.
I decided to wait, and may try again later, over the next week.

Is it possible for things to be free *and* simple?


From edd @end|ng |rom deb|@n@org  Tue Jan 14 22:00:04 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 14 Jan 2020 15:00:04 -0600
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <CAB8pepxxy5sF=5AuqeRKY3S+n_fqRp62Zf-P0JPa9AJ6nRu-Wg@mail.gmail.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
 <24092.42945.719678.758685@stat.math.ethz.ch>
 <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>
 <24093.31179.751562.718817@stat.math.ethz.ch>
 <CAB8pepxxy5sF=5AuqeRKY3S+n_fqRp62Zf-P0JPa9AJ6nRu-Wg@mail.gmail.com>
Message-ID: <24094.11220.970190.650688@rob.eddelbuettel.com>


On 15 January 2020 at 09:29, Abby Spurdle wrote:
| Recently, I tried to install R on Fedora.
| However, it only gave me the option of downloading and installing R
| 3.6.1, when the current release is/was R 3.6.2.
| I decided to wait, and may try again later, over the next week.
| 
| Is it possible for things to be free *and* simple?

Sure.

Look at the Dockerfile (== "recipe", like shell) for the r-base container.

  https://github.com/rocker-org/rocker/blob/master/r-base/Dockerfile

Starts from vanilla Debian testing, and installs R. Takes no time, is fully
automated and has been running that way for years.  You can build up from
there, my blog has examples, as have many many other sites by other people.


One other recent-ish example is the r-apt Rocker image. Sets the repo for
current R (based on builds that Michael Rutter looks after based on my
official Debian package), then adds info for the PPAs Michael looks after and
you got over 4,000 CRAN packages ready to install as binaries -- just like
that.  The link is for 'disco' aka 19.04, we have the others too (but I need
to add 19.10 now).

  https://github.com/rocker-org/rocker/blob/master/r-apt/disco/Dockerfile

Both meet free *and* simple. And you don't have to build either. Just 'docker
pull'. There is more at the Rocker Project for you.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@rc_@chw@rtz @end|ng |rom me@com  Tue Jan 14 22:32:05 2020
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Tue, 14 Jan 2020 16:32:05 -0500
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <CAB8pepxxy5sF=5AuqeRKY3S+n_fqRp62Zf-P0JPa9AJ6nRu-Wg@mail.gmail.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
 <24092.42945.719678.758685@stat.math.ethz.ch>
 <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>
 <24093.31179.751562.718817@stat.math.ethz.ch>
 <CAB8pepxxy5sF=5AuqeRKY3S+n_fqRp62Zf-P0JPa9AJ6nRu-Wg@mail.gmail.com>
Message-ID: <E1D23855-9070-4F49-AB1F-B47FFD6798C3@me.com>

> On Jan 14, 2020, at 3:29 PM, Abby Spurdle <spurdle.a at gmail.com> wrote:
> 
>> I do want to entice people to have a long look beyond closed
>> source OS into the world of Free Software where not only R is
>> FOSS (Free and Open Source Software) but (all / almost) all the
>> tools you use are of that same spirit.
> 
> And while everyone is talking about operating systems...
> 
> Recently, I tried to install R on Fedora.
> However, it only gave me the option of downloading and installing R
> 3.6.1, when the current release is/was R 3.6.2.
> I decided to wait, and may try again later, over the next week.
> 
> Is it possible for things to be free *and* simple?

Abby,

Which version of Fedora are you on?

The Fedora RPM build system for R:

  https://koji.fedoraproject.org/koji/packageinfo?packageID=1230

would seem to suggest that R 3.6.2 may not be available for Fedora 29 or earlier, which is not a surprise, given the rapid update cycle used on Fedora.

R 3.6.2 is available for Fedora 30, 31 and 32 per the above page.

If you are on Fedora >=30, you might check your yum repo to see if it has been properly updated.

Otherwise, if you are on Fedora <=29, you should think about updating your Fedora installation.

You may or may not be aware that there is a dedicated list for R on Fedora/RHEL and derivatives:

  https://stat.ethz.ch/mailman/listinfo/r-sig-fedora

Tom Callaway, who is the RH/Fedora maintainer for R is on that list, so you can pose queries to him via that list for any issues with R on Fedora.

Regards,

Marc Schwartz


From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue Jan 14 22:48:39 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 14 Jan 2020 13:48:39 -0800
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <E1D23855-9070-4F49-AB1F-B47FFD6798C3@me.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
 <24092.42945.719678.758685@stat.math.ethz.ch>
 <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>
 <24093.31179.751562.718817@stat.math.ethz.ch>
 <CAB8pepxxy5sF=5AuqeRKY3S+n_fqRp62Zf-P0JPa9AJ6nRu-Wg@mail.gmail.com>
 <E1D23855-9070-4F49-AB1F-B47FFD6798C3@me.com>
Message-ID: <CAFDcVCSoSTf8xcYJtgQjftMpkg=VsjBSM5yyK_DQd3tsHai6Mw@mail.gmail.com>

On Tue, Jan 14, 2020 at 1:32 PM Marc Schwartz via R-devel
<r-devel at r-project.org> wrote:
>
> > On Jan 14, 2020, at 3:29 PM, Abby Spurdle <spurdle.a at gmail.com> wrote:
> >
> >> I do want to entice people to have a long look beyond closed
> >> source OS into the world of Free Software where not only R is
> >> FOSS (Free and Open Source Software) but (all / almost) all the
> >> tools you use are of that same spirit.
> >
> > And while everyone is talking about operating systems...
> >
> > Recently, I tried to install R on Fedora.
> > However, it only gave me the option of downloading and installing R
> > 3.6.1, when the current release is/was R 3.6.2.
> > I decided to wait, and may try again later, over the next week.
> >
> > Is it possible for things to be free *and* simple?
>
> Abby,
>
> Which version of Fedora are you on?
>
> The Fedora RPM build system for R:
>
>   https://koji.fedoraproject.org/koji/packageinfo?packageID=1230
>
> would seem to suggest that R 3.6.2 may not be available for Fedora 29 or earlier, which is not a surprise, given the rapid update cycle used on Fedora.
>
> R 3.6.2 is available for Fedora 30, 31 and 32 per the above page.
>
> If you are on Fedora >=30, you might check your yum repo to see if it has been properly updated.
>
> Otherwise, if you are on Fedora <=29, you should think about updating your Fedora installation.
>
> You may or may not be aware that there is a dedicated list for R on Fedora/RHEL and derivatives:
>
>   https://stat.ethz.ch/mailman/listinfo/r-sig-fedora
>
> Tom Callaway, who is the RH/Fedora maintainer for R is on that list, so you can pose queries to him via that list for any issues with R on Fedora.

We inquired about R 3.6.1 on CentOS 7 EPEL, which is currently stuck
on R 3.6.0, and go the following reply
(https://bugzilla.redhat.com/show_bug.cgi?id=1727281#c19):

>>> Tom "spot" Callaway 2019-11-12 19:41:25 UTC
>>>
>>>  The challenge is this:
>>>
>>> R 3.6.1 cannot build with the stock EL-7 toolchain, due to the C++ support level required. In order to build it, we need to use devtoolset-8-toolchain. When R 3.6.1 is built, it assumes that same level of C++ support is available, and any EL-7 setups using it which do not have devtoolset-8-toolchain will not successfully build modules from CRAN which depend on that C++ support (which is not a small number these days). Thus, I made the R-3.6.1 build for EL-7 depend on devtoolset-8-toolchain, but this is not acceptable (apparently).
>>>
>>> So, I'm caught between either:
>>>
>>> 1. Dropping the dependency on devtoolset-8-toolchain and having bugs flow in which I'm forced to close as CANTFIX
>>>
>>> or
>>>
>>> 2. Leaving R in EL-7 at the last release which did not depend on devtoolset-8-toolchain
>>>
>>> I'm really unwilling to do #1.

It sounds odd to me that R would update hard requirements during R
3.6.x releases; I'd except them to be optional (OTH, it might
something I just made up).  I meant to find time to look into this,
but there's this thing called time so it never happened.  Maybe
someone else with more knowledge can comment on this.

/Henrik

>
> Regards,
>
> Marc Schwartz
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Wed Jan 15 01:25:54 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 15 Jan 2020 01:25:54 +0100
Subject: [Rd] [R] choose(n, k) as n approaches k
In-Reply-To: <DA3BC314-5415-47A3-AA73-4FA3A36CAECA@win-vector.com>
References: <A3522327-CF54-4960-A09F-D334C408BB84@pitt.edu>
 <65C7647D-9E6C-4D4A-B8F7-63EBA0320E09@gmail.com>
 <ae3139e1-c728-83e5-0aa7-a17135b31df6@gmail.com>
 <6B40064A-8B62-4FC3-967D-3695F2E46EFA@gmail.com>
 <7cf77331-6ee2-a980-e781-8ee2a6e8dad6@gmail.com>
 <0E56B63E-E9C5-4C92-B9ED-F73CEAF9C053@gmail.com>
 <DA3BC314-5415-47A3-AA73-4FA3A36CAECA@win-vector.com>
Message-ID: <7C33C35A-1433-4DEF-A30D-A2710DCFFE8F@gmail.com>

That crossed my mind too, but presumably someone designed choose() to handle the near-integer cases specially. Otherwise, we already have beta() -- you just need to remember what the connection is ;-). 

I would expect that it has to do with the binomial and negative binomial distributions, but I can't offhand picture a calculation that leads to integer k, n plus/minus a tiny numerical error of the sort that one may encounter with, say, seq(). 

-pd

;-) choose(a,b) = 1/(beta(a-b+1,b+1)*(a+1)) or thereabouts

> On 14 Jan 2020, at 19:36 , John Mount <jmount at win-vector.com> wrote:
> 
> 
> At the risk of throwing oil on a fire.  If we are talking about fractional values of choose() doesn't it make sense to look to the gamma function for the correct analytic continuation?  In particular k<0 may not imply the function should evaluate to zero until we get k<=-1.
> 
> Example:
> 
> ``` r
> choose(5, 4)
> #> [1] 5
> 
> gchoose <- function(n, k) { 
>   gamma(n+1)/(gamma(n+1-k) * gamma(k+1))
> }
> 
> gchoose(5, 4)
> #> [1] 5
> gchoose(5, 0)
> #> [1] 1
> gchoose(5, -0.5)
> #> [1] 0.2351727
> ```
> 
>> On Jan 14, 2020, at 10:20 AM, peter dalgaard <pdalgd at gmail.com> wrote:
>> 
>> OK, I see what you mean. But in those cases, we don't get the catastrophic failures from the 
>> 
>>        if (k <  0) return 0.;
>>        if (k == 0) return 1.;
>>        /* else: k >= 1 */
>> 
>> part, because at that point k is sure to be integer, possibly after rounding. 
>> 
>> It is when n-k is approximately but not exactly zero and we should return 1, that we either return 0 (negative case) or n (positive case; because the n(n-1)(n-2)... product has at least one factor). In the other cases, we get 1 or n(n-1)(n-2)...(n-k+1) which if n is near-integer gets rounded to produce an integer, due to the
>> 
>>        return R_IS_INT(n) ? R_forceint(r) : r;
>> 
>> part.
>> 
>> -pd
>> 
>> 
>> 
>>> On 14 Jan 2020, at 17:02 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>> 
>>> On 14/01/2020 10:50 a.m., peter dalgaard wrote:
>>>>> On 14 Jan 2020, at 16:21 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>> 
>>>>> On 14/01/2020 10:07 a.m., peter dalgaard wrote:
>>>>>> Yep, that looks wrong (probably want to continue discussion over on R-devel)
>>>>>> I think the culprit is here (in src/nmath/choose.c)
>>>>>>     if (k < k_small_max) {
>>>>>>        int j;
>>>>>>        if(n-k < k && n >= 0 && R_IS_INT(n)) k = n-k; /* <- Symmetry */
>>>>>>        if (k <  0) return 0.;
>>>>>>        if (k == 0) return 1.;
>>>>>>        /* else: k >= 1 */
>>>>>> if n is a near-integer, then k can become non-integer and negative. In your case,
>>>>>> n == 4 - 1e-7
>>>>>> k == 4
>>>>>> n - k == -1e-7 < 4
>>>>>> n >= 0
>>>>>> R_IS_INT(n) = TRUE (relative diff < 1e-7 is allowed)
>>>>>> so k gets set to
>>>>>> n - k == -1e-7
>>>>>> which is less than 0, so we return 0. However, as you point out, 1 would be more reasonable and in accordance with the limit as n -> 4, e.g.
>>>>>>> factorial(4 - 1e-10)/factorial(1e-10)/factorial(4) -1
>>>>>> [1] -9.289025e-11
>>>>>> I guess that the fix could be as simple as replacing n by R_forceint(n) in the k = n - k step.
>>>>> 
>>>>> I think that would break symmetry:  you want choose(n, k) to equal choose(n, n-k) when n is very close to an integer.  So I'd suggest the replacement whenever R_IS_INT(n) is true.
>>>>> 
>>>> But choose() very deliberately ensures that k is integer, so choose(n, n-k) is ill-defined for non-integer n.
>>> 
>>> That's only true if there's a big difference.  I'd be worried about cases where n and k are close to integers (within 1e-7).  In those cases, k is silently rounded to integer.  As I read your suggestion, n would only be rounded to integer if k > n-k.  I think both n and k should be rounded to integer in this near-integer situation, regardless of the value of k.
>>> 
>>> I believe that lchoose(n, k) already does this.
>>> 
>>> Duncan Murdoch
>>> 
>>>>    double r, k0 = k;
>>>>    k = R_forceint(k);
>>>> ...
>>>>    if (fabs(k - k0) > 1e-7)
>>>>        MATHLIB_WARNING2(_("'k' (%.2f) must be integer, rounded to %.0f"), k0, k);
>>>> 
>>>>> Duncan Murdoch
>>>>> 
>>>>>> -pd
>>>>>>> On 14 Jan 2020, at 00:33 , Wright, Erik Scott <ESWRIGHT at pitt.edu> wrote:
>>>>>>> 
>>>>>>> This struck me as incorrect:
>>>>>>> 
>>>>>>>> choose(3.999999, 4)
>>>>>>> [1] 0.9999979
>>>>>>>> choose(3.9999999, 4)
>>>>>>> [1] 0
>>>>>>>> choose(4, 4)
>>>>>>> [1] 1
>>>>>>>> choose(4.0000001, 4)
>>>>>>> [1] 4
>>>>>>>> choose(4.000001, 4)
>>>>>>> [1] 1.000002
>>>>>>> 
>>>>>>> Should base::choose(n, k) check whether n is within machine precision of k and return 1?
>>>>>>> 
>>>>>>> Thanks,
>>>>>>> Erik
>>>>>>> 
>>>>>>> ***
>>>>>>> sessionInfo()
>>>>>>> R version 3.6.0 beta (2019-04-15 r76395)
>>>>>>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>>>>>>> Running under: macOS High Sierra 10.13.6
>>>>>>> 
>>>>>>> 	[[alternative HTML version deleted]]
>>>>>>> 
>>>>>>> ______________________________________________
>>>>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>>>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>>>>>> and provide commented, minimal, self-contained, reproducible code.
>> 
>> -- 
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ---------------
> John Mount
> http://www.win-vector.com/ 
> Our book: Practical Data Science with R
> http://practicaldatascience.com 
> 
> 
> 
> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Wed Jan 15 01:45:59 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 15 Jan 2020 01:45:59 +0100
Subject: [Rd] [R] choose(n, k) as n approaches k
In-Reply-To: <0E56B63E-E9C5-4C92-B9ED-F73CEAF9C053@gmail.com>
References: <A3522327-CF54-4960-A09F-D334C408BB84@pitt.edu>
 <65C7647D-9E6C-4D4A-B8F7-63EBA0320E09@gmail.com>
 <ae3139e1-c728-83e5-0aa7-a17135b31df6@gmail.com>
 <6B40064A-8B62-4FC3-967D-3695F2E46EFA@gmail.com>
 <7cf77331-6ee2-a980-e781-8ee2a6e8dad6@gmail.com>
 <0E56B63E-E9C5-4C92-B9ED-F73CEAF9C053@gmail.com>
Message-ID: <44999E7A-4D41-4E54-AA9D-532AA5771A18@gmail.com>

Um, n(n-1)(n-2)...(n-k+1)/factorial(k), of course, but I think the argument still holds. 

Also, note that there are overflow conditions involved with computing 

n(n-1)(n-2)...(n-k+1)/factorial(k)
 
as written, so it is computed in a loop with alternating multiply and divide steps. This introduces FP errors even if it is known that the result should be integer. I.e., we cannot remove the final "R_IS_INT(n) ? R_forceint(r) : r" if we want choose(n, k) to return an integer if n and k are integers.

-pd

> On 14 Jan 2020, at 19:20 , peter dalgaard <pdalgd at gmail.com> wrote:
> 
> OK, I see what you mean. But in those cases, we don't get the catastrophic failures from the 
> 
>        if (k <  0) return 0.;
>        if (k == 0) return 1.;
>        /* else: k >= 1 */
> 
> part, because at that point k is sure to be integer, possibly after rounding. 
> 
> It is when n-k is approximately but not exactly zero and we should return 1, that we either return 0 (negative case) or n (positive case; because the n(n-1)(n-2)... product has at least one factor). In the other cases, we get 1 or n(n-1)(n-2)...(n-k+1) which if n is near-integer gets rounded to produce an integer, due to the
> 
>        return R_IS_INT(n) ? R_forceint(r) : r;
> 
> part.
> 
> -pd
> 
> 
> 
>> On 14 Jan 2020, at 17:02 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>> 
>> On 14/01/2020 10:50 a.m., peter dalgaard wrote:
>>>> On 14 Jan 2020, at 16:21 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>> 
>>>> On 14/01/2020 10:07 a.m., peter dalgaard wrote:
>>>>> Yep, that looks wrong (probably want to continue discussion over on R-devel)
>>>>> I think the culprit is here (in src/nmath/choose.c)
>>>>>     if (k < k_small_max) {
>>>>>        int j;
>>>>>        if(n-k < k && n >= 0 && R_IS_INT(n)) k = n-k; /* <- Symmetry */
>>>>>        if (k <  0) return 0.;
>>>>>        if (k == 0) return 1.;
>>>>>        /* else: k >= 1 */
>>>>> if n is a near-integer, then k can become non-integer and negative. In your case,
>>>>> n == 4 - 1e-7
>>>>> k == 4
>>>>> n - k == -1e-7 < 4
>>>>> n >= 0
>>>>> R_IS_INT(n) = TRUE (relative diff < 1e-7 is allowed)
>>>>> so k gets set to
>>>>> n - k == -1e-7
>>>>> which is less than 0, so we return 0. However, as you point out, 1 would be more reasonable and in accordance with the limit as n -> 4, e.g.
>>>>>> factorial(4 - 1e-10)/factorial(1e-10)/factorial(4) -1
>>>>> [1] -9.289025e-11
>>>>> I guess that the fix could be as simple as replacing n by R_forceint(n) in the k = n - k step.
>>>> 
>>>> I think that would break symmetry:  you want choose(n, k) to equal choose(n, n-k) when n is very close to an integer.  So I'd suggest the replacement whenever R_IS_INT(n) is true.
>>>> 
>>> But choose() very deliberately ensures that k is integer, so choose(n, n-k) is ill-defined for non-integer n.
>> 
>> That's only true if there's a big difference.  I'd be worried about cases where n and k are close to integers (within 1e-7).  In those cases, k is silently rounded to integer.  As I read your suggestion, n would only be rounded to integer if k > n-k.  I think both n and k should be rounded to integer in this near-integer situation, regardless of the value of k.
>> 
>> I believe that lchoose(n, k) already does this.
>> 
>> Duncan Murdoch
>> 
>>>    double r, k0 = k;
>>>    k = R_forceint(k);
>>> ...
>>>    if (fabs(k - k0) > 1e-7)
>>>        MATHLIB_WARNING2(_("'k' (%.2f) must be integer, rounded to %.0f"), k0, k);
>>> 
>>>> Duncan Murdoch
>>>> 
>>>>> -pd
>>>>>> On 14 Jan 2020, at 00:33 , Wright, Erik Scott <ESWRIGHT at pitt.edu> wrote:
>>>>>> 
>>>>>> This struck me as incorrect:
>>>>>> 
>>>>>>> choose(3.999999, 4)
>>>>>> [1] 0.9999979
>>>>>>> choose(3.9999999, 4)
>>>>>> [1] 0
>>>>>>> choose(4, 4)
>>>>>> [1] 1
>>>>>>> choose(4.0000001, 4)
>>>>>> [1] 4
>>>>>>> choose(4.000001, 4)
>>>>>> [1] 1.000002
>>>>>> 
>>>>>> Should base::choose(n, k) check whether n is within machine precision of k and return 1?
>>>>>> 
>>>>>> Thanks,
>>>>>> Erik
>>>>>> 
>>>>>> ***
>>>>>> sessionInfo()
>>>>>> R version 3.6.0 beta (2019-04-15 r76395)
>>>>>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>>>>>> Running under: macOS High Sierra 10.13.6
>>>>>> 
>>>>>> 	[[alternative HTML version deleted]]
>>>>>> 
>>>>>> ______________________________________________
>>>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>>>>> and provide commented, minimal, self-contained, reproducible code.
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @purd|e@@ @end|ng |rom gm@||@com  Wed Jan 15 05:44:34 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Wed, 15 Jan 2020 17:44:34 +1300
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <E1D23855-9070-4F49-AB1F-B47FFD6798C3@me.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
 <24092.42945.719678.758685@stat.math.ethz.ch>
 <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>
 <24093.31179.751562.718817@stat.math.ethz.ch>
 <CAB8pepxxy5sF=5AuqeRKY3S+n_fqRp62Zf-P0JPa9AJ6nRu-Wg@mail.gmail.com>
 <E1D23855-9070-4F49-AB1F-B47FFD6798C3@me.com>
Message-ID: <CAB8pepzzpXjxi3=o3KWgSDMb13eFsbTc85YRnc1+YHn=n+JRXA@mail.gmail.com>

> Which version of Fedora are you on?

I've got Fedora 31.
I just checked, and R 3.6.2 is available now.

Progress...
...however, there's another problem.

>From the dependencies:
R-java                   x86_64 3.6.2-1.fc31           updates  10 k
R-java-devel             x86_64 3.6.2-1.fc31           updates 9.9 k
java-1.8.0-openjdk       x86_64 1:1.8.0.232.b09-0.fc31 updates 281 k
java-1.8.0-openjdk-devel x86_64 1:1.8.0.232.b09-0.fc31 updates 9.3 M
java-1.8.0-openjdk-headless
                         x86_64 1:1.8.0.232.b09-0.fc31 updates  32 M

So, Linux's R (or at least Fedora's R) is dependent on Java.
-> Bad idea...

I'm using OpenJ9, so I can't install R like this without causing
significant problems.
(But please someone correct me if I'm wrong).

I will allocate some time to investigate Dirk's suggestions, however, I'm
thinking the best option is to continue using *Windows* as my primary OS,
and build Linux versions of R from source.

	[[alternative HTML version deleted]]


From r@||@@tubner @end|ng |rom gm@||@com  Wed Jan 15 08:14:56 2020
From: r@||@@tubner @end|ng |rom gm@||@com (Ralf Stubner)
Date: Wed, 15 Jan 2020 08:14:56 +0100
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <CAB8pepzzpXjxi3=o3KWgSDMb13eFsbTc85YRnc1+YHn=n+JRXA@mail.gmail.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
 <24092.42945.719678.758685@stat.math.ethz.ch>
 <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>
 <24093.31179.751562.718817@stat.math.ethz.ch>
 <CAB8pepxxy5sF=5AuqeRKY3S+n_fqRp62Zf-P0JPa9AJ6nRu-Wg@mail.gmail.com>
 <E1D23855-9070-4F49-AB1F-B47FFD6798C3@me.com>
 <CAB8pepzzpXjxi3=o3KWgSDMb13eFsbTc85YRnc1+YHn=n+JRXA@mail.gmail.com>
Message-ID: <CAFQwRQxAKpec+3gPvj26O9uL9Lsf0xyKyzfNeQ6=ZeBSnchcFg@mail.gmail.com>

On Wed, Jan 15, 2020 at 5:45 AM Abby Spurdle <spurdle.a at gmail.com> wrote:
> ...however, there's another problem.
>
> From the dependencies:
> R-java                   x86_64 3.6.2-1.fc31           updates  10 k
> R-java-devel             x86_64 3.6.2-1.fc31           updates 9.9 k
> java-1.8.0-openjdk       x86_64 1:1.8.0.232.b09-0.fc31 updates 281 k
> java-1.8.0-openjdk-devel x86_64 1:1.8.0.232.b09-0.fc31 updates 9.3 M
> java-1.8.0-openjdk-headless
>                          x86_64 1:1.8.0.232.b09-0.fc31 updates  32 M
>
> So, Linux's R (or at least Fedora's R) is dependent on Java.
> -> Bad idea...

You could install R-core (and probably R-core-devel) to get R without
the Java dependency.

cheerio
ralf


From |uc@r @end|ng |rom |edor@project@org  Wed Jan 15 10:59:46 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 15 Jan 2020 10:59:46 +0100
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <CAB8pepzzpXjxi3=o3KWgSDMb13eFsbTc85YRnc1+YHn=n+JRXA@mail.gmail.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
 <24092.42945.719678.758685@stat.math.ethz.ch>
 <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>
 <24093.31179.751562.718817@stat.math.ethz.ch>
 <CAB8pepxxy5sF=5AuqeRKY3S+n_fqRp62Zf-P0JPa9AJ6nRu-Wg@mail.gmail.com>
 <E1D23855-9070-4F49-AB1F-B47FFD6798C3@me.com>
 <CAB8pepzzpXjxi3=o3KWgSDMb13eFsbTc85YRnc1+YHn=n+JRXA@mail.gmail.com>
Message-ID: <CALEXWq1vJ9vVJK=ijQqCNzU0bFvTH3rbhiTAaHY-daB_B5zwdQ@mail.gmail.com>

A bit off-topic, but...

On Wed, 15 Jan 2020 at 05:45, Abby Spurdle <spurdle.a at gmail.com> wrote:
>
> > Which version of Fedora are you on?
>
> I've got Fedora 31.
> I just checked, and R 3.6.2 is available now.

R 3.6.2 was submitted a month ago for testing and reached stable 19
days ago [1]. At any time, you can see which version is available in
stable (updates repo) and in testing for all supported Fedora and EPEL
versions in [2].

> Progress...
> ...however, there's another problem.
>
> From the dependencies:
> R-java                   x86_64 3.6.2-1.fc31           updates  10 k
> R-java-devel             x86_64 3.6.2-1.fc31           updates 9.9 k
> java-1.8.0-openjdk       x86_64 1:1.8.0.232.b09-0.fc31 updates 281 k
> java-1.8.0-openjdk-devel x86_64 1:1.8.0.232.b09-0.fc31 updates 9.3 M
> java-1.8.0-openjdk-headless
>                          x86_64 1:1.8.0.232.b09-0.fc31 updates  32 M
>
> So, Linux's R (or at least Fedora's R) is dependent on Java.
> -> Bad idea...

(Not so) fresh news: R officially supports Java [3], and many packages
on CRAN use Java (at least 170 by my count). So if you simply install
"R", you are requesting a *full* R installation, which of course
includes Java. However, if you don't want Java nor any of these
packages, R-core and R-core-devel do not depend on Java, as Ralf
pointed out.

> I'm using OpenJ9, so I can't install R like this without causing
> significant problems.
> (But please someone correct me if I'm wrong).

Note though that the R-java bits do not depend on any specific version
of Java. Several versions of Java can coexist, and then you can switch
between them using alternatives [4].

[1] https://bodhi.fedoraproject.org/updates/FEDORA-2019-3d6f517d22
[2] https://src.fedoraproject.org/rpms/R
[3] https://cran.r-project.org/doc/manuals/r-devel/R-admin.html#Java-support
[4] https://fedoraproject.org/wiki/Java

-- 
I?aki ?car


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Wed Jan 15 11:34:39 2020
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Wed, 15 Jan 2020 11:34:39 +0100
Subject: [Rd] possible bug in win R-devel in check/test environment
In-Reply-To: <24093.55092.383362.709454@rob.eddelbuettel.com>
References: <71dd9543-bd8c-214f-9655-f011c889b7c1@insa-toulouse.fr>
 <24093.55092.383362.709454@rob.eddelbuettel.com>
Message-ID: <0603e09d-ff0d-ee4d-49c5-ea288519bb14@insa-toulouse.fr>

Hi Dirk,

Thanks for sharing your thoughts on the subject.? I have few notes next 
to it.

Le 14/01/2020 ? 15:59, Dirk Eddelbuettel a ?crit?:
> Hi Serguei,
>
> Nice analysis!
>
> On 14 January 2020 at 11:00, Serguei Sokol wrote:
> | During my recent r2sundials development, I've came across a strange test
> | failing during 'R CMD check' exclusively on win R-devel which I could
> | reproduce with a minimal example that I present here.
> | The toy packages testarma1 [1] and testarma2 [2] are minimal
> | modifications of a skeleton package produced by
> | RcppArmadillo.package.skeleton().
> | They are almost identical. The first one fails to passe its tests on win
> | R-devel [3] while the second one is OK [4]. The reason of test failing
> | in testarma1 boils down to not finding a package during tests (here
> | RcppArmadillo) although it is well present in LinkingTo field of the
> | DESCRIPTION file (the mechanism of the error is detailed in [5]). To
> | make the tests pass, I had to add RcppArmadillo and r2sundials to
> | 'Suggests:' field too (as can be seen in testarma2)
> |
> | In my understanding, the presence of a package name in the LinkingTo
> | field should be sufficient for finding it during the test phase.
>
> I thought so too. But thinking about it a little more it clears up a little.
It remains not clear for me why the tests of testarma1 fail on win 
R-devel and run OK on Linux R-devel ( 
https://builder.r-hub.io/status/testarma1_1.0.tar.gz-37bca609ce3b49149daa2f97d035098c 
)
If the reasoning you describe is the really intended one, it should work 
in similar way on all platforms, should not it?

>
> A bit more context: One can be more fine-grained on Depends. And Debian does
> that, and R sometimes followed Debian's model of declaring dependencies. One
> element we are missing here is to distinguish between _build-time_ needs (we
> call that Build-Depends: in Debian) and _run_time_ needs.  We currently only
> have the latter as Depends:, which for example pains a million dplyr users on
> Windows who have to download 120mb worth of our BH package because it is used
> to _build_ the binary zipfile, but not thereafter.  That is a wart.
+1

>
> Now, _LinkingTo_ always implies build-dependecies or else it would croak at
> that stage.
Currently WRE states about LinkingTo:
"Specifying a package in ?LinkingTo? suffices if these are C++ headers 
containing source code or static linking is done at installation: the 
packages do not need to be (and usually should not be) listed in the 
?Depends? or ?Imports? fields. This includes CRAN package BH and almost 
all users of RcppArmadillo and RcppEigen."

No mention of build-time or test-time is made. Moreover, regarding your 
advice to add packages to 'Imports', this phrase explicitly advises 
against it: "and usually should not be ...".

If it is a real intention of R developers, a little phrase in WRE like 
the following one could clarify the things:
"Note that packages listed in fields Depends, Imports and Suggests are 
visible during the test stage of 'R CMD check' command while those in 
LinkingTo are not."

>
> And I had assumed that this would cover all run-time but ...
>
> | Instead, one have to add it to 'Suggests:' field too.
>
> ... tests are indeed treated differently and this may just be a different
> code path.
>
> If you have something in Suggests: and test for it, you should condition the
> test.
Is it documented somewhere in such or similar words? (I mean official R 
documentation.)

>   I have argued that part a few times but mostly to no avail so I too now
> mostly give up and _unconditionally_ install Suggests to support tests when I
> run bulk tests for reverse dependencies.  But it is still wrong.
I am not so resolved to call it "wrong". After all why not? The main 
thing is to have a widely accepted consensus about it.
The packages underlying the tests like testthat, RUnit and alike are 
explicitly required to be listed in Suggests. So if the packages in 
Suggests are to be considered as optional including those ones you don't 
even have a chance to check the presence of packages like RcppArmadillo 
as the code containing this check cannot be run without testthat, RUnit 
and so on.

>
> So here the ball is in your court. Your tests for r2sundials should probably
> condition on RcppArmadillo being present and skip tests requiring it if it is
> not present.
In this case, this is not an option for me. I do want the tests to be 
run, not skipped.

>    Or, if you don't like that, make it an Imports: too.
I confirm, putting packages in Import, makes the tests run OK on win 
R-devel too (cf imports branch of testarma1 and the check log on 
https://win-builder.r-project.org/GQaZBdmn2U1x/00check.log )
But I prefer to leave them in Suggests if no their functions are used in 
the body of the package (hence no real import is required).

Best,
Serguei.

>
> Hope this helps.
>
> Cheers, Dirk
>
> | Am I wrong or this behavior is unexpected?
> |
> | Best,
> | Serguei.
> |
> | [1] https://github.com/sgsokol/testarma1
> | <https://github.com/sgsokol/testarma2>
> | [2] https://github.com/sgsokol/testarma2
> | [3] https://win-builder.r-project.org/v0nBoFleT48y/00check.log
> | [4] https://win-builder.r-project.org/TMKbnEBncFNc/00check.log
> | [5] https://github.com/RcppCore/Rcpp/issues/1026
> |
> | <https://github.com/sgsokol/testarma2>
> |
> | ______________________________________________
> | R-devel at r-project.org mailing list
> | https://stat.ethz.ch/mailman/listinfo/r-devel
>


From |@g|ne @end|ng |rom p@@jd@org  Wed Jan 15 15:13:24 2020
From: |@g|ne @end|ng |rom p@@jd@org (=?iso-8859-1?Q?IAGO_GIN=C9_V=C1ZQUEZ?=)
Date: Wed, 15 Jan 2020 14:13:24 +0000
Subject: [Rd] A bug understanding F relative to FALSE?
Message-ID: <AM6PR02MB43129D66D628C2B3A821C80992370@AM6PR02MB4312.eurprd02.prod.outlook.com>

Hi all,

Is the next behaviour suitable?

identical(F,FALSE)

## [1] TRUE

utils::getParseData(parse(text = "c(F,FALSE)", keep.so=rce = TRUE))

##    line1 col1 line2 col2 id parent                token terminal  text
## 14     1    1     1   10 14      0                 expr    FALSE
## 1      1    1     1    1  1      3 SYMBOL_FUNCTION_CALL     TRUE     c
## 3      1    1     1    1  3     14                 expr    FALSE
## 2      1    2     1    2  2     14                  '('     TRUE     (
## 4      1    3     1    3  4      6               SYMBOL     TRUE     F
## 6      1    3     1    3  6     14                 expr    FALSE
## 5      1    4     1    4  5     14                  ','     TRUE     ,
## 9      1    5     1    9  9     10            NUM_CONST     TRUE FALSE
## 10     1    5     1    9 10     14                 expr    FALSE
## 11     1   10     1   10 11     14                  ')'     TRUE     )

I would expect that token for F is the same as token for FALSE.


Thank you!

Iago


	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Wed Jan 15 15:18:57 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 15 Jan 2020 15:18:57 +0100
Subject: [Rd] A bug understanding F relative to FALSE?
In-Reply-To: <AM6PR02MB43129D66D628C2B3A821C80992370@AM6PR02MB4312.eurprd02.prod.outlook.com>
References: <AM6PR02MB43129D66D628C2B3A821C80992370@AM6PR02MB4312.eurprd02.prod.outlook.com>
Message-ID: <CALEXWq3dKapChuMk6ZmVU1eksT0D_CLzzQ+iT9UycUX1UMVqRw@mail.gmail.com>

On Wed, 15 Jan 2020 at 15:14, IAGO GIN? V?ZQUEZ <i.gine at pssjd.org> wrote:
>
> Hi all,
>
> Is the next behaviour suitable?
>
> identical(F,FALSE)
>
> ## [1] TRUE
>
> utils::getParseData(parse(text = "c(F,FALSE)", keep.so=rce = TRUE))
>
> ##    line1 col1 line2 col2 id parent                token terminal  text
> ## 14     1    1     1   10 14      0                 expr    FALSE
> ## 1      1    1     1    1  1      3 SYMBOL_FUNCTION_CALL     TRUE     c
> ## 3      1    1     1    1  3     14                 expr    FALSE
> ## 2      1    2     1    2  2     14                  '('     TRUE     (
> ## 4      1    3     1    3  4      6               SYMBOL     TRUE     F
> ## 6      1    3     1    3  6     14                 expr    FALSE
> ## 5      1    4     1    4  5     14                  ','     TRUE     ,
> ## 9      1    5     1    9  9     10            NUM_CONST     TRUE FALSE
> ## 10     1    5     1    9 10     14                 expr    FALSE
> ## 11     1   10     1   10 11     14                  ')'     TRUE     )
>
> I would expect that token for F is the same as token for FALSE.

>From the manual:

?TRUE? and ?FALSE? are reserved words denoting logical constants
    in the R language, whereas ?T? and ?F? are global variables whose
    initial values set to these.

I?aki


From jmount @end|ng |rom w|n-vector@com  Wed Jan 15 15:18:01 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Wed, 15 Jan 2020 06:18:01 -0800
Subject: [Rd] A bug understanding F relative to FALSE?
In-Reply-To: <AM6PR02MB43129D66D628C2B3A821C80992370@AM6PR02MB4312.eurprd02.prod.outlook.com>
References: <AM6PR02MB43129D66D628C2B3A821C80992370@AM6PR02MB4312.eurprd02.prod.outlook.com>
Message-ID: <9254F1E2-22BA-404B-AFF1-02FC9499DB06@win-vector.com>

>From help(F): TRUE and FALSE are reserved <http://127.0.0.1:39090/help/library/base/help/reserved> words denoting logical constants in the Rlanguage, whereas T and F are global variables whose initial values set to these.

> On Jan 15, 2020, at 6:13 AM, IAGO GIN? V?ZQUEZ <i.gine at pssjd.org> wrote:
> 
> Hi all,
> 
> Is the next behaviour suitable?
> 
> identical(F,FALSE)
> 
> ## [1] TRUE
> 
> utils::getParseData(parse(text = "c(F,FALSE)", keep.so=rce = TRUE))
> 
> ##    line1 col1 line2 col2 id parent                token terminal  text
> ## 14     1    1     1   10 14      0                 expr    FALSE
> ## 1      1    1     1    1  1      3 SYMBOL_FUNCTION_CALL     TRUE     c
> ## 3      1    1     1    1  3     14                 expr    FALSE
> ## 2      1    2     1    2  2     14                  '('     TRUE     (
> ## 4      1    3     1    3  4      6               SYMBOL     TRUE     F
> ## 6      1    3     1    3  6     14                 expr    FALSE
> ## 5      1    4     1    4  5     14                  ','     TRUE     ,
> ## 9      1    5     1    9  9     10            NUM_CONST     TRUE FALSE
> ## 10     1    5     1    9 10     14                 expr    FALSE
> ## 11     1   10     1   10 11     14                  ')'     TRUE     )
> 
> I would expect that token for F is the same as token for FALSE.
> 
> 
> Thank you!
> 
> Iago
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

---------------
John Mount
http://www.win-vector.com/ <http://www.win-vector.com/> 
Our book: Practical Data Science with R
http://practicaldatascience.com <http://practicaldatascience.com/> 






	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Wed Jan 15 13:59:55 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 15 Jan 2020 13:59:55 +0100
Subject: [Rd] [R] choose(n, k) as n approaches k
In-Reply-To: <0E56B63E-E9C5-4C92-B9ED-F73CEAF9C053@gmail.com>
References: <A3522327-CF54-4960-A09F-D334C408BB84@pitt.edu>
 <65C7647D-9E6C-4D4A-B8F7-63EBA0320E09@gmail.com>
 <ae3139e1-c728-83e5-0aa7-a17135b31df6@gmail.com>
 <6B40064A-8B62-4FC3-967D-3695F2E46EFA@gmail.com>
 <7cf77331-6ee2-a980-e781-8ee2a6e8dad6@gmail.com>
 <0E56B63E-E9C5-4C92-B9ED-F73CEAF9C053@gmail.com>
Message-ID: <8ED01E47-7C5E-45CA-B797-145BE52977F2@gmail.com>


Fix committed to R-devel w/regression test. I settled for just doing

k = R_forceint(n - k) 

inside 

if(n-k < k && n >= 0 && R_IS_INT(n)) k = n-k; /* <- Symmetry */

so that k stays integer. 

In principle, you also could prefix this code 

	r = n;
	for(j = 2; j <= k; j++)
	    r *= (n-j+1)/j;
	return R_IS_INT(n) ? R_forceint(r) : r;
	/* might have got rounding errors */
with

	if(R_IS_INT(n)) n = R_forceint(n);

but as I said, I believe that is really a no-op because of the rounding at the end.

-pd



> On 14 Jan 2020, at 19:20 , peter dalgaard <pdalgd at gmail.com> wrote:
> 
> OK, I see what you mean. But in those cases, we don't get the catastrophic failures from the 
> 
>        if (k <  0) return 0.;
>        if (k == 0) return 1.;
>        /* else: k >= 1 */
> 
> part, because at that point k is sure to be integer, possibly after rounding. 
> 
> It is when n-k is approximately but not exactly zero and we should return 1, that we either return 0 (negative case) or n (positive case; because the n(n-1)(n-2)... product has at least one factor). In the other cases, we get 1 or n(n-1)(n-2)...(n-k+1) which if n is near-integer gets rounded to produce an integer, due to the
> 
>        return R_IS_INT(n) ? R_forceint(r) : r;
> 
> part.
> 
> -pd
> 
> 
> 
>> On 14 Jan 2020, at 17:02 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>> 
>> On 14/01/2020 10:50 a.m., peter dalgaard wrote:
>>>> On 14 Jan 2020, at 16:21 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>> 
>>>> On 14/01/2020 10:07 a.m., peter dalgaard wrote:
>>>>> Yep, that looks wrong (probably want to continue discussion over on R-devel)
>>>>> I think the culprit is here (in src/nmath/choose.c)
>>>>>     if (k < k_small_max) {
>>>>>        int j;
>>>>>        if(n-k < k && n >= 0 && R_IS_INT(n)) k = n-k; /* <- Symmetry */
>>>>>        if (k <  0) return 0.;
>>>>>        if (k == 0) return 1.;
>>>>>        /* else: k >= 1 */
>>>>> if n is a near-integer, then k can become non-integer and negative. In your case,
>>>>> n == 4 - 1e-7
>>>>> k == 4
>>>>> n - k == -1e-7 < 4
>>>>> n >= 0
>>>>> R_IS_INT(n) = TRUE (relative diff < 1e-7 is allowed)
>>>>> so k gets set to
>>>>> n - k == -1e-7
>>>>> which is less than 0, so we return 0. However, as you point out, 1 would be more reasonable and in accordance with the limit as n -> 4, e.g.
>>>>>> factorial(4 - 1e-10)/factorial(1e-10)/factorial(4) -1
>>>>> [1] -9.289025e-11
>>>>> I guess that the fix could be as simple as replacing n by R_forceint(n) in the k = n - k step.
>>>> 
>>>> I think that would break symmetry:  you want choose(n, k) to equal choose(n, n-k) when n is very close to an integer.  So I'd suggest the replacement whenever R_IS_INT(n) is true.
>>>> 
>>> But choose() very deliberately ensures that k is integer, so choose(n, n-k) is ill-defined for non-integer n.
>> 
>> That's only true if there's a big difference.  I'd be worried about cases where n and k are close to integers (within 1e-7).  In those cases, k is silently rounded to integer.  As I read your suggestion, n would only be rounded to integer if k > n-k.  I think both n and k should be rounded to integer in this near-integer situation, regardless of the value of k.
>> 
>> I believe that lchoose(n, k) already does this.
>> 
>> Duncan Murdoch
>> 
>>>    double r, k0 = k;
>>>    k = R_forceint(k);
>>> ...
>>>    if (fabs(k - k0) > 1e-7)
>>>        MATHLIB_WARNING2(_("'k' (%.2f) must be integer, rounded to %.0f"), k0, k);
>>> 
>>>> Duncan Murdoch
>>>> 
>>>>> -pd
>>>>>> On 14 Jan 2020, at 00:33 , Wright, Erik Scott <ESWRIGHT at pitt.edu> wrote:
>>>>>> 
>>>>>> This struck me as incorrect:
>>>>>> 
>>>>>>> choose(3.999999, 4)
>>>>>> [1] 0.9999979
>>>>>>> choose(3.9999999, 4)
>>>>>> [1] 0
>>>>>>> choose(4, 4)
>>>>>> [1] 1
>>>>>>> choose(4.0000001, 4)
>>>>>> [1] 4
>>>>>>> choose(4.000001, 4)
>>>>>> [1] 1.000002
>>>>>> 
>>>>>> Should base::choose(n, k) check whether n is within machine precision of k and return 1?
>>>>>> 
>>>>>> Thanks,
>>>>>> Erik
>>>>>> 
>>>>>> ***
>>>>>> sessionInfo()
>>>>>> R version 3.6.0 beta (2019-04-15 r76395)
>>>>>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>>>>>> Running under: macOS High Sierra 10.13.6
>>>>>> 
>>>>>> 	[[alternative HTML version deleted]]
>>>>>> 
>>>>>> ______________________________________________
>>>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>>>>> and provide commented, minimal, self-contained, reproducible code.
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Wed Jan 15 10:48:54 2020
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Wed, 15 Jan 2020 10:48:54 +0100
Subject: [Rd] [R] choose(n, k) as n approaches k
In-Reply-To: <7C33C35A-1433-4DEF-A30D-A2710DCFFE8F@gmail.com>
References: <A3522327-CF54-4960-A09F-D334C408BB84@pitt.edu>
 <65C7647D-9E6C-4D4A-B8F7-63EBA0320E09@gmail.com>
 <ae3139e1-c728-83e5-0aa7-a17135b31df6@gmail.com>
 <6B40064A-8B62-4FC3-967D-3695F2E46EFA@gmail.com>
 <7cf77331-6ee2-a980-e781-8ee2a6e8dad6@gmail.com>
 <0E56B63E-E9C5-4C92-B9ED-F73CEAF9C053@gmail.com>
 <DA3BC314-5415-47A3-AA73-4FA3A36CAECA@win-vector.com>
 <7C33C35A-1433-4DEF-A30D-A2710DCFFE8F@gmail.com>
Message-ID: <92036819-4DAF-42F8-BB34-B4800104B576@gmail.com>


More importantly, the gamma function is not nice for negative integer arguments, so gchoose() blows up for integer k and n=-1,-2,... 

> gchoose(-2,4)
[1] NaN
Warning messages:
1: In gamma(n + 1) : NaNs produced
2: In gamma(n + 1 - k) : NaNs produced
> choose(-2,4)
[1] 5

and so does the formula with beta(). 

Of course, choose(-r, k) is exactly what you need for the traditional formulation of the negative binomial distribution as the number of successes to get r failures. 

-pd

> On 15 Jan 2020, at 01:25 , peter dalgaard <pdalgd at gmail.com> wrote:
> 
> That crossed my mind too, but presumably someone designed choose() to handle the near-integer cases specially. Otherwise, we already have beta() -- you just need to remember what the connection is ;-). 
> 
> I would expect that it has to do with the binomial and negative binomial distributions, but I can't offhand picture a calculation that leads to integer k, n plus/minus a tiny numerical error of the sort that one may encounter with, say, seq(). 
> 
> -pd
> 
> ;-) choose(a,b) = 1/(beta(a-b+1,b+1)*(a+1)) or thereabouts
> 
>> On 14 Jan 2020, at 19:36 , John Mount <jmount at win-vector.com> wrote:
>> 
>> 
>> At the risk of throwing oil on a fire.  If we are talking about fractional values of choose() doesn't it make sense to look to the gamma function for the correct analytic continuation?  In particular k<0 may not imply the function should evaluate to zero until we get k<=-1.
>> 
>> Example:
>> 
>> ``` r
>> choose(5, 4)
>> #> [1] 5
>> 
>> gchoose <- function(n, k) { 
>>  gamma(n+1)/(gamma(n+1-k) * gamma(k+1))
>> }
>> 
>> gchoose(5, 4)
>> #> [1] 5
>> gchoose(5, 0)
>> #> [1] 1
>> gchoose(5, -0.5)
>> #> [1] 0.2351727
>> ```
>> 
>>> On Jan 14, 2020, at 10:20 AM, peter dalgaard <pdalgd at gmail.com> wrote:
>>> 
>>> OK, I see what you mean. But in those cases, we don't get the catastrophic failures from the 
>>> 
>>>       if (k <  0) return 0.;
>>>       if (k == 0) return 1.;
>>>       /* else: k >= 1 */
>>> 
>>> part, because at that point k is sure to be integer, possibly after rounding. 
>>> 
>>> It is when n-k is approximately but not exactly zero and we should return 1, that we either return 0 (negative case) or n (positive case; because the n(n-1)(n-2)... product has at least one factor). In the other cases, we get 1 or n(n-1)(n-2)...(n-k+1) which if n is near-integer gets rounded to produce an integer, due to the
>>> 
>>>       return R_IS_INT(n) ? R_forceint(r) : r;
>>> 
>>> part.
>>> 
>>> -pd
>>> 
>>> 
>>> 
>>>> On 14 Jan 2020, at 17:02 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>> 
>>>> On 14/01/2020 10:50 a.m., peter dalgaard wrote:
>>>>>> On 14 Jan 2020, at 16:21 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>>> 
>>>>>> On 14/01/2020 10:07 a.m., peter dalgaard wrote:
>>>>>>> Yep, that looks wrong (probably want to continue discussion over on R-devel)
>>>>>>> I think the culprit is here (in src/nmath/choose.c)
>>>>>>>    if (k < k_small_max) {
>>>>>>>       int j;
>>>>>>>       if(n-k < k && n >= 0 && R_IS_INT(n)) k = n-k; /* <- Symmetry */
>>>>>>>       if (k <  0) return 0.;
>>>>>>>       if (k == 0) return 1.;
>>>>>>>       /* else: k >= 1 */
>>>>>>> if n is a near-integer, then k can become non-integer and negative. In your case,
>>>>>>> n == 4 - 1e-7
>>>>>>> k == 4
>>>>>>> n - k == -1e-7 < 4
>>>>>>> n >= 0
>>>>>>> R_IS_INT(n) = TRUE (relative diff < 1e-7 is allowed)
>>>>>>> so k gets set to
>>>>>>> n - k == -1e-7
>>>>>>> which is less than 0, so we return 0. However, as you point out, 1 would be more reasonable and in accordance with the limit as n -> 4, e.g.
>>>>>>>> factorial(4 - 1e-10)/factorial(1e-10)/factorial(4) -1
>>>>>>> [1] -9.289025e-11
>>>>>>> I guess that the fix could be as simple as replacing n by R_forceint(n) in the k = n - k step.
>>>>>> 
>>>>>> I think that would break symmetry:  you want choose(n, k) to equal choose(n, n-k) when n is very close to an integer.  So I'd suggest the replacement whenever R_IS_INT(n) is true.
>>>>>> 
>>>>> But choose() very deliberately ensures that k is integer, so choose(n, n-k) is ill-defined for non-integer n.
>>>> 
>>>> That's only true if there's a big difference.  I'd be worried about cases where n and k are close to integers (within 1e-7).  In those cases, k is silently rounded to integer.  As I read your suggestion, n would only be rounded to integer if k > n-k.  I think both n and k should be rounded to integer in this near-integer situation, regardless of the value of k.
>>>> 
>>>> I believe that lchoose(n, k) already does this.
>>>> 
>>>> Duncan Murdoch
>>>> 
>>>>>   double r, k0 = k;
>>>>>   k = R_forceint(k);
>>>>> ...
>>>>>   if (fabs(k - k0) > 1e-7)
>>>>>       MATHLIB_WARNING2(_("'k' (%.2f) must be integer, rounded to %.0f"), k0, k);
>>>>> 
>>>>>> Duncan Murdoch
>>>>>> 
>>>>>>> -pd
>>>>>>>> On 14 Jan 2020, at 00:33 , Wright, Erik Scott <ESWRIGHT at pitt.edu> wrote:
>>>>>>>> 
>>>>>>>> This struck me as incorrect:
>>>>>>>> 
>>>>>>>>> choose(3.999999, 4)
>>>>>>>> [1] 0.9999979
>>>>>>>>> choose(3.9999999, 4)
>>>>>>>> [1] 0
>>>>>>>>> choose(4, 4)
>>>>>>>> [1] 1
>>>>>>>>> choose(4.0000001, 4)
>>>>>>>> [1] 4
>>>>>>>>> choose(4.000001, 4)
>>>>>>>> [1] 1.000002
>>>>>>>> 
>>>>>>>> Should base::choose(n, k) check whether n is within machine precision of k and return 1?
>>>>>>>> 
>>>>>>>> Thanks,
>>>>>>>> Erik
>>>>>>>> 
>>>>>>>> ***
>>>>>>>> sessionInfo()
>>>>>>>> R version 3.6.0 beta (2019-04-15 r76395)
>>>>>>>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>>>>>>>> Running under: macOS High Sierra 10.13.6
>>>>>>>> 
>>>>>>>> 	[[alternative HTML version deleted]]
>>>>>>>> 
>>>>>>>> ______________________________________________
>>>>>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>>>>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>>>>>>> and provide commented, minimal, self-contained, reproducible code.
>>> 
>>> -- 
>>> Peter Dalgaard, Professor,
>>> Center for Statistics, Copenhagen Business School
>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>> Phone: (+45)38153501
>>> Office: A 4.23
>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> ---------------
>> John Mount
>> http://www.win-vector.com/ 
>> Our book: Practical Data Science with R
>> http://practicaldatascience.com 
>> 
>> 
>> 
>> 
>> 
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Sun Jan 19 15:45:46 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Sun, 19 Jan 2020 08:45:46 -0600
Subject: [Rd] rpois(9, 1e10)
Message-ID: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>

Hello, All:


 ????? Consider:


Browse[2]> set.seed(1)
Browse[2]> rpois(9, 1e10)
NAs produced[1] NA NA NA NA NA NA NA NA NA


 ????? Should this happen?


 ????? I think that for, say, lambda>1e6, rpois should return rnorm(., 
lambda, sqrt(lambda)).


 ????? For my particular Monte Carlo, I have replaced my call to rpois 
with a call to the following:


 ?rpois. <- function(n, lambda){
 ????? n2 <- max(length(n), length(lambda))
 ????? n <- rep_len(n, n2)
 ????? lambda <- rep_len(lambda, n2)
#
 ????? big <- (lambda>1e6)
 ????? out <- rep(NA, n2)
 ????? out[big] <- rnorm(sum(big), lambda[big], sqrt(lambda[big]))
 ????? out[!big] <- rpois(sum(!big), lambda[!big])
 ????? out
 ? }


 ????? Comments?
 ????? Thanks,
 ????? Spencer Graves


From btyner @end|ng |rom gm@||@com  Sun Jan 19 16:34:59 2020
From: btyner @end|ng |rom gm@||@com (Benjamin Tyner)
Date: Sun, 19 Jan 2020 10:34:59 -0500
Subject: [Rd] rpois(9, 1e10)
In-Reply-To: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
Message-ID: <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>

> ------------------------------------------------------------------------
> Hello, All:
>
>
>   ????? Consider:
>
>
> Browse[2]> set.seed(1)
> Browse[2]> rpois(9, 1e10)
> NAs produced[1] NA NA NA NA NA NA NA NA NA
>
>
>   ????? Should this happen?
>
>
>   ????? I think that for, say, lambda>1e6, rpois should return rnorm(.,
> lambda, sqrt(lambda)).
But need to implement carefully; rpois should always return a 
non-negative integer, whereas rnorm always returns numeric...


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Sun Jan 19 16:42:59 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Sun, 19 Jan 2020 09:42:59 -0600
Subject: [Rd] rpois(9, 1e10)
In-Reply-To: <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
Message-ID: <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>



On 2020-01-19 09:34, Benjamin Tyner wrote:
>> ------------------------------------------------------------------------
>> Hello, All:
>>
>>
>> ? ????? Consider:
>>
>>
>> Browse[2]> set.seed(1)
>> Browse[2]> rpois(9, 1e10)
>> NAs produced[1] NA NA NA NA NA NA NA NA NA
>>
>>
>> ? ????? Should this happen?
>>
>>
>> ? ????? I think that for, say, lambda>1e6, rpois should return rnorm(.,
>> lambda, sqrt(lambda)).
> But need to implement carefully; rpois should always return a 
> non-negative integer, whereas rnorm always returns numeric...
>

 ????? Thanks for the reply.


 ????? However, I think it's not acceptable to get an NA from a number 
that cannot be expressed as an integer.? Whenever a randomly generated 
number would exceed .Machine$integer.max, the choice is between 
returning NA or a non-integer numeric.? Consider:


 > 2*.Machine$integer.max
[1] 4294967294
 > as.integer(2*.Machine$integer.max)
[1] NA
Warning message:
NAs introduced by coercion to integer range


 ????? I'd rather have the non-integer numeric.


 ????? Spencer


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Sun Jan 19 16:47:27 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Sun, 19 Jan 2020 10:47:27 -0500
Subject: [Rd] rpois(9, 1e10)
In-Reply-To: <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
Message-ID: <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>

Maybe there should be code for 64 bit R to use long long or the like?

On Sun, Jan 19, 2020 at 10:45 AM Spencer Graves <spencer.graves at prodsyse.com>
wrote:

>
>
> On 2020-01-19 09:34, Benjamin Tyner wrote:
> >> ------------------------------------------------------------------------
> >> Hello, All:
> >>
> >>
> >>         Consider:
> >>
> >>
> >> Browse[2]> set.seed(1)
> >> Browse[2]> rpois(9, 1e10)
> >> NAs produced[1] NA NA NA NA NA NA NA NA NA
> >>
> >>
> >>         Should this happen?
> >>
> >>
> >>         I think that for, say, lambda>1e6, rpois should return rnorm(.,
> >> lambda, sqrt(lambda)).
> > But need to implement carefully; rpois should always return a
> > non-negative integer, whereas rnorm always returns numeric...
> >
>
>        Thanks for the reply.
>
>
>        However, I think it's not acceptable to get an NA from a number
> that cannot be expressed as an integer.  Whenever a randomly generated
> number would exceed .Machine$integer.max, the choice is between
> returning NA or a non-integer numeric.  Consider:
>
>
>  > 2*.Machine$integer.max
> [1] 4294967294
>  > as.integer(2*.Machine$integer.max)
> [1] NA
> Warning message:
> NAs introduced by coercion to integer range
>
>
>        I'd rather have the non-integer numeric.
>
>
>        Spencer
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From btyner @end|ng |rom gm@||@com  Sun Jan 19 17:20:21 2020
From: btyner @end|ng |rom gm@||@com (Benjamin Tyner)
Date: Sun, 19 Jan 2020 11:20:21 -0500
Subject: [Rd] rpois(9, 1e10)
In-Reply-To: <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
Message-ID: <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>

So imagine rpois is changed, such that the storage mode of its return 
value is sometimes integer and sometimes numeric. Then imagine the case 
where lambda is itself a realization of a random variable. Do we really 
want the storage mode to inherit that randomness?


On 1/19/20 10:47 AM, Avraham Adler wrote:
> Maybe there should be code for 64 bit R to use long long or the like?
>
> On Sun, Jan 19, 2020 at 10:45 AM Spencer Graves 
> <spencer.graves at prodsyse.com <mailto:spencer.graves at prodsyse.com>> wrote:
>
>
>
>     On 2020-01-19 09:34, Benjamin Tyner wrote:
>     >>
>     ------------------------------------------------------------------------
>     >> Hello, All:
>     >>
>     >>
>     >> ? ????? Consider:
>     >>
>     >>
>     >> Browse[2]> set.seed(1)
>     >> Browse[2]> rpois(9, 1e10)
>     >> NAs produced[1] NA NA NA NA NA NA NA NA NA
>     >>
>     >>
>     >> ? ????? Should this happen?
>     >>
>     >>
>     >> ? ????? I think that for, say, lambda>1e6, rpois should return
>     rnorm(.,
>     >> lambda, sqrt(lambda)).
>     > But need to implement carefully; rpois should always return a
>     > non-negative integer, whereas rnorm always returns numeric...
>     >
>
>     ?????? Thanks for the reply.
>
>
>     ?????? However, I think it's not acceptable to get an NA from a
>     number
>     that cannot be expressed as an integer.? Whenever a randomly
>     generated
>     number would exceed .Machine$integer.max, the choice is between
>     returning NA or a non-integer numeric.? Consider:
>
>
>     ?> 2*.Machine$integer.max
>     [1] 4294967294
>     ?> as.integer(2*.Machine$integer.max)
>     [1] NA
>     Warning message:
>     NAs introduced by coercion to integer range
>
>
>     ?????? I'd rather have the non-integer numeric.
>
>
>     ?????? Spencer
>
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>
> -- 
> Sent from Gmail Mobile


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Sun Jan 19 17:28:00 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Sun, 19 Jan 2020 11:28:00 -0500
Subject: [Rd] rpois(9, 1e10)
In-Reply-To: <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
Message-ID: <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>

Technically, lambda can always be numeric. It is the observations which
must be integral.

Would hitting everything larger than maxint or maxlonglong with floor or
round fundamentally change the distribution? Well, yes, but enough that it
would matter over process risk?

Avi

On Sun, Jan 19, 2020 at 11:20 AM Benjamin Tyner <btyner at gmail.com> wrote:

> So imagine rpois is changed, such that the storage mode of its return
> value is sometimes integer and sometimes numeric. Then imagine the case
> where lambda is itself a realization of a random variable. Do we really
> want the storage mode to inherit that randomness?
>
>
> On 1/19/20 10:47 AM, Avraham Adler wrote:
> > Maybe there should be code for 64 bit R to use long long or the like?
> >
> > On Sun, Jan 19, 2020 at 10:45 AM Spencer Graves
> > <spencer.graves at prodsyse.com <mailto:spencer.graves at prodsyse.com>>
> wrote:
> >
> >
> >
> >     On 2020-01-19 09:34, Benjamin Tyner wrote:
> >     >>
> >
>  ------------------------------------------------------------------------
> >     >> Hello, All:
> >     >>
> >     >>
> >     >>         Consider:
> >     >>
> >     >>
> >     >> Browse[2]> set.seed(1)
> >     >> Browse[2]> rpois(9, 1e10)
> >     >> NAs produced[1] NA NA NA NA NA NA NA NA NA
> >     >>
> >     >>
> >     >>         Should this happen?
> >     >>
> >     >>
> >     >>         I think that for, say, lambda>1e6, rpois should return
> >     rnorm(.,
> >     >> lambda, sqrt(lambda)).
> >     > But need to implement carefully; rpois should always return a
> >     > non-negative integer, whereas rnorm always returns numeric...
> >     >
> >
> >            Thanks for the reply.
> >
> >
> >            However, I think it's not acceptable to get an NA from a
> >     number
> >     that cannot be expressed as an integer.  Whenever a randomly
> >     generated
> >     number would exceed .Machine$integer.max, the choice is between
> >     returning NA or a non-integer numeric.  Consider:
> >
> >
> >      > 2*.Machine$integer.max
> >     [1] 4294967294
> >      > as.integer(2*.Machine$integer.max)
> >     [1] NA
> >     Warning message:
> >     NAs introduced by coercion to integer range
> >
> >
> >            I'd rather have the non-integer numeric.
> >
> >
> >            Spencer
> >
> >     ______________________________________________
> >     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> >     https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > --
> > Sent from Gmail Mobile
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Sun Jan 19 19:58:22 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Sun, 19 Jan 2020 12:58:22 -0600
Subject: [Rd] rpois(9, 1e10)
In-Reply-To: <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
Message-ID: <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>

 ????? This issue arose for me in simulations to estimate confidence, 
prediction, and tolerance intervals from glm(., family=poisson) fits 
embedded in a BMA::bic.glm fit using a simulate.bic.glm function I added 
to the development version of Ecfun, available at 
"https://github.com/sbgraves237/Ecfun".? This is part of a vignette I'm 
developing, available at 
"https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd". 
This includes a simulated mean of a mixture of Poissons that exceeds 
2e22.? It doesn't seem unreasonable to me to have rpois output a 
numerics rather than integers when a number simulated exceeds 
.Machine$integer.max.? And it does seem to make less sense in such cases 
to return NAs.


 ?????? Alternatively, might it make sense to add another argument to 
rpois to give the user the choice?? E.g., an argument "bigOutput" with 
(I hope) default = "numeric" and "NA" as a second option.? Or NA is the 
default, so no code that relied that feature of the current code would 
be broken by the change.? If someone wanted to use arbitrary precision 
arithmetic, they could write their own version of this function with 
"arbitraryPrecision" as an optional value for the "bigOutput" argument.


 ????? Comments?
 ????? Thanks,
 ????? Spencer Graves


On 2020-01-19 10:28, Avraham Adler wrote:
> Technically, lambda can always be numeric. It is the observations 
> which must be integral.
>
> Would hitting everything larger than maxint or maxlonglong with floor 
> or round fundamentally change the distribution? Well, yes, but enough 
> that it would matter over process risk?
>
> Avi
>
> On Sun, Jan 19, 2020 at 11:20 AM Benjamin Tyner <btyner at gmail.com 
> <mailto:btyner at gmail.com>> wrote:
>
>     So imagine rpois is changed, such that the storage mode of its return
>     value is sometimes integer and sometimes numeric. Then imagine the
>     case
>     where lambda is itself a realization of a random variable. Do we
>     really
>     want the storage mode to inherit that randomness?
>
>
>     On 1/19/20 10:47 AM, Avraham Adler wrote:
>     > Maybe there should be code for 64 bit R to use long long or the
>     like?
>     >
>     > On Sun, Jan 19, 2020 at 10:45 AM Spencer Graves
>     > <spencer.graves at prodsyse.com
>     <mailto:spencer.graves at prodsyse.com>
>     <mailto:spencer.graves at prodsyse.com
>     <mailto:spencer.graves at prodsyse.com>>> wrote:
>     >
>     >
>     >
>     >? ? ?On 2020-01-19 09:34, Benjamin Tyner wrote:
>     >? ? ?>>
>     >
>     ?------------------------------------------------------------------------
>     >? ? ?>> Hello, All:
>     >? ? ?>>
>     >? ? ?>>
>     >? ? ?>> ? ????? Consider:
>     >? ? ?>>
>     >? ? ?>>
>     >? ? ?>> Browse[2]> set.seed(1)
>     >? ? ?>> Browse[2]> rpois(9, 1e10)
>     >? ? ?>> NAs produced[1] NA NA NA NA NA NA NA NA NA
>     >? ? ?>>
>     >? ? ?>>
>     >? ? ?>> ? ????? Should this happen?
>     >? ? ?>>
>     >? ? ?>>
>     >? ? ?>> ? ????? I think that for, say, lambda>1e6, rpois should
>     return
>     >? ? ?rnorm(.,
>     >? ? ?>> lambda, sqrt(lambda)).
>     >? ? ?> But need to implement carefully; rpois should always return a
>     >? ? ?> non-negative integer, whereas rnorm always returns numeric...
>     >? ? ?>
>     >
>     >? ? ??????? Thanks for the reply.
>     >
>     >
>     >? ? ??????? However, I think it's not acceptable to get an NA from a
>     >? ? ?number
>     >? ? ?that cannot be expressed as an integer.? Whenever a randomly
>     >? ? ?generated
>     >? ? ?number would exceed .Machine$integer.max, the choice is between
>     >? ? ?returning NA or a non-integer numeric.? Consider:
>     >
>     >
>     >? ? ??> 2*.Machine$integer.max
>     >? ? ?[1] 4294967294
>     >? ? ??> as.integer(2*.Machine$integer.max)
>     >? ? ?[1] NA
>     >? ? ?Warning message:
>     >? ? ?NAs introduced by coercion to integer range
>     >
>     >
>     >? ? ??????? I'd rather have the non-integer numeric.
>     >
>     >
>     >? ? ??????? Spencer
>     >
>     >? ? ?______________________________________________
>     > R-devel at r-project.org <mailto:R-devel at r-project.org>
>     <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
>     mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>     >
>     > --
>     > Sent from Gmail Mobile
>
> -- 
> Sent from Gmail Mobile


	[[alternative HTML version deleted]]


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Sun Jan 19 20:01:37 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Sun, 19 Jan 2020 14:01:37 -0500
Subject: [Rd] rpois(9, 1e10)
In-Reply-To: <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
Message-ID: <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>

Crazy thought, but being that a sum of Poissons is Poisson in the sum, can
you break your ?big? simulation into the sum of a few smaller ones? Or is
the order of magnitude difference just too great?

On Sun, Jan 19, 2020 at 1:58 PM Spencer Graves <spencer.graves at prodsyse.com>
wrote:

>       This issue arose for me in simulations to estimate confidence,
> prediction, and tolerance intervals from glm(., family=poisson) fits
> embedded in a BMA::bic.glm fit using a simulate.bic.glm function I added to
> the development version of Ecfun, available at
> "https://github.com/sbgraves237/Ecfun"
> <https://github.com/sbgraves237/Ecfun>.  This is part of a vignette I'm
> developing, available at
> "https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd"
> <https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd>.
> This includes a simulated mean of a mixture of Poissons that exceeds 2e22.
> It doesn't seem unreasonable to me to have rpois output a numerics rather
> than integers when a number simulated exceeds .Machine$integer.max.  And it
> does seem to make less sense in such cases to return NAs.
>
>
>        Alternatively, might it make sense to add another argument to rpois
> to give the user the choice?  E.g., an argument "bigOutput" with (I hope)
> default = "numeric" and "NA" as a second option.  Or NA is the default, so
> no code that relied that feature of the current code would be broken by the
> change.  If someone wanted to use arbitrary precision arithmetic, they
> could write their own version of this function with "arbitraryPrecision" as
> an optional value for the "bigOutput" argument.
>
>
>       Comments?
>       Thanks,
>       Spencer Graves
>
>
>
> On 2020-01-19 10:28, Avraham Adler wrote:
>
> Technically, lambda can always be numeric. It is the observations which
> must be integral.
>
> Would hitting everything larger than maxint or maxlonglong with floor or
> round fundamentally change the distribution? Well, yes, but enough that it
> would matter over process risk?
>
> Avi
>
> On Sun, Jan 19, 2020 at 11:20 AM Benjamin Tyner <btyner at gmail.com> wrote:
>
>> So imagine rpois is changed, such that the storage mode of its return
>> value is sometimes integer and sometimes numeric. Then imagine the case
>> where lambda is itself a realization of a random variable. Do we really
>> want the storage mode to inherit that randomness?
>>
>>
>> On 1/19/20 10:47 AM, Avraham Adler wrote:
>> > Maybe there should be code for 64 bit R to use long long or the like?
>> >
>> > On Sun, Jan 19, 2020 at 10:45 AM Spencer Graves
>> > <spencer.graves at prodsyse.com <mailto:spencer.graves at prodsyse.com>>
>> wrote:
>> >
>> >
>> >
>> >     On 2020-01-19 09:34, Benjamin Tyner wrote:
>> >     >>
>> >
>>  ------------------------------------------------------------------------
>> >     >> Hello, All:
>> >     >>
>> >     >>
>> >     >>         Consider:
>> >     >>
>> >     >>
>> >     >> Browse[2]> set.seed(1)
>> >     >> Browse[2]> rpois(9, 1e10)
>> >     >> NAs produced[1] NA NA NA NA NA NA NA NA NA
>> >     >>
>> >     >>
>> >     >>         Should this happen?
>> >     >>
>> >     >>
>> >     >>         I think that for, say, lambda>1e6, rpois should return
>> >     rnorm(.,
>> >     >> lambda, sqrt(lambda)).
>> >     > But need to implement carefully; rpois should always return a
>> >     > non-negative integer, whereas rnorm always returns numeric...
>> >     >
>> >
>> >            Thanks for the reply.
>> >
>> >
>> >            However, I think it's not acceptable to get an NA from a
>> >     number
>> >     that cannot be expressed as an integer.  Whenever a randomly
>> >     generated
>> >     number would exceed .Machine$integer.max, the choice is between
>> >     returning NA or a non-integer numeric.  Consider:
>> >
>> >
>> >      > 2*.Machine$integer.max
>> >     [1] 4294967294
>> >      > as.integer(2*.Machine$integer.max)
>> >     [1] NA
>> >     Warning message:
>> >     NAs introduced by coercion to integer range
>> >
>> >
>> >            I'd rather have the non-integer numeric.
>> >
>> >
>> >            Spencer
>> >
>> >     ______________________________________________
>> >     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>> >     https://stat.ethz.ch/mailman/listinfo/r-devel
>> >
>> > --
>> > Sent from Gmail Mobile
>>
> --
> Sent from Gmail Mobile
>
>
> --
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Sun Jan 19 22:38:05 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Sun, 19 Jan 2020 15:38:05 -0600
Subject: [Rd] rpois(9, 1e10)
In-Reply-To: <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
Message-ID: <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>



On 2020-01-19 13:01, Avraham Adler wrote:
> Crazy thought, but being that a sum of Poissons is Poisson in the sum, 
> can you break your ?big? simulation into the sum of a few smaller 
> ones? Or is the order of magnitude difference just too great?


 ????? I don't perceive that as feasible.? Once I found what was 
generating NAs, it was easy to code a function to return pseudo-random 
numbers using the standard normal approximation to the Poisson for those 
extreme cases.? [For a Poisson with mean = 1e6, for example, the 
skewness (third standardized moment) is 0.001.? At least for my 
purposes, that should be adequate.][1]


 ????? What are the negative consequences of having rpois return 
numerics that are always nonnegative?


 ????? Spencer


[1]? In the code I reported before, I just changed the threshold of 1e6 
to 0.5*.Machine$integer.max.? On my Mac, .Machine$integer.max = 
2147483647 = 2^31 > 1e9.? That still means that a Poisson distributed 
pseudo-random number just under that would have to be over 23000 
standard deviations above the mean to exceed .Machine$integer.max.

>
> On Sun, Jan 19, 2020 at 1:58 PM Spencer Graves 
> <spencer.graves at prodsyse.com <mailto:spencer.graves at prodsyse.com>> wrote:
>
>     ????? This issue arose for me in simulations to estimate
>     confidence, prediction, and tolerance intervals from glm(.,
>     family=poisson) fits embedded in a BMA::bic.glm fit using a
>     simulate.bic.glm function I added to the development version of
>     Ecfun, available at "https://github.com/sbgraves237/Ecfun"
>     <https://github.com/sbgraves237/Ecfun>. This is part of a vignette
>     I'm developing, available at
>     "https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd"
>     <https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd>.
>     This includes a simulated mean of a mixture of Poissons that
>     exceeds 2e22.? It doesn't seem unreasonable to me to have rpois
>     output a numerics rather than integers when a number simulated
>     exceeds .Machine$integer.max.? And it does seem to make less sense
>     in such cases to return NAs.
>
>
>     ?????? Alternatively, might it make sense to add another argument
>     to rpois to give the user the choice?? E.g., an argument
>     "bigOutput" with (I hope) default = "numeric" and "NA" as a second
>     option.? Or NA is the default, so no code that relied that feature
>     of the current code would be broken by the change.? If someone
>     wanted to use arbitrary precision arithmetic, they could write
>     their own version of this function with "arbitraryPrecision" as an
>     optional value for the "bigOutput" argument.
>
>
>     ????? Comments?
>     ????? Thanks,
>     ????? Spencer Graves
>
>
>
>     On 2020-01-19 10:28, Avraham Adler wrote:
>>     Technically, lambda can always be numeric. It is the observations
>>     which must be integral.
>>
>>     Would hitting everything larger than maxint or maxlonglong with
>>     floor or round fundamentally change the distribution? Well, yes,
>>     but enough that it would matter over process risk?
>>
>>     Avi
>>
>>     On Sun, Jan 19, 2020 at 11:20 AM Benjamin Tyner <btyner at gmail.com
>>     <mailto:btyner at gmail.com>> wrote:
>>
>>         So imagine rpois is changed, such that the storage mode of
>>         its return
>>         value is sometimes integer and sometimes numeric. Then
>>         imagine the case
>>         where lambda is itself a realization of a random variable. Do
>>         we really
>>         want the storage mode to inherit that randomness?
>>
>>
>>         On 1/19/20 10:47 AM, Avraham Adler wrote:
>>         > Maybe there should be code for 64 bit R to use long long or
>>         the like?
>>         >
>>         > On Sun, Jan 19, 2020 at 10:45 AM Spencer Graves
>>         > <spencer.graves at prodsyse.com
>>         <mailto:spencer.graves at prodsyse.com>
>>         <mailto:spencer.graves at prodsyse.com
>>         <mailto:spencer.graves at prodsyse.com>>> wrote:
>>         >
>>         >
>>         >
>>         >? ? ?On 2020-01-19 09:34, Benjamin Tyner wrote:
>>         >? ? ?>>
>>         >
>>         ?------------------------------------------------------------------------
>>         >? ? ?>> Hello, All:
>>         >? ? ?>>
>>         >? ? ?>>
>>         >? ? ?>> ? ????? Consider:
>>         >? ? ?>>
>>         >? ? ?>>
>>         >? ? ?>> Browse[2]> set.seed(1)
>>         >? ? ?>> Browse[2]> rpois(9, 1e10)
>>         >? ? ?>> NAs produced[1] NA NA NA NA NA NA NA NA NA
>>         >? ? ?>>
>>         >? ? ?>>
>>         >? ? ?>> ? ????? Should this happen?
>>         >? ? ?>>
>>         >? ? ?>>
>>         >? ? ?>> ? ????? I think that for, say, lambda>1e6, rpois
>>         should return
>>         >? ? ?rnorm(.,
>>         >? ? ?>> lambda, sqrt(lambda)).
>>         >? ? ?> But need to implement carefully; rpois should always
>>         return a
>>         >? ? ?> non-negative integer, whereas rnorm always returns
>>         numeric...
>>         >? ? ?>
>>         >
>>         >? ? ??????? Thanks for the reply.
>>         >
>>         >
>>         >? ? ??????? However, I think it's not acceptable to get an
>>         NA from a
>>         >? ? ?number
>>         >? ? ?that cannot be expressed as an integer. Whenever a randomly
>>         >? ? ?generated
>>         >? ? ?number would exceed .Machine$integer.max, the choice is
>>         between
>>         >? ? ?returning NA or a non-integer numeric. Consider:
>>         >
>>         >
>>         >? ? ??> 2*.Machine$integer.max
>>         >? ? ?[1] 4294967294
>>         >? ? ??> as.integer(2*.Machine$integer.max)
>>         >? ? ?[1] NA
>>         >? ? ?Warning message:
>>         >? ? ?NAs introduced by coercion to integer range
>>         >
>>         >
>>         >? ? ??????? I'd rather have the non-integer numeric.
>>         >
>>         >
>>         >? ? ??????? Spencer
>>         >
>>         > ?______________________________________________
>>         > R-devel at r-project.org <mailto:R-devel at r-project.org>
>>         <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
>>         mailing list
>>         > https://stat.ethz.ch/mailman/listinfo/r-devel
>>         >
>>         > --
>>         > Sent from Gmail Mobile
>>
>>     -- 
>>     Sent from Gmail Mobile
>
> -- 
> Sent from Gmail Mobile


	[[alternative HTML version deleted]]


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Sun Jan 19 22:41:24 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Sun, 19 Jan 2020 16:41:24 -0500
Subject: [Rd] rpois(9, 1e10)
In-Reply-To: <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
Message-ID: <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>

Floor (maybe round) of non-negative numerics, though. Poisson should never
have anything after decimal.

Still think it?s worth allowing long long for R64 bit, just for purity
sake.

Avi

On Sun, Jan 19, 2020 at 4:38 PM Spencer Graves <spencer.graves at prodsyse.com>
wrote:

>
>
> On 2020-01-19 13:01, Avraham Adler wrote:
>
> Crazy thought, but being that a sum of Poissons is Poisson in the sum, can
> you break your ?big? simulation into the sum of a few smaller ones? Or is
> the order of magnitude difference just too great?
>
>
>
>       I don't perceive that as feasible.  Once I found what was generating
> NAs, it was easy to code a function to return pseudo-random numbers using
> the standard normal approximation to the Poisson for those extreme cases.
> [For a Poisson with mean = 1e6, for example, the skewness (third
> standardized moment) is 0.001.  At least for my purposes, that should be
> adequate.][1]
>
>
>       What are the negative consequences of having rpois return numerics
> that are always nonnegative?
>
>
>       Spencer
>
>
> [1]  In the code I reported before, I just changed the threshold of 1e6 to
> 0.5*.Machine$integer.max.  On my Mac, .Machine$integer.max = 2147483647 =
> 2^31 > 1e9.  That still means that a Poisson distributed pseudo-random
> number just under that would have to be over 23000 standard deviations
> above the mean to exceed .Machine$integer.max.
>
>
> On Sun, Jan 19, 2020 at 1:58 PM Spencer Graves <
> spencer.graves at prodsyse.com> wrote:
>
>>       This issue arose for me in simulations to estimate confidence,
>> prediction, and tolerance intervals from glm(., family=poisson) fits
>> embedded in a BMA::bic.glm fit using a simulate.bic.glm function I added to
>> the development version of Ecfun, available at
>> "https://github.com/sbgraves237/Ecfun"
>> <https://github.com/sbgraves237/Ecfun>.  This is part of a vignette I'm
>> developing, available at
>> "https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd"
>> <https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd>.
>> This includes a simulated mean of a mixture of Poissons that exceeds 2e22.
>> It doesn't seem unreasonable to me to have rpois output a numerics rather
>> than integers when a number simulated exceeds .Machine$integer.max.  And it
>> does seem to make less sense in such cases to return NAs.
>>
>>
>>        Alternatively, might it make sense to add another argument to
>> rpois to give the user the choice?  E.g., an argument "bigOutput" with (I
>> hope) default = "numeric" and "NA" as a second option.  Or NA is the
>> default, so no code that relied that feature of the current code would be
>> broken by the change.  If someone wanted to use arbitrary precision
>> arithmetic, they could write their own version of this function with
>> "arbitraryPrecision" as an optional value for the "bigOutput" argument.
>>
>>
>>       Comments?
>>       Thanks,
>>       Spencer Graves
>>
>>
>>
>> On 2020-01-19 10:28, Avraham Adler wrote:
>>
>> Technically, lambda can always be numeric. It is the observations which
>> must be integral.
>>
>> Would hitting everything larger than maxint or maxlonglong with floor or
>> round fundamentally change the distribution? Well, yes, but enough that it
>> would matter over process risk?
>>
>> Avi
>>
>> On Sun, Jan 19, 2020 at 11:20 AM Benjamin Tyner <btyner at gmail.com> wrote:
>>
>>> So imagine rpois is changed, such that the storage mode of its return
>>> value is sometimes integer and sometimes numeric. Then imagine the case
>>> where lambda is itself a realization of a random variable. Do we really
>>> want the storage mode to inherit that randomness?
>>>
>>>
>>> On 1/19/20 10:47 AM, Avraham Adler wrote:
>>> > Maybe there should be code for 64 bit R to use long long or the like?
>>> >
>>> > On Sun, Jan 19, 2020 at 10:45 AM Spencer Graves
>>> > <spencer.graves at prodsyse.com <mailto:spencer.graves at prodsyse.com>>
>>> wrote:
>>> >
>>> >
>>> >
>>> >     On 2020-01-19 09:34, Benjamin Tyner wrote:
>>> >     >>
>>> >
>>>  ------------------------------------------------------------------------
>>> >     >> Hello, All:
>>> >     >>
>>> >     >>
>>> >     >>         Consider:
>>> >     >>
>>> >     >>
>>> >     >> Browse[2]> set.seed(1)
>>> >     >> Browse[2]> rpois(9, 1e10)
>>> >     >> NAs produced[1] NA NA NA NA NA NA NA NA NA
>>> >     >>
>>> >     >>
>>> >     >>         Should this happen?
>>> >     >>
>>> >     >>
>>> >     >>         I think that for, say, lambda>1e6, rpois should return
>>> >     rnorm(.,
>>> >     >> lambda, sqrt(lambda)).
>>> >     > But need to implement carefully; rpois should always return a
>>> >     > non-negative integer, whereas rnorm always returns numeric...
>>> >     >
>>> >
>>> >            Thanks for the reply.
>>> >
>>> >
>>> >            However, I think it's not acceptable to get an NA from a
>>> >     number
>>> >     that cannot be expressed as an integer.  Whenever a randomly
>>> >     generated
>>> >     number would exceed .Machine$integer.max, the choice is between
>>> >     returning NA or a non-integer numeric.  Consider:
>>> >
>>> >
>>> >      > 2*.Machine$integer.max
>>> >     [1] 4294967294
>>> >      > as.integer(2*.Machine$integer.max)
>>> >     [1] NA
>>> >     Warning message:
>>> >     NAs introduced by coercion to integer range
>>> >
>>> >
>>> >            I'd rather have the non-integer numeric.
>>> >
>>> >
>>> >            Spencer
>>> >
>>> >     ______________________________________________
>>> >     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>>> >     https://stat.ethz.ch/mailman/listinfo/r-devel
>>> >
>>> > --
>>> > Sent from Gmail Mobile
>>>
>> --
>> Sent from Gmail Mobile
>>
>>
>> --
> Sent from Gmail Mobile
>
>
> --
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Mon Jan 20 00:00:06 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Sun, 19 Jan 2020 17:00:06 -0600
Subject: [Rd] rpois(9, 1e10)
In-Reply-To: <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
Message-ID: <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>

On my Mac:


str(.Machine)
...
$ integer.max????????? : int 2147483647
 ?$ sizeof.long????????? : int 8
 ?$ sizeof.longlong????? : int 8
 ?$ sizeof.longdouble??? : int 16
 ?$ sizeof.pointer?????? : int 8


 ????? On a Windows 10 machine I have, $ sizeof.long : int 4; otherwise 
the same as on my Mac.


 ????? Am I correct that $ sizeof.long = 4 means 4 bytes = 32 bits? 
log2(.Machine$integer.max) = 31.? Then 8 bytes is what used to be called 
double precision (2 words of 4 bytes each)?? And $ sizeof.longdouble = 
16 = 4 words of 4 bytes each?


 ????? Spencer


On 2020-01-19 15:41, Avraham Adler wrote:
> Floor (maybe round) of non-negative numerics, though. Poisson should 
> never have anything after decimal.
>
> Still think it?s worth allowing long long for R64 bit, just for purity 
> sake.
>
> Avi
>
> On Sun, Jan 19, 2020 at 4:38 PM Spencer Graves 
> <spencer.graves at prodsyse.com <mailto:spencer.graves at prodsyse.com>> wrote:
>
>
>
>     On 2020-01-19 13:01, Avraham Adler wrote:
>>     Crazy thought, but being that a sum of Poissons is Poisson in the
>>     sum, can you break your ?big? simulation into the sum of a few
>>     smaller ones? Or is the order of magnitude difference just too great?
>
>
>     ????? I don't perceive that as feasible.? Once I found what was
>     generating NAs, it was easy to code a function to return
>     pseudo-random numbers using the standard normal approximation to
>     the Poisson for those extreme cases.? [For a Poisson with mean =
>     1e6, for example, the skewness (third standardized moment) is
>     0.001.? At least for my purposes, that should be adequate.][1]
>
>
>     ????? What are the negative consequences of having rpois return
>     numerics that are always nonnegative?
>
>
>     ????? Spencer
>
>
>     [1]? In the code I reported before, I just changed the threshold
>     of 1e6 to 0.5*.Machine$integer.max.? On my Mac,
>     .Machine$integer.max = 2147483647 = 2^31 > 1e9. That still means
>     that a Poisson distributed pseudo-random number just under that
>     would have to be over 23000 standard deviations above the mean to
>     exceed .Machine$integer.max.
>
>>
>>     On Sun, Jan 19, 2020 at 1:58 PM Spencer Graves
>>     <spencer.graves at prodsyse.com
>>     <mailto:spencer.graves at prodsyse.com>> wrote:
>>
>>         ????? This issue arose for me in simulations to estimate
>>         confidence, prediction, and tolerance intervals from glm(.,
>>         family=poisson) fits embedded in a BMA::bic.glm fit using a
>>         simulate.bic.glm function I added to the development version
>>         of Ecfun, available at "https://github.com/sbgraves237/Ecfun"
>>         <https://github.com/sbgraves237/Ecfun>. This is part of a
>>         vignette I'm developing, available at
>>         "https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd"
>>         <https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd>.
>>         This includes a simulated mean of a mixture of Poissons that
>>         exceeds 2e22.? It doesn't seem unreasonable to me to have
>>         rpois output a numerics rather than integers when a number
>>         simulated exceeds .Machine$integer.max.? And it does seem to
>>         make less sense in such cases to return NAs.
>>
>>
>>         ?????? Alternatively, might it make sense to add another
>>         argument to rpois to give the user the choice?? E.g., an
>>         argument "bigOutput" with (I hope) default = "numeric" and
>>         "NA" as a second option.? Or NA is the default, so no code
>>         that relied that feature of the current code would be broken
>>         by the change.? If someone wanted to use arbitrary precision
>>         arithmetic, they could write their own version of this
>>         function with "arbitraryPrecision" as an optional value for
>>         the "bigOutput" argument.
>>
>>
>>         ????? Comments?
>>         ????? Thanks,
>>         ????? Spencer Graves
>>
>>
>>
>>         On 2020-01-19 10:28, Avraham Adler wrote:
>>>         Technically, lambda can always be numeric. It is the
>>>         observations which must be integral.
>>>
>>>         Would hitting everything larger than maxint or maxlonglong
>>>         with floor or round fundamentally change the distribution?
>>>         Well, yes, but enough that it would matter over process risk?
>>>
>>>         Avi
>>>
>>>         On Sun, Jan 19, 2020 at 11:20 AM Benjamin Tyner
>>>         <btyner at gmail.com <mailto:btyner at gmail.com>> wrote:
>>>
>>>             So imagine rpois is changed, such that the storage mode
>>>             of its return
>>>             value is sometimes integer and sometimes numeric. Then
>>>             imagine the case
>>>             where lambda is itself a realization of a random
>>>             variable. Do we really
>>>             want the storage mode to inherit that randomness?
>>>
>>>
>>>             On 1/19/20 10:47 AM, Avraham Adler wrote:
>>>             > Maybe there should be code for 64 bit R to use long
>>>             long or the like?
>>>             >
>>>             > On Sun, Jan 19, 2020 at 10:45 AM Spencer Graves
>>>             > <spencer.graves at prodsyse.com
>>>             <mailto:spencer.graves at prodsyse.com>
>>>             <mailto:spencer.graves at prodsyse.com
>>>             <mailto:spencer.graves at prodsyse.com>>> wrote:
>>>             >
>>>             >
>>>             >
>>>             >? ? ?On 2020-01-19 09:34, Benjamin Tyner wrote:
>>>             >? ? ?>>
>>>             >
>>>             ?------------------------------------------------------------------------
>>>             >? ? ?>> Hello, All:
>>>             >? ? ?>>
>>>             >? ? ?>>
>>>             >? ? ?>> ? ????? Consider:
>>>             >? ? ?>>
>>>             >? ? ?>>
>>>             >? ? ?>> Browse[2]> set.seed(1)
>>>             >? ? ?>> Browse[2]> rpois(9, 1e10)
>>>             >? ? ?>> NAs produced[1] NA NA NA NA NA NA NA NA NA
>>>             >? ? ?>>
>>>             >? ? ?>>
>>>             >? ? ?>> ? ????? Should this happen?
>>>             >? ? ?>>
>>>             >? ? ?>>
>>>             >? ? ?>> ? ????? I think that for, say, lambda>1e6,
>>>             rpois should return
>>>             >? ? ?rnorm(.,
>>>             >? ? ?>> lambda, sqrt(lambda)).
>>>             >? ? ?> But need to implement carefully; rpois should
>>>             always return a
>>>             >? ? ?> non-negative integer, whereas rnorm always
>>>             returns numeric...
>>>             >? ? ?>
>>>             >
>>>             >? ? ??????? Thanks for the reply.
>>>             >
>>>             >
>>>             >? ? ??????? However, I think it's not acceptable to get
>>>             an NA from a
>>>             >? ? ?number
>>>             >? ? ?that cannot be expressed as an integer.? Whenever
>>>             a randomly
>>>             >? ? ?generated
>>>             >? ? ?number would exceed .Machine$integer.max, the
>>>             choice is between
>>>             >? ? ?returning NA or a non-integer numeric.? Consider:
>>>             >
>>>             >
>>>             >? ? ??> 2*.Machine$integer.max
>>>             >? ? ?[1] 4294967294
>>>             >? ? ??> as.integer(2*.Machine$integer.max)
>>>             >? ? ?[1] NA
>>>             >? ? ?Warning message:
>>>             >? ? ?NAs introduced by coercion to integer range
>>>             >
>>>             >
>>>             >? ? ??????? I'd rather have the non-integer numeric.
>>>             >
>>>             >
>>>             >? ? ??????? Spencer
>>>             >
>>>             > ?______________________________________________
>>>             > R-devel at r-project.org <mailto:R-devel at r-project.org>
>>>             <mailto:R-devel at r-project.org
>>>             <mailto:R-devel at r-project.org>> mailing list
>>>             > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>             >
>>>             > --
>>>             > Sent from Gmail Mobile
>>>
>>>         -- 
>>>         Sent from Gmail Mobile
>>
>>     -- 
>>     Sent from Gmail Mobile
>
> -- 
> Sent from Gmail Mobile


	[[alternative HTML version deleted]]


From |uke-t|erney @end|ng |rom u|ow@@edu  Mon Jan 20 04:00:58 2020
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Mon, 20 Jan 2020 03:00:58 +0000
Subject: [Rd] [External] Re:  rpois(9, 1e10)
In-Reply-To: <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
Message-ID: <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>

R uses the C 'int' type for its integer data and that is pretty much
universally 32 bit these days. In fact R wont' compile if it is not.
That means the range for integer data is the integers in [-2^31,
+2^31).

It would be good to allow for a larger integer range for R integer
objects, and several of us are thinking about how me might get there.
But it isn't easy to get right, so it may take some time. I doubt
anything can happen for R 4.0.0 this year, but 2021 may be possible.

I few notes inline below:

On Sun, 19 Jan 2020, Spencer Graves wrote:

> On my Mac:
>
>
> str(.Machine)
> ...
> $ integer.max????????? : int 2147483647
> ?$ sizeof.long????????? : int 8
> ?$ sizeof.longlong????? : int 8
> ?$ sizeof.longdouble??? : int 16
> ?$ sizeof.pointer?????? : int 8
>
>
> ????? On a Windows 10 machine I have, $ sizeof.long : int 4; otherwise
> the same as on my Mac.

One of many annoyances of Windows -- done for compatibility with
ancient Window apps.

> ????? Am I correct that $ sizeof.long = 4 means 4 bytes = 32 bits?
> log2(.Machine$integer.max) = 31.? Then 8 bytes is what used to be called
> double precision (2 words of 4 bytes each)?? And $ sizeof.longdouble =
> 16 = 4 words of 4 bytes each?

double precision is a floating point concept, not related to integers.

If you want to figure out whether you are running a 32 bit or 64 bit R
look at sizeof.pointer -- 4 means 32 bits, 8 64 bits.

Best,

luke


>
>
> ????? Spencer
>
>
> On 2020-01-19 15:41, Avraham Adler wrote:
>> Floor (maybe round) of non-negative numerics, though. Poisson should
>> never have anything after decimal.
>>
>> Still think it?s worth allowing long long for R64 bit, just for purity
>> sake.
>>
>> Avi
>>
>> On Sun, Jan 19, 2020 at 4:38 PM Spencer Graves
>> <spencer.graves at prodsyse.com <mailto:spencer.graves at prodsyse.com>> wrote:
>>
>>
>>
>>     On 2020-01-19 13:01, Avraham Adler wrote:
>>>     Crazy thought, but being that a sum of Poissons is Poisson in the
>>>     sum, can you break your ?big? simulation into the sum of a few
>>>     smaller ones? Or is the order of magnitude difference just too great?
>>
>>
>>     ????? I don't perceive that as feasible.? Once I found what was
>>     generating NAs, it was easy to code a function to return
>>     pseudo-random numbers using the standard normal approximation to
>>     the Poisson for those extreme cases.? [For a Poisson with mean =
>>     1e6, for example, the skewness (third standardized moment) is
>>     0.001.? At least for my purposes, that should be adequate.][1]
>>
>>
>>     ????? What are the negative consequences of having rpois return
>>     numerics that are always nonnegative?
>>
>>
>>     ????? Spencer
>>
>>
>>     [1]? In the code I reported before, I just changed the threshold
>>     of 1e6 to 0.5*.Machine$integer.max.? On my Mac,
>>     .Machine$integer.max = 2147483647 = 2^31 > 1e9. That still means
>>     that a Poisson distributed pseudo-random number just under that
>>     would have to be over 23000 standard deviations above the mean to
>>     exceed .Machine$integer.max.
>>
>>>
>>>     On Sun, Jan 19, 2020 at 1:58 PM Spencer Graves
>>>     <spencer.graves at prodsyse.com
>>>     <mailto:spencer.graves at prodsyse.com>> wrote:
>>>
>>>         ????? This issue arose for me in simulations to estimate
>>>         confidence, prediction, and tolerance intervals from glm(.,
>>>         family=poisson) fits embedded in a BMA::bic.glm fit using a
>>>         simulate.bic.glm function I added to the development version
>>>         of Ecfun, available at "https://github.com/sbgraves237/Ecfun"
>>>         <https://github.com/sbgraves237/Ecfun>. This is part of a
>>>         vignette I'm developing, available at
>>>         "https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd"
>>>         <https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd>.
>>>         This includes a simulated mean of a mixture of Poissons that
>>>         exceeds 2e22.? It doesn't seem unreasonable to me to have
>>>         rpois output a numerics rather than integers when a number
>>>         simulated exceeds .Machine$integer.max.? And it does seem to
>>>         make less sense in such cases to return NAs.
>>>
>>>
>>>         ?????? Alternatively, might it make sense to add another
>>>         argument to rpois to give the user the choice?? E.g., an
>>>         argument "bigOutput" with (I hope) default = "numeric" and
>>>         "NA" as a second option.? Or NA is the default, so no code
>>>         that relied that feature of the current code would be broken
>>>         by the change.? If someone wanted to use arbitrary precision
>>>         arithmetic, they could write their own version of this
>>>         function with "arbitraryPrecision" as an optional value for
>>>         the "bigOutput" argument.
>>>
>>>
>>>         ????? Comments?
>>>         ????? Thanks,
>>>         ????? Spencer Graves
>>>
>>>
>>>
>>>         On 2020-01-19 10:28, Avraham Adler wrote:
>>>>         Technically, lambda can always be numeric. It is the
>>>>         observations which must be integral.
>>>>
>>>>         Would hitting everything larger than maxint or maxlonglong
>>>>         with floor or round fundamentally change the distribution?
>>>>         Well, yes, but enough that it would matter over process risk?
>>>>
>>>>         Avi
>>>>
>>>>         On Sun, Jan 19, 2020 at 11:20 AM Benjamin Tyner
>>>>         <btyner at gmail.com <mailto:btyner at gmail.com>> wrote:
>>>>
>>>>             So imagine rpois is changed, such that the storage mode
>>>>             of its return
>>>>             value is sometimes integer and sometimes numeric. Then
>>>>             imagine the case
>>>>             where lambda is itself a realization of a random
>>>>             variable. Do we really
>>>>             want the storage mode to inherit that randomness?
>>>>
>>>>
>>>>             On 1/19/20 10:47 AM, Avraham Adler wrote:
>>>>            > Maybe there should be code for 64 bit R to use long
>>>>             long or the like?
>>>>            >
>>>>            > On Sun, Jan 19, 2020 at 10:45 AM Spencer Graves
>>>>            > <spencer.graves at prodsyse.com
>>>>             <mailto:spencer.graves at prodsyse.com>
>>>>             <mailto:spencer.graves at prodsyse.com
>>>>             <mailto:spencer.graves at prodsyse.com>>> wrote:
>>>>            >
>>>>            >
>>>>            >
>>>>            >? ? ?On 2020-01-19 09:34, Benjamin Tyner wrote:
>>>>            >? ? ?>>
>>>>            >
>>>>             ?------------------------------------------------------------------------
>>>>            >? ? ?>> Hello, All:
>>>>            >? ? ?>>
>>>>            >? ? ?>>
>>>>            >? ? ?>> ? ????? Consider:
>>>>            >? ? ?>>
>>>>            >? ? ?>>
>>>>            >? ? ?>> Browse[2]> set.seed(1)
>>>>            >? ? ?>> Browse[2]> rpois(9, 1e10)
>>>>            >? ? ?>> NAs produced[1] NA NA NA NA NA NA NA NA NA
>>>>            >? ? ?>>
>>>>            >? ? ?>>
>>>>            >? ? ?>> ? ????? Should this happen?
>>>>            >? ? ?>>
>>>>            >? ? ?>>
>>>>            >? ? ?>> ? ????? I think that for, say, lambda>1e6,
>>>>             rpois should return
>>>>            >? ? ?rnorm(.,
>>>>            >? ? ?>> lambda, sqrt(lambda)).
>>>>            >? ? ?> But need to implement carefully; rpois should
>>>>             always return a
>>>>            >? ? ?> non-negative integer, whereas rnorm always
>>>>             returns numeric...
>>>>            >? ? ?>
>>>>            >
>>>>            >? ? ??????? Thanks for the reply.
>>>>            >
>>>>            >
>>>>            >? ? ??????? However, I think it's not acceptable to get
>>>>             an NA from a
>>>>            >? ? ?number
>>>>            >? ? ?that cannot be expressed as an integer.? Whenever
>>>>             a randomly
>>>>            >? ? ?generated
>>>>            >? ? ?number would exceed .Machine$integer.max, the
>>>>             choice is between
>>>>            >? ? ?returning NA or a non-integer numeric.? Consider:
>>>>            >
>>>>            >
>>>>            >? ? ??> 2*.Machine$integer.max
>>>>            >? ? ?[1] 4294967294
>>>>            >? ? ??> as.integer(2*.Machine$integer.max)
>>>>            >? ? ?[1] NA
>>>>            >? ? ?Warning message:
>>>>            >? ? ?NAs introduced by coercion to integer range
>>>>            >
>>>>            >
>>>>            >? ? ??????? I'd rather have the non-integer numeric.
>>>>            >
>>>>            >
>>>>            >? ? ??????? Spencer
>>>>            >
>>>>            > ?______________________________________________
>>>>            > R-devel at r-project.org <mailto:R-devel at r-project.org>
>>>>             <mailto:R-devel at r-project.org
>>>>             <mailto:R-devel at r-project.org>> mailing list
>>>>            > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>            >
>>>>            > --
>>>>            > Sent from Gmail Mobile
>>>>
>>>>         --
>>>>         Sent from Gmail Mobile
>>>
>>>     --
>>>     Sent from Gmail Mobile
>>
>> --
>> Sent from Gmail Mobile
>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Mon Jan 20 04:35:04 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Sun, 19 Jan 2020 21:35:04 -0600
Subject: [Rd] [External] Re:  rpois(9, 1e10)
In-Reply-To: <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
 <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
Message-ID: <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>

Thanks to Luke and Avi for their comments.? I wrapped "round" around the 
call to "rnorm" inside my "rpois.".? For "lambda" really big, that 
"round" won't do anything.? However, it appears to give integers in 
floating point representation that are larger than 
.Machine$integer.max.? That sounds very much like what someone would 
want.? Spencer


On 2020-01-19 21:00, Tierney, Luke wrote:
> R uses the C 'int' type for its integer data and that is pretty much
> universally 32 bit these days. In fact R wont' compile if it is not.
> That means the range for integer data is the integers in [-2^31,
> +2^31).
>
> It would be good to allow for a larger integer range for R integer
> objects, and several of us are thinking about how me might get there.
> But it isn't easy to get right, so it may take some time. I doubt
> anything can happen for R 4.0.0 this year, but 2021 may be possible.
>
> I few notes inline below:
>
> On Sun, 19 Jan 2020, Spencer Graves wrote:
>
>> On my Mac:
>>
>>
>> str(.Machine)
>> ...
>> $ integer.max????????? : int 2147483647
>>  ?$ sizeof.long????????? : int 8
>>  ?$ sizeof.longlong????? : int 8
>>  ?$ sizeof.longdouble??? : int 16
>>  ?$ sizeof.pointer?????? : int 8
>>
>>
>>  ????? On a Windows 10 machine I have, $ sizeof.long : int 4; otherwise
>> the same as on my Mac.
> One of many annoyances of Windows -- done for compatibility with
> ancient Window apps.
>
>>  ????? Am I correct that $ sizeof.long = 4 means 4 bytes = 32 bits?
>> log2(.Machine$integer.max) = 31.? Then 8 bytes is what used to be called
>> double precision (2 words of 4 bytes each)?? And $ sizeof.longdouble =
>> 16 = 4 words of 4 bytes each?
> double precision is a floating point concept, not related to integers.
>
> If you want to figure out whether you are running a 32 bit or 64 bit R
> look at sizeof.pointer -- 4 means 32 bits, 8 64 bits.
>
> Best,
>
> luke
>
>
>>
>>  ????? Spencer
>>
>>
>> On 2020-01-19 15:41, Avraham Adler wrote:
>>> Floor (maybe round) of non-negative numerics, though. Poisson should
>>> never have anything after decimal.
>>>
>>> Still think it?s worth allowing long long for R64 bit, just for purity
>>> sake.
>>>
>>> Avi
>>>
>>> On Sun, Jan 19, 2020 at 4:38 PM Spencer Graves
>>> <spencer.graves at prodsyse.com <mailto:spencer.graves at prodsyse.com>> wrote:
>>>
>>>
>>>
>>>      On 2020-01-19 13:01, Avraham Adler wrote:
>>>>      Crazy thought, but being that a sum of Poissons is Poisson in the
>>>>      sum, can you break your ?big? simulation into the sum of a few
>>>>      smaller ones? Or is the order of magnitude difference just too great?
>>>
>>>      ????? I don't perceive that as feasible.? Once I found what was
>>>      generating NAs, it was easy to code a function to return
>>>      pseudo-random numbers using the standard normal approximation to
>>>      the Poisson for those extreme cases.? [For a Poisson with mean =
>>>      1e6, for example, the skewness (third standardized moment) is
>>>      0.001.? At least for my purposes, that should be adequate.][1]
>>>
>>>
>>>      ????? What are the negative consequences of having rpois return
>>>      numerics that are always nonnegative?
>>>
>>>
>>>      ????? Spencer
>>>
>>>
>>>      [1]? In the code I reported before, I just changed the threshold
>>>      of 1e6 to 0.5*.Machine$integer.max.? On my Mac,
>>>      .Machine$integer.max = 2147483647 = 2^31 > 1e9. That still means
>>>      that a Poisson distributed pseudo-random number just under that
>>>      would have to be over 23000 standard deviations above the mean to
>>>      exceed .Machine$integer.max.
>>>
>>>>      On Sun, Jan 19, 2020 at 1:58 PM Spencer Graves
>>>>      <spencer.graves at prodsyse.com
>>>>      <mailto:spencer.graves at prodsyse.com>> wrote:
>>>>
>>>>          ????? This issue arose for me in simulations to estimate
>>>>          confidence, prediction, and tolerance intervals from glm(.,
>>>>          family=poisson) fits embedded in a BMA::bic.glm fit using a
>>>>          simulate.bic.glm function I added to the development version
>>>>          of Ecfun, available at "https://github.com/sbgraves237/Ecfun"
>>>>          <https://github.com/sbgraves237/Ecfun>. This is part of a
>>>>          vignette I'm developing, available at
>>>>          "https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd"
>>>>          <https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd>.
>>>>          This includes a simulated mean of a mixture of Poissons that
>>>>          exceeds 2e22.? It doesn't seem unreasonable to me to have
>>>>          rpois output a numerics rather than integers when a number
>>>>          simulated exceeds .Machine$integer.max.? And it does seem to
>>>>          make less sense in such cases to return NAs.
>>>>
>>>>
>>>>          ?????? Alternatively, might it make sense to add another
>>>>          argument to rpois to give the user the choice?? E.g., an
>>>>          argument "bigOutput" with (I hope) default = "numeric" and
>>>>          "NA" as a second option.? Or NA is the default, so no code
>>>>          that relied that feature of the current code would be broken
>>>>          by the change.? If someone wanted to use arbitrary precision
>>>>          arithmetic, they could write their own version of this
>>>>          function with "arbitraryPrecision" as an optional value for
>>>>          the "bigOutput" argument.
>>>>
>>>>
>>>>          ????? Comments?
>>>>          ????? Thanks,
>>>>          ????? Spencer Graves
>>>>
>>>>
>>>>
>>>>          On 2020-01-19 10:28, Avraham Adler wrote:
>>>>>          Technically, lambda can always be numeric. It is the
>>>>>          observations which must be integral.
>>>>>
>>>>>          Would hitting everything larger than maxint or maxlonglong
>>>>>          with floor or round fundamentally change the distribution?
>>>>>          Well, yes, but enough that it would matter over process risk?
>>>>>
>>>>>          Avi
>>>>>
>>>>>          On Sun, Jan 19, 2020 at 11:20 AM Benjamin Tyner
>>>>>          <btyner at gmail.com <mailto:btyner at gmail.com>> wrote:
>>>>>
>>>>>              So imagine rpois is changed, such that the storage mode
>>>>>              of its return
>>>>>              value is sometimes integer and sometimes numeric. Then
>>>>>              imagine the case
>>>>>              where lambda is itself a realization of a random
>>>>>              variable. Do we really
>>>>>              want the storage mode to inherit that randomness?
>>>>>
>>>>>
>>>>>              On 1/19/20 10:47 AM, Avraham Adler wrote:
>>>>>             > Maybe there should be code for 64 bit R to use long
>>>>>              long or the like?
>>>>>             >
>>>>>             > On Sun, Jan 19, 2020 at 10:45 AM Spencer Graves
>>>>>             > <spencer.graves at prodsyse.com
>>>>>              <mailto:spencer.graves at prodsyse.com>
>>>>>              <mailto:spencer.graves at prodsyse.com
>>>>>              <mailto:spencer.graves at prodsyse.com>>> wrote:
>>>>>             >
>>>>>             >
>>>>>             >
>>>>>             >? ? ?On 2020-01-19 09:34, Benjamin Tyner wrote:
>>>>>             >? ? ?>>
>>>>>             >
>>>>>              ?------------------------------------------------------------------------
>>>>>             >? ? ?>> Hello, All:
>>>>>             >? ? ?>>
>>>>>             >? ? ?>>
>>>>>             >? ? ?>> ? ????? Consider:
>>>>>             >? ? ?>>
>>>>>             >? ? ?>>
>>>>>             >? ? ?>> Browse[2]> set.seed(1)
>>>>>             >? ? ?>> Browse[2]> rpois(9, 1e10)
>>>>>             >? ? ?>> NAs produced[1] NA NA NA NA NA NA NA NA NA
>>>>>             >? ? ?>>
>>>>>             >? ? ?>>
>>>>>             >? ? ?>> ? ????? Should this happen?
>>>>>             >? ? ?>>
>>>>>             >? ? ?>>
>>>>>             >? ? ?>> ? ????? I think that for, say, lambda>1e6,
>>>>>              rpois should return
>>>>>             >? ? ?rnorm(.,
>>>>>             >? ? ?>> lambda, sqrt(lambda)).
>>>>>             >? ? ?> But need to implement carefully; rpois should
>>>>>              always return a
>>>>>             >? ? ?> non-negative integer, whereas rnorm always
>>>>>              returns numeric...
>>>>>             >? ? ?>
>>>>>             >
>>>>>             >? ? ??????? Thanks for the reply.
>>>>>             >
>>>>>             >
>>>>>             >? ? ??????? However, I think it's not acceptable to get
>>>>>              an NA from a
>>>>>             >? ? ?number
>>>>>             >? ? ?that cannot be expressed as an integer.? Whenever
>>>>>              a randomly
>>>>>             >? ? ?generated
>>>>>             >? ? ?number would exceed .Machine$integer.max, the
>>>>>              choice is between
>>>>>             >? ? ?returning NA or a non-integer numeric.? Consider:
>>>>>             >
>>>>>             >
>>>>>             >? ? ??> 2*.Machine$integer.max
>>>>>             >? ? ?[1] 4294967294
>>>>>             >? ? ??> as.integer(2*.Machine$integer.max)
>>>>>             >? ? ?[1] NA
>>>>>             >? ? ?Warning message:
>>>>>             >? ? ?NAs introduced by coercion to integer range
>>>>>             >
>>>>>             >
>>>>>             >? ? ??????? I'd rather have the non-integer numeric.
>>>>>             >
>>>>>             >
>>>>>             >? ? ??????? Spencer
>>>>>             >
>>>>>             > ?______________________________________________
>>>>>             > R-devel at r-project.org <mailto:R-devel at r-project.org>
>>>>>              <mailto:R-devel at r-project.org
>>>>>              <mailto:R-devel at r-project.org>> mailing list
>>>>>             > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>             >
>>>>>             > --
>>>>>             > Sent from Gmail Mobile
>>>>>
>>>>>          --
>>>>>          Sent from Gmail Mobile
>>>>      --
>>>>      Sent from Gmail Mobile
>>> --
>>> Sent from Gmail Mobile
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jan 20 10:26:47 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 20 Jan 2020 10:26:47 +0100
Subject: [Rd] [External] Re:  rpois(9, 1e10)
In-Reply-To: <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
 <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
 <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>
Message-ID: <24101.29271.515200.878794@stat.math.ethz.ch>

>>>>> Spencer Graves 
>>>>>     on Sun, 19 Jan 2020 21:35:04 -0600 writes:

    > Thanks to Luke and Avi for their comments.? I wrapped "round" around the 
    > call to "rnorm" inside my "rpois.".? For "lambda" really big, that 
    > "round" won't do anything.? However, it appears to give integers in 
    > floating point representation that are larger than 
    > .Machine$integer.max.? That sounds very much like what someone would 
    > want.? Spencer

Coming late here -- after enjoying a proper weekend ;-) --

I have been agreeing (with Spencer, IIUC) on this for a long
time (~ 3 yrs, or more?), namely that I've come to see it as a
"design bug" that  rpois() {and similar} must return return typeof() "integer".

More strongly, I'm actually pretty convinced they should return
(integer-valued) double instead of NA_integer_   and for that
reason should always return double: 
Even if we have (hopefully) a native 64bit integer in R,
2^64 is still teeny tiny compared .Machine$double.max

(and then maybe we'd have .Machine$longdouble.max  which would
 be considerably larger than double.max unless on Windows, where
 the wise men at Microsoft decided to keep their workload simple
 by defining "long double := double" - as 'long double'
 unfortunately is not well defined by C standards) 

Martin

    > On 2020-01-19 21:00, Tierney, Luke wrote:
    >> R uses the C 'int' type for its integer data and that is pretty much
    >> universally 32 bit these days. In fact R wont' compile if it is not.
    >> That means the range for integer data is the integers in [-2^31,
    >> +2^31).
    >> 
    >> It would be good to allow for a larger integer range for R integer
    >> objects, and several of us are thinking about how me might get there.
    >> But it isn't easy to get right, so it may take some time. I doubt
    >> anything can happen for R 4.0.0 this year, but 2021 may be possible.
    >> 
    >> I few notes inline below:
    >> 
    >> On Sun, 19 Jan 2020, Spencer Graves wrote:
    >> 
    >>> On my Mac:
    >>> 
    >>> 
    >>> str(.Machine)
    >>> ...
    >>> $ integer.max????????? : int 2147483647
    >>> ?$ sizeof.long????????? : int 8
    >>> ?$ sizeof.longlong????? : int 8
    >>> ?$ sizeof.longdouble??? : int 16
    >>> ?$ sizeof.pointer?????? : int 8
    >>> 
    >>> 
    >>> ????? On a Windows 10 machine I have, $ sizeof.long : int 4; otherwise
    >>> the same as on my Mac.
    >> One of many annoyances of Windows -- done for compatibility with
    >> ancient Window apps.
    >> 
    >>> ????? Am I correct that $ sizeof.long = 4 means 4 bytes = 32 bits?
    >>> log2(.Machine$integer.max) = 31.? Then 8 bytes is what used to be called
    >>> double precision (2 words of 4 bytes each)?? And $ sizeof.longdouble =
    >>> 16 = 4 words of 4 bytes each?
    >> double precision is a floating point concept, not related to integers.
    >> 
    >> If you want to figure out whether you are running a 32 bit or 64 bit R
    >> look at sizeof.pointer -- 4 means 32 bits, 8 64 bits.
    >> 
    >> Best,
    >> 
    >> luke
    >> 
    >> 
    >>> 
    >>> ????? Spencer
    >>> 
    >>> 
    >>> On 2020-01-19 15:41, Avraham Adler wrote:
    >>>> Floor (maybe round) of non-negative numerics, though. Poisson should
    >>>> never have anything after decimal.
    >>>> 
    >>>> Still think it?s worth allowing long long for R64 bit, just for purity
    >>>> sake.
    >>>> 
    >>>> Avi
    >>>> 
    >>>> On Sun, Jan 19, 2020 at 4:38 PM Spencer Graves
    >>>> <spencer.graves at prodsyse.com <mailto:spencer.graves at prodsyse.com>> wrote:
    >>>> 
    >>>> 
    >>>> 
    >>>> On 2020-01-19 13:01, Avraham Adler wrote:
    >>>>> Crazy thought, but being that a sum of Poissons is Poisson in the
    >>>>> sum, can you break your ?big? simulation into the sum of a few
    >>>>> smaller ones? Or is the order of magnitude difference just too great?
    >>>> 
    >>>> ????? I don't perceive that as feasible.? Once I found what was
    >>>> generating NAs, it was easy to code a function to return
    >>>> pseudo-random numbers using the standard normal approximation to
    >>>> the Poisson for those extreme cases.? [For a Poisson with mean =
    >>>> 1e6, for example, the skewness (third standardized moment) is
    >>>> 0.001.? At least for my purposes, that should be adequate.][1]
    >>>> 
    >>>> 
    >>>> ????? What are the negative consequences of having rpois return
    >>>> numerics that are always nonnegative?
    >>>> 
    >>>> 
    >>>> ????? Spencer
    >>>> 
    >>>> 
    >>>> [1]? In the code I reported before, I just changed the threshold
    >>>> of 1e6 to 0.5*.Machine$integer.max.? On my Mac,
    >>>> .Machine$integer.max = 2147483647 = 2^31 > 1e9. That still means
    >>>> that a Poisson distributed pseudo-random number just under that
    >>>> would have to be over 23000 standard deviations above the mean to
    >>>> exceed .Machine$integer.max.
    >>>> 
    >>>>> On Sun, Jan 19, 2020 at 1:58 PM Spencer Graves
    >>>>> <spencer.graves at prodsyse.com
    >>>>> <mailto:spencer.graves at prodsyse.com>> wrote:
    >>>>> 
    >>>>> ????? This issue arose for me in simulations to estimate
    >>>>> confidence, prediction, and tolerance intervals from glm(.,
    >>>>> family=poisson) fits embedded in a BMA::bic.glm fit using a
    >>>>> simulate.bic.glm function I added to the development version
    >>>>> of Ecfun, available at "https://github.com/sbgraves237/Ecfun"
    >>>>> <https://github.com/sbgraves237/Ecfun>. This is part of a
    >>>>> vignette I'm developing, available at
    >>>>> "https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd"
    >>>>> <https://github.com/sbgraves237/Ecfun/blob/master/vignettes/time2nextNuclearWeaponState.Rmd>.
    >>>>> This includes a simulated mean of a mixture of Poissons that
    >>>>> exceeds 2e22.? It doesn't seem unreasonable to me to have
    >>>>> rpois output a numerics rather than integers when a number
    >>>>> simulated exceeds .Machine$integer.max.? And it does seem to
    >>>>> make less sense in such cases to return NAs.
    >>>>> 
    >>>>> 
    >>>>> ?????? Alternatively, might it make sense to add another
    >>>>> argument to rpois to give the user the choice?? E.g., an
    >>>>> argument "bigOutput" with (I hope) default = "numeric" and
    >>>>> "NA" as a second option.? Or NA is the default, so no code
    >>>>> that relied that feature of the current code would be broken
    >>>>> by the change.? If someone wanted to use arbitrary precision
    >>>>> arithmetic, they could write their own version of this
    >>>>> function with "arbitraryPrecision" as an optional value for
    >>>>> the "bigOutput" argument.
    >>>>> 
    >>>>> 
    >>>>> ????? Comments?
    >>>>> ????? Thanks,
    >>>>> ????? Spencer Graves
    >>>>> 
    >>>>> 
    >>>>> 
    >>>>> On 2020-01-19 10:28, Avraham Adler wrote:
>>>>>          Technically, lambda can always be numeric. It is the
>>>>>          observations which must be integral.
    >>>>>> 
>>>>>          Would hitting everything larger than maxint or maxlonglong
>>>>>          with floor or round fundamentally change the distribution?
>>>>>          Well, yes, but enough that it would matter over process risk?
    >>>>>> 
>>>>>          Avi
    >>>>>> 
>>>>>          On Sun, Jan 19, 2020 at 11:20 AM Benjamin Tyner
>>>>>          <btyner at gmail.com <mailto:btyner at gmail.com>> wrote:
    >>>>>> 
>>>>>              So imagine rpois is changed, such that the storage mode
>>>>>              of its return
>>>>>              value is sometimes integer and sometimes numeric. Then
>>>>>              imagine the case
>>>>>              where lambda is itself a realization of a random
>>>>>              variable. Do we really
>>>>>              want the storage mode to inherit that randomness?
    >>>>>> 
    >>>>>> 
>>>>>              On 1/19/20 10:47 AM, Avraham Adler wrote:
>>>>>             > Maybe there should be code for 64 bit R to use long
>>>>>              long or the like?
>>>>>             >
>>>>>             > On Sun, Jan 19, 2020 at 10:45 AM Spencer Graves
>>>>>             > <spencer.graves at prodsyse.com
>>>>>              <mailto:spencer.graves at prodsyse.com>
>>>>>              <mailto:spencer.graves at prodsyse.com
>>>>>              <mailto:spencer.graves at prodsyse.com>>> wrote:
>>>>>             >
>>>>>             >
>>>>>             >
>>>>>             >? ? ?On 2020-01-19 09:34, Benjamin Tyner wrote:
>>>>>             >? ? ?>>
>>>>>             >
>>>>>              ?------------------------------------------------------------------------
>>>>>             >? ? ?>> Hello, All:
>>>>>             >? ? ?>>
>>>>>             >? ? ?>>
>>>>>             >? ? ?>> ? ????? Consider:
>>>>>             >? ? ?>>
>>>>>             >? ? ?>>
>>>>>             >? ? ?>> Browse[2]> set.seed(1)
>>>>>             >? ? ?>> Browse[2]> rpois(9, 1e10)
>>>>>             >? ? ?>> NAs produced[1] NA NA NA NA NA NA NA NA NA
>>>>>             >? ? ?>>
>>>>>             >? ? ?>>
>>>>>             >? ? ?>> ? ????? Should this happen?
>>>>>             >? ? ?>>
>>>>>             >? ? ?>>
>>>>>             >? ? ?>> ? ????? I think that for, say, lambda>1e6,
>>>>>              rpois should return
>>>>>             >? ? ?rnorm(.,
>>>>>             >? ? ?>> lambda, sqrt(lambda)).
>>>>>             >? ? ?> But need to implement carefully; rpois should
>>>>>              always return a
>>>>>             >? ? ?> non-negative integer, whereas rnorm always
>>>>>              returns numeric...
>>>>>             >? ? ?>
>>>>>             >
>>>>>             >? ? ??????? Thanks for the reply.
>>>>>             >
>>>>>             >
>>>>>             >? ? ??????? However, I think it's not acceptable to get
>>>>>              an NA from a
>>>>>             >? ? ?number
>>>>>             >? ? ?that cannot be expressed as an integer.? Whenever
>>>>>              a randomly
>>>>>             >? ? ?generated
>>>>>             >? ? ?number would exceed .Machine$integer.max, the
>>>>>              choice is between
>>>>>             >? ? ?returning NA or a non-integer numeric.? Consider:
>>>>>             >
>>>>>             >
>>>>>             >? ? ??> 2*.Machine$integer.max
>>>>>             >? ? ?[1] 4294967294
>>>>>             >? ? ??> as.integer(2*.Machine$integer.max)
>>>>>             >? ? ?[1] NA
>>>>>             >? ? ?Warning message:
>>>>>             >? ? ?NAs introduced by coercion to integer range
>>>>>             >
>>>>>             >
>>>>>             >? ? ??????? I'd rather have the non-integer numeric.
>>>>>             >
>>>>>             >
>>>>>             >? ? ??????? Spencer
>>>>>             >
>>>>>             > ?______________________________________________
>>>>>             > R-devel at r-project.org <mailto:R-devel at r-project.org>
>>>>>              <mailto:R-devel at r-project.org
>>>>>              <mailto:R-devel at r-project.org>> mailing list
>>>>>             > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>             >
>>>>>             > --
>>>>>             > Sent from Gmail Mobile
    >>>>>> 
>>>>>          --
>>>>>          Sent from Gmail Mobile
    >>>>> --
    >>>>> Sent from Gmail Mobile
    >>>> --
    >>>> Sent from Gmail Mobile
    >>> 
    >>> [[alternative HTML version deleted]]
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> 

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From jor|@mey@ @end|ng |rom gm@||@com  Fri Jan 17 11:31:51 2020
From: jor|@mey@ @end|ng |rom gm@||@com (Joris Meys)
Date: Fri, 17 Jan 2020 11:31:51 +0100
Subject: [Rd] A bug understanding F relative to FALSE?
In-Reply-To: <AM6PR02MB43129D66D628C2B3A821C80992370@AM6PR02MB4312.eurprd02.prod.outlook.com>
References: <AM6PR02MB43129D66D628C2B3A821C80992370@AM6PR02MB4312.eurprd02.prod.outlook.com>
Message-ID: <CAO1zAVYyjLpUt91JhpfHz1REQd01BZds_UG5KnU3m8azbrz5Ew-2308@mail.gmail.com>

As others have pointed out, this is expected behaviour. Let me get on that
hill I'll die on: it is absolutely not suitable. It is way beyond time to
remove T and F as unprotected kind-of-synonyms for TRUE and FALSE, given
the amount of times I had to point out that:

T <- t(matrix(0:3,nrow=2))
isTRUE(T)

was the reason the code didn't do what it's supposed to do. (Also don't use
T as short for "Transpose of my matrix", but that's another hill.)

As we've become more strict on the use of T and F in packages, maybe 4.0.0
is a good milestone to finally drop this relic from the past? One can
dream...

Kind regards
Joris

On Wed, Jan 15, 2020 at 3:14 PM IAGO GIN? V?ZQUEZ <i.gine at pssjd.org> wrote:

> Hi all,
>
> Is the next behaviour suitable?
>
> identical(F,FALSE)
>
> ## [1] TRUE
>
> utils::getParseData(parse(text = "c(F,FALSE)", keep.so=rce = TRUE))
>
> ##    line1 col1 line2 col2 id parent                token terminal  text
> ## 14     1    1     1   10 14      0                 expr    FALSE
> ## 1      1    1     1    1  1      3 SYMBOL_FUNCTION_CALL     TRUE     c
> ## 3      1    1     1    1  3     14                 expr    FALSE
> ## 2      1    2     1    2  2     14                  '('     TRUE     (
> ## 4      1    3     1    3  4      6               SYMBOL     TRUE     F
> ## 6      1    3     1    3  6     14                 expr    FALSE
> ## 5      1    4     1    4  5     14                  ','     TRUE     ,
> ## 9      1    5     1    9  9     10            NUM_CONST     TRUE FALSE
> ## 10     1    5     1    9 10     14                 expr    FALSE
> ## 11     1   10     1   10 11     14                  ')'     TRUE     )
>
> I would expect that token for F is the same as token for FALSE.
>
>
> Thank you!
>
> Iago
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From btyner @end|ng |rom gm@||@com  Mon Jan 20 14:10:49 2020
From: btyner @end|ng |rom gm@||@com (Benjamin Tyner)
Date: Mon, 20 Jan 2020 08:10:49 -0500
Subject: [Rd] [External] Re: rpois(9, 1e10)
In-Reply-To: <24101.29271.515200.878794@stat.math.ethz.ch>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
 <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
 <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>
 <24101.29271.515200.878794@stat.math.ethz.ch>
Message-ID: <737c3431-cac8-2a06-a33c-63f4ed4ac764@gmail.com>

On 1/20/20 4:26 AM, Martin Maechler wrote:
> Coming late here -- after enjoying a proper weekend ;-) --
> I have been agreeing (with Spencer, IIUC) on this for a long
> time (~ 3 yrs, or more?), namely that I've come to see it as a
> "design bug" that  rpois() {and similar} must return return typeof() "integer".
>
> More strongly, I'm actually pretty convinced they should return
> (integer-valued) double instead of NA_integer_   and for that
> reason should always return double:
> Even if we have (hopefully) a native 64bit integer in R,
> 2^64 is still teeny tiny compared .Machine$double.max
>
> (and then maybe we'd have .Machine$longdouble.max  which would
>   be considerably larger than double.max unless on Windows, where
>   the wise men at Microsoft decided to keep their workload simple
>   by defining "long double := double" - as 'long double'
>   unfortunately is not well defined by C standards)
>
> Martin
>
Martin if you are in favor, then certainly no objection from me! ;-)

So now what about other discrete distributions e.g. could a similar 
enhancement apply here?

 > rgeom(10L, 1e-10)
 ?[1]???????? NA 1503061294???????? NA???????? NA 1122447583???????? NA
 ?[7]???????? NA???????? NA???????? NA???????? NA
Warning message:
In rgeom(10L, 1e-10) : NAs produced


From okhom@ @end|ng |rom gm@||@com  Mon Jan 20 16:34:05 2020
From: okhom@ @end|ng |rom gm@||@com (Oleh Khoma)
Date: Mon, 20 Jan 2020 15:34:05 +0000
Subject: [Rd] Minor bug in error message in datetime.c
Message-ID: <VI1PR08MB33125E8C81473527E0E48640AF320@VI1PR08MB3312.eurprd08.prod.outlook.com>

Hi,



I have spotted a minor bug in do_strptime() function. Here is a patch:



?--- a/src/main/datetime.c

+++ b/src/main/datetime.c

@@ -1048,7 +1048,7 @@ SEXP attribute_hidden do_strptime(SEXP call, SEXP op, SEXP args, SEXP env)

     if(!isString((x = CAR(args))))

        error(_("invalid '%s' argument"), "x");

     if(!isString((sformat = CADR(args))) || XLENGTH(sformat) == 0)

-       error(_("invalid '%s' argument"), "x");

+       error(_("invalid '%s' argument"), "format");



One could spend quite some time figuring out what is wrong with his ?x?, when the problem is with ?format? :)







Kind regards,

Oleh Khoma

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jan 20 18:27:33 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 20 Jan 2020 18:27:33 +0100
Subject: [Rd] Minor bug in error message in datetime.c
In-Reply-To: <VI1PR08MB33125E8C81473527E0E48640AF320@VI1PR08MB3312.eurprd08.prod.outlook.com>
References: <VI1PR08MB33125E8C81473527E0E48640AF320@VI1PR08MB3312.eurprd08.prod.outlook.com>
Message-ID: <24101.58117.507508.918191@stat.math.ethz.ch>

>>>>> Oleh Khoma 
>>>>>     on Mon, 20 Jan 2020 15:34:05 +0000 writes:

    > Hi,
    > I have spotted a minor bug in do_strptime() function. Here is a patch:



    > ?--- a/src/main/datetime.c

    > +++ b/src/main/datetime.c

    > @@ -1048,7 +1048,7 @@ SEXP attribute_hidden do_strptime(SEXP call, SEXP op, SEXP args, SEXP env)

    > if(!isString((x = CAR(args))))

    > error(_("invalid '%s' argument"), "x");

    > if(!isString((sformat = CADR(args))) || XLENGTH(sformat) == 0)

    > -       error(_("invalid '%s' argument"), "x");

    > +       error(_("invalid '%s' argument"), "format");



    > One could spend quite some time figuring out what is wrong with his ?x?, when the problem is with ?format? :)



Thank you, Oleh.
This has indeed been a cut'n'paste lapsus quite a while ago,
undetected till now.

It's fixed now (but I'll add a regression test later).

Martin



    > Kind regards,

    > Oleh Khoma

    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jan 20 18:33:20 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 20 Jan 2020 18:33:20 +0100
Subject: [Rd] [External] Re: rpois(9, 1e10)
In-Reply-To: <737c3431-cac8-2a06-a33c-63f4ed4ac764@gmail.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
 <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
 <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>
 <24101.29271.515200.878794@stat.math.ethz.ch>
 <737c3431-cac8-2a06-a33c-63f4ed4ac764@gmail.com>
Message-ID: <24101.58464.554256.516772@stat.math.ethz.ch>

>>>>> Benjamin Tyner 
>>>>>     on Mon, 20 Jan 2020 08:10:49 -0500 writes:

    > On 1/20/20 4:26 AM, Martin Maechler wrote:
    >> Coming late here -- after enjoying a proper weekend ;-) --
    >> I have been agreeing (with Spencer, IIUC) on this for a long
    >> time (~ 3 yrs, or more?), namely that I've come to see it as a
    >> "design bug" that  rpois() {and similar} must return return typeof() "integer".
    >> 
    >> More strongly, I'm actually pretty convinced they should return
    >> (integer-valued) double instead of NA_integer_   and for that
    >> reason should always return double:
    >> Even if we have (hopefully) a native 64bit integer in R,
    >> 2^64 is still teeny tiny compared .Machine$double.max
    >> 
    >> (and then maybe we'd have .Machine$longdouble.max  which would
    >> be considerably larger than double.max unless on Windows, where
    >> the wise men at Microsoft decided to keep their workload simple
    >> by defining "long double := double" - as 'long double'
    >> unfortunately is not well defined by C standards)
    >> 
    >> Martin
    >> 
    > Martin if you are in favor, then certainly no objection from me! ;-)

    > So now what about other discrete distributions e.g. could a similar 
    > enhancement apply here?


    >> rgeom(10L, 1e-10)
    > ?[1]???????? NA 1503061294???????? NA???????? NA 1122447583???????? NA
    > ?[7]???????? NA???????? NA???????? NA???????? NA
    > Warning message:
    > In rgeom(10L, 1e-10) : NAs produced

yes, of course there are several such distributions.

It's really something that should be discussed (possibly not
here, .. but then I've started it here ...).

The  NEWS  for R 3.0.0 contain (in NEW FEATURES) :

    * Functions rbinom(), rgeom(), rhyper(), rpois(), rnbinom(),
      rsignrank() and rwilcox() now return integer (not double)
      vectors.  This halves the storage requirements for large
      simulations.

and what I've been suggesting is to revert this change
(svn rev r60225-6) which was purposefully and diligently done by
a fellow R core member, so indeed must be debatable. 

Martin


From bbo|ker @end|ng |rom gm@||@com  Mon Jan 20 18:54:52 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 20 Jan 2020 12:54:52 -0500
Subject: [Rd] [External] Re: rpois(9, 1e10)
In-Reply-To: <24101.58464.554256.516772@stat.math.ethz.ch>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
 <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
 <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>
 <24101.29271.515200.878794@stat.math.ethz.ch>
 <737c3431-cac8-2a06-a33c-63f4ed4ac764@gmail.com>
 <24101.58464.554256.516772@stat.math.ethz.ch>
Message-ID: <fe22a1f1-5492-0aa8-dd9f-1c66f6454529@gmail.com>


 Ugh, sounds like competing priorities.

  * maintain type consistency
  * minimize storage (= current version, since 3.0.0)
  * maximize utility for large lambda (= proposed change)
  * keep user interface, and code, simple (e.g., it would be easy enough
to add a switch that provided user control of int vs double return value)
  * backward compatibility



On 2020-01-20 12:33 p.m., Martin Maechler wrote:
>>>>>> Benjamin Tyner 
>>>>>>     on Mon, 20 Jan 2020 08:10:49 -0500 writes:
> 
>     > On 1/20/20 4:26 AM, Martin Maechler wrote:
>     >> Coming late here -- after enjoying a proper weekend ;-) --
>     >> I have been agreeing (with Spencer, IIUC) on this for a long
>     >> time (~ 3 yrs, or more?), namely that I've come to see it as a
>     >> "design bug" that  rpois() {and similar} must return return typeof() "integer".
>     >> 
>     >> More strongly, I'm actually pretty convinced they should return
>     >> (integer-valued) double instead of NA_integer_   and for that
>     >> reason should always return double:
>     >> Even if we have (hopefully) a native 64bit integer in R,
>     >> 2^64 is still teeny tiny compared .Machine$double.max
>     >> 
>     >> (and then maybe we'd have .Machine$longdouble.max  which would
>     >> be considerably larger than double.max unless on Windows, where
>     >> the wise men at Microsoft decided to keep their workload simple
>     >> by defining "long double := double" - as 'long double'
>     >> unfortunately is not well defined by C standards)
>     >> 
>     >> Martin
>     >> 
>     > Martin if you are in favor, then certainly no objection from me! ;-)
> 
>     > So now what about other discrete distributions e.g. could a similar 
>     > enhancement apply here?
> 
> 
>     >> rgeom(10L, 1e-10)
>     > ?[1]???????? NA 1503061294???????? NA???????? NA 1122447583???????? NA
>     > ?[7]???????? NA???????? NA???????? NA???????? NA
>     > Warning message:
>     > In rgeom(10L, 1e-10) : NAs produced
> 
> yes, of course there are several such distributions.
> 
> It's really something that should be discussed (possibly not
> here, .. but then I've started it here ...).
> 
> The  NEWS  for R 3.0.0 contain (in NEW FEATURES) :
> 
>     * Functions rbinom(), rgeom(), rhyper(), rpois(), rnbinom(),
>       rsignrank() and rwilcox() now return integer (not double)
>       vectors.  This halves the storage requirements for large
>       simulations.
> 
> and what I've been suggesting is to revert this change
> (svn rev r60225-6) which was purposefully and diligently done by
> a fellow R core member, so indeed must be debatable. 
> 
> Martin
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @purd|e@@ @end|ng |rom gm@||@com  Mon Jan 20 21:15:39 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Tue, 21 Jan 2020 09:15:39 +1300
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <24093.31179.751562.718817@stat.math.ethz.ch>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
 <24092.42945.719678.758685@stat.math.ethz.ch>
 <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>
 <24093.31179.751562.718817@stat.math.ethz.ch>
Message-ID: <CAB8pepx9Hg=JOuRj+WkyaRiykhi2Dp4sJSamGtdh3hO8JB7YDQ@mail.gmail.com>

> I do want to entice people to have a long look beyond closed
> source OS into the world of Free Software where not only R is
> FOSS (Free and Open Source Software) but (all / almost) all the
> tools you use are of that same spirit.
>
> Best,
> Martin

I've reconsidered.
You're 100% correct.

I'm planning to try ReactOS.
(Hope it works...)

Thanks Martin, great advice...


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 21 09:25:19 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 21 Jan 2020 09:25:19 +0100
Subject: [Rd] [External] Re: rpois(9, 1e10)
In-Reply-To: <fe22a1f1-5492-0aa8-dd9f-1c66f6454529@gmail.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
 <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
 <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>
 <24101.29271.515200.878794@stat.math.ethz.ch>
 <737c3431-cac8-2a06-a33c-63f4ed4ac764@gmail.com>
 <24101.58464.554256.516772@stat.math.ethz.ch>
 <fe22a1f1-5492-0aa8-dd9f-1c66f6454529@gmail.com>
Message-ID: <24102.46447.821240.891477@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Mon, 20 Jan 2020 12:54:52 -0500 writes:

    > Ugh, sounds like competing priorities.

indeed.

    > * maintain type consistency
    > * minimize storage (= current version, since 3.0.0)
    > * maximize utility for large lambda (= proposed change)
    > * keep user interface, and code, simple (e.g., it would be easy enough
    >   to add a switch that provided user control of int vs double return value)
    > * backward compatibility

Last night, it came to my mind that we should do what we have
been doing in quite a few places in R, the last couple of years:

  Return integer when possible, and switch to return double when
  integers don't fit.

We've been doing so even for  1:N  (well, now with additional ALTREP wrapper),
seq(), and even the fundamental  length()  function.

So I sat down and implemented it .. and it seemed to work
perfectly:  Returning the same random numbers as now, but
switching to use double (instead of returning NAs) when the
values are too large.

I'll probably commit that to R-devel quite soonish.
Martin

    > On 2020-01-20 12:33 p.m., Martin Maechler wrote:
    >>>>>>> Benjamin Tyner 
    >>>>>>> on Mon, 20 Jan 2020 08:10:49 -0500 writes:
    >> 
    >> > On 1/20/20 4:26 AM, Martin Maechler wrote:
    >> >> Coming late here -- after enjoying a proper weekend ;-) --
    >> >> I have been agreeing (with Spencer, IIUC) on this for a long
    >> >> time (~ 3 yrs, or more?), namely that I've come to see it as a
    >> >> "design bug" that  rpois() {and similar} must return return typeof() "integer".
    >> >> 
    >> >> More strongly, I'm actually pretty convinced they should return
    >> >> (integer-valued) double instead of NA_integer_   and for that
    >> >> reason should always return double:
    >> >> Even if we have (hopefully) a native 64bit integer in R,
    >> >> 2^64 is still teeny tiny compared .Machine$double.max
    >> >> 
    >> >> (and then maybe we'd have .Machine$longdouble.max  which would
    >> >> be considerably larger than double.max unless on Windows, where
    >> >> the wise men at Microsoft decided to keep their workload simple
    >> >> by defining "long double := double" - as 'long double'
    >> >> unfortunately is not well defined by C standards)
    >> >> 
    >> >> Martin
    >> >> 
    >> > Martin if you are in favor, then certainly no objection from me! ;-)
    >> 
    >> > So now what about other discrete distributions e.g. could a similar 
    >> > enhancement apply here?
    >> 
    >> 
    >> >> rgeom(10L, 1e-10)
    >> > ?[1]???????? NA 1503061294???????? NA???????? NA 1122447583???????? NA
    >> > ?[7]???????? NA???????? NA???????? NA???????? NA
    >> > Warning message:
    >> > In rgeom(10L, 1e-10) : NAs produced
    >> 
    >> yes, of course there are several such distributions.
    >> 
    >> It's really something that should be discussed (possibly not
    >> here, .. but then I've started it here ...).
    >> 
    >> The  NEWS  for R 3.0.0 contain (in NEW FEATURES) :
    >> 
    >> * Functions rbinom(), rgeom(), rhyper(), rpois(), rnbinom(),
    >> rsignrank() and rwilcox() now return integer (not double)
    >> vectors.  This halves the storage requirements for large
    >> simulations.
    >> 
    >> and what I've been suggesting is to revert this change
    >> (svn rev r60225-6) which was purposefully and diligently done by
    >> a fellow R core member, so indeed must be debatable. 
    >> 
    >> Martin
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 21 10:51:23 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 21 Jan 2020 10:51:23 +0100
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <CAB8pepx9Hg=JOuRj+WkyaRiykhi2Dp4sJSamGtdh3hO8JB7YDQ@mail.gmail.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
 <24092.42945.719678.758685@stat.math.ethz.ch>
 <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>
 <24093.31179.751562.718817@stat.math.ethz.ch>
 <CAB8pepx9Hg=JOuRj+WkyaRiykhi2Dp4sJSamGtdh3hO8JB7YDQ@mail.gmail.com>
Message-ID: <24102.51611.411137.464217@stat.math.ethz.ch>

>>>>> Abby Spurdle 
>>>>>     on Tue, 21 Jan 2020 09:15:39 +1300 writes:

    >> I do want to entice people to have a long look beyond closed
    >> source OS into the world of Free Software where not only R is
    >> FOSS (Free and Open Source Software) but (all / almost) all the
    >> tools you use are of that same spirit.
    >> 
    >> Best,
    >> Martin

    > I've reconsidered.
    > You're 100% correct.

Thank you.

    > I'm planning to try ReactOS.
    > (Hope it works...)

    > Thanks Martin, great advice...

Well, to choose ReactOS ()
instead of a version of Linux (there
have some Linux distributions that have aimed for being close to
Windows in their "look and feel") is  much braver and more
risky, but then, your learning experience, including possibly being the
first one to run R there (?) ((possibly even learning how to
*build* R there from the sources ??)),  will feel more
frontier-like and self determined than just following the Linux
crowd ;-) ;-) :-)

Martin


From hp@ge@ @end|ng |rom |redhutch@org  Tue Jan 21 18:33:01 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Tue, 21 Jan 2020 17:33:01 +0000
Subject: [Rd] 
 class(<matrix>) |--> c("matrix", "arrary") -- and S3 dispatch
In-Reply-To: <24022.49679.656332.562828@stat.math.ethz.ch>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <CABdHhvEzVtwajH3fRD_ZOzChf6kVr2j3j6dD-Uo2i92Vj9kTtQ@mail.gmail.com>
 <52b343f6-0861-ac16-4eff-c91d17501843@fredhutch.org>
 <24014.53971.84201.964445@stat.math.ethz.ch>
 <24022.49679.656332.562828@stat.math.ethz.ch>
Message-ID: <4440351b-af29-b71b-446e-32e3d5a89d39@fredhutch.org>

Dear Martin,

What's the ETA for _R_CLASS_MATRIX_ARRAY_=TRUE to become the new 
unconditional behavior in R devel? Thanks!

H.


On 11/21/19 08:57, Martin Maechler wrote:
> 
> TLDR: This is quite technical, still somewhat important:
>       1)  R 4.0.0 will become a bit more coherent: a matrix is an array
>       2)  Your package (or one you use) may be affected.
> 
> 
>>>>>> Martin Maechler
>>>>>>      on Fri, 15 Nov 2019 17:31:15 +0100 writes:
> 
>>>>>> Pages, Herve
>>>>>>      on Thu, 14 Nov 2019 19:13:47 +0000 writes:
> 
>      >> On 11/14/19 05:47, Hadley Wickham wrote:
>      >>> On Sun, Nov 10, 2019 at 2:37 AM Martin Maechler ... wrote:
> 
>      [................]
>      
>      >>>>> Note again that both "matrix" and "array" are special [see ?class] as
>      >>>>> being of  __implicit class__  and I am considering that this
>      >>>>> implicit class behavior for these two should be slightly
>      >>>>> changed ....
>      >>>>>
>      >>>>> And indeed I think you are right on spot and this would mean
>      >>>>> that indeed the implicit class
>      >>>>> "matrix" should rather become c("matrix", "array").
>      >>>>
>      >>>> I've made up my mind (and not been contradicted by my fellow R
>      >>>> corers) to try go there for  R 4.0.0   next April.
> 
>      >>> I can't seem to find the previous thread, so would you mind being a
>      >>> bit more explicit here? Do you mean adding "array" to the implicit
>      >>> class?
> 
>      >> It's late in Europe ;-)
> 
>      >> That's my understanding. I think the plan is to have class(matrix())
>      >> return c("matrix", "array"). No class attributes added to matrix or
>      >> array objects.
> 
>      >> It's all what is needed to have inherits(matrix(), "array") return TRUE
>      >> (instead of FALSE at the moment) and S3 dispatch pick up the foo.array
>      >> method when foo(matrix()) is called and there is no foo.matrix method.
> 
>      > Thank you, Herv?!  That's exactly the plan.
> 
> BUT it's wrong what I (and Peter and Herv? and ....) had assumed:
> 
> If I just change the class
>       (as I already did a few days ago, but you must activate the change
>        via environment variable, see below),
> 
> S3 dispatch does *NOT* at all pick it up:
> "matrix" (and "array") are even more special here (see below),
> and from Hadley's questions, in hindsight I now see that he's been aware
> of that and I hereby apologize to Hadley for not having thought
> and looked more, when he asked ..
> 
> Half an hour ago, I've done another source code commit (svn r77446),
> to "R-devel" only, of course, and the R-devel NEWS now starts as
> 
> ------------------------------------------------------------
> 
> CHANGES IN R-devel:
> 
>    USER-VISIBLE CHANGES:
> 
>      ?  .... intention that the next non-patch release should be 4.0.0.
> 
>      ? R now builds by default against a PCRE2 library ........
>        ...................
>        ...................
> 
>      ? For now only active when environment variable
>        _R_CLASS_MATRIX_ARRAY_ is set to non-empty, but planned to be the
>        new unconditional behavior when R 4.0.0 is released:
> 
>        Newly, matrix objects also inherit from class "array", namely,
>        e.g., class(diag(1)) is c("matrix", "array") which invalidates
>        code (wrongly) assuming that length(class(obj)) == 1, a wrong
>        assumption that is less frequently fulfilled now.  (Currently
>        only after setting _R_CLASS_MATRIX_ARRAY_ to non-empty.)
> 
>        S3 methods for "array", i.e., <someFun>.array(), are now also
>        dispatched for matrix objects.
> 
> ------------------------------------------------------------
> (where only the very last 1.5 lines paragraph is new.)
> 
> Note the following
> (if you use a version of R-devel, with svn rev >= 77446; which
>   you may get as a binary for Windows in about one day; everyone
>   else needs to compile for the sources .. or wait a bit, maybe
>   also not much longer than one day, for a docker image) :
> 
> 
>> Sys.unsetenv("_R_CLASS_MATRIX_ARRAY_") # ==> current R behavior
>> class(m <- diag(1))
> [1] "matrix"
>> Sys.setenv("_R_CLASS_MATRIX_ARRAY_" = "BOOH !") # ==> future R behavior
>> class(m)
> [1] "matrix" "array"
>>
>> foo <- function(x) UseMethod("foo")
>> foo.array <- function(x) "made in foo.array()"
>> foo(m)
> [1] "made in foo.array()"
>> Sys.unsetenv("_R_CLASS_MATRIX_ARRAY_")# ==> current R behavior
>> foo(m)
> Error in UseMethod("foo") :
>    no applicable method for 'foo' applied to an object of class "c('matrix', 'double', 'numeric')"
> 
>> Sys.setenv("_R_CLASS_MATRIX_ARRAY_" = TRUE) # ==> future R behavior
>> foo(m)
> [1] "made in foo.array()"
>> foo.A <- foo.array ; rm(foo.array)
>> foo(m)
> Error in UseMethod("foo") :
>    no applicable method for 'foo' applied to an object of class "c('matrix', 'array', 'double', 'numeric')"
>>
> 
> So, with my commit 77446, the  _R_CLASS_MATRIX_ARRAY_
> environment variable also changes the
> 
>     "S3 dispatch determining class"
> 
> mentioned as 'class' in the error message (of the two cases, old
> and new) above,  which in R <= 3.6.x for a numeric matrix is
> 
>      c('matrix', 'double', 'numeric')
> 
> and from R 4.0.0 on  will be
> 
>      c('matrix', 'array', 'double', 'numeric')
> 
> Note that this is *not* (in R <= 3.6.x, nor very probably in R 4.0.0)
> the same as  R's  class().
> Hadley calls this long class vector the  'implicit class' -- which
> is a good term but somewhat conflicting with R's (i.e. R-core's)
> "definition" used in the  ?class  help page (for ca. 11 years).
> 
> R's internal C code has a nice function class R_data_class2()
> which computes this 'S3-dispatch-class' character (vector) for
> any R object, and R_data_class2() is indeed called from (the
> underlying C function of)  R's UseMethod().
> 
> Using the above fact of an error message,
> I wrote a nice (quite well tested) function  my.class2()  which
> returns this S3_dispatch_class() also in current versions of R:
> 
> my.class2 <- function(x) { # use a fn name not used by any sane ..
>      foo.7.3.343 <- function(x) UseMethod("foo.7.3.343")
>      msg <- tryCatch(foo.7.3.343(x), error=function(e) e$message)
>      clm <- sub('"$', '', sub(".* of class \"", '', msg))
>      if(is.language(x) || is.function(x))
>          clm
>      else {
>          cl <- str2lang(clm)
>          if(is.symbol(cl)) as.character(cl) else eval(cl)
>      }
> }
> 
> ## str2lang() needs R >= 3.6.0:
> if(getRversion() < "3.6.0") ## substitute for str2lang(), good enough here:
>      str2lang <- function(s) parse(text = s, keep.source=FALSE)[[1]]
> 
>    
> Now you can look at such things yourself:
> 
> ## --------------------- the "interesting" cases : ---
> ## integer and double
> my.class2( pi) 	# == c("double",  "numeric")
> my.class2(1:2) 	# == c("integer", "numeric")
> ## matrix and array [also combined with int / double ] :
> my.class2(matrix(1L, 2,3))   	# == c(matrixCL, "integer", "numeric")  <<<
> my.class2(matrix(pi, 2,3))   	# == c(matrixCL,  "double", "numeric")  <<<
> my.class2(array("A", 2:3))   	# == c(matrixCL,  "character")          <<<
> my.class2(array(1:24, 2:4))  	# == c("array",  "integer", "numeric")
> my.class2(array( pi , 2:4))  	# == c("array",   "double", "numeric")
> my.class2(array(TRUE, 2:4))  	# == c("array", "logical")
> my.class2(array(letters, 2:4))	# == c("array", "character")
> my.class2(array(1:24 + 1i, 2))	# == c("array", "complex")
> 
> ## other cases
> my.class2(NA) 	# == class(NA) : "logical"
> my.class2("A") 	# == class("B"): "character"
> my.class2(as.raw(0:2)) 	# == "raw"
> my.class2(1 + 2i) 	# == "complex"
> my.class2(USJudgeRatings)#== "data.frame"
> my.class2(class) 	# == "function" # also for a primitive
> my.class2(globalenv()) 	# == "environment"
> my.class2(quote(sin(x)))# == "call"
> my.class2(quote(sin) )  # == "name"
> my.class2(quote({}))	# == class(*) == "{"
> my.class2(quote((.)))	# == class(*) == "("
> 
> -----------------------------------------------------
> 
> note that of course, the lines marked "<<<" above, contain
> 'matrixCL'  which is "matrix" in "old" (i.e. current) R,
> 	    and is c("matrix", "array") in "new" (i.e. future) R.
> 
> Last but not least: It's quite trivial (only few words need to
> be added to the sources; more to the documentation)  to add an R
> function to base R which provides the same as my.class2() above,
> (but much more efficiently, not via catching error messages !!),
> and my current proposal for that function's name is  .class2()
> {it should start with a dot ("."), as it's not for the simple
>   minded average useR ... and you know how I'm happy with
>   function names that do not need one single [Shift] key ...}
> 
> The current plan contains
> 
> 1)  Notify CRAN package maintainers (ca 140) whose packages no
>      longer pass R CMD check  when the feature is turned on
>      (via setting the environment variable) in R-devel.
> 
> 2a) (Some) CRAN team members set _R_CLASS_MATRIX_ARRAY_ (to non-empty),
>      as part of the incoming checks, at least for all new CRAN submissions
> 
> 2b) set the  _R_CLASS_MATRIX_ARRAY_ (to non-empty), as part of
>      ' R CMD check --as-cran <pkg>'
> 
> 3)  Before the end of 2019, change the R sources (for R-devel)
>      such that it behaves as it behaves currently when the environment
>      variable is set *AND* abolish this environment variable from
>      the sources.  {read on to learn *why*}
> 
> Consequently (to 3), R 4.0.0 will behave as indicated, unconditionally.
> 
> Note that (as I've shown above in the first example set) this is
> set up in such a manner that you can change the environment
> variable during a *running* R session, and observe the effect immediately.
> This however lead to some slow down of quite a bit of the R
> code, because actually the environment variable has to be
> checked quite often (easily dozens of times for simple R calls).
> 
> For that reason, we want to do "3)" as quickly as possible.
> 
> Please do not hesitate to ask or comment
> -- here, not on Twitter, please --  noting that I'll be
> basically offline for an extended weekend within 24h, now.
> 
> I hope this will eventually to lead to clean up and clarity in
> R, and hence should be worth the pain of broken
> back-compatibility and having to adapt your (almost always only
> sub-optimally written ;-)) R code,
> see also my Blog   https://urldefense.proofpoint.com/v2/url?u=http-3A__bit.ly_R-5Fblog-5Fclass-5Fthink-5F2x&d=DwIDaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=xAGXmo1FhJxT-qBfj-McDEn3sqWhqJHNV-IPpN7g6oA&s=yUUwdjl5LE90V0tLTM3FZYZ0zHf8coHo49Vt95O7IwQ&e=
> 
> Martin Maechler
> ETH Zurich and R Core team
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Jan 22 09:54:25 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 22 Jan 2020 09:54:25 +0100
Subject: [Rd] [External] Re: rpois(9, 1e10)
In-Reply-To: <24102.46447.821240.891477@stat.math.ethz.ch>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
 <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
 <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>
 <24101.29271.515200.878794@stat.math.ethz.ch>
 <737c3431-cac8-2a06-a33c-63f4ed4ac764@gmail.com>
 <24101.58464.554256.516772@stat.math.ethz.ch>
 <fe22a1f1-5492-0aa8-dd9f-1c66f6454529@gmail.com>
 <24102.46447.821240.891477@stat.math.ethz.ch>
Message-ID: <24104.3521.323078.781234@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Tue, 21 Jan 2020 09:25:19 +0100 writes:

>>>>> Ben Bolker 
>>>>>     on Mon, 20 Jan 2020 12:54:52 -0500 writes:

    >> Ugh, sounds like competing priorities.

    > indeed.

    >> * maintain type consistency
    >> * minimize storage (= current version, since 3.0.0)
    >> * maximize utility for large lambda (= proposed change)
    >> * keep user interface, and code, simple (e.g., it would be easy enough
    >> to add a switch that provided user control of int vs double return value)
    >> * backward compatibility

    > Last night, it came to my mind that we should do what we have
    > been doing in quite a few places in R, the last couple of years:

    > Return integer when possible, and switch to return double when
    > integers don't fit.

    > We've been doing so even for  1:N  (well, now with additional ALTREP wrapper),
    > seq(), and even the fundamental  length()  function.

    > So I sat down and implemented it .. and it seemed to work
    > perfectly:  Returning the same random numbers as now, but
    > switching to use double (instead of returning NAs) when the
    > values are too large.

    > I'll probably commit that to R-devel quite soonish.
    > Martin

Committed in svn rev 77690; this is really very advantageous, as
in some cases / applications or even just limit cases, you'd
easily get into overflow sitations.

The new R 4.0.0 behavior is IMO  "the best of" being memory
efficient (integer storage) in most cases (back compatible to R 3.x.x) and
returning desired random numbers in large cases (compatible to R <= 2.x.x).

Martin

    >> On 2020-01-20 12:33 p.m., Martin Maechler wrote:
    >>>>>>>> Benjamin Tyner 
    >>>>>>>> on Mon, 20 Jan 2020 08:10:49 -0500 writes:
    >>> 
    >>> > On 1/20/20 4:26 AM, Martin Maechler wrote:
    >>> >> Coming late here -- after enjoying a proper weekend ;-) --
    >>> >> I have been agreeing (with Spencer, IIUC) on this for a long
    >>> >> time (~ 3 yrs, or more?), namely that I've come to see it as a
    >>> >> "design bug" that  rpois() {and similar} must return return typeof() "integer".
    >>> >> 
    >>> >> More strongly, I'm actually pretty convinced they should return
    >>> >> (integer-valued) double instead of NA_integer_   and for that
    >>> >> reason should always return double:
    >>> >> Even if we have (hopefully) a native 64bit integer in R,
    >>> >> 2^64 is still teeny tiny compared .Machine$double.max
    >>> >> 
    >>> >> (and then maybe we'd have .Machine$longdouble.max  which would
    >>> >> be considerably larger than double.max unless on Windows, where
    >>> >> the wise men at Microsoft decided to keep their workload simple
    >>> >> by defining "long double := double" - as 'long double'
    >>> >> unfortunately is not well defined by C standards)
    >>> >> 
    >>> >> Martin
    >>> >> 
    >>> > Martin if you are in favor, then certainly no objection from me! ;-)
    >>> 
    >>> > So now what about other discrete distributions e.g. could a similar 
    >>> > enhancement apply here?
    >>> 
    >>> 
    >>> >> rgeom(10L, 1e-10)
    >>> > ?[1]???????? NA 1503061294???????? NA???????? NA 1122447583???????? NA
    >>> > ?[7]???????? NA???????? NA???????? NA???????? NA
    >>> > Warning message:
    >>> > In rgeom(10L, 1e-10) : NAs produced
    >>> 
    >>> yes, of course there are several such distributions.
    >>> 
    >>> It's really something that should be discussed (possibly not
    >>> here, .. but then I've started it here ...).
    >>> 
    >>> The  NEWS  for R 3.0.0 contain (in NEW FEATURES) :
    >>> 
    >>> * Functions rbinom(), rgeom(), rhyper(), rpois(), rnbinom(),
    >>> rsignrank() and rwilcox() now return integer (not double)
    >>> vectors.  This halves the storage requirements for large
    >>> simulations.
    >>> 
    >>> and what I've been suggesting is to revert this change
    >>> (svn rev r60225-6) which was purposefully and diligently done by
    >>> a fellow R core member, so indeed must be debatable. 
    >>> 
    >>> Martin
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> 

    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Jan 22 09:55:09 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 22 Jan 2020 09:55:09 +0100
Subject: [Rd] [External] Re: rpois(9, 1e10)
In-Reply-To: <24102.46447.821240.891477@stat.math.ethz.ch>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
 <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
 <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>
 <24101.29271.515200.878794@stat.math.ethz.ch>
 <737c3431-cac8-2a06-a33c-63f4ed4ac764@gmail.com>
 <24101.58464.554256.516772@stat.math.ethz.ch>
 <fe22a1f1-5492-0aa8-dd9f-1c66f6454529@gmail.com>
 <24102.46447.821240.891477@stat.math.ethz.ch>
Message-ID: <24104.3565.892623.638477@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Tue, 21 Jan 2020 09:25:19 +0100 writes:

>>>>> Ben Bolker 
>>>>>     on Mon, 20 Jan 2020 12:54:52 -0500 writes:

    >> Ugh, sounds like competing priorities.

    > indeed.

    >> * maintain type consistency
    >> * minimize storage (= current version, since 3.0.0)
    >> * maximize utility for large lambda (= proposed change)
    >> * keep user interface, and code, simple (e.g., it would be easy enough
    >> to add a switch that provided user control of int vs double return value)
    >> * backward compatibility

    > Last night, it came to my mind that we should do what we have
    > been doing in quite a few places in R, the last couple of years:

    > Return integer when possible, and switch to return double when
    > integers don't fit.

    > We've been doing so even for  1:N  (well, now with additional ALTREP wrapper),
    > seq(), and even the fundamental  length()  function.

    > So I sat down and implemented it .. and it seemed to work
    > perfectly:  Returning the same random numbers as now, but
    > switching to use double (instead of returning NAs) when the
    > values are too large.

    > I'll probably commit that to R-devel quite soonish.
    > Martin

Committed in svn rev 77690; this is really very advantageous, as
in some cases / applications or even just limit cases, you'd
easily get into overflow sitations.

The new R 4.0.0 behavior is IMO  "the best of" being memory
efficient (integer storage) in most cases (back compatible to R 3.x.x) and
returning desired random numbers in large cases (compatible to R <= 2.x.x).

Martin

    >> On 2020-01-20 12:33 p.m., Martin Maechler wrote:
    >>>>>>>> Benjamin Tyner 
    >>>>>>>> on Mon, 20 Jan 2020 08:10:49 -0500 writes:
    >>> 
    >>> > On 1/20/20 4:26 AM, Martin Maechler wrote:
    >>> >> Coming late here -- after enjoying a proper weekend ;-) --
    >>> >> I have been agreeing (with Spencer, IIUC) on this for a long
    >>> >> time (~ 3 yrs, or more?), namely that I've come to see it as a
    >>> >> "design bug" that  rpois() {and similar} must return return typeof() "integer".
    >>> >> 
    >>> >> More strongly, I'm actually pretty convinced they should return
    >>> >> (integer-valued) double instead of NA_integer_   and for that
    >>> >> reason should always return double:
    >>> >> Even if we have (hopefully) a native 64bit integer in R,
    >>> >> 2^64 is still teeny tiny compared .Machine$double.max
    >>> >> 
    >>> >> (and then maybe we'd have .Machine$longdouble.max  which would
    >>> >> be considerably larger than double.max unless on Windows, where
    >>> >> the wise men at Microsoft decided to keep their workload simple
    >>> >> by defining "long double := double" - as 'long double'
    >>> >> unfortunately is not well defined by C standards)
    >>> >> 
    >>> >> Martin
    >>> >> 
    >>> > Martin if you are in favor, then certainly no objection from me! ;-)
    >>> 
    >>> > So now what about other discrete distributions e.g. could a similar 
    >>> > enhancement apply here?
    >>> 
    >>> 
    >>> >> rgeom(10L, 1e-10)
    >>> > ?[1]???????? NA 1503061294???????? NA???????? NA 1122447583???????? NA
    >>> > ?[7]???????? NA???????? NA???????? NA???????? NA
    >>> > Warning message:
    >>> > In rgeom(10L, 1e-10) : NAs produced
    >>> 
    >>> yes, of course there are several such distributions.
    >>> 
    >>> It's really something that should be discussed (possibly not
    >>> here, .. but then I've started it here ...).
    >>> 
    >>> The  NEWS  for R 3.0.0 contain (in NEW FEATURES) :
    >>> 
    >>> * Functions rbinom(), rgeom(), rhyper(), rpois(), rnbinom(),
    >>> rsignrank() and rwilcox() now return integer (not double)
    >>> vectors.  This halves the storage requirements for large
    >>> simulations.
    >>> 
    >>> and what I've been suggesting is to revert this change
    >>> (svn rev r60225-6) which was purposefully and diligently done by
    >>> a fellow R core member, so indeed must be debatable. 
    >>> 
    >>> Martin
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> 

    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Wed Jan 22 10:06:22 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Wed, 22 Jan 2020 03:06:22 -0600
Subject: [Rd] [External] Re: rpois(9, 1e10)
In-Reply-To: <24104.3521.323078.781234@stat.math.ethz.ch>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
 <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
 <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>
 <24101.29271.515200.878794@stat.math.ethz.ch>
 <737c3431-cac8-2a06-a33c-63f4ed4ac764@gmail.com>
 <24101.58464.554256.516772@stat.math.ethz.ch>
 <fe22a1f1-5492-0aa8-dd9f-1c66f6454529@gmail.com>
 <24102.46447.821240.891477@stat.math.ethz.ch>
 <24104.3521.323078.781234@stat.math.ethz.ch>
Message-ID: <6b7b12d4-e293-49dd-bb15-12e1fb0dfd35@prodsyse.com>



On 2020-01-22 02:54, Martin Maechler wrote:
>>>>>> Martin Maechler
>>>>>>      on Tue, 21 Jan 2020 09:25:19 +0100 writes:
>>>>>> Ben Bolker
>>>>>>      on Mon, 20 Jan 2020 12:54:52 -0500 writes:
>      >> Ugh, sounds like competing priorities.
>
>      > indeed.
>
>      >> * maintain type consistency
>      >> * minimize storage (= current version, since 3.0.0)
>      >> * maximize utility for large lambda (= proposed change)
>      >> * keep user interface, and code, simple (e.g., it would be easy enough
>      >> to add a switch that provided user control of int vs double return value)
>      >> * backward compatibility
>
>      > Last night, it came to my mind that we should do what we have
>      > been doing in quite a few places in R, the last couple of years:
>
>      > Return integer when possible, and switch to return double when
>      > integers don't fit.
>
>      > We've been doing so even for  1:N  (well, now with additional ALTREP wrapper),
>      > seq(), and even the fundamental  length()  function.
>
>      > So I sat down and implemented it .. and it seemed to work
>      > perfectly:  Returning the same random numbers as now, but
>      > switching to use double (instead of returning NAs) when the
>      > values are too large.
>
>      > I'll probably commit that to R-devel quite soonish.
>      > Martin
>
> Committed in svn rev 77690; this is really very advantageous, as
> in some cases / applications or even just limit cases, you'd
> easily get into overflow sitations.
>
> The new R 4.0.0 behavior is IMO  "the best of" being memory
> efficient (integer storage) in most cases (back compatible to R 3.x.x) and
> returning desired random numbers in large cases (compatible to R <= 2.x.x).
>
> Martin


Wunderbar!? Sehr gut gemacht!? ("Wonderful!? Very well done!") Thanks, 
Spencer
>
>      >> On 2020-01-20 12:33 p.m., Martin Maechler wrote:
>      >>>>>>>> Benjamin Tyner
>      >>>>>>>> on Mon, 20 Jan 2020 08:10:49 -0500 writes:
>      >>>
>      >>> > On 1/20/20 4:26 AM, Martin Maechler wrote:
>      >>> >> Coming late here -- after enjoying a proper weekend ;-) --
>      >>> >> I have been agreeing (with Spencer, IIUC) on this for a long
>      >>> >> time (~ 3 yrs, or more?), namely that I've come to see it as a
>      >>> >> "design bug" that  rpois() {and similar} must return return typeof() "integer".
>      >>> >>
>      >>> >> More strongly, I'm actually pretty convinced they should return
>      >>> >> (integer-valued) double instead of NA_integer_   and for that
>      >>> >> reason should always return double:
>      >>> >> Even if we have (hopefully) a native 64bit integer in R,
>      >>> >> 2^64 is still teeny tiny compared .Machine$double.max
>      >>> >>
>      >>> >> (and then maybe we'd have .Machine$longdouble.max  which would
>      >>> >> be considerably larger than double.max unless on Windows, where
>      >>> >> the wise men at Microsoft decided to keep their workload simple
>      >>> >> by defining "long double := double" - as 'long double'
>      >>> >> unfortunately is not well defined by C standards)
>      >>> >>
>      >>> >> Martin
>      >>> >>
>      >>> > Martin if you are in favor, then certainly no objection from me! ;-)
>      >>>
>      >>> > So now what about other discrete distributions e.g. could a similar
>      >>> > enhancement apply here?
>      >>>
>      >>>
>      >>> >> rgeom(10L, 1e-10)
>      >>> > ?[1]???????? NA 1503061294???????? NA???????? NA 1122447583???????? NA
>      >>> > ?[7]???????? NA???????? NA???????? NA???????? NA
>      >>> > Warning message:
>      >>> > In rgeom(10L, 1e-10) : NAs produced
>      >>>
>      >>> yes, of course there are several such distributions.
>      >>>
>      >>> It's really something that should be discussed (possibly not
>      >>> here, .. but then I've started it here ...).
>      >>>
>      >>> The  NEWS  for R 3.0.0 contain (in NEW FEATURES) :
>      >>>
>      >>> * Functions rbinom(), rgeom(), rhyper(), rpois(), rnbinom(),
>      >>> rsignrank() and rwilcox() now return integer (not double)
>      >>> vectors.  This halves the storage requirements for large
>      >>> simulations.
>      >>>
>      >>> and what I've been suggesting is to revert this change
>      >>> (svn rev r60225-6) which was purposefully and diligently done by
>      >>> a fellow R core member, so indeed must be debatable.
>      >>>
>      >>> Martin
>      >>>
>      >>> ______________________________________________
>      >>> R-devel at r-project.org mailing list
>      >>> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >>>
>
>      >> ______________________________________________
>      >> R-devel at r-project.org mailing list
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Wed Jan 22 10:27:59 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Wed, 22 Jan 2020 11:27:59 +0200
Subject: [Rd] [External] Re: rpois(9, 1e10)
In-Reply-To: <6b7b12d4-e293-49dd-bb15-12e1fb0dfd35@prodsyse.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
 <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
 <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>
 <24101.29271.515200.878794@stat.math.ethz.ch>
 <737c3431-cac8-2a06-a33c-63f4ed4ac764@gmail.com>
 <24101.58464.554256.516772@stat.math.ethz.ch>
 <fe22a1f1-5492-0aa8-dd9f-1c66f6454529@gmail.com>
 <24102.46447.821240.891477@stat.math.ethz.ch>
 <24104.3521.323078.781234@stat.math.ethz.ch>
 <6b7b12d4-e293-49dd-bb15-12e1fb0dfd35@prodsyse.com>
Message-ID: <CAL6gwnJFLQmzQGYxNPkzXGXR7oNCMuFxFG_iPiCyGr3d2MrKHw@mail.gmail.com>

Fantastic!!

Thanks,

Avi

On Wed, Jan 22, 2020 at 11:14 AM Spencer Graves <spencer.graves at prodsyse.com>
wrote:

>
>
> On 2020-01-22 02:54, Martin Maechler wrote:
> >>>>>> Martin Maechler
> >>>>>>      on Tue, 21 Jan 2020 09:25:19 +0100 writes:
> >>>>>> Ben Bolker
> >>>>>>      on Mon, 20 Jan 2020 12:54:52 -0500 writes:
> >      >> Ugh, sounds like competing priorities.
> >
> >      > indeed.
> >
> >      >> * maintain type consistency
> >      >> * minimize storage (= current version, since 3.0.0)
> >      >> * maximize utility for large lambda (= proposed change)
> >      >> * keep user interface, and code, simple (e.g., it would be easy
> enough
> >      >> to add a switch that provided user control of int vs double
> return value)
> >      >> * backward compatibility
> >
> >      > Last night, it came to my mind that we should do what we have
> >      > been doing in quite a few places in R, the last couple of years:
> >
> >      > Return integer when possible, and switch to return double when
> >      > integers don't fit.
> >
> >      > We've been doing so even for  1:N  (well, now with additional
> ALTREP wrapper),
> >      > seq(), and even the fundamental  length()  function.
> >
> >      > So I sat down and implemented it .. and it seemed to work
> >      > perfectly:  Returning the same random numbers as now, but
> >      > switching to use double (instead of returning NAs) when the
> >      > values are too large.
> >
> >      > I'll probably commit that to R-devel quite soonish.
> >      > Martin
> >
> > Committed in svn rev 77690; this is really very advantageous, as
> > in some cases / applications or even just limit cases, you'd
> > easily get into overflow sitations.
> >
> > The new R 4.0.0 behavior is IMO  "the best of" being memory
> > efficient (integer storage) in most cases (back compatible to R 3.x.x)
> and
> > returning desired random numbers in large cases (compatible to R <=
> 2.x.x).
> >
> > Martin
>
>
> Wunderbar!  Sehr gut gemacht!  ("Wonderful!  Very well done!") Thanks,
> Spencer
> >
> >      >> On 2020-01-20 12:33 p.m., Martin Maechler wrote:
> >      >>>>>>>> Benjamin Tyner
> >      >>>>>>>> on Mon, 20 Jan 2020 08:10:49 -0500 writes:
> >      >>>
> >      >>> > On 1/20/20 4:26 AM, Martin Maechler wrote:
> >      >>> >> Coming late here -- after enjoying a proper weekend ;-) --
> >      >>> >> I have been agreeing (with Spencer, IIUC) on this for a long
> >      >>> >> time (~ 3 yrs, or more?), namely that I've come to see it as
> a
> >      >>> >> "design bug" that  rpois() {and similar} must return return
> typeof() "integer".
> >      >>> >>
> >      >>> >> More strongly, I'm actually pretty convinced they should
> return
> >      >>> >> (integer-valued) double instead of NA_integer_   and for that
> >      >>> >> reason should always return double:
> >      >>> >> Even if we have (hopefully) a native 64bit integer in R,
> >      >>> >> 2^64 is still teeny tiny compared .Machine$double.max
> >      >>> >>
> >      >>> >> (and then maybe we'd have .Machine$longdouble.max  which
> would
> >      >>> >> be considerably larger than double.max unless on Windows,
> where
> >      >>> >> the wise men at Microsoft decided to keep their workload
> simple
> >      >>> >> by defining "long double := double" - as 'long double'
> >      >>> >> unfortunately is not well defined by C standards)
> >      >>> >>
> >      >>> >> Martin
> >      >>> >>
> >      >>> > Martin if you are in favor, then certainly no objection from
> me! ;-)
> >      >>>
> >      >>> > So now what about other discrete distributions e.g. could a
> similar
> >      >>> > enhancement apply here?
> >      >>>
> >      >>>
> >      >>> >> rgeom(10L, 1e-10)
> >      >>> >  [1]         NA 1503061294         NA         NA
> 1122447583         NA
> >      >>> >  [7]         NA         NA         NA         NA
> >      >>> > Warning message:
> >      >>> > In rgeom(10L, 1e-10) : NAs produced
> >      >>>
> >      >>> yes, of course there are several such distributions.
> >      >>>
> >      >>> It's really something that should be discussed (possibly not
> >      >>> here, .. but then I've started it here ...).
> >      >>>
> >      >>> The  NEWS  for R 3.0.0 contain (in NEW FEATURES) :
> >      >>>
> >      >>> * Functions rbinom(), rgeom(), rhyper(), rpois(), rnbinom(),
> >      >>> rsignrank() and rwilcox() now return integer (not double)
> >      >>> vectors.  This halves the storage requirements for large
> >      >>> simulations.
> >      >>>
> >      >>> and what I've been suggesting is to revert this change
> >      >>> (svn rev r60225-6) which was purposefully and diligently done by
> >      >>> a fellow R core member, so indeed must be debatable.
> >      >>>
> >      >>> Martin
> >      >>>
> >      >>> ______________________________________________
> >      >>> R-devel at r-project.org mailing list
> >      >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >      >>>
> >
> >      >> ______________________________________________
> >      >> R-devel at r-project.org mailing list
> >      >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >      > ______________________________________________
> >      > R-devel at r-project.org mailing list
> >      > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Jan 22 23:56:17 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 22 Jan 2020 22:56:17 +0000
Subject: [Rd] Memory error in the libcurl connection code
Message-ID: <CABtg=K=QZU3NMH3NHc5nAwu1qPGoKPq9i5kP88NnRxttGdcrTQ@mail.gmail.com>

Hi All,

I think there is a memory error in the libcurl connection code that
typically happens when libcurl reads big chunks of data. This
potentially affects all code that use url() with the libcurl download
method, which is the default in most builds. In practice it tends to
happen more with HTTP/2 and if the connection is wrapped into a
gzcon(). macOS Catalina has a libcurl build with HTTP/2 error, so many
users that upgraded macOS are starting to see this.

The workaround is to avoid using url(), if you can. If you need an
HTTP stream, you can use curl::curl(), which is a drop-in replacement.

To reproduce, the easiest is a libcurl build that has HTTP/2 support
and a server with HTTP/2 as well, e.g. the cloud mirror:

------------------------------------------------
~ # R --slave -e 'options(internet.info = 0); foo <-
readRDS(gzcon(url("https://cran.rstudio.com/src/contrib/Meta/archive.rds")))'
*   Trying 13.33.54.118:443...
* TCP_NODELAY set
* Connected to cran.rstudio.com (13.33.54.118) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
*   CAfile: /etc/ssl/certs/ca-certificates.crt
  CApath: none
* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256
* ALPN, server accepted to use h2
* Server certificate:
*  subject: CN=cran.rstudio.com
*  start date: Jul 24 00:00:00 2019 GMT
*  expire date: Aug 24 12:00:00 2020 GMT
*  subjectAltName: host "cran.rstudio.com" matched cert's "cran.rstudio.com"
*  issuer: C=US; O=Amazon; OU=Server CA 1B; CN=Amazon
*  SSL certificate verify ok.
* Using HTTP2, server supports multi-use
* Connection state changed (HTTP/2 confirmed)
* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0
* Using Stream ID: 1 (easy handle 0x56303c2910e0)
> GET /src/contrib/Meta/archive.rds HTTP/2
Host: cran.rstudio.com
User-Agent: R (3.4.4 x86_64-pc-linux-gnu x86_64 linux-gnu)
Accept: */*

* Connection state changed (MAX_CONCURRENT_STREAMS == 128)!
< HTTP/2 200
< content-length: 2483432
< date: Wed, 22 Jan 2020 21:22:04 GMT
< server: Apache/2.4.39 (Unix)
< last-modified: Wed, 22 Jan 2020 17:10:22 GMT
< etag: "25e4e8-59cbd998a0360"
< accept-ranges: bytes
< cache-control: max-age=1800
< expires: Wed, 22 Jan 2020 21:52:04 GMT
< x-cache: Hit from cloudfront
< via: 1.1 6cbe48f9f9ff0c768f29d83804f75d4c.cloudfront.net (CloudFront)
< x-amz-cf-pop: MAN50-C1
< x-amz-cf-id: WwCQVQz9g8ZP6Az4m4n__h7aUW6vwlg0-AkiCv_DnVfGe10bzaFtfg==
< age: 960
<
* 85 data bytes written
Error in readRDS(gzcon(url("https://cran.rstudio.com/src/contrib/Meta/archive.rds")))
:
  reference index out of range
* stopped the pause stream!
* Connection #0 to host cran.rstudio.com left intact
Execution halted
------------------------------------------------

Sometimes you get a crash, sometimes a corrupt stream, etc. Sometimes
is actually works.

It seems that the fix is simply this:

------------------------------------
--- src/modules/internet/libcurl.c~
+++ src/modules/internet/libcurl.c
@@ -762,6 +762,7 @@
      void *newbuf = realloc(ctxt->buf, newbufsize);
      if (!newbuf) error("Failure in re-allocation in rcvData");
      ctxt->buf = newbuf; ctxt->bufsize = newbufsize;
+    ctxt->current = ctxt->buf;
  }

  memcpy(ctxt->buf + ctxt->filled, ptr, add);
------------------------------------

Best,
Gabor


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Jan 23 09:49:36 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 23 Jan 2020 09:49:36 +0100
Subject: [Rd] Memory error in the libcurl connection code
In-Reply-To: <CABtg=K=QZU3NMH3NHc5nAwu1qPGoKPq9i5kP88NnRxttGdcrTQ@mail.gmail.com>
References: <CABtg=K=QZU3NMH3NHc5nAwu1qPGoKPq9i5kP88NnRxttGdcrTQ@mail.gmail.com>
Message-ID: <24105.24096.597704.561478@stat.math.ethz.ch>

>>>>> G?bor Cs?rdi 
>>>>>     on Wed, 22 Jan 2020 22:56:17 +0000 writes:

    > Hi All,
    > I think there is a memory error in the libcurl connection code that
    > typically happens when libcurl reads big chunks of data. This
    > potentially affects all code that use url() with the libcurl download
    > method, which is the default in most builds. In practice it tends to
    > happen more with HTTP/2 and if the connection is wrapped into a
    > gzcon(). macOS Catalina has a libcurl build with HTTP/2 error, so many
    > users that upgraded macOS are starting to see this.

    > The workaround is to avoid using url(), if you can. If you need an
    > HTTP stream, you can use curl::curl(), which is a drop-in replacement.

    > To reproduce, the easiest is a libcurl build that has HTTP/2 support
    > and a server with HTTP/2 as well, e.g. the cloud mirror:

    > ------------------------------------------------
    > ~ # R --slave -e 'options(internet.info = 0); foo <-
    > readRDS(gzcon(url("https://cran.rstudio.com/src/contrib/Meta/archive.rds")))'
    > *   Trying 13.33.54.118:443...
    > * TCP_NODELAY set
    > * Connected to cran.rstudio.com (13.33.54.118) port 443 (#0)
    > * ALPN, offering h2
    > * ALPN, offering http/1.1
    > * successfully set certificate verify locations:
    > *   CAfile: /etc/ssl/certs/ca-certificates.crt
    > CApath: none
    > * SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256
    > * ALPN, server accepted to use h2
    > * Server certificate:
    > *  subject: CN=cran.rstudio.com
    > *  start date: Jul 24 00:00:00 2019 GMT
    > *  expire date: Aug 24 12:00:00 2020 GMT
    > *  subjectAltName: host "cran.rstudio.com" matched cert's "cran.rstudio.com"
    > *  issuer: C=US; O=Amazon; OU=Server CA 1B; CN=Amazon
    > *  SSL certificate verify ok.
    > * Using HTTP2, server supports multi-use
    > * Connection state changed (HTTP/2 confirmed)
    > * Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0
    > * Using Stream ID: 1 (easy handle 0x56303c2910e0)
    >> GET /src/contrib/Meta/archive.rds HTTP/2
    > Host: cran.rstudio.com
    > User-Agent: R (3.4.4 x86_64-pc-linux-gnu x86_64 linux-gnu)
    > Accept: */*

    > * Connection state changed (MAX_CONCURRENT_STREAMS == 128)!
    > < HTTP/2 200
    > < content-length: 2483432
    > < date: Wed, 22 Jan 2020 21:22:04 GMT
    > < server: Apache/2.4.39 (Unix)
    > < last-modified: Wed, 22 Jan 2020 17:10:22 GMT
    > < etag: "25e4e8-59cbd998a0360"
    > < accept-ranges: bytes
    > < cache-control: max-age=1800
    > < expires: Wed, 22 Jan 2020 21:52:04 GMT
    > < x-cache: Hit from cloudfront
    > < via: 1.1 6cbe48f9f9ff0c768f29d83804f75d4c.cloudfront.net (CloudFront)
    > < x-amz-cf-pop: MAN50-C1
    > < x-amz-cf-id: WwCQVQz9g8ZP6Az4m4n__h7aUW6vwlg0-AkiCv_DnVfGe10bzaFtfg==
    > < age: 960
    > <
    > * 85 data bytes written
    > Error in readRDS(gzcon(url("https://cran.rstudio.com/src/contrib/Meta/archive.rds")))
    > :
    > reference index out of range
    > * stopped the pause stream!
    > * Connection #0 to host cran.rstudio.com left intact
    > Execution halted
    > ------------------------------------------------

    > Sometimes you get a crash, sometimes a corrupt stream, etc. Sometimes
    > is actually works.

    > It seems that the fix is simply this:

    > ------------------------------------
    > --- src/modules/internet/libcurl.c~
    > +++ src/modules/internet/libcurl.c
    > @@ -762,6 +762,7 @@
    > void *newbuf = realloc(ctxt->buf, newbufsize);
    > if (!newbuf) error("Failure in re-allocation in rcvData");
    ctxt-> buf = newbuf; ctxt->bufsize = newbufsize;
    > +    ctxt->current = ctxt->buf;
    > }

    > memcpy(ctxt->buf + ctxt->filled, ptr, add);
    > ------------------------------------

    > Best,
    > Gabor

Thanks a lot, G?bor!

I can reproduce the problem (on Linux Fedora 30) and confirm
that your patch works.

Even more, the patch looks  "almost obvious",
because
	ctxt->current = ctxt->buf

happens earlier in rcvData() after a change to ctxt->buf  and so
should be updated if buf is.

An even slightly "better" patch just moves that statement down
to after the  if(add) { .. }  clause.

I'll patch the sources, and will port to 'R 3.6.2 patched'.

Martin


From morg@n@em@||box @end|ng |rom gm@||@com  Thu Jan 23 13:05:31 2020
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Thu, 23 Jan 2020 12:05:31 +0000
Subject: [Rd] Long vector support in data.frame
Message-ID: <CAL0QV_NQwf4gUrJoxZBFGjWc0GoF4fOWiuiqbXXTteMU2MBoqg@mail.gmail.com>

Hi All,

Happy New Year!

I was wondering if there is a plan at some point to support long vectors in
data.frames?
I understand that it would need some internal changes to lift the current
limit.
If there is a plan what is currently preventing it from happening? Is it
time, resources? If so is there a way for people willing to help to
contribute or help the R-dev team? How?
I noticed that an increasing number of function are supporting long vectors
in base R. Is there more functions that need to support long vectors before
having long vectors support in data.frames?

Thank you
Best regards
Morgan

	[[alternative HTML version deleted]]


From btyner @end|ng |rom gm@||@com  Thu Jan 23 14:16:03 2020
From: btyner @end|ng |rom gm@||@com (Benjamin Tyner)
Date: Thu, 23 Jan 2020 08:16:03 -0500
Subject: [Rd] [External] Re: rpois(9, 1e10)
In-Reply-To: <24101.58464.554256.516772@stat.math.ethz.ch>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
 <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
 <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>
 <24101.29271.515200.878794@stat.math.ethz.ch>
 <737c3431-cac8-2a06-a33c-63f4ed4ac764@gmail.com>
 <24101.58464.554256.516772@stat.math.ethz.ch>
Message-ID: <d336b890-6fe4-1bca-2099-af485c5b51c8@gmail.com>

On 1/20/20 12:33 PM, Martin Maechler wrote:
>
> It's really something that should be discussed (possibly not
> here, .. but then I've started it here ...).
>
> The  NEWS  for R 3.0.0 contain (in NEW FEATURES) :
>
>      * Functions rbinom(), rgeom(), rhyper(), rpois(), rnbinom(),
>        rsignrank() and rwilcox() now return integer (not double)
>        vectors.  This halves the storage requirements for large
>        simulations.
>
> and what I've been suggesting is to revert this change
> (svn rev r60225-6) which was purposefully and diligently done by
> a fellow R core member, so indeed must be debatable.
>
> Martin

For the record, I don't personally objects to the change here (as my 
philosophy tends toward treating most warnings as errors anyway) but for 
the sake of other useRs who may get bitten, perhaps we should be more 
explicit that backwards-compatibility won't be preserved under certain 
use patterns, for example:

    # works (with warning) in R 3.6.2 but fails (with error) in R-devel:
    vapply(list(1e9, 1e10),
     ?????? function(lambda) {
     ????????? rpois(1L, lambda)
     ?????? },
     ?????? FUN.VALUE = integer(1L)
     ?????? )

    # in R-devel, a little extra work to achieve a warning as before:
    vapply(list(1e9, 1e10),
     ?????? function(lambda) {
     ????????? tmp <- rpois(1L, lambda)
     ????????? if (!is.integer(tmp)) {
     ???????????? warning("NAs produced")
     ???????????? tmp <- NA_integer_
     ????????? }
     ????????? tmp
     ?????? },
     ?????? FUN.VALUE = integer(1L)
     ?????? )

(and yes I realize that rpois() vectorizes on lambda, so vapply is 
re-inventing the wheel in this toy example, but there could be (?) a 
justified use for it in more complicated simulations).


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Jan 23 19:35:49 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 23 Jan 2020 19:35:49 +0100
Subject: [Rd] [External] Re: rpois(9, 1e10)
In-Reply-To: <d336b890-6fe4-1bca-2099-af485c5b51c8@gmail.com>
References: <63f8b071-7fba-c893-4f82-ee7eed49f0a3@prodsyse.com>
 <d0e0e5b0-3983-ee33-e5b0-e583755d7c81@gmail.com>
 <136fb4c6-1559-7a32-bac2-9b66f1e340dd@prodsyse.com>
 <CAL6gwnLg2wfkeQr1nTadkNCD9Fj8yDNGxM38HONTe7Mzog3+gA@mail.gmail.com>
 <c62e6334-400b-b114-cf14-de0e2120b261@gmail.com>
 <CAL6gwnLfEB-H5omW+WA4_AKq_+dK++QZ53KJF71MPf9Qw1jO+Q@mail.gmail.com>
 <e81d0f22-1924-2005-4385-e38cda5caf9b@prodsyse.com>
 <CAL6gwnKkZmh=JeprvLA0PspUbY7VFcfWyN8cUie0RphYcUxftA@mail.gmail.com>
 <38750053-9fd0-50eb-f873-70bfe3f7bb56@prodsyse.com>
 <CAL6gwnKvaohmng4cbQKw9JWsgndM7ByodPrGRcGwt5FsB-PLUQ@mail.gmail.com>
 <9391eac2-da99-818f-9b34-b0a96fbcebf8@prodsyse.com>
 <alpine.DEB.2.21.2001192049320.3435@luke-Latitude-7480>
 <225aee11-8c66-9f14-dd6d-633fc6b83711@prodsyse.com>
 <24101.29271.515200.878794@stat.math.ethz.ch>
 <737c3431-cac8-2a06-a33c-63f4ed4ac764@gmail.com>
 <24101.58464.554256.516772@stat.math.ethz.ch>
 <d336b890-6fe4-1bca-2099-af485c5b51c8@gmail.com>
Message-ID: <24105.59269.570030.925473@stat.math.ethz.ch>

>>>>> Benjamin Tyner 
>>>>>     on Thu, 23 Jan 2020 08:16:03 -0500 writes:

    > On 1/20/20 12:33 PM, Martin Maechler wrote:
    >> 
    >> It's really something that should be discussed (possibly not
    >> here, .. but then I've started it here ...).
    >> 
    >> The  NEWS  for R 3.0.0 contain (in NEW FEATURES) :
    >> 
    >> * Functions rbinom(), rgeom(), rhyper(), rpois(), rnbinom(),
    >> rsignrank() and rwilcox() now return integer (not double)
    >> vectors.  This halves the storage requirements for large
    >> simulations.
    >> 
    >> and what I've been suggesting is to revert this change
    >> (svn rev r60225-6) which was purposefully and diligently done by
    >> a fellow R core member, so indeed must be debatable.
    >> 
    >> Martin

    > For the record, I don't personally objects to the change here (as my 
    > philosophy tends toward treating most warnings as errors anyway) but for 
    > the sake of other useRs who may get bitten, perhaps we should be more 
    > explicit that backwards-compatibility won't be preserved under certain 
    > use patterns, for example:

    > # works (with warning) in R 3.6.2 but fails (with error) in R-devel:
    > vapply(list(1e9, 1e10),
    > ?????? function(lambda) {
    > ????????? rpois(1L, lambda)
    > ?????? },
    > ?????? FUN.VALUE = integer(1L)
    > ?????? )

Well, some people are too picky...
use numeric(), not integer() in such cases :

> vapply(1:10, function(i) if(runif(1) < 0.5) 1L else 2, FUN.VALUE=pi)
 [1] 1 1 2 2 2 2 1 1 2 1
> 

No, really,  I don't plan to spend time "bloating" the
documentation any further,
when noticing that only a "few parts in a billion"  people carefully read
our help pages where the remaining  99.999% percent rather try
things in the R console and draw (often) wrong conclusions...

I *am* glad and grateful for careful and accurate R users and
bug-squashing helpers such as you or Suharto or ...

Martin

    > # in R-devel, a little extra work to achieve a warning as before:
    > vapply(list(1e9, 1e10),
    > ?????? function(lambda) {
    > ????????? tmp <- rpois(1L, lambda)
    > ????????? if (!is.integer(tmp)) {
    > ???????????? warning("NAs produced")
    > ???????????? tmp <- NA_integer_
    > ????????? }
    > ????????? tmp
    > ?????? },
    > ?????? FUN.VALUE = integer(1L)
    > ?????? )

    > (and yes I realize that rpois() vectorizes on lambda, so vapply is 
    > re-inventing the wheel in this toy example, but there could be (?) a 
    > justified use for it in more complicated simulations).


From j@goreck| @end|ng |rom w|t@edu@p|  Fri Jan 24 05:52:13 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Fri, 24 Jan 2020 10:22:13 +0530
Subject: [Rd] A bug understanding F relative to FALSE?
In-Reply-To: <CAO1zAVYyjLpUt91JhpfHz1REQd01BZds_UG5KnU3m8azbrz5Ew-2308@mail.gmail.com>
References: <AM6PR02MB43129D66D628C2B3A821C80992370@AM6PR02MB4312.eurprd02.prod.outlook.com>
 <CAO1zAVYyjLpUt91JhpfHz1REQd01BZds_UG5KnU3m8azbrz5Ew-2308@mail.gmail.com>
Message-ID: <CAOO9MKV+76MmF9XXwcOCFnA9t1VEOPWpNWLhqSw9GOXZB1ff3g@mail.gmail.com>

I agree it is not good to have those symbols used in packages, but I
found to use those quite often in my developement workflow, which is
something like:

    $ R -q
    > cc(F)

where `cc` is my function to rebuild application to recent state. I
use it really often. Having to type FALSE every time makes this
workflow relatively longer.
IMO it would be best to warn about T/F symbols during package check,
but not necessarily removing them globally.

On Fri, Jan 17, 2020 at 4:01 PM Joris Meys <jorismeys at gmail.com> wrote:
>
> As others have pointed out, this is expected behaviour. Let me get on that
> hill I'll die on: it is absolutely not suitable. It is way beyond time to
> remove T and F as unprotected kind-of-synonyms for TRUE and FALSE, given
> the amount of times I had to point out that:
>
> T <- t(matrix(0:3,nrow=2))
> isTRUE(T)
>
> was the reason the code didn't do what it's supposed to do. (Also don't use
> T as short for "Transpose of my matrix", but that's another hill.)
>
> As we've become more strict on the use of T and F in packages, maybe 4.0.0
> is a good milestone to finally drop this relic from the past? One can
> dream...
>
> Kind regards
> Joris
>
> On Wed, Jan 15, 2020 at 3:14 PM IAGO GIN? V?ZQUEZ <i.gine at pssjd.org> wrote:
>
> > Hi all,
> >
> > Is the next behaviour suitable?
> >
> > identical(F,FALSE)
> >
> > ## [1] TRUE
> >
> > utils::getParseData(parse(text = "c(F,FALSE)", keep.so=rce = TRUE))
> >
> > ##    line1 col1 line2 col2 id parent                token terminal  text
> > ## 14     1    1     1   10 14      0                 expr    FALSE
> > ## 1      1    1     1    1  1      3 SYMBOL_FUNCTION_CALL     TRUE     c
> > ## 3      1    1     1    1  3     14                 expr    FALSE
> > ## 2      1    2     1    2  2     14                  '('     TRUE     (
> > ## 4      1    3     1    3  4      6               SYMBOL     TRUE     F
> > ## 6      1    3     1    3  6     14                 expr    FALSE
> > ## 5      1    4     1    4  5     14                  ','     TRUE     ,
> > ## 9      1    5     1    9  9     10            NUM_CONST     TRUE FALSE
> > ## 10     1    5     1    9 10     14                 expr    FALSE
> > ## 11     1   10     1   10 11     14                  ')'     TRUE     )
> >
> > I would expect that token for F is the same as token for FALSE.
> >
> >
> > Thank you!
> >
> > Iago
> >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>
> --
> Joris Meys
> Statistical consultant
>
> Department of Data Analysis and Mathematical Modelling
> Ghent University
> Coupure Links 653, B-9000 Gent (Belgium)
> <https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
> -------------------------------
> Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Thu Jan 23 17:14:50 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Thu, 23 Jan 2020 10:14:50 -0600
Subject: [Rd] matplot.Date & matplot.POSIXct
Message-ID: <5ae16284-22c4-e459-db14-15dd934b1f61-1151@prodsyse.com>


Hello, All:


 ????? Roughly a decade ago, I added "matplot.Date" and 
"matplot.POSIXct" to the "fda" package, so we could get reasonable 
labeling of the horizontal axis when "x" was class "Date" or "POSIXct".? 
I also added a local version of "matplot.default" that just changes the 
defaults for "xlab" and "ylab".


 ????? Would anyone care to comment on this?


 ????? In particular, might there be any interest among the R Core Team 
of adding "matplot.Date" and "matplot.POSIXct" to the "graphics" package?


 ????? Secondarily, might anyone have any thoughts about the defaults 
for "xlab" and "ylab" in "graphics::matplot"?


 ????? I ask, because the Jim Ramsay, Giles Hooker and I are preparing a 
new release of "fda", and Jim asked me if we needed to to have "matplot" 
masking "graphics::matplot".? Rather than answer that question, I 
thought I would ask a larger question of this group.


 ????? Thanks,
 ????? Spencer Graves


From d@n|e|@ceg|e|k@ @end|ng |rom gm@||@com  Sat Jan 18 10:36:47 2020
From: d@n|e|@ceg|e|k@ @end|ng |rom gm@||@com (=?UTF-8?Q?Daniel_Cegie=C5=82ka?=)
Date: Sat, 18 Jan 2020 10:36:47 +0100
Subject: [Rd] How to get an object name from C?
Message-ID: <CAPLrYEQZEa93_rKynTDcXWy2xHmmD9pGBidif8Ra1=Xd11F9mw-5750@mail.gmail.com>


(earlier I sent it as html by mistake).

Hi,

How can I get from C an object name used as a function argument? I
have sample code in C that gives me access to the name of the function
being called:


SEXP xname(SEXP x)
{
        const char *fun_name = CHAR(PRINTNAME(CAR(x)));
        x =  CDR(x);
        const char *arg_name = isNull(TAG(x)) ? "" : CHAR(PRINTNAME(TAG(x)));

        Rprintf("fn_name: %s, arg_name: %s\n", fun_name, arg_name);
        return R_NilValue;
}


> xname <- function(...) invisible(.External("xname", ...))
>
> x1 = 123
>
> xname(x1)
fn_name: xname, var_name:


However, I am trying to find a way to access the object name. In the
documentation I found a solution for named args:


> xname(arg = x1)
fn_name: xname, var_name: arg


And I'd like to find the equivalent in C for substitute():

> substitute(x1)
x1


Best regards,
Daniel


From |@wrence@m|ch@e| @end|ng |rom gene@com  Fri Jan 24 18:02:35 2020
From: |@wrence@m|ch@e| @end|ng |rom gene@com (Michael Lawrence)
Date: Fri, 24 Jan 2020 09:02:35 -0800
Subject: [Rd] How to get an object name from C?
In-Reply-To: <CAPLrYEQZEa93_rKynTDcXWy2xHmmD9pGBidif8Ra1=Xd11F9mw-5750@mail.gmail.com>
References: <CAPLrYEQZEa93_rKynTDcXWy2xHmmD9pGBidif8Ra1=Xd11F9mw-5750@mail.gmail.com>
Message-ID: <CAOQ5NyeALiVfX=MkCK+fAdY8hkQ0+1uSUiA4ZYdCx+qg=AdyyA@mail.gmail.com>

Since substitute() is implemented in C, you could look at its implementation.

On Fri, Jan 24, 2020 at 1:09 AM Daniel Cegie?ka
<daniel.cegielka at gmail.com> wrote:
>
>
> (earlier I sent it as html by mistake).
>
> Hi,
>
> How can I get from C an object name used as a function argument? I
> have sample code in C that gives me access to the name of the function
> being called:
>
>
> SEXP xname(SEXP x)
> {
>         const char *fun_name = CHAR(PRINTNAME(CAR(x)));
>         x =  CDR(x);
>         const char *arg_name = isNull(TAG(x)) ? "" : CHAR(PRINTNAME(TAG(x)));
>
>         Rprintf("fn_name: %s, arg_name: %s\n", fun_name, arg_name);
>         return R_NilValue;
> }
>
>
> > xname <- function(...) invisible(.External("xname", ...))
> >
> > x1 = 123
> >
> > xname(x1)
> fn_name: xname, var_name:
>
>
> However, I am trying to find a way to access the object name. In the
> documentation I found a solution for named args:
>
>
> > xname(arg = x1)
> fn_name: xname, var_name: arg
>
>
> And I'd like to find the equivalent in C for substitute():
>
> > substitute(x1)
> x1
>
>
> Best regards,
> Daniel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Michael Lawrence
Senior Scientist, Bioinformatics and Computational Biology
Genentech, A Member of the Roche Group
Office +1 (650) 225-7760
michafla at gene.com

Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube


From @ndy@m@nk@ @end|ng |rom gm@||@com  Fri Jan 24 19:43:17 2020
From: @ndy@m@nk@ @end|ng |rom gm@||@com (Andy Manka)
Date: Fri, 24 Jan 2020 13:43:17 -0500
Subject: [Rd] R package builder silently continues after unclosed brace
Message-ID: <CAJEihWdLghmUuZnGCg=igxFZjcP6+uSxu3eBrHVH1VFdr=OHoQ-798@mail.gmail.com>


If you start a function in one file but don't close it, the package
will still build if you manage to close it in a later file. Like so:

a.R
b.R
c.R

a.R:
function_a <- function(){
  print("this is function_a")
}

b.R:
function_b <- function(){
  print("unclosed function_b")
# no closing }

c.R:
function_c <- function(){
  print("function_c will be part of function_b")
}
#extra closing } to close function_b
}

--------

The package builder will import `a.R` and `b.R`. And because
function_b was never closed, `c.R` gets subsumed into function_b. It's
pretty hard to debug, and it means that a production implementation
depends on the file structure never changing. (If you define a
function across `b.R` and `d.R`, you can never add an R script that
starts with `c`.)

What's the benefit of letting functions be defined across files in the
package builder? Or is it an unintended side effect?

I suspect the code for all this is in:
/src/library/tools/R/build.R

but it's beyond me.

The command I ran is:
"C:\Program Files\R\R-3.6.2\bin\x64\Rcmd.exe" build "c:\path\to\package"


From @purd|e@@ @end|ng |rom gm@||@com  Sat Jan 25 21:51:41 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Sun, 26 Jan 2020 09:51:41 +1300
Subject: [Rd] R package builder silently continues after unclosed brace
In-Reply-To: <CAJEihWdLghmUuZnGCg=igxFZjcP6+uSxu3eBrHVH1VFdr=OHoQ-798@mail.gmail.com>
References: <CAJEihWdLghmUuZnGCg=igxFZjcP6+uSxu3eBrHVH1VFdr=OHoQ-798@mail.gmail.com>
Message-ID: <CAB8pepz_scqPgAjKTuKk-K1h1zZ--TM0BWT1jtqdLo8QXgMePw@mail.gmail.com>

Try R check or the source function:

---- (From R check)

> R CMD check testpkg
R CMD check testpkg
* using log directory 'c:/proj/shared/testpkg.Rcheck'
* using R version 3.6.0 (2019-04-26)
* using platform: x86_64-w64-mingw32 (64-bit)
* using session charset: ISO8859-1
* checking for file 'testpkg/DESCRIPTION' ... OK
* this is package 'testpkg' version '0.1.0'
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking whether package 'testpkg' can be installed ... ERROR
Installation failed.
See 'c:/proj/shared/testpkg.Rcheck/00install.out' for details.
* DONE
Status: 1 ERROR

---- (From 00install.out)

* installing *source* package 'testpkg' ...
** using staged installation
** R
Error in parse(outFile) :
  c:/proj/shared/testpkg/R/b.R:4:0: unexpected end of input
2:   print("unclosed function_b")
3: # no closing }
  ^
ERROR: unable to collate and parse R files for package 'testpkg'
* removing 'c:/proj/shared/testpkg.Rcheck/testpkg'

---- (from the source function)

source ("c:/proj/shared/testpkg/R/b.R", echo=TRUE)
Error in source("c:/proj/shared/testpkg/R/b.R", echo = TRUE) :
  c:/proj/shared/testpkg/R/b.R:4:0: unexpected end of input
2:   print("unclosed function_b")
3: # no closing }


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sat Jan 25 21:55:16 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 25 Jan 2020 20:55:16 +0000
Subject: [Rd] R package builder silently continues after unclosed brace
In-Reply-To: <CAJEihWdLghmUuZnGCg=igxFZjcP6+uSxu3eBrHVH1VFdr=OHoQ-798@mail.gmail.com>
References: <CAJEihWdLghmUuZnGCg=igxFZjcP6+uSxu3eBrHVH1VFdr=OHoQ-798@mail.gmail.com>
Message-ID: <CABtg=K=T3LtOEECCY7Tcf3oSFsjPN=WxBxig-5xG0nQT5EEaiA@mail.gmail.com>

R CMD build does not actually run any R code, it just puts the files
together into a .tar.gz archive.

R CMD INSTALL will run the R code, and fail.

Gabor

On Sat, Jan 25, 2020 at 4:59 PM Andy Manka <andy.manka at gmail.com> wrote:
>
>
> If you start a function in one file but don't close it, the package
> will still build if you manage to close it in a later file. Like so:
>
> a.R
> b.R
> c.R
>
> a.R:
> function_a <- function(){
>   print("this is function_a")
> }
>
> b.R:
> function_b <- function(){
>   print("unclosed function_b")
> # no closing }
>
> c.R:
> function_c <- function(){
>   print("function_c will be part of function_b")
> }
> #extra closing } to close function_b
> }
>
> --------
>
> The package builder will import `a.R` and `b.R`. And because
> function_b was never closed, `c.R` gets subsumed into function_b. It's
> pretty hard to debug, and it means that a production implementation
> depends on the file structure never changing. (If you define a
> function across `b.R` and `d.R`, you can never add an R script that
> starts with `c`.)
>
> What's the benefit of letting functions be defined across files in the
> package builder? Or is it an unintended side effect?
>
> I suspect the code for all this is in:
> /src/library/tools/R/build.R
>
> but it's beyond me.
>
> The command I ran is:
> "C:\Program Files\R\R-3.6.2\bin\x64\Rcmd.exe" build "c:\path\to\package"
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hp@ge@ @end|ng |rom |redhutch@org  Sun Jan 26 08:06:51 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Sun, 26 Jan 2020 07:06:51 +0000
Subject: [Rd] R package builder silently continues after unclosed brace
In-Reply-To: <CABtg=K=T3LtOEECCY7Tcf3oSFsjPN=WxBxig-5xG0nQT5EEaiA@mail.gmail.com>
References: <CAJEihWdLghmUuZnGCg=igxFZjcP6+uSxu3eBrHVH1VFdr=OHoQ-798@mail.gmail.com>
 <CABtg=K=T3LtOEECCY7Tcf3oSFsjPN=WxBxig-5xG0nQT5EEaiA@mail.gmail.com>
Message-ID: <aba20778-104f-c2a0-5baa-d396b23f3338@fredhutch.org>

On 1/25/20 12:55, G?bor Cs?rdi wrote:
> R CMD build does not actually run any R code,

**unless** the package contains dynamic vignettes and/or dynamic man 
pages (e.g. man pages that include \Sexpr macros), in which case 'R CMD 
build' first installs the package in order to evaluate the dynamic stuff 
and then puts all the files together in a .tar.gz archive (including the 
evaluated vignette and man pages).

Just wanted to clarify.

Best,
H.

> it just puts the files
> together into a .tar.gz archive.
> 
> R CMD INSTALL will run the R code, and fail.
> 
> Gabor
> 
> On Sat, Jan 25, 2020 at 4:59 PM Andy Manka <andy.manka at gmail.com> wrote:
>>
>>
>> If you start a function in one file but don't close it, the package
>> will still build if you manage to close it in a later file. Like so:
>>
>> a.R
>> b.R
>> c.R
>>
>> a.R:
>> function_a <- function(){
>>    print("this is function_a")
>> }
>>
>> b.R:
>> function_b <- function(){
>>    print("unclosed function_b")
>> # no closing }
>>
>> c.R:
>> function_c <- function(){
>>    print("function_c will be part of function_b")
>> }
>> #extra closing } to close function_b
>> }
>>
>> --------
>>
>> The package builder will import `a.R` and `b.R`. And because
>> function_b was never closed, `c.R` gets subsumed into function_b. It's
>> pretty hard to debug, and it means that a production implementation
>> depends on the file structure never changing. (If you define a
>> function across `b.R` and `d.R`, you can never add an R script that
>> starts with `c`.)
>>
>> What's the benefit of letting functions be defined across files in the
>> package builder? Or is it an unintended side effect?
>>
>> I suspect the code for all this is in:
>> /src/library/tools/R/build.R
>>
>> but it's beyond me.
>>
>> The command I ran is:
>> "C:\Program Files\R\R-3.6.2\bin\x64\Rcmd.exe" build "c:\path\to\package"
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=EooPdH2zxyGemkIijLeOEhTnbHj2ZnF752zkuL2oH78&s=k7-iYyWapTxOuYwiVvt93bBNtx_2FjuXZYP-Ids9ypU&e=
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=EooPdH2zxyGemkIijLeOEhTnbHj2ZnF752zkuL2oH78&s=k7-iYyWapTxOuYwiVvt93bBNtx_2FjuXZYP-Ids9ypU&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Jan 27 15:31:05 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 27 Jan 2020 15:31:05 +0100
Subject: [Rd] Operator precedence of =, <- and ?
In-Reply-To: <CAM2gKPZ6PjQBqFGsmbsUXMRtZWFBRzAf=w2DQUFOhNBwMewieg@mail.gmail.com>
References: <CAM2gKPZ6PjQBqFGsmbsUXMRtZWFBRzAf=w2DQUFOhNBwMewieg@mail.gmail.com>
Message-ID: <5652dfc9-a3a2-7675-6734-d08fe5795694@gmail.com>


Thanks, for reference, this has been already reported as PR#16710. Now 
fixed, the precedence of "?" is again lower than the precedence of "=", 
as documented in ?Syntax.

Please note the role of the precedence table in the parser definition: 
the precedence given there is not necessarily the precedence of 
operators you would see in the language. The precedence table in the 
parser definition tells the parser how to behave in situations when it 
does not know otherwise (please refer to bison documentation if you were 
curious about the details), but it "knows otherwise" in R, the grammar 
was written so that "=" had the lowest precedence, before the fix. Also, 
in principle, the precedence can be different in different contexts.

It is the precedence table in the programming language 
definition/specification/documentation (here ?Syntax) that should give 
the precedence a user would observe in the language. Following the 
table, programmers know when it is safe to omit parentheses. However, 
this may be error prone for operators that have different 
meaning/precedence in different languages, and hence such tables are 
often intentionally incomplete. This is another reason why not to look 
into the parser implementation to learn about operator precedence.? R's 
precedence table in ?Syntax is fairly complete and in many cases using 
parentheses where the table gives precedence would improve readability 
of the code.

Best
Tomas


On 1/10/20 11:59 AM, Konrad Rudolph wrote:
> The documentation (help("Syntax")) gives the operator precedence of the
> assignment operators and help, from highest to lowest, as:
>
>         ?<- <<-?           assignment (right to left)
>         ?=?                assignment (right to left)
>         ???                help (unary and binary)
>
> If I understand correctly this implies that `a = b ? c` and `a <- b ? c`
> should parse identically. Or, if using the unary version, `?a = b` and `?a
> <- b` should parse identically.
>
> However, as noted by Antoine Fabri on Stack Overflow [1], they have
> different parses (on R 3.5.3 and 3.6.1, at least), which puts the
> precedence of `?` *between* that of `<-` and `=`. In fact, src/main/gram.y
> [2] appears to show the same precedence table as the documentation;
> presumably the parser at some point rewrites the parse tree manually.
>
> At any rate, should this be fixed in the documentation? Or is the
> documentation ?correct?, and there?s a bug in the parser (in some versions
> of R)?
>
> [1] <
> https://stackoverflow.com/questions/1741820/51564252#comment105506343_51564252
> [2] <
> https://github.com/wch/r-source/blob/386c3a93cbcaf95017fa6ae52453530fb95149f4/src/main/gram.y#L384-L390
> --
> Konrad Rudolph
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Jan 27 15:34:19 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 27 Jan 2020 15:34:19 +0100
Subject: [Rd] ?Syntax wrong about `?`'s precedence ?
In-Reply-To: <334017CF-CAE8-4270-8A52-BDD8B02C3DB3@gmail.com>
References: <CAEKh8ugXyz4cmkGrVDc6wxtwR6E9HbEiS3H9qVHzPF7OGyzZ2Q@mail.gmail.com>
 <7d4a921ac2594ecf83944eb594cbfe97@GBDCVPEXC08.corp.lgc-group.com>
 <CAF8bMcYxu+iuKyDZeYbtczimd+1nGBO-VjbTjkv9Va-eBnUhKw@mail.gmail.com>
 <CAJXgQP187iVBz79ZJ+_VEGnteTs=WAtqwY=ZPoawLd1enWF+1A@mail.gmail.com>
 <334017CF-CAE8-4270-8A52-BDD8B02C3DB3@gmail.com>
Message-ID: <938e6ff4-f58e-4cfb-0edb-65af5b176de5@gmail.com>

For reference, this has been fixed so that the precedence of "?" is 
lower than "=", as documented.
Tomas

On 8/30/19 7:45 PM, peter dalgaard wrote:
> ...and 14955, which seems to have the explanation (but was marked as closed/fixed??). The parser does list '?' as lower precedence than '=', but '='-assignments are not normal 'expr's which can appear as arguments to '?'. (Presumably because of named arguments: f(a=b) differs from f(a<-b).)
>
> Other tokens which have lower precedence than assignments are flow-control items, IF ELSE WHILE FOR REPEAT, but I don't see any way to confuse them in the same way as '?'.
>
> It might be possible to resolve the situation by specifying '?' syntax explicitly as
> expr_or_assign '?' expr_or_assign, but, well, "There be Tygers here"...
>
> -pd
>
>
>> On 30 Aug 2019, at 18:32 , Kevin Ushey <kevinushey at gmail.com> wrote:
>>
>> See also: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16710
>>
>> On Fri, Aug 30, 2019 at 9:02 AM William Dunlap via R-devel
>> <r-devel at r-project.org> wrote:
>>> Precedence is a property of the parser and has nothing to do with the
>>> semantics assigned to various symbols.  Using just core R functions you can
>>> see the precedence of '?' is between those of '=' and '<-'.
>>>
>>>> # '=' has lower precedence than '?'
>>>> str(as.list(parse(text="a ? b = c")[[1]]))
>>> List of 3
>>> $ : symbol =
>>> $ : language `?`(a, b)
>>> $ : symbol c
>>>> str(as.list(parse(text="a = b ? c")[[1]]))
>>> List of 3
>>> $ : symbol =
>>> $ : symbol a
>>> $ : language `?`(b, c)
>>>> # '<-' has higher precedence than '?'
>>>> str(as.list(parse(text="a ? b <- c")[[1]]))
>>> List of 3
>>> $ : symbol ?
>>> $ : symbol a
>>> $ : language b <- c
>>>> str(as.list(parse(text="a <- b ? c")[[1]]))
>>> List of 3
>>> $ : symbol ?
>>> $ : language a <- b
>>> $ : symbol c
>>>
>>> Bill Dunlap
>>> TIBCO Software
>>> wdunlap tibco.com
>>>
>>>
>>> On Fri, Aug 30, 2019 at 4:41 AM Stephen Ellison <S.Ellison at lgcgroup.com>
>>> wrote:
>>>
>>>>> From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Ant F
>>>>> Sent: 29 August 2019 12:06
>>>>> To: r-devel at r-project.org
>>>>> Subject: [Rd] ?Syntax wrong about `?`'s precedence ?
>>>>> ...
>>>>> See the following example :
>>>>>
>>>>>     `?` <- `+`
>>>> I'm curious; What did you expect to happen if you replace the function '?'
>>>> with the operator '+' ?
>>>> ? is surely now being evaluated as a user-defined function and not as an
>>>> operator.
>>>> Would you expect the results of doing that to be the same as evaluation
>>>> without replacement?
>>>>
>>>> S Ellison
>>>>
>>>>
>>>>
>>>>
>>>> *******************************************************************
>>>> This email and any attachments are confidential. Any u...{{dropped:10}}
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel



	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Tue Jan 28 02:56:31 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Tue, 28 Jan 2020 14:56:31 +1300
Subject: [Rd] matplot.Date & matplot.POSIXct
In-Reply-To: <5ae16284-22c4-e459-db14-15dd934b1f61-1151@prodsyse.com>
References: <5ae16284-22c4-e459-db14-15dd934b1f61-1151@prodsyse.com>
Message-ID: <CAB8pepyPavSzN-jdzC97A9mfuuA4aGxtgQXjOXc3F87UnDEshQ@mail.gmail.com>

Maybe I'm missing something really obvious here, but I was unable to
create a matrix out of POSIXct object(s).
Perhaps that deserves a separate discussion...?

Regarding your other comments/questions:
(1) You should *NOT* mask functions from the graphics package (or
base, stats, etc), except possibly for personal use.
(2) The xlab and ylab are fine.


B.


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Tue Jan 28 06:02:28 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Mon, 27 Jan 2020 23:02:28 -0600
Subject: [Rd] matplot.Date & matplot.POSIXct
In-Reply-To: <CAB8pepyPavSzN-jdzC97A9mfuuA4aGxtgQXjOXc3F87UnDEshQ@mail.gmail.com>
References: <5ae16284-22c4-e459-db14-15dd934b1f61-1151@prodsyse.com>
 <CAB8pepyPavSzN-jdzC97A9mfuuA4aGxtgQXjOXc3F87UnDEshQ@mail.gmail.com>
Message-ID: <9e4d9d63-f03a-70b7-0361-ea6905b23457@prodsyse.com>

 ????? Thanks for the reply.


On 2020-01-27 19:56, Abby Spurdle wrote:
> Maybe I'm missing something really obvious here, but I was unable to
> create a matrix out of POSIXct object(s).
> Perhaps that deserves a separate discussion...?


 ????? Can you provide an example?


 ????? The standard matplot application that concerns me is with 
matplot(x, y, ...) where x has class Date or POSIXct and y is a matrix.? 
The "fda" package on CRAN includes a "matplot" help page with examples 
that worked when I tested them recently.


 ????? If you have an example that you think should work but doesn't I'd 
like to know.? Maybe it should be added to the examples in 
fda::matplot.Rd file, then the code should be modified until it works.
>
> Regarding your other comments/questions:
> (1) You should *NOT* mask functions from the graphics package (or
> base, stats, etc), except possibly for personal use.
> (2) The xlab and ylab are fine.


 ??? ? In most situations, I agree with your comment that, "You should 
*NOT* mask functions from the graphics package (or base, stats, etc)".


 ????? However, when the behavior of the function in graphics, base, or 
stats seems patently inappropriate and not adequately considered, then I 
think that someone should mask the function in the core distribution 
with one whose behavior seems more consistent with what most users would 
most likely want.


 ????? Ten or twelve years ago, I concluded that the behavior of 
graphics::matplot(x, y, ...) was inappropriate when x is either of class 
Date or POSIXct.? Specifically, it labeled the horizontal axis the same 
as graphics::matplot(as.numeric(x), y, ...).? I think it should instead 
be labeled the same as graphics::plot(x, y[,1], ...) in such cases.? To 
fix this problem, I made fda::matplot generic; graphics::matplot is not 
generic.? And a coded methods for x of class numeric, matrix, Date and 
POSIXct plus a default.? Each calls either graphics::matplot or matlines 
as appropriate after first setting up the horizontal axis properly if x 
is of class Date or POSIXct.


 ????? For specific examples, consider the following taken from 
fda::matplot.Rd:


invasion1 <- as.Date('1775-09-04')
invasion2 <- as.Date('1812-07-12')
earlyUS.Canada <- c(invasion1, invasion2)
Y <- matrix(1:4, 2, 2)
graphics::matplot(earlyUS.Canada, Y)
# horizontal axis labeled per as.numeric(earlyUS.Canada),
# NOT as Dates
fda::matplot(earlyUS.Canada, Y)
# problem fixed.


# POSIXct
AmRev.ct <- as.POSIXct1970(c('1776-07-04', '1789-04-30'))
graphics::matplot(AmRev.ct, Y)
# horizontal axis labeled per as.numeric(AmRev.ct),
# NOT as POSIXct
fda::matplot(AmRev.ct, Y)
# problem fixed.


 ????? Comments?
 ????? Thanks again for the reply.
 ????? Spencer Graves
>
> B.


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 28 08:51:08 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 28 Jan 2020 08:51:08 +0100
Subject: [Rd] 
 class(<matrix>) |--> c("matrix", "arrary") -- and S3 dispatch
In-Reply-To: <4440351b-af29-b71b-446e-32e3d5a89d39@fredhutch.org>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <20449_1568703158_x8H6qIDG009669_f8285123-371f-5d4b-1281-6cc085dba122@fredhutch.org>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <CABdHhvEzVtwajH3fRD_ZOzChf6kVr2j3j6dD-Uo2i92Vj9kTtQ@mail.gmail.com>
 <52b343f6-0861-ac16-4eff-c91d17501843@fredhutch.org>
 <24014.53971.84201.964445@stat.math.ethz.ch>
 <24022.49679.656332.562828@stat.math.ethz.ch>
 <4440351b-af29-b71b-446e-32e3d5a89d39@fredhutch.org>
Message-ID: <24111.59372.591405.141323@stat.math.ethz.ch>

>>>>> Pages, Herve 
>>>>>     on Tue, 21 Jan 2020 17:33:01 +0000 writes:

    > Dear Martin,
    > What's the ETA for _R_CLASS_MATRIX_ARRAY_=TRUE to become the new 
    > unconditional behavior in R devel? Thanks!

    > H.

Thank you, Herv?, for asking / reminding.

It has been made so now, 3 days ago (svn r77714).

Martin




    > On 11/21/19 08:57, Martin Maechler wrote:
    >> 
    >> TLDR: This is quite technical, still somewhat important:
    >> 1)  R 4.0.0 will become a bit more coherent: a matrix is an array
    >> 2)  Your package (or one you use) may be affected.
    >> 
    >> 
    >>>>>>> Martin Maechler
    >>>>>>> on Fri, 15 Nov 2019 17:31:15 +0100 writes:
    >> 
    >>>>>>> Pages, Herve
    >>>>>>> on Thu, 14 Nov 2019 19:13:47 +0000 writes:
    >> 
    >> >> On 11/14/19 05:47, Hadley Wickham wrote:
    >> >>> On Sun, Nov 10, 2019 at 2:37 AM Martin Maechler ... wrote:
    >> 
    >> [................]
    >> 
    >> >>>>> Note again that both "matrix" and "array" are special [see ?class] as
    >> >>>>> being of  __implicit class__  and I am considering that this
    >> >>>>> implicit class behavior for these two should be slightly
    >> >>>>> changed ....
    >> >>>>>
    >> >>>>> And indeed I think you are right on spot and this would mean
    >> >>>>> that indeed the implicit class
    >> >>>>> "matrix" should rather become c("matrix", "array").
    >> >>>>
    >> >>>> I've made up my mind (and not been contradicted by my fellow R
    >> >>>> corers) to try go there for  R 4.0.0   next April.
    >> 
    >> >>> I can't seem to find the previous thread, so would you mind being a
    >> >>> bit more explicit here? Do you mean adding "array" to the implicit
    >> >>> class?
    >> 
    >> >> It's late in Europe ;-)
    >> 
    >> >> That's my understanding. I think the plan is to have class(matrix())
    >> >> return c("matrix", "array"). No class attributes added to matrix or
    >> >> array objects.
    >> 
    >> >> It's all what is needed to have inherits(matrix(), "array") return TRUE
    >> >> (instead of FALSE at the moment) and S3 dispatch pick up the foo.array
    >> >> method when foo(matrix()) is called and there is no foo.matrix method.
    >> 
    >> > Thank you, Herv?!  That's exactly the plan.
    >> 
    >> BUT it's wrong what I (and Peter and Herv? and ....) had assumed:
    >> 
    >> If I just change the class
    >> (as I already did a few days ago, but you must activate the change
    >> via environment variable, see below),
    >> 
    >> S3 dispatch does *NOT* at all pick it up:
    >> "matrix" (and "array") are even more special here (see below),
    >> and from Hadley's questions, in hindsight I now see that he's been aware
    >> of that and I hereby apologize to Hadley for not having thought
    >> and looked more, when he asked ..
    >> 
    >> Half an hour ago, I've done another source code commit (svn r77446),
    >> to "R-devel" only, of course, and the R-devel NEWS now starts as
    >> 
    >> ------------------------------------------------------------
    >> 
    >> CHANGES IN R-devel:
    >> 
    >> USER-VISIBLE CHANGES:
    >> 
    >> ?  .... intention that the next non-patch release should be 4.0.0.
    >> 
    >> ? R now builds by default against a PCRE2 library ........
    >> ...................
    >> ...................
    >> 
    >> ? For now only active when environment variable
    >> _R_CLASS_MATRIX_ARRAY_ is set to non-empty, but planned to be the
    >> new unconditional behavior when R 4.0.0 is released:
    >> 
    >> Newly, matrix objects also inherit from class "array", namely,
    >> e.g., class(diag(1)) is c("matrix", "array") which invalidates
    >> code (wrongly) assuming that length(class(obj)) == 1, a wrong
    >> assumption that is less frequently fulfilled now.  (Currently
    >> only after setting _R_CLASS_MATRIX_ARRAY_ to non-empty.)
    >> 
    >> S3 methods for "array", i.e., <someFun>.array(), are now also
    >> dispatched for matrix objects.
    >> 
    >> ------------------------------------------------------------
    >> (where only the very last 1.5 lines paragraph is new.)
    >> 
    >> Note the following
    >> (if you use a version of R-devel, with svn rev >= 77446; which
    >> you may get as a binary for Windows in about one day; everyone
    >> else needs to compile for the sources .. or wait a bit, maybe
    >> also not much longer than one day, for a docker image) :
    >> 
    >> 
    >>> Sys.unsetenv("_R_CLASS_MATRIX_ARRAY_") # ==> current R behavior
    >>> class(m <- diag(1))
    >> [1] "matrix"
    >>> Sys.setenv("_R_CLASS_MATRIX_ARRAY_" = "BOOH !") # ==> future R behavior
    >>> class(m)
    >> [1] "matrix" "array"
    >>> 
    >>> foo <- function(x) UseMethod("foo")
    >>> foo.array <- function(x) "made in foo.array()"
    >>> foo(m)
    >> [1] "made in foo.array()"
    >>> Sys.unsetenv("_R_CLASS_MATRIX_ARRAY_")# ==> current R behavior
    >>> foo(m)
    >> Error in UseMethod("foo") :
    >> no applicable method for 'foo' applied to an object of class "c('matrix', 'double', 'numeric')"
    >> 
    >>> Sys.setenv("_R_CLASS_MATRIX_ARRAY_" = TRUE) # ==> future R behavior
    >>> foo(m)
    >> [1] "made in foo.array()"
    >>> foo.A <- foo.array ; rm(foo.array)
    >>> foo(m)
    >> Error in UseMethod("foo") :
    >> no applicable method for 'foo' applied to an object of class "c('matrix', 'array', 'double', 'numeric')"
    >>> 
    >> 
    >> So, with my commit 77446, the  _R_CLASS_MATRIX_ARRAY_
    >> environment variable also changes the
    >> 
    >> "S3 dispatch determining class"
    >> 
    >> mentioned as 'class' in the error message (of the two cases, old
    >> and new) above,  which in R <= 3.6.x for a numeric matrix is
    >> 
    >> c('matrix', 'double', 'numeric')
    >> 
    >> and from R 4.0.0 on  will be
    >> 
    >> c('matrix', 'array', 'double', 'numeric')
    >> 
    >> Note that this is *not* (in R <= 3.6.x, nor very probably in R 4.0.0)
    >> the same as  R's  class().
    >> Hadley calls this long class vector the  'implicit class' -- which
    >> is a good term but somewhat conflicting with R's (i.e. R-core's)
    >> "definition" used in the  ?class  help page (for ca. 11 years).
    >> 
    >> R's internal C code has a nice function class R_data_class2()
    >> which computes this 'S3-dispatch-class' character (vector) for
    >> any R object, and R_data_class2() is indeed called from (the
    >> underlying C function of)  R's UseMethod().
    >> 
    >> Using the above fact of an error message,
    >> I wrote a nice (quite well tested) function  my.class2()  which
    >> returns this S3_dispatch_class() also in current versions of R:
    >> 
    >> my.class2 <- function(x) { # use a fn name not used by any sane ..
    >> foo.7.3.343 <- function(x) UseMethod("foo.7.3.343")
    >> msg <- tryCatch(foo.7.3.343(x), error=function(e) e$message)
    >> clm <- sub('"$', '', sub(".* of class \"", '', msg))
    >> if(is.language(x) || is.function(x))
    >> clm
    >> else {
    >> cl <- str2lang(clm)
    >> if(is.symbol(cl)) as.character(cl) else eval(cl)
    >> }
    >> }
    >> 
    >> ## str2lang() needs R >= 3.6.0:
    >> if(getRversion() < "3.6.0") ## substitute for str2lang(), good enough here:
    >> str2lang <- function(s) parse(text = s, keep.source=FALSE)[[1]]
    >> 
    >> 
    >> Now you can look at such things yourself:
    >> 
    >> ## --------------------- the "interesting" cases : ---
    >> ## integer and double
    >> my.class2( pi) 	# == c("double",  "numeric")
    >> my.class2(1:2) 	# == c("integer", "numeric")
    >> ## matrix and array [also combined with int / double ] :
    >> my.class2(matrix(1L, 2,3))   	# == c(matrixCL, "integer", "numeric")  <<<
    >> my.class2(matrix(pi, 2,3))   	# == c(matrixCL,  "double", "numeric")  <<<
    >> my.class2(array("A", 2:3))   	# == c(matrixCL,  "character")          <<<
    >> my.class2(array(1:24, 2:4))  	# == c("array",  "integer", "numeric")
    >> my.class2(array( pi , 2:4))  	# == c("array",   "double", "numeric")
    >> my.class2(array(TRUE, 2:4))  	# == c("array", "logical")
    >> my.class2(array(letters, 2:4))	# == c("array", "character")
    >> my.class2(array(1:24 + 1i, 2))	# == c("array", "complex")
    >> 
    >> ## other cases
    >> my.class2(NA) 	# == class(NA) : "logical"
    >> my.class2("A") 	# == class("B"): "character"
    >> my.class2(as.raw(0:2)) 	# == "raw"
    >> my.class2(1 + 2i) 	# == "complex"
    >> my.class2(USJudgeRatings)#== "data.frame"
    >> my.class2(class) 	# == "function" # also for a primitive
    >> my.class2(globalenv()) 	# == "environment"
    >> my.class2(quote(sin(x)))# == "call"
    >> my.class2(quote(sin) )  # == "name"
    >> my.class2(quote({}))	# == class(*) == "{"
    >> my.class2(quote((.)))	# == class(*) == "("
    >> 
    >> -----------------------------------------------------
    >> 
    >> note that of course, the lines marked "<<<" above, contain
    >> 'matrixCL'  which is "matrix" in "old" (i.e. current) R,
    >> and is c("matrix", "array") in "new" (i.e. future) R.
    >> 
    >> Last but not least: It's quite trivial (only few words need to
    >> be added to the sources; more to the documentation)  to add an R
    >> function to base R which provides the same as my.class2() above,
    >> (but much more efficiently, not via catching error messages !!),
    >> and my current proposal for that function's name is  .class2()
    >> {it should start with a dot ("."), as it's not for the simple
    >> minded average useR ... and you know how I'm happy with
    >> function names that do not need one single [Shift] key ...}
    >> 
    >> The current plan contains
    >> 
    >> 1)  Notify CRAN package maintainers (ca 140) whose packages no
    >> longer pass R CMD check  when the feature is turned on
    >> (via setting the environment variable) in R-devel.
    >> 
    >> 2a) (Some) CRAN team members set _R_CLASS_MATRIX_ARRAY_ (to non-empty),
    >> as part of the incoming checks, at least for all new CRAN submissions
    >> 
    >> 2b) set the  _R_CLASS_MATRIX_ARRAY_ (to non-empty), as part of
    >> ' R CMD check --as-cran <pkg>'
    >> 
    >> 3)  Before the end of 2019, change the R sources (for R-devel)
    >> such that it behaves as it behaves currently when the environment
    >> variable is set *AND* abolish this environment variable from
    >> the sources.  {read on to learn *why*}
    >> 
    >> Consequently (to 3), R 4.0.0 will behave as indicated, unconditionally.
    >> 
    >> Note that (as I've shown above in the first example set) this is
    >> set up in such a manner that you can change the environment
    >> variable during a *running* R session, and observe the effect immediately.
    >> This however lead to some slow down of quite a bit of the R
    >> code, because actually the environment variable has to be
    >> checked quite often (easily dozens of times for simple R calls).
    >> 
    >> For that reason, we want to do "3)" as quickly as possible.
    >> 
    >> Please do not hesitate to ask or comment
    >> -- here, not on Twitter, please --  noting that I'll be
    >> basically offline for an extended weekend within 24h, now.
    >> 
    >> I hope this will eventually to lead to clean up and clarity in
    >> R, and hence should be worth the pain of broken
    >> back-compatibility and having to adapt your (almost always only
    >> sub-optimally written ;-)) R code,
    >> see also my Blog   https://urldefense.proofpoint.com/v2/url?u=http-3A__bit.ly_R-5Fblog-5Fclass-5Fthink-5F2x&d=DwIDaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=xAGXmo1FhJxT-qBfj-McDEn3sqWhqJHNV-IPpN7g6oA&s=yUUwdjl5LE90V0tLTM3FZYZ0zHf8coHo49Vt95O7IwQ&e=
    >> 
    >> Martin Maechler
    >> ETH Zurich and R Core team
    >> 

    > -- 
    > Herv? Pag?s

    > Program in Computational Biology
    > Division of Public Health Sciences
    > Fred Hutchinson Cancer Research Center
    > 1100 Fairview Ave. N, M1-B514
    > P.O. Box 19024
    > Seattle, WA 98109-1024

    > E-mail: hpages at fredhutch.org
    > Phone:  (206) 667-5791
    > Fax:    (206) 667-1319


From @purd|e@@ @end|ng |rom gm@||@com  Tue Jan 28 09:09:45 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Tue, 28 Jan 2020 21:09:45 +1300
Subject: [Rd] matplot.Date & matplot.POSIXct
In-Reply-To: <9e4d9d63-f03a-70b7-0361-ea6905b23457@prodsyse.com>
References: <5ae16284-22c4-e459-db14-15dd934b1f61-1151@prodsyse.com>
 <CAB8pepyPavSzN-jdzC97A9mfuuA4aGxtgQXjOXc3F87UnDEshQ@mail.gmail.com>
 <9e4d9d63-f03a-70b7-0361-ea6905b23457@prodsyse.com>
Message-ID: <CAB8pepxqCzASak1S7BJe34-QTGjDHSTU5T+ZUERDEb4Wm1t_YA@mail.gmail.com>

> > Maybe I'm missing something really obvious here, but I was unable to
> > create a matrix out of POSIXct object(s).
> > Perhaps that deserves a separate discussion...?
>    Can you provide an example?

------
#date and time objects
x = Sys.Date () + 1:16
y = as.POSIXct (x)

#matrices
str (matrix (x, 4, 4) )
str (matrix (y, 4, 4) )
------

Creating a matrix from a Date or POSIXct object, results in a numeric
matrix, not a date/time matrix.

I think that date/time matrices could be useful.
It's possible that this has been discussed before.
But if not, it may be good to discuss it.

And returning to your original post...

I re-read the documentation for the matplot function.
And I feel that it's ambiguous.

The description says:
"Plot the columns of one matrix against the columns of another."
i.e. The matplot function is for *matrices*.

However, then it says:
"x,y vectors or matrices of data for plotting. The number of rows should match."

I'm guessing the current intention is that standard vectors (without a
dim attribute) would be coerce-ible to single-column matrices,
implying that using this function with date and time objects, is
contrary to the way it's currently designed to work.

But...

After reading your examples and re-reading the documentation, your
main suggestion that matplot should support Date and POSIXct objects,
is still *probably* a good one. I note that function is not generic,
and modifications to it would not necessarily be trivial.


From edzer@pebe@m@ @end|ng |rom un|-muen@ter@de  Tue Jan 28 10:36:20 2020
From: edzer@pebe@m@ @end|ng |rom un|-muen@ter@de (Edzer Pebesma)
Date: Tue, 28 Jan 2020 10:36:20 +0100
Subject: [Rd] matplot.Date & matplot.POSIXct
In-Reply-To: <CAB8pepxqCzASak1S7BJe34-QTGjDHSTU5T+ZUERDEb4Wm1t_YA@mail.gmail.com>
References: <5ae16284-22c4-e459-db14-15dd934b1f61-1151@prodsyse.com>
 <CAB8pepyPavSzN-jdzC97A9mfuuA4aGxtgQXjOXc3F87UnDEshQ@mail.gmail.com>
 <9e4d9d63-f03a-70b7-0361-ea6905b23457@prodsyse.com>
 <CAB8pepxqCzASak1S7BJe34-QTGjDHSTU5T+ZUERDEb4Wm1t_YA@mail.gmail.com>
Message-ID: <7f0d7b56-4a51-af21-f717-f7fc8c93ad17@uni-muenster.de>

Whether something "is" a matrix depends on whether you listen to
is.matrix(x) or to inherits(x, "matrix"):

x = Sys.Date () + 1:16
y = as.POSIXct (x)
dim(y) = c(4,4)
is.matrix(y)
# [1] TRUE
inherits(y, "matrix")
# [1] FALSE

f = factor(letters[1:9])
dim(f) = c(3,3)
is.matrix(f)
# [1] TRUE
inherits(f, "matrix")
# [1] FALSE

I'm using (abusing?) this in the stars package, where it is convenient
to have n-D arrays of type factor, Date or POSIXct, mostly because the [
method works:

(f2 <- f[1:2,1:2])
#      [,1] [,2]
# [1,] a    d
# [2,] b    e
# Levels: a b c d e f g h i
is.matrix(f2)
# [1] TRUE


On 1/28/20 9:09 AM, Abby Spurdle wrote:
>>> Maybe I'm missing something really obvious here, but I was unable to
>>> create a matrix out of POSIXct object(s).
>>> Perhaps that deserves a separate discussion...?
>>    Can you provide an example?
> 
> ------
> #date and time objects
> x = Sys.Date () + 1:16
> y = as.POSIXct (x)
> 
> #matrices
> str (matrix (x, 4, 4) )
> str (matrix (y, 4, 4) )
> ------
> 
> Creating a matrix from a Date or POSIXct object, results in a numeric
> matrix, not a date/time matrix.
> 
> I think that date/time matrices could be useful.
> It's possible that this has been discussed before.
> But if not, it may be good to discuss it.
> 
> And returning to your original post...
> 
> I re-read the documentation for the matplot function.
> And I feel that it's ambiguous.
> 
> The description says:
> "Plot the columns of one matrix against the columns of another."
> i.e. The matplot function is for *matrices*.
> 
> However, then it says:
> "x,y vectors or matrices of data for plotting. The number of rows should match."
> 
> I'm guessing the current intention is that standard vectors (without a
> dim attribute) would be coerce-ible to single-column matrices,
> implying that using this function with date and time objects, is
> contrary to the way it's currently designed to work.
> 
> But...
> 
> After reading your examples and re-reading the documentation, your
> main suggestion that matplot should support Date and POSIXct objects,
> is still *probably* a good one. I note that function is not generic,
> and modifications to it would not necessarily be trivial.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Edzer Pebesma
Institute for Geoinformatics
Heisenbergstrasse 2, 48151 Muenster, Germany
Phone: +49 251 8333081

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 28 12:13:03 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 28 Jan 2020 12:13:03 +0100
Subject: [Rd] matplot.Date & matplot.POSIXct
In-Reply-To: <9e4d9d63-f03a-70b7-0361-ea6905b23457@prodsyse.com>
References: <5ae16284-22c4-e459-db14-15dd934b1f61-1151@prodsyse.com>
 <CAB8pepyPavSzN-jdzC97A9mfuuA4aGxtgQXjOXc3F87UnDEshQ@mail.gmail.com>
 <9e4d9d63-f03a-70b7-0361-ea6905b23457@prodsyse.com>
Message-ID: <24112.5951.474018.692139@stat.math.ethz.ch>

>>>>> Spencer Graves 
>>>>>     on Mon, 27 Jan 2020 23:02:28 -0600 writes:

    > ????? Thanks for the reply.
    > On 2020-01-27 19:56, Abby Spurdle wrote:
    >> Maybe I'm missing something really obvious here, but I was unable to
    >> create a matrix out of POSIXct object(s).
    >> Perhaps that deserves a separate discussion...?

yes, very much a separate discussion.
Let's come back to Spencer's topic of matplot() :

    [....]

    > ????? The standard matplot application that concerns me is with 
    > matplot(x, y, ...) where x has class Date or POSIXct and y is a matrix.? 

    > The "fda" package on CRAN includes a "matplot" help page with examples 
    > that worked when I tested them recently.

Indeed.  That's how I understood you well.
matplot() has been one of my favorite plotting functions in S
and Splus in the 1990s ... and that's why the R source code of
matplot(), matpoints(), and matlines()  still has a comment
mentioning that I wrote (the first version of) it for R on June 27, 1997.

By design (from S), matplot() {etc} has always been thought as a convenience
wrapper to calling
	plot() and lines(),  lines(),  lines()
or    	plot() and points(), points(), points()	

{plot() : for setting up coord.system, draw axes, titles, ...},
-- notably also for adhering to the DRY (instead of WET)
   programming principle (-> "Don't Repeat Yourself")  --

*and* -- be assured -- more than 99% of its use has been for the
special case where x has been a numeric vector and y a matrix
with several columns and indeed, the following part from the
beginning of  matplot()'s source code has basically already been in the
version from 1997 and is all about having it work for
vectors treated as 1-column matrices :

------------------------------------------------------------------------

    if(missing(x)) {
	if(missing(y)) stop("must specify at least one of 'x' and 'y'")
	else x <- seq_len(NROW(y))
    } else if(missing(y)) {
	y <- x;	 ylabel <- xlabel
	x <- seq_len(NROW(y)); xlabel <- ""
    }
    kx <- ncol(x <- as.matrix(x))
    ky <- ncol(y <- as.matrix(y))
    n <- nrow(x)
    if(n != nrow(y)) stop("'x' and 'y' must have same number of rows")

    if(kx > 1L && ky > 1L && kx != ky)
	stop("'x' and 'y' must have only 1 or the same number of columns")
    if(kx == 1L) x <- matrix(x, nrow = n, ncol = ky)
    if(ky == 1L) y <- matrix(y, nrow = n, ncol = kx)
    k <- max(kx, ky) ## k == kx == ky

------------------------------------------------------------------------





    > ????? If you have an example that you think should work but doesn't I'd 
    > like to know.? Maybe it should be added to the examples in 
    > fda::matplot.Rd file, then the code should be modified until it works.
    >> 
    >> Regarding your other comments/questions:
    >> (1) You should *NOT* mask functions from the graphics package (or
    >> base, stats, etc), except possibly for personal use.
    >> (2) The xlab and ylab are fine.


    > ??? ? In most situations, I agree with your comment that, "You should 
    > *NOT* mask functions from the graphics package (or base, stats, etc)".


    > ????? However, when the behavior of the function in graphics, base, or 
    > stats seems patently inappropriate and not adequately considered, then I 
    > think that someone should mask the function in the core distribution 
    > with one whose behavior seems more consistent with what most users would 
    > most likely want.


    > ????? Ten or twelve years ago, I concluded that the behavior of 
    > graphics::matplot(x, y, ...) was inappropriate when x is either of class 
    > Date or POSIXct.? Specifically, it labeled the horizontal axis the same 
    > as graphics::matplot(as.numeric(x), y, ...).? I think it should instead 
    > be labeled the same as graphics::plot(x, y[,1], ...) in such cases.? To 
    > fix this problem, I made fda::matplot generic; graphics::matplot is not 
    > generic.? And a coded methods for x of class numeric, matrix, Date and 
    > POSIXct plus a default.? Each calls either graphics::matplot or matlines 
    > as appropriate after first setting up the horizontal axis properly if x 
    > is of class Date or POSIXct.

I pretty much agree with your judgement here, Spencer.
What you say (and I assume your fda::matplot() does) is still
implementing the original basic idea of being a convenience
wrapper for a call to plot() and typically several calls
to lines() or points()...

and indeed in R {graphics}, plot(), lines() and points()
all have been S3 generics for a long time and so it seems
naturaly that a wrapper to these functions should also dispatch
correctly ...

possibly *not* by becoming S3 generic itself, but just, conceptually,
by ensuring *not* to change the S3 class of 'x' before calling
plot(), points() and lines() ....


    > ????? For specific examples, consider the following taken from 
    > fda::matplot.Rd:


    > invasion1 <- as.Date('1775-09-04')
    > invasion2 <- as.Date('1812-07-12')
    > earlyUS.Canada <- c(invasion1, invasion2)
    > Y <- matrix(1:4, 2, 2)
    > graphics::matplot(earlyUS.Canada, Y)
    > # horizontal axis labeled per as.numeric(earlyUS.Canada),
    > # NOT as Dates
    > fda::matplot(earlyUS.Canada, Y)
    > # problem fixed.


    > # POSIXct
    > AmRev.ct <- as.POSIXct1970(c('1776-07-04', '1789-04-30'))
    > graphics::matplot(AmRev.ct, Y)
    > # horizontal axis labeled per as.numeric(AmRev.ct),
    > # NOT as POSIXct
    > fda::matplot(AmRev.ct, Y)
    > # problem fixed.

    > ????? Comments?

first parts: see above; from there I hope it's already
clear that I am sympathetic to your proposal,
... but (there's alway a "but", ..)

Still, as Abby mentioned,  turning a simple function into the
default method of an S3 generic is easy to do, but comes with a
bit of cost, not just S3 dispatch which typically is negligable in
graphics, but a bit of maintenance cost and mostly in this case
the cost of breaking back compatibility by the improvement.
How many plots will change where people have already relied on
the current   as.numeric(x)   behavior?
If we'd change this in R's graphics, it will be
- me and/or the CRAN team who have to contact CRAN package
  maintainer about problems
  (maybe none, as the change may not break any checks)

- Users of matplot() {& matlines() & matpoints()}  who may have to
  adopt their calls to these functions {I'm pretty sure all
  three would have to change for consistency}.

----- and then, there are quite a few other changes,  bug
      assignments to which I have committed which should be
      dealt with rather before this.

If you'd turn this into a proper "wishlist"  "bug" report
on R's bugzilla, *and* you or another volunteer provided a patch
to the R sources (including changes to man/*.Rd, NAMESPACE, ..)
which then can be tested to pass 'make check-all',
then I'd definitely commit to this
(possibly too late for R 4.0.0;  teaching starts here soon, etc).

Best,
Martin

    > ????? Thanks again for the reply.
    > ????? Spencer Graves
    >> 
    >> B.


From p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r  Tue Jan 28 12:09:50 2020
From: p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r (Patrick Giraudoux)
Date: Tue, 28 Jan 2020 12:09:50 +0100
Subject: [Rd] mrds function integratepdf cannot be found
Message-ID: <354c4508-e0ed-cd80-34e9-136aa35923e0@univ-fcomte.fr>

Hi,

Trying to use the function integratepdf of the mrds package, I get this 
message:

|Error in integratepdf(fox.ds$ddf$ds$aux$ddfobj, select = rep(TRUE, 
nrow(fox.ds$ddf$ds$aux$ddfobj$xmat)), : could not find function 
"integratepdf" |

Has anyone already had this issue ? Maybe the function is not exported 
in the namespace?

Best,

Patrick


 > library(mrds)
This is mrds 2.2.0
Built: R 3.6.1; ; 2019-09-28 03:24:13 UTC; windows


	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Tue Jan 28 13:27:59 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 28 Jan 2020 13:27:59 +0100
Subject: [Rd] mrds function integratepdf cannot be found
In-Reply-To: <354c4508-e0ed-cd80-34e9-136aa35923e0@univ-fcomte.fr>
References: <354c4508-e0ed-cd80-34e9-136aa35923e0@univ-fcomte.fr>
Message-ID: <0C2CB700-45D9-435C-91EC-781E512292CB@gmail.com>

Yes, looks like a missing export (and a missing example on the help page, which would have exposed the error...).

mrds:::integratepdf() should do the appropriate "burglary"

-pd

> On 28 Jan 2020, at 12:09 , Patrick Giraudoux <patrick.giraudoux at univ-fcomte.fr> wrote:
> 
> Hi,
> 
> Trying to use the function integratepdf of the mrds package, I get this 
> message:
> 
> |Error in integratepdf(fox.ds$ddf$ds$aux$ddfobj, select = rep(TRUE, 
> nrow(fox.ds$ddf$ds$aux$ddfobj$xmat)), : could not find function 
> "integratepdf" |
> 
> Has anyone already had this issue ? Maybe the function is not exported 
> in the namespace?
> 
> Best,
> 
> Patrick
> 
> 
>> library(mrds)
> This is mrds 2.2.0
> Built: R 3.6.1; ; 2019-09-28 03:24:13 UTC; windows
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Wed Jan 29 00:24:14 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Tue, 28 Jan 2020 17:24:14 -0600
Subject: [Rd] matplot.Date & matplot.POSIXct
In-Reply-To: <24112.5951.474018.692139@stat.math.ethz.ch>
References: <5ae16284-22c4-e459-db14-15dd934b1f61-1151@prodsyse.com>
 <CAB8pepyPavSzN-jdzC97A9mfuuA4aGxtgQXjOXc3F87UnDEshQ@mail.gmail.com>
 <9e4d9d63-f03a-70b7-0361-ea6905b23457@prodsyse.com>
 <24112.5951.474018.692139@stat.math.ethz.ch>
Message-ID: <b2e11223-191e-02c6-cd13-a14080f1962e@prodsyse.com>



On 2020-01-28 05:13, Martin Maechler wrote:
>>>>>> Spencer Graves
>>>>>>      on Mon, 27 Jan 2020 23:02:28 -0600 writes:

<snip>
>
> Still, as Abby mentioned,  turning a simple function into the
> default method of an S3 generic is easy to do, but comes with a
> bit of cost, not just S3 dispatch which typically is negligable in
> graphics, but a bit of maintenance cost and mostly in this case
> the cost of breaking back compatibility by the improvement.
> How many plots will change where people have already relied on
> the current   as.numeric(x)   behavior?
> If we'd change this in R's graphics, it will be
> - me and/or the CRAN team who have to contact CRAN package
>    maintainer about problems
>    (maybe none, as the change may not break any checks)
>
> - Users of matplot() {& matlines() & matpoints()}  who may have to
>    adopt their calls to these functions {I'm pretty sure all
>    three would have to change for consistency}.
>
> ----- and then, there are quite a few other changes,  bug
>        assignments to which I have committed which should be
>        dealt with rather before this.
>
> If you'd turn this into a proper "wishlist"  "bug" report
> on R's bugzilla, *and* you or another volunteer provided a patch
> to the R sources (including changes to man/*.Rd, NAMESPACE, ..)
> which then can be tested to pass 'make check-all',
> then I'd definitely commit to this
> (possibly too late for R 4.0.0;  teaching starts here soon, etc).


 ????? 1.? What do you suggest I do to get acceptable copies of 
~man/matplot.Rd and ~R/matplot.R -- and preferably the entire "graphics" 
package, so I can do R CMD build, check, etc., as I've done for 15 years 
or so with other R packages?


 ????? 2.? Then you'd like me to revise matplot.Rd to include 
appropriate examples that work fine with fda::matplot but malfunction 
with graphics::malfunction, then revise matplot.R so it fixed the 
problem?? And you want a fix that does NOT convert "matplot" to generic, 
and retains the current "as.numeric(x)" step except when inherits(x, 
"Date") or inherits(x, "POSIXct")?


 ????? 3.? Then you want me to submit a "wishlist" "bug" report to 
"https://bugs.r-project.org/bugzilla/index.cgi" including all changes to 
matplot.Rd and matplot.R?? If I don't convert "matplot" to generic, then 
there should be no need for changes to NAMESPACE, correct?


 ????? An answer to question "1" with "yes" to questions "2" and "3" 
should get me started.


 ????? Thanks,
 ????? Spencer Graves
>
> Best,
> Martin
>
>      > ????? Thanks again for the reply.
>      > ????? Spencer Graves
>      >>
>      >> B.


From @@r|tch|e73 @end|ng |rom gm@||@com  Tue Jan 28 17:34:03 2020
From: @@r|tch|e73 @end|ng |rom gm@||@com (Scott Ritchie)
Date: Tue, 28 Jan 2020 16:34:03 +0000
Subject: [Rd] Rinternals.h could expose macros for ISNA and ISNAN for CPLXSXP
Message-ID: <CAO1VBV02eedq+zG2dgKAt7R7EgQ6AvbqCiJb77AFBUuWcS0Acw-2340@mail.gmail.com>

Apologies if this has been suggested before (I had a search throug the
archives and couldn't find anything).

Currently Rinternals.h includes macros for testing whether an Rboolean,
int, double, or CHARSXP are NA, and whether a double is NaN. As far as I
can tell, no such macro exists for testing whether an Rcomplex is NA or NAN.

These can simply be defined by applying the current ISNA and ISNAN macros
used for  REALSXP on the real and imaginary components of the Rcomplex
struct, and could be included in either R_ext/Arith.h or R_ext/Complex.h

```
#define ISNA_COMPLEX(x) (ISNA(x.r) || ISNA(x.i))
#define ISNAN_COMPLEX(x) (ISNAN(x.r) || ISNAN(x.i))
```

Best,

Scott Ritchie

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Jan 29 12:14:53 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 29 Jan 2020 12:14:53 +0100
Subject: [Rd] matplot.Date & matplot.POSIXct
In-Reply-To: <b2e11223-191e-02c6-cd13-a14080f1962e@prodsyse.com>
References: <5ae16284-22c4-e459-db14-15dd934b1f61-1151@prodsyse.com>
 <CAB8pepyPavSzN-jdzC97A9mfuuA4aGxtgQXjOXc3F87UnDEshQ@mail.gmail.com>
 <9e4d9d63-f03a-70b7-0361-ea6905b23457@prodsyse.com>
 <24112.5951.474018.692139@stat.math.ethz.ch>
 <b2e11223-191e-02c6-cd13-a14080f1962e@prodsyse.com>
Message-ID: <24113.26925.246134.129523@stat.math.ethz.ch>

>>>>> Spencer Graves 
>>>>>     on Tue, 28 Jan 2020 17:24:14 -0600 writes:

    > On 2020-01-28 05:13, Martin Maechler wrote:
    >>>>>>> Spencer Graves
    >>>>>>> on Mon, 27 Jan 2020 23:02:28 -0600 writes:

    > <snip>
    >> 
    >> Still, as Abby mentioned,  turning a simple function into the
    >> default method of an S3 generic is easy to do, but comes with a
    >> bit of cost, not just S3 dispatch which typically is negligable in
    >> graphics, but a bit of maintenance cost and mostly in this case
    >> the cost of breaking back compatibility by the improvement.
    >> How many plots will change where people have already relied on
    >> the current   as.numeric(x)   behavior?
    >> If we'd change this in R's graphics, it will be
    >> - me and/or the CRAN team who have to contact CRAN package
    >> maintainer about problems
    >> (maybe none, as the change may not break any checks)
    >> 
    >> - Users of matplot() {& matlines() & matpoints()}  who may have to
    >> adopt their calls to these functions {I'm pretty sure all
    >> three would have to change for consistency}.
    >> 
    >> ----- and then, there are quite a few other changes,  bug
    >> assignments to which I have committed which should be
    >> dealt with rather before this.
    >> 
    >> If you'd turn this into a proper "wishlist"  "bug" report
    >> on R's bugzilla, *and* you or another volunteer provided a patch
    >> to the R sources (including changes to man/*.Rd, NAMESPACE, ..)
    >> which then can be tested to pass 'make check-all',
    >> then I'd definitely commit to this
    >> (possibly too late for R 4.0.0;  teaching starts here soon, etc).


    > ????? 1.? What do you suggest I do to get acceptable copies of 
    > ~man/matplot.Rd and ~R/matplot.R -- and preferably the entire "graphics" 
    > package, so I can do R CMD build, check, etc., as I've done for 15 years 
    > or so with other R packages?

Getting the full source of R, either

1) from svn.r-project.org :

	svn checkout https://svn.r-project.org/R/trunk R-devel 

   where the R source is maintained, or more easily if you have never
   worked with 'svn'
2) if you know git well, you can use the github *mirror* of svn.r-project.org,
  at https://github.com/wch/r-source/

3) most easily for most :  as tarball from CRAN

   wget https://cloud.r-project.org/src/base-prerelease/R-devel.tar.gz

   tar xf R-devel.tar.gz
   cd R-devel
   ls -lt src/library/graphics/{R,man}/matplot*


    > ????? 2.? Then you'd like me to revise matplot.Rd to include 
    > appropriate examples that work fine with fda::matplot but malfunction 
    > with graphics::malfunction, then revise matplot.R so it fixed the 
    > problem?? And you want a fix that does NOT convert "matplot" to generic, 
    > and retains the current "as.numeric(x)" step except when inherits(x, 
    > "Date") or inherits(x, "POSIXct")?

well... this would be for you or anybody else who'd like to help
the R project advance here.

HOWEVER, see below ..

    > ????? 3.? Then you want me to submit a "wishlist" "bug" report to 
    > "https://bugs.r-project.org/bugzilla/index.cgi" including all changes to 
    > matplot.Rd and matplot.R?? If I don't convert "matplot" to generic, then 
    > there should be no need for changes to NAMESPACE, correct?

that's correct.

However:  Thanks to the R-devel conversation with you, my
	  thoughts have continued after writing my previous
	  e-mail, and I've started to look into the source,
	  i.e., matplot.R,

*and* worked out the solution myself: It now looks as I've been
able to change matplot() such that it typically does *not* use
matrix() nor as.matrix() for input 'x' of class "Date" or
"POSIXct" (or many similar S3 objects x) but rather uses the

	  dim(x) <- c(n, m)

trick to turn x into a matrix .. which BTW does work for fine to
turn "Date" or "POSIXct" into matrices though you do *not* notice
that (!!) from print()ing them nor from str(.) --- the latter IMO 
a buglet in the corresponding str() method).

I've spent some time to ensure matplot(x) continues to work when
'x' is a numeric data frame or a Matrix-package sparse matrix, etc,

I've run checks and will do some more but plan to commit this
version of matplot() to  R-devel within a few days,
so there's no need for now for anybody else to work on this.

Martin


    > ????? An answer to question "1" with "yes" to questions "2" and "3" 
    > should get me started.

which for now should not be necessary:

I attach a cut'n'paste version of  my new (not yet committed)
version of matplot() for you to test (file name 'matplot-1.R')

Best, Martin


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: matplot-1.R
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200129/f6415f8b/attachment.ksh>

From hp@ge@ @end|ng |rom |redhutch@org  Wed Jan 29 19:13:02 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Wed, 29 Jan 2020 18:13:02 +0000
Subject: [Rd] 
 class(<matrix>) |--> c("matrix", "arrary") -- and S3 dispatch
In-Reply-To: <24111.59372.591405.141323@stat.math.ethz.ch>
References: <CAPRVBcxsAkcgr3mDc4skTe8DTxJaYe2xyhk3QMk3odW1MGcyNA@mail.gmail.com>
 <22204_1568723392_x8HCSG3F015456_674779E0-B1F6-4DC2-9F1C-D5D48B044B66@mcmaster.ca>
 <AD725242-0FB7-4004-9F16-304E345A363A@mcmaster.ca>
 <23937.1791.389379.103733@stat.math.ethz.ch>
 <CAD4oTHF_e4rtHu0S5bUu38+kQSEHXwun3Sv9-CbK+xN9tSc2hA@mail.gmail.com>
 <CAD4oTHFf7Zp+Xe3jvv7oirLWgZm7ZiSNWZvbrEsqJGfrL6Q2wQ@mail.gmail.com>
 <23993.29737.690600.313456@stat.math.ethz.ch>
 <38105A28-07AE-48F6-A4A4-0C1FCCCBFBDC@gmail.com>
 <23995.62027.969336.196344@stat.math.ethz.ch>
 <CAD4oTHF1+PdJX-Qq=JZwafhGNatDu9AZVD0prCAvyJFL9bLzVg@mail.gmail.com>
 <24007.52264.596794.767557@stat.math.ethz.ch>
 <CABdHhvEzVtwajH3fRD_ZOzChf6kVr2j3j6dD-Uo2i92Vj9kTtQ@mail.gmail.com>
 <52b343f6-0861-ac16-4eff-c91d17501843@fredhutch.org>
 <24014.53971.84201.964445@stat.math.ethz.ch>
 <24022.49679.656332.562828@stat.math.ethz.ch>
 <4440351b-af29-b71b-446e-32e3d5a89d39@fredhutch.org>
 <24111.59372.591405.141323@stat.math.ethz.ch>
Message-ID: <1accbbc9-dacb-0153-0356-61897c023d84@fredhutch.org>

On 1/27/20 23:51, Martin Maechler wrote:
>>>>>> Pages, Herve
>>>>>>      on Tue, 21 Jan 2020 17:33:01 +0000 writes:
> 
>      > Dear Martin,
>      > What's the ETA for _R_CLASS_MATRIX_ARRAY_=TRUE to become the new
>      > unconditional behavior in R devel? Thanks!
> 
>      > H.
> 
> Thank you, Herv?, for asking / reminding.
> 
> It has been made so now, 3 days ago (svn r77714).

Yep, I've seen that. Already deployed on the Bioconductor build 
machines. Thanks!

H.

> 
> Martin
> 
> 
> 
> 
>      > On 11/21/19 08:57, Martin Maechler wrote:
>      >>
>      >> TLDR: This is quite technical, still somewhat important:
>      >> 1)  R 4.0.0 will become a bit more coherent: a matrix is an array
>      >> 2)  Your package (or one you use) may be affected.
>      >>
>      >>
>      >>>>>>> Martin Maechler
>      >>>>>>> on Fri, 15 Nov 2019 17:31:15 +0100 writes:
>      >>
>      >>>>>>> Pages, Herve
>      >>>>>>> on Thu, 14 Nov 2019 19:13:47 +0000 writes:
>      >>
>      >> >> On 11/14/19 05:47, Hadley Wickham wrote:
>      >> >>> On Sun, Nov 10, 2019 at 2:37 AM Martin Maechler ... wrote:
>      >>
>      >> [................]
>      >>
>      >> >>>>> Note again that both "matrix" and "array" are special [see ?class] as
>      >> >>>>> being of  __implicit class__  and I am considering that this
>      >> >>>>> implicit class behavior for these two should be slightly
>      >> >>>>> changed ....
>      >> >>>>>
>      >> >>>>> And indeed I think you are right on spot and this would mean
>      >> >>>>> that indeed the implicit class
>      >> >>>>> "matrix" should rather become c("matrix", "array").
>      >> >>>>
>      >> >>>> I've made up my mind (and not been contradicted by my fellow R
>      >> >>>> corers) to try go there for  R 4.0.0   next April.
>      >>
>      >> >>> I can't seem to find the previous thread, so would you mind being a
>      >> >>> bit more explicit here? Do you mean adding "array" to the implicit
>      >> >>> class?
>      >>
>      >> >> It's late in Europe ;-)
>      >>
>      >> >> That's my understanding. I think the plan is to have class(matrix())
>      >> >> return c("matrix", "array"). No class attributes added to matrix or
>      >> >> array objects.
>      >>
>      >> >> It's all what is needed to have inherits(matrix(), "array") return TRUE
>      >> >> (instead of FALSE at the moment) and S3 dispatch pick up the foo.array
>      >> >> method when foo(matrix()) is called and there is no foo.matrix method.
>      >>
>      >> > Thank you, Herv?!  That's exactly the plan.
>      >>
>      >> BUT it's wrong what I (and Peter and Herv? and ....) had assumed:
>      >>
>      >> If I just change the class
>      >> (as I already did a few days ago, but you must activate the change
>      >> via environment variable, see below),
>      >>
>      >> S3 dispatch does *NOT* at all pick it up:
>      >> "matrix" (and "array") are even more special here (see below),
>      >> and from Hadley's questions, in hindsight I now see that he's been aware
>      >> of that and I hereby apologize to Hadley for not having thought
>      >> and looked more, when he asked ..
>      >>
>      >> Half an hour ago, I've done another source code commit (svn r77446),
>      >> to "R-devel" only, of course, and the R-devel NEWS now starts as
>      >>
>      >> ------------------------------------------------------------
>      >>
>      >> CHANGES IN R-devel:
>      >>
>      >> USER-VISIBLE CHANGES:
>      >>
>      >> ?  .... intention that the next non-patch release should be 4.0.0.
>      >>
>      >> ? R now builds by default against a PCRE2 library ........
>      >> ...................
>      >> ...................
>      >>
>      >> ? For now only active when environment variable
>      >> _R_CLASS_MATRIX_ARRAY_ is set to non-empty, but planned to be the
>      >> new unconditional behavior when R 4.0.0 is released:
>      >>
>      >> Newly, matrix objects also inherit from class "array", namely,
>      >> e.g., class(diag(1)) is c("matrix", "array") which invalidates
>      >> code (wrongly) assuming that length(class(obj)) == 1, a wrong
>      >> assumption that is less frequently fulfilled now.  (Currently
>      >> only after setting _R_CLASS_MATRIX_ARRAY_ to non-empty.)
>      >>
>      >> S3 methods for "array", i.e., <someFun>.array(), are now also
>      >> dispatched for matrix objects.
>      >>
>      >> ------------------------------------------------------------
>      >> (where only the very last 1.5 lines paragraph is new.)
>      >>
>      >> Note the following
>      >> (if you use a version of R-devel, with svn rev >= 77446; which
>      >> you may get as a binary for Windows in about one day; everyone
>      >> else needs to compile for the sources .. or wait a bit, maybe
>      >> also not much longer than one day, for a docker image) :
>      >>
>      >>
>      >>> Sys.unsetenv("_R_CLASS_MATRIX_ARRAY_") # ==> current R behavior
>      >>> class(m <- diag(1))
>      >> [1] "matrix"
>      >>> Sys.setenv("_R_CLASS_MATRIX_ARRAY_" = "BOOH !") # ==> future R behavior
>      >>> class(m)
>      >> [1] "matrix" "array"
>      >>>
>      >>> foo <- function(x) UseMethod("foo")
>      >>> foo.array <- function(x) "made in foo.array()"
>      >>> foo(m)
>      >> [1] "made in foo.array()"
>      >>> Sys.unsetenv("_R_CLASS_MATRIX_ARRAY_")# ==> current R behavior
>      >>> foo(m)
>      >> Error in UseMethod("foo") :
>      >> no applicable method for 'foo' applied to an object of class "c('matrix', 'double', 'numeric')"
>      >>
>      >>> Sys.setenv("_R_CLASS_MATRIX_ARRAY_" = TRUE) # ==> future R behavior
>      >>> foo(m)
>      >> [1] "made in foo.array()"
>      >>> foo.A <- foo.array ; rm(foo.array)
>      >>> foo(m)
>      >> Error in UseMethod("foo") :
>      >> no applicable method for 'foo' applied to an object of class "c('matrix', 'array', 'double', 'numeric')"
>      >>>
>      >>
>      >> So, with my commit 77446, the  _R_CLASS_MATRIX_ARRAY_
>      >> environment variable also changes the
>      >>
>      >> "S3 dispatch determining class"
>      >>
>      >> mentioned as 'class' in the error message (of the two cases, old
>      >> and new) above,  which in R <= 3.6.x for a numeric matrix is
>      >>
>      >> c('matrix', 'double', 'numeric')
>      >>
>      >> and from R 4.0.0 on  will be
>      >>
>      >> c('matrix', 'array', 'double', 'numeric')
>      >>
>      >> Note that this is *not* (in R <= 3.6.x, nor very probably in R 4.0.0)
>      >> the same as  R's  class().
>      >> Hadley calls this long class vector the  'implicit class' -- which
>      >> is a good term but somewhat conflicting with R's (i.e. R-core's)
>      >> "definition" used in the  ?class  help page (for ca. 11 years).
>      >>
>      >> R's internal C code has a nice function class R_data_class2()
>      >> which computes this 'S3-dispatch-class' character (vector) for
>      >> any R object, and R_data_class2() is indeed called from (the
>      >> underlying C function of)  R's UseMethod().
>      >>
>      >> Using the above fact of an error message,
>      >> I wrote a nice (quite well tested) function  my.class2()  which
>      >> returns this S3_dispatch_class() also in current versions of R:
>      >>
>      >> my.class2 <- function(x) { # use a fn name not used by any sane ..
>      >> foo.7.3.343 <- function(x) UseMethod("foo.7.3.343")
>      >> msg <- tryCatch(foo.7.3.343(x), error=function(e) e$message)
>      >> clm <- sub('"$', '', sub(".* of class \"", '', msg))
>      >> if(is.language(x) || is.function(x))
>      >> clm
>      >> else {
>      >> cl <- str2lang(clm)
>      >> if(is.symbol(cl)) as.character(cl) else eval(cl)
>      >> }
>      >> }
>      >>
>      >> ## str2lang() needs R >= 3.6.0:
>      >> if(getRversion() < "3.6.0") ## substitute for str2lang(), good enough here:
>      >> str2lang <- function(s) parse(text = s, keep.source=FALSE)[[1]]
>      >>
>      >>
>      >> Now you can look at such things yourself:
>      >>
>      >> ## --------------------- the "interesting" cases : ---
>      >> ## integer and double
>      >> my.class2( pi) 	# == c("double",  "numeric")
>      >> my.class2(1:2) 	# == c("integer", "numeric")
>      >> ## matrix and array [also combined with int / double ] :
>      >> my.class2(matrix(1L, 2,3))   	# == c(matrixCL, "integer", "numeric")  <<<
>      >> my.class2(matrix(pi, 2,3))   	# == c(matrixCL,  "double", "numeric")  <<<
>      >> my.class2(array("A", 2:3))   	# == c(matrixCL,  "character")          <<<
>      >> my.class2(array(1:24, 2:4))  	# == c("array",  "integer", "numeric")
>      >> my.class2(array( pi , 2:4))  	# == c("array",   "double", "numeric")
>      >> my.class2(array(TRUE, 2:4))  	# == c("array", "logical")
>      >> my.class2(array(letters, 2:4))	# == c("array", "character")
>      >> my.class2(array(1:24 + 1i, 2))	# == c("array", "complex")
>      >>
>      >> ## other cases
>      >> my.class2(NA) 	# == class(NA) : "logical"
>      >> my.class2("A") 	# == class("B"): "character"
>      >> my.class2(as.raw(0:2)) 	# == "raw"
>      >> my.class2(1 + 2i) 	# == "complex"
>      >> my.class2(USJudgeRatings)#== "data.frame"
>      >> my.class2(class) 	# == "function" # also for a primitive
>      >> my.class2(globalenv()) 	# == "environment"
>      >> my.class2(quote(sin(x)))# == "call"
>      >> my.class2(quote(sin) )  # == "name"
>      >> my.class2(quote({}))	# == class(*) == "{"
>      >> my.class2(quote((.)))	# == class(*) == "("
>      >>
>      >> -----------------------------------------------------
>      >>
>      >> note that of course, the lines marked "<<<" above, contain
>      >> 'matrixCL'  which is "matrix" in "old" (i.e. current) R,
>      >> and is c("matrix", "array") in "new" (i.e. future) R.
>      >>
>      >> Last but not least: It's quite trivial (only few words need to
>      >> be added to the sources; more to the documentation)  to add an R
>      >> function to base R which provides the same as my.class2() above,
>      >> (but much more efficiently, not via catching error messages !!),
>      >> and my current proposal for that function's name is  .class2()
>      >> {it should start with a dot ("."), as it's not for the simple
>      >> minded average useR ... and you know how I'm happy with
>      >> function names that do not need one single [Shift] key ...}
>      >>
>      >> The current plan contains
>      >>
>      >> 1)  Notify CRAN package maintainers (ca 140) whose packages no
>      >> longer pass R CMD check  when the feature is turned on
>      >> (via setting the environment variable) in R-devel.
>      >>
>      >> 2a) (Some) CRAN team members set _R_CLASS_MATRIX_ARRAY_ (to non-empty),
>      >> as part of the incoming checks, at least for all new CRAN submissions
>      >>
>      >> 2b) set the  _R_CLASS_MATRIX_ARRAY_ (to non-empty), as part of
>      >> ' R CMD check --as-cran <pkg>'
>      >>
>      >> 3)  Before the end of 2019, change the R sources (for R-devel)
>      >> such that it behaves as it behaves currently when the environment
>      >> variable is set *AND* abolish this environment variable from
>      >> the sources.  {read on to learn *why*}
>      >>
>      >> Consequently (to 3), R 4.0.0 will behave as indicated, unconditionally.
>      >>
>      >> Note that (as I've shown above in the first example set) this is
>      >> set up in such a manner that you can change the environment
>      >> variable during a *running* R session, and observe the effect immediately.
>      >> This however lead to some slow down of quite a bit of the R
>      >> code, because actually the environment variable has to be
>      >> checked quite often (easily dozens of times for simple R calls).
>      >>
>      >> For that reason, we want to do "3)" as quickly as possible.
>      >>
>      >> Please do not hesitate to ask or comment
>      >> -- here, not on Twitter, please --  noting that I'll be
>      >> basically offline for an extended weekend within 24h, now.
>      >>
>      >> I hope this will eventually to lead to clean up and clarity in
>      >> R, and hence should be worth the pain of broken
>      >> back-compatibility and having to adapt your (almost always only
>      >> sub-optimally written ;-)) R code,
>      >> see also my Blog   https://urldefense.proofpoint.com/v2/url?u=http-3A__bit.ly_R-5Fblog-5Fclass-5Fthink-5F2x&d=DwIDaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=xAGXmo1FhJxT-qBfj-McDEn3sqWhqJHNV-IPpN7g6oA&s=yUUwdjl5LE90V0tLTM3FZYZ0zHf8coHo49Vt95O7IwQ&e=
>      >>
>      >> Martin Maechler
>      >> ETH Zurich and R Core team
>      >>
> 
>      > --
>      > Herv? Pag?s
> 
>      > Program in Computational Biology
>      > Division of Public Health Sciences
>      > Fred Hutchinson Cancer Research Center
>      > 1100 Fairview Ave. N, M1-B514
>      > P.O. Box 19024
>      > Seattle, WA 98109-1024
> 
>      > E-mail: hpages at fredhutch.org
>      > Phone:  (206) 667-5791
>      > Fax:    (206) 667-1319
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From kmbe||56 @end|ng |rom gm@||@com  Wed Jan 29 20:25:53 2020
From: kmbe||56 @end|ng |rom gm@||@com (Kenny Bell)
Date: Thu, 30 Jan 2020 08:25:53 +1300
Subject: [Rd] Model object, when generated in a function,
 saves entire environment when saved
In-Reply-To: <CAPekMCnuVYeFTon_fCZerX6nOM18Fb_N3ZZOVSmgoyAr1hwXhw@mail.gmail.com>
References: <CALOjXYQq6bCW9V3vw7E3up05AOy54_V5YdHMEVsNCcdL-VB=1w@mail.gmail.com>
 <CAF8bMcZgVBpjU+job=wQ=nwJzGzbKZqhceHL5XOq=OW2OvLw6w@mail.gmail.com>
 <CAF8bMcYFWa6KJbTGLid3izHPP3RBEOw4h04TQJAT=xMLMxLCXQ@mail.gmail.com>
 <CAPekMCnuVYeFTon_fCZerX6nOM18Fb_N3ZZOVSmgoyAr1hwXhw@mail.gmail.com>
Message-ID: <CAPekMC=tv6M3FyEpKS7b2+MKFrB0qNB3iRK6MQ7WPW8rU=cUOg@mail.gmail.com>

Reviving an old thread. I haven't noticed this be a problem for a while
when saving RDS's which is great. However, I noticed the problem again when
saving `qs` files (https://github.com/traversc/qs) which is an RDS
replacement with a fast serialization / compression system.

I'd like to get an idea of what change was made within R to address this
issue for `saveRDS`. My thought is that this will help the author of the
`qs` package do something similar. I have had a browse through the release
notes for the last few years (Ctrl-F-ing "environment") and couldn't see it.

Many thanks for any help and best wishes to all.

The following code uses R 3.6.2 and requires you to run
install.packages("qs") first:

save_size_qs <- function (object) {
  tf <- tempfile(fileext = ".qs")
  on.exit(unlink(tf))
  qs::qsave(object, file = tf)
  file.size(tf)
}

save_size_rds <- function (object) {
  tf <- tempfile(fileext = ".rds")
  on.exit(unlink(tf))
  saveRDS(object, file = tf)
  file.size(tf)
}

normal_lm <- function(){
  junk <- 1:1e+08
  lm(Sepal.Length ~ Sepal.Width, data = iris)
}

normal_ggplot <- function(){
  junk <- 1:1e+08
  ggplot2::ggplot()
}

clean_lm <- function () {
  junk <- 1:1e+08
  # Run the lm in its own environment
  env <- new.env(parent = globalenv())
  env$subset <- subset
  with(env, lm(Sepal.Length ~ Sepal.Width, data = iris))
}

# The qs save size includes the junk but the rds does not
save_size_qs(normal_lm())
#> [1] 848396
save_size_rds(normal_lm())
#> [1] 4163
save_size_qs(normal_ggplot())
#> [1] 857446
save_size_rds(normal_ggplot())
#> [1] 12895


# Both exclude the junk when separating the lm into its own environment
save_size_qs(clean_lm())
#> [1] 6154
save_size_rds(clean_lm())
#> [1] 4255


On Thu, Jul 28, 2016 at 7:31 AM Kenny Bell <kmbell56 at gmail.com> wrote:

> Thanks so much for all this.
>
> The first solution is what I'm going with as I want the terms object to
> come along so that predict still works.
>
> On Wed, Jul 27, 2016 at 12:28 PM, William Dunlap via R-devel <
> r-devel at r-project.org> wrote:
>
>> Another solution is to only save the parts of the model object that
>> interest you.  As long as they don't include the formula (which is
>> what drags along the environment it was created in), you will
>> save space.  E.g.,
>>
>> tfun2 <- function(subset) {
>>    junk <- 1:1e6
>>    list(subset=subset, lm(Sepal.Length ~ Sepal.Width, data=iris,
>> subset=subset)$coef)
>> }
>>
>> saveSize(tfun2(1:4))
>> #[1] 152
>>
>>
>>
>> Bill Dunlap
>> TIBCO Software
>> wdunlap tibco.com
>>
>> On Wed, Jul 27, 2016 at 11:19 AM, William Dunlap <wdunlap at tibco.com>
>> wrote:
>>
>> > One way around this problem is to make a new environment whose
>> > parent environment is .GlobalEnv and which contains only what the
>> > the call to lm() requires and to compute lm() in that environment.
>>  E.g.,
>> >
>> > tfun1 <- function (subset)
>> > {
>> >     junk <- 1:1e+06
>> >     env <- new.env(parent = globalenv())
>> >     env$subset <- subset
>> >     with(env, lm(Sepal.Length ~ Sepal.Width, data = iris, subset =
>> subset))
>> > }
>> > Then we get
>> >    > saveSize(tfun1(1:4)) # see below for def. of saveSize
>> >    [1] 910
>> > instead of the 2129743 bytes in the save file when using the naive
>> method.
>> >
>> > saveSize <- function (object) {
>> >     tf <- tempfile(fileext = ".RData")
>> >     on.exit(unlink(tf))
>> >     save(object, file = tf)
>> >     file.size(tf)
>> > }
>> >
>> >
>> >
>> > Bill Dunlap
>> > TIBCO Software
>> > wdunlap tibco.com
>> >
>> > On Wed, Jul 27, 2016 at 10:48 AM, Kenny Bell <kmb56 at berkeley.edu>
>> wrote:
>> >
>> >> In the below, I generate a model from an environment that isn't
>> >> .GlobalEnv with a large object that is unrelated to the model
>> >> generation. It seems to save the irrelevant object unnecessarily. In
>> >> my actual use case, I am running and saving many models in a loop that
>> >> each use a single large data.frame (that gets collapsed into a small
>> >> data.frame for estimation), so removing it isn't an option.
>> >>
>> >> In the case where the model exists in .GlobalEnv, everything is
>> >> peachy. So replicating whatever happens when saving the model that was
>> >> generated in .GlobalEnv at the return() stage of the function call
>> >> would fix this problem.
>> >>
>> >> I was referred to this list from r-bugs. First time r-devel poster.
>> >>
>> >> Hope this helps,
>> >>
>> >> Kendon
>> >>
>> >> ```
>> >> tmp_fun <- function(x){
>> >>   iris_big <- lapply(1:10000, function(x) iris)
>> >>   lm(Sepal.Length ~ Sepal.Width, data = iris)
>> >> }
>> >>
>> >> out <- tmp_fun(1)
>> >> object.size(out)
>> >> # 48008
>> >> save(out, file = "tmp.RData", compress = FALSE)
>> >> file.size("tmp.RData")
>> >> # 57196752 - way too big
>> >>
>> >> # Works fine when in .GlobalEnv
>> >> iris_big <- lapply(1:10000, function(x) iris)
>> >> out <- lm(Sepal.Length ~ Sepal.Width, data = iris)
>> >>
>> >> object.size(out)
>> >> # 48008
>> >> save(out, file = "tmp.RData", compress = FALSE)
>> >> file.size("tmp.RData")
>> >> # 16641 - good size.
>> >> ```
>> >>
>> >>         [[alternative HTML version deleted]]
>> >>
>> >> ______________________________________________
>> >> R-devel at r-project.org mailing list
>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> >>
>> >
>> >
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jan 29 21:24:22 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 29 Jan 2020 15:24:22 -0500
Subject: [Rd] Model object, when generated in a function,
 saves entire environment when saved
In-Reply-To: <CAPekMC=tv6M3FyEpKS7b2+MKFrB0qNB3iRK6MQ7WPW8rU=cUOg@mail.gmail.com>
References: <CALOjXYQq6bCW9V3vw7E3up05AOy54_V5YdHMEVsNCcdL-VB=1w@mail.gmail.com>
 <CAF8bMcZgVBpjU+job=wQ=nwJzGzbKZqhceHL5XOq=OW2OvLw6w@mail.gmail.com>
 <CAF8bMcYFWa6KJbTGLid3izHPP3RBEOw4h04TQJAT=xMLMxLCXQ@mail.gmail.com>
 <CAPekMCnuVYeFTon_fCZerX6nOM18Fb_N3ZZOVSmgoyAr1hwXhw@mail.gmail.com>
 <CAPekMC=tv6M3FyEpKS7b2+MKFrB0qNB3iRK6MQ7WPW8rU=cUOg@mail.gmail.com>
Message-ID: <7ad32631-f970-c4a7-5d01-ab6ed0dea8b0@gmail.com>

On 29/01/2020 2:25 p.m., Kenny Bell wrote:
> Reviving an old thread. I haven't noticed this be a problem for a while
> when saving RDS's which is great. However, I noticed the problem again when
> saving `qs` files (https://github.com/traversc/qs) which is an RDS
> replacement with a fast serialization / compression system.
> 
> I'd like to get an idea of what change was made within R to address this
> issue for `saveRDS`. My thought is that this will help the author of the
> `qs` package do something similar. I have had a browse through the release
> notes for the last few years (Ctrl-F-ing "environment") and couldn't see it.

The vector 1:1e+08 is stored very compactly in recent R versions (the 
start and end plus a marker that it's a sequence), and it appears 
saveRDS takes advantage of that while qs::qsave doesn't.  That's not a 
very useful test, because environments typically aren't filled with long 
sequence vectors.  If you replace the line

   junk <- 1:1e+08

with

   junk <- runif(1e+08)

you'll see drastically different results:

 > save_size_qs(normal_lm())
[1] 417953609
 > #> [1] 848396
 > save_size_rds(normal_lm())
[1] 532614827
 > #> [1] 4163
 > save_size_qs(normal_ggplot())
[1] 417967987

 > #> [1] 857446
 > save_size_rds(normal_ggplot())
[1] 532624477
 > #> [1] 12895

Duncan Murdoch


From h@rvey13131 @end|ng |rom gm@||@com  Thu Jan 30 22:53:47 2020
From: h@rvey13131 @end|ng |rom gm@||@com (Harvey Smith)
Date: Thu, 30 Jan 2020 16:53:47 -0500
Subject: [Rd] Model object, when generated in a function,
 saves entire environment when saved
In-Reply-To: <7ad32631-f970-c4a7-5d01-ab6ed0dea8b0@gmail.com>
References: <CALOjXYQq6bCW9V3vw7E3up05AOy54_V5YdHMEVsNCcdL-VB=1w@mail.gmail.com>
 <CAF8bMcZgVBpjU+job=wQ=nwJzGzbKZqhceHL5XOq=OW2OvLw6w@mail.gmail.com>
 <CAF8bMcYFWa6KJbTGLid3izHPP3RBEOw4h04TQJAT=xMLMxLCXQ@mail.gmail.com>
 <CAPekMCnuVYeFTon_fCZerX6nOM18Fb_N3ZZOVSmgoyAr1hwXhw@mail.gmail.com>
 <CAPekMC=tv6M3FyEpKS7b2+MKFrB0qNB3iRK6MQ7WPW8rU=cUOg@mail.gmail.com>
 <7ad32631-f970-c4a7-5d01-ab6ed0dea8b0@gmail.com>
Message-ID: <CACVELJ3brxSaDndeDWbmaZvfnGZ=O2NFwxCsdiN6vE4Yn9-NKA@mail.gmail.com>

Depending on if you need the data in the referenced environments later, you
could fit the model normally and use the refhook argument in
saveRDS/readRDS to replace references to environments in the model with a
dummy value.

normal_lm <- function(){

  junk <- runif(1e+08)

  lm(Sepal.Length ~ Sepal.Width, data = iris)

}

object = normal_lm()

tf <- tempfile(fileext = ".rds")

saveRDS(object, file = tf, refhook = function(...) {""})

object2 = readRDS(file = tf, refhook = function(...) { .GlobalEnv })

file.size(tf)






On Wed, Jan 29, 2020 at 3:24 PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 29/01/2020 2:25 p.m., Kenny Bell wrote:
> > Reviving an old thread. I haven't noticed this be a problem for a while
> > when saving RDS's which is great. However, I noticed the problem again
> when
> > saving `qs` files (https://github.com/traversc/qs) which is an RDS
> > replacement with a fast serialization / compression system.
> >
> > I'd like to get an idea of what change was made within R to address this
> > issue for `saveRDS`. My thought is that this will help the author of the
> > `qs` package do something similar. I have had a browse through the
> release
> > notes for the last few years (Ctrl-F-ing "environment") and couldn't see
> it.
>
> The vector 1:1e+08 is stored very compactly in recent R versions (the
> start and end plus a marker that it's a sequence), and it appears
> saveRDS takes advantage of that while qs::qsave doesn't.  That's not a
> very useful test, because environments typically aren't filled with long
> sequence vectors.  If you replace the line
>
>    junk <- 1:1e+08
>
> with
>
>    junk <- runif(1e+08)
>
> you'll see drastically different results:
>
>  > save_size_qs(normal_lm())
> [1] 417953609
>  > #> [1] 848396
>  > save_size_rds(normal_lm())
> [1] 532614827
>  > #> [1] 4163
>  > save_size_qs(normal_ggplot())
> [1] 417967987
>
>  > #> [1] 857446
>  > save_size_rds(normal_ggplot())
> [1] 532624477
>  > #> [1] 12895
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


