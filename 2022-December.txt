From henr|k@bengt@@on @end|ng |rom gm@||@com  Mon Dec  5 23:19:09 2022
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Mon, 5 Dec 2022 14:19:09 -0800
Subject: [Rd] 
 R-devel: toLatex() for sessionInfo needs to escape new 'Time
 zone' entry
In-Reply-To: <CAFDcVCSjtrHNOXMm7zDDau7FgyK=Chv1eTDVafj4hi0tRT6b_Q@mail.gmail.com>
References: <CAFDcVCSjtrHNOXMm7zDDau7FgyK=Chv1eTDVafj4hi0tRT6b_Q@mail.gmail.com>
Message-ID: <CAFDcVCS5L81zNDO4QVHDCLxeAaD7xEN9QXbur9gT0M-__ewWWA@mail.gmail.com>

I've moved this to https://bugs.r-project.org/show_bug.cgi?id=18443.

/Henrik

On Wed, Nov 30, 2022 at 2:03 PM Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> BACKGROUND:
>
> In recent versions of R-devel, sessionInfo() has a 'tzone' element, e.g.
>
> > sessionInfo()$tzone
> [1] "America/Los_Angeles"
>
>
> ISSUE:
>
> Some time zones, like the one above, has an underscore.  This
> underscore is *not* escaped by utils:::toLatex.sessionInfo, e.g.
>
> $ TZ="America/Los_Angeles" Rscript --vanilla -e "toLatex(sessionInfo())"
> \begin{itemize}\raggedright
>   \item R Under development (unstable) (2022-11-30 r83391),
> \verb|x86_64-pc-linux-gnu|
>   \item Locale: \verb|LC_CTYPE=en_US.UTF-8|, \verb|LC_NUMERIC=C|,
> \verb|LC_TIME=en_US.UTF-8|, \verb|LC_COLLATE=en_US.UTF-8|,
> \verb|LC_MONETARY=en_US.UTF-8|, \verb|LC_MESSAGES=en_US.UTF-8|,
> \verb|LC_PAPER=en_US.UTF-8|, \verb|LC_NAME=C|, \verb|LC_ADDRESS=C|,
> \verb|LC_TELEPHONE=C|, \verb|LC_MEASUREMENT=en_US.UTF-8|,
> \verb|LC_IDENTIFICATION=C|
>   \item Time zone America/Los_Angeles
>   \item Running under: \verb|Ubuntu 20.04.5 LTS|
>   \item Matrix products: default
>   \item BLAS:   \verb|/home/hb/software/R-devel/trunk/lib/R/lib/libRblas.so|
>   \item LAPACK: \verb|/home/hb/software/R-devel/trunk/lib/R/lib/libRlapack.so|
>   \item Base packages: base, datasets, graphics, grDevices, methods,
>     stats, utils
>   \item Loaded via a namespace (and not attached): compiler~4.3.0
> \end{itemize}
>
> This causes LaTeX-based vignettes using toLatex(sessionInfo()) to fail
> their LaTeX compilation with an error, e.g.
>
> Error: processing vignette 'mypkg.Rnw' failed with diagnostics:
> Running 'texi2dvi' on 'mypkg.tex' failed.
> LaTeX errors:
> ! Missing $ inserted.
> <inserted text>
>                 $
> l.684   \item Time zone America/Los_
>                                     Angeles
> ! LaTeX Error: Command \item invalid in math mode.
>
>
> SUGGESTION:
>
> To fix this, either escape any underscores, e.g.
>
>   \item Time zone America/Los\_Angeles
>
> or use \verb as done elsewhere:
>
>   \item Time zone \verb|America/Los_Angeles|
>
> /Henrik


From @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org  Fri Dec  9 01:12:34 2022
From: @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org (Spencer Graves)
Date: Thu, 8 Dec 2022 18:12:34 -0600
Subject: [Rd] unlist preserve common class?
Message-ID: <1de177a0-7373-d878-7edd-411fd53aa2fc@effectivedefense.org>

Consider:


 > str(unlist(list(Sys.Date())))
  num 19334


 > str(unlist(list(factor('a'))))
  Factor w/ 1 level "a": 1


	  I naively expected "str(unlist(list(Sys.Date())))" to return an 
object of class 'Date'.  After some thought, I felt a need to ask this 
list if they think that the core R language might benefit from modifying 
the language so "str(unlist(list(Sys.Date())))" was of class 'Date', at 
least as an option.


	  Comments?
	  Thanks,
	  Spencer Graves


 > sessionInfo()
R version 4.2.2 (2022-10-31)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 11.7.1

Matrix products: default
LAPACK: 
/Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.2.2 tools_4.2.2


From g@bembecker @end|ng |rom gm@||@com  Fri Dec  9 03:20:26 2022
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 8 Dec 2022 18:20:26 -0800
Subject: [Rd] unlist preserve common class?
In-Reply-To: <1de177a0-7373-d878-7edd-411fd53aa2fc@effectivedefense.org>
References: <1de177a0-7373-d878-7edd-411fd53aa2fc@effectivedefense.org>
Message-ID: <CAD4oTHFOkAGT1APipWNSpb_57vc6LCAeZbOK4kBydiCiem-ZZg@mail.gmail.com>

Hi Spencer,

My 2c.

According to the docs, factors are special-cased. Other S3 'classes' could
be special-cased, such as Date in your example, I suppose, but it is not
clear how what you're describing could be implemented for the general case.

Suppose I define an S3 "class" called my_awesome_class, and have a list of
3 of them in it, and no other guarantees are provided. What should, or even
could, R do in the case of unlist(list_of_awesomes)?

There is no guarantee that I as an S3 developer have provided a c method
for my class such that we could say the unlist call above is equivalent
(roughly) to do.call(c, list_of_awesomes), nor that I provided any other
particular "mash this set of my_awesome_class objects into one". Nor is it
even guaranteed that the concept of combining my_awesome_class objects is
even coherent, or would produce a new my_awesome_class object when
performed if it is.

That said, your example was of length one, we could special case (the
default method of) unlist so that for x *not a list*, we're guaranteed that

identical(unlist(list(x)), x) == TRUE

This would simplify certain code, such as the one from your motivating
example, but at the cost of making the output of unlist across inputs less
consistent and less easy to reason about and predict. In other words the
answer to the question "what class is unlist(list_of_awesomes)? " would
become "it depends on how many of them are in the list"... That wouldn't be
a good thing on balance, imho.

Best,
~G

On Thu, Dec 8, 2022 at 5:44 PM Spencer Graves <
spencer.graves at effectivedefense.org> wrote:

> Consider:
>
>
>  > str(unlist(list(Sys.Date())))
>   num 19334
>
>
>  > str(unlist(list(factor('a'))))
>   Factor w/ 1 level "a": 1
>
>
>           I naively expected "str(unlist(list(Sys.Date())))" to return an
> object of class 'Date'.  After some thought, I felt a need to ask this
> list if they think that the core R language might benefit from modifying
> the language so "str(unlist(list(Sys.Date())))" was of class 'Date', at
> least as an option.
>
>
>           Comments?
>           Thanks,
>           Spencer Graves
>
>
>  > sessionInfo()
> R version 4.2.2 (2022-10-31)
> Platform: x86_64-apple-darwin17.0 (64-bit)
> Running under: macOS Big Sur 11.7.1
>
> Matrix products: default
> LAPACK:
> /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
>
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.2.2 tools_4.2.2
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org  Fri Dec  9 05:21:07 2022
From: @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org (Spencer Graves)
Date: Thu, 8 Dec 2022 22:21:07 -0600
Subject: [Rd] unlist preserve common class?
In-Reply-To: <CAD4oTHFOkAGT1APipWNSpb_57vc6LCAeZbOK4kBydiCiem-ZZg@mail.gmail.com>
References: <1de177a0-7373-d878-7edd-411fd53aa2fc@effectivedefense.org>
 <CAD4oTHFOkAGT1APipWNSpb_57vc6LCAeZbOK4kBydiCiem-ZZg@mail.gmail.com>
Message-ID: <05625875-f069-f5ce-008d-84e8eec2b5ea@effectivedefense.org>

Hi, Gabriel:


On 12/8/22 8:20 PM, Gabriel Becker wrote:
> Hi Spencer,
> 
> My 2c.
> 
> According to the docs, factors are special-cased. Other S3 'classes' 
> could be special-cased, such as Date in your example, I suppose, but it 
> is not clear how what you're describing could be implemented for the 
> general case.
> 
> Suppose I define an S3 "class" called my_awesome_class, and have a list 
> of 3 of them in it, and no other guarantees are provided. What should, 
> or even could, R do in the case of unlist(list_of_awesomes)?
> 
> There is no guarantee that I as an S3 developer have provided a c method 
> for my class such that we could say the unlist call above is equivalent 
> (roughly) to do.call(c, list_of_awesomes), nor that I provided any other 
> particular "mash this set of my_awesome_class objects into one". Nor is 
> it even guaranteed that the concept of combining my_awesome_classobjects 
> is even coherent, or would produce a new my_awesome_classobject when 
> performed if it is.


	  What about adding another argument to create, e.g.,


unlist(x, recursive = TRUE, use.names = TRUE, attributeFunction=NULL)


	  Then assign the assign the results of the current "unlist(x, ...)" 
to, say, "ux", and follow that by



if(!is.null(attributeFunction))attributes(ux) <- attributeFunction(x)


return(ux)


	  An alternative could be to have a default attributeFunction, that 
computes the attributes of each component of x and keeps only the ones 
that are shared by all components of x.  This would be the same as the 
current behavior for factors IF each component had the same factor 
levels and would drop attributes that are different between components. 
For S4 classes, if the attributes were not ALL identical, then all the 
attributes would be dropped, as with the current behavior.  This should 
not be a problem for S3 generics, because they should always check to 
make sure all the required attributes are available.

> 
> That said, your example was of length one, 


	  My example was of length one to provide a minimal, self-contained 
example.  That was motivated by a more complicated example, which took 
me a couple of hours to understand why it wasn't working as I expected ;-)


	  Thanks for your reply.


	  Spencer Graves


we could special case (the
> default method of) unlist so that for x /not a list/, we're guaranteed that
> 
> identical(unlist(list(x)), x) == TRUE
> 
> This would simplify certain code, such as the one from your motivating 
> example, but at the cost of making the output of unlist across inputs 
> less consistent and less easy to reason about and predict. In other 
> words the answer to the question "what class is 
> unlist(list_of_awesomes)? " would become "it depends on how many of them 
> are in the list"... That wouldn't be a good thing on balance, imho.
> 
> Best,
> ~G
> 
> On Thu, Dec 8, 2022 at 5:44 PM Spencer Graves 
> <spencer.graves at effectivedefense.org 
> <mailto:spencer.graves at effectivedefense.org>> wrote:
> 
>     Consider:
> 
> 
>      ?> str(unlist(list(Sys.Date())))
>      ? num 19334
> 
> 
>      ?> str(unlist(list(factor('a'))))
>      ? Factor w/ 1 level "a": 1
> 
> 
>      ? ? ? ? ? I naively expected "str(unlist(list(Sys.Date())))" to
>     return an
>     object of class 'Date'.? After some thought, I felt a need to ask this
>     list if they think that the core R language might benefit from
>     modifying
>     the language so "str(unlist(list(Sys.Date())))" was of class 'Date', at
>     least as an option.
> 
> 
>      ? ? ? ? ? Comments?
>      ? ? ? ? ? Thanks,
>      ? ? ? ? ? Spencer Graves
> 
> 
>      ?> sessionInfo()
>     R version 4.2.2 (2022-10-31)
>     Platform: x86_64-apple-darwin17.0 (64-bit)
>     Running under: macOS Big Sur 11.7.1
> 
>     Matrix products: default
>     LAPACK:
>     /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
> 
>     locale:
>     [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> 
>     attached base packages:
>     [1] stats? ? ?graphics? grDevices utils? ? ?datasets? methods? ?base
> 
>     loaded via a namespace (and not attached):
>     [1] compiler_4.2.2 tools_4.2.2
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
>


From g@bembecker @end|ng |rom gm@||@com  Fri Dec  9 09:44:16 2022
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Fri, 9 Dec 2022 00:44:16 -0800
Subject: [Rd] unlist preserve common class?
In-Reply-To: <05625875-f069-f5ce-008d-84e8eec2b5ea@effectivedefense.org>
References: <1de177a0-7373-d878-7edd-411fd53aa2fc@effectivedefense.org>
 <CAD4oTHFOkAGT1APipWNSpb_57vc6LCAeZbOK4kBydiCiem-ZZg@mail.gmail.com>
 <05625875-f069-f5ce-008d-84e8eec2b5ea@effectivedefense.org>
Message-ID: <CAD4oTHHK9H-xM9qpiDhJrEUmm=aEGEEBURG2yhc0P7apQYUbCw@mail.gmail.com>

Hi Spencer,

Another, potentially somewhat less disruptive/more general option would be
to add a stop.at.object or stop.at.nonlist (or alternatively list.only)
argument, which would basically translate to "collapse the list structure
to flat, but don't try to combine the leaf elements within the list. You
could then do whatever you wanted to said now-flat list as a second call.

i.e.,

flatlist <- unlist(structured_list, list.only = TRUE)
final_res <- cool_combiner_fun(flatlist)

I had to do something similar years ago when I was implementing xpath for
arbitrary R objects, because you can, e.g., always get x[1] out of x
infinitely many times, so I defined "Stopping functions". The fully general
case would be to do the same here, and accept, e.g., stopping.cond, but
that is probably too complex for unlist and might simply belong as a
completely separate function.

Best,
~G

On Thu, Dec 8, 2022 at 8:21 PM Spencer Graves <
spencer.graves at effectivedefense.org> wrote:

> Hi, Gabriel:
>
>
> On 12/8/22 8:20 PM, Gabriel Becker wrote:
> > Hi Spencer,
> >
> > My 2c.
> >
> > According to the docs, factors are special-cased. Other S3 'classes'
> > could be special-cased, such as Date in your example, I suppose, but it
> > is not clear how what you're describing could be implemented for the
> > general case.
> >
> > Suppose I define an S3 "class" called my_awesome_class, and have a list
> > of 3 of them in it, and no other guarantees are provided. What should,
> > or even could, R do in the case of unlist(list_of_awesomes)?
> >
> > There is no guarantee that I as an S3 developer have provided a c method
> > for my class such that we could say the unlist call above is equivalent
> > (roughly) to do.call(c, list_of_awesomes), nor that I provided any other
> > particular "mash this set of my_awesome_class objects into one". Nor is
> > it even guaranteed that the concept of combining my_awesome_classobjects
> > is even coherent, or would produce a new my_awesome_classobject when
> > performed if it is.
>
>
>           What about adding another argument to create, e.g.,
>
>
> unlist(x, recursive = TRUE, use.names = TRUE, attributeFunction=NULL)
>
>
>           Then assign the assign the results of the current "unlist(x,
> ...)"
> to, say, "ux", and follow that by
>
>
>
> if(!is.null(attributeFunction))attributes(ux) <- attributeFunction(x)
>
>
> return(ux)
>
>
>           An alternative could be to have a default attributeFunction,
> that
> computes the attributes of each component of x and keeps only the ones
> that are shared by all components of x.  This would be the same as the
> current behavior for factors IF each component had the same factor
> levels and would drop attributes that are different between components.
> For S4 classes, if the attributes were not ALL identical, then all the
> attributes would be dropped, as with the current behavior.  This should
> not be a problem for S3 generics, because they should always check to
> make sure all the required attributes are available.
>
> >
> > That said, your example was of length one,
>
>
>           My example was of length one to provide a minimal,
> self-contained
> example.  That was motivated by a more complicated example, which took
> me a couple of hours to understand why it wasn't working as I expected ;-)
>
>
>           Thanks for your reply.
>
>
>           Spencer Graves
>
>
> we could special case (the
> > default method of) unlist so that for x /not a list/, we're guaranteed
> that
> >
> > identical(unlist(list(x)), x) == TRUE
> >
> > This would simplify certain code, such as the one from your motivating
> > example, but at the cost of making the output of unlist across inputs
> > less consistent and less easy to reason about and predict. In other
> > words the answer to the question "what class is
> > unlist(list_of_awesomes)? " would become "it depends on how many of them
> > are in the list"... That wouldn't be a good thing on balance, imho.
> >
> > Best,
> > ~G
> >
> > On Thu, Dec 8, 2022 at 5:44 PM Spencer Graves
> > <spencer.graves at effectivedefense.org
> > <mailto:spencer.graves at effectivedefense.org>> wrote:
> >
> >     Consider:
> >
> >
> >       > str(unlist(list(Sys.Date())))
> >        num 19334
> >
> >
> >       > str(unlist(list(factor('a'))))
> >        Factor w/ 1 level "a": 1
> >
> >
> >                I naively expected "str(unlist(list(Sys.Date())))" to
> >     return an
> >     object of class 'Date'.  After some thought, I felt a need to ask
> this
> >     list if they think that the core R language might benefit from
> >     modifying
> >     the language so "str(unlist(list(Sys.Date())))" was of class 'Date',
> at
> >     least as an option.
> >
> >
> >                Comments?
> >                Thanks,
> >                Spencer Graves
> >
> >
> >       > sessionInfo()
> >     R version 4.2.2 (2022-10-31)
> >     Platform: x86_64-apple-darwin17.0 (64-bit)
> >     Running under: macOS Big Sur 11.7.1
> >
> >     Matrix products: default
> >     LAPACK:
> >
>  /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
> >
> >     locale:
> >     [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> >
> >     attached base packages:
> >     [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> >     loaded via a namespace (and not attached):
> >     [1] compiler_4.2.2 tools_4.2.2
> >
> >     ______________________________________________
> >     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> >     https://stat.ethz.ch/mailman/listinfo/r-devel
> >     <https://stat.ethz.ch/mailman/listinfo/r-devel>
> >
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Dec  9 11:33:31 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 9 Dec 2022 05:33:31 -0500
Subject: [Rd] unlist preserve common class?
In-Reply-To: <CAD4oTHFOkAGT1APipWNSpb_57vc6LCAeZbOK4kBydiCiem-ZZg@mail.gmail.com>
References: <1de177a0-7373-d878-7edd-411fd53aa2fc@effectivedefense.org>
 <CAD4oTHFOkAGT1APipWNSpb_57vc6LCAeZbOK4kBydiCiem-ZZg@mail.gmail.com>
Message-ID: <0ea6747f-ff8d-fb54-a259-44378180b096@gmail.com>

On 08/12/2022 9:20 p.m., Gabriel Becker wrote:
> Hi Spencer,
> 
> My 2c.
> 
> According to the docs, factors are special-cased. Other S3 'classes' could
> be special-cased, such as Date in your example, I suppose, but it is not
> clear how what you're describing could be implemented for the general case.
> 
> Suppose I define an S3 "class" called my_awesome_class, and have a list of
> 3 of them in it, and no other guarantees are provided. What should, or even
> could, R do in the case of unlist(list_of_awesomes)?
> 
> There is no guarantee that I as an S3 developer have provided a c method
> for my class such that we could say the unlist call above is equivalent
> (roughly) to do.call(c, list_of_awesomes), nor that I provided any other
> particular "mash this set of my_awesome_class objects into one". Nor is it
> even guaranteed that the concept of combining my_awesome_class objects is
> even coherent, or would produce a new my_awesome_class object when
> performed if it is.

For the non-recursive case of unlist, do.call(c, list_of_awesomes) is a 
pretty reasonable expectation.  Wouldn't the simplest change be to make 
no change to unlist, but suggest this alternative in the documentation?

Duncan Murdoch

> 
> That said, your example was of length one, we could special case (the
> default method of) unlist so that for x *not a list*, we're guaranteed that
> 
> identical(unlist(list(x)), x) == TRUE
> 
> This would simplify certain code, such as the one from your motivating
> example, but at the cost of making the output of unlist across inputs less
> consistent and less easy to reason about and predict. In other words the
> answer to the question "what class is unlist(list_of_awesomes)? " would
> become "it depends on how many of them are in the list"... That wouldn't be
> a good thing on balance, imho.
> 
> Best,
> ~G
> 
> On Thu, Dec 8, 2022 at 5:44 PM Spencer Graves <
> spencer.graves at effectivedefense.org> wrote:
> 
>> Consider:
>>
>>
>>   > str(unlist(list(Sys.Date())))
>>    num 19334
>>
>>
>>   > str(unlist(list(factor('a'))))
>>    Factor w/ 1 level "a": 1
>>
>>
>>            I naively expected "str(unlist(list(Sys.Date())))" to return an
>> object of class 'Date'.  After some thought, I felt a need to ask this
>> list if they think that the core R language might benefit from modifying
>> the language so "str(unlist(list(Sys.Date())))" was of class 'Date', at
>> least as an option.
>>
>>
>>            Comments?
>>            Thanks,
>>            Spencer Graves
>>
>>
>>   > sessionInfo()
>> R version 4.2.2 (2022-10-31)
>> Platform: x86_64-apple-darwin17.0 (64-bit)
>> Running under: macOS Big Sur 11.7.1
>>
>> Matrix products: default
>> LAPACK:
>> /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
>>
>> locale:
>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_4.2.2 tools_4.2.2
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Fri Dec  9 11:57:33 2022
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Fri, 9 Dec 2022 04:57:33 -0600
Subject: [Rd] unlist preserve common class?
In-Reply-To: <0ea6747f-ff8d-fb54-a259-44378180b096@gmail.com>
References: <1de177a0-7373-d878-7edd-411fd53aa2fc@effectivedefense.org>
 <CAD4oTHFOkAGT1APipWNSpb_57vc6LCAeZbOK4kBydiCiem-ZZg@mail.gmail.com>
 <0ea6747f-ff8d-fb54-a259-44378180b096@gmail.com>
Message-ID: <05f39c78-d1f2-90f0-fe67-b656b529bec0@prodsyse.com>



On 12/9/22 4:33 AM, Duncan Murdoch wrote:
> On 08/12/2022 9:20 p.m., Gabriel Becker wrote:
>> Hi Spencer,
>>
>> My 2c.
>>
>> According to the docs, factors are special-cased. Other S3 'classes' 
>> could
>> be special-cased, such as Date in your example, I suppose, but it is not
>> clear how what you're describing could be implemented for the general 
>> case.
>>
>> Suppose I define an S3 "class" called my_awesome_class, and have a 
>> list of
>> 3 of them in it, and no other guarantees are provided. What should, or 
>> even
>> could, R do in the case of unlist(list_of_awesomes)?
>>
>> There is no guarantee that I as an S3 developer have provided a c method
>> for my class such that we could say the unlist call above is equivalent
>> (roughly) to do.call(c, list_of_awesomes), nor that I provided any other
>> particular "mash this set of my_awesome_class objects into one". Nor 
>> is it
>> even guaranteed that the concept of combining my_awesome_class objects is
>> even coherent, or would produce a new my_awesome_class object when
>> performed if it is.
> 
> For the non-recursive case of unlist, do.call(c, list_of_awesomes) is a 
> pretty reasonable expectation.? Wouldn't the simplest change be to make 
> no change to unlist, but suggest this alternative in the documentation?
> 
> Duncan Murdoch


Hi, Duncan and Gabrien:


	  That's ultimately what I did.  My real problem was more like:


(todaytomorrow <- list(d0=Sys.Date()+0:1, d1=Sys.Date()+2:3))

$d0
[1] "2022-12-09" "2022-12-10"

$d1
[1] "2022-12-11" "2022-12-12"


	  I wanted the minimum of the maxima.  So I naively did:


(tt2 <- sapply(todaytomorrow, min))


    d0    d1
19335 19337


	  So I next tried:


 > (tt3 <- as.Date(tt2))

Error in as.Date.numeric(tt2) : 'origin' must be supplied


	  I believe that the default "origin" for "as.Date.numeric" should be 
"1970-01-01".  I implemented that several years ago in Ecfun:


 > (tt4 <- Ecfun::as.Date1970(tt2))

           d0           d1
"2022-12-09" "2022-12-11"


	  However, before getting here, I first misdiagnosed the problem with 
"tt2", believing that "min" not "sapply" was stripping the attributes.


	  After fixing that problem, I came to Duncan's solution:


 > (tt4 <- lapply(todaytomorrow, min))

$d0
[1] "2022-12-09"

$d1
[1] "2022-12-11"


(maximin <- do.call('max', tt4))
	
[1] "2022-12-11"


	  Conclusion:  It would help to document Duncan's solution using 
"do.call" and avoiding "unlist" and "sapply".  I brought it to the 
attention of this group, because I wondered if you might want to change 
the language -- or at least the documentation, as Duncan suggested.


	  Thanks,
	  Spencer Graves
> 
>>
>> That said, your example was of length one, we could special case (the
>> default method of) unlist so that for x *not a list*, we're guaranteed 
>> that
>>
>> identical(unlist(list(x)), x) == TRUE
>>
>> This would simplify certain code, such as the one from your motivating
>> example, but at the cost of making the output of unlist across inputs 
>> less
>> consistent and less easy to reason about and predict. In other words the
>> answer to the question "what class is unlist(list_of_awesomes)? " would
>> become "it depends on how many of them are in the list"... That 
>> wouldn't be
>> a good thing on balance, imho.
>>
>> Best,
>> ~G
>>
>> On Thu, Dec 8, 2022 at 5:44 PM Spencer Graves <
>> spencer.graves at effectivedefense.org> wrote:
>>
>>> Consider:
>>>
>>>
>>> ? > str(unlist(list(Sys.Date())))
>>> ?? num 19334
>>>
>>>
>>> ? > str(unlist(list(factor('a'))))
>>> ?? Factor w/ 1 level "a": 1
>>>
>>>
>>> ?????????? I naively expected "str(unlist(list(Sys.Date())))" to 
>>> return an
>>> object of class 'Date'.? After some thought, I felt a need to ask this
>>> list if they think that the core R language might benefit from modifying
>>> the language so "str(unlist(list(Sys.Date())))" was of class 'Date', at
>>> least as an option.
>>>
>>>
>>> ?????????? Comments?
>>> ?????????? Thanks,
>>> ?????????? Spencer Graves
>>>
>>>
>>> ? > sessionInfo()
>>> R version 4.2.2 (2022-10-31)
>>> Platform: x86_64-apple-darwin17.0 (64-bit)
>>> Running under: macOS Big Sur 11.7.1
>>>
>>> Matrix products: default
>>> LAPACK:
>>> /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
>>>
>>> locale:
>>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>>
>>> attached base packages:
>>> [1] stats???? graphics? grDevices utils???? datasets? methods?? base
>>>
>>> loaded via a namespace (and not attached):
>>> [1] compiler_4.2.2 tools_4.2.2
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> ????[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


