From Kurt@Horn|k @end|ng |rom wu@@c@@t  Mon Apr  1 14:28:56 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Mon, 1 Apr 2024 14:28:56 +0200
Subject: [Rd] 
 Question regarding .make_numeric_version with non-character input
In-Reply-To: <14ab2002-74a8-491b-8921-b66364479003@polimi.it>
References: <PAXP251MB0578C2827F352E173D109017983A2@PAXP251MB0578.EURP251.PROD.OUTLOOK.COM>
 <26119.4881.618411.645248@rob.eddelbuettel.com>
 <14ab2002-74a8-491b-8921-b66364479003@polimi.it>
Message-ID: <26122.43144.181286.316307@hornik.net>

>>>>> Andrea Gilardi via R-devel writes:

Thanks: should be fixed now in the trunk.

Best
-k

> Thank you very much Dirk for your kind words and for confirming the bug. 
> Next week I will open a new issue on Bugzilla adding the related patch.

> Kind regards

> Andrea

> On 29/03/2024 20:14, Dirk Eddelbuettel wrote:
>> On 29 March 2024 at 17:56, Andrea Gilardi via R-devel wrote:
>> | Dear all,
>> |
>> | I have a question regarding the R-devel version of .make_numeric_version() function. As far as I can understand, the current code (https://github.com/wch/r-source/blob/66b91578dfc85140968f07dd4e72d8cb8a54f4c6/src/library/base/R/version.R#L50-L56) runs the following steps in case of non-character input:
>> |
>> | 1. It creates a message named msg using gettextf.
>> | 2. Such object is then passed to stop(msg) or warning(msg) according to the following condition
>> |
>> | tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false")
>> |
>> | However, I don't understand the previous code since the output of Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false" is just a boolean value and tolower() will just return "true" or "false". Maybe the intended code is tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false" ? Or am I missing something?
>> 
>> Yes, agreed -- good catch.  In full, the code is (removing leading
>> whitespace, and putting it back onto single lines)
>> 
>> msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
>> if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false"))
>> stop(msg, domain = NA)
>> else
>> warning(msg, domain = NA, immediate. = TRUE)
>> 
>> where msg is constant (but reflecting language settings via standard i18n)
>> and as you not the parentheses appear wrong.  What was intended is likely
>> 
>> msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
>> if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false")
>> stop(msg, domain = NA)
>> else
>> warning(msg, domain = NA, immediate. = TRUE)
>> 
>> If you use bugzilla before and have a handle, maybe file a bug report with
>> this as patch at https://bugs.r-project.org/
>> 
>> Dirk
>> 

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Apr  2 14:21:18 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 2 Apr 2024 08:21:18 -0400
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
Message-ID: <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>

I have just added R-4-4-branch to the feeds.  I think I've also fixed 
the \I issue, so today's news includes a long list of old changes.

Duncan Murdoch

On 16/03/2024 8:47 a.m., Duncan Murdoch wrote:
> I have now put the files online at https://github.com/dmurdoch/diffnews
> .  It seemed like too much trouble to include the SVN history, so this
> is just a copy of the current version of the files.
> 
> Duncan Murdoch
> 
> On 15/03/2024 12:04 p.m., Llu?s Revilla wrote:
>> Hi!
>>
>> Thanks for this service! It is very helpful to know what is being developed.
>>
>> I distribute the content to other venues and I noticed some times that the
>> updates are duplicated.
>> For example, the sentence "?is.R()? is deprecated as no other S dialect is
>> known to be in use (and this could only identify historical dialects, not
>> future ones)." is duplicated in different days:
>> Day 1:
>> https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2024/03/07#n2024-03-07
>> Day 2:
>> https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2024/03/09#n2024-03-09
>>
>> I tried to look up how to avoid duplications with Blosxom
>> <http://blosxom.sourceforge.net/> but I didn't find a way.
>> It would be great if this could be further improved to avoid this
>> duplication.
>>
>> Thanks!
>>
>> Llu?s
>>
>> On Fri, 15 Mar 2024 at 13:50, Dirk Eddelbuettel <edd at debian.org> wrote:
>>
>>>
>>> Years ago Duncan set up a nightly job to feed RSS based off changes to
>>> NEWS,
>>> borrowing some setup parts from CRANberries as for example the RSS
>>> 'compiler'.
>>>
>>> That job is currently showing the new \I{...} curly protection in an
>>> unfavourable light. Copying from the RSS reader I had pointed at this since
>>> the start [1], for today I see (indented by four spaces)
>>>
>>>       CHANGES IN R-devel INSTALLATION on WINDOWS
>>>
>>>       The makefiles and installer scripts for Windows have been tailored to
>>>       \IRtools44, an update of the \IRtools43 toolchain. It is based on GCC
>>> 13
>>>       and newer versions of \IMinGW-W64, \Ibinutils and libraries (targeting
>>>       64-bit Intel CPUs). R-devel can no longer be built using \IRtools43
>>>       without changes.
>>>
>>>       \IRtools44 has experimental suport for 64-bit ARM (aarch64) CPUs via
>>> LLVM
>>>       17 toolchain using lld, clang/flang-new and libc++.
>>>
>>> Can some kind soul put a filter over it to remove the \I ?
>>>
>>> Thanks,  Dirk
>>>
>>> [1] Feedly. Unless we set this up so early that I once used Google
>>> Reader. It's been a while...
>>>
>>> --
>>> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From edd @end|ng |rom deb|@n@org  Tue Apr  2 14:37:46 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 2 Apr 2024 07:37:46 -0500
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
 <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
Message-ID: <26123.64538.114755.654627@rob.eddelbuettel.com>


On 2 April 2024 at 08:21, Duncan Murdoch wrote:
| I have just added R-4-4-branch to the feeds.  I think I've also fixed 
| the \I issue, so today's news includes a long list of old changes.

These feeds can fussy: looks like you triggered many updates. Feedly
currently greets me with 569 new posts (!!) in that channel.

Easy enough to mark as all read -- first off thanks for updating the service!

Dirk, a loyal reader since day one

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From edd @end|ng |rom deb|@n@org  Tue Apr  2 14:50:05 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 2 Apr 2024 07:50:05 -0500
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <26123.64538.114755.654627@rob.eddelbuettel.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
 <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
 <26123.64538.114755.654627@rob.eddelbuettel.com>
Message-ID: <26123.65277.905677.850831@rob.eddelbuettel.com>


On 2 April 2024 at 07:37, Dirk Eddelbuettel wrote:
| 
| On 2 April 2024 at 08:21, Duncan Murdoch wrote:
| | I have just added R-4-4-branch to the feeds.  I think I've also fixed 
| | the \I issue, so today's news includes a long list of old changes.
| 
| These feeds can fussy: looks like you triggered many updates. Feedly
| currently greets me with 569 new posts (!!) in that channel.

Now 745 -- and the bigger issue seems to be that the 'posted at' timestamp is
wrong and 'current' so all the old posts are now seen as 'fresh'. Hence the
flood ... of unsorted post.

blosxom, simple as it is, takes (IIRC) filesystem ctime as the posting
timestamp so would be best if you had a backup with the old timestamps.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From ||u|@@rev|||@ @end|ng |rom gm@||@com  Tue Apr  2 15:00:00 2024
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Tue, 2 Apr 2024 15:00:00 +0200
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <26123.65277.905677.850831@rob.eddelbuettel.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
 <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
 <26123.64538.114755.654627@rob.eddelbuettel.com>
 <26123.65277.905677.850831@rob.eddelbuettel.com>
Message-ID: <CAN+W6_tGUj2ONGgHGTiwLP9KmT=PugSkfd+5AqGb=sWwYxDaQg@mail.gmail.com>

Many thanks Duncan,
I tried to look into the code but didn't manage to advance much due to some
java configuration issues.

To prevent being flooded by content of old versions I added a filter to
only repost those that the release version of the branch is in the title of
the content.
Maybe this would be helpful to avoid publishing the full NEWS again.

Llu?s

On Tue, 2 Apr 2024 at 14:50, Dirk Eddelbuettel <edd at debian.org> wrote:

>
> On 2 April 2024 at 07:37, Dirk Eddelbuettel wrote:
> |
> | On 2 April 2024 at 08:21, Duncan Murdoch wrote:
> | | I have just added R-4-4-branch to the feeds.  I think I've also fixed
> | | the \I issue, so today's news includes a long list of old changes.
> |
> | These feeds can fussy: looks like you triggered many updates. Feedly
> | currently greets me with 569 new posts (!!) in that channel.
>
> Now 745 -- and the bigger issue seems to be that the 'posted at' timestamp
> is
> wrong and 'current' so all the old posts are now seen as 'fresh'. Hence the
> flood ... of unsorted post.
>
> blosxom, simple as it is, takes (IIRC) filesystem ctime as the posting
> timestamp so would be best if you had a backup with the old timestamps.
>
> Dirk
>
> --
> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Apr  2 15:41:32 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 2 Apr 2024 09:41:32 -0400
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <26123.65277.905677.850831@rob.eddelbuettel.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
 <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
 <26123.64538.114755.654627@rob.eddelbuettel.com>
 <26123.65277.905677.850831@rob.eddelbuettel.com>
Message-ID: <034bf9c9-885e-4a95-8692-91af1e3edfc9@gmail.com>

On 02/04/2024 8:50 a.m., Dirk Eddelbuettel wrote:
> 
> On 2 April 2024 at 07:37, Dirk Eddelbuettel wrote:
> |
> | On 2 April 2024 at 08:21, Duncan Murdoch wrote:
> | | I have just added R-4-4-branch to the feeds.  I think I've also fixed
> | | the \I issue, so today's news includes a long list of old changes.
> |
> | These feeds can fussy: looks like you triggered many updates. Feedly
> | currently greets me with 569 new posts (!!) in that channel.
> 
> Now 745 -- and the bigger issue seems to be that the 'posted at' timestamp is
> wrong and 'current' so all the old posts are now seen as 'fresh'. Hence the
> flood ... of unsorted post.
> 
> blosxom, simple as it is, takes (IIRC) filesystem ctime as the posting
> timestamp so would be best if you had a backup with the old timestamps.
> 

Looks like those dates are gone -- the switch from svn to git involved 
some copying, and I didn't preserve timestamps.

I'll see about regenerating the more recent ones.  I don't think there's 
much historical interest in the pre-4.0 versions, so maybe I'll just 
nuke those.

Duncan Murdoch


From edd @end|ng |rom deb|@n@org  Tue Apr  2 15:53:36 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 2 Apr 2024 08:53:36 -0500
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <034bf9c9-885e-4a95-8692-91af1e3edfc9@gmail.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
 <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
 <26123.64538.114755.654627@rob.eddelbuettel.com>
 <26123.65277.905677.850831@rob.eddelbuettel.com>
 <034bf9c9-885e-4a95-8692-91af1e3edfc9@gmail.com>
Message-ID: <26124.3552.485377.764369@rob.eddelbuettel.com>


On 2 April 2024 at 09:41, Duncan Murdoch wrote:
| On 02/04/2024 8:50 a.m., Dirk Eddelbuettel wrote:
| > On 2 April 2024 at 07:37, Dirk Eddelbuettel wrote:
| > blosxom, simple as it is, takes (IIRC) filesystem ctime as the posting
| > timestamp so would be best if you had a backup with the old timestamps.
| > 
| 
| Looks like those dates are gone -- the switch from svn to git involved 
| some copying, and I didn't preserve timestamps.

You can recreate them. Nobody cares too much about the hour or minute with a
day as there (always ? generally ?) was only one post per day.  But preserving
the overall sort order would be nice as would not spamming the recent posts
with old ones.

| I'll see about regenerating the more recent ones.  I don't think there's 
| much historical interest in the pre-4.0 versions, so maybe I'll just 
| nuke those.

I suspect you will have to do it programmatically too. You could even take
the old timestamps of the svn and/or git commits and then touch the ctime (or
maybe it was mtime, I forget but 'touch --time=....  file' works). "Been
there done that" for part of my 20+ year old blog infrastructure too.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Apr  2 21:48:30 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 3 Apr 2024 08:48:30 +1300
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <034bf9c9-885e-4a95-8692-91af1e3edfc9@gmail.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
 <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
 <26123.64538.114755.654627@rob.eddelbuettel.com>
 <26123.65277.905677.850831@rob.eddelbuettel.com>
 <034bf9c9-885e-4a95-8692-91af1e3edfc9@gmail.com>
Message-ID: <7F04553F-603F-4E22-8A4D-0AEE051EDF9C@R-project.org>

Duncan,

I have fixed up the repo with git restore-mtime -- I think that should solve it - please check if it did what we needed.

Cheers,
Simon


> On Apr 3, 2024, at 2:41 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> On 02/04/2024 8:50 a.m., Dirk Eddelbuettel wrote:
>> On 2 April 2024 at 07:37, Dirk Eddelbuettel wrote:
>> |
>> | On 2 April 2024 at 08:21, Duncan Murdoch wrote:
>> | | I have just added R-4-4-branch to the feeds.  I think I've also fixed
>> | | the \I issue, so today's news includes a long list of old changes.
>> |
>> | These feeds can fussy: looks like you triggered many updates. Feedly
>> | currently greets me with 569 new posts (!!) in that channel.
>> Now 745 -- and the bigger issue seems to be that the 'posted at' timestamp is
>> wrong and 'current' so all the old posts are now seen as 'fresh'. Hence the
>> flood ... of unsorted post.
>> blosxom, simple as it is, takes (IIRC) filesystem ctime as the posting
>> timestamp so would be best if you had a backup with the old timestamps.
> 
> Looks like those dates are gone -- the switch from svn to git involved some copying, and I didn't preserve timestamps.
> 
> I'll see about regenerating the more recent ones.  I don't think there's much historical interest in the pre-4.0 versions, so maybe I'll just nuke those.
> 
> Duncan Murdoch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From jchoe001 @end|ng |rom gm@||@com  Fri Apr  5 14:15:20 2024
From: jchoe001 @end|ng |rom gm@||@com (June Choe)
Date: Fri, 5 Apr 2024 08:15:20 -0400
Subject: [Rd] Bug in out-of-bounds assignment of list object to expression()
 vector
Message-ID: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>

There seems to be a bug in out-of-bounds assignment of list objects to an
expression() vector. Tested on release and devel. (Many thanks to folks
over at Mastodon for the help narrowing down this bug)

When assigning a list into an existing index, it correctly errors on
incompatible type, and the expression vector is unchanged:

```
x <- expression(a,b,c)
x[[3]] <- list() # Error
x
#> expression(a, b, c)
```

When assigning a list to an out of bounds index (ex: the next, n+1 index),
it errors the same but now changes the values of the vector to NULL:

```
x <- expression(a,b,c)
x[[4]] <- list() # Error
x
#> expression(NULL, NULL, NULL)
```

Curiously, this behavior disappears if a prior attempt is made at assigning
to the same index, using a different incompatible object that does not
share this bug (like a function):

```
x <- expression(a,b,c)
x[[4]] <- base::sum # Error
x[[4]] <- list() # Error
x
#> expression(a, b, c)
```

That "protection" persists until x[[4]] is evaluated, at which point the
bug can be produced again:

```
x[[4]] # Error
x[[4]] <- list() # Error
x
#> expression(NULL, NULL, NULL)
```

Note that `x` has remained a 3-length vector throughout.

Best,
June

	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Fri Apr  5 14:49:25 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Fri, 5 Apr 2024 15:49:25 +0300
Subject: [Rd] 
 Bug in out-of-bounds assignment of list object to expression()
 vector
In-Reply-To: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
References: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
Message-ID: <20240405154925.4df66c28@arachnoid>

On Fri, 5 Apr 2024 08:15:20 -0400
June Choe <jchoe001 at gmail.com> wrote:

> When assigning a list to an out of bounds index (ex: the next, n+1
> index), it errors the same but now changes the values of the vector
> to NULL:
> 
> ```
> x <- expression(a,b,c)
> x[[4]] <- list() # Error
> x
> #> expression(NULL, NULL, NULL)  
> ```
> 
> Curiously, this behavior disappears if a prior attempt is made at
> assigning to the same index, using a different incompatible object
> that does not share this bug (like a function)

Here's how the problem happens:

1. The call lands in src/main/subassign.c, do_subassign2_dflt().

2. do_subassign2_dflt() calls SubassignTypeFix() to prepare the operand
for the assignment.

3. Since the assignment is "stretching", SubassignTypeFix() calls
EnlargeVector() to provide the space for the assignment.

The bug relies on `x` not being IS_GROWABLE(), which may explain 
why a plain x[[4]] <- list() sometimes doesn't fail.

The future assignment result `x` is now expression(a, b, c, NULL), and
the old `x` set to expression(NULL, NULL, NULL) by SET_VECTOR_ELT(newx,
i, VECTOR_ELT(x, i)); CLEAR_VECTOR_ELT(x, i); during EnlargeVector().

4. But then the assignment fails, raising the error back in
do_subassign2_dflt(), because the assignment kind is invalid: there is
no way to put data.frames into an expression vector. The new resized
`x` is lost, and the old overwritten `x` stays there.

Not sure what the right way to fix this is. It's desirable to avoid
shallow_duplicate(x) for the overwriting assignments, but then the
sub-assignment must either succeed or leave the operand untouched.
Is there a way to perform the type check before overwriting the operand?

-- 
Best regards,
Ivan


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Apr  5 14:53:08 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 5 Apr 2024 08:53:08 -0400
Subject: [Rd] 
 Bug in out-of-bounds assignment of list object to expression()
 vector
In-Reply-To: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
References: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
Message-ID: <614fc33c-8120-4580-a89f-86929b562a50@gmail.com>

Yes, definitely looks like a bug.

Are you able to submit it to bugs.r-project.org?

Duncan Murdoch

On 05/04/2024 8:15 a.m., June Choe wrote:
> There seems to be a bug in out-of-bounds assignment of list objects to an
> expression() vector. Tested on release and devel. (Many thanks to folks
> over at Mastodon for the help narrowing down this bug)
> 
> When assigning a list into an existing index, it correctly errors on
> incompatible type, and the expression vector is unchanged:
> 
> ```
> x <- expression(a,b,c)
> x[[3]] <- list() # Error
> x
> #> expression(a, b, c)
> ```
> 
> When assigning a list to an out of bounds index (ex: the next, n+1 index),
> it errors the same but now changes the values of the vector to NULL:
> 
> ```
> x <- expression(a,b,c)
> x[[4]] <- list() # Error
> x
> #> expression(NULL, NULL, NULL)
> ```
> 
> Curiously, this behavior disappears if a prior attempt is made at assigning
> to the same index, using a different incompatible object that does not
> share this bug (like a function):
> 
> ```
> x <- expression(a,b,c)
> x[[4]] <- base::sum # Error
> x[[4]] <- list() # Error
> x
> #> expression(a, b, c)
> ```
> 
> That "protection" persists until x[[4]] is evaluated, at which point the
> bug can be produced again:
> 
> ```
> x[[4]] # Error
> x[[4]] <- list() # Error
> x
> #> expression(NULL, NULL, NULL)
> ```
> 
> Note that `x` has remained a 3-length vector throughout.
> 
> Best,
> June
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Apr  5 16:12:00 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 5 Apr 2024 09:12:00 -0500 (CDT)
Subject: [Rd] 
 [External] Re: Bug in out-of-bounds assignment of list object
 to expression() vector
In-Reply-To: <20240405154925.4df66c28@arachnoid>
References: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
 <20240405154925.4df66c28@arachnoid>
Message-ID: <8b0d7cd8-edda-d116-f72f-44e87c5872a1@uiowa.edu>

On Fri, 5 Apr 2024, Ivan Krylov via R-devel wrote:

> On Fri, 5 Apr 2024 08:15:20 -0400
> June Choe <jchoe001 at gmail.com> wrote:
>
>> When assigning a list to an out of bounds index (ex: the next, n+1
>> index), it errors the same but now changes the values of the vector
>> to NULL:
>>
>> ```
>> x <- expression(a,b,c)
>> x[[4]] <- list() # Error
>> x
>> #> expression(NULL, NULL, NULL)
>> ```
>>
>> Curiously, this behavior disappears if a prior attempt is made at
>> assigning to the same index, using a different incompatible object
>> that does not share this bug (like a function)
>
> Here's how the problem happens:
>
> 1. The call lands in src/main/subassign.c, do_subassign2_dflt().
>
> 2. do_subassign2_dflt() calls SubassignTypeFix() to prepare the operand
> for the assignment.
>
> 3. Since the assignment is "stretching", SubassignTypeFix() calls
> EnlargeVector() to provide the space for the assignment.
>
> The bug relies on `x` not being IS_GROWABLE(), which may explain
> why a plain x[[4]] <- list() sometimes doesn't fail.
>
> The future assignment result `x` is now expression(a, b, c, NULL), and
> the old `x` set to expression(NULL, NULL, NULL) by SET_VECTOR_ELT(newx,
> i, VECTOR_ELT(x, i)); CLEAR_VECTOR_ELT(x, i); during EnlargeVector().
>
> 4. But then the assignment fails, raising the error back in
> do_subassign2_dflt(), because the assignment kind is invalid: there is
> no way to put data.frames into an expression vector. The new resized
> `x` is lost, and the old overwritten `x` stays there.
>
> Not sure what the right way to fix this is. It's desirable to avoid
> shallow_duplicate(x) for the overwriting assignments, but then the
> sub-assignment must either succeed or leave the operand untouched.
> Is there a way to perform the type check before overwriting the operand?

Yes. There are two places where there are some checks, one early and
the other late. The early one is explicitly letting this one through
and shouldn't. So a one line change would address this particular
problem. But it would be a good idea to review why we the late checks
are needed at all and maybe change that. I'll look into it.

Best,

luke

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From jchoe001 @end|ng |rom gm@||@com  Fri Apr  5 16:18:37 2024
From: jchoe001 @end|ng |rom gm@||@com (June Choe)
Date: Fri, 5 Apr 2024 10:18:37 -0400
Subject: [Rd] 
 [External] Re: Bug in out-of-bounds assignment of list object
 to expression() vector
In-Reply-To: <8b0d7cd8-edda-d116-f72f-44e87c5872a1@uiowa.edu>
References: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
 <20240405154925.4df66c28@arachnoid>
 <8b0d7cd8-edda-d116-f72f-44e87c5872a1@uiowa.edu>
Message-ID: <CAH54GbXsrw2Pa3U=UUffVYjpMp=RFbeOBuY3vLwQx3XPYG8r3Q@mail.gmail.com>

Thanks all for looking into this.

Unfortunately I don't know my way around Bugzilla and I'm a bit occupied
for the next few days - it would be great if a bug report could be opened
on my behalf.

Best,
June

On Fri, Apr 5, 2024 at 10:12?AM <luke-tierney at uiowa.edu> wrote:

> On Fri, 5 Apr 2024, Ivan Krylov via R-devel wrote:
>
> > On Fri, 5 Apr 2024 08:15:20 -0400
> > June Choe <jchoe001 at gmail.com> wrote:
> >
> >> When assigning a list to an out of bounds index (ex: the next, n+1
> >> index), it errors the same but now changes the values of the vector
> >> to NULL:
> >>
> >> ```
> >> x <- expression(a,b,c)
> >> x[[4]] <- list() # Error
> >> x
> >> #> expression(NULL, NULL, NULL)
> >> ```
> >>
> >> Curiously, this behavior disappears if a prior attempt is made at
> >> assigning to the same index, using a different incompatible object
> >> that does not share this bug (like a function)
> >
> > Here's how the problem happens:
> >
> > 1. The call lands in src/main/subassign.c, do_subassign2_dflt().
> >
> > 2. do_subassign2_dflt() calls SubassignTypeFix() to prepare the operand
> > for the assignment.
> >
> > 3. Since the assignment is "stretching", SubassignTypeFix() calls
> > EnlargeVector() to provide the space for the assignment.
> >
> > The bug relies on `x` not being IS_GROWABLE(), which may explain
> > why a plain x[[4]] <- list() sometimes doesn't fail.
> >
> > The future assignment result `x` is now expression(a, b, c, NULL), and
> > the old `x` set to expression(NULL, NULL, NULL) by SET_VECTOR_ELT(newx,
> > i, VECTOR_ELT(x, i)); CLEAR_VECTOR_ELT(x, i); during EnlargeVector().
> >
> > 4. But then the assignment fails, raising the error back in
> > do_subassign2_dflt(), because the assignment kind is invalid: there is
> > no way to put data.frames into an expression vector. The new resized
> > `x` is lost, and the old overwritten `x` stays there.
> >
> > Not sure what the right way to fix this is. It's desirable to avoid
> > shallow_duplicate(x) for the overwriting assignments, but then the
> > sub-assignment must either succeed or leave the operand untouched.
> > Is there a way to perform the type check before overwriting the operand?
>
> Yes. There are two places where there are some checks, one early and
> the other late. The early one is explicitly letting this one through
> and shouldn't. So a one line change would address this particular
> problem. But it would be a good idea to review why we the late checks
> are needed at all and maybe change that. I'll look into it.
>
> Best,
>
> luke
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>


-- 

June Choe (??? / Yong June Choe)

He/Him/His

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Sat Apr  6 01:04:01 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 5 Apr 2024 18:04:01 -0500 (CDT)
Subject: [Rd] 
 [External] Bug in out-of-bounds assignment of list object to
 expression() vector
In-Reply-To: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
References: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
Message-ID: <1b3ea516-f019-a215-3151-c86ec2cb952b@uiowa.edu>

Thanks for the report. Fixed in R-devel and R-patched (both
R-4-4-branch and R-4-3-branch).

On Fri, 5 Apr 2024, June Choe wrote:

> [You don't often get email from jchoe001 at gmail.com. Learn why this is important at https://aka.ms/LearnAboutSenderIdentification ]
>
> There seems to be a bug in out-of-bounds assignment of list objects to an
> expression() vector. Tested on release and devel. (Many thanks to folks
> over at Mastodon for the help narrowing down this bug)
>
> When assigning a list into an existing index, it correctly errors on
> incompatible type, and the expression vector is unchanged:
>
> ```
> x <- expression(a,b,c)
> x[[3]] <- list() # Error
> x
> #> expression(a, b, c)
> ```
>
> When assigning a list to an out of bounds index (ex: the next, n+1 index),
> it errors the same but now changes the values of the vector to NULL:
>
> ```
> x <- expression(a,b,c)
> x[[4]] <- list() # Error
> x
> #> expression(NULL, NULL, NULL)
> ```
>
> Curiously, this behavior disappears if a prior attempt is made at assigning
> to the same index, using a different incompatible object that does not
> share this bug (like a function):
>
> ```
> x <- expression(a,b,c)
> x[[4]] <- base::sum # Error
> x[[4]] <- list() # Error
> x
> #> expression(a, b, c)
> ```
>
> That "protection" persists until x[[4]] is evaluated, at which point the
> bug can be produced again:
>
> ```
> x[[4]] # Error
> x[[4]] <- list() # Error
> x
> #> expression(NULL, NULL, NULL)
> ```
>
> Note that `x` has remained a 3-length vector throughout.
>
> Best,
> June
>
>        [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/


