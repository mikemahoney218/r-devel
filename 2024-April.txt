From Kurt@Horn|k @end|ng |rom wu@@c@@t  Mon Apr  1 14:28:56 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Mon, 1 Apr 2024 14:28:56 +0200
Subject: [Rd] 
 Question regarding .make_numeric_version with non-character input
In-Reply-To: <14ab2002-74a8-491b-8921-b66364479003@polimi.it>
References: <PAXP251MB0578C2827F352E173D109017983A2@PAXP251MB0578.EURP251.PROD.OUTLOOK.COM>
 <26119.4881.618411.645248@rob.eddelbuettel.com>
 <14ab2002-74a8-491b-8921-b66364479003@polimi.it>
Message-ID: <26122.43144.181286.316307@hornik.net>

>>>>> Andrea Gilardi via R-devel writes:

Thanks: should be fixed now in the trunk.

Best
-k

> Thank you very much Dirk for your kind words and for confirming the bug. 
> Next week I will open a new issue on Bugzilla adding the related patch.

> Kind regards

> Andrea

> On 29/03/2024 20:14, Dirk Eddelbuettel wrote:
>> On 29 March 2024 at 17:56, Andrea Gilardi via R-devel wrote:
>> | Dear all,
>> |
>> | I have a question regarding the R-devel version of .make_numeric_version() function. As far as I can understand, the current code (https://github.com/wch/r-source/blob/66b91578dfc85140968f07dd4e72d8cb8a54f4c6/src/library/base/R/version.R#L50-L56) runs the following steps in case of non-character input:
>> |
>> | 1. It creates a message named msg using gettextf.
>> | 2. Such object is then passed to stop(msg) or warning(msg) according to the following condition
>> |
>> | tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false")
>> |
>> | However, I don't understand the previous code since the output of Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false" is just a boolean value and tolower() will just return "true" or "false". Maybe the intended code is tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false" ? Or am I missing something?
>> 
>> Yes, agreed -- good catch.  In full, the code is (removing leading
>> whitespace, and putting it back onto single lines)
>> 
>> msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
>> if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false"))
>> stop(msg, domain = NA)
>> else
>> warning(msg, domain = NA, immediate. = TRUE)
>> 
>> where msg is constant (but reflecting language settings via standard i18n)
>> and as you not the parentheses appear wrong.  What was intended is likely
>> 
>> msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
>> if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false")
>> stop(msg, domain = NA)
>> else
>> warning(msg, domain = NA, immediate. = TRUE)
>> 
>> If you use bugzilla before and have a handle, maybe file a bug report with
>> this as patch at https://bugs.r-project.org/
>> 
>> Dirk
>> 

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Apr  2 14:21:18 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 2 Apr 2024 08:21:18 -0400
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
Message-ID: <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>

I have just added R-4-4-branch to the feeds.  I think I've also fixed 
the \I issue, so today's news includes a long list of old changes.

Duncan Murdoch

On 16/03/2024 8:47 a.m., Duncan Murdoch wrote:
> I have now put the files online at https://github.com/dmurdoch/diffnews
> .  It seemed like too much trouble to include the SVN history, so this
> is just a copy of the current version of the files.
> 
> Duncan Murdoch
> 
> On 15/03/2024 12:04 p.m., Llu?s Revilla wrote:
>> Hi!
>>
>> Thanks for this service! It is very helpful to know what is being developed.
>>
>> I distribute the content to other venues and I noticed some times that the
>> updates are duplicated.
>> For example, the sentence "?is.R()? is deprecated as no other S dialect is
>> known to be in use (and this could only identify historical dialects, not
>> future ones)." is duplicated in different days:
>> Day 1:
>> https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2024/03/07#n2024-03-07
>> Day 2:
>> https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2024/03/09#n2024-03-09
>>
>> I tried to look up how to avoid duplications with Blosxom
>> <http://blosxom.sourceforge.net/> but I didn't find a way.
>> It would be great if this could be further improved to avoid this
>> duplication.
>>
>> Thanks!
>>
>> Llu?s
>>
>> On Fri, 15 Mar 2024 at 13:50, Dirk Eddelbuettel <edd at debian.org> wrote:
>>
>>>
>>> Years ago Duncan set up a nightly job to feed RSS based off changes to
>>> NEWS,
>>> borrowing some setup parts from CRANberries as for example the RSS
>>> 'compiler'.
>>>
>>> That job is currently showing the new \I{...} curly protection in an
>>> unfavourable light. Copying from the RSS reader I had pointed at this since
>>> the start [1], for today I see (indented by four spaces)
>>>
>>>       CHANGES IN R-devel INSTALLATION on WINDOWS
>>>
>>>       The makefiles and installer scripts for Windows have been tailored to
>>>       \IRtools44, an update of the \IRtools43 toolchain. It is based on GCC
>>> 13
>>>       and newer versions of \IMinGW-W64, \Ibinutils and libraries (targeting
>>>       64-bit Intel CPUs). R-devel can no longer be built using \IRtools43
>>>       without changes.
>>>
>>>       \IRtools44 has experimental suport for 64-bit ARM (aarch64) CPUs via
>>> LLVM
>>>       17 toolchain using lld, clang/flang-new and libc++.
>>>
>>> Can some kind soul put a filter over it to remove the \I ?
>>>
>>> Thanks,  Dirk
>>>
>>> [1] Feedly. Unless we set this up so early that I once used Google
>>> Reader. It's been a while...
>>>
>>> --
>>> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From edd @end|ng |rom deb|@n@org  Tue Apr  2 14:37:46 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 2 Apr 2024 07:37:46 -0500
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
 <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
Message-ID: <26123.64538.114755.654627@rob.eddelbuettel.com>


On 2 April 2024 at 08:21, Duncan Murdoch wrote:
| I have just added R-4-4-branch to the feeds.  I think I've also fixed 
| the \I issue, so today's news includes a long list of old changes.

These feeds can fussy: looks like you triggered many updates. Feedly
currently greets me with 569 new posts (!!) in that channel.

Easy enough to mark as all read -- first off thanks for updating the service!

Dirk, a loyal reader since day one

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From edd @end|ng |rom deb|@n@org  Tue Apr  2 14:50:05 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 2 Apr 2024 07:50:05 -0500
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <26123.64538.114755.654627@rob.eddelbuettel.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
 <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
 <26123.64538.114755.654627@rob.eddelbuettel.com>
Message-ID: <26123.65277.905677.850831@rob.eddelbuettel.com>


On 2 April 2024 at 07:37, Dirk Eddelbuettel wrote:
| 
| On 2 April 2024 at 08:21, Duncan Murdoch wrote:
| | I have just added R-4-4-branch to the feeds.  I think I've also fixed 
| | the \I issue, so today's news includes a long list of old changes.
| 
| These feeds can fussy: looks like you triggered many updates. Feedly
| currently greets me with 569 new posts (!!) in that channel.

Now 745 -- and the bigger issue seems to be that the 'posted at' timestamp is
wrong and 'current' so all the old posts are now seen as 'fresh'. Hence the
flood ... of unsorted post.

blosxom, simple as it is, takes (IIRC) filesystem ctime as the posting
timestamp so would be best if you had a backup with the old timestamps.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From ||u|@@rev|||@ @end|ng |rom gm@||@com  Tue Apr  2 15:00:00 2024
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Tue, 2 Apr 2024 15:00:00 +0200
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <26123.65277.905677.850831@rob.eddelbuettel.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
 <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
 <26123.64538.114755.654627@rob.eddelbuettel.com>
 <26123.65277.905677.850831@rob.eddelbuettel.com>
Message-ID: <CAN+W6_tGUj2ONGgHGTiwLP9KmT=PugSkfd+5AqGb=sWwYxDaQg@mail.gmail.com>

Many thanks Duncan,
I tried to look into the code but didn't manage to advance much due to some
java configuration issues.

To prevent being flooded by content of old versions I added a filter to
only repost those that the release version of the branch is in the title of
the content.
Maybe this would be helpful to avoid publishing the full NEWS again.

Llu?s

On Tue, 2 Apr 2024 at 14:50, Dirk Eddelbuettel <edd at debian.org> wrote:

>
> On 2 April 2024 at 07:37, Dirk Eddelbuettel wrote:
> |
> | On 2 April 2024 at 08:21, Duncan Murdoch wrote:
> | | I have just added R-4-4-branch to the feeds.  I think I've also fixed
> | | the \I issue, so today's news includes a long list of old changes.
> |
> | These feeds can fussy: looks like you triggered many updates. Feedly
> | currently greets me with 569 new posts (!!) in that channel.
>
> Now 745 -- and the bigger issue seems to be that the 'posted at' timestamp
> is
> wrong and 'current' so all the old posts are now seen as 'fresh'. Hence the
> flood ... of unsorted post.
>
> blosxom, simple as it is, takes (IIRC) filesystem ctime as the posting
> timestamp so would be best if you had a backup with the old timestamps.
>
> Dirk
>
> --
> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Apr  2 15:41:32 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 2 Apr 2024 09:41:32 -0400
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <26123.65277.905677.850831@rob.eddelbuettel.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
 <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
 <26123.64538.114755.654627@rob.eddelbuettel.com>
 <26123.65277.905677.850831@rob.eddelbuettel.com>
Message-ID: <034bf9c9-885e-4a95-8692-91af1e3edfc9@gmail.com>

On 02/04/2024 8:50 a.m., Dirk Eddelbuettel wrote:
> 
> On 2 April 2024 at 07:37, Dirk Eddelbuettel wrote:
> |
> | On 2 April 2024 at 08:21, Duncan Murdoch wrote:
> | | I have just added R-4-4-branch to the feeds.  I think I've also fixed
> | | the \I issue, so today's news includes a long list of old changes.
> |
> | These feeds can fussy: looks like you triggered many updates. Feedly
> | currently greets me with 569 new posts (!!) in that channel.
> 
> Now 745 -- and the bigger issue seems to be that the 'posted at' timestamp is
> wrong and 'current' so all the old posts are now seen as 'fresh'. Hence the
> flood ... of unsorted post.
> 
> blosxom, simple as it is, takes (IIRC) filesystem ctime as the posting
> timestamp so would be best if you had a backup with the old timestamps.
> 

Looks like those dates are gone -- the switch from svn to git involved 
some copying, and I didn't preserve timestamps.

I'll see about regenerating the more recent ones.  I don't think there's 
much historical interest in the pre-4.0 versions, so maybe I'll just 
nuke those.

Duncan Murdoch


From edd @end|ng |rom deb|@n@org  Tue Apr  2 15:53:36 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 2 Apr 2024 08:53:36 -0500
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <034bf9c9-885e-4a95-8692-91af1e3edfc9@gmail.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
 <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
 <26123.64538.114755.654627@rob.eddelbuettel.com>
 <26123.65277.905677.850831@rob.eddelbuettel.com>
 <034bf9c9-885e-4a95-8692-91af1e3edfc9@gmail.com>
Message-ID: <26124.3552.485377.764369@rob.eddelbuettel.com>


On 2 April 2024 at 09:41, Duncan Murdoch wrote:
| On 02/04/2024 8:50 a.m., Dirk Eddelbuettel wrote:
| > On 2 April 2024 at 07:37, Dirk Eddelbuettel wrote:
| > blosxom, simple as it is, takes (IIRC) filesystem ctime as the posting
| > timestamp so would be best if you had a backup with the old timestamps.
| > 
| 
| Looks like those dates are gone -- the switch from svn to git involved 
| some copying, and I didn't preserve timestamps.

You can recreate them. Nobody cares too much about the hour or minute with a
day as there (always ? generally ?) was only one post per day.  But preserving
the overall sort order would be nice as would not spamming the recent posts
with old ones.

| I'll see about regenerating the more recent ones.  I don't think there's 
| much historical interest in the pre-4.0 versions, so maybe I'll just 
| nuke those.

I suspect you will have to do it programmatically too. You could even take
the old timestamps of the svn and/or git commits and then touch the ctime (or
maybe it was mtime, I forget but 'touch --time=....  file' works). "Been
there done that" for part of my 20+ year old blog infrastructure too.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Apr  2 21:48:30 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 3 Apr 2024 08:48:30 +1300
Subject: [Rd] RSS Feed of NEWS needs a hand
In-Reply-To: <034bf9c9-885e-4a95-8692-91af1e3edfc9@gmail.com>
References: <26100.17401.311680.961701@rob.eddelbuettel.com>
 <CAN+W6_vCrQ6xTDYxy8mrtcxH5nOhUeF10-KPChaurQqVWR0_qQ@mail.gmail.com>
 <20c7d0c3-b47f-4490-b4f8-851ae48efc9f@gmail.com>
 <dd396873-87a4-4b49-9f5b-777fc8176606@gmail.com>
 <26123.64538.114755.654627@rob.eddelbuettel.com>
 <26123.65277.905677.850831@rob.eddelbuettel.com>
 <034bf9c9-885e-4a95-8692-91af1e3edfc9@gmail.com>
Message-ID: <7F04553F-603F-4E22-8A4D-0AEE051EDF9C@R-project.org>

Duncan,

I have fixed up the repo with git restore-mtime -- I think that should solve it - please check if it did what we needed.

Cheers,
Simon


> On Apr 3, 2024, at 2:41 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> On 02/04/2024 8:50 a.m., Dirk Eddelbuettel wrote:
>> On 2 April 2024 at 07:37, Dirk Eddelbuettel wrote:
>> |
>> | On 2 April 2024 at 08:21, Duncan Murdoch wrote:
>> | | I have just added R-4-4-branch to the feeds.  I think I've also fixed
>> | | the \I issue, so today's news includes a long list of old changes.
>> |
>> | These feeds can fussy: looks like you triggered many updates. Feedly
>> | currently greets me with 569 new posts (!!) in that channel.
>> Now 745 -- and the bigger issue seems to be that the 'posted at' timestamp is
>> wrong and 'current' so all the old posts are now seen as 'fresh'. Hence the
>> flood ... of unsorted post.
>> blosxom, simple as it is, takes (IIRC) filesystem ctime as the posting
>> timestamp so would be best if you had a backup with the old timestamps.
> 
> Looks like those dates are gone -- the switch from svn to git involved some copying, and I didn't preserve timestamps.
> 
> I'll see about regenerating the more recent ones.  I don't think there's much historical interest in the pre-4.0 versions, so maybe I'll just nuke those.
> 
> Duncan Murdoch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From jchoe001 @end|ng |rom gm@||@com  Fri Apr  5 14:15:20 2024
From: jchoe001 @end|ng |rom gm@||@com (June Choe)
Date: Fri, 5 Apr 2024 08:15:20 -0400
Subject: [Rd] Bug in out-of-bounds assignment of list object to expression()
 vector
Message-ID: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>

There seems to be a bug in out-of-bounds assignment of list objects to an
expression() vector. Tested on release and devel. (Many thanks to folks
over at Mastodon for the help narrowing down this bug)

When assigning a list into an existing index, it correctly errors on
incompatible type, and the expression vector is unchanged:

```
x <- expression(a,b,c)
x[[3]] <- list() # Error
x
#> expression(a, b, c)
```

When assigning a list to an out of bounds index (ex: the next, n+1 index),
it errors the same but now changes the values of the vector to NULL:

```
x <- expression(a,b,c)
x[[4]] <- list() # Error
x
#> expression(NULL, NULL, NULL)
```

Curiously, this behavior disappears if a prior attempt is made at assigning
to the same index, using a different incompatible object that does not
share this bug (like a function):

```
x <- expression(a,b,c)
x[[4]] <- base::sum # Error
x[[4]] <- list() # Error
x
#> expression(a, b, c)
```

That "protection" persists until x[[4]] is evaluated, at which point the
bug can be produced again:

```
x[[4]] # Error
x[[4]] <- list() # Error
x
#> expression(NULL, NULL, NULL)
```

Note that `x` has remained a 3-length vector throughout.

Best,
June

	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Fri Apr  5 14:49:25 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Fri, 5 Apr 2024 15:49:25 +0300
Subject: [Rd] 
 Bug in out-of-bounds assignment of list object to expression()
 vector
In-Reply-To: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
References: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
Message-ID: <20240405154925.4df66c28@arachnoid>

On Fri, 5 Apr 2024 08:15:20 -0400
June Choe <jchoe001 at gmail.com> wrote:

> When assigning a list to an out of bounds index (ex: the next, n+1
> index), it errors the same but now changes the values of the vector
> to NULL:
> 
> ```
> x <- expression(a,b,c)
> x[[4]] <- list() # Error
> x
> #> expression(NULL, NULL, NULL)  
> ```
> 
> Curiously, this behavior disappears if a prior attempt is made at
> assigning to the same index, using a different incompatible object
> that does not share this bug (like a function)

Here's how the problem happens:

1. The call lands in src/main/subassign.c, do_subassign2_dflt().

2. do_subassign2_dflt() calls SubassignTypeFix() to prepare the operand
for the assignment.

3. Since the assignment is "stretching", SubassignTypeFix() calls
EnlargeVector() to provide the space for the assignment.

The bug relies on `x` not being IS_GROWABLE(), which may explain 
why a plain x[[4]] <- list() sometimes doesn't fail.

The future assignment result `x` is now expression(a, b, c, NULL), and
the old `x` set to expression(NULL, NULL, NULL) by SET_VECTOR_ELT(newx,
i, VECTOR_ELT(x, i)); CLEAR_VECTOR_ELT(x, i); during EnlargeVector().

4. But then the assignment fails, raising the error back in
do_subassign2_dflt(), because the assignment kind is invalid: there is
no way to put data.frames into an expression vector. The new resized
`x` is lost, and the old overwritten `x` stays there.

Not sure what the right way to fix this is. It's desirable to avoid
shallow_duplicate(x) for the overwriting assignments, but then the
sub-assignment must either succeed or leave the operand untouched.
Is there a way to perform the type check before overwriting the operand?

-- 
Best regards,
Ivan


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Apr  5 14:53:08 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 5 Apr 2024 08:53:08 -0400
Subject: [Rd] 
 Bug in out-of-bounds assignment of list object to expression()
 vector
In-Reply-To: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
References: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
Message-ID: <614fc33c-8120-4580-a89f-86929b562a50@gmail.com>

Yes, definitely looks like a bug.

Are you able to submit it to bugs.r-project.org?

Duncan Murdoch

On 05/04/2024 8:15 a.m., June Choe wrote:
> There seems to be a bug in out-of-bounds assignment of list objects to an
> expression() vector. Tested on release and devel. (Many thanks to folks
> over at Mastodon for the help narrowing down this bug)
> 
> When assigning a list into an existing index, it correctly errors on
> incompatible type, and the expression vector is unchanged:
> 
> ```
> x <- expression(a,b,c)
> x[[3]] <- list() # Error
> x
> #> expression(a, b, c)
> ```
> 
> When assigning a list to an out of bounds index (ex: the next, n+1 index),
> it errors the same but now changes the values of the vector to NULL:
> 
> ```
> x <- expression(a,b,c)
> x[[4]] <- list() # Error
> x
> #> expression(NULL, NULL, NULL)
> ```
> 
> Curiously, this behavior disappears if a prior attempt is made at assigning
> to the same index, using a different incompatible object that does not
> share this bug (like a function):
> 
> ```
> x <- expression(a,b,c)
> x[[4]] <- base::sum # Error
> x[[4]] <- list() # Error
> x
> #> expression(a, b, c)
> ```
> 
> That "protection" persists until x[[4]] is evaluated, at which point the
> bug can be produced again:
> 
> ```
> x[[4]] # Error
> x[[4]] <- list() # Error
> x
> #> expression(NULL, NULL, NULL)
> ```
> 
> Note that `x` has remained a 3-length vector throughout.
> 
> Best,
> June
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Apr  5 16:12:00 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 5 Apr 2024 09:12:00 -0500 (CDT)
Subject: [Rd] 
 [External] Re: Bug in out-of-bounds assignment of list object
 to expression() vector
In-Reply-To: <20240405154925.4df66c28@arachnoid>
References: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
 <20240405154925.4df66c28@arachnoid>
Message-ID: <8b0d7cd8-edda-d116-f72f-44e87c5872a1@uiowa.edu>

On Fri, 5 Apr 2024, Ivan Krylov via R-devel wrote:

> On Fri, 5 Apr 2024 08:15:20 -0400
> June Choe <jchoe001 at gmail.com> wrote:
>
>> When assigning a list to an out of bounds index (ex: the next, n+1
>> index), it errors the same but now changes the values of the vector
>> to NULL:
>>
>> ```
>> x <- expression(a,b,c)
>> x[[4]] <- list() # Error
>> x
>> #> expression(NULL, NULL, NULL)
>> ```
>>
>> Curiously, this behavior disappears if a prior attempt is made at
>> assigning to the same index, using a different incompatible object
>> that does not share this bug (like a function)
>
> Here's how the problem happens:
>
> 1. The call lands in src/main/subassign.c, do_subassign2_dflt().
>
> 2. do_subassign2_dflt() calls SubassignTypeFix() to prepare the operand
> for the assignment.
>
> 3. Since the assignment is "stretching", SubassignTypeFix() calls
> EnlargeVector() to provide the space for the assignment.
>
> The bug relies on `x` not being IS_GROWABLE(), which may explain
> why a plain x[[4]] <- list() sometimes doesn't fail.
>
> The future assignment result `x` is now expression(a, b, c, NULL), and
> the old `x` set to expression(NULL, NULL, NULL) by SET_VECTOR_ELT(newx,
> i, VECTOR_ELT(x, i)); CLEAR_VECTOR_ELT(x, i); during EnlargeVector().
>
> 4. But then the assignment fails, raising the error back in
> do_subassign2_dflt(), because the assignment kind is invalid: there is
> no way to put data.frames into an expression vector. The new resized
> `x` is lost, and the old overwritten `x` stays there.
>
> Not sure what the right way to fix this is. It's desirable to avoid
> shallow_duplicate(x) for the overwriting assignments, but then the
> sub-assignment must either succeed or leave the operand untouched.
> Is there a way to perform the type check before overwriting the operand?

Yes. There are two places where there are some checks, one early and
the other late. The early one is explicitly letting this one through
and shouldn't. So a one line change would address this particular
problem. But it would be a good idea to review why we the late checks
are needed at all and maybe change that. I'll look into it.

Best,

luke

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From jchoe001 @end|ng |rom gm@||@com  Fri Apr  5 16:18:37 2024
From: jchoe001 @end|ng |rom gm@||@com (June Choe)
Date: Fri, 5 Apr 2024 10:18:37 -0400
Subject: [Rd] 
 [External] Re: Bug in out-of-bounds assignment of list object
 to expression() vector
In-Reply-To: <8b0d7cd8-edda-d116-f72f-44e87c5872a1@uiowa.edu>
References: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
 <20240405154925.4df66c28@arachnoid>
 <8b0d7cd8-edda-d116-f72f-44e87c5872a1@uiowa.edu>
Message-ID: <CAH54GbXsrw2Pa3U=UUffVYjpMp=RFbeOBuY3vLwQx3XPYG8r3Q@mail.gmail.com>

Thanks all for looking into this.

Unfortunately I don't know my way around Bugzilla and I'm a bit occupied
for the next few days - it would be great if a bug report could be opened
on my behalf.

Best,
June

On Fri, Apr 5, 2024 at 10:12?AM <luke-tierney at uiowa.edu> wrote:

> On Fri, 5 Apr 2024, Ivan Krylov via R-devel wrote:
>
> > On Fri, 5 Apr 2024 08:15:20 -0400
> > June Choe <jchoe001 at gmail.com> wrote:
> >
> >> When assigning a list to an out of bounds index (ex: the next, n+1
> >> index), it errors the same but now changes the values of the vector
> >> to NULL:
> >>
> >> ```
> >> x <- expression(a,b,c)
> >> x[[4]] <- list() # Error
> >> x
> >> #> expression(NULL, NULL, NULL)
> >> ```
> >>
> >> Curiously, this behavior disappears if a prior attempt is made at
> >> assigning to the same index, using a different incompatible object
> >> that does not share this bug (like a function)
> >
> > Here's how the problem happens:
> >
> > 1. The call lands in src/main/subassign.c, do_subassign2_dflt().
> >
> > 2. do_subassign2_dflt() calls SubassignTypeFix() to prepare the operand
> > for the assignment.
> >
> > 3. Since the assignment is "stretching", SubassignTypeFix() calls
> > EnlargeVector() to provide the space for the assignment.
> >
> > The bug relies on `x` not being IS_GROWABLE(), which may explain
> > why a plain x[[4]] <- list() sometimes doesn't fail.
> >
> > The future assignment result `x` is now expression(a, b, c, NULL), and
> > the old `x` set to expression(NULL, NULL, NULL) by SET_VECTOR_ELT(newx,
> > i, VECTOR_ELT(x, i)); CLEAR_VECTOR_ELT(x, i); during EnlargeVector().
> >
> > 4. But then the assignment fails, raising the error back in
> > do_subassign2_dflt(), because the assignment kind is invalid: there is
> > no way to put data.frames into an expression vector. The new resized
> > `x` is lost, and the old overwritten `x` stays there.
> >
> > Not sure what the right way to fix this is. It's desirable to avoid
> > shallow_duplicate(x) for the overwriting assignments, but then the
> > sub-assignment must either succeed or leave the operand untouched.
> > Is there a way to perform the type check before overwriting the operand?
>
> Yes. There are two places where there are some checks, one early and
> the other late. The early one is explicitly letting this one through
> and shouldn't. So a one line change would address this particular
> problem. But it would be a good idea to review why we the late checks
> are needed at all and maybe change that. I'll look into it.
>
> Best,
>
> luke
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>


-- 

June Choe (??? / Yong June Choe)

He/Him/His

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Sat Apr  6 01:04:01 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 5 Apr 2024 18:04:01 -0500 (CDT)
Subject: [Rd] 
 [External] Bug in out-of-bounds assignment of list object to
 expression() vector
In-Reply-To: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
References: <CAH54GbXMhcy+JFV7dfBLV0J7+YVoTBB8zdnQqEhrOogZPnM-yQ@mail.gmail.com>
Message-ID: <1b3ea516-f019-a215-3151-c86ec2cb952b@uiowa.edu>

Thanks for the report. Fixed in R-devel and R-patched (both
R-4-4-branch and R-4-3-branch).

On Fri, 5 Apr 2024, June Choe wrote:

> [You don't often get email from jchoe001 at gmail.com. Learn why this is important at https://aka.ms/LearnAboutSenderIdentification ]
>
> There seems to be a bug in out-of-bounds assignment of list objects to an
> expression() vector. Tested on release and devel. (Many thanks to folks
> over at Mastodon for the help narrowing down this bug)
>
> When assigning a list into an existing index, it correctly errors on
> incompatible type, and the expression vector is unchanged:
>
> ```
> x <- expression(a,b,c)
> x[[3]] <- list() # Error
> x
> #> expression(a, b, c)
> ```
>
> When assigning a list to an out of bounds index (ex: the next, n+1 index),
> it errors the same but now changes the values of the vector to NULL:
>
> ```
> x <- expression(a,b,c)
> x[[4]] <- list() # Error
> x
> #> expression(NULL, NULL, NULL)
> ```
>
> Curiously, this behavior disappears if a prior attempt is made at assigning
> to the same index, using a different incompatible object that does not
> share this bug (like a function):
>
> ```
> x <- expression(a,b,c)
> x[[4]] <- base::sum # Error
> x[[4]] <- list() # Error
> x
> #> expression(a, b, c)
> ```
>
> That "protection" persists until x[[4]] is evaluated, at which point the
> bug can be produced again:
>
> ```
> x[[4]] # Error
> x[[4]] <- list() # Error
> x
> #> expression(NULL, NULL, NULL)
> ```
>
> Note that `x` has remained a 3-length vector throughout.
>
> Best,
> June
>
>        [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Mon Apr  8 19:19:29 2024
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Mon, 8 Apr 2024 10:19:29 -0700
Subject: [Rd] Repeated library() of one package with different include.only=
 entries
Message-ID: <CAPRVBcy8u+2K+4Gw=FnYqt5We-qwPVuA0QDoOCmSAcqaJs1_EQ@mail.gmail.com>

Right now, attaching the same package with different include.only= has no
effect:

library(Matrix, include.only="fac2sparse")
library(Matrix)
ls("package:Matrix")
# [1] "fac2sparse"

?library does not cover this case -- what is covered is the _loading_
behavior of repeated calls:

> [library and require] check and update the list of currently attached
packages and do not reload a namespace which is already loaded

But here we're looking at the _attach_ behavior of repeated calls.

I am particularly interested in allowing the exports of a package to be
built up gradually:

library(Matrix, include.only="fac2sparse")
library(Matrix, include.only="isDiagonal") # want: ls("package:Matrix") -->
c("fac2sparse", "isDiagonal")
...

It seems quite hard to accomplish this at the moment. Is the behavior to
ignore new inclusions intentional? Could there be an argument to get
different behavior?

	[[alternative HTML version deleted]]


From ht @end|ng |rom he@therturner@net  Tue Apr  9 12:17:15 2024
From: ht @end|ng |rom he@therturner@net (Heather Turner)
Date: Tue, 09 Apr 2024 11:17:15 +0100
Subject: [Rd] R Dev Day @ Imperial, London, Fri Apr 26
In-Reply-To: <b9a5797c-ccca-4c33-8756-5d931c1730bd@app.fastmail.com>
References: <b9a5797c-ccca-4c33-8756-5d931c1730bd@app.fastmail.com>
Message-ID: <0d4e4b18-f391-47d3-b1bd-cf10cb0e05c5@app.fastmail.com>

Reminder that the registration deadline for this event is this Sunday.

On Wed, Mar 13, 2024, at 9:16 AM, Heather Turner wrote:
> Dear All,
>
> R Dev Day @ Imperial will take place on Friday 26 April at Imperial 
> College London:
> https://pretix.eu/r-contributors/r-dev-day-imperial-2024/
>
> This event is aimed at current or aspiring R contributors based in the 
> UK. Unlike other contributor events, we may not have representation 
> from the R Core Team, however it is a chance for interested folk to get 
> together to learn more, or to work collaboratively on potential 
> contributions to base R.
>
> This R Dev Day is a satellite to London satRday, Saturday 27 April: 
> https://satrday-london-2024.jumpingrivers.com/. Thanks to Jumping 
> Rivers and Imperial Central RSE Team, coffee and lunch breaks are 
> catered for participants.
>
> There is no selective application for this event. Registration is free 
> and open until Sunday 14 April or until places are filled.
>
> Best wishes,
>
> Heather
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |kry|ov @end|ng |rom d|@root@org  Tue Apr  9 15:43:29 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Tue, 9 Apr 2024 16:43:29 +0300
Subject: [Rd] Wish: a way to track progress of parallel operations
In-Reply-To: <CAFDcVCT0Aj_hnXsoSd_+mqU+vAKESkUri2SaG7Ye1XPJU96KRA@mail.gmail.com>
References: <20240325184049.745179e0@arachnoid>
 <CAFDcVCT0Aj_hnXsoSd_+mqU+vAKESkUri2SaG7Ye1XPJU96KRA@mail.gmail.com>
Message-ID: <20240409164329.7d42b205@arachnoid>

Dear Henrik (and everyone else):

Here's a patch implementing support for immediateConditions in
'parallel' socket clusters. What do you think?

I've tried to make the feature backwards-compatible in the sense that
an older R starting a newer cluster worker will not pass the flag
enabling condition passing and so will avoid being confused by packets
with type = 'CONDITION'.

In order to propagate the conditions in a timely manner, all 'parallel'
functions that currently use recvData() on individual nodes will have
to switch to calling recvOneData(). I've already adjusted
staticClusterApply(), but e.g. clusterCall() would still postpone
immediateConditions from nodes later in the list (should they appear).

If this is deemed a good way forward, I can prepare a similar patch for
the MPI and socket clusters implemented in the 'snow' package.

-- 
Best regards,
Ivan

-------------- next part --------------
A non-text attachment was scrubbed...
Name: parallel-immediateConditions.patch
Type: text/x-patch
Size: 7038 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20240409/ae4844a8/attachment.bin>

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Apr 11 13:04:36 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 11 Apr 2024 13:04:36 +0200
Subject: [Rd] 
 Repeated library() of one package with different include.only=
 entries
In-Reply-To: <CAPRVBcy8u+2K+4Gw=FnYqt5We-qwPVuA0QDoOCmSAcqaJs1_EQ@mail.gmail.com>
References: <CAPRVBcy8u+2K+4Gw=FnYqt5We-qwPVuA0QDoOCmSAcqaJs1_EQ@mail.gmail.com>
Message-ID: <26135.50116.623107.613121@stat.math.ethz.ch>

>>>>> Michael Chirico 
>>>>>     on Mon, 8 Apr 2024 10:19:29 -0700 writes:

    > Right now, attaching the same package with different include.only= has no
    > effect:

    > library(Matrix, include.only="fac2sparse")
    > library(Matrix)
    > ls("package:Matrix")
    > # [1] "fac2sparse"

    > ?library does not cover this case -- what is covered is the _loading_
    > behavior of repeated calls:

    >> [library and require] check and update the list of currently attached
    > packages and do not reload a namespace which is already loaded

    > But here we're looking at the _attach_ behavior of repeated calls.

    > I am particularly interested in allowing the exports of a package to be
    > built up gradually:

    > library(Matrix, include.only="fac2sparse")
    > library(Matrix, include.only="isDiagonal") # want: ls("package:Matrix") -->
    > c("fac2sparse", "isDiagonal")
    > ...

    > It seems quite hard to accomplish this at the moment. Is the behavior to
    > ignore new inclusions intentional? Could there be an argument to get
    > different behavior?

As you did not get an answer yet, ..., some remarks by an
R-corer who has tweaked library() behavior in the past :

- The `include.only = *` argument to library() has been a
  *relatively* recent addition {given the 25+ years of R history}:

  It was part of the extensive new features by Luke Tierney for
  R 3.6.0  [r76248 | luke | 2019-03-18 17:29:35 +0100], with NEWS entry

    ? library() and require() now allow more control over handling
      search path conflicts when packages are attached. The policy is
      controlled by the new conflicts.policy option.

- I haven't seen these (then) new features been used much, unfortunately,
  also not from R-core members, but I'd be happy to be told a different story.
  

For the above reasons, it could well be that the current
implementation {of these features} has not been exercised a lot
yet, and limitations as you found them haven't been noticed yet,
or at least not noticed on the public R mailing lists, nor
otherwise by R-core (?).

Your implicitly proposed new feature (or even *changed*
default behavior) seems to make sense to me -- but as alluded
to, above, I haven't been a conscious user of any
'library(.., include.only = *)' till now.

Martin

--
Martin Maechler
ETH Zurich   and  R Core


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Apr 11 15:06:40 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 11 Apr 2024 09:06:40 -0400
Subject: [Rd] 
 Repeated library() of one package with different include.only=
 entries
In-Reply-To: <26135.50116.623107.613121@stat.math.ethz.ch>
References: <CAPRVBcy8u+2K+4Gw=FnYqt5We-qwPVuA0QDoOCmSAcqaJs1_EQ@mail.gmail.com>
 <26135.50116.623107.613121@stat.math.ethz.ch>
Message-ID: <bf5029c5-dd1b-4d81-93de-26da2c3fd561@gmail.com>

On 11/04/2024 7:04 a.m., Martin Maechler wrote:
>>>>>> Michael Chirico
>>>>>>      on Mon, 8 Apr 2024 10:19:29 -0700 writes:
> 
>      > Right now, attaching the same package with different include.only= has no
>      > effect:
> 
>      > library(Matrix, include.only="fac2sparse")
>      > library(Matrix)
>      > ls("package:Matrix")
>      > # [1] "fac2sparse"
> 
>      > ?library does not cover this case -- what is covered is the _loading_
>      > behavior of repeated calls:
> 
>      >> [library and require] check and update the list of currently attached
>      > packages and do not reload a namespace which is already loaded
> 
>      > But here we're looking at the _attach_ behavior of repeated calls.
> 
>      > I am particularly interested in allowing the exports of a package to be
>      > built up gradually:
> 
>      > library(Matrix, include.only="fac2sparse")
>      > library(Matrix, include.only="isDiagonal") # want: ls("package:Matrix") -->
>      > c("fac2sparse", "isDiagonal")
>      > ...
> 
>      > It seems quite hard to accomplish this at the moment. Is the behavior to
>      > ignore new inclusions intentional? Could there be an argument to get
>      > different behavior?
> 
> As you did not get an answer yet, ..., some remarks by an
> R-corer who has tweaked library() behavior in the past :
> 
> - The `include.only = *` argument to library() has been a
>    *relatively* recent addition {given the 25+ years of R history}:
> 
>    It was part of the extensive new features by Luke Tierney for
>    R 3.6.0  [r76248 | luke | 2019-03-18 17:29:35 +0100], with NEWS entry
> 
>      ? library() and require() now allow more control over handling
>        search path conflicts when packages are attached. The policy is
>        controlled by the new conflicts.policy option.
> 
> - I haven't seen these (then) new features been used much, unfortunately,
>    also not from R-core members, but I'd be happy to be told a different story.
>    
> 
> For the above reasons, it could well be that the current
> implementation {of these features} has not been exercised a lot
> yet, and limitations as you found them haven't been noticed yet,
> or at least not noticed on the public R mailing lists, nor
> otherwise by R-core (?).
> 
> Your implicitly proposed new feature (or even *changed*
> default behavior) seems to make sense to me -- but as alluded
> to, above, I haven't been a conscious user of any
> 'library(.., include.only = *)' till now.

I don't think it makes sense.  I would assume that

   library(Matrix, include.only="isDiagonal")

implies that only `isDiagonal` ends up on the search path, i.e. 
"include.only" means "include only", not "include in addition to 
whatever else has already been attached".

I think a far better approach to solve Michael's problem is simply to use

   fac2sparse <- Matrix::fac2sparse
   isDiagonal <- Matrix::isDiagonal

instead of messing around with the user's search list, which may have 
been intentionally set to include only one of those.

So I'd suggest changing the docs to say

"[library and require] check and update the list of currently attached
packages and do not reload a namespace which is already loaded.  If a 
package is already attached, no change will be made."

Duncan Murdoch


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Apr 11 16:37:13 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 11 Apr 2024 09:37:13 -0500 (CDT)
Subject: [Rd] [External] Re: Repeated library() of one package with
 different include.only= entries
In-Reply-To: <bf5029c5-dd1b-4d81-93de-26da2c3fd561@gmail.com>
References: <CAPRVBcy8u+2K+4Gw=FnYqt5We-qwPVuA0QDoOCmSAcqaJs1_EQ@mail.gmail.com>
 <26135.50116.623107.613121@stat.math.ethz.ch>
 <bf5029c5-dd1b-4d81-93de-26da2c3fd561@gmail.com>
Message-ID: <fd132c71-8730-91a9-7d15-bec45c24df54@uiowa.edu>

On Thu, 11 Apr 2024, Duncan Murdoch wrote:

> On 11/04/2024 7:04 a.m., Martin Maechler wrote:
>>>>>>> Michael Chirico
>>>>>>>      on Mon, 8 Apr 2024 10:19:29 -0700 writes:
>>
>>      > Right now, attaching the same package with different include.only= 
>> has no
>>      > effect:
>>
>>      > library(Matrix, include.only="fac2sparse")
>>      > library(Matrix)
>>      > ls("package:Matrix")
>>      > # [1] "fac2sparse"
>>
>>      > ?library does not cover this case -- what is covered is the 
>> _loading_
>>      > behavior of repeated calls:
>>
>>      >> [library and require] check and update the list of currently 
>> attached
>>      > packages and do not reload a namespace which is already loaded
>>
>>      > But here we're looking at the _attach_ behavior of repeated calls.
>>
>>      > I am particularly interested in allowing the exports of a package to 
>> be
>>      > built up gradually:
>>
>>      > library(Matrix, include.only="fac2sparse")
>>      > library(Matrix, include.only="isDiagonal") # want: 
>> ls("package:Matrix") -->
>>      > c("fac2sparse", "isDiagonal")
>>      > ...
>>
>>      > It seems quite hard to accomplish this at the moment. Is the 
>> behavior to
>>      > ignore new inclusions intentional? Could there be an argument to get
>>      > different behavior?
>> 
>> As you did not get an answer yet, ..., some remarks by an
>> R-corer who has tweaked library() behavior in the past :
>> 
>> - The `include.only = *` argument to library() has been a
>>    *relatively* recent addition {given the 25+ years of R history}:
>>
>>    It was part of the extensive new features by Luke Tierney for
>>    R 3.6.0  [r76248 | luke | 2019-03-18 17:29:35 +0100], with NEWS entry
>>
>>      ? library() and require() now allow more control over handling
>>        search path conflicts when packages are attached. The policy is
>>        controlled by the new conflicts.policy option.
>> 
>> - I haven't seen these (then) new features been used much, unfortunately,
>>    also not from R-core members, but I'd be happy to be told a different 
>> story.
>> 
>> For the above reasons, it could well be that the current
>> implementation {of these features} has not been exercised a lot
>> yet, and limitations as you found them haven't been noticed yet,
>> or at least not noticed on the public R mailing lists, nor
>> otherwise by R-core (?).
>> 
>> Your implicitly proposed new feature (or even *changed*
>> default behavior) seems to make sense to me -- but as alluded
>> to, above, I haven't been a conscious user of any
>> 'library(.., include.only = *)' till now.
>
> I don't think it makes sense.  I would assume that
>
>  library(Matrix, include.only="isDiagonal")
>
> implies that only `isDiagonal` ends up on the search path, i.e. 
> "include.only" means "include only", not "include in addition to whatever 
> else has already been attached".
>
> I think a far better approach to solve Michael's problem is simply to use
>
>  fac2sparse <- Matrix::fac2sparse
>  isDiagonal <- Matrix::isDiagonal
>
> instead of messing around with the user's search list, which may have been 
> intentionally set to include only one of those.
>
> So I'd suggest changing the docs to say
>
> "[library and require] check and update the list of currently attached
> packages and do not reload a namespace which is already loaded.  If a package 
> is already attached, no change will be made."

?library could also mention using detach() followed by library() or
attachNamespace() with a new include.only specification.

Best,

luke

>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/

From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Thu Apr 11 18:10:11 2024
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Thu, 11 Apr 2024 09:10:11 -0700
Subject: [Rd] [External] Re: Repeated library() of one package with
 different include.only= entries
In-Reply-To: <fd132c71-8730-91a9-7d15-bec45c24df54@uiowa.edu>
References: <CAPRVBcy8u+2K+4Gw=FnYqt5We-qwPVuA0QDoOCmSAcqaJs1_EQ@mail.gmail.com>
 <26135.50116.623107.613121@stat.math.ethz.ch>
 <bf5029c5-dd1b-4d81-93de-26da2c3fd561@gmail.com>
 <fd132c71-8730-91a9-7d15-bec45c24df54@uiowa.edu>
Message-ID: <CAPRVBcyTJ++P78Ycr0XQAuua6awxVPvzy8NJXjiW_pKc1MZr=Q@mail.gmail.com>

> I would assume that
>   library(Matrix, include.only="isDiagonal")
> implies that only `isDiagonal` ends up on the search path

This could also be a reasonable behavior, but neither does that happen
today.
> I think a far better approach to solve Michael's problem is simply to use
>   fac2sparse <- Matrix::fac2sparse

This does not fully simulate attachment, e.g. running package hooks &
resolving Depends.

> ?library could also mention using detach() followed by library() or
> attachNamespace() with a new include.only specification.

This is the "quite hard to accomplish" I alluded to, admittedly I hadn't
forced myself to write it all out -- maybe it's not as bad as all that.
After some iterations, today I think we'd want to do...

modify_attach = function(pkg, new_names) {
  if (!startsWith(pkg, "package:")) pkg <- paste0("package:", pkg)
  old <- tryCatch(ls(pkg, all.names=TRUE), error=\(c) character())
  if (length(old)) detach(pkg)
  attachNamespace(.rmpkg(pkg), include.only=c(new_names, old))
}

Perhaps detach() could invisibly return the exported names to make this a
tiny bit easier (today it returns NULL):

modify_attach = function(pkg, new_names) {
  if (!startsWith(pkg, "package:")) pkg <- paste0("package:", pkg)
  old <- tryCatch(detach(pkg), error=\(c) character())
  attachNamespace(.rmpkg(pkg), include.only=c(new_names, old))
}

Regardless, I think your suggestion to just point to
detach()+attachNamespace() is reasonable enough, the rare users that care
about this are likely to be able to figure out the rest from there.

On Thu, Apr 11, 2024 at 7:37?AM <luke-tierney at uiowa.edu> wrote:

> On Thu, 11 Apr 2024, Duncan Murdoch wrote:
>
> > On 11/04/2024 7:04 a.m., Martin Maechler wrote:
> >>>>>>> Michael Chirico
> >>>>>>>      on Mon, 8 Apr 2024 10:19:29 -0700 writes:
> >>
> >>      > Right now, attaching the same package with different
> include.only=
> >> has no
> >>      > effect:
> >>
> >>      > library(Matrix, include.only="fac2sparse")
> >>      > library(Matrix)
> >>      > ls("package:Matrix")
> >>      > # [1] "fac2sparse"
> >>
> >>      > ?library does not cover this case -- what is covered is the
> >> _loading_
> >>      > behavior of repeated calls:
> >>
> >>      >> [library and require] check and update the list of currently
> >> attached
> >>      > packages and do not reload a namespace which is already loaded
> >>
> >>      > But here we're looking at the _attach_ behavior of repeated
> calls.
> >>
> >>      > I am particularly interested in allowing the exports of a
> package to
> >> be
> >>      > built up gradually:
> >>
> >>      > library(Matrix, include.only="fac2sparse")
> >>      > library(Matrix, include.only="isDiagonal") # want:
> >> ls("package:Matrix") -->
> >>      > c("fac2sparse", "isDiagonal")
> >>      > ...
> >>
> >>      > It seems quite hard to accomplish this at the moment. Is the
> >> behavior to
> >>      > ignore new inclusions intentional? Could there be an argument to
> get
> >>      > different behavior?
> >>
> >> As you did not get an answer yet, ..., some remarks by an
> >> R-corer who has tweaked library() behavior in the past :
> >>
> >> - The `include.only = *` argument to library() has been a
> >>    *relatively* recent addition {given the 25+ years of R history}:
> >>
> >>    It was part of the extensive new features by Luke Tierney for
> >>    R 3.6.0  [r76248 | luke | 2019-03-18 17:29:35 +0100], with NEWS entry
> >>
> >>      ? library() and require() now allow more control over handling
> >>        search path conflicts when packages are attached. The policy is
> >>        controlled by the new conflicts.policy option.
> >>
> >> - I haven't seen these (then) new features been used much,
> unfortunately,
> >>    also not from R-core members, but I'd be happy to be told a
> different
> >> story.
> >>
> >> For the above reasons, it could well be that the current
> >> implementation {of these features} has not been exercised a lot
> >> yet, and limitations as you found them haven't been noticed yet,
> >> or at least not noticed on the public R mailing lists, nor
> >> otherwise by R-core (?).
> >>
> >> Your implicitly proposed new feature (or even *changed*
> >> default behavior) seems to make sense to me -- but as alluded
> >> to, above, I haven't been a conscious user of any
> >> 'library(.., include.only = *)' till now.
> >
> > I don't think it makes sense.  I would assume that
> >
> >  library(Matrix, include.only="isDiagonal")
> >
> > implies that only `isDiagonal` ends up on the search path, i.e.
> > "include.only" means "include only", not "include in addition to
> whatever
> > else has already been attached".
> >
> > I think a far better approach to solve Michael's problem is simply to use
> >
> >  fac2sparse <- Matrix::fac2sparse
> >  isDiagonal <- Matrix::isDiagonal
> >
> > instead of messing around with the user's search list, which may have
> been
> > intentionally set to include only one of those.
> >
> > So I'd suggest changing the docs to say
> >
> > "[library and require] check and update the list of currently attached
> > packages and do not reload a namespace which is already loaded.  If a
> package
> > is already attached, no change will be made."
>
> ?library could also mention using detach() followed by library() or
> attachNamespace() with a new include.only specification.
>
> Best,
>
> luke
>
> >
> > Duncan Murdoch
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/

	[[alternative HTML version deleted]]


From m@tthew@k@y @end|ng |rom u@northwe@tern@edu  Sun Apr 14 21:21:52 2024
From: m@tthew@k@y @end|ng |rom u@northwe@tern@edu (Matthew Kay)
Date: Sun, 14 Apr 2024 14:21:52 -0500
Subject: [Rd] Calling applyClosure from a package?
Message-ID: <CAPa38nEZWsAc_7-NDLZ4eRfEVRj-qvXPOw2ND5_VCwEkxLCA7g@mail.gmail.com>

Hi,

Short version of my question: Rf_applyClosure was marked
attribute_hidden in Oct 2023, and I am curious why and if there is an
alternative interface to it planned.

Long version:

I have been toying with building a package that makes it easier to do
non-standard evaluation directly using promises, rather than wrapping
these in a custom type (like e.g. rlang does). The advantage of this
approach is that it should be fully compatible with functions that use
the standard R functions for NSE and inspecting function context, like
substitute(), match.call(), or parent.frame(). And indeed, it works!
-- in R 4.3, that is. The prototype version of the package is here:
https://github.com/mjskay/uneval  (the relevant function to my
question is probably do_invoke, in R/invoke.R).

While testing on R-devel, I noticed that Rf_applyClosure(), which used
to be exported, is now marked with attribute_hidden. I traced the
change to this commit in Oct 2023:
https://github.com/r-devel/r-svn/commit/57dbe8ad471c8a34314ee74362ad479db03c033a

However, the commit message did not give me clarity on the reason for
the change, and I have not been able to find mention of this change in
R-devel, R-package-devel, or the R bug tracker.
So, I am curious why this function is no longer exported and if there
is an alternative function planned to take its place.

Neither Rf_eval nor do.call can do what I need to fully support
rlang-style NSE using base R. The problem is that I need to be able to
manually set up the list of promises provided as arguments to the
function.

I fully understand that the answer to my question might be "don't do
that" ;). But I will humbly suggest that it would be really nice to be
able to do NSE that can capture expressions with heterogeneous
environments and pass these to functions in a way that is compatible
with existing R functions that do NSE. The basic tools to do it are
there in R 4.3, I think...

Thanks for the help!

---Matt

-- 
Matthew Kay
Associate Professor
Computer Science & Communication Studies
Northwestern University
matthew.kay at u.northwestern.edu
http://www.mjskay.com/


From iuke-tier@ey m@iii@g oii uiow@@edu  Mon Apr 15 01:27:13 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sun, 14 Apr 2024 18:27:13 -0500 (CDT)
Subject: [Rd] [External]  Calling applyClosure from a package?
In-Reply-To: <CAPa38nEZWsAc_7-NDLZ4eRfEVRj-qvXPOw2ND5_VCwEkxLCA7g@mail.gmail.com>
References: <CAPa38nEZWsAc_7-NDLZ4eRfEVRj-qvXPOw2ND5_VCwEkxLCA7g@mail.gmail.com>
Message-ID: <a306ec0-3f23-ca96-768a-14f5eb22c5@uiowa.edu>

On Sun, 14 Apr 2024, Matthew Kay wrote:

> [You don't often get email from matthew.kay at u.northwestern.edu. Learn why this is important at https://aka.ms/LearnAboutSenderIdentification ]
>
> Hi,
>
> Short version of my question: Rf_applyClosure was marked
> attribute_hidden in Oct 2023, and I am curious why and if there is an
> alternative interface to it planned.

applyClosure has never been part of the API and was/is not intended
for use by packages. Keeping things like this internal is essential to
give us flexibility to make needed improvements to the basic engine.
Moving this out of the installed headers and marking it as not to be
exported merely clarifies that it is internal.

> Long version:
>
> I have been toying with building a package that makes it easier to do
> non-standard evaluation directly using promises, rather than wrapping
> these in a custom type (like e.g. rlang does). The advantage of this
> approach is that it should be fully compatible with functions that use
> the standard R functions for NSE and inspecting function context, like
> substitute(), match.call(), or parent.frame(). And indeed, it works!
> -- in R 4.3, that is. The prototype version of the package is here:
> https://github.com/mjskay/uneval  (the relevant function to my
> question is probably do_invoke, in R/invoke.R).
>
> While testing on R-devel, I noticed that Rf_applyClosure(), which used
> to be exported, is now marked with attribute_hidden. I traced the
> change to this commit in Oct 2023:
> https://github.com/r-devel/r-svn/commit/57dbe8ad471c8a34314ee74362ad479db03c033a
>
> However, the commit message did not give me clarity on the reason for
> the change, and I have not been able to find mention of this change in
> R-devel, R-package-devel, or the R bug tracker.
> So, I am curious why this function is no longer exported and if there
> is an alternative function planned to take its place.
>
> Neither Rf_eval nor do.call can do what I need to fully support
> rlang-style NSE using base R. The problem is that I need to be able to
> manually set up the list of promises provided as arguments to the
> function.
>
> I fully understand that the answer to my question might be "don't do
> that" ;).

That would be my advice: Don't do that. The API does not provide an
interface for working with promises; in fact the existence of promises
is not guaranteed in the future. Some packages have unfortunately made
use of some internal functions related to promises. For the ones on
CRAN we will work with the maintainers to find alternate
approaches. This may mean adding some functions to the API for dealing
with some lazy-evaluation-related features at a higher level.

Best,

luke

> But I will humbly suggest that it would be really nice to be
> able to do NSE that can capture expressions with heterogeneous
> environments and pass these to functions in a way that is compatible
> with existing R functions that do NSE. The basic tools to do it are
> there in R 4.3, I think...
>
> Thanks for the help!
>
> ---Matt
>
> --
> Matthew Kay
> Associate Professor
> Computer Science & Communication Studies
> Northwestern University
> matthew.kay at u.northwestern.edu
> http://www.mjskay.com/
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Apr 15 15:46:25 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 15 Apr 2024 15:46:25 +0200
Subject: [Rd] [External] Re: Repeated library() of one package with
 different include.only= entries
In-Reply-To: <CAPRVBcyTJ++P78Ycr0XQAuua6awxVPvzy8NJXjiW_pKc1MZr=Q@mail.gmail.com>
References: <CAPRVBcy8u+2K+4Gw=FnYqt5We-qwPVuA0QDoOCmSAcqaJs1_EQ@mail.gmail.com>
 <26135.50116.623107.613121@stat.math.ethz.ch>
 <bf5029c5-dd1b-4d81-93de-26da2c3fd561@gmail.com>
 <fd132c71-8730-91a9-7d15-bec45c24df54@uiowa.edu>
 <CAPRVBcyTJ++P78Ycr0XQAuua6awxVPvzy8NJXjiW_pKc1MZr=Q@mail.gmail.com>
Message-ID: <26141.12209.80775.149421@stat.math.ethz.ch>

I think we should try to advance and hopefully finalize this
thread before we forget about it ..

>>>>> Michael Chirico  n Thu, 11 Apr 2024 09:10:11 -0700 writes:

    >> I would assume that

    >> library(Matrix, include.only="isDiagonal")

    >> implies that only `isDiagonal` ends up on the search path

    > This could also be a reasonable behavior, but neither does that happen
    > today.

Indeed; I think we should signal a warning at least in the case
it does not happen --- namely when "parts of Matrix" are already
in the search path.

    >> I think a far better approach to solve Michael's problem is simply to use

    >> fac2sparse <- Matrix::fac2sparse

    > This does not fully simulate attachment, e.g. running package hooks &
    > resolving Depends.

(indeed; as library() is really about search() patch attchment)

    >> ?library could also mention using detach() followed by library() or
    >> attachNamespace() with a new include.only specification.

    > This is the "quite hard to accomplish" I alluded to, admittedly I hadn't
    > forced myself to write it all out -- maybe it's not as bad as all that.
    > After some iterations, today I think we'd want to do...

    > modify_attach <- function(pkg, new_names) {
    >   if (!startsWith(pkg, "package:")) pkg <- paste0("package:", pkg)
    >   old <- tryCatch(ls(pkg, all.names=TRUE), error=\(c) character())
    >   if (length(old)) detach(pkg)
    >   attachNamespace(.rmpkg(pkg), include.only=c(new_names, old))
    > }

    > Perhaps detach() could invisibly return the exported names to make this a
    > tiny bit easier (today it returns NULL):

I agree that such changed detach() behavior would be "nice" here;
but I wouldn't like to change its default behavior, notably as
in 99.5% of its use, the names would not be used.
I'd agree to add a new option for detach() to return the names
(visibly in that case).

    > modify_attach <- function(pkg, new_names) {
    >   if (!startsWith(pkg, "package:")) pkg <- paste0("package:", pkg)
    >   old <- tryCatch(detach(pkg), error=\(c) character())
    >   attachNamespace(.rmpkg(pkg), include.only=c(new_names, old))
    > }

    > Regardless, I think your suggestion to just point to
    > detach()+attachNamespace() is reasonable enough, the rare users that care
    > about this are likely to be able to figure out the rest from there.

So I think we agree here;  mentioning such a modify_attach()
... I'd use an example *without* tryCatch() as I think the user
    should choose their own line of action in such cases
...
on the help page would then be appropriate. 

Martin

    > On Thu, Apr 11, 2024 at 7:37?AM <luke-tierney at uiowa.edu> wrote:

    >> On Thu, 11 Apr 2024, Duncan Murdoch wrote:
    >> 
    >> > On 11/04/2024 7:04 a.m., Martin Maechler wrote:
    >> >>>>>>> Michael Chirico
    >> >>>>>>>      on Mon, 8 Apr 2024 10:19:29 -0700 writes:
    >> >>
    >> >>      > Right now, attaching the same package with different
    >> include.only= has no effect:
    >> >>
    >> >>      > library(Matrix, include.only="fac2sparse")
    >> >>      > library(Matrix)
    >> >>      > ls("package:Matrix")
    >> >>      > # [1] "fac2sparse"
    >> >>
    >> >>      > ?library does not cover this case -- what is covered is the _loading_
    >> >>      > behavior of repeated calls:
    >> >>
    >> >>      >> [library and require] check and update the list of currently attached
    >> >>      > packages and do not reload a namespace which is already loaded
    >> >>
    >> >>      > But here we're looking at the _attach_ behavior of repeated calls.
    >> >>
    >> >>      > I am particularly interested in allowing the exports of a
    >> package to be
    >> >>      > built up gradually:
    >> >>
    >> >>      > library(Matrix, include.only="fac2sparse")
    >> >>      > library(Matrix, include.only="isDiagonal") # want:ls("package:Matrix") -->
    >> >>      > c("fac2sparse", "isDiagonal")
    >> >>      > ...
    >> >>
    >> >>      > It seems quite hard to accomplish this at the moment. Is the behavior to
    >> >>      > ignore new inclusions intentional? Could there be an argument to get
    >> >>      > different behavior?
    >> >>
    >> >> As you did not get an answer yet, ..., some remarks by an
    >> >> R-corer who has tweaked library() behavior in the past :
    >> >>
    >> >> - The `include.only = *` argument to library() has been a
    >> >>    *relatively* recent addition {given the 25+ years of R history}:
    >> >>
    >> >>    It was part of the extensive new features by Luke Tierney for
    >> >>    R 3.6.0  [r76248 | luke | 2019-03-18 17:29:35 +0100], with NEWS entry
    >> >>
    >> >>      ? library() and require() now allow more control over handling
    >> >>        search path conflicts when packages are attached. The policy is
    >> >>        controlled by the new conflicts.policy option.
    >> >>
    >> >> - I haven't seen these (then) new features been used much, unfortunately,
    >> >>    also not from R-core members, but I'd be happy to
    >> >>    be told a different story.
    >> >>
    >> >> For the above reasons, it could well be that the current
    >> >> implementation {of these features} has not been exercised a lot
    >> >> yet, and limitations as you found them haven't been noticed yet,
    >> >> or at least not noticed on the public R mailing lists, nor
    >> >> otherwise by R-core (?).
    >> >>
    >> >> Your implicitly proposed new feature (or even *changed*
    >> >> default behavior) seems to make sense to me -- but as alluded
    >> >> to, above, I haven't been a conscious user of any
    >> >> 'library(.., include.only = *)' till now.
    >> >
    >> > I don't think it makes sense.  I would assume that
    >> >
    >> >  library(Matrix, include.only="isDiagonal")
    >> >
    >> > implies that only `isDiagonal` ends up on the search path, i.e.
    >> > "include.only" means "include only", not "include in addition to whatever
    >> > else has already been attached".
    >> >
    >> > I think a far better approach to solve Michael's problem is simply to use
    >> >
    >> >  fac2sparse <- Matrix::fac2sparse
    >> >  isDiagonal <- Matrix::isDiagonal
    >> >
    >> > instead of messing around with the user's search list, which may have been
    >> > intentionally set to include only one of those.
    >> >
    >> > So I'd suggest changing the docs to say
    >> >
    >> > "[library and require] check and update the list of currently attached
    >> > packages and do not reload a namespace which is already loaded. 
    >> >  If a package is already attached, no change will be made."
    >> 
    >> ?library could also mention using detach() followed by library() or
    >> attachNamespace() with a new include.only specification.
    >> 
    >> Best,
    >> 
    >> luke
    >> 
    >> >
    >> > Duncan Murdoch


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Mon Apr 15 18:57:07 2024
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Mon, 15 Apr 2024 09:57:07 -0700
Subject: [Rd] [External] Re: Repeated library() of one package with
 different include.only= entries
In-Reply-To: <26141.12209.80775.149421@stat.math.ethz.ch>
References: <CAPRVBcy8u+2K+4Gw=FnYqt5We-qwPVuA0QDoOCmSAcqaJs1_EQ@mail.gmail.com>
 <26135.50116.623107.613121@stat.math.ethz.ch>
 <bf5029c5-dd1b-4d81-93de-26da2c3fd561@gmail.com>
 <fd132c71-8730-91a9-7d15-bec45c24df54@uiowa.edu>
 <CAPRVBcyTJ++P78Ycr0XQAuua6awxVPvzy8NJXjiW_pKc1MZr=Q@mail.gmail.com>
 <26141.12209.80775.149421@stat.math.ethz.ch>
Message-ID: <CAPRVBczt4ath5TBJ_cnyyyuKMPuHd6fYVhenEGYjhANerCdJNg@mail.gmail.com>

OK, I've moved your suggestions into the tracker for further discussion:

https://bugs.r-project.org/show_bug.cgi?id=18703
https://bugs.r-project.org/show_bug.cgi?id=18704
https://bugs.r-project.org/show_bug.cgi?id=18705

I will tackle a patch for 18705 to start with as the lowest-hanging fruit.

On Mon, Apr 15, 2024 at 6:46?AM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> I think we should try to advance and hopefully finalize this
> thread before we forget about it ..
>
> >>>>> Michael Chirico  n Thu, 11 Apr 2024 09:10:11 -0700 writes:
>
>     >> I would assume that
>
>     >> library(Matrix, include.only="isDiagonal")
>
>     >> implies that only `isDiagonal` ends up on the search path
>
>     > This could also be a reasonable behavior, but neither does that
> happen
>     > today.
>
> Indeed; I think we should signal a warning at least in the case
> it does not happen --- namely when "parts of Matrix" are already
> in the search path.
>
>     >> I think a far better approach to solve Michael's problem is simply
> to use
>
>     >> fac2sparse <- Matrix::fac2sparse
>
>     > This does not fully simulate attachment, e.g. running package hooks &
>     > resolving Depends.
>
> (indeed; as library() is really about search() patch attchment)
>
>     >> ?library could also mention using detach() followed by library() or
>     >> attachNamespace() with a new include.only specification.
>
>     > This is the "quite hard to accomplish" I alluded to, admittedly I
> hadn't
>     > forced myself to write it all out -- maybe it's not as bad as all
> that.
>     > After some iterations, today I think we'd want to do...
>
>     > modify_attach <- function(pkg, new_names) {
>     >   if (!startsWith(pkg, "package:")) pkg <- paste0("package:", pkg)
>     >   old <- tryCatch(ls(pkg, all.names=TRUE), error=\(c) character())
>     >   if (length(old)) detach(pkg)
>     >   attachNamespace(.rmpkg(pkg), include.only=c(new_names, old))
>     > }
>
>     > Perhaps detach() could invisibly return the exported names to make
> this a
>     > tiny bit easier (today it returns NULL):
>
> I agree that such changed detach() behavior would be "nice" here;
> but I wouldn't like to change its default behavior, notably as
> in 99.5% of its use, the names would not be used.
> I'd agree to add a new option for detach() to return the names
> (visibly in that case).
>
>     > modify_attach <- function(pkg, new_names) {
>     >   if (!startsWith(pkg, "package:")) pkg <- paste0("package:", pkg)
>     >   old <- tryCatch(detach(pkg), error=\(c) character())
>     >   attachNamespace(.rmpkg(pkg), include.only=c(new_names, old))
>     > }
>
>     > Regardless, I think your suggestion to just point to
>     > detach()+attachNamespace() is reasonable enough, the rare users that
> care
>     > about this are likely to be able to figure out the rest from there.
>
> So I think we agree here;  mentioning such a modify_attach()
> ... I'd use an example *without* tryCatch() as I think the user
>     should choose their own line of action in such cases
> ...
> on the help page would then be appropriate.
>
> Martin
>
>     > On Thu, Apr 11, 2024 at 7:37?AM <luke-tierney at uiowa.edu> wrote:
>
>     >> On Thu, 11 Apr 2024, Duncan Murdoch wrote:
>     >>
>     >> > On 11/04/2024 7:04 a.m., Martin Maechler wrote:
>     >> >>>>>>> Michael Chirico
>     >> >>>>>>>      on Mon, 8 Apr 2024 10:19:29 -0700 writes:
>     >> >>
>     >> >>      > Right now, attaching the same package with different
>     >> include.only= has no effect:
>     >> >>
>     >> >>      > library(Matrix, include.only="fac2sparse")
>     >> >>      > library(Matrix)
>     >> >>      > ls("package:Matrix")
>     >> >>      > # [1] "fac2sparse"
>     >> >>
>     >> >>      > ?library does not cover this case -- what is covered is
> the _loading_
>     >> >>      > behavior of repeated calls:
>     >> >>
>     >> >>      >> [library and require] check and update the list of
> currently attached
>     >> >>      > packages and do not reload a namespace which is already
> loaded
>     >> >>
>     >> >>      > But here we're looking at the _attach_ behavior of
> repeated calls.
>     >> >>
>     >> >>      > I am particularly interested in allowing the exports of a
>     >> package to be
>     >> >>      > built up gradually:
>     >> >>
>     >> >>      > library(Matrix, include.only="fac2sparse")
>     >> >>      > library(Matrix, include.only="isDiagonal") #
> want:ls("package:Matrix") -->
>     >> >>      > c("fac2sparse", "isDiagonal")
>     >> >>      > ...
>     >> >>
>     >> >>      > It seems quite hard to accomplish this at the moment. Is
> the behavior to
>     >> >>      > ignore new inclusions intentional? Could there be an
> argument to get
>     >> >>      > different behavior?
>     >> >>
>     >> >> As you did not get an answer yet, ..., some remarks by an
>     >> >> R-corer who has tweaked library() behavior in the past :
>     >> >>
>     >> >> - The `include.only = *` argument to library() has been a
>     >> >>    *relatively* recent addition {given the 25+ years of R
> history}:
>     >> >>
>     >> >>    It was part of the extensive new features by Luke Tierney for
>     >> >>    R 3.6.0  [r76248 | luke | 2019-03-18 17:29:35 +0100], with
> NEWS entry
>     >> >>
>     >> >>      ? library() and require() now allow more control over
> handling
>     >> >>        search path conflicts when packages are attached. The
> policy is
>     >> >>        controlled by the new conflicts.policy option.
>     >> >>
>     >> >> - I haven't seen these (then) new features been used much,
> unfortunately,
>     >> >>    also not from R-core members, but I'd be happy to
>     >> >>    be told a different story.
>     >> >>
>     >> >> For the above reasons, it could well be that the current
>     >> >> implementation {of these features} has not been exercised a lot
>     >> >> yet, and limitations as you found them haven't been noticed yet,
>     >> >> or at least not noticed on the public R mailing lists, nor
>     >> >> otherwise by R-core (?).
>     >> >>
>     >> >> Your implicitly proposed new feature (or even *changed*
>     >> >> default behavior) seems to make sense to me -- but as alluded
>     >> >> to, above, I haven't been a conscious user of any
>     >> >> 'library(.., include.only = *)' till now.
>     >> >
>     >> > I don't think it makes sense.  I would assume that
>     >> >
>     >> >  library(Matrix, include.only="isDiagonal")
>     >> >
>     >> > implies that only `isDiagonal` ends up on the search path, i.e.
>     >> > "include.only" means "include only", not "include in addition to
> whatever
>     >> > else has already been attached".
>     >> >
>     >> > I think a far better approach to solve Michael's problem is
> simply to use
>     >> >
>     >> >  fac2sparse <- Matrix::fac2sparse
>     >> >  isDiagonal <- Matrix::isDiagonal
>     >> >
>     >> > instead of messing around with the user's search list, which may
> have been
>     >> > intentionally set to include only one of those.
>     >> >
>     >> > So I'd suggest changing the docs to say
>     >> >
>     >> > "[library and require] check and update the list of currently
> attached
>     >> > packages and do not reload a namespace which is already loaded.
>     >> >  If a package is already attached, no change will be made."
>     >>
>     >> ?library could also mention using detach() followed by library() or
>     >> attachNamespace() with a new include.only specification.
>     >>
>     >> Best,
>     >>
>     >> luke
>     >>
>     >> >
>     >> > Duncan Murdoch
>
>
>

	[[alternative HTML version deleted]]


From j|nghu@zh@o @end|ng |rom hotm@||@com  Tue Apr 16 12:46:02 2024
From: j|nghu@zh@o @end|ng |rom hotm@||@com (jing hua zhao)
Date: Tue, 16 Apr 2024 10:46:02 +0000
Subject: [Rd] read.csv
In-Reply-To: <C1CC6BFB-4735-4156-82CA-3B17091EF0B0@cbs.dk>
References: <C1CC6BFB-4735-4156-82CA-3B17091EF0B0@cbs.dk>
Message-ID: <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>

Dear R-developers,

I came to a somewhat unexpected behaviour of read.csv() which is trivial but worthwhile to note -- my data involves a protein named "1433E" but to save space I drop the quote so it becomes,

Gene,SNP,prot,log10p
YWHAE,13:62129097_C_T,1433E,7.35
YWHAE,4:72617557_T_TA,1433E,7.73

Both read.cv() and readr::read_csv() consider prot(ein) name as (possibly confused by scientific notation) numeric 1433 which only alerts me when I tried to combine data,

all_data <- data.frame()
for (protein in proteins[1:7])
{
   cat(protein,":\n")
   f <- paste0(protein,".csv")
   if(file.exists(f))
   {
     p <- read.csv(f)
     print(p)
     if(nrow(p)>0) all_data  <- bind_rows(all_data,p)
   }
}

proteins[1:7]
[1] "1433B" "1433E" "1433F" "1433G" "1433S" "1433T" "1433Z"

dplyr::bind_rows() failed to work due to incompatible types nevertheless rbind() went ahead without warnings.

Best wishes,


Jing Hua


From edd @end|ng |rom deb|@n@org  Tue Apr 16 12:52:09 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 16 Apr 2024 05:52:09 -0500
Subject: [Rd] read.csv
In-Reply-To: <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
References: <C1CC6BFB-4735-4156-82CA-3B17091EF0B0@cbs.dk>
 <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <26142.22617.861374.789716@rob.eddelbuettel.com>


On 16 April 2024 at 10:46, jing hua zhao wrote:
| Dear R-developers,
| 
| I came to a somewhat unexpected behaviour of read.csv() which is trivial but worthwhile to note -- my data involves a protein named "1433E" but to save space I drop the quote so it becomes,
| 
| Gene,SNP,prot,log10p
| YWHAE,13:62129097_C_T,1433E,7.35
| YWHAE,4:72617557_T_TA,1433E,7.73
| 
| Both read.cv() and readr::read_csv() consider prot(ein) name as (possibly confused by scientific notation) numeric 1433 which only alerts me when I tried to combine data,
| 
| all_data <- data.frame()
| for (protein in proteins[1:7])
| {
|    cat(protein,":\n")
|    f <- paste0(protein,".csv")
|    if(file.exists(f))
|    {
|      p <- read.csv(f)
|      print(p)
|      if(nrow(p)>0) all_data  <- bind_rows(all_data,p)
|    }
| }
| 
| proteins[1:7]
| [1] "1433B" "1433E" "1433F" "1433G" "1433S" "1433T" "1433Z"
| 
| dplyr::bind_rows() failed to work due to incompatible types nevertheless rbind() went ahead without warnings.

You may need to reconsider aiding read.csv() (and alternate reading
functions) by supplying column-type info instead of relying on educated
heuristic guesses which appear to fail here due to the nature of your data.

Other storage formats can store type info. That is generally safer and may be
an option too.

I think this was more of an email for r-help than r-devel.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Tue Apr 16 13:36:36 2024
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Tue, 16 Apr 2024 12:36:36 +0100
Subject: [Rd] read.csv
In-Reply-To: <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
References: <C1CC6BFB-4735-4156-82CA-3B17091EF0B0@cbs.dk>
 <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <285f4592-b0d8-4c1e-b3b2-bfce36e30d79@sapo.pt>

?s 11:46 de 16/04/2024, jing hua zhao escreveu:
> Dear R-developers,
> 
> I came to a somewhat unexpected behaviour of read.csv() which is trivial but worthwhile to note -- my data involves a protein named "1433E" but to save space I drop the quote so it becomes,
> 
> Gene,SNP,prot,log10p
> YWHAE,13:62129097_C_T,1433E,7.35
> YWHAE,4:72617557_T_TA,1433E,7.73
> 
> Both read.cv() and readr::read_csv() consider prot(ein) name as (possibly confused by scientific notation) numeric 1433 which only alerts me when I tried to combine data,
> 
> all_data <- data.frame()
> for (protein in proteins[1:7])
> {
>     cat(protein,":\n")
>     f <- paste0(protein,".csv")
>     if(file.exists(f))
>     {
>       p <- read.csv(f)
>       print(p)
>       if(nrow(p)>0) all_data  <- bind_rows(all_data,p)
>     }
> }
> 
> proteins[1:7]
> [1] "1433B" "1433E" "1433F" "1433G" "1433S" "1433T" "1433Z"
> 
> dplyr::bind_rows() failed to work due to incompatible types nevertheless rbind() went ahead without warnings.
> 
> Best wishes,
> 
> 
> Jing Hua
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
Hello,

I wrote a file with that content and read it back with


read.csv("filename.csv", as.is = TRUE)


There were no problems, it all worked as expected.

Hope this helps,

Rui Barradas




-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From pd@|gd @end|ng |rom gm@||@com  Tue Apr 16 14:03:40 2024
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 16 Apr 2024 14:03:40 +0200
Subject: [Rd] read.csv
In-Reply-To: <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
References: <C1CC6BFB-4735-4156-82CA-3B17091EF0B0@cbs.dk>
 <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <C381250A-3195-498C-A428-40D56C52A2AC@gmail.com>

Hum...

This boils down to

> as.numeric("1.23e")
[1] 1.23
> as.numeric("1.23e-")
[1] 1.23
> as.numeric("1.23e+")
[1] 1.23

which in turn comes from this code in src/main/util.c (function R_strtod)

    if (*p == 'e' || *p == 'E') {
        int expsign = 1;
        switch(*++p) {
        case '-': expsign = -1;
        case '+': p++;
        default: ;
        }
        for (n = 0; *p >= '0' && *p <= '9'; p++) n = (n < MAX_EXPONENT_PREFIX) ? n * 10 + (*p - '0') : n;
        expn += expsign * n;
    }

which sets the exponent to zero even if the for loop terminates immediately.  

This might qualify as a bug, as it differs from the C function strtod which accepts

"A sequence of digits, optionally containing a decimal-point character (.), optionally followed by an exponent part (an e or E character followed by an optional sign and a sequence of digits)."

[Of course, there would be nothing to stop e.g. "1433E1" from being converted to numeric.]

-pd


> On 16 Apr 2024, at 12:46 , jing hua zhao <jinghuazhao at hotmail.com> wrote:
> 
> Dear R-developers,
> 
> I came to a somewhat unexpected behaviour of read.csv() which is trivial but worthwhile to note -- my data involves a protein named "1433E" but to save space I drop the quote so it becomes,
> 
> Gene,SNP,prot,log10p
> YWHAE,13:62129097_C_T,1433E,7.35
> YWHAE,4:72617557_T_TA,1433E,7.73
> 
> Both read.cv() and readr::read_csv() consider prot(ein) name as (possibly confused by scientific notation) numeric 1433 which only alerts me when I tried to combine data,
> 
> all_data <- data.frame()
> for (protein in proteins[1:7])
> {
>   cat(protein,":\n")
>   f <- paste0(protein,".csv")
>   if(file.exists(f))
>   {
>     p <- read.csv(f)
>     print(p)
>     if(nrow(p)>0) all_data  <- bind_rows(all_data,p)
>   }
> }
> 
> proteins[1:7]
> [1] "1433B" "1433E" "1433F" "1433G" "1433S" "1433T" "1433Z"
> 
> dplyr::bind_rows() failed to work due to incompatible types nevertheless rbind() went ahead without warnings.
> 
> Best wishes,
> 
> 
> Jing Hua
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Apr 16 14:11:40 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 16 Apr 2024 08:11:40 -0400
Subject: [Rd] read.csv
In-Reply-To: <285f4592-b0d8-4c1e-b3b2-bfce36e30d79@sapo.pt>
References: <C1CC6BFB-4735-4156-82CA-3B17091EF0B0@cbs.dk>
 <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
 <285f4592-b0d8-4c1e-b3b2-bfce36e30d79@sapo.pt>
Message-ID: <0f79ad00-3c90-48e8-bda6-0effa1028888@gmail.com>

On 16/04/2024 7:36 a.m., Rui Barradas wrote:
> ?s 11:46 de 16/04/2024, jing hua zhao escreveu:
>> Dear R-developers,
>>
>> I came to a somewhat unexpected behaviour of read.csv() which is trivial but worthwhile to note -- my data involves a protein named "1433E" but to save space I drop the quote so it becomes,
>>
>> Gene,SNP,prot,log10p
>> YWHAE,13:62129097_C_T,1433E,7.35
>> YWHAE,4:72617557_T_TA,1433E,7.73
>>
>> Both read.cv() and readr::read_csv() consider prot(ein) name as (possibly confused by scientific notation) numeric 1433 which only alerts me when I tried to combine data,
>>
>> all_data <- data.frame()
>> for (protein in proteins[1:7])
>> {
>>      cat(protein,":\n")
>>      f <- paste0(protein,".csv")
>>      if(file.exists(f))
>>      {
>>        p <- read.csv(f)
>>        print(p)
>>        if(nrow(p)>0) all_data  <- bind_rows(all_data,p)
>>      }
>> }
>>
>> proteins[1:7]
>> [1] "1433B" "1433E" "1433F" "1433G" "1433S" "1433T" "1433Z"
>>
>> dplyr::bind_rows() failed to work due to incompatible types nevertheless rbind() went ahead without warnings.
>>
>> Best wishes,
>>
>>
>> Jing Hua
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> Hello,
> 
> I wrote a file with that content and read it back with
> 
> 
> read.csv("filename.csv", as.is = TRUE)
> 
> 
> There were no problems, it all worked as expected.

What platform are you on?  I got the same output as Jing Hua:

Input filename.csv:

Gene,SNP,prot,log10p
YWHAE,13:62129097_C_T,1433E,7.35
YWHAE,4:72617557_T_TA,1433E,7.73

Output:

 > read.csv("filename.csv")
    Gene             SNP prot log10p
1 YWHAE 13:62129097_C_T 1433   7.35
2 YWHAE 4:72617557_T_TA 1433   7.73

Duncan Murdoch


From edd @end|ng |rom deb|@n@org  Tue Apr 16 14:22:19 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 16 Apr 2024 07:22:19 -0500
Subject: [Rd] read.csv
In-Reply-To: <C381250A-3195-498C-A428-40D56C52A2AC@gmail.com>
References: <C1CC6BFB-4735-4156-82CA-3B17091EF0B0@cbs.dk>
 <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
 <C381250A-3195-498C-A428-40D56C52A2AC@gmail.com>
Message-ID: <26142.28027.698465.688603@rob.eddelbuettel.com>


As an aside, the odd format does not seem to bother data.table::fread() which
also happens to be my personally preferred workhorse for these tasks:

> fname <- "/tmp/r/filename.csv"
> read.csv(fname)
   Gene             SNP prot log10p
1 YWHAE 13:62129097_C_T 1433   7.35
2 YWHAE 4:72617557_T_TA 1433   7.73
> data.table::fread(fname)
     Gene             SNP   prot log10p
   <char>          <char> <char>  <num>
1:  YWHAE 13:62129097_C_T  1433E   7.35
2:  YWHAE 4:72617557_T_TA  1433E   7.73
> readr::read_csv(fname)
Rows: 2 Columns: 4
?? Column specification ??????????????????????????????????????????????????????????????????????????????
Delimiter: ","
chr (2): Gene, SNP
dbl (2): prot, log10p

? Use `spec()` to retrieve the full column specification for this data.
? Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 2 ? 4
  Gene  SNP              prot log10p
  <chr> <chr>           <dbl>  <dbl>
1 YWHAE 13:62129097_C_T  1433   7.35
2 YWHAE 4:72617557_T_TA  1433   7.73
> 

That's on Linux, everything current but dev version of data.table.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From bbo|ker @end|ng |rom gm@||@com  Tue Apr 16 14:37:01 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 16 Apr 2024 08:37:01 -0400
Subject: [Rd] read.csv
In-Reply-To: <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
References: <C1CC6BFB-4735-4156-82CA-3B17091EF0B0@cbs.dk>
 <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <74a5e758-9cd7-4698-8b4d-5e58e878440c@gmail.com>

   Tangentially, your code will be more efficient if you add the data 
files to a *list* one by one and then apply bind_rows or 
do.call(rbind,...) after you have accumulated all of the information 
(see chapter 2 of the _R Inferno_). This may or may not be practically 
important in your particular case.

Burns, Patrick. 2012. The R Inferno. Lulu.com. 
http://www.burns-stat.com/pages/Tutor/R_inferno.pdf.


On 2024-04-16 6:46 a.m., jing hua zhao wrote:
> Dear R-developers,
> 
> I came to a somewhat unexpected behaviour of read.csv() which is trivial but worthwhile to note -- my data involves a protein named "1433E" but to save space I drop the quote so it becomes,
> 
> Gene,SNP,prot,log10p
> YWHAE,13:62129097_C_T,1433E,7.35
> YWHAE,4:72617557_T_TA,1433E,7.73
> 
> Both read.cv() and readr::read_csv() consider prot(ein) name as (possibly confused by scientific notation) numeric 1433 which only alerts me when I tried to combine data,
> 
> all_data <- data.frame()
> for (protein in proteins[1:7])
> {
>     cat(protein,":\n")
>     f <- paste0(protein,".csv")
>     if(file.exists(f))
>     {
>       p <- read.csv(f)
>       print(p)
>       if(nrow(p)>0) all_data  <- bind_rows(all_data,p)
>     }
> }
> 
> proteins[1:7]
> [1] "1433B" "1433E" "1433F" "1433G" "1433S" "1433T" "1433Z"
> 
> dplyr::bind_rows() failed to work due to incompatible types nevertheless rbind() went ahead without warnings.
> 
> Best wishes,
> 
> 
> Jing Hua
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From r@c@rtwr|ght @end|ng |rom gm@||@com  Tue Apr 16 20:21:49 2024
From: r@c@rtwr|ght @end|ng |rom gm@||@com (Reed A. Cartwright)
Date: Tue, 16 Apr 2024 11:21:49 -0700
Subject: [Rd] read.csv
In-Reply-To: <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
References: <C1CC6BFB-4735-4156-82CA-3B17091EF0B0@cbs.dk>
 <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <CALOkxuy1Y-0B0Vg2OW23WJG3=r=1FyT94Na1G7R+Di6GeACFdw@mail.gmail.com>

Gene names being misinterpreted by spreadsheet software (read.csv is
no different) is a classic issue in bioinformatics. It seems like
every practitioner ends up encountering this issue in due time. E.g.

https://pubmed.ncbi.nlm.nih.gov/15214961/

https://genomebiology.biomedcentral.com/articles/10.1186/s13059-016-1044-7

https://www.nature.com/articles/d41586-021-02211-4

https://www.theverge.com/2020/8/6/21355674/human-genes-rename-microsoft-excel-misreading-dates


On Tue, Apr 16, 2024 at 3:46?AM jing hua zhao <jinghuazhao at hotmail.com> wrote:
>
> Dear R-developers,
>
> I came to a somewhat unexpected behaviour of read.csv() which is trivial but worthwhile to note -- my data involves a protein named "1433E" but to save space I drop the quote so it becomes,
>
> Gene,SNP,prot,log10p
> YWHAE,13:62129097_C_T,1433E,7.35
> YWHAE,4:72617557_T_TA,1433E,7.73
>
> Both read.cv() and readr::read_csv() consider prot(ein) name as (possibly confused by scientific notation) numeric 1433 which only alerts me when I tried to combine data,
>
> all_data <- data.frame()
> for (protein in proteins[1:7])
> {
>    cat(protein,":\n")
>    f <- paste0(protein,".csv")
>    if(file.exists(f))
>    {
>      p <- read.csv(f)
>      print(p)
>      if(nrow(p)>0) all_data  <- bind_rows(all_data,p)
>    }
> }
>
> proteins[1:7]
> [1] "1433B" "1433E" "1433F" "1433G" "1433S" "1433T" "1433Z"
>
> dplyr::bind_rows() failed to work due to incompatible types nevertheless rbind() went ahead without warnings.
>
> Best wishes,
>
>
> Jing Hua
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!IKRxdwAv5BmarQ!YJzURlAK1O3rlvXvq9xl99aUaYL5iKm9gnN5RBi-WJtWa5IEtodN3vaN9pCvRTZA23dZyfrVD7X8nlYUk7S1AK893A$


From m@rchywk@ @end|ng |rom hotm@||@com  Wed Apr 17 11:42:25 2024
From: m@rchywk@ @end|ng |rom hotm@||@com (Mike Marchywka)
Date: Wed, 17 Apr 2024 09:42:25 +0000
Subject: [Rd] using Paraview "in-situ" with R?
In-Reply-To: <450D9456-89A0-4589-B677-F5A524B2928E@gmail.com>
References: <mailman.53974.3.1704884401.50676.r-devel@r-project.org>
 <450D9456-89A0-4589-B677-F5A524B2928E@gmail.com>
Message-ID: <BL3PR11MB63384F7DD867D47AC3B1BBBBBE0F2@BL3PR11MB6338.namprd11.prod.outlook.com>

I'm posting here instead of R-package since your response
was the most relevant :) I started using the "in-situ" workflow
and its very nice.  Thew viewer stays up between runs and across
data sources and its the same UI regardless of source :) 
fwiw. 

I started digging through some noisy data, dog diet data
in which the supplements were pulsed ( in essence PWM lol).
This made it hard to find the right average doses to correlate
with outcomes. I had to play with trailing average filtering but
ultimately some trends emerged that made sense with
subjective observations ( maybe they are not real but that is
not the point of this post ).

I did not use R or Visit but  I used my own code 
for filtering and MJMDatascope for viewing and expect
to do more sophisticated stuff in R soon. I can tell you
though that eliminating the annoyance and confusion of
temp files was very helpful. The workflow, and mind flow,
for the "in situ" mode makes you wonder how you ever did without
it. I will probably need to update my R interface package and
MJMDatascope is hardly ideal but improving both seems
worth the effort.

Thanks.


?Mike Marchywka?
44 Crosscreek Trail
Jasper GA 30143
was 306 Charles Cox Drive? Canton, GA 30115
470-758-0799
404-788-1216?




________________________________________
From: George Ostrouchov <georgeost at gmail.com>
Sent: Wednesday, January 10, 2024 3:06 PM
To: r-devel at r-project.org
Cc: Mike Marchywka
Subject: Re:  [Rd] using Paraview "in-situ" with R?

At ORNL, we worked with VisIt (a sibling of Paraview, both funded largely by DOE) around 2016 and made an in situ demo with R. We used packages pbdMPI (on CRAN) and pbdDMAT (on GitHub/RbigData), which were in part built for this purpose. Later also the package hola (on GitHub/RbigData) was built to connect with adios2, which can do buffered in situ connections with various codes.

But the VisIt developers were not interested in R (preferring to roll their own), so that direction fizzled. Paraview is a competetive sibling of VisIt, so I don?t know if they would be interested. The packages we developed are viable for that purpose. There is a lot in R that could benefit Paraview (or VisIt).

George

>
> Message: 1
> Date: Tue, 9 Jan 2024 14:20:17 +0000
> From: Mike Marchywka <marchywka at hotmail.com>
> To: R-devel <r-devel at r-project.org>
> Subject: [Rd] using Paraview "in-situ" with R?
> Message-ID:
>       <BL3PR11MB6338D814D9A3FF932D7E7F49BE6A2 at BL3PR11MB6338.namprd11.prod.outlook.com>
>
> Content-Type: text/plain; charset="iso-8859-1"
>
> I had previously asked about R interfaces to various "other" visualization
> tools specifically lightweights for monitoring progress of
> various codes. I was working on this,
>
> https://github.com/mmarchywka/mjmdatascope
>
> but in the meantime found out that Paraview has an "in-situ"
> capability for similar objectives.
>
> https://discourse.paraview.org/t/does-or-can-paraview-support-streaming-input/13637/9
>
> While R does have a lot of plotting features,
> it seems like an excellent tool to interface to R allowing visualization without
> a bunch of temp files or
>
> Is anyone aware of anyone doing this interface or reasons its  a boondoggle?
>
> Thanks.
>
>
>
>  Mike Marchywka
> 44 Crosscreek Trail
> Jasper GA 30143
> was 306 Charles Cox Drive  Canton, GA 30115
> 470-758-0799
> 404-788-1216
>



From yut@n|@|n| @end|ng |rom gm@||@com  Mon Apr 22 02:47:33 2024
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Mon, 22 Apr 2024 09:47:33 +0900
Subject: [Rd] Is ALTREP "non-API"?
Message-ID: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>

Writing R Extension[1] defines "API" as:

    Entry points which are documented in this manual and declared in an
installed header file. These can be used in distributed packages and will
only be changed after deprecation.

But, the document (WRE) doesn't have even a single mention of ALTREP, the
term "ALTREP" itself or any entry points related to ALTREP. Does this mean,
despite the widespread use of it on R packages including CRAN ones, ALTREP
is not the API and accordingly using it in distributed packages is
considered illegal?

Best,
Yutani

[1]: https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-R-API

	[[alternative HTML version deleted]]


From hcorti@@71 m@iii@g oii gm@ii@com  Mon Apr 22 03:16:59 2024
From: hcorti@@71 m@iii@g oii gm@ii@com (hcorti@@71 m@iii@g oii gm@ii@com)
Date: Sun, 21 Apr 2024 21:16:59 -0400
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
Message-ID: <000a01da9452$c6f8bc70$54ea3550$@gmail.com>

Hello, I don't believe it is illegal, as ALTREP "implements an abstraction
underneath the C API". And is "compatible with all code which uses the API".

Please see slide deck by Gabriel Becker,  with L Tierney, M Lawrence and T
Kalibera.

https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP
.pdf

ALTREP framework implements an abstraction underneath traditional R C API
- Generalizes whats underneath the API
- Without changing how data are accessed
- Compatible with all C code which uses the API
- Compatible with R internals


I hope this helps,
Hernando


-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Hiroaki Yutani
Sent: Sunday, April 21, 2024 8:48 PM
To: r-devel <r-devel at r-project.org>
Subject: [Rd] Is ALTREP "non-API"?

Writing R Extension[1] defines "API" as:

    Entry points which are documented in this manual and declared in an
installed header file. These can be used in distributed packages and will
only be changed after deprecation.

But, the document (WRE) doesn't have even a single mention of ALTREP, the
term "ALTREP" itself or any entry points related to ALTREP. Does this mean,
despite the widespread use of it on R packages including CRAN ones, ALTREP
is not the API and accordingly using it in distributed packages is
considered illegal?

Best,
Yutani

[1]: https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-R-API

	[[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From yut@n|@|n| @end|ng |rom gm@||@com  Mon Apr 22 03:35:37 2024
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Mon, 22 Apr 2024 10:35:37 +0900
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
Message-ID: <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>

Thanks, Hernando,

Sorry, "API" is a bit confusing term in this context, but what I want to
discuss is the "API" that Writing R Extension defines as quoted in my
previous email. It's probably different from an ordinary sense when we
casually say "R C API".

You might wonder why I care about such a difference. This is because
calling a "non-API" is considered a violation of CRAN repository policy,
which means CRAN will kick out the R package. I know many CRAN packages use
ALTREP, but just being accepted by CRAN at the moment doesn't mean CRAN
will keep accepting it. So, I want to clarify the current status of ALTREP.

Best,
Yutani

2024?4?22?(?) 10:17 <hcortina71 at gmail.com>:

> Hello, I don't believe it is illegal, as ALTREP "implements an abstraction
> underneath the C API". And is "compatible with all code which uses the
> API".
>
> Please see slide deck by Gabriel Becker,  with L Tierney, M Lawrence and T
> Kalibera.
>
>
> https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP
> .pdf
> <https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP.pdf>
>
> ALTREP framework implements an abstraction underneath traditional R C API
> - Generalizes whats underneath the API
> - Without changing how data are accessed
> - Compatible with all C code which uses the API
> - Compatible with R internals
>
>
> I hope this helps,
> Hernando
>
>
> -----Original Message-----
> From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Hiroaki Yutani
> Sent: Sunday, April 21, 2024 8:48 PM
> To: r-devel <r-devel at r-project.org>
> Subject: [Rd] Is ALTREP "non-API"?
>
> Writing R Extension[1] defines "API" as:
>
>     Entry points which are documented in this manual and declared in an
> installed header file. These can be used in distributed packages and will
> only be changed after deprecation.
>
> But, the document (WRE) doesn't have even a single mention of ALTREP, the
> term "ALTREP" itself or any entry points related to ALTREP. Does this mean,
> despite the widespread use of it on R packages including CRAN ones, ALTREP
> is not the API and accordingly using it in distributed packages is
> considered illegal?
>
> Best,
> Yutani
>
> [1]:
> https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-R-API
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Mon Apr 22 09:37:22 2024
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 22 Apr 2024 00:37:22 -0700
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
Message-ID: <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>

Hi Yutani,

ALTREP is part of the official R api, as illustrated by the presence of
src/include/R_ext/Altrep.h. Everything declared in the header files in that
directory is official API AFAIK (and I believe that is more definitive than
the manuals).

The documentation of ALTREP has lagged behind its implementation
unfortunately, which may partially my fault for not submitting doc
patches for it against the manuals. Sorry for my contribution to that, I'll
see if I can loop back around to contributing documentation for ALTREP.

Best,
~G

On Sun, Apr 21, 2024 at 6:36?PM Hiroaki Yutani <yutani.ini at gmail.com> wrote:

> Thanks, Hernando,
>
> Sorry, "API" is a bit confusing term in this context, but what I want to
> discuss is the "API" that Writing R Extension defines as quoted in my
> previous email. It's probably different from an ordinary sense when we
> casually say "R C API".
>
> You might wonder why I care about such a difference. This is because
> calling a "non-API" is considered a violation of CRAN repository policy,
> which means CRAN will kick out the R package. I know many CRAN packages use
> ALTREP, but just being accepted by CRAN at the moment doesn't mean CRAN
> will keep accepting it. So, I want to clarify the current status of ALTREP.
>
> Best,
> Yutani
>
> 2024?4?22?(?) 10:17 <hcortina71 at gmail.com>:
>
> > Hello, I don't believe it is illegal, as ALTREP "implements an
> abstraction
> > underneath the C API". And is "compatible with all code which uses the
> > API".
> >
> > Please see slide deck by Gabriel Becker,  with L Tierney, M Lawrence and
> T
> > Kalibera.
> >
> >
> >
> https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP
> > .pdf
> > <
> https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP.pdf
> >
> >
> > ALTREP framework implements an abstraction underneath traditional R C API
> > - Generalizes whats underneath the API
> > - Without changing how data are accessed
> > - Compatible with all C code which uses the API
> > - Compatible with R internals
> >
> >
> > I hope this helps,
> > Hernando
> >
> >
> > -----Original Message-----
> > From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Hiroaki
> Yutani
> > Sent: Sunday, April 21, 2024 8:48 PM
> > To: r-devel <r-devel at r-project.org>
> > Subject: [Rd] Is ALTREP "non-API"?
> >
> > Writing R Extension[1] defines "API" as:
> >
> >     Entry points which are documented in this manual and declared in an
> > installed header file. These can be used in distributed packages and will
> > only be changed after deprecation.
> >
> > But, the document (WRE) doesn't have even a single mention of ALTREP, the
> > term "ALTREP" itself or any entry points related to ALTREP. Does this
> mean,
> > despite the widespread use of it on R packages including CRAN ones,
> ALTREP
> > is not the API and accordingly using it in distributed packages is
> > considered illegal?
> >
> > Best,
> > Yutani
> >
> > [1]:
> > https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-R-API
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From yut@n|@|n| @end|ng |rom gm@||@com  Mon Apr 22 13:46:08 2024
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Mon, 22 Apr 2024 20:46:08 +0900
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
Message-ID: <CALyqOb_P3os=_AG5cQ295GpdTxOw2OVLH0k=aa6MUsJdHNnSEg@mail.gmail.com>

Thanks for your convincing comment, but it seems the R core team has a
different opinion...
A few hours ago, src/include/R_ext/Altrep.h got this comment:

    /*
       Not part of the API, subject to change at any time.
    */

commit:
https://github.com/r-devel/r-svn/commit/2059bffde642f8426d1f39ab5dd995d19a575d4d

While I'm glad to see their attempt to make it clear, I'm confused. That
commit marks many other files as "not API," but I think it's a bit
inconsistent with what Writing R Extension says.

For example, src/include/R_ext/Parse.h got a comment "So not API," but the
entry point R_ParseVector is explained in Writing R Extension[1]. So, I
believe it's clearly an "API" both in the sense of WRE's dialect and in an
ordinary sense. Which should I believe? WRE? The source code?

It might be just a coincidence, but I'm sorry if my question drove the R
core team to such a too-quick clarification. I just wanted to discuss how
to fix the current inconsistencies.

I think the R core needs a proper definition of "API" first. In my opinion,
it makes little sense to call it "non-API" just to show the possibility of
future breaking changes. Whether you call it API or non-API, clever users
will still accept the breaking changes on it if it's reasonable. For
example, how about "experimental API" or "unstable API"? They sound better
to me.

Best,
Yutani

[1]:
https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Parsing-R-code-from-C


2024?4?22?(?) 16:37 Gabriel Becker <gabembecker at gmail.com>:

> Hi Yutani,
>
> ALTREP is part of the official R api, as illustrated by the presence of
> src/include/R_ext/Altrep.h. Everything declared in the header files in that
> directory is official API AFAIK (and I believe that is more definitive than
> the manuals).
>
> The documentation of ALTREP has lagged behind its implementation
> unfortunately, which may partially my fault for not submitting doc
> patches for it against the manuals. Sorry for my contribution to that, I'll
> see if I can loop back around to contributing documentation for ALTREP.
>
> Best,
> ~G
>
> On Sun, Apr 21, 2024 at 6:36?PM Hiroaki Yutani <yutani.ini at gmail.com>
> wrote:
>
>> Thanks, Hernando,
>>
>> Sorry, "API" is a bit confusing term in this context, but what I want to
>> discuss is the "API" that Writing R Extension defines as quoted in my
>> previous email. It's probably different from an ordinary sense when we
>> casually say "R C API".
>>
>> You might wonder why I care about such a difference. This is because
>> calling a "non-API" is considered a violation of CRAN repository policy,
>> which means CRAN will kick out the R package. I know many CRAN packages
>> use
>> ALTREP, but just being accepted by CRAN at the moment doesn't mean CRAN
>> will keep accepting it. So, I want to clarify the current status of
>> ALTREP.
>>
>> Best,
>> Yutani
>>
>> 2024?4?22?(?) 10:17 <hcortina71 at gmail.com>:
>>
>> > Hello, I don't believe it is illegal, as ALTREP "implements an
>> abstraction
>> > underneath the C API". And is "compatible with all code which uses the
>> > API".
>> >
>> > Please see slide deck by Gabriel Becker,  with L Tierney, M Lawrence
>> and T
>> > Kalibera.
>> >
>> >
>> >
>> https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP
>> > .pdf
>> > <
>> https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP.pdf
>> >
>> >
>> > ALTREP framework implements an abstraction underneath traditional R C
>> API
>> > - Generalizes whats underneath the API
>> > - Without changing how data are accessed
>> > - Compatible with all C code which uses the API
>> > - Compatible with R internals
>> >
>> >
>> > I hope this helps,
>> > Hernando
>> >
>> >
>> > -----Original Message-----
>> > From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Hiroaki
>> Yutani
>> > Sent: Sunday, April 21, 2024 8:48 PM
>> > To: r-devel <r-devel at r-project.org>
>> > Subject: [Rd] Is ALTREP "non-API"?
>> >
>> > Writing R Extension[1] defines "API" as:
>> >
>> >     Entry points which are documented in this manual and declared in an
>> > installed header file. These can be used in distributed packages and
>> will
>> > only be changed after deprecation.
>> >
>> > But, the document (WRE) doesn't have even a single mention of ALTREP,
>> the
>> > term "ALTREP" itself or any entry points related to ALTREP. Does this
>> mean,
>> > despite the widespread use of it on R packages including CRAN ones,
>> ALTREP
>> > is not the API and accordingly using it in distributed packages is
>> > considered illegal?
>> >
>> > Best,
>> > Yutani
>> >
>> > [1]:
>> > https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-R-API
>> >
>> >         [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>> >
>> >
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Mon Apr 22 20:16:51 2024
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Mon, 22 Apr 2024 11:16:51 -0700
Subject: [Rd] Petition to set warnPartialMatch* options to TRUE during R CMD
 check by default
Message-ID: <CAPRVBczEPOztjYDSezpC0MB13hnPoag3hpbVoQRsaRMrKvRH3w@mail.gmail.com>

Hi all,

What it says in the title. This is likely to cause a lot of CRAN packages
to fail (I can try and quantify this if seen fit), but I think it's for the
best. Packages should not (IMHO) be relying on partial matching in package
code / tests. One might be more permissive for vignette/examples code,
though I still find it poor practice.

Among many reasons why package authors should resist using partial
matching, today I saw this:

upstream package A adds a new argument 'nb' to its print method, now there
are two arguments 'na' and 'nb' starting with 'n'
downstream package B importing A starts failing because it was using
print(n=...) and relying on that resolving to na= but now it's ambiguous

This feels like an unnecessary risk for considerate package A authors to
need to take into account when designing their API. Yes, downstream package
B "should" be broken & resubmitted to CRAN, but (1) there is some perceived
"blame" for package A "causing B to be removed" and (2) the re-submitted
package is by no means assured to be "safe" -- time-constrained B authors
may just fix the minimum set of partially-matched calls while leaving
potentially many other similar at-risk call sites unchanged.

Better to enforce exact matching in package code globally, I think.

It seems likely (given how options work in R) that committed authors will
be able to sidestep the issue by disabling the PartialMatch warnings, but
better to make this inconvenient with a stricter default.

Mike C

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Mon Apr 22 20:51:05 2024
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 22 Apr 2024 11:51:05 -0700
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <CALyqOb_P3os=_AG5cQ295GpdTxOw2OVLH0k=aa6MUsJdHNnSEg@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <CALyqOb_P3os=_AG5cQ295GpdTxOw2OVLH0k=aa6MUsJdHNnSEg@mail.gmail.com>
Message-ID: <CAD4oTHGCbv1tfNwXVJ0Hd=StxyzjjQwfPEz197poReJ1V49dgw@mail.gmail.com>

Hi Yutani,

The headers have been updated by Luke Tierney: ALTREP is an *experimental*
API, in that it is an official API that is legal for packages to use, but
may it change with short notice as the framework is further developed.

Hope that helps,
~G

On Mon, Apr 22, 2024 at 4:46?AM Hiroaki Yutani <yutani.ini at gmail.com> wrote:

> Thanks for your convincing comment, but it seems the R core team has a
> different opinion...
> A few hours ago, src/include/R_ext/Altrep.h got this comment:
>
>     /*
>        Not part of the API, subject to change at any time.
>     */
>
> commit:
> https://github.com/r-devel/r-svn/commit/2059bffde642f8426d1f39ab5dd995d19a575d4d
>
> While I'm glad to see their attempt to make it clear, I'm confused. That
> commit marks many other files as "not API," but I think it's a bit
> inconsistent with what Writing R Extension says.
>
> For example, src/include/R_ext/Parse.h got a comment "So not API," but the
> entry point R_ParseVector is explained in Writing R Extension[1]. So, I
> believe it's clearly an "API" both in the sense of WRE's dialect and in an
> ordinary sense. Which should I believe? WRE? The source code?
>
> It might be just a coincidence, but I'm sorry if my question drove the R
> core team to such a too-quick clarification. I just wanted to discuss how
> to fix the current inconsistencies.
>
> I think the R core needs a proper definition of "API" first. In my
> opinion, it makes little sense to call it "non-API" just to show the
> possibility of future breaking changes. Whether you call it API or non-API,
> clever users will still accept the breaking changes on it if it's
> reasonable. For example, how about "experimental API" or "unstable API"?
> They sound better to me.
>
> Best,
> Yutani
>
> [1]:
> https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Parsing-R-code-from-C
>
>
> 2024?4?22?(?) 16:37 Gabriel Becker <gabembecker at gmail.com>:
>
>> Hi Yutani,
>>
>> ALTREP is part of the official R api, as illustrated by the presence of
>> src/include/R_ext/Altrep.h. Everything declared in the header files in that
>> directory is official API AFAIK (and I believe that is more definitive than
>> the manuals).
>>
>> The documentation of ALTREP has lagged behind its implementation
>> unfortunately, which may partially my fault for not submitting doc
>> patches for it against the manuals. Sorry for my contribution to that, I'll
>> see if I can loop back around to contributing documentation for ALTREP.
>>
>> Best,
>> ~G
>>
>> On Sun, Apr 21, 2024 at 6:36?PM Hiroaki Yutani <yutani.ini at gmail.com>
>> wrote:
>>
>>> Thanks, Hernando,
>>>
>>> Sorry, "API" is a bit confusing term in this context, but what I want to
>>> discuss is the "API" that Writing R Extension defines as quoted in my
>>> previous email. It's probably different from an ordinary sense when we
>>> casually say "R C API".
>>>
>>> You might wonder why I care about such a difference. This is because
>>> calling a "non-API" is considered a violation of CRAN repository policy,
>>> which means CRAN will kick out the R package. I know many CRAN packages
>>> use
>>> ALTREP, but just being accepted by CRAN at the moment doesn't mean CRAN
>>> will keep accepting it. So, I want to clarify the current status of
>>> ALTREP.
>>>
>>> Best,
>>> Yutani
>>>
>>> 2024?4?22?(?) 10:17 <hcortina71 at gmail.com>:
>>>
>>> > Hello, I don't believe it is illegal, as ALTREP "implements an
>>> abstraction
>>> > underneath the C API". And is "compatible with all code which uses the
>>> > API".
>>> >
>>> > Please see slide deck by Gabriel Becker,  with L Tierney, M Lawrence
>>> and T
>>> > Kalibera.
>>> >
>>> >
>>> >
>>> https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP
>>> > .pdf
>>> > <
>>> https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP.pdf
>>> >
>>> >
>>> > ALTREP framework implements an abstraction underneath traditional R C
>>> API
>>> > - Generalizes whats underneath the API
>>> > - Without changing how data are accessed
>>> > - Compatible with all C code which uses the API
>>> > - Compatible with R internals
>>> >
>>> >
>>> > I hope this helps,
>>> > Hernando
>>> >
>>> >
>>> > -----Original Message-----
>>> > From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Hiroaki
>>> Yutani
>>> > Sent: Sunday, April 21, 2024 8:48 PM
>>> > To: r-devel <r-devel at r-project.org>
>>> > Subject: [Rd] Is ALTREP "non-API"?
>>> >
>>> > Writing R Extension[1] defines "API" as:
>>> >
>>> >     Entry points which are documented in this manual and declared in an
>>> > installed header file. These can be used in distributed packages and
>>> will
>>> > only be changed after deprecation.
>>> >
>>> > But, the document (WRE) doesn't have even a single mention of ALTREP,
>>> the
>>> > term "ALTREP" itself or any entry points related to ALTREP. Does this
>>> mean,
>>> > despite the widespread use of it on R packages including CRAN ones,
>>> ALTREP
>>> > is not the API and accordingly using it in distributed packages is
>>> > considered illegal?
>>> >
>>> > Best,
>>> > Yutani
>>> >
>>> > [1]:
>>> > https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-R-API
>>> >
>>> >         [[alternative HTML version deleted]]
>>> >
>>> > ______________________________________________
>>> > R-devel at r-project.org mailing list
>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>> >
>>> >
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Apr 23 00:14:16 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 23 Apr 2024 10:14:16 +1200
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
Message-ID: <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>



> On Apr 22, 2024, at 7:37 PM, Gabriel Becker <gabembecker at gmail.com> wrote:
> 
> Hi Yutani,
> 
> ALTREP is part of the official R api, as illustrated by the presence of
> src/include/R_ext/Altrep.h. Everything declared in the header files in that
> directory is official API AFAIK (and I believe that is more definitive than
> the manuals).
> 

That is not true at all - the presence of header does not constitute declaration of something as the R API. There are cases where internal functions are in the headers for historical or other reasons since the headers are used both for the internal implementation and packages. That's why this is in R-exts under "The R API: entry points for C code":

> There are a large number of entry points in the R executable/DLL that can be called from C code (and some that can be called from Fortran code). Only those documented here are stable enough that they will only be changed with considerable notice.

And that's why CRAN does not allow unstable ones = those not documented in R-exts as part of the API.

Therefore Hiroaki's question is a very good one. ALTREP is declared as experimental and is not part of the API, but the development and stability of the API in some sense should get better as more packages are using it. Therefore it is currently allowed on CRAN in the hope that it will transition to stable at some point, but package authors using it must be willing to adapt to changes to the API as necessary.

Cheers,
Simon

 

> The documentation of ALTREP has lagged behind its implementation
> unfortunately, which may partially my fault for not submitting doc
> patches for it against the manuals. Sorry for my contribution to that, I'll
> see if I can loop back around to contributing documentation for ALTREP.
> 
> Best,
> ~G
> 
> On Sun, Apr 21, 2024 at 6:36?PM Hiroaki Yutani <yutani.ini at gmail.com> wrote:
> 
>> Thanks, Hernando,
>> 
>> Sorry, "API" is a bit confusing term in this context, but what I want to
>> discuss is the "API" that Writing R Extension defines as quoted in my
>> previous email. It's probably different from an ordinary sense when we
>> casually say "R C API".
>> 
>> You might wonder why I care about such a difference. This is because
>> calling a "non-API" is considered a violation of CRAN repository policy,
>> which means CRAN will kick out the R package. I know many CRAN packages use
>> ALTREP, but just being accepted by CRAN at the moment doesn't mean CRAN
>> will keep accepting it. So, I want to clarify the current status of ALTREP.
>> 
>> Best,
>> Yutani
>> 
>> 2024?4?22?(?) 10:17 <hcortina71 at gmail.com>:
>> 
>>> Hello, I don't believe it is illegal, as ALTREP "implements an
>> abstraction
>>> underneath the C API". And is "compatible with all code which uses the
>>> API".
>>> 
>>> Please see slide deck by Gabriel Becker,  with L Tierney, M Lawrence and
>> T
>>> Kalibera.
>>> 
>>> 
>>> 
>> https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP
>>> .pdf
>>> <
>> https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP.pdf
>>> 
>>> 
>>> ALTREP framework implements an abstraction underneath traditional R C API
>>> - Generalizes whats underneath the API
>>> - Without changing how data are accessed
>>> - Compatible with all C code which uses the API
>>> - Compatible with R internals
>>> 
>>> 
>>> I hope this helps,
>>> Hernando
>>> 
>>> 
>>> -----Original Message-----
>>> From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Hiroaki
>> Yutani
>>> Sent: Sunday, April 21, 2024 8:48 PM
>>> To: r-devel <r-devel at r-project.org>
>>> Subject: [Rd] Is ALTREP "non-API"?
>>> 
>>> Writing R Extension[1] defines "API" as:
>>> 
>>>    Entry points which are documented in this manual and declared in an
>>> installed header file. These can be used in distributed packages and will
>>> only be changed after deprecation.
>>> 
>>> But, the document (WRE) doesn't have even a single mention of ALTREP, the
>>> term "ALTREP" itself or any entry points related to ALTREP. Does this
>> mean,
>>> despite the widespread use of it on R packages including CRAN ones,
>> ALTREP
>>> is not the API and accordingly using it in distributed packages is
>>> considered illegal?
>>> 
>>> Best,
>>> Yutani
>>> 
>>> [1]:
>>> https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-R-API
>>> 
>>>        [[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> 
>> 
>>        [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From h@w|ckh@m @end|ng |rom gm@||@com  Tue Apr 23 00:29:26 2024
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Mon, 22 Apr 2024 17:29:26 -0500
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
Message-ID: <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>

On Mon, Apr 22, 2024 at 5:14?PM Simon Urbanek <simon.urbanek at r-project.org>
wrote:

>
>
> > On Apr 22, 2024, at 7:37 PM, Gabriel Becker <gabembecker at gmail.com>
> wrote:
> >
> > Hi Yutani,
> >
> > ALTREP is part of the official R api, as illustrated by the presence of
> > src/include/R_ext/Altrep.h. Everything declared in the header files in
> that
> > directory is official API AFAIK (and I believe that is more definitive
> than
> > the manuals).
> >
>
> That is not true at all - the presence of header does not constitute
> declaration of something as the R API. There are cases where internal
> functions are in the headers for historical or other reasons since the
> headers are used both for the internal implementation and packages. That's
> why this is in R-exts under "The R API: entry points for C code":
>

If I understand your point correctly, does this mean that Rf_allocVector()
is not part of the "official" R API? It does not appear to be documented in
the "The R API: entry points for C code" section.

Hadley

-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Apr 23 00:56:59 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 23 Apr 2024 10:56:59 +1200
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
Message-ID: <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>



> On Apr 23, 2024, at 10:29 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
> 
> 
> 
> On Mon, Apr 22, 2024 at 5:14?PM Simon Urbanek <simon.urbanek at r-project.org> wrote:
> 
> 
> > On Apr 22, 2024, at 7:37 PM, Gabriel Becker <gabembecker at gmail.com> wrote:
> > 
> > Hi Yutani,
> > 
> > ALTREP is part of the official R api, as illustrated by the presence of
> > src/include/R_ext/Altrep.h. Everything declared in the header files in that
> > directory is official API AFAIK (and I believe that is more definitive than
> > the manuals).
> > 
> 
> That is not true at all - the presence of header does not constitute declaration of something as the R API. There are cases where internal functions are in the headers for historical or other reasons since the headers are used both for the internal implementation and packages. That's why this is in R-exts under "The R API: entry points for C code":
> 
> If I understand your point correctly, does this mean that Rf_allocVector() is not part of the "official" R API? It does not appear to be documented in the "The R API: entry points for C code" section.
> 


It does, obviously:
https://cran.r-project.org/doc/manuals/R-exts.html#Allocating-storage-1

Cheers,
Simon


From yut@n|@|n| @end|ng |rom gm@||@com  Tue Apr 23 02:58:34 2024
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Tue, 23 Apr 2024 09:58:34 +0900
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
Message-ID: <CALyqOb9CsdhT2gK0vuasR+Td69MJu4yVVQcS54rNY-8PKPg5ow@mail.gmail.com>

I just saw the recent commits about the "experimental" entry points. So, my
original question about the current status of ALTREP is now resolved. I'm
glad that ALTREP is confirmed usable on CRAN (with care). Thank you for all
your help!

I think other "non-API"s still need clarification. For example, this one I
picked in my previous email.

> For example, src/include/R_ext/Parse.h got a comment "So not API," but
the entry point R_ParseVector is explained in Writing R Extension[1]. So, I
believe it's clearly an "API" both in the sense of WRE's dialect and in an
ordinary sense. Which should I believe? WRE? The source code?

But, in my understanding, R is now in the process of clearing such
ambiguities. So, I can just wait.

Lastly, I want the R core to consider marking ALTREP as stable, or the
"API". I didn't actively follow the development of ALTREP, but I think the
ALTREP entry points have been there for half a decade without any major
breaking changes. So, in my opinion, it's safe to declare it's stable.

Best,
Yutani


2024?4?23?(?) 7:14 Simon Urbanek <simon.urbanek at r-project.org>:

>
>
> > On Apr 22, 2024, at 7:37 PM, Gabriel Becker <gabembecker at gmail.com>
> wrote:
> >
> > Hi Yutani,
> >
> > ALTREP is part of the official R api, as illustrated by the presence of
> > src/include/R_ext/Altrep.h. Everything declared in the header files in
> that
> > directory is official API AFAIK (and I believe that is more definitive
> than
> > the manuals).
> >
>
> That is not true at all - the presence of header does not constitute
> declaration of something as the R API. There are cases where internal
> functions are in the headers for historical or other reasons since the
> headers are used both for the internal implementation and packages. That's
> why this is in R-exts under "The R API: entry points for C code":
>
> > There are a large number of entry points in the R executable/DLL that
> can be called from C code (and some that can be called from Fortran code).
> Only those documented here are stable enough that they will only be changed
> with considerable notice.
>
> And that's why CRAN does not allow unstable ones = those not documented in
> R-exts as part of the API.
>
> Therefore Hiroaki's question is a very good one. ALTREP is declared as
> experimental and is not part of the API, but the development and stability
> of the API in some sense should get better as more packages are using it.
> Therefore it is currently allowed on CRAN in the hope that it will
> transition to stable at some point, but package authors using it must be
> willing to adapt to changes to the API as necessary.
>
> Cheers,
> Simon
>
>
>
> > The documentation of ALTREP has lagged behind its implementation
> > unfortunately, which may partially my fault for not submitting doc
> > patches for it against the manuals. Sorry for my contribution to that,
> I'll
> > see if I can loop back around to contributing documentation for ALTREP.
> >
> > Best,
> > ~G
> >
> > On Sun, Apr 21, 2024 at 6:36?PM Hiroaki Yutani <yutani.ini at gmail.com>
> wrote:
> >
> >> Thanks, Hernando,
> >>
> >> Sorry, "API" is a bit confusing term in this context, but what I want to
> >> discuss is the "API" that Writing R Extension defines as quoted in my
> >> previous email. It's probably different from an ordinary sense when we
> >> casually say "R C API".
> >>
> >> You might wonder why I care about such a difference. This is because
> >> calling a "non-API" is considered a violation of CRAN repository policy,
> >> which means CRAN will kick out the R package. I know many CRAN packages
> use
> >> ALTREP, but just being accepted by CRAN at the moment doesn't mean CRAN
> >> will keep accepting it. So, I want to clarify the current status of
> ALTREP.
> >>
> >> Best,
> >> Yutani
> >>
> >> 2024?4?22?(?) 10:17 <hcortina71 at gmail.com>:
> >>
> >>> Hello, I don't believe it is illegal, as ALTREP "implements an
> >> abstraction
> >>> underneath the C API". And is "compatible with all code which uses the
> >>> API".
> >>>
> >>> Please see slide deck by Gabriel Becker,  with L Tierney, M Lawrence
> and
> >> T
> >>> Kalibera.
> >>>
> >>>
> >>>
> >>
> https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP
> >>> .pdf
> >>> <
> >>
> https://bioconductor.org/help/course-materials/2020/BiocDevelForum/16-ALTREP.pdf
> >>>
> >>>
> >>> ALTREP framework implements an abstraction underneath traditional R C
> API
> >>> - Generalizes whats underneath the API
> >>> - Without changing how data are accessed
> >>> - Compatible with all C code which uses the API
> >>> - Compatible with R internals
> >>>
> >>>
> >>> I hope this helps,
> >>> Hernando
> >>>
> >>>
> >>> -----Original Message-----
> >>> From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Hiroaki
> >> Yutani
> >>> Sent: Sunday, April 21, 2024 8:48 PM
> >>> To: r-devel <r-devel at r-project.org>
> >>> Subject: [Rd] Is ALTREP "non-API"?
> >>>
> >>> Writing R Extension[1] defines "API" as:
> >>>
> >>>    Entry points which are documented in this manual and declared in an
> >>> installed header file. These can be used in distributed packages and
> will
> >>> only be changed after deprecation.
> >>>
> >>> But, the document (WRE) doesn't have even a single mention of ALTREP,
> the
> >>> term "ALTREP" itself or any entry points related to ALTREP. Does this
> >> mean,
> >>> despite the widespread use of it on R packages including CRAN ones,
> >> ALTREP
> >>> is not the API and accordingly using it in distributed packages is
> >>> considered illegal?
> >>>
> >>> Best,
> >>> Yutani
> >>>
> >>> [1]:
> >>> https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-R-API
> >>>
> >>>        [[alternative HTML version deleted]]
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >>>
> >>
> >>        [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Tue Apr 23 08:22:41 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Tue, 23 Apr 2024 08:22:41 +0200
Subject: [Rd] 
 Petition to set warnPartialMatch* options to TRUE during R CMD
 check by default
In-Reply-To: <CAPRVBczEPOztjYDSezpC0MB13hnPoag3hpbVoQRsaRMrKvRH3w@mail.gmail.com>
References: <CAPRVBczEPOztjYDSezpC0MB13hnPoag3hpbVoQRsaRMrKvRH3w@mail.gmail.com>
Message-ID: <26151.21425.249942.74034@hornik.net>

>>>>> Michael Chirico writes:

Michael,

You may have seen that some time ago I added

check.R:            cprof <- Sys.getenv("_R_CHECK_EXAMPLES_PROFILE_", "")

etc so one can use the _R_CHECK_EXAMPLES_PROFILE_ env var to specify a
profile to use when running the examples, e.g.

options(warnPartialMatchArgs = TRUE,
        warnPartialMatchAttr = TRUE,
        warnPartialMatchDollar = TRUE)

In principle one could do this by default, because it has no effect:
such warnings in the output will not be seen in the check log by
default.  One could change that, but then the problem is that there is
no way to filter the warnings according to where they come from.

I had used the mechanism to eliminate partial matches from the base R
packages.  I had also tried using it for my own CRAN packages, and fixed
the ones under my control, and reported the others, most of which never
got fixed ...

Best
-k

> Hi all,
> What it says in the title. This is likely to cause a lot of CRAN packages
> to fail (I can try and quantify this if seen fit), but I think it's for the
> best. Packages should not (IMHO) be relying on partial matching in package
> code / tests. One might be more permissive for vignette/examples code,
> though I still find it poor practice.

> Among many reasons why package authors should resist using partial
> matching, today I saw this:

> upstream package A adds a new argument 'nb' to its print method, now there
> are two arguments 'na' and 'nb' starting with 'n'
> downstream package B importing A starts failing because it was using
> print(n=...) and relying on that resolving to na= but now it's ambiguous

> This feels like an unnecessary risk for considerate package A authors to
> need to take into account when designing their API. Yes, downstream package
> B "should" be broken & resubmitted to CRAN, but (1) there is some perceived
> "blame" for package A "causing B to be removed" and (2) the re-submitted
> package is by no means assured to be "safe" -- time-constrained B authors
> may just fix the minimum set of partially-matched calls while leaving
> potentially many other similar at-risk call sites unchanged.

> Better to enforce exact matching in package code globally, I think.

> It seems likely (given how options work in R) that committed authors will
> be able to sidestep the issue by disabling the PartialMatch warnings, but
> better to make this inconvenient with a stricter default.

> Mike C

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From h@w|ckh@m @end|ng |rom gm@||@com  Tue Apr 23 14:52:32 2024
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Tue, 23 Apr 2024 07:52:32 -0500
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
 <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
Message-ID: <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>

>
>
>
> > > ALTREP is part of the official R api, as illustrated by the presence of
> > > src/include/R_ext/Altrep.h. Everything declared in the header files in
> that
> > > directory is official API AFAIK (and I believe that is more definitive
> than
> > > the manuals).
> > >
> >
> > That is not true at all - the presence of header does not constitute
> declaration of something as the R API. There are cases where internal
> functions are in the headers for historical or other reasons since the
> headers are used both for the internal implementation and packages. That's
> why this is in R-exts under "The R API: entry points for C code":
> >
> > If I understand your point correctly, does this mean that
> Rf_allocVector() is not part of the "official" R API? It does not appear to
> be documented in the "The R API: entry points for C code" section.
> >
>
> It does, obviously:
> https://cran.r-project.org/doc/manuals/R-exts.html#Allocating-storage-1


I'm just trying to understand the precise definition of the official API
here. So it's any function mentioned in R-exts, regardless of which section
it appears in?

Does this sentence imply that all functions starting with alloc* are part
of the official API?

> For many purposes it is sufficient to allocate R objects and manipulate
those. There are quite a
> few allocXxx functions defined in Rinternals.h?you may want to explore
them.

Generally, things in a file with "internal" in its name are internal.

Hadley

-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Tue Apr 23 15:07:58 2024
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 23 Apr 2024 08:07:58 -0500
Subject: [Rd] Petition to set warnPartialMatch* options to TRUE
Message-ID: <d2a753$lurlgq@ironport10.mayo.edu>

Let me give partial assent to Michael's suggestion:? a) have an easy way to turn this on 
and b) add a strong suggestion to do so to the WRE manual. Kurt's example in the email 
shows how to do (a);? but I just looked in the WRE manual and don't see any reference to 
it, nor any mention from R CMD check --help, so I don't know where I would have found out 
about it.

I have gotton warnings about partial matches from CRAN? wrt the survival package --- I 
suspect at the benefit of Kurt? --- and though I muttered under my breath about it at the 
time there is no doubt that it was a good idea to fix all of them, and I'm glad for the nudge.

Kurt: does that envionment variable contain the options string itself, or does it point to 
a file containing the options?

I appreciate partial matching when typing code at the terminal so want the feature to 
remain in that context.

Terry T

-- 
Terry M Therneau, PhD
Department of Quantitative Health Sciences
Mayo Clinic
therneau at mayo.edu

"TERR-ree THUR-noh"

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Apr 23 23:25:00 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 24 Apr 2024 09:25:00 +1200
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
 <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
 <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>
Message-ID: <EBBB96A0-D6CA-4003-BF55-8F5344B18892@R-project.org>



> On Apr 24, 2024, at 12:52 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
> 
>> 
>> 
>> 
>>>> ALTREP is part of the official R api, as illustrated by the presence of
>>>> src/include/R_ext/Altrep.h. Everything declared in the header files in
>> that
>>>> directory is official API AFAIK (and I believe that is more definitive
>> than
>>>> the manuals).
>>>> 
>>> 
>>> That is not true at all - the presence of header does not constitute
>> declaration of something as the R API. There are cases where internal
>> functions are in the headers for historical or other reasons since the
>> headers are used both for the internal implementation and packages. That's
>> why this is in R-exts under "The R API: entry points for C code":
>>> 
>>> If I understand your point correctly, does this mean that
>> Rf_allocVector() is not part of the "official" R API? It does not appear to
>> be documented in the "The R API: entry points for C code" section.
>>> 
>> 
>> It does, obviously:
>> https://cran.r-project.org/doc/manuals/R-exts.html#Allocating-storage-1
> 
> 
> I'm just trying to understand the precise definition of the official API
> here. So it's any function mentioned in R-exts, regardless of which section
> it appears in?
> 
> Does this sentence imply that all functions starting with alloc* are part
> of the official API?
> 

Again, I can only quote the R-exts (few lines below the previous "The R API" quote):


We can classify the entry points as
API
Entry points which are documented in this manual and declared in an installed header file. These can be used in distributed packages and will only be changed after deprecation.


It says "in this manual" - I don't see anywhere restriction on a particular section of the manual, so I really don't see why you would think that allocation is not part on the API.

Cheers,
Simon




>> For many purposes it is sufficient to allocate R objects and manipulate
> those. There are quite a
>> few allocXxx functions defined in Rinternals.h?you may want to explore
> them.
> 
> Generally, things in a file with "internal" in its name are internal.
> 
> Hadley
> 
> -- 
> http://hadley.nz
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From h@w|ckh@m @end|ng |rom gm@||@com  Wed Apr 24 14:55:32 2024
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Wed, 24 Apr 2024 07:55:32 -0500
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <EBBB96A0-D6CA-4003-BF55-8F5344B18892@R-project.org>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
 <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
 <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>
 <EBBB96A0-D6CA-4003-BF55-8F5344B18892@R-project.org>
Message-ID: <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>

>
>
>
> >>> That is not true at all - the presence of header does not constitute
> >> declaration of something as the R API. There are cases where internal
> >> functions are in the headers for historical or other reasons since the
> >> headers are used both for the internal implementation and packages.
> That's
> >> why this is in R-exts under "The R API: entry points for C code":
> >>>
> >>> If I understand your point correctly, does this mean that
> >> Rf_allocVector() is not part of the "official" R API? It does not
> appear to
> >> be documented in the "The R API: entry points for C code" section.
> >>>
> >>
> >> It does, obviously:
> >> https://cran.r-project.org/doc/manuals/R-exts.html#Allocating-storage-1
> >
> >
> > I'm just trying to understand the precise definition of the official API
> > here. So it's any function mentioned in R-exts, regardless of which
> section
> > it appears in?
> >
> > Does this sentence imply that all functions starting with alloc* are part
> > of the official API?
> >
>
> Again, I can only quote the R-exts (few lines below the previous "The R
> API" quote):
>
>
> We can classify the entry points as
> API
> Entry points which are documented in this manual and declared in an
> installed header file. These can be used in distributed packages and will
> only be changed after deprecation.
>
>
> It says "in this manual" - I don't see anywhere restriction on a
> particular section of the manual, so I really don't see why you would think
> that allocation is not part on the API.
>

Because you mentioned that section explicitly earlier in the thread. This
obviously seems clear to you, but it's not at all clear to me and I suspect
many of the wider community. It's frustrating because we are trying
our best to do what y'all want us to do, but it feels like we keep getting
the rug pulled out from under us with very little notice, and then have to
spend a large amount of time figuring out workarounds. That is at least
feasible for my team since we have multiple talented folks who are paid
full-time to work on R, but it's a huge struggle for most people who are
generally maintaining packages in their spare time.

For the purposes of this discussion could you please "documented in the
manual" means? For example, this line mentions allocXxx functions: "There
are quite a few allocXxx functions defined in Rinternals.h?you may want to
explore them.". Does that imply that they are documented and free to use?

And in general, I'd urge R Core to make an explicit list of functions that
you consider to be part of the exported API, and then grandfather in
packages that used those functions prior to learning that we weren't
supposed to.

Hadley


-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From yut@n|@|n| @end|ng |rom gm@||@com  Wed Apr 24 16:44:22 2024
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Wed, 24 Apr 2024 23:44:22 +0900
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
 <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
 <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>
 <EBBB96A0-D6CA-4003-BF55-8F5344B18892@R-project.org>
 <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
Message-ID: <CALyqOb8HzfV5tVhSwPuuGfL9RSLyPhDWnN-w-9obh-3CccGS7g@mail.gmail.com>

> And in general, I'd urge R Core to make an explicit list of functions that
you consider to be part of the exported API

While I believe R Core is in the process of such clarification, I'd also
vote for this. Now that WRE has "experimental" category, and if we take the
current definition of "documented in the manual" literally, an
"experimental" entry point cannot be documented because the entry point
would promote to an "API" for the obvious reason. It would sound funny that
you cannot write precautionary statements on experimental entry points just
because of the very definition of "experimental". So, I agree R should have
the explicit list.

I'd add that R should also define a process on how to stabilize an
"experimental" or "public" entry point into an "API". For example, Rust
language has such a process [1]. After a feature is introduced as unstable,
a "tracking issue" is filed and the related problems are reported or linked
to it. Users can know what are the remaining problems before getting
stabilized, and, if they have strong will, they can contribute to resolving
such blockers. Similarly, if we can track the unresolved problems of each
non-API, we might be able to help the R core team more smoothly.

Best,
Yutani

[1]: https://rustc-dev-guide.rust-lang.org/stabilization_guide.html


2024?4?24?(?) 21:55 Hadley Wickham <h.wickham at gmail.com>:

> >
> >
> >
> > >>> That is not true at all - the presence of header does not constitute
> > >> declaration of something as the R API. There are cases where internal
> > >> functions are in the headers for historical or other reasons since the
> > >> headers are used both for the internal implementation and packages.
> > That's
> > >> why this is in R-exts under "The R API: entry points for C code":
> > >>>
> > >>> If I understand your point correctly, does this mean that
> > >> Rf_allocVector() is not part of the "official" R API? It does not
> > appear to
> > >> be documented in the "The R API: entry points for C code" section.
> > >>>
> > >>
> > >> It does, obviously:
> > >>
> https://cran.r-project.org/doc/manuals/R-exts.html#Allocating-storage-1
> > >
> > >
> > > I'm just trying to understand the precise definition of the official
> API
> > > here. So it's any function mentioned in R-exts, regardless of which
> > section
> > > it appears in?
> > >
> > > Does this sentence imply that all functions starting with alloc* are
> part
> > > of the official API?
> > >
> >
> > Again, I can only quote the R-exts (few lines below the previous "The R
> > API" quote):
> >
> >
> > We can classify the entry points as
> > API
> > Entry points which are documented in this manual and declared in an
> > installed header file. These can be used in distributed packages and will
> > only be changed after deprecation.
> >
> >
> > It says "in this manual" - I don't see anywhere restriction on a
> > particular section of the manual, so I really don't see why you would
> think
> > that allocation is not part on the API.
> >
>
> Because you mentioned that section explicitly earlier in the thread. This
> obviously seems clear to you, but it's not at all clear to me and I suspect
> many of the wider community. It's frustrating because we are trying
> our best to do what y'all want us to do, but it feels like we keep getting
> the rug pulled out from under us with very little notice, and then have to
> spend a large amount of time figuring out workarounds. That is at least
> feasible for my team since we have multiple talented folks who are paid
> full-time to work on R, but it's a huge struggle for most people who are
> generally maintaining packages in their spare time.
>
> For the purposes of this discussion could you please "documented in the
> manual" means? For example, this line mentions allocXxx functions: "There
> are quite a few allocXxx functions defined in Rinternals.h?you may want to
> explore them.". Does that imply that they are documented and free to use?
>
> And in general, I'd urge R Core to make an explicit list of functions that
> you consider to be part of the exported API, and then grandfather in
> packages that used those functions prior to learning that we weren't
> supposed to.
>
> Hadley
>
>
> --
> http://hadley.nz
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From h@w|ckh@m @end|ng |rom gm@||@com  Wed Apr 24 20:23:25 2024
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Wed, 24 Apr 2024 13:23:25 -0500
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
 <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
 <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>
 <EBBB96A0-D6CA-4003-BF55-8F5344B18892@R-project.org>
 <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
Message-ID: <CABdHhvGCxcEuvxAKwrB1fcwohN9CEaVB6ZQjSEzjtONDoFM2Kg@mail.gmail.com>

A few more thoughts based on a simple question: how do you determine the
length of a vector?

Rf_length() is used in example code in R-exts, but I don't think it's
formally documented anywhere (although it's possible I missed it). Is using
in an example sufficient to consider a function to be part of the public
API? If so, SET_TYPEOF() is used in a number of examples, and hence used by
CRAN packages, but is no longer considered part of the public API.

Rf_xlength() doesn't appear to be mentioned anywhere in R-exts. Does this
imply that long vectors are not part of the exported API? Or is there some
other way we should be determining the length of such vectors?

Are the macro variants LENGTH and XLENGTH part of the exported API? Are we
supposed to use them or avoid them?

Relatedly, I presume that LOGICAL() is the way we're supposed to extract
logical values from a vector, but it isn't documented in R-exts, suggesting
that it's not part of the public API?

---

It's also worth pointing out where R-exts does well, with the documentation
of utility functions (
https://cran.r-project.org/doc/manuals/R-exts.html#Utility-functions). I
think this is what most people would consider documentation to imply, i.e.
a list of input arguments/types, the output type, and basic notes on their
operation.
---

Finally, it's worth noting that there's some lingering ill feelings over
how the connections API was treated. It was documented in R-exts only to be
later removed, including expunging mentions of it in the news. That's
obviously water under the bridge, but I do believe that there is
the potential for the R core team to build goodwill with the community if
they are willing to engage a bit more with the users of their APIs.

Hadley

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Apr 24 22:13:49 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 25 Apr 2024 08:13:49 +1200
Subject: [Rd] Is ALTREP "non-API"?
In-Reply-To: <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
 <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
 <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>
 <EBBB96A0-D6CA-4003-BF55-8F5344B18892@R-project.org>
 <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
Message-ID: <229AB8A1-13DA-4792-B7C3-BA7BEA460C71@R-project.org>



> On Apr 25, 2024, at 12:55 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
> 
> 
> 
> >>> That is not true at all - the presence of header does not constitute
> >> declaration of something as the R API. There are cases where internal
> >> functions are in the headers for historical or other reasons since the
> >> headers are used both for the internal implementation and packages. That's
> >> why this is in R-exts under "The R API: entry points for C code":
> >>> 
> >>> If I understand your point correctly, does this mean that
> >> Rf_allocVector() is not part of the "official" R API? It does not appear to
> >> be documented in the "The R API: entry points for C code" section.
> >>> 
> >> 
> >> It does, obviously:
> >> https://cran.r-project.org/doc/manuals/R-exts.html#Allocating-storage-1
> > 
> > 
> > I'm just trying to understand the precise definition of the official API
> > here. So it's any function mentioned in R-exts, regardless of which section
> > it appears in?
> > 
> > Does this sentence imply that all functions starting with alloc* are part
> > of the official API?
> > 
> 
> Again, I can only quote the R-exts (few lines below the previous "The R API" quote):
> 
> 
> We can classify the entry points as
> API
> Entry points which are documented in this manual and declared in an installed header file. These can be used in distributed packages and will only be changed after deprecation.
> 
> 
> It says "in this manual" - I don't see anywhere restriction on a particular section of the manual, so I really don't see why you would think that allocation is not part on the API.
> 
> Because you mentioned that section explicitly earlier in the thread. This obviously seems clear to you, but it's not at all clear to me and I suspect many of the wider community. It's frustrating because we are trying our best to do what y'all want us to do, but it feels like we keep getting the rug pulled out from under us with very little notice, and then have to spend a large amount of time figuring out workarounds. That is at least feasible for my team since we have multiple talented folks who are paid full-time to work on R, but it's a huge struggle for most people who are generally maintaining packages in their spare time.
> 


I must be missing something here since I have no idea what you are talking about. The whole point if a stable API is that no rugs are pulled, so in fact it's exactly the opposite of what you claim - the notice is at least a year due to the release cycle, typically more. Unlike many other languages and ecosystems, R public API does not change very often - and R-core is thinking hard about making breaking changes if at all. In fact, I hear more complaints that the API does NOT change and we are too conservative, precisely because we want to avoid unnecessary breakage.

I will not further comment here - all I did was to point out the relevant text from R-exts which is the canonical source of information. If you have issues, find some parts unclear and want to improve the documentation, I would like to invite you to contribute constructively, propose changes, submit patches. The R-exts document has been around for decades, so it seem implausible that all of sudden it is being misunderstood the way you portrayed it, but it is certainly a good idea to improve documentation so contributions are welcome.

Cheers,
Simon


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Apr 24 22:31:39 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 24 Apr 2024 15:31:39 -0500 (CDT)
Subject: [Rd] [External] Re:  Is ALTREP "non-API"?
In-Reply-To: <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
 <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
 <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>
 <EBBB96A0-D6CA-4003-BF55-8F5344B18892@R-project.org>
 <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
Message-ID: <dc1e6797-0ec-1061-7ce3-88a384d7ee8c@uiowa.edu>

On Wed, 24 Apr 2024, Hadley Wickham wrote:

>>
>>
>>
>>>>> That is not true at all - the presence of header does not constitute
>>>> declaration of something as the R API. There are cases where internal
>>>> functions are in the headers for historical or other reasons since the
>>>> headers are used both for the internal implementation and packages.
>> That's
>>>> why this is in R-exts under "The R API: entry points for C code":
>>>>>
>>>>> If I understand your point correctly, does this mean that
>>>> Rf_allocVector() is not part of the "official" R API? It does not
>> appear to
>>>> be documented in the "The R API: entry points for C code" section.
>>>>>
>>>>
>>>> It does, obviously:
>>>> https://cran.r-project.org/doc/manuals/R-exts.html#Allocating-storage-1
>>>
>>>
>>> I'm just trying to understand the precise definition of the official API
>>> here. So it's any function mentioned in R-exts, regardless of which
>> section
>>> it appears in?
>>>
>>> Does this sentence imply that all functions starting with alloc* are part
>>> of the official API?
>>>
>>
>> Again, I can only quote the R-exts (few lines below the previous "The R
>> API" quote):
>>
>>
>> We can classify the entry points as
>> API
>> Entry points which are documented in this manual and declared in an
>> installed header file. These can be used in distributed packages and will
>> only be changed after deprecation.
>>
>>
>> It says "in this manual" - I don't see anywhere restriction on a
>> particular section of the manual, so I really don't see why you would think
>> that allocation is not part on the API.
>>
>
> Because you mentioned that section explicitly earlier in the thread. This
> obviously seems clear to you, but it's not at all clear to me and I suspect
> many of the wider community. It's frustrating because we are trying
> our best to do what y'all want us to do, but it feels like we keep getting
> the rug pulled out from under us with very little notice, and then have to
> spend a large amount of time figuring out workarounds.

Please try to keep this discussion non-adversarial.

> That is at least
> feasible for my team since we have multiple talented folks who are paid
> full-time to work on R, but it's a huge struggle for most people who are
> generally maintaining packages in their spare time.

As you well know, almost all R-core members are also trying to
maintain and improve R in their spare time. Good for folks to keep in
mind before demanding R-core do X, Y, or Z for you.

> For the purposes of this discussion could you please "documented in the
> manual" means? For example, this line mentions allocXxx functions: "There
> are quite a few allocXxx functions defined in Rinternals.h?you may want to
> explore them.". Does that imply that they are documented and free to use?

Where we are now in terms of what package authors can use to write R
extensions has evolved organically over many years. The current state
is certainly not ideal:

     There are entry points in installed headers that might be
     available;

     but to find out if they are in fact available requires reading
     prose text in the header files and in WRE.

Trying to fine-tune wording in WRE, or add a lot of additional entries
is not really a good or realistic way forward: WRE is both
documentation and tutorial and more legalistic language/more complete
coverage would make it less readable and still not guarantee
completeness or clarity.

We would be better off (in my view, not necessarily shared by others
in R-core) if we could get to a point where:

     all entry points listed in installed header files can be used in
     packages, at least with some caveats;

     the caveats are expressed in a standard way that is searchable,
     e.g. with a standardized comment syntax at the header file or
     individual declaration level.

In principle this is achievable, but getting there from where we are
now is a lot of work. There are some 500 entry points in the R shared
library that are in the installed headers but not mentioned in WRE.
These would need to be reviewed and adjusted. My guess is about a
third are fine and intended to be API-stable, another third are not
used in packages and don't need to be in public headers. The remainder
are things that may be used in current packages but really should not
be, for example because they expose internal data in ways that can
cause segfaults or they make it difficult to implement performance
improvements in the base engine. Sorting through these and working
with package authors to find alternate, safer options takes a lot of
time (see 'spare time' above) and energy (some package authors are
easier to work with than others). Several of us have taken cracks at
moving this forward from time to time, but it rarely gets to the top
of anyone's priority list.

> And in general, I'd urge R Core to make an explicit list of functions that
> you consider to be part of the exported API, and then grandfather in
> packages that used those functions prior to learning that we weren't
> supposed to.

Making a list and hoping that it will remain up to date is not
realistic.  The only way that would work reliably is if the list could
be programmatically generated, for example by parsing installed
headers for declarations and caveats as above. Which would be possible
with changes like the ones listed above.

Best,

luke

>
> Hadley
>
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/

From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Wed Apr 24 23:14:30 2024
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Wed, 24 Apr 2024 14:14:30 -0700
Subject: [Rd] 
 Question regarding .make_numeric_version with non-character input
In-Reply-To: <26122.43144.181286.316307@hornik.net>
References: <PAXP251MB0578C2827F352E173D109017983A2@PAXP251MB0578.EURP251.PROD.OUTLOOK.COM>
 <26119.4881.618411.645248@rob.eddelbuettel.com>
 <14ab2002-74a8-491b-8921-b66364479003@polimi.it>
 <26122.43144.181286.316307@hornik.net>
Message-ID: <8a599021-e0f5-4498-ba9c-bbdcb90e4486@gmail.com>

Hi Kurt,

Is it intended that numeric_version() returns an error by default on 
non-character input in R 4.4.0? It seems that I can turn this into a 
warning by setting 
_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_=false but I don't seem 
to be able to find any of this mentioned in the NEWS file.

Thanks,

H.

On 4/1/24 05:28, Kurt Hornik wrote:
>>>>>> Andrea Gilardi via R-devel writes:
> Thanks: should be fixed now in the trunk.
>
> Best
> -k
>
>> Thank you very much Dirk for your kind words and for confirming the bug.
>> Next week I will open a new issue on Bugzilla adding the related patch.
>> Kind regards
>> Andrea
>> On 29/03/2024 20:14, Dirk Eddelbuettel wrote:
>>> On 29 March 2024 at 17:56, Andrea Gilardi via R-devel wrote:
>>> | Dear all,
>>> |
>>> | I have a question regarding the R-devel version of .make_numeric_version() function. As far as I can understand, the current code (https://github.com/wch/r-source/blob/66b91578dfc85140968f07dd4e72d8cb8a54f4c6/src/library/base/R/version.R#L50-L56) runs the following steps in case of non-character input:
>>> |
>>> | 1. It creates a message named msg using gettextf.
>>> | 2. Such object is then passed to stop(msg) or warning(msg) according to the following condition
>>> |
>>> | tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false")
>>> |
>>> | However, I don't understand the previous code since the output of Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false" is just a boolean value and tolower() will just return "true" or "false". Maybe the intended code is tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false" ? Or am I missing something?
>>>
>>> Yes, agreed -- good catch.  In full, the code is (removing leading
>>> whitespace, and putting it back onto single lines)
>>>
>>> msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
>>> if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false"))
>>> stop(msg, domain = NA)
>>> else
>>> warning(msg, domain = NA, immediate. = TRUE)
>>>
>>> where msg is constant (but reflecting language settings via standard i18n)
>>> and as you not the parentheses appear wrong.  What was intended is likely
>>>
>>> msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
>>> if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false")
>>> stop(msg, domain = NA)
>>> else
>>> warning(msg, domain = NA, immediate. = TRUE)
>>>
>>> If you use bugzilla before and have a handle, maybe file a bug report with
>>> this as patch athttps://bugs.r-project.org/
>>>
>>> Dirk
>>>
>> ______________________________________________
>> R-devel at r-project.org  mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org  mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com

	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu Apr 25 00:45:05 2024
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 24 Apr 2024 15:45:05 -0700
Subject: [Rd] [External] Re: Is ALTREP "non-API"?
In-Reply-To: <dc1e6797-0ec-1061-7ce3-88a384d7ee8c@uiowa.edu>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
 <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
 <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>
 <EBBB96A0-D6CA-4003-BF55-8F5344B18892@R-project.org>
 <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
 <dc1e6797-0ec-1061-7ce3-88a384d7ee8c@uiowa.edu>
Message-ID: <CAFDcVCRJWwJCPehGpQ9JB7WG4o1mTLTBrrszS0cUtgb2w-RQKA@mail.gmail.com>

On Wed, Apr 24, 2024 at 1:32?PM luke-tierney--- via R-devel
<r-devel at r-project.org> wrote:
>
> On Wed, 24 Apr 2024, Hadley Wickham wrote:
>
> >>
> >>
> >>
> >>>>> That is not true at all - the presence of header does not constitute
> >>>> declaration of something as the R API. There are cases where internal
> >>>> functions are in the headers for historical or other reasons since the
> >>>> headers are used both for the internal implementation and packages.
> >> That's
> >>>> why this is in R-exts under "The R API: entry points for C code":
> >>>>>
> >>>>> If I understand your point correctly, does this mean that
> >>>> Rf_allocVector() is not part of the "official" R API? It does not
> >> appear to
> >>>> be documented in the "The R API: entry points for C code" section.
> >>>>>
> >>>>
> >>>> It does, obviously:
> >>>> https://cran.r-project.org/doc/manuals/R-exts.html#Allocating-storage-1
> >>>
> >>>
> >>> I'm just trying to understand the precise definition of the official API
> >>> here. So it's any function mentioned in R-exts, regardless of which
> >> section
> >>> it appears in?
> >>>
> >>> Does this sentence imply that all functions starting with alloc* are part
> >>> of the official API?
> >>>
> >>
> >> Again, I can only quote the R-exts (few lines below the previous "The R
> >> API" quote):
> >>
> >>
> >> We can classify the entry points as
> >> API
> >> Entry points which are documented in this manual and declared in an
> >> installed header file. These can be used in distributed packages and will
> >> only be changed after deprecation.
> >>
> >>
> >> It says "in this manual" - I don't see anywhere restriction on a
> >> particular section of the manual, so I really don't see why you would think
> >> that allocation is not part on the API.
> >>
> >
> > Because you mentioned that section explicitly earlier in the thread. This
> > obviously seems clear to you, but it's not at all clear to me and I suspect
> > many of the wider community. It's frustrating because we are trying
> > our best to do what y'all want us to do, but it feels like we keep getting
> > the rug pulled out from under us with very little notice, and then have to
> > spend a large amount of time figuring out workarounds.
>
> Please try to keep this discussion non-adversarial.
>
> > That is at least
> > feasible for my team since we have multiple talented folks who are paid
> > full-time to work on R, but it's a huge struggle for most people who are
> > generally maintaining packages in their spare time.
>
> As you well know, almost all R-core members are also trying to
> maintain and improve R in their spare time. Good for folks to keep in
> mind before demanding R-core do X, Y, or Z for you.
>
> > For the purposes of this discussion could you please "documented in the
> > manual" means? For example, this line mentions allocXxx functions: "There
> > are quite a few allocXxx functions defined in Rinternals.h?you may want to
> > explore them.". Does that imply that they are documented and free to use?
>
> Where we are now in terms of what package authors can use to write R
> extensions has evolved organically over many years. The current state
> is certainly not ideal:
>
>      There are entry points in installed headers that might be
>      available;
>
>      but to find out if they are in fact available requires reading
>      prose text in the header files and in WRE.
>
> Trying to fine-tune wording in WRE, or add a lot of additional entries
> is not really a good or realistic way forward: WRE is both
> documentation and tutorial and more legalistic language/more complete
> coverage would make it less readable and still not guarantee
> completeness or clarity.
>
> We would be better off (in my view, not necessarily shared by others
> in R-core) if we could get to a point where:
>
>      all entry points listed in installed header files can be used in
>      packages, at least with some caveats;
>
>      the caveats are expressed in a standard way that is searchable,
>      e.g. with a standardized comment syntax at the header file or
>      individual declaration level.
>
> In principle this is achievable, but getting there from where we are
> now is a lot of work. There are some 500 entry points in the R shared
> library that are in the installed headers but not mentioned in WRE.
> These would need to be reviewed and adjusted. My guess is about a
> third are fine and intended to be API-stable, another third are not
> used in packages and don't need to be in public headers. The remainder
> are things that may be used in current packages but really should not
> be, for example because they expose internal data in ways that can
> cause segfaults or they make it difficult to implement performance
> improvements in the base engine. Sorting through these and working
> with package authors to find alternate, safer options takes a lot of
> time (see 'spare time' above) and energy (some package authors are
> easier to work with than others). Several of us have taken cracks at
> moving this forward from time to time, but it rarely gets to the top
> of anyone's priority list.
>
> > And in general, I'd urge R Core to make an explicit list of functions that
> > you consider to be part of the exported API, and then grandfather in
> > packages that used those functions prior to learning that we weren't
> > supposed to.
>
> Making a list and hoping that it will remain up to date is not
> realistic.  The only way that would work reliably is if the list could
> be programmatically generated, for example by parsing installed
> headers for declarations and caveats as above. Which would be possible
> with changes like the ones listed above.

The R help pages have been proven to work excellently for documenting
the R API. Maybe we could leverage that to document the C-level API?
That could help to bring more formal structure to the documentation
than the "free-text" format that is currently used in RWE.

I played around with this idea some years ago, where I created a
package 'RNativeAPI' for the sole purpose of prototyping documentation
of the C-level API of R, and to see what's possible to do with the Rd
format in this sense and to get an idea what the limits are. For
example, getAttrib() and setAttrib() are documented in
<https://github.com/HenrikBengtsson/RNativeAPI/blob/master/man/getAttrib.Rd>.
To see what it looks like, go to
<https://henrikbengtsson.github.io/RNativeAPI/reference/getAttrib.html>.
If this is feasible, I think there are enough folks out there that are
willing to contribute to such documentation. It's obviously a
long-term project, but it's doable.

/Henrik

>
> Best,
>
> luke
>
> >
> > Hadley
> >
> >
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Thu Apr 25 01:35:42 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Wed, 24 Apr 2024 19:35:42 -0400
Subject: [Rd] View() segfaulting ...
Message-ID: <101c811e-3164-4a27-9465-01e360fa236f@gmail.com>

   I'm using bleeding-edge R-devel, so maybe my build is weird. Can 
anyone else reproduce this?

   View() seems to crash on just about anything.

View(1:3)
*** stack smashing detected ***: terminated
Aborted (core dumped)

   If I debug(View) I get to the last line of code with nothing 
obviously looking pathological:

Browse[1]>
debug: invisible(.External2(C_dataviewer, x, title))
Browse[1]> x
$x
[1] "1" "2" "3"

Browse[1]> title
[1] "Data: 1:3"
Browse[1]>
*** stack smashing detected ***: terminated
Aborted (core dumped)



====
R Under development (unstable) (2024-04-24 r86483)
Platform: x86_64-pc-linux-gnu
Running under: Pop!_OS 22.04 LTS

Matrix products: default
BLAS/LAPACK: 
/usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so; 
LAPACK version 3.10.0

locale:
  [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C
  [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8
  [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8
  [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C
  [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C

time zone: America/Toronto
tzcode source: system (glibc)

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.5.0


From bbo|ker @end|ng |rom gm@||@com  Thu Apr 25 01:57:42 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Wed, 24 Apr 2024 19:57:42 -0400
Subject: [Rd] View() segfaulting ...
In-Reply-To: <CAPPM_gR6QqnsYq3PTHs69rj6od8Vp6hpZcptMzNrgfJ0NbQEPA@mail.gmail.com>
References: <101c811e-3164-4a27-9465-01e360fa236f@gmail.com>
 <CAPPM_gR6QqnsYq3PTHs69rj6od8Vp6hpZcptMzNrgfJ0NbQEPA@mail.gmail.com>
Message-ID: <818d4a75-efb2-461c-b54a-9f463df7b092@gmail.com>

As suggested by Josh Ulrich, here's what I get when running under 
valgrind.


$ R -d valgrind
==218120== Memcheck, a memory error detector
==218120== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==218120== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright 
info
==218120== Command: /usr/local/lib/R/bin/exec/R
==218120==

R Under development (unstable) (2024-04-24 r86483) -- "Unsuffered 
Consequences"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

   Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

gcoto> gctorture(TRUE)
 > View(1:3)
*** stack smashing detected ***: terminated
==218120==
==218120== Process terminating with default action of signal 6 (SIGABRT)
==218120==    at 0x4D619FC: __pthread_kill_implementation 
(pthread_kill.c:44)
==218120==    by 0x4D619FC: __pthread_kill_internal (pthread_kill.c:78)
==218120==    by 0x4D619FC: pthread_kill@@GLIBC_2.34 (pthread_kill.c:89)
==218120==    by 0x4D0D475: raise (raise.c:26)
==218120==    by 0x4CF37F2: abort (abort.c:79)
==218120==    by 0x4D54675: __libc_message (libc_fatal.c:155)
==218120==    by 0x4E01599: __fortify_fail (fortify_fail.c:26)
==218120==    by 0x4E01565: __stack_chk_fail (stack_chk_fail.c:24)
==218120==    by 0x27B686AD: in_R_X11_dataviewer (dataentry.c:540)
==218120==    by 0x495C7C7: do_External (dotcode.c:573)
==218120==    by 0x499A07F: bcEval_loop (eval.c:8141)
==218120==    by 0x49B501C: bcEval (eval.c:7524)
==218120==    by 0x49B501C: bcEval (eval.c:7509)
==218120==    by 0x49B538A: Rf_eval (eval.c:1167)
==218120==    by 0x49B755E: R_execClosure (eval.c:2398)
==218120==
==218120== HEAP SUMMARY:
==218120==     in use at exit: 42,061,827 bytes in 9,305 blocks
==218120==   total heap usage: 23,905 allocs, 14,600 frees, 66,039,858 
bytes allocated
==218120==
==218120== LEAK SUMMARY:
==218120==    definitely lost: 0 bytes in 0 blocks
==218120==    indirectly lost: 0 bytes in 0 blocks
==218120==      possibly lost: 5,868 bytes in 14 blocks
==218120==    still reachable: 42,055,959 bytes in 9,291 blocks
==218120==                       of which reachable via heuristic:
==218120==                         newarray           : 4,264 bytes in 1 
blocks
==218120==         suppressed: 0 bytes in 0 blocks
==218120== Rerun with --leak-check=full to see details of leaked memory
==218120==
==218120== For lists of detected and suppressed errors, rerun with: -s
==218120== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
Aborted (core dumped)
bolker:~/R$


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Apr 25 02:34:28 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 24 Apr 2024 19:34:28 -0500 (CDT)
Subject: [Rd] [External] Re:  Is ALTREP "non-API"?
In-Reply-To: <CABdHhvGCxcEuvxAKwrB1fcwohN9CEaVB6ZQjSEzjtONDoFM2Kg@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
 <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
 <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>
 <EBBB96A0-D6CA-4003-BF55-8F5344B18892@R-project.org>
 <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
 <CABdHhvGCxcEuvxAKwrB1fcwohN9CEaVB6ZQjSEzjtONDoFM2Kg@mail.gmail.com>
Message-ID: <4438e4f1-3513-b470-5f1d-48eaec9e020e@uiowa.edu>

On Wed, 24 Apr 2024, Hadley Wickham wrote:

> A few more thoughts based on a simple question: how do you determine the
> length of a vector?
>
> Rf_length() is used in example code in R-exts, but I don't think it's
> formally documented anywhere (although it's possible I missed it). Is using
> in an example sufficient to consider a function to be part of the public
> API? If so, SET_TYPEOF() is used in a number of examples, and hence used by
> CRAN packages, but is no longer considered part of the public API.
>
> Rf_xlength() doesn't appear to be mentioned anywhere in R-exts. Does this
> imply that long vectors are not part of the exported API? Or is there some
> other way we should be determining the length of such vectors?
>
> Are the macro variants LENGTH and XLENGTH part of the exported API? Are we
> supposed to use them or avoid them?
>
> Relatedly, I presume that LOGICAL() is the way we're supposed to extract
> logical values from a vector, but it isn't documented in R-exts, suggesting
> that it's not part of the public API?

My pragmatic approach to deciding if an entry point is usable in a
package is to

     grep for it in the installed headers

     grep for it in WRE

     if those are good, check the text in both places to make sure it
     doesn't tell me not to use is

The first two can be automated; the text reading can't for now.

One place this runs into trouble is when the prose in WRE doesn't
explicitly mention the entry point, but says something like 'this one
and similar ones are OK'. A couple of years ago I worked on improving
some of those by explicitly adding some of those implicit ones, which
did sometimes make the text more cumbersome. I'm pretty sure I added
LOGICAL() and RAW() at that point (but may be mis-remebering); they
are there now. In some other cases I left the text alone but added
index entries. That makes them findable with a text search. I think I
got most that can be handled that way, but there may be some others
left. Far from ideal, but at least a step forward.

>
> ---
>
> It's also worth pointing out where R-exts does well, with the documentation
> of utility functions (
> https://cran.r-project.org/doc/manuals/R-exts.html#Utility-functions). I
> think this is what most people would consider documentation to imply, i.e.
> a list of input arguments/types, the output type, and basic notes on their
> operation.
> ---
>
> Finally, it's worth noting that there's some lingering ill feelings over
> how the connections API was treated. It was documented in R-exts only to be
> later removed, including expunging mentions of it in the news. That's
> obviously water under the bridge, but I do believe that there is
> the potential for the R core team to build goodwill with the community if
> they are willing to engage a bit more with the users of their APIs.

As you well know R-core is not a monolith. There are several R-core
members who also are not happy about how that played out and where
that stands now. But there was and is no viable option other than to
agree to disagree. There is really no upside to re-litigating this
now.

Best,

luke

>
> Hadley
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Thu Apr 25 08:07:56 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Thu, 25 Apr 2024 08:07:56 +0200
Subject: [Rd] 
 Question regarding .make_numeric_version with non-character input
In-Reply-To: <8a599021-e0f5-4498-ba9c-bbdcb90e4486@gmail.com>
References: <PAXP251MB0578C2827F352E173D109017983A2@PAXP251MB0578.EURP251.PROD.OUTLOOK.COM>
 <26119.4881.618411.645248@rob.eddelbuettel.com>
 <14ab2002-74a8-491b-8921-b66364479003@polimi.it>
 <26122.43144.181286.316307@hornik.net>
 <8a599021-e0f5-4498-ba9c-bbdcb90e4486@gmail.com>
Message-ID: <26153.62268.101698.468796@hornik.net>

>>>>> Herv? Pag?s writes:

> Hi Kurt,
> Is it intended that numeric_version() returns an error by default on
> non-character input in R 4.4.0? 

Dear Herve, yes, that's the intention.

> It seems that I can turn this into a warning by setting
> _R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_=false but I don't
> seem to be able to find any of this mentioned in the NEWS file.

That's what I added for smoothing the transition: it will be removed
from the trunk shortly.

Best
-k

> Thanks,

> H.

> On 4/1/24 05:28, Kurt Hornik wrote:

>                         Andrea Gilardi via R-devel writes:
                        
>     Thanks: should be fixed now in the trunk.
    
>     Best
>     -k

>         Thank you very much Dirk for your kind words and for confirming the bug. 
>         Next week I will open a new issue on Bugzilla adding the related patch.
        
>         Kind regards
        
>         Andrea
        
>         On 29/03/2024 20:14, Dirk Eddelbuettel wrote:
        
>             On 29 March 2024 at 17:56, Andrea Gilardi via R-devel wrote:
>             | Dear all,
>             |
>             | I have a question regarding the R-devel version of .make_numeric_version() function. As far as I can understand, the current code (https://github.com/wch/r-source/blob/66b91578dfc85140968f07dd4e72d8cb8a54f4c6/src/library/base/R/version.R#L50-L56) runs the following steps in case of non-character input:
>             |
>             | 1. It creates a message named msg using gettextf.
>             | 2. Such object is then passed to stop(msg) or warning(msg) according to the following condition
>             |
>             | tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false")
>             |
>             | However, I don't understand the previous code since the output of Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false" is just a boolean value and tolower() will just return "true" or "false". Maybe the intended code is tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false" ? Or am I missing something?
            
>             Yes, agreed -- good catch.  In full, the code is (removing leading
>             whitespace, and putting it back onto single lines)
            
>             msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
>             if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false"))
>             stop(msg, domain = NA)
>             else
>             warning(msg, domain = NA, immediate. = TRUE)
            
>             where msg is constant (but reflecting language settings via standard i18n)
>             and as you not the parentheses appear wrong.  What was intended is likely
            
>             msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
>             if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false")
>             stop(msg, domain = NA)
>             else
>             warning(msg, domain = NA, immediate. = TRUE)
            
>             If you use bugzilla before and have a handle, maybe file a bug report with
>             this as patch at https://bugs.r-project.org/
            
>             Dirk

>         ______________________________________________
>         R-devel at r-project.org mailing list
>         https://stat.ethz.ch/mailman/listinfo/r-devel
        
>     ______________________________________________
>     R-devel at r-project.org mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
    
> -- 
> Herv? Pag?s

> Bioconductor Core Team
> hpages.on.github at gmail.com


From |kry|ov @end|ng |rom d|@root@org  Thu Apr 25 08:56:10 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Thu, 25 Apr 2024 09:56:10 +0300
Subject: [Rd] View() segfaulting ...
In-Reply-To: <101c811e-3164-4a27-9465-01e360fa236f@gmail.com>
References: <101c811e-3164-4a27-9465-01e360fa236f@gmail.com>
Message-ID: <20240425095610.30865d04@Tarkus>

On Wed, 24 Apr 2024 19:35:42 -0400
Ben Bolker <bbolker at gmail.com> wrote:

>  I'm using bleeding-edge R-devel, so maybe my build is weird. Can 
> anyone else reproduce this?
> 
>    View() seems to crash on just about anything.

Not for me, sorry.

If you have a sufficiently new processor, you can use `rr` [*] to
capture the crash, set a breakpoint in in_R_X11_dataviewer and rewind,
then set a watchpoint on the stack canary and run the program forward
again:
https://www.redhat.com/en/blog/debugging-stack-protector-failures

If you can't locate the canary, try setting watchpoints on large local
variables. Without `rr`, the procedure is probably the same, but
without rewinding: set a breakpoint in in_R_X11_dataviewer, set some
watchpoints, see if they fire when they shouldn't, start from scratch
if you get past the watchpoints and the process crashes.

I think that that either an object file didn't get rebuilt when it
should have, or a shared library used by something downstream from
View() got an ABI-breaking update. If this still reproduces with a clean
rebuild of R, it's definitely worth investigating further, perhaps using
AddressSanitizer. Valgrind may be lacking the information about the
stack canary and thus failing to distinguish between overwriting the
canary and normal access to a stack variable via a pointer.

-- 
Best regards,
Ivan

[*] https://rr-project.org/
Edit distance of one from the domain name of the R project!

Use rr replay -g $EVENT_NUMBER to debug past the initial execve()
from the shell wrapper: https://github.com/rr-debugger/rr/wiki/FAQ


From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Thu Apr 25 09:03:24 2024
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Thu, 25 Apr 2024 00:03:24 -0700
Subject: [Rd] 
 Question regarding .make_numeric_version with non-character input
In-Reply-To: <26153.62268.101698.468796@hornik.net>
References: <PAXP251MB0578C2827F352E173D109017983A2@PAXP251MB0578.EURP251.PROD.OUTLOOK.COM>
 <26119.4881.618411.645248@rob.eddelbuettel.com>
 <14ab2002-74a8-491b-8921-b66364479003@polimi.it>
 <26122.43144.181286.316307@hornik.net>
 <8a599021-e0f5-4498-ba9c-bbdcb90e4486@gmail.com>
 <26153.62268.101698.468796@hornik.net>
Message-ID: <38248593-ae96-4600-8995-adc7512658a5@gmail.com>

On 4/24/24 23:07, Kurt Hornik wrote:

>>>>>> Herv? Pag?s writes:
>> Hi Kurt,
>> Is it intended that numeric_version() returns an error by default on
>> non-character input in R 4.4.0?
> Dear Herve, yes, that's the intention.
>
>> It seems that I can turn this into a warning by setting
>> _R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_=false but I don't
>> seem to be able to find any of this mentioned in the NEWS file.
> That's what I added for smoothing the transition: it will be removed
> from the trunk shortly.

Thanks for clarifying.? Could this be documented in the NEWS file? This 
is a breaking change (it breaks a couple of Bioconductor packages) and 
people are not going to set this environment variable if they are not 
aware of it.

Thanks again,

H.

>
> Best
> -k
>
>> Thanks,
>> H.
>> On 4/1/24 05:28, Kurt Hornik wrote:
>>                          Andrea Gilardi via R-devel writes:
>                          
>>      Thanks: should be fixed now in the trunk.
>      
>>      Best
>>      -k
>>          Thank you very much Dirk for your kind words and for confirming the bug.
>>          Next week I will open a new issue on Bugzilla adding the related patch.
>          
>>          Kind regards
>          
>>          Andrea
>          
>>          On 29/03/2024 20:14, Dirk Eddelbuettel wrote:
>          
>>              On 29 March 2024 at 17:56, Andrea Gilardi via R-devel wrote:
>>              | Dear all,
>>              |
>>              | I have a question regarding the R-devel version of .make_numeric_version() function. As far as I can understand, the current code (https://github.com/wch/r-source/blob/66b91578dfc85140968f07dd4e72d8cb8a54f4c6/src/library/base/R/version.R#L50-L56) runs the following steps in case of non-character input:
>>              |
>>              | 1. It creates a message named msg using gettextf.
>>              | 2. Such object is then passed to stop(msg) or warning(msg) according to the following condition
>>              |
>>              | tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false")
>>              |
>>              | However, I don't understand the previous code since the output of Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false" is just a boolean value and tolower() will just return "true" or "false". Maybe the intended code is tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false" ? Or am I missing something?
>              
>>              Yes, agreed -- good catch.  In full, the code is (removing leading
>>              whitespace, and putting it back onto single lines)
>              
>>              msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
>>              if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false"))
>>              stop(msg, domain = NA)
>>              else
>>              warning(msg, domain = NA, immediate. = TRUE)
>              
>>              where msg is constant (but reflecting language settings via standard i18n)
>>              and as you not the parentheses appear wrong.  What was intended is likely
>              
>>              msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
>>              if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false")
>>              stop(msg, domain = NA)
>>              else
>>              warning(msg, domain = NA, immediate. = TRUE)
>              
>>              If you use bugzilla before and have a handle, maybe file a bug report with
>>              this as patch athttps://bugs.r-project.org/
>              
>>              Dirk
>>          ______________________________________________
>>          R-devel at r-project.org  mailing list
>>          https://stat.ethz.ch/mailman/listinfo/r-devel
>          
>>      ______________________________________________
>>      R-devel at r-project.org  mailing list
>>      https://stat.ethz.ch/mailman/listinfo/r-devel
>      
>> -- 
>> Herv? Pag?s
>> Bioconductor Core Team
>> hpages.on.github at gmail.com

-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com

	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Thu Apr 25 13:24:18 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Thu, 25 Apr 2024 14:24:18 +0300
Subject: [Rd] [External] Re:  Is ALTREP "non-API"?
In-Reply-To: <dc1e6797-0ec-1061-7ce3-88a384d7ee8c@uiowa.edu>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
 <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
 <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>
 <EBBB96A0-D6CA-4003-BF55-8F5344B18892@R-project.org>
 <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
 <dc1e6797-0ec-1061-7ce3-88a384d7ee8c@uiowa.edu>
Message-ID: <20240425142418.6b78c7ed@arachnoid>

On Wed, 24 Apr 2024 15:31:39 -0500 (CDT)
luke-tierney--- via R-devel <r-devel at r-project.org> wrote:

> We would be better off (in my view, not necessarily shared by others
> in R-core) if we could get to a point where:
> 
>      all entry points listed in installed header files can be used in
>      packages, at least with some caveats;
> 
>      the caveats are expressed in a standard way that is searchable,
>      e.g. with a standardized comment syntax at the header file or
>      individual declaration level.

This sounds almost like Doxygen, although the exact syntax used to
denote the entry points and the necessary comments is far from the most
important detail at this point.

> There are some 500 entry points in the R shared library that are in
> the installed headers but not mentioned in WRE. These would need to
> be reviewed and adjusted.

Is there a way for outsiders to help? For example, would it help to
produce the linking graph (package P links to entry points X, Y)? I
understand that an entry point being unpopular doesn't mean it
shouldn't be public (and the other way around), but combined with a
list of entry points that are listed in WRE, such a graph could be
useful to direct effort or estimate impact from interface changes.

-- 
Best regards,
Ivan


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Apr 25 14:07:04 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 25 Apr 2024 07:07:04 -0500 (CDT)
Subject: [Rd] [External]  View() segfaulting ...
In-Reply-To: <101c811e-3164-4a27-9465-01e360fa236f@gmail.com>
References: <101c811e-3164-4a27-9465-01e360fa236f@gmail.com>
Message-ID: <627b6a7c-0e1-7ed4-b6c9-5899d8d22065@uiowa.edu>

I saw it also on some of my Ubuntu builds, but the issue went away
after a make clean/make, so maybe give that a try.

Best,

luke

On Wed, 24 Apr 2024, Ben Bolker wrote:

>  I'm using bleeding-edge R-devel, so maybe my build is weird. Can anyone 
> else reproduce this?
>
>  View() seems to crash on just about anything.
>
> View(1:3)
> *** stack smashing detected ***: terminated
> Aborted (core dumped)
>
>  If I debug(View) I get to the last line of code with nothing obviously 
> looking pathological:
>
> Browse[1]>
> debug: invisible(.External2(C_dataviewer, x, title))
> Browse[1]> x
> $x
> [1] "1" "2" "3"
>
> Browse[1]> title
> [1] "Data: 1:3"
> Browse[1]>
> *** stack smashing detected ***: terminated
> Aborted (core dumped)
>
>
>
> ====
> R Under development (unstable) (2024-04-24 r86483)
> Platform: x86_64-pc-linux-gnu
> Running under: Pop!_OS 22.04 LTS
>
> Matrix products: default
> BLAS/LAPACK: 
> /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so; LAPACK 
> version 3.10.0
>
> locale:
> [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C
> [3] LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8
> [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8
> [7] LC_PAPER=en_CA.UTF-8       LC_NAME=C
> [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C
>
> time zone: America/Toronto
> tzcode source: system (glibc)
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.5.0
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/


From edd @end|ng |rom deb|@n@org  Thu Apr 25 14:22:43 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 25 Apr 2024 07:22:43 -0500
Subject: [Rd] 
 Question regarding .make_numeric_version with non-character input
In-Reply-To: <26153.62268.101698.468796@hornik.net>
References: <PAXP251MB0578C2827F352E173D109017983A2@PAXP251MB0578.EURP251.PROD.OUTLOOK.COM>
 <26119.4881.618411.645248@rob.eddelbuettel.com>
 <14ab2002-74a8-491b-8921-b66364479003@polimi.it>
 <26122.43144.181286.316307@hornik.net>
 <8a599021-e0f5-4498-ba9c-bbdcb90e4486@gmail.com>
 <26153.62268.101698.468796@hornik.net>
Message-ID: <26154.19219.534249.771759@rob.eddelbuettel.com>


Hi Kurt,

On 25 April 2024 at 08:07, Kurt Hornik wrote:
| >>>>> Herv? Pag?s writes:
| 
| > Hi Kurt,
| > Is it intended that numeric_version() returns an error by default on
| > non-character input in R 4.4.0? 
| 
| Dear Herve, yes, that's the intention.
| 
| > It seems that I can turn this into a warning by setting
| > _R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_=false but I don't
| > seem to be able to find any of this mentioned in the NEWS file.
| 
| That's what I added for smoothing the transition: it will be removed
| from the trunk shortly.

I would actually be nice to have a more robust variant for non-CRAN
versions. For example I just had to do a local hack to be able to use what
the QuantLib 'rc' 1.34-rc reported (when I then used to R facilities to
condition code and tests on whether I was dealing with code before or after
an API transition).  So as a wishlist: could you envision an extension to
package_version() casting that, say, removes all [a-zA-Z]+ first (if opted
into) ?

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From jeroenoom@ @end|ng |rom gm@||@com  Thu Apr 25 14:45:04 2024
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Thu, 25 Apr 2024 14:45:04 +0200
Subject: [Rd] Big speedup in install.packages() by re-using connections
In-Reply-To: <CABFfbXtpXChZLeLREEWFHFWP24cvD8Ox-7xfBGj0p+N0Rjzwbg@mail.gmail.com>
References: <CABFfbXtpXChZLeLREEWFHFWP24cvD8Ox-7xfBGj0p+N0Rjzwbg@mail.gmail.com>
Message-ID: <CABFfbXtnteY=_qRz8ZBQ4aAPi-j+HjasRvU-fcLPJm2nu+QwLQ@mail.gmail.com>

I'd like to raise this again now that 4.4 is out.

Below is a more complete patch which includes a function to properly
cleanup libcurl when R quits. Implementing this is a little tricky
because libcurl is a separate "module" in R, perhaps there is a better
way, but this works:

  view: https://github.com/r-devel/r-svn/pull/166/files
  patch: https://github.com/r-devel/r-svn/pull/166.diff

The old patch is still there as well, which is meant a minimal proof
of concept to test the performance gains for reusing the connection:

  view: https://github.com/r-devel/r-svn/pull/155/files
  patch: https://github.com/r-devel/r-svn/pull/155.diff

Performance gains are greatest on high-bandwidth servers when
downloading many files from the same server (e.g. packages from a cran
mirror). In such cases, currently over 90% of the total time is spent
on initiating and tearing town a separate SSL connection for each file
download.

Thoughts?



On Sat, Mar 2, 2024 at 3:07?PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
>
> Currently download.file() creates and terminates a new TLS connection
> for each download. This creates a lot of overhead which is expensive
> for both client and server (in particular the TLS handshake). Modern
> internet clients (including browsers) re-use connections for many http
> requests.
>
> We can do this in R by creating a persistent libcurl "multi-handle".
> The R libcurl implementation already uses a multi-handle, however it
> destroys it after each download, which defeats the purpose. The
> purpose of the multi-handle is to keep it alive and let libcurl
> maintain a persistent connection pool. This is particularly relevant
> for install.packages() which needs to download many files from one and
> the same server.
>
> Here is a bare minimal proof of concept patch that re-uses one and the
> same multi-handle for all requests in R:
> https://github.com/r-devel/r-svn/pull/155/files
>
> Some quick benchmarking shows that this can lead to big speedups for
> download.packages() on high-bandwidth servers (such as CI). This quick
> test to download 100 packages from CRAN showed more than 10x speedup
> for me: https://github.com/r-devel/r-svn/pull/155
>
> Moreover, I think this may make install.packages() more robust. In CI
> build logs that download many packages, I often see one or two
> downloads randomly failing with a TLS-connect error. I am hopeful this
> problem will disappear when using a single connection to the CRAN
> server to download all the packages.


From bbo|ker @end|ng |rom gm@||@com  Thu Apr 25 15:14:12 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 25 Apr 2024 09:14:12 -0400
Subject: [Rd] [External]  View() segfaulting ...
In-Reply-To: <627b6a7c-0e1-7ed4-b6c9-5899d8d22065@uiowa.edu>
References: <101c811e-3164-4a27-9465-01e360fa236f@gmail.com>
 <627b6a7c-0e1-7ed4-b6c9-5899d8d22065@uiowa.edu>
Message-ID: <85fe6d9a-38bb-440a-8127-e28a2c252c63@gmail.com>

   A clean build solves it for me too. Thank you!
   (I need to add this to my "have you tried turning it off and back on 
again?" list ...)

   Ben


On 2024-04-25 8:07 a.m., luke-tierney at uiowa.edu wrote:
> I saw it also on some of my Ubuntu builds, but the issue went away
> after a make clean/make, so maybe give that a try.
> 
> Best,
> 
> luke
> 
> On Wed, 24 Apr 2024, Ben Bolker wrote:
> 
>> ?I'm using bleeding-edge R-devel, so maybe my build is weird. Can 
>> anyone else reproduce this?
>>
>> ?View() seems to crash on just about anything.
>>
>> View(1:3)
>> *** stack smashing detected ***: terminated
>> Aborted (core dumped)
>>
>> ?If I debug(View) I get to the last line of code with nothing 
>> obviously looking pathological:
>>
>> Browse[1]>
>> debug: invisible(.External2(C_dataviewer, x, title))
>> Browse[1]> x
>> $x
>> [1] "1" "2" "3"
>>
>> Browse[1]> title
>> [1] "Data: 1:3"
>> Browse[1]>
>> *** stack smashing detected ***: terminated
>> Aborted (core dumped)
>>
>>
>>
>> ====
>> R Under development (unstable) (2024-04-24 r86483)
>> Platform: x86_64-pc-linux-gnu
>> Running under: Pop!_OS 22.04 LTS
>>
>> Matrix products: default
>> BLAS/LAPACK: 
>> /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so; 
>> LAPACK version 3.10.0
>>
>> locale:
>> [1] LC_CTYPE=en_CA.UTF-8?????? LC_NUMERIC=C
>> [3] LC_TIME=en_CA.UTF-8??????? LC_COLLATE=en_CA.UTF-8
>> [5] LC_MONETARY=en_CA.UTF-8??? LC_MESSAGES=en_CA.UTF-8
>> [7] LC_PAPER=en_CA.UTF-8?????? LC_NAME=C
>> [9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
>> [11] LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C
>>
>> time zone: America/Toronto
>> tzcode source: system (glibc)
>>
>> attached base packages:
>> [1] stats???? graphics? grDevices utils???? datasets? methods?? base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_4.5.0
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Thu Apr 25 15:57:20 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Thu, 25 Apr 2024 15:57:20 +0200
Subject: [Rd] 
 Question regarding .make_numeric_version with non-character input
In-Reply-To: <26154.19219.534249.771759@rob.eddelbuettel.com>
References: <PAXP251MB0578C2827F352E173D109017983A2@PAXP251MB0578.EURP251.PROD.OUTLOOK.COM>
 <26119.4881.618411.645248@rob.eddelbuettel.com>
 <14ab2002-74a8-491b-8921-b66364479003@polimi.it>
 <26122.43144.181286.316307@hornik.net>
 <8a599021-e0f5-4498-ba9c-bbdcb90e4486@gmail.com>
 <26153.62268.101698.468796@hornik.net>
 <26154.19219.534249.771759@rob.eddelbuettel.com>
Message-ID: <26154.24896.64162.450076@hornik.net>

>>>>> Dirk Eddelbuettel writes:

> Hi Kurt,

> On 25 April 2024 at 08:07, Kurt Hornik wrote:
> | >>>>> Herv? Pag?s writes:
> | 
> | > Hi Kurt,
> | > Is it intended that numeric_version() returns an error by default on
> | > non-character input in R 4.4.0? 
> | 
> | Dear Herve, yes, that's the intention.
> | 
> | > It seems that I can turn this into a warning by setting
> | > _R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_=false but I don't
> | > seem to be able to find any of this mentioned in the NEWS file.
> | 
> | That's what I added for smoothing the transition: it will be removed
> | from the trunk shortly.

> I would actually be nice to have a more robust variant for non-CRAN
> versions. For example I just had to do a local hack to be able to use
> what the QuantLib 'rc' 1.34-rc reported (when I then used to R
> facilities to condition code and tests on whether I was dealing with
> code before or after an API transition).  So as a wishlist: could you
> envision an extension to package_version() casting that, say, removes
> all [a-zA-Z]+ first (if opted into) ?

Well, if I could turn back time and start again, I'd implement package
versions in the Debian way, and not numeric only.  As you know, the
current approach does not conveniently allow for handling binary
revisions or NMUs.

Currently, package_version extends numeric_version, but in principle
that could be changed: we would of course have to ensure that we go on
using numeric-only package versions for source packages so that older
versions of R can handle these.

One could in principle also enhance the 'strict' argument so that
e.g. strict = NA says drop all non-numeric non-sep parts, but it would
be better to first figure out whether it wouldn't be better to make
things work for non-numeric version components too :-)

Best
-k



> Dirk

> -- 
> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Thu Apr 25 16:04:13 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Thu, 25 Apr 2024 16:04:13 +0200
Subject: [Rd] 
 Question regarding .make_numeric_version with non-character input
In-Reply-To: <38248593-ae96-4600-8995-adc7512658a5@gmail.com>
References: <PAXP251MB0578C2827F352E173D109017983A2@PAXP251MB0578.EURP251.PROD.OUTLOOK.COM>
 <26119.4881.618411.645248@rob.eddelbuettel.com>
 <14ab2002-74a8-491b-8921-b66364479003@polimi.it>
 <26122.43144.181286.316307@hornik.net>
 <8a599021-e0f5-4498-ba9c-bbdcb90e4486@gmail.com>
 <26153.62268.101698.468796@hornik.net>
 <38248593-ae96-4600-8995-adc7512658a5@gmail.com>
Message-ID: <26154.25309.11823.154138@hornik.net>

>>>>> Herv? Pag?s writes:

> On 4/24/24 23:07, Kurt Hornik wrote:
>>>>>>> Herv? Pag?s writes:
>>> Hi Kurt,
>>> Is it intended that numeric_version() returns an error by default on
>>> non-character input in R 4.4.0?
>> Dear Herve, yes, that's the intention.
>> 
>>> It seems that I can turn this into a warning by setting
>>> _R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_=false but I don't
>>> seem to be able to find any of this mentioned in the NEWS file.
>> That's what I added for smoothing the transition: it will be removed
>> from the trunk shortly.

> Thanks for clarifying.? Could this be documented in the NEWS file? This 
> is a breaking change (it breaks a couple of Bioconductor packages) and 
> people are not going to set this environment variable if they are not 
> aware of it.

Sure, I'll look into adding something.  (Too late for 4.4.0, of course.)

Best
-k

> Thanks again,

> H.

>> 
>> Best
>> -k
>> 
>>> Thanks,
>>> H.
>>> On 4/1/24 05:28, Kurt Hornik wrote:
>>> Andrea Gilardi via R-devel writes:
>> 
>>> Thanks: should be fixed now in the trunk.
>> 
>>> Best
>>> -k
>>> Thank you very much Dirk for your kind words and for confirming the bug.
>>> Next week I will open a new issue on Bugzilla adding the related patch.
>> 
>>> Kind regards
>> 
>>> Andrea
>> 
>>> On 29/03/2024 20:14, Dirk Eddelbuettel wrote:
>> 
>>> On 29 March 2024 at 17:56, Andrea Gilardi via R-devel wrote:
>>> | Dear all,
>>> |
>>> | I have a question regarding the R-devel version of .make_numeric_version() function. As far as I can understand, the current code (https://github.com/wch/r-source/blob/66b91578dfc85140968f07dd4e72d8cb8a54f4c6/src/library/base/R/version.R#L50-L56) runs the following steps in case of non-character input:
>>> |
>>> | 1. It creates a message named msg using gettextf.
>>> | 2. Such object is then passed to stop(msg) or warning(msg) according to the following condition
>>> |
>>> | tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false")
>>> |
>>> | However, I don't understand the previous code since the output of Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false" is just a boolean value and tolower() will just return "true" or "false". Maybe the intended code is tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false" ? Or am I missing something?
>> 
>>> Yes, agreed -- good catch.  In full, the code is (removing leading
>>> whitespace, and putting it back onto single lines)
>> 
>>> msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
>>> if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_") != "false"))
>>> stop(msg, domain = NA)
>>> else
>>> warning(msg, domain = NA, immediate. = TRUE)
>> 
>>> where msg is constant (but reflecting language settings via standard i18n)
>>> and as you not the parentheses appear wrong.  What was intended is likely
>> 
>>> msg <- gettextf("invalid non-character version specification 'x' (type: %s)", typeof(x))
>>> if(tolower(Sys.getenv("_R_CHECK_STOP_ON_INVALID_NUMERIC_VERSION_INPUTS_")) != "false")
>>> stop(msg, domain = NA)
>>> else
>>> warning(msg, domain = NA, immediate. = TRUE)
>> 
>>> If you use bugzilla before and have a handle, maybe file a bug report with
>>> this as patch athttps://bugs.r-project.org/
>> 
>>> Dirk
>>> ______________________________________________
>>> R-devel at r-project.org  mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>>> ______________________________________________
>>> R-devel at r-project.org  mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>>> -- 
>>> Herv? Pag?s
>>> Bioconductor Core Team
>>> hpages.on.github at gmail.com

> -- 
> Herv? Pag?s

> Bioconductor Core Team
> hpages.on.github at gmail.com

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |kry|ov @end|ng |rom d|@root@org  Thu Apr 25 17:01:09 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Thu, 25 Apr 2024 18:01:09 +0300
Subject: [Rd] Big speedup in install.packages() by re-using connections
In-Reply-To: <CABFfbXtnteY=_qRz8ZBQ4aAPi-j+HjasRvU-fcLPJm2nu+QwLQ@mail.gmail.com>
References: <CABFfbXtpXChZLeLREEWFHFWP24cvD8Ox-7xfBGj0p+N0Rjzwbg@mail.gmail.com>
 <CABFfbXtnteY=_qRz8ZBQ4aAPi-j+HjasRvU-fcLPJm2nu+QwLQ@mail.gmail.com>
Message-ID: <20240425180109.418ca5f4@arachnoid>

On Thu, 25 Apr 2024 14:45:04 +0200
Jeroen Ooms <jeroenooms at gmail.com> wrote:

> Thoughts?

How verboten would it be to create an empty external pointer object,
add it to the preserved list, and set an on-exit finalizer to clean up
the curl multi-handle? As far as I can tell, the internet module is not
supposed to be unloaded, so this would not introduce an opportunity to
jump to an unmapped address. This makes it possible to avoid adding a
CurlCleanup() function to the internet module:

Index: src/modules/internet/libcurl.c
===================================================================
--- src/modules/internet/libcurl.c	(revision 86484)
+++ src/modules/internet/libcurl.c	(working copy)
@@ -55,6 +55,47 @@
 
 static int current_timeout = 0;
 
+// The multi-handle is shared between downloads for reusing connections
+static CURLM *shared_mhnd = NULL;
+static SEXP mhnd_sentinel = NULL;
+
+static void cleanup_mhnd(SEXP ignored)
+{
+    if(shared_mhnd){
+        curl_multi_cleanup(shared_mhnd);
+        shared_mhnd = NULL;
+    }
+    curl_global_cleanup();
+}
+static void rollback_mhnd_sentinel(void* sentinel) {
+    // Failed to allocate memory while registering a finalizer,
+    // therefore must release the object
+    R_ReleaseObject((SEXP)sentinel);
+}
+static CURLM *get_mhnd(void)
+{
+    if (!mhnd_sentinel) {
+      SEXP sentinel = PROTECT(R_MakeExternalPtr(NULL, R_NilValue, R_NilValue));
+      R_PreserveObject(sentinel);
+      UNPROTECT(1);
+      // Avoid leaking the sentinel before setting the finalizer
+      RCNTXT cntxt;
+      begincontext(&cntxt, CTXT_CCODE, R_NilValue, R_BaseEnv, R_BaseEnv,
+                   R_NilValue, R_NilValue);
+      cntxt.cend = &rollback_mhnd_sentinel;
+      cntxt.cenddata = sentinel;
+      R_RegisterCFinalizerEx(sentinel, cleanup_mhnd, TRUE);
+      // Succeeded, no need to clean up if endcontext() fails allocation
+      mhnd_sentinel = sentinel;
+      cntxt.cend = NULL;
+      endcontext(&cntxt);
+    }
+    if(!shared_mhnd) {
+      shared_mhnd = curl_multi_init();
+    }
+    return shared_mhnd;
+}
+
 # if LIBCURL_VERSION_MAJOR < 7 || (LIBCURL_VERSION_MAJOR == 7 && LIBCURL_VERSION_MINOR < 28)
 
 // curl/curl.h includes <sys/select.h> and headers it requires.
@@ -565,8 +606,6 @@
 	if (c->hnd && c->hnd[i])
 	    curl_easy_cleanup(c->hnd[i]);
     }
-    if (c->mhnd)
-	curl_multi_cleanup(c->mhnd);
     if (c->headers)
 	curl_slist_free_all(c->headers);
 
@@ -668,7 +707,7 @@
 	c.headers = headers = tmp;
     }
 
-    CURLM *mhnd = curl_multi_init();
+    CURLM *mhnd = get_mhnd();
     if (!mhnd)
 	error(_("could not create curl handle"));
     c.mhnd = mhnd;


-- 
Best regards,
Ivan


From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Thu Apr 25 18:57:25 2024
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Thu, 25 Apr 2024 09:57:25 -0700
Subject: [Rd] 
 Question regarding .make_numeric_version with non-character input
In-Reply-To: <26154.25309.11823.154138@hornik.net>
References: <PAXP251MB0578C2827F352E173D109017983A2@PAXP251MB0578.EURP251.PROD.OUTLOOK.COM>
 <26119.4881.618411.645248@rob.eddelbuettel.com>
 <14ab2002-74a8-491b-8921-b66364479003@polimi.it>
 <26122.43144.181286.316307@hornik.net>
 <8a599021-e0f5-4498-ba9c-bbdcb90e4486@gmail.com>
 <26153.62268.101698.468796@hornik.net>
 <38248593-ae96-4600-8995-adc7512658a5@gmail.com>
 <26154.25309.11823.154138@hornik.net>
Message-ID: <0c9dd87b-200f-460d-ac60-49f476f6fddb@gmail.com>

On 4/25/24 07:04, Kurt Hornik wrote:

...
> Sure, I'll look into adding something.  (Too late for 4.4.0, of course.)
>
> Best
> -k

Great. Thanks!

H.

-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com

	[[alternative HTML version deleted]]


From kev|nu@hey @end|ng |rom gm@||@com  Thu Apr 25 19:10:44 2024
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Thu, 25 Apr 2024 10:10:44 -0700
Subject: [Rd] [External] Re: Is ALTREP "non-API"?
In-Reply-To: <20240425142418.6b78c7ed@arachnoid>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
 <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
 <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>
 <EBBB96A0-D6CA-4003-BF55-8F5344B18892@R-project.org>
 <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
 <dc1e6797-0ec-1061-7ce3-88a384d7ee8c@uiowa.edu>
 <20240425142418.6b78c7ed@arachnoid>
Message-ID: <CAJXgQP2Lt2tgfZzASxKeodN7a7XNX4fkmihA+FdqdnEdUSpkgw@mail.gmail.com>

On Thu, Apr 25, 2024 at 4:24?AM Ivan Krylov via R-devel
<r-devel at r-project.org> wrote:
>
> On Wed, 24 Apr 2024 15:31:39 -0500 (CDT)
> luke-tierney--- via R-devel <r-devel at r-project.org> wrote:
>
> > We would be better off (in my view, not necessarily shared by others
> > in R-core) if we could get to a point where:
> >
> >      all entry points listed in installed header files can be used in
> >      packages, at least with some caveats;
> >
> >      the caveats are expressed in a standard way that is searchable,
> >      e.g. with a standardized comment syntax at the header file or
> >      individual declaration level.
>
> This sounds almost like Doxygen, although the exact syntax used to
> denote the entry points and the necessary comments is far from the most
> important detail at this point.

I'm guessing Doxygen would be overkill here? I think instead these
would just be structured comments that mark a particular function, or
set of functions, as part of the API -- and some automated tool could
then just pull those functions out into a list of API functions. Then,
we would have a single "source of truth" for what is in the API, and
could be seen at a glance by browsing / grepping the installed R
headers. I see this as a structured way of accomplishing what is
already being done to clarify whether functions are part of the API in
the R headers.

A similar approach would have macros like R_API, or with a bit more
specificity, maybe something like R_API(ALTREP), which would have no
actual definition -- they would exist in the source purely to mark
functions as part of (some subset of) the API. Or, similarly, anything
declared within a block like R_API {} would be considered part of the
API (to avoid the need to tag every declaration individually.) This
would at least make it easy to figure out what functions are part of
the R API, without requiring too much extra maintenance effort from
the R maintainers.

The other alternative I could imagine would be an installed header
like R_ext/API.h, which package authors who want to submit packages to
CRAN would be required to use, with direct usage of other headers
eventually being phased out. But that would be a larger maintenance
burden, unless its generation could be automated (e.g. from the
functions tagged above).

As a side note, it's worth stating that the set of API endpoints that
R Core wants to make available to CRAN packages, versus those that are
intended for other usages (e.g. applications embedding R), are
different sets. But I suspect this discussion is most relevant to R
package authors who wish to submit their packages to CRAN.

> > There are some 500 entry points in the R shared library that are in
> > the installed headers but not mentioned in WRE. These would need to
> > be reviewed and adjusted.
>
> Is there a way for outsiders to help? For example, would it help to
> produce the linking graph (package P links to entry points X, Y)? I
> understand that an entry point being unpopular doesn't mean it
> shouldn't be public (and the other way around), but combined with a
> list of entry points that are listed in WRE, such a graph could be
> useful to direct effort or estimate impact from interface changes.

I'm guessing the most welcome kinds of contributions would be
documentation? IMHO, "documenting an API" and "describing how an API
can be used" are somewhat separate endeavors. I believe R-exts does an
excellent job of the latter, but may not be the right vehicle for the
former. To that end, I believe it would be helpful to have some
structured API documentation as a separate R-api document. Each
documented function would have described inputs, outputs, whether
inputs + outputs require protection from the garbage collector, and
other important usage notes. This is something that I think could be
developed and maintained by community members, with members of the R
community submitting documentation for each of the available API
functions. Such an effort could be started independently from R Core,
but some guidance would be appreciated as far as (1) would such a
document eventually be accepted as part of the official R manuals, and
(2) if so, what would be required of such a document.

> --
> Best regards,
> Ivan
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Apr 26 11:55:36 2024
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 26 Apr 2024 11:55:36 +0200
Subject: [Rd] R 4.4.0 has version of Matrix 1.7-0,
 but it's not available on CRAN
Message-ID: <CABtg=KnJ-46TuQ5HhcFxZL3=T2h6G39HAJB_aUygUj6ZfhbKAw@mail.gmail.com>

I don't know if this is a bug, but it is certainly weird. AFAICT R
4.4.0 has Matrix 1.7-0.

However, currently CRAN has

Package: Matrix
Version: 1.6-5
Priority: recommended
Depends: R (>= 3.5.0), methods
...

(plus another version for R >= 4.5.0 only).

Which has some weird consequences, e.g. if I have an R 4.4.0
installation without the recommended packages, I don't have a way of
installing Matrix 1.7-0. Whereas R 4.4.0 installations with
recommended packages come with Matrix 1.7-0.

Gabor


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Apr 26 12:32:59 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 26 Apr 2024 12:32:59 +0200
Subject: [Rd] R 4.4.0 has version of Matrix 1.7-0,
 but it's not available on CRAN
In-Reply-To: <CABtg=KnJ-46TuQ5HhcFxZL3=T2h6G39HAJB_aUygUj6ZfhbKAw@mail.gmail.com>
References: <CABtg=KnJ-46TuQ5HhcFxZL3=T2h6G39HAJB_aUygUj6ZfhbKAw@mail.gmail.com>
Message-ID: <26155.33499.174513.223350@stat.math.ethz.ch>

>>>>> G?bor Cs?rdi 
>>>>>     on Fri, 26 Apr 2024 11:55:36 +0200 writes:

    > I don't know if this is a bug, but it is certainly weird. AFAICT R
    > 4.4.0 has Matrix 1.7-0.

Yes, it *is* available from CRAN:  You can see it when looking into the

4.4.0/           , specifically the
4.4.0/Recommended/ sub directory.

Recommended packages should be built as part of R
unless *you* really want to *not* get them by choosing at
configure time, not to get them via extra flag
  --without-recommended-packages.

So, well, you got what you wanted.

    > However, currently CRAN has

    > Package: Matrix
    > Version: 1.6-5
    > Priority: recommended
    > Depends: R (>= 3.5.0), methods
    > ...

Yes, because it has to provide Matrix to R versions before 4.4.0
and Matrix 1.7-0 has  'Depends: R (>= 4.4.0)'

    > (plus another version for R >= 4.5.0 only).

    > Which has some weird consequences, e.g. if I have an R 4.4.0
    > installation without the recommended packages, 

(why would you explicitly choose *not* to have the
 recommended packages when they *are* recommended .. :-b )

    > I don't have a way of  installing Matrix 1.7-0. 

That's not true (see above), but it maybe true that
install.packages() does not work directly -- I guess you
should get it to work with correct function arguments;
if not, you'd definitely have found a missing feature...
.. *and* Rstudio button clicking works even less, because it does
not allow to specify the install.packages() call.

.. and yes, ideally install.packages() would be smart enough to
figure that Matrix is recommended *and* that it should therefore
try the same location ( ./4.4.0/Recommended/ in this case) as
R's own  tools/rsync-recommended  script does.

Finally, I'd think it definitely would be nice for
install.packages("Matrix") to automatically get the correct
Matrix version from CRAN ... so we (R-core) would be grateful
for a patch to install.packages() to achieve this  (unless that
patch is too large or too much involved for reliable
maintenance).

Martin
    
    > Whereas R 4.4.0 installations with
    > recommended packages come with Matrix 1.7-0.

    > Gabor


From t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk  Fri Apr 26 12:58:21 2024
From: t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk (Tim Taylor)
Date: Fri, 26 Apr 2024 11:58:21 +0100
Subject: [Rd] R 4.4.0 has version of Matrix 1.7-0,
 but it's not available on CRAN
In-Reply-To: <26155.33499.174513.223350@stat.math.ethz.ch>
References: <CABtg=KnJ-46TuQ5HhcFxZL3=T2h6G39HAJB_aUygUj6ZfhbKAw@mail.gmail.com>
 <26155.33499.174513.223350@stat.math.ethz.ch>
Message-ID: <d64bfbf5-d024-4448-99e8-bd38285723f2@app.fastmail.com>

On Fri, 26 Apr 2024, at 11:32 AM, Martin Maechler wrote:
>>>>>> G?bor Cs?rdi 
>>>>>>     on Fri, 26 Apr 2024 11:55:36 +0200 writes:
>
>     > I don't know if this is a bug, but it is certainly weird. AFAICT R
>     > 4.4.0 has Matrix 1.7-0.
>
> Yes, it *is* available from CRAN:  You can see it when looking into the
>
> 4.4.0/           , specifically the
> 4.4.0/Recommended/ sub directory.
>
> Recommended packages should be built as part of R
> unless *you* really want to *not* get them by choosing at
> configure time, not to get them via extra flag
>   --without-recommended-packages.
>
> So, well, you got what you wanted.
>
>     > However, currently CRAN has
>
>     > Package: Matrix
>     > Version: 1.6-5
>     > Priority: recommended
>     > Depends: R (>= 3.5.0), methods
>     > ...
> .
> Yes, because it has to provide Matrix to R versions before 4.4.0
> and Matrix 1.7-0 has  'Depends: R (>= 4.4.0)'
>
>     > (plus another version for R >= 4.5.0 only).
>
>     > Which has some weird consequences, e.g. if I have an R 4.4.0
>     > installation without the recommended packages, 
>
> (why would you explicitly choose *not* to have the
>  recommended packages when they *are* recommended .. :-b )
>   ...

Hi Martin.

I appreciate the efforts you are going to balance these Matrix updates across CRAN versions. Related, but a little tangential, to the installation situation, I'd still expect the canonical CRAN link (https://cran.r-project.org/package=Matrix) to provide links to the *current* version.  Currently links to a source tarball and the reference manual is for 1.6.5 (I'm guessing vignettes are also from 1.6.5.).

Best

Tim


From |kry|ov @end|ng |rom d|@root@org  Fri Apr 26 13:06:45 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Fri, 26 Apr 2024 14:06:45 +0300
Subject: [Rd] R 4.4.0 has version of Matrix 1.7-0,
 but it's not available on CRAN
In-Reply-To: <26155.33499.174513.223350@stat.math.ethz.ch>
References: <CABtg=KnJ-46TuQ5HhcFxZL3=T2h6G39HAJB_aUygUj6ZfhbKAw@mail.gmail.com>
 <26155.33499.174513.223350@stat.math.ethz.ch>
Message-ID: <20240426140645.4f533273@arachnoid>

On Fri, 26 Apr 2024 12:32:59 +0200
Martin Maechler <maechler at stat.math.ethz.ch> wrote:

> Finally, I'd think it definitely would be nice for
> install.packages("Matrix") to automatically get the correct
> Matrix version from CRAN ... so we (R-core) would be grateful
> for a patch to install.packages() to achieve this

Since the binaries offered on CRAN are already of the correct version
(1.7-0 for -release and -devel), only source package installation needs
to concern itself with the Recommended subdirectory.

Would it be possible to generate the PACKAGES* index files in the
4.4.0/Recommended subdirectory? Then on the R side it would be needed
to add a new repo (adjusting chooseCRANmirror() to set it together with
repos["CRAN"]) and keep the rest of the machinery intact.

-- 
Best regards,
Ivan


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Apr 26 13:15:47 2024
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 26 Apr 2024 13:15:47 +0200
Subject: [Rd] R 4.4.0 has version of Matrix 1.7-0,
 but it's not available on CRAN
In-Reply-To: <20240426140645.4f533273@arachnoid>
References: <CABtg=KnJ-46TuQ5HhcFxZL3=T2h6G39HAJB_aUygUj6ZfhbKAw@mail.gmail.com>
 <26155.33499.174513.223350@stat.math.ethz.ch>
 <20240426140645.4f533273@arachnoid>
Message-ID: <CABtg=KmLstzV_LyV5Zb6XStUZQQkLrUmGQUOeMCCNuPF_iQbvw@mail.gmail.com>

On Fri, Apr 26, 2024 at 1:06?PM Ivan Krylov <ikrylov at disroot.org> wrote:
>
> On Fri, 26 Apr 2024 12:32:59 +0200
> Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>
> > Finally, I'd think it definitely would be nice for
> > install.packages("Matrix") to automatically get the correct
> > Matrix version from CRAN ... so we (R-core) would be grateful
> > for a patch to install.packages() to achieve this
>
> Since the binaries offered on CRAN are already of the correct version
> (1.7-0 for -release and -devel), only source package installation needs
> to concern itself with the Recommended subdirectory.
>
> Would it be possible to generate the PACKAGES* index files in the
> 4.4.0/Recommended subdirectory? Then on the R side it would be needed
> to add a new repo (adjusting chooseCRANmirror() to set it together with
> repos["CRAN"]) and keep the rest of the machinery intact.

That's not how this worked in the past AFAIR. Simply, the packages in
the x.y.z/Recommended directories were included in
src/contrib/PACKAGES*, metadata, with the correct R version
dependencies, in the correct order, so that `install.packages()`
automatically installed the correct version without having to add
extra repositories or manually search for package files.
E.g. right now we have

Package: Matrix
Version: 1.7-0
Priority: recommended
Depends: R (>= 4.5), methods
Path: 4.5.0/Recommended

for R 4.5.0. IMHO what we would need for R 4.4.0 is adding
something like

Package: Matrix
Version: 1.7-0
Priority: recommended
Depends: R (>= 4.4), methods
Path: 4.4.0/Recommended

*after* that.

G.

[...]


From |kry|ov @end|ng |rom d|@root@org  Fri Apr 26 13:36:50 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Fri, 26 Apr 2024 14:36:50 +0300
Subject: [Rd] R 4.4.0 has version of Matrix 1.7-0,
 but it's not available on CRAN
In-Reply-To: <CABtg=KmLstzV_LyV5Zb6XStUZQQkLrUmGQUOeMCCNuPF_iQbvw@mail.gmail.com>
References: <CABtg=KnJ-46TuQ5HhcFxZL3=T2h6G39HAJB_aUygUj6ZfhbKAw@mail.gmail.com>
 <26155.33499.174513.223350@stat.math.ethz.ch>
 <20240426140645.4f533273@arachnoid>
 <CABtg=KmLstzV_LyV5Zb6XStUZQQkLrUmGQUOeMCCNuPF_iQbvw@mail.gmail.com>
Message-ID: <20240426143650.08bbaa3b@arachnoid>

On Fri, 26 Apr 2024 13:15:47 +0200
G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:

> That's not how this worked in the past AFAIR. Simply, the packages in
> the x.y.z/Recommended directories were included in
> src/contrib/PACKAGES*, metadata, with the correct R version
> dependencies, in the correct order, so that `install.packages()`
> automatically installed the correct version without having to add
> extra repositories or manually search for package files.

That's great, then there is no need to patch anything. Thanks for
letting me know.

Should we be asking CRAN at R-project.org to add 4.4.0/Recommended to the
index, then?

-- 
Best regards,
Ivan


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Apr 26 14:37:21 2024
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 27 Apr 2024 00:37:21 +1200
Subject: [Rd] R 4.4.0 has version of Matrix 1.7-0,
 but it's not available on CRAN
In-Reply-To: <CABtg=KmLstzV_LyV5Zb6XStUZQQkLrUmGQUOeMCCNuPF_iQbvw@mail.gmail.com>
References: <CABtg=KnJ-46TuQ5HhcFxZL3=T2h6G39HAJB_aUygUj6ZfhbKAw@mail.gmail.com>
 <26155.33499.174513.223350@stat.math.ethz.ch>
 <20240426140645.4f533273@arachnoid>
 <CABtg=KmLstzV_LyV5Zb6XStUZQQkLrUmGQUOeMCCNuPF_iQbvw@mail.gmail.com>
Message-ID: <8604B7E6-847C-4CC2-80BB-32458C5F54AE@R-project.org>

Everyone, take a deep breath - there have been many disruptions in last few days - some obvious, others associated with the R release and the BioC disruptions on CRAN, so there is no need to panic and start devising "solutions" for issues that are temporary. Things are being sorted out and some may take longer than others to settle. Feel free to report, but please don't speculate or try to "help". That said, you may find that this thread is obsolete by now (thanks to Kurt!), so no need to respond.

Cheers,
Simon


> On Apr 26, 2024, at 11:15 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> On Fri, Apr 26, 2024 at 1:06?PM Ivan Krylov <ikrylov at disroot.org> wrote:
>> 
>> On Fri, 26 Apr 2024 12:32:59 +0200
>> Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>> 
>>> Finally, I'd think it definitely would be nice for
>>> install.packages("Matrix") to automatically get the correct
>>> Matrix version from CRAN ... so we (R-core) would be grateful
>>> for a patch to install.packages() to achieve this
>> 
>> Since the binaries offered on CRAN are already of the correct version
>> (1.7-0 for -release and -devel), only source package installation needs
>> to concern itself with the Recommended subdirectory.
>> 
>> Would it be possible to generate the PACKAGES* index files in the
>> 4.4.0/Recommended subdirectory? Then on the R side it would be needed
>> to add a new repo (adjusting chooseCRANmirror() to set it together with
>> repos["CRAN"]) and keep the rest of the machinery intact.
> 
> That's not how this worked in the past AFAIR. Simply, the packages in
> the x.y.z/Recommended directories were included in
> src/contrib/PACKAGES*, metadata, with the correct R version
> dependencies, in the correct order, so that `install.packages()`
> automatically installed the correct version without having to add
> extra repositories or manually search for package files.
> E.g. right now we have
> 
> Package: Matrix
> Version: 1.7-0
> Priority: recommended
> Depends: R (>= 4.5), methods
> Path: 4.5.0/Recommended
> 
> for R 4.5.0. IMHO what we would need for R 4.4.0 is adding
> something like
> 
> Package: Matrix
> Version: 1.7-0
> Priority: recommended
> Depends: R (>= 4.4), methods
> Path: 4.4.0/Recommended
> 
> *after* that.
> 
> G.
> 
> [...]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From j@g@nmn2 @end|ng |rom gm@||@com  Sat Apr 27 16:53:12 2024
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Sat, 27 Apr 2024 10:53:12 -0400
Subject: [Rd] Should c(..., recursive = TRUE) and unlist(x,
 recursive = TRUE) recurse into expression vectors?
Message-ID: <6a671541-efa6-42a9-95ae-48c1f6342b44@gmail.com>

Reading the body of function 'AnswerType' in bind.c, called from 'do_c'
and 'do_unlist', I notice that EXPRSXP and VECSXP are handled identically
in the  recurse = TRUE  case.

A corollary is that  c(recursive = TRUE)  and  unlist(recursive = TRUE)
treat expression vectors like  expression(a, b)  as lists of symbols and
calls.  And since they treat symbols and calls as lists of length 1, we
see:

 > x <- expression(a, b); y <- expression(c, d)
 > c(x, y)
expression(a, b, c, d)
 > c(x, y, recursive = TRUE)
[[1]]
a

[[2]]
b

[[3]]
c

[[4]]
d

My expectation based on the documentation in help("c") and help("unlist")
is that those functions would recurse into lists and pairlists, but _not_
into expression vectors.

     recursive: logical.  If 'recursive = TRUE', the function recursively
               descends through lists (and pairlists) combining all their
               elements into a vector.

     recursive: logical.  Should unlisting be applied to list components of
               'x'?

My feeling is that either:

(1) the behaviour should change, so that both calls to 'c' above give
     the result of type "expression".
(2) the documentation should change to say that expression vectors are
     handled as lists in the recursive case.

Option (2) won't break anything but is a bit awkward because it means
that a type "higher" in the documented hierarchy (... < list < expression)
is coerced to a lower type.

I'll add here that, confusingly, help("expression") says: "an object of
mode 'expression' is a list".  I understand the author's intent (lists and
expression vectors differ only in the 'type' field of the SEXP header) but
I wonder if substituting "list" with "generic vector" there would cause
less confusion ... ?

Mikael


From j@g@nmn2 @end|ng |rom gm@||@com  Sat Apr 27 17:20:51 2024
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Sat, 27 Apr 2024 11:20:51 -0400
Subject: [Rd] Should c(..., recursive = TRUE) and unlist(x,
 recursive = TRUE) recurse into expression vectors?
In-Reply-To: <6a671541-efa6-42a9-95ae-48c1f6342b44@gmail.com>
References: <6a671541-efa6-42a9-95ae-48c1f6342b44@gmail.com>
Message-ID: <f8f03b71-3bf5-4b82-907b-c23c17d2d384@gmail.com>



On 2024-04-27 10:53 am, Mikael Jagan wrote:
> Reading the body of function 'AnswerType' in bind.c, called from 'do_c'
> and 'do_unlist', I notice that EXPRSXP and VECSXP are handled identically
> in the  recurse = TRUE  case.
> 
> A corollary is that  c(recursive = TRUE)  and  unlist(recursive = TRUE)
> treat expression vectors like  expression(a, b)  as lists of symbols and
> calls.  And since they treat symbols and calls as lists of length 1, we
> see:
> 
>   > x <- expression(a, b); y <- expression(c, d)
>   > c(x, y)
> expression(a, b, c, d)
>   > c(x, y, recursive = TRUE)
> [[1]]
> a
> 
> [[2]]
> b
> 
> [[3]]
> c
> 
> [[4]]
> d
> 
> My expectation based on the documentation in help("c") and help("unlist")
> is that those functions would recurse into lists and pairlists, but _not_
> into expression vectors.
> 
>       recursive: logical.  If 'recursive = TRUE', the function recursively
>                 descends through lists (and pairlists) combining all their
>                 elements into a vector.
> 
>       recursive: logical.  Should unlisting be applied to list components of
>                 'x'?
> 
> My feeling is that either:
> 
> (1) the behaviour should change, so that both calls to 'c' above give
>       the result of type "expression".
> (2) the documentation should change to say that expression vectors are
>       handled as lists in the recursive case.
> 
> Option (2) won't break anything but is a bit awkward because it means
> that a type "higher" in the documented hierarchy (... < list < expression)
> is coerced to a lower type.
> 

Er - this last comment about Option (2) being awkward can be ignored.  The
expression vector is not itself coerced to a list.  Rather, its non-vector
components are treated as lists of length 1.  And that's well-documented.

If anything, Option (1) is awkward as it would treat two types of generic
vectors, list and expression, asymmetrically ...

I can submit a patch implementing Option (2) in a few days to allow for
comments if any.

Mikael

> I'll add here that, confusingly, help("expression") says: "an object of
> mode 'expression' is a list".  I understand the author's intent (lists and
> expression vectors differ only in the 'type' field of the SEXP header) but
> I wonder if substituting "list" with "generic vector" there would cause
> less confusion ... ?
> 
> Mikael


From kev|n@r@coombe@ @end|ng |rom gm@||@com  Sat Apr 27 17:28:33 2024
From: kev|n@r@coombe@ @end|ng |rom gm@||@com (Kevin Coombes)
Date: Sat, 27 Apr 2024 11:28:33 -0400
Subject: [Rd] read.csv
In-Reply-To: <CALOkxuy1Y-0B0Vg2OW23WJG3=r=1FyT94Na1G7R+Di6GeACFdw@mail.gmail.com>
References: <C1CC6BFB-4735-4156-82CA-3B17091EF0B0@cbs.dk>
 <CWLP123MB6299EC5F22E59B289CA755CCA5082@CWLP123MB6299.GBRP123.PROD.OUTLOOK.COM>
 <CALOkxuy1Y-0B0Vg2OW23WJG3=r=1FyT94Na1G7R+Di6GeACFdw@mail.gmail.com>
Message-ID: <CAHJ+2VJUQA03D_MR-u-rPmqdZqyQXJCwVxovqsa5Vf=GR=Uy6w@mail.gmail.com>

I was horrified when I saw John Weinstein's article about Excel turning
gene names into dates. Mainly because I had been complaining about that
phenomenon for years, and it never remotely occurred to me that you could
get a publication out of it.

I eventually rectified the situation by publishing "Blasted Cell Line
Names", describing how to match different researchers' recording of the
names of cell lines, by applying techniques for DNA or protein sequence
alignment.

Best,
   Kevin

On Tue, Apr 16, 2024, 4:51?PM Reed A. Cartwright <racartwright at gmail.com>
wrote:

> Gene names being misinterpreted by spreadsheet software (read.csv is
> no different) is a classic issue in bioinformatics. It seems like
> every practitioner ends up encountering this issue in due time. E.g.
>
> https://pubmed.ncbi.nlm.nih.gov/15214961/
>
> https://genomebiology.biomedcentral.com/articles/10.1186/s13059-016-1044-7
>
> https://www.nature.com/articles/d41586-021-02211-4
>
>
> https://www.theverge.com/2020/8/6/21355674/human-genes-rename-microsoft-excel-misreading-dates
>
>
> On Tue, Apr 16, 2024 at 3:46?AM jing hua zhao <jinghuazhao at hotmail.com>
> wrote:
> >
> > Dear R-developers,
> >
> > I came to a somewhat unexpected behaviour of read.csv() which is trivial
> but worthwhile to note -- my data involves a protein named "1433E" but to
> save space I drop the quote so it becomes,
> >
> > Gene,SNP,prot,log10p
> > YWHAE,13:62129097_C_T,1433E,7.35
> > YWHAE,4:72617557_T_TA,1433E,7.73
> >
> > Both read.cv() and readr::read_csv() consider prot(ein) name as
> (possibly confused by scientific notation) numeric 1433 which only alerts
> me when I tried to combine data,
> >
> > all_data <- data.frame()
> > for (protein in proteins[1:7])
> > {
> >    cat(protein,":\n")
> >    f <- paste0(protein,".csv")
> >    if(file.exists(f))
> >    {
> >      p <- read.csv(f)
> >      print(p)
> >      if(nrow(p)>0) all_data  <- bind_rows(all_data,p)
> >    }
> > }
> >
> > proteins[1:7]
> > [1] "1433B" "1433E" "1433F" "1433G" "1433S" "1433T" "1433Z"
> >
> > dplyr::bind_rows() failed to work due to incompatible types nevertheless
> rbind() went ahead without warnings.
> >
> > Best wishes,
> >
> >
> > Jing Hua
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> >
> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!IKRxdwAv5BmarQ!YJzURlAK1O3rlvXvq9xl99aUaYL5iKm9gnN5RBi-WJtWa5IEtodN3vaN9pCvRTZA23dZyfrVD7X8nlYUk7S1AK893A$
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From jke@ne @end|ng |rom gm@||@com  Sat Apr 27 20:56:58 2024
From: jke@ne @end|ng |rom gm@||@com (Jonathan Keane)
Date: Sat, 27 Apr 2024 13:56:58 -0500
Subject: [Rd] max on numeric_version with long components
Message-ID: <CAE+qdJYcDhh-30JJbLX1CrBiiDjBiyaoQuAToREs_K0KLrYfRA@mail.gmail.com>

I've noticed something in R devel which seems a little off and not the
behavior I see in 4.4.0 or earlier versions. With numeric_versions that
have long (>8 digit) final components max and min return the first element
and not the max or min:

In devel:
> max(numeric_version(c("1.0.1.100000000", "1.0.3.100000000",
"1.0.2.100000000")))
[1] ?1.0.1.100000000?
> max(numeric_version(c("1.0.1.10000000", "1.0.3.10000000",
"1.0.2.10000000")))
[1] ?1.0.3.10000000?

In 4.4.0:
> max(numeric_version(c("1.0.1.100000000", "1.0.3.100000000",
"1.0.2.100000000")))
[1] ?1.0.3.100000000?
> max(numeric_version(c("1.0.1.10000000", "1.0.3.10000000",
"1.0.2.10000000")))
[1] ?1.0.3.10000000?

Is this expected? I've looked in NEWS to see but didn't see anything
referencing this. Happy to submit an issue to bug tracker.

-Jon

	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Sat Apr 27 21:44:43 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Sat, 27 Apr 2024 22:44:43 +0300
Subject: [Rd] max on numeric_version with long components
In-Reply-To: <CAE+qdJYcDhh-30JJbLX1CrBiiDjBiyaoQuAToREs_K0KLrYfRA@mail.gmail.com>
References: <CAE+qdJYcDhh-30JJbLX1CrBiiDjBiyaoQuAToREs_K0KLrYfRA@mail.gmail.com>
Message-ID: <20240427224443.02c60bcb@trisector>

? Sat, 27 Apr 2024 13:56:58 -0500
Jonathan Keane <jkeane at gmail.com> ?????:

> In devel:
> > max(numeric_version(c("1.0.1.100000000", "1.0.3.100000000",  
> "1.0.2.100000000")))
> [1] ?1.0.1.100000000?
> > max(numeric_version(c("1.0.1.10000000", "1.0.3.10000000",  
> "1.0.2.10000000")))
> [1] ?1.0.3.10000000?

Thank you Jon for spotting this!

This is an unintended consequence of
https://bugs.r-project.org/show_bug.cgi?id=18697.

The old behaviour of max(<numeric_version>) was to call
which.max(xtfrm(x)), which first produced a permutation that sorted the
entire .encode_numeric_version(x). The new behavioiur is to call
which.max directly on .encode_numeric_version(x), which is faster (only
O(length(x)) instead of a sort).

What do the encoded version strings look like?

x <- numeric_version(c(
 "1.0.1.100000000", "1.0.3.100000000", "1.0.2.100000000"
))
# Ignore the attributes
(e <- as.vector(.encode_numeric_version(x)))
# [1] "000000001000000000000000001575360400"
# [2] "000000001000000000000000003575360400"
# [3] "000000001000000000000000002575360400"

# order(), xtfrm(), sort() all agree that e[2] is the maximum:
order(e)
# [1] 1 3 2
xtfrm(e)
# [1] 1 3 2
sort(e)
# [1] "000000001000000000000000001575360400"
# [2] "000000001000000000000000002575360400"
# [3] "000000001000000000000000003575360400"

# but not which.max:
which.max(e)
# [1] 1

This happens because which.max() converts its argument to double, which
loses precision:

(n <- as.numeric(e))
# [1] 1e+27 1e+27 1e+27
identical(n[1], n[2])
# [1] TRUE
identical(n[3], n[2])
# [1] TRUE

Will be curious to know if there is a clever way to keep both the O(N)
complexity and the full arbitrary precision.

-- 
Best regards,
Ivan


