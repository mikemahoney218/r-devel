From d@rocz|g @end|ng |rom r@pporter@net  Wed May  1 00:25:02 2019
From: d@rocz|g @end|ng |rom r@pporter@net (=?UTF-8?Q?Gergely_Dar=C3=B3czi?=)
Date: Wed, 1 May 2019 00:25:02 +0200
Subject: [Rd] mccollect with NULL in R 3.6
Message-ID: <CAPvvxJUCYQ_404NN=Oor0cGQveN+CzP_oS2sOsvZtgtua=SZZw@mail.gmail.com>

Dear All,

I'm running into issues with calling mccollect on a list containing NULL
using R 3.6 (this used to work in 3.5.3):

jobs <- lapply(
    list(NULL, 'foobar'),
    function(x) mcparallel(identity(x)))
mccollect(jobs, wait = FALSE, timeout = 0)
#> Error in names(res) <- pnames[match(s, pids)] :
#>   'names' attribute [2] must be the same length as the vector [1]

Note, setting a "name" for the jobs does not help, but the above works with
"wait=TRUE", and also if I change the order of NULL and "foobar", although
in that case, the second value (NULL) is ommitted.  It also works with
mclapply fine.

Any ideas/suggestion on how to get mccollect work with the above example?

Thanks,
Gergely

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed May  1 01:03:16 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 1 May 2019 00:03:16 +0100
Subject: [Rd] [External] Re:  Background R session on Unix and SIGINT
In-Reply-To: <alpine.DEB.2.21.1904301641090.2842@luke-Latitude-7480>
References: <CABtg=Km=Bj_gDr3jsYSvQf479eJhPunRYyU8UQEfaV-YtKvqqQ@mail.gmail.com>
 <3A2C4184-FD39-410A-8392-28C473AAC8D0@R-project.org>
 <CABtg=KkfXU4+7F=Yr2=v=ssg=-naEkYDGM_A6j7UGNWSkjVoTw@mail.gmail.com>
 <EDAD9282-9026-4B88-A1A3-B2A63A6ADC3E@R-project.org>
 <CABtg=Knor462S640xB8bAZbMG+TAq7hur14gaBTt4aUiP5mXoQ@mail.gmail.com>
 <alpine.DEB.2.21.1904301641090.2842@luke-Latitude-7480>
Message-ID: <CABtg=K=N2ewB5KaEUXwmtqQuDEfVAVS=3HXBNokaVoyrOKVVPw@mail.gmail.com>

Unfortunately --interactive also makes the session interactive(),
which is bad for me, as it is a background session.

In general, I don't want the interactive behavior, but was wondering
if I could send as SIGINT to try to interrupt the computation of the
background process, and if that does not work, then I would send a
SIGKILL and start up another process. It all works nicely, except for
this glitch, but I think I can work around it.

Thanks,
Gabor

On Tue, Apr 30, 2019 at 10:55 PM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
>
> A Simon pointed out the interrupt is recorded but not processed until
> a safe point.
>
> When reading from a fifo or pipe R runs non-interactive, which means
> is sits in a read() system call and the interrupt isn't seen until
> sometime during evaluation when a safe checkpoint is reached.
>
> When reading from a terminal R will use select() to wait for input and
> periodically wake and check for interrupts. In that case the interrupt
> will probably be seen sooner.
>
> If the interactive behavior is what you want you can add --interactive
> to the arguments used to start R.
>
> Best,
>
> luke
>
> On Tue, 30 Apr 2019, G?bor Cs?rdi wrote:
>
> > OK, I managed to create an example without callr, but it is still
> > somewhat cumbersome. Anyway, here it is.
> >
> > Terminal 1:
> > mkfifo fif
> > R --no-readline --slave --no-save --no-restore < fif
> >
> > Terminal 2:
> > cat > fif
> > Sys.getpid()
> >
> > This will make Terminal 1 print the pid of the R process, so we can
> > send a SIGINT:
> >
> > Terminal 3:
> > kill -INT pid
> >
> > The R process is of course still running happily.
> >
> > Terminal 2 again:
> > tryCatch(Sys.sleep(10), interrupt = function(e) e)
> >
> > and then Terminal 1 prints the interrupt condition:
> > <interrupt: >
> >
> > This is macOS and 3.5.3, although I don't think it matters much.
> >
> > Thanks much!
> > G.
> >
> > On Tue, Apr 30, 2019 at 9:50 PM Simon Urbanek
> > <simon.urbanek at r-project.org> wrote:
> >>
> >> Can you give an example without callr? The key is how is the process stated and what it is doing which is entirely opaque in callr.
> >>
> >> Windows doesn't have signals, so the process there is entirely different. Most of the WIN32 processing is event-based.
> >>
> >> Cheers,
> >> Simon
> >>
> >>
> >>> On Apr 30, 2019, at 4:17 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >>>
> >>> Yeah, I get that they are async.
> >>>
> >>> What happens is that the background process is not doing anything when
> >>> the process gets a SIGINT. I.e. the background process is just
> >>> listening on its standard input.
> >>>
> >>> AFAICT for an interactive process such a SIGINT is just swallowed,
> >>> with a newline outputted to the terminal.
> >>>
> >>> But apparently, for this background process, it is not swallowed, and
> >>> it is triggered later. FWIW it does not happen on Windows, not very
> >>> surprisingly.
> >>>
> >>> Gabor
> >>>
> >>> On Tue, Apr 30, 2019 at 9:13 PM Simon Urbanek
> >>> <simon.urbanek at r-project.org> wrote:
> >>>>
> >>>> Interrupts are not synchronous in R - the signal only flags the request for interruption. Nothing actually happens until R_CheckUserInterrupt() is called at an interruptible point. In you case your code is apparently not calling R_CheckUserInterrupt() until later as a side-effect of the next evaluation.
> >>>>
> >>>> Cheers,
> >>>> Simon
> >>>>
> >>>>
> >>>>> On Apr 30, 2019, at 3:44 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >>>>>
> >>>>> Hi All,
> >>>>>
> >>>>> I realize that this is not a really nice reprex, but anyone has an
> >>>>> idea why a background R session would "remember" an interrupt (SIGINT)
> >>>>> on Unix?
> >>>>>
> >>>>> rs <- callr::r_session$new()
> >>>>> rs$interrupt()     # just sends a SIGINT
> >>>>> #> [1] TRUE
> >>>>>
> >>>>> rs$run(function() 1+1)
> >>>>> #> Error: interrupt
> >>>>>
> >>>>> rs$run(function() 1+1)
> >>>>> #> [1] 2
> >>>>>
> >>>>> It seems that the main loop somehow stores the SIGINT it receives
> >>>>> while it is waiting on stdin, and then it triggers it when some input
> >>>>> comes in.... Maybe. Just speculating....
> >>>>>
> >>>>> Thanks,
> >>>>> Gabor
> >>>>>
> >>>>> ______________________________________________
> >>>>> R-devel at r-project.org mailing list
> >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>>
> >>>>
> >>>
> >>
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From h@rvey13131 @end|ng |rom gm@||@com  Wed May  1 09:20:55 2019
From: h@rvey13131 @end|ng |rom gm@||@com (Harvey Smith)
Date: Wed, 1 May 2019 03:20:55 -0400
Subject: [Rd] anyNA() performance on vectors of POSIXct
Message-ID: <CACVELJ3k3zpUOQ22k539ynFpqrePbuNa+EAxiKcK9WxkQHMo0g@mail.gmail.com>

Inside of the anyNA() function, it will use the legacy any(is.na()) code if
x is an OBJECT().  If x is a vector of POSIXct, it will be an OBJECT(), but
it is also TYPEOF(x) == REALSXP.  Therefore, it will skip the faster
ITERATE_BY_REGION, which is typically 5x faster in my testing.

Is the OBJECT() condition really necessary, or could it be moved after the
switch() for the individual TYPEOF(x) ITERATE_BY_REGION calls?

# script to demonstrate performance difference if x is an OBJECT or not by
using unclass()
x.posixct = Sys.time() + 1:1e6
microbenchmark::microbenchmark(
  any(is.na( x.posixct )),
  anyNA( x.posixct ),
  anyNA( unclass(x.posixct) ),
  unit='ms')



static Rboolean anyNA(SEXP call, SEXP op, SEXP args, SEXP env)
{
  SEXP x = CAR(args);
  SEXPTYPE xT = TYPEOF(x);
  Rboolean isList =  (xT == VECSXP || xT == LISTSXP), recursive = FALSE;

  if (isList && length(args) > 1) recursive = asLogical(CADR(args));
  *if (OBJECT(x) || (isList && !recursive)) {*
    SEXP e0 = PROTECT(lang2(install("is.na"), x));
    SEXP e = PROTECT(lang2(install("any"), e0));
    SEXP res = PROTECT(eval(e, env));
    int ans = asLogical(res);
    UNPROTECT(3);
    return ans == 1; // so NA answer is false.
  }

  R_xlen_t i, n = xlength(x);
  switch (xT) {
    case REALSXP:
    {
      if(REAL_NO_NA(x))
        return FALSE;
      ITERATE_BY_REGION(x, xD, i, nbatch, double, REAL, {
        for (int k = 0; k < nbatch; k++)
          if (ISNAN(xD[k]))
            return TRUE;
      });
      break;
    }

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Wed May  1 16:02:41 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 1 May 2019 10:02:41 -0400
Subject: [Rd] [External] Re:  Background R session on Unix and SIGINT
In-Reply-To: <CABtg=K=N2ewB5KaEUXwmtqQuDEfVAVS=3HXBNokaVoyrOKVVPw@mail.gmail.com>
References: <CABtg=Km=Bj_gDr3jsYSvQf479eJhPunRYyU8UQEfaV-YtKvqqQ@mail.gmail.com>
 <3A2C4184-FD39-410A-8392-28C473AAC8D0@R-project.org>
 <CABtg=KkfXU4+7F=Yr2=v=ssg=-naEkYDGM_A6j7UGNWSkjVoTw@mail.gmail.com>
 <EDAD9282-9026-4B88-A1A3-B2A63A6ADC3E@R-project.org>
 <CABtg=Knor462S640xB8bAZbMG+TAq7hur14gaBTt4aUiP5mXoQ@mail.gmail.com>
 <alpine.DEB.2.21.1904301641090.2842@luke-Latitude-7480>
 <CABtg=K=N2ewB5KaEUXwmtqQuDEfVAVS=3HXBNokaVoyrOKVVPw@mail.gmail.com>
Message-ID: <36C1770B-5054-4F1F-B508-225A7B8EE3E2@R-project.org>

Gabor,

I think you're talking about two independent things. You can interrupt the computation, no question about that. It's just that if you send an interrupt while you're *not* doing any computations, it will be signaled but not raised until the interrupts are checked since there is no one to check it. This goes back to my original response - the interactive REPL calls R_CheckUserInterrupt(), but the straight stdin-prcessing doesn't (since it's expected to be a script, not interactive prompt). If you just want to clear interrupts before next processing you can either just run R_CheckUserInterrupt() explicitly, or on R side do anything that does that, e.g. to take your example "tryCatch(Sys.sleep(0), interrupt = function(e) e)" will clear it.

Cheers,
Simon


> On Apr 30, 2019, at 7:03 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> Unfortunately --interactive also makes the session interactive(),
> which is bad for me, as it is a background session.
> 
> In general, I don't want the interactive behavior, but was wondering
> if I could send as SIGINT to try to interrupt the computation of the
> background process, and if that does not work, then I would send a
> SIGKILL and start up another process. It all works nicely, except for
> this glitch, but I think I can work around it.
> 
> Thanks,
> Gabor
> 
> On Tue, Apr 30, 2019 at 10:55 PM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
>> 
>> A Simon pointed out the interrupt is recorded but not processed until
>> a safe point.
>> 
>> When reading from a fifo or pipe R runs non-interactive, which means
>> is sits in a read() system call and the interrupt isn't seen until
>> sometime during evaluation when a safe checkpoint is reached.
>> 
>> When reading from a terminal R will use select() to wait for input and
>> periodically wake and check for interrupts. In that case the interrupt
>> will probably be seen sooner.
>> 
>> If the interactive behavior is what you want you can add --interactive
>> to the arguments used to start R.
>> 
>> Best,
>> 
>> luke
>> 
>> On Tue, 30 Apr 2019, G?bor Cs?rdi wrote:
>> 
>>> OK, I managed to create an example without callr, but it is still
>>> somewhat cumbersome. Anyway, here it is.
>>> 
>>> Terminal 1:
>>> mkfifo fif
>>> R --no-readline --slave --no-save --no-restore < fif
>>> 
>>> Terminal 2:
>>> cat > fif
>>> Sys.getpid()
>>> 
>>> This will make Terminal 1 print the pid of the R process, so we can
>>> send a SIGINT:
>>> 
>>> Terminal 3:
>>> kill -INT pid
>>> 
>>> The R process is of course still running happily.
>>> 
>>> Terminal 2 again:
>>> tryCatch(Sys.sleep(10), interrupt = function(e) e)
>>> 
>>> and then Terminal 1 prints the interrupt condition:
>>> <interrupt: >
>>> 
>>> This is macOS and 3.5.3, although I don't think it matters much.
>>> 
>>> Thanks much!
>>> G.
>>> 
>>> On Tue, Apr 30, 2019 at 9:50 PM Simon Urbanek
>>> <simon.urbanek at r-project.org> wrote:
>>>> 
>>>> Can you give an example without callr? The key is how is the process stated and what it is doing which is entirely opaque in callr.
>>>> 
>>>> Windows doesn't have signals, so the process there is entirely different. Most of the WIN32 processing is event-based.
>>>> 
>>>> Cheers,
>>>> Simon
>>>> 
>>>> 
>>>>> On Apr 30, 2019, at 4:17 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>> 
>>>>> Yeah, I get that they are async.
>>>>> 
>>>>> What happens is that the background process is not doing anything when
>>>>> the process gets a SIGINT. I.e. the background process is just
>>>>> listening on its standard input.
>>>>> 
>>>>> AFAICT for an interactive process such a SIGINT is just swallowed,
>>>>> with a newline outputted to the terminal.
>>>>> 
>>>>> But apparently, for this background process, it is not swallowed, and
>>>>> it is triggered later. FWIW it does not happen on Windows, not very
>>>>> surprisingly.
>>>>> 
>>>>> Gabor
>>>>> 
>>>>> On Tue, Apr 30, 2019 at 9:13 PM Simon Urbanek
>>>>> <simon.urbanek at r-project.org> wrote:
>>>>>> 
>>>>>> Interrupts are not synchronous in R - the signal only flags the request for interruption. Nothing actually happens until R_CheckUserInterrupt() is called at an interruptible point. In you case your code is apparently not calling R_CheckUserInterrupt() until later as a side-effect of the next evaluation.
>>>>>> 
>>>>>> Cheers,
>>>>>> Simon
>>>>>> 
>>>>>> 
>>>>>>> On Apr 30, 2019, at 3:44 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>>>> 
>>>>>>> Hi All,
>>>>>>> 
>>>>>>> I realize that this is not a really nice reprex, but anyone has an
>>>>>>> idea why a background R session would "remember" an interrupt (SIGINT)
>>>>>>> on Unix?
>>>>>>> 
>>>>>>> rs <- callr::r_session$new()
>>>>>>> rs$interrupt()     # just sends a SIGINT
>>>>>>> #> [1] TRUE
>>>>>>> 
>>>>>>> rs$run(function() 1+1)
>>>>>>> #> Error: interrupt
>>>>>>> 
>>>>>>> rs$run(function() 1+1)
>>>>>>> #> [1] 2
>>>>>>> 
>>>>>>> It seems that the main loop somehow stores the SIGINT it receives
>>>>>>> while it is waiting on stdin, and then it triggers it when some input
>>>>>>> comes in.... Maybe. Just speculating....
>>>>>>> 
>>>>>>> Thanks,
>>>>>>> Gabor
>>>>>>> 
>>>>>>> ______________________________________________
>>>>>>> R-devel at r-project.org mailing list
>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>> 
>>>>>> 
>>>>> 
>>>> 
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>    Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> 


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed May  1 17:25:48 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 1 May 2019 16:25:48 +0100
Subject: [Rd] [External] Re:  Background R session on Unix and SIGINT
In-Reply-To: <36C1770B-5054-4F1F-B508-225A7B8EE3E2@R-project.org>
References: <CABtg=Km=Bj_gDr3jsYSvQf479eJhPunRYyU8UQEfaV-YtKvqqQ@mail.gmail.com>
 <3A2C4184-FD39-410A-8392-28C473AAC8D0@R-project.org>
 <CABtg=KkfXU4+7F=Yr2=v=ssg=-naEkYDGM_A6j7UGNWSkjVoTw@mail.gmail.com>
 <EDAD9282-9026-4B88-A1A3-B2A63A6ADC3E@R-project.org>
 <CABtg=Knor462S640xB8bAZbMG+TAq7hur14gaBTt4aUiP5mXoQ@mail.gmail.com>
 <alpine.DEB.2.21.1904301641090.2842@luke-Latitude-7480>
 <CABtg=K=N2ewB5KaEUXwmtqQuDEfVAVS=3HXBNokaVoyrOKVVPw@mail.gmail.com>
 <36C1770B-5054-4F1F-B508-225A7B8EE3E2@R-project.org>
Message-ID: <CABtg=KmFCR+PfwL38V3746VFtp-K2wqyzWGQ3udva=O=h+L1jw@mail.gmail.com>

On Wed, May 1, 2019 at 4:20 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
> I think you're talking about two independent things. You can interrupt the computation, no question about that. It's just that if you send an interrupt while you're *not* doing any computations, it will be signaled but not raised until the interrupts are checked since there is no one to check it.

Right. That's what I suspected originally, so thank you both for
confirming it. The difficulty is, when I interrupt the computation
that's a race condition, because in the master process I have no idea
knowing whether the computation will be finished just before the
SIGINT arrives.

> This goes back to my original response - the interactive REPL calls R_CheckUserInterrupt(), but the straight stdin-prcessing doesn't (since it's expected to be a script, not interactive prompt). If you just want to clear interrupts before next processing you can either just run R_CheckUserInterrupt() explicitly, or on R side do anything that does that, e.g. to take your example "tryCatch(Sys.sleep(0), interrupt = function(e) e)" will clear it.

Yes, that's exactly what I am doing. Thanks again!

Gabor

[...]


From jeroenoom@ @end|ng |rom gm@||@com  Thu May  2 01:18:02 2019
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Thu, 2 May 2019 01:18:02 +0200
Subject: [Rd] Inno Setup 6.0.2 fails before creating exe file on Windows
 (R-3.6.0)
In-Reply-To: <CAL6gwnJxT2qGRsoiTJHXgYA3PrKTc_Gev351XCxe5iW=OdR87w@mail.gmail.com>
References: <CAL6gwnJxT2qGRsoiTJHXgYA3PrKTc_Gev351XCxe5iW=OdR87w@mail.gmail.com>
Message-ID: <CABFfbXv_egOkLr8B50yQwj=L3c4PnaCZ90rzjj_nu8esWHC_og@mail.gmail.com>

Multiple people have now reported that the R installer does not build
with InnoSetup 6 (released last week). The inno log shows this error:

  Error on line 12 in src\gnuwin32\installer\R.iss: Minimum NT version
specified by MinVersion must be at least 6.0. (Windows 2000/XP/Server
2003 are no longer supported.)
  Compile aborted.

Hence to fix this, the "MinVersion" parameter in
src/gnuwin32/installer/header1.iss should be increased from 0,5.0 to
0,6.0. I confirmed this resolves the problem. Could somebody commit
this please?

See also: http://www.jrsoftware.org/is6help/index.php?topic=setup_minversion



On Sun, Apr 28, 2019 at 11:07 AM Avraham Adler <avraham.adler at gmail.com> wrote:
>
> I am working on compiling R-3.6.0 for Windows 10 64bit using rtools40
> (beta 11). I had also installed the most recent update of Inno setup,
> which is now 6.0.2.With that version, `make risntaller` fails at the
> call to ""C:/R/Inno/iscc" R.iss > R-3.6.0.log 2>&1" and just exits,
> pointing to line 175 of the makefile which is:
>
> $(RPREFIX)-win.exe: R.iss
>     "$(ISDIR)/iscc" R.iss > $(RPREFIX).log 2>&1
>
> Reinstalling Inno Setup 5.6.1 does allow the exe file to be created.
>
> Thank you,
>
> Avi
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu May  2 09:32:28 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 2 May 2019 09:32:28 +0200
Subject: [Rd] Inno Setup 6.0.2 fails before creating exe file on Windows
 (R-3.6.0)
In-Reply-To: <CABFfbXv_egOkLr8B50yQwj=L3c4PnaCZ90rzjj_nu8esWHC_og@mail.gmail.com>
References: <CAL6gwnJxT2qGRsoiTJHXgYA3PrKTc_Gev351XCxe5iW=OdR87w@mail.gmail.com>
 <CABFfbXv_egOkLr8B50yQwj=L3c4PnaCZ90rzjj_nu8esWHC_og@mail.gmail.com>
Message-ID: <23754.40204.681835.394152@stat.math.ethz.ch>

>>>>> Jeroen Ooms 
>>>>>     on Thu, 2 May 2019 01:18:02 +0200 writes:

    > Multiple people have now reported that the R installer does not build
    > with InnoSetup 6 (released last week). The inno log shows this error:

    > Error on line 12 in src\gnuwin32\installer\R.iss: Minimum NT version
    > specified by MinVersion must be at least 6.0. (Windows 2000/XP/Server
    > 2003 are no longer supported.)
    > Compile aborted.

    > Hence to fix this, the "MinVersion" parameter in
    > src/gnuwin32/installer/header1.iss should be increased from 0,5.0 to
    > 0,6.0. I confirmed this resolves the problem. Could somebody commit
    > this please?

    > See also: http://www.jrsoftware.org/is6help/index.php?topic=setup_minversion

Thank you, Avi and Jeroen!

I've now committed the change (in 4 places) to R-devel and
ported it to 'R 3.6.0 patched' svn rev 76450 & *51.

Best,
Martin


    > On Sun, Apr 28, 2019 at 11:07 AM Avraham Adler <avraham.adler at gmail.com> wrote:
    >> 
    >> I am working on compiling R-3.6.0 for Windows 10 64bit using rtools40
    >> (beta 11). I had also installed the most recent update of Inno setup,
    >> which is now 6.0.2.With that version, `make risntaller` fails at the
    >> call to ""C:/R/Inno/iscc" R.iss > R-3.6.0.log 2>&1" and just exits,
    >> pointing to line 175 of the makefile which is:
    >> 
    >> $(RPREFIX)-win.exe: R.iss
    >> "$(ISDIR)/iscc" R.iss > $(RPREFIX).log 2>&1
    >> 
    >> Reinstalling Inno Setup 5.6.1 does allow the exe file to be created.
    >> 
    >> Thank you,
    >> 
    >> Avi
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Thu May  2 16:48:51 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Thu, 2 May 2019 16:48:51 +0200
Subject: [Rd] 
 [FORGED] src/modules/X11/devX11.c, can we remove "#if BUG" yet
In-Reply-To: <69efc4f1-4fe0-b93f-eff7-9a22ceaf3c9d@stat.auckland.ac.nz>
References: <20190420052728.7tgjr4zxqdddsimm@localhost>
 <3badc471-0698-42e1-581a-2988eb3bf818@stat.auckland.ac.nz>
 <4FEA2AD4-C0A6-4CEE-AB30-CD8AE209ED24@gmail.com>
 <3C40D480-61B5-40D1-A592-1890B090C124@gmail.com>
 <20190425232356.a6vn2unt3ju6a3f7@localhost>
 <07AB76A5-EA6A-45AC-BFB5-170CD093DE39@gmail.com>
 <69efc4f1-4fe0-b93f-eff7-9a22ceaf3c9d@stat.auckland.ac.nz>
Message-ID: <8A6A2E69-EF83-4861-8B46-5981E6AFC8E9@gmail.com>

OK, this is now in R-devel, but only superficially tested (b/c this is a Mac). Please check it out.

-pd

> On 30 Apr 2019, at 23:09 , Paul Murrell <paul at stat.auckland.ac.nz> wrote:
> 
> Hi Peter
> 
> Yes, that looks roughly right to me.  I would be in favour of your option (b), partly because it is probably easiest and partly because that retains the basic graphics device startup logic pattern that is replicated across all(?) graphics devices.
> 
> Paul
> 
> On 28/04/19 11:39 AM, peter dalgaard wrote:
>> I had a look at the current code, and AFAICT it has essentially the same structure as it did back then. I think it may have finally dawned upon me what the issue really is:
>> The logic is that in Rf_addX11Device, we have
>>         if (!X11DeviceDriver(dev, display, width, height,
>>                              ps, gamma, colormodel, maxcubesize,
>>                              bgcolor, canvascolor, sfonts, res,
>>                              xpos, ypos, title, useCairo, antialias, family)) {
>>             free(dev);
>>             errorcall(call, _("unable to start device %s"), devname);
>>         }
>>         dd = GEcreateDevDesc(dev);
>>         GEaddDevice2(dd, devname);
>> i.e., we start the device driver, and if it fails, we throw away the "dev" structure and call it a day. If it succeeds, we proceed to create a device descriptor structure and add it to the list of open devices.
>> This approach means that X11DeviceDriver() cannot do anything that potentially accesses the dd structure because it isn't there yet, and the things it cannot do apparently includes calling R_ProcessX11Events(). [To be completely sure that this is actually still true, I'd need to have a closer look at what handleEvent() does.]
>> So to fix things, it would seem that you could (a) add the device before attempting to start the driver, preparing to back it out if the driver fails to start, or (b) add a call to R_ProcessX11Events() _after_ the GEaddDevice2(dd, devname). Option (b) is probably the easiest.
>> Paul: Does this analysis look roughly right?
>> -pd
>>> On 26 Apr 2019, at 01:23 , frederik at ofb.net wrote:
>>> 
>>> Thanks Professor Dalgard.
>>> 
>>> If you have a different way to fix the bug then I'd be happy to test
>>> it.
>>> 
>>> Or whatever. I understand that maybe some data was being referenced
>>> before it had been initialized. I could also support moving the
>>> R_ProcessEvents call in another place, but it seems one would also
>>> like to generate some kind of warning message, at the location of the
>>> bad reference, rather than segfaulting. Was it not possible to
>>> identify this location? I'm guessing that Valgrind is a bit more
>>> mature now than it was in 2001...?
>>> 
>>> Frederick
>>> 
>>> On Wed, Apr 24, 2019 at 03:12:55PM +0200, peter dalgaard wrote:
>>>> OK, so I did the archaeology anyway....
>>>> 
>>>> 
>>>> This was the story, R-core November 29, 2001. Part of thread "X11 still segfaults".
>>>> 
>>>> ------------>>
>>>> .....
>>>> Gah. I've been too tired today. Why did that take me so long?
>>>> 
>>>> The culprit seems to be
>>>> 
>>>> R_ProcessEvents((void*) NULL)
>>>> 
>>>> in newX11DeviceDriver
>>>> 
>>>> This gets called *before* this stuff at the end of Rf_addX11Device
>>>> 
>>>> 	dd = GEcreateDevDesc(dev);
>>>> 	addDevice((DevDesc*) dd);
>>>> 	initDisplayList((DevDesc*) dd);
>>>> 
>>>> and it is that "dd" that gets called by Rf_playDisplayList. Removing
>>>> the offending line stops the segfaulting, seemingly with no ill
>>>> effects.
>>>> 
>>>> I'm not really sure what the use of that line ever was; it might be
>>>> necessary to make the call somewhere later, but it appears to have
>>>> been possible to race past it before receiving any events all the
>>>> time.
>>>> 
>>>> I also changed a couple of spots missing dd->newDevStruct=1
>>>> 
>>>> Will commit in a moment.
>>>> <<------------
>>>> 
>>>> And the following day, in "graphics saga part III", we had
>>>> 
>>>> ------------->>
>>>> ...
>>>> 
>>>> I can't make it happen in 1.3.1 but...
>>>> 
>>>> It is probably not unrelated to the R_ProcessEvents line that
>>>> I took out, but that was definitely wrong. However, one might reenable
>>>> it if one could change this bit of code
>>>> 
>>>> 	if (!(ptr_X11DeviceDriver)((DevDesc*)(dev), display, width, height, ps, gamma,
>>>> 				      colormodel, maxcubesize, canvascolor)) {
>>>> 	    free(dev);
>>>> 	    errorcall(gcall, "unable to start device %s", devname);
>>>>      	}
>>>> 	gsetVar(install(".Device"), mkString(devname), R_NilValue);
>>>> 	dd = GEcreateDevDesc(dev);
>>>> 	addDevice((DevDesc*) dd);
>>>> 	initDisplayList((DevDesc*) dd);
>>>> 
>>>> 
>>>> and put the if-clause last. A cursory clance through the three
>>>> functions that are being called didn't reveal anything that would rely
>>>> on having opened the device driver first.
>>>> 
>>>> Paul?
>>>> 
>>>> (I might try it locally, but I'm not sure I should commit anything.)
>>>> 
>>>> <<-----------
>>>> 
>>>> It seems that the suggestion was never followed up on?
>>>> 
>>>> -pd
>>>> 
>>>> 
>>>>> On 24 Apr 2019, at 11:42 , peter dalgaard <pdalgd at gmail.com> wrote:
>>>>> 
>>>>> I don't recall exactly what I did 18 years ago eiher and I likely don't have the time to dig into the archives and reconstruct.
>>>>> 
>>>>> I can imagine that the issue had to do with the protocol around creating and mapping windows. Presumably the segfault comes from looking for events on a window that hasn't been created yet, or has already been destroyed, leading to a NULL reference somewhere. I have a vague recollection that the issue was window manager dependent (in 2001 probably not twm, more likely xvwm on RedHat if it was affecting me).
>>>>> 
>>>>> A proper fix should go via proper understanding of the X11 protocol - uncommenting a line is as bad as commenting it in the 1st place.... So more like "wait for window to exist THEN process events" -- but the 1st part may be WM specific, etc.
>>>>> 
>>>>> I recall docs being quite obtuse, and the X11 "mechanism not policy" credo doesn't help as WMs are not obliged to (say) send notifications, so you can end up stalling, waiting for events that never happen.
>>>>> 
>>>>> It is entirely possible that there is stuff in here that I didn't understand properly at the time, and still don't!
>>>>> 
>>>>> - pd
>>>>> 
>>>>>> On 24 Apr 2019, at 02:30 , Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>>>>>> 
>>>>>> Hi
>>>>>> 
>>>>>> Sorry, I can't offer an explanation for the commented-out line.
>>>>>> However, regarding your final question of avoiding the R-core bottleneck, you do have the option of creating a third-party graphics device package.  See, for example, the 'tikzDevice' and 'svglite' packages on CRAN.  Does that provide you with a way forward ?
>>>>>> 
>>>>>> Paul
>>>>>> 
>>>>>> On 20/04/2019 5:27 p.m., frederik at ofb.net wrote:
>>>>>>> Dear R Devel,
>>>>>>> 
>>>>>>> I know that someone put this line in src/modules/X11/devX11.c:2824 for
>>>>>>> a reason, because commenting it out causes R to miss an important
>>>>>>> ConfigureNotify event in my window manager. The result is that plots
>>>>>>> are initially drawn off the window borders, unreadable.
>>>>>>> 
>>>>>>>  R_ProcessX11Events((void*) NULL);
>>>>>>> 
>>>>>>> Unfortunately for me, this line is commented in the standard release
>>>>>>> of R, it has "#if BUG ... #endif" around it.
>>>>>>> 
>>>>>>> I guess it is also unfortunate for anyone who uses the same window
>>>>>>> manager as I do, namely i3, which I think is pretty popular among Unix
>>>>>>> power users these days; not to mention other full-screen window
>>>>>>> managers which probably exhibit the same bug in R.
>>>>>>> 
>>>>>>> Maybe everyone on the Core team uses twm as their window manager? Or
>>>>>>> RStudio on Windows? Which would be sad because then we're not
>>>>>>> representing an important user demographic, namely those who prefer
>>>>>>> software which is modern and powerful, yet simple to understand and
>>>>>>> modify; fully configurable and interoperable and so on.
>>>>>>> 
>>>>>>> I first reported this bug 3 years ago. In doing research for my bug
>>>>>>> report, I found that the line was commented out by Peter Dalgaard in
>>>>>>> 2001 with the explanation "X11 segfault fix - I hope".
>>>>>>> 
>>>>>>> I don't know what the way forward is. Obviously the Core Team has
>>>>>>> reason to say, "look, this isn't very important, it's been broken
>>>>>>> since 2001, maybe fixing it will cause the undocumented segfault bug
>>>>>>> to reappear, clearly no one here uses your window manager". Do I have
>>>>>>> to submit a correctness proof for the proposed change? What do I do?
>>>>>>> 
>>>>>>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702
>>>>>>> 
>>>>>>> As mentioned in my bug report, I checked using gdb that
>>>>>>> ConfigureNotify is indeed being received by the call to
>>>>>>> R_ProcessX11Events() when it is uncommented. I haven't experienced any
>>>>>>> segfaults.
>>>>>>> 
>>>>>>> It's good that Peter left evidence that "R_ProcessX11Events" was being
>>>>>>> called 18 years ago from X11DeviceDriver(). If he had deleted the
>>>>>>> line, rather than commenting it, then discovering the reason for the
>>>>>>> window rendering bug would have been much harder for me.
>>>>>>> 
>>>>>>> However, the downside is that now it is not just a matter of inserting
>>>>>>> the line where it belongs; I also feel a bit like I have to explain
>>>>>>> why it was initially removed. But although I've given it some thought,
>>>>>>> I still have no idea.
>>>>>>> 
>>>>>>> Somewhat tangentially, I am wondering if there is some way that we
>>>>>>> could make the development of R's graphics code proceed at a faster
>>>>>>> rate, for example by pulling it out into a separate module, so that
>>>>>>> people could offer alternative implementations via CRAN etc., rather
>>>>>>> than having R Core be the bottleneck. Would this make sense? Has it
>>>>>>> already been done?
>>>>>>> 
>>>>>>> Thank you,
>>>>>>> 
>>>>>>> Frederick
>>>>>>> 
>>>>>>> ______________________________________________
>>>>>>> R-devel at r-project.org mailing list
>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>> 
>>>>>> --
>>>>>> Dr Paul Murrell
>>>>>> Department of Statistics
>>>>>> The University of Auckland
>>>>>> Private Bag 92019
>>>>>> Auckland
>>>>>> New Zealand
>>>>>> 64 9 3737599 x85392
>>>>>> paul at stat.auckland.ac.nz
>>>>>> http://www.stat.auckland.ac.nz/~paul/
>>>>>> 
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> 
>>>>> --
>>>>> Peter Dalgaard, Professor,
>>>>> Center for Statistics, Copenhagen Business School
>>>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>>>> Phone: (+45)38153501
>>>>> Office: A 4.23
>>>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>> 
>>>> -- 
>>>> Peter Dalgaard, Professor,
>>>> Center for Statistics, Copenhagen Business School
>>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>>> Phone: (+45)38153501
>>>> Office: A 4.23
>>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
> 
> -- 
> Dr Paul Murrell
> Department of Statistics
> The University of Auckland
> Private Bag 92019
> Auckland
> New Zealand
> 64 9 3737599 x85392
> paul at stat.auckland.ac.nz
> http://www.stat.auckland.ac.nz/~paul/

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu May  2 19:24:25 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 2 May 2019 19:24:25 +0200
Subject: [Rd] mccollect with NULL in R 3.6
In-Reply-To: <CAPvvxJUCYQ_404NN=Oor0cGQveN+CzP_oS2sOsvZtgtua=SZZw@mail.gmail.com>
References: <CAPvvxJUCYQ_404NN=Oor0cGQveN+CzP_oS2sOsvZtgtua=SZZw@mail.gmail.com>
Message-ID: <2ce32c00-d99c-227e-8b2e-c06dc1e7a21d@gmail.com>

On 5/1/19 12:25 AM, Gergely Dar?czi wrote:
> Dear All,
>
> I'm running into issues with calling mccollect on a list containing NULL
> using R 3.6 (this used to work in 3.5.3):
>
> jobs <- lapply(
>      list(NULL, 'foobar'),
>      function(x) mcparallel(identity(x)))
> mccollect(jobs, wait = FALSE, timeout = 0)
> #> Error in names(res) <- pnames[match(s, pids)] :
> #>   'names' attribute [2] must be the same length as the vector [1]
>
> Note, setting a "name" for the jobs does not help, but the above works with
> "wait=TRUE", and also if I change the order of NULL and "foobar", although
> in that case, the second value (NULL) is ommitted.  It also works with
> mclapply fine.
>
> Any ideas/suggestion on how to get mccollect work with the above example?.

NULL is not a valid job identification. Perhaps mccollect() could give a 
clearer error message, but I don't see, given its documentation, what 
else than throwing an error it should do. What is the problem you were 
trying to solve?

Best
Tomas

>
> Thanks,
> Gergely
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From irederik m@iii@g oii oib@@et  Thu May  2 23:07:19 2019
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Thu, 2 May 2019 14:07:19 -0700
Subject: [Rd] 
 [FORGED] src/modules/X11/devX11.c, can we remove "#if BUG" yet
In-Reply-To: <8A6A2E69-EF83-4861-8B46-5981E6AFC8E9@gmail.com>
References: <20190420052728.7tgjr4zxqdddsimm@localhost>
 <3badc471-0698-42e1-581a-2988eb3bf818@stat.auckland.ac.nz>
 <4FEA2AD4-C0A6-4CEE-AB30-CD8AE209ED24@gmail.com>
 <3C40D480-61B5-40D1-A592-1890B090C124@gmail.com>
 <20190425232356.a6vn2unt3ju6a3f7@localhost>
 <07AB76A5-EA6A-45AC-BFB5-170CD093DE39@gmail.com>
 <69efc4f1-4fe0-b93f-eff7-9a22ceaf3c9d@stat.auckland.ac.nz>
 <8A6A2E69-EF83-4861-8B46-5981E6AFC8E9@gmail.com>
Message-ID: <20190502210719.nwz56nvkkypxfutx@localhost>

I tested it. It fixes the bug and didn't seem to produce any errors. Thank you Professor Dalgaard! I'm so glad this has finally been addressed. I will update the bug report.

(https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702)

On Thu, May 02, 2019 at 04:48:51PM +0200, peter dalgaard wrote:
>OK, this is now in R-devel, but only superficially tested (b/c this is a Mac). Please check it out.
>
>-pd
>
>> On 30 Apr 2019, at 23:09 , Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>>
>> Hi Peter
>>
>> Yes, that looks roughly right to me.  I would be in favour of your option (b), partly because it is probably easiest and partly because that retains the basic graphics device startup logic pattern that is replicated across all(?) graphics devices.
>>
>> Paul
>>
>> On 28/04/19 11:39 AM, peter dalgaard wrote:
>>> I had a look at the current code, and AFAICT it has essentially the same structure as it did back then. I think it may have finally dawned upon me what the issue really is:
>>> The logic is that in Rf_addX11Device, we have
>>>         if (!X11DeviceDriver(dev, display, width, height,
>>>                              ps, gamma, colormodel, maxcubesize,
>>>                              bgcolor, canvascolor, sfonts, res,
>>>                              xpos, ypos, title, useCairo, antialias, family)) {
>>>             free(dev);
>>>             errorcall(call, _("unable to start device %s"), devname);
>>>         }
>>>         dd = GEcreateDevDesc(dev);
>>>         GEaddDevice2(dd, devname);
>>> i.e., we start the device driver, and if it fails, we throw away the "dev" structure and call it a day. If it succeeds, we proceed to create a device descriptor structure and add it to the list of open devices.
>>> This approach means that X11DeviceDriver() cannot do anything that potentially accesses the dd structure because it isn't there yet, and the things it cannot do apparently includes calling R_ProcessX11Events(). [To be completely sure that this is actually still true, I'd need to have a closer look at what handleEvent() does.]
>>> So to fix things, it would seem that you could (a) add the device before attempting to start the driver, preparing to back it out if the driver fails to start, or (b) add a call to R_ProcessX11Events() _after_ the GEaddDevice2(dd, devname). Option (b) is probably the easiest.
>>> Paul: Does this analysis look roughly right?
>>> -pd
>>>> On 26 Apr 2019, at 01:23 , frederik at ofb.net wrote:
>>>>
>>>> Thanks Professor Dalgard.
>>>>
>>>> If you have a different way to fix the bug then I'd be happy to test
>>>> it.
>>>>
>>>> Or whatever. I understand that maybe some data was being referenced
>>>> before it had been initialized. I could also support moving the
>>>> R_ProcessEvents call in another place, but it seems one would also
>>>> like to generate some kind of warning message, at the location of the
>>>> bad reference, rather than segfaulting. Was it not possible to
>>>> identify this location? I'm guessing that Valgrind is a bit more
>>>> mature now than it was in 2001...?
>>>>
>>>> Frederick
>>>>
>>>> On Wed, Apr 24, 2019 at 03:12:55PM +0200, peter dalgaard wrote:
>>>>> OK, so I did the archaeology anyway....
>>>>>
>>>>>
>>>>> This was the story, R-core November 29, 2001. Part of thread "X11 still segfaults".
>>>>>
>>>>> ------------>>
>>>>> .....
>>>>> Gah. I've been too tired today. Why did that take me so long?
>>>>>
>>>>> The culprit seems to be
>>>>>
>>>>> R_ProcessEvents((void*) NULL)
>>>>>
>>>>> in newX11DeviceDriver
>>>>>
>>>>> This gets called *before* this stuff at the end of Rf_addX11Device
>>>>>
>>>>> 	dd = GEcreateDevDesc(dev);
>>>>> 	addDevice((DevDesc*) dd);
>>>>> 	initDisplayList((DevDesc*) dd);
>>>>>
>>>>> and it is that "dd" that gets called by Rf_playDisplayList. Removing
>>>>> the offending line stops the segfaulting, seemingly with no ill
>>>>> effects.
>>>>>
>>>>> I'm not really sure what the use of that line ever was; it might be
>>>>> necessary to make the call somewhere later, but it appears to have
>>>>> been possible to race past it before receiving any events all the
>>>>> time.
>>>>>
>>>>> I also changed a couple of spots missing dd->newDevStruct=1
>>>>>
>>>>> Will commit in a moment.
>>>>> <<------------
>>>>>
>>>>> And the following day, in "graphics saga part III", we had
>>>>>
>>>>> ------------->>
>>>>> ...
>>>>>
>>>>> I can't make it happen in 1.3.1 but...
>>>>>
>>>>> It is probably not unrelated to the R_ProcessEvents line that
>>>>> I took out, but that was definitely wrong. However, one might reenable
>>>>> it if one could change this bit of code
>>>>>
>>>>> 	if (!(ptr_X11DeviceDriver)((DevDesc*)(dev), display, width, height, ps, gamma,
>>>>> 				      colormodel, maxcubesize, canvascolor)) {
>>>>> 	    free(dev);
>>>>> 	    errorcall(gcall, "unable to start device %s", devname);
>>>>>      	}
>>>>> 	gsetVar(install(".Device"), mkString(devname), R_NilValue);
>>>>> 	dd = GEcreateDevDesc(dev);
>>>>> 	addDevice((DevDesc*) dd);
>>>>> 	initDisplayList((DevDesc*) dd);
>>>>>
>>>>>
>>>>> and put the if-clause last. A cursory clance through the three
>>>>> functions that are being called didn't reveal anything that would rely
>>>>> on having opened the device driver first.
>>>>>
>>>>> Paul?
>>>>>
>>>>> (I might try it locally, but I'm not sure I should commit anything.)
>>>>>
>>>>> <<-----------
>>>>>
>>>>> It seems that the suggestion was never followed up on?
>>>>>
>>>>> -pd
>>>>>
>>>>>
>>>>>> On 24 Apr 2019, at 11:42 , peter dalgaard <pdalgd at gmail.com> wrote:
>>>>>>
>>>>>> I don't recall exactly what I did 18 years ago eiher and I likely don't have the time to dig into the archives and reconstruct.
>>>>>>
>>>>>> I can imagine that the issue had to do with the protocol around creating and mapping windows. Presumably the segfault comes from looking for events on a window that hasn't been created yet, or has already been destroyed, leading to a NULL reference somewhere. I have a vague recollection that the issue was window manager dependent (in 2001 probably not twm, more likely xvwm on RedHat if it was affecting me).
>>>>>>
>>>>>> A proper fix should go via proper understanding of the X11 protocol - uncommenting a line is as bad as commenting it in the 1st place.... So more like "wait for window to exist THEN process events" -- but the 1st part may be WM specific, etc.
>>>>>>
>>>>>> I recall docs being quite obtuse, and the X11 "mechanism not policy" credo doesn't help as WMs are not obliged to (say) send notifications, so you can end up stalling, waiting for events that never happen.
>>>>>>
>>>>>> It is entirely possible that there is stuff in here that I didn't understand properly at the time, and still don't!
>>>>>>
>>>>>> - pd
>>>>>>
>>>>>>> On 24 Apr 2019, at 02:30 , Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>>>>>>>
>>>>>>> Hi
>>>>>>>
>>>>>>> Sorry, I can't offer an explanation for the commented-out line.
>>>>>>> However, regarding your final question of avoiding the R-core bottleneck, you do have the option of creating a third-party graphics device package.  See, for example, the 'tikzDevice' and 'svglite' packages on CRAN.  Does that provide you with a way forward ?
>>>>>>>
>>>>>>> Paul
>>>>>>>
>>>>>>> On 20/04/2019 5:27 p.m., frederik at ofb.net wrote:
>>>>>>>> Dear R Devel,
>>>>>>>>
>>>>>>>> I know that someone put this line in src/modules/X11/devX11.c:2824 for
>>>>>>>> a reason, because commenting it out causes R to miss an important
>>>>>>>> ConfigureNotify event in my window manager. The result is that plots
>>>>>>>> are initially drawn off the window borders, unreadable.
>>>>>>>>
>>>>>>>>  R_ProcessX11Events((void*) NULL);
>>>>>>>>
>>>>>>>> Unfortunately for me, this line is commented in the standard release
>>>>>>>> of R, it has "#if BUG ... #endif" around it.
>>>>>>>>
>>>>>>>> I guess it is also unfortunate for anyone who uses the same window
>>>>>>>> manager as I do, namely i3, which I think is pretty popular among Unix
>>>>>>>> power users these days; not to mention other full-screen window
>>>>>>>> managers which probably exhibit the same bug in R.
>>>>>>>>
>>>>>>>> Maybe everyone on the Core team uses twm as their window manager? Or
>>>>>>>> RStudio on Windows? Which would be sad because then we're not
>>>>>>>> representing an important user demographic, namely those who prefer
>>>>>>>> software which is modern and powerful, yet simple to understand and
>>>>>>>> modify; fully configurable and interoperable and so on.
>>>>>>>>
>>>>>>>> I first reported this bug 3 years ago. In doing research for my bug
>>>>>>>> report, I found that the line was commented out by Peter Dalgaard in
>>>>>>>> 2001 with the explanation "X11 segfault fix - I hope".
>>>>>>>>
>>>>>>>> I don't know what the way forward is. Obviously the Core Team has
>>>>>>>> reason to say, "look, this isn't very important, it's been broken
>>>>>>>> since 2001, maybe fixing it will cause the undocumented segfault bug
>>>>>>>> to reappear, clearly no one here uses your window manager". Do I have
>>>>>>>> to submit a correctness proof for the proposed change? What do I do?
>>>>>>>>
>>>>>>>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702
>>>>>>>>
>>>>>>>> As mentioned in my bug report, I checked using gdb that
>>>>>>>> ConfigureNotify is indeed being received by the call to
>>>>>>>> R_ProcessX11Events() when it is uncommented. I haven't experienced any
>>>>>>>> segfaults.
>>>>>>>>
>>>>>>>> It's good that Peter left evidence that "R_ProcessX11Events" was being
>>>>>>>> called 18 years ago from X11DeviceDriver(). If he had deleted the
>>>>>>>> line, rather than commenting it, then discovering the reason for the
>>>>>>>> window rendering bug would have been much harder for me.
>>>>>>>>
>>>>>>>> However, the downside is that now it is not just a matter of inserting
>>>>>>>> the line where it belongs; I also feel a bit like I have to explain
>>>>>>>> why it was initially removed. But although I've given it some thought,
>>>>>>>> I still have no idea.
>>>>>>>>
>>>>>>>> Somewhat tangentially, I am wondering if there is some way that we
>>>>>>>> could make the development of R's graphics code proceed at a faster
>>>>>>>> rate, for example by pulling it out into a separate module, so that
>>>>>>>> people could offer alternative implementations via CRAN etc., rather
>>>>>>>> than having R Core be the bottleneck. Would this make sense? Has it
>>>>>>>> already been done?
>>>>>>>>
>>>>>>>> Thank you,
>>>>>>>>
>>>>>>>> Frederick
>>>>>>>>
>>>>>>>> ______________________________________________
>>>>>>>> R-devel at r-project.org mailing list
>>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>>
>>>>>>> --
>>>>>>> Dr Paul Murrell
>>>>>>> Department of Statistics
>>>>>>> The University of Auckland
>>>>>>> Private Bag 92019
>>>>>>> Auckland
>>>>>>> New Zealand
>>>>>>> 64 9 3737599 x85392
>>>>>>> paul at stat.auckland.ac.nz
>>>>>>> http://www.stat.auckland.ac.nz/~paul/
>>>>>>>
>>>>>>> ______________________________________________
>>>>>>> R-devel at r-project.org mailing list
>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>
>>>>>> --
>>>>>> Peter Dalgaard, Professor,
>>>>>> Center for Statistics, Copenhagen Business School
>>>>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>>>>> Phone: (+45)38153501
>>>>>> Office: A 4.23
>>>>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>
>>>>> --
>>>>> Peter Dalgaard, Professor,
>>>>> Center for Statistics, Copenhagen Business School
>>>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>>>> Phone: (+45)38153501
>>>>> Office: A 4.23
>>>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>
>> --
>> Dr Paul Murrell
>> Department of Statistics
>> The University of Auckland
>> Private Bag 92019
>> Auckland
>> New Zealand
>> 64 9 3737599 x85392
>> paul at stat.auckland.ac.nz
>> http://www.stat.auckland.ac.nz/~paul/
>
>-- 
>Peter Dalgaard, Professor,
>Center for Statistics, Copenhagen Business School
>Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>Phone: (+45)38153501
>Office: A 4.23
>Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>
>
>
>
>
>
>
>


From irederik m@iii@g oii oib@@et  Fri May  3 00:44:20 2019
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Thu, 2 May 2019 15:44:20 -0700
Subject: [Rd] 
 [FORGED] src/modules/X11/devX11.c, can we remove "#if BUG" yet
In-Reply-To: <20190502210719.nwz56nvkkypxfutx@localhost>
References: <20190420052728.7tgjr4zxqdddsimm@localhost>
 <3badc471-0698-42e1-581a-2988eb3bf818@stat.auckland.ac.nz>
 <4FEA2AD4-C0A6-4CEE-AB30-CD8AE209ED24@gmail.com>
 <3C40D480-61B5-40D1-A592-1890B090C124@gmail.com>
 <20190425232356.a6vn2unt3ju6a3f7@localhost>
 <07AB76A5-EA6A-45AC-BFB5-170CD093DE39@gmail.com>
 <69efc4f1-4fe0-b93f-eff7-9a22ceaf3c9d@stat.auckland.ac.nz>
 <8A6A2E69-EF83-4861-8B46-5981E6AFC8E9@gmail.com>
 <20190502210719.nwz56nvkkypxfutx@localhost>
Message-ID: <20190502224420.pwsvbvqbhvfihudh@localhost>

Thanks again ... but by the way, I wonder if this would be a good time
to take another look at the use case that produced this error.

Consider that you have a complicated algorithm you are trying to
analyze, and you decide to display plots of certain data, as part of
the algorithm's main loop. Thanks to the recent fix, the plot window
will be correctly resized when it first opens and receives a
ConfigureNotify from the window manager. However, if the user decides
to resize it again while the algorithm is running, then the window
won't react until control comes back to the R read-eval-print loop,
since this is where R_ProcessX11Events gets called. Question: is it
possible to call R_ProcessX11Events manually from R code? That would
be another way to solve the problem. Or if R_ProcessX11Events is
called with every call to plot() or dev.flush() or something, might be
an even simpler solution.

Previously, R developers have been kind enough to add an "onIdle()"
handler to the getGraphicsEvent handlers, making it possible for me to
have interactive animated plots. I love this feature, but I think
there are some applications, like the above, where it would be more
convenient to keep a loop-based flow control.

I don't want to overwhelm you with requests, of course, so maybe this
goes on a queue to think about later.

Thanks,

Frederick

On Thu, May 02, 2019 at 02:07:19PM -0700, frederik at ofb.net wrote:
>I tested it. It fixes the bug and didn't seem to produce any errors. Thank you Professor Dalgaard! I'm so glad this has finally been addressed. I will update the bug report.
>
>(https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702)
>
>On Thu, May 02, 2019 at 04:48:51PM +0200, peter dalgaard wrote:
>>OK, this is now in R-devel, but only superficially tested (b/c this is a Mac). Please check it out.
>>
>>-pd
>>
>>>On 30 Apr 2019, at 23:09 , Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>>>
>>>Hi Peter
>>>
>>>Yes, that looks roughly right to me.  I would be in favour of your option (b), partly because it is probably easiest and partly because that retains the basic graphics device startup logic pattern that is replicated across all(?) graphics devices.
>>>
>>>Paul
>>>
>>>On 28/04/19 11:39 AM, peter dalgaard wrote:
>>>>I had a look at the current code, and AFAICT it has essentially the same structure as it did back then. I think it may have finally dawned upon me what the issue really is:
>>>>The logic is that in Rf_addX11Device, we have
>>>>        if (!X11DeviceDriver(dev, display, width, height,
>>>>                             ps, gamma, colormodel, maxcubesize,
>>>>                             bgcolor, canvascolor, sfonts, res,
>>>>                             xpos, ypos, title, useCairo, antialias, family)) {
>>>>            free(dev);
>>>>            errorcall(call, _("unable to start device %s"), devname);
>>>>        }
>>>>        dd = GEcreateDevDesc(dev);
>>>>        GEaddDevice2(dd, devname);
>>>>i.e., we start the device driver, and if it fails, we throw away the "dev" structure and call it a day. If it succeeds, we proceed to create a device descriptor structure and add it to the list of open devices.
>>>>This approach means that X11DeviceDriver() cannot do anything that potentially accesses the dd structure because it isn't there yet, and the things it cannot do apparently includes calling R_ProcessX11Events(). [To be completely sure that this is actually still true, I'd need to have a closer look at what handleEvent() does.]
>>>>So to fix things, it would seem that you could (a) add the device before attempting to start the driver, preparing to back it out if the driver fails to start, or (b) add a call to R_ProcessX11Events() _after_ the GEaddDevice2(dd, devname). Option (b) is probably the easiest.
>>>>Paul: Does this analysis look roughly right?
>>>>-pd
>>>>>On 26 Apr 2019, at 01:23 , frederik at ofb.net wrote:
>>>>>
>>>>>Thanks Professor Dalgard.
>>>>>
>>>>>If you have a different way to fix the bug then I'd be happy to test
>>>>>it.
>>>>>
>>>>>Or whatever. I understand that maybe some data was being referenced
>>>>>before it had been initialized. I could also support moving the
>>>>>R_ProcessEvents call in another place, but it seems one would also
>>>>>like to generate some kind of warning message, at the location of the
>>>>>bad reference, rather than segfaulting. Was it not possible to
>>>>>identify this location? I'm guessing that Valgrind is a bit more
>>>>>mature now than it was in 2001...?
>>>>>
>>>>>Frederick
>>>>>
>>>>>On Wed, Apr 24, 2019 at 03:12:55PM +0200, peter dalgaard wrote:
>>>>>>OK, so I did the archaeology anyway....
>>>>>>
>>>>>>
>>>>>>This was the story, R-core November 29, 2001. Part of thread "X11 still segfaults".
>>>>>>
>>>>>>------------>>
>>>>>>.....
>>>>>>Gah. I've been too tired today. Why did that take me so long?
>>>>>>
>>>>>>The culprit seems to be
>>>>>>
>>>>>>R_ProcessEvents((void*) NULL)
>>>>>>
>>>>>>in newX11DeviceDriver
>>>>>>
>>>>>>This gets called *before* this stuff at the end of Rf_addX11Device
>>>>>>
>>>>>>	dd = GEcreateDevDesc(dev);
>>>>>>	addDevice((DevDesc*) dd);
>>>>>>	initDisplayList((DevDesc*) dd);
>>>>>>
>>>>>>and it is that "dd" that gets called by Rf_playDisplayList. Removing
>>>>>>the offending line stops the segfaulting, seemingly with no ill
>>>>>>effects.
>>>>>>
>>>>>>I'm not really sure what the use of that line ever was; it might be
>>>>>>necessary to make the call somewhere later, but it appears to have
>>>>>>been possible to race past it before receiving any events all the
>>>>>>time.
>>>>>>
>>>>>>I also changed a couple of spots missing dd->newDevStruct=1
>>>>>>
>>>>>>Will commit in a moment.
>>>>>><<------------
>>>>>>
>>>>>>And the following day, in "graphics saga part III", we had
>>>>>>
>>>>>>------------->>
>>>>>>...
>>>>>>
>>>>>>I can't make it happen in 1.3.1 but...
>>>>>>
>>>>>>It is probably not unrelated to the R_ProcessEvents line that
>>>>>>I took out, but that was definitely wrong. However, one might reenable
>>>>>>it if one could change this bit of code
>>>>>>
>>>>>>	if (!(ptr_X11DeviceDriver)((DevDesc*)(dev), display, width, height, ps, gamma,
>>>>>>				      colormodel, maxcubesize, canvascolor)) {
>>>>>>	    free(dev);
>>>>>>	    errorcall(gcall, "unable to start device %s", devname);
>>>>>>     	}
>>>>>>	gsetVar(install(".Device"), mkString(devname), R_NilValue);
>>>>>>	dd = GEcreateDevDesc(dev);
>>>>>>	addDevice((DevDesc*) dd);
>>>>>>	initDisplayList((DevDesc*) dd);
>>>>>>
>>>>>>
>>>>>>and put the if-clause last. A cursory clance through the three
>>>>>>functions that are being called didn't reveal anything that would rely
>>>>>>on having opened the device driver first.
>>>>>>
>>>>>>Paul?
>>>>>>
>>>>>>(I might try it locally, but I'm not sure I should commit anything.)
>>>>>>
>>>>>><<-----------
>>>>>>
>>>>>>It seems that the suggestion was never followed up on?
>>>>>>
>>>>>>-pd
>>>>>>
>>>>>>
>>>>>>>On 24 Apr 2019, at 11:42 , peter dalgaard <pdalgd at gmail.com> wrote:
>>>>>>>
>>>>>>>I don't recall exactly what I did 18 years ago eiher and I likely don't have the time to dig into the archives and reconstruct.
>>>>>>>
>>>>>>>I can imagine that the issue had to do with the protocol around creating and mapping windows. Presumably the segfault comes from looking for events on a window that hasn't been created yet, or has already been destroyed, leading to a NULL reference somewhere. I have a vague recollection that the issue was window manager dependent (in 2001 probably not twm, more likely xvwm on RedHat if it was affecting me).
>>>>>>>
>>>>>>>A proper fix should go via proper understanding of the X11 protocol - uncommenting a line is as bad as commenting it in the 1st place.... So more like "wait for window to exist THEN process events" -- but the 1st part may be WM specific, etc.
>>>>>>>
>>>>>>>I recall docs being quite obtuse, and the X11 "mechanism not policy" credo doesn't help as WMs are not obliged to (say) send notifications, so you can end up stalling, waiting for events that never happen.
>>>>>>>
>>>>>>>It is entirely possible that there is stuff in here that I didn't understand properly at the time, and still don't!
>>>>>>>
>>>>>>>- pd
>>>>>>>
>>>>>>>>On 24 Apr 2019, at 02:30 , Paul Murrell <paul at stat.auckland.ac.nz> wrote:
>>>>>>>>
>>>>>>>>Hi
>>>>>>>>
>>>>>>>>Sorry, I can't offer an explanation for the commented-out line.
>>>>>>>>However, regarding your final question of avoiding the R-core bottleneck, you do have the option of creating a third-party graphics device package.  See, for example, the 'tikzDevice' and 'svglite' packages on CRAN.  Does that provide you with a way forward ?
>>>>>>>>
>>>>>>>>Paul
>>>>>>>>
>>>>>>>>On 20/04/2019 5:27 p.m., frederik at ofb.net wrote:
>>>>>>>>>Dear R Devel,
>>>>>>>>>
>>>>>>>>>I know that someone put this line in src/modules/X11/devX11.c:2824 for
>>>>>>>>>a reason, because commenting it out causes R to miss an important
>>>>>>>>>ConfigureNotify event in my window manager. The result is that plots
>>>>>>>>>are initially drawn off the window borders, unreadable.
>>>>>>>>>
>>>>>>>>> R_ProcessX11Events((void*) NULL);
>>>>>>>>>
>>>>>>>>>Unfortunately for me, this line is commented in the standard release
>>>>>>>>>of R, it has "#if BUG ... #endif" around it.
>>>>>>>>>
>>>>>>>>>I guess it is also unfortunate for anyone who uses the same window
>>>>>>>>>manager as I do, namely i3, which I think is pretty popular among Unix
>>>>>>>>>power users these days; not to mention other full-screen window
>>>>>>>>>managers which probably exhibit the same bug in R.
>>>>>>>>>
>>>>>>>>>Maybe everyone on the Core team uses twm as their window manager? Or
>>>>>>>>>RStudio on Windows? Which would be sad because then we're not
>>>>>>>>>representing an important user demographic, namely those who prefer
>>>>>>>>>software which is modern and powerful, yet simple to understand and
>>>>>>>>>modify; fully configurable and interoperable and so on.
>>>>>>>>>
>>>>>>>>>I first reported this bug 3 years ago. In doing research for my bug
>>>>>>>>>report, I found that the line was commented out by Peter Dalgaard in
>>>>>>>>>2001 with the explanation "X11 segfault fix - I hope".
>>>>>>>>>
>>>>>>>>>I don't know what the way forward is. Obviously the Core Team has
>>>>>>>>>reason to say, "look, this isn't very important, it's been broken
>>>>>>>>>since 2001, maybe fixing it will cause the undocumented segfault bug
>>>>>>>>>to reappear, clearly no one here uses your window manager". Do I have
>>>>>>>>>to submit a correctness proof for the proposed change? What do I do?
>>>>>>>>>
>>>>>>>>>https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16702
>>>>>>>>>
>>>>>>>>>As mentioned in my bug report, I checked using gdb that
>>>>>>>>>ConfigureNotify is indeed being received by the call to
>>>>>>>>>R_ProcessX11Events() when it is uncommented. I haven't experienced any
>>>>>>>>>segfaults.
>>>>>>>>>
>>>>>>>>>It's good that Peter left evidence that "R_ProcessX11Events" was being
>>>>>>>>>called 18 years ago from X11DeviceDriver(). If he had deleted the
>>>>>>>>>line, rather than commenting it, then discovering the reason for the
>>>>>>>>>window rendering bug would have been much harder for me.
>>>>>>>>>
>>>>>>>>>However, the downside is that now it is not just a matter of inserting
>>>>>>>>>the line where it belongs; I also feel a bit like I have to explain
>>>>>>>>>why it was initially removed. But although I've given it some thought,
>>>>>>>>>I still have no idea.
>>>>>>>>>
>>>>>>>>>Somewhat tangentially, I am wondering if there is some way that we
>>>>>>>>>could make the development of R's graphics code proceed at a faster
>>>>>>>>>rate, for example by pulling it out into a separate module, so that
>>>>>>>>>people could offer alternative implementations via CRAN etc., rather
>>>>>>>>>than having R Core be the bottleneck. Would this make sense? Has it
>>>>>>>>>already been done?
>>>>>>>>>
>>>>>>>>>Thank you,
>>>>>>>>>
>>>>>>>>>Frederick
>>>>>>>>>
>>>>>>>>>______________________________________________
>>>>>>>>>R-devel at r-project.org mailing list
>>>>>>>>>https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>>>
>>>>>>>>--
>>>>>>>>Dr Paul Murrell
>>>>>>>>Department of Statistics
>>>>>>>>The University of Auckland
>>>>>>>>Private Bag 92019
>>>>>>>>Auckland
>>>>>>>>New Zealand
>>>>>>>>64 9 3737599 x85392
>>>>>>>>paul at stat.auckland.ac.nz
>>>>>>>>http://www.stat.auckland.ac.nz/~paul/
>>>>>>>>
>>>>>>>>______________________________________________
>>>>>>>>R-devel at r-project.org mailing list
>>>>>>>>https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>>
>>>>>>>--
>>>>>>>Peter Dalgaard, Professor,
>>>>>>>Center for Statistics, Copenhagen Business School
>>>>>>>Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>>>>>>Phone: (+45)38153501
>>>>>>>Office: A 4.23
>>>>>>>Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>>
>>>>>>
>>>>>>--
>>>>>>Peter Dalgaard, Professor,
>>>>>>Center for Statistics, Copenhagen Business School
>>>>>>Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>>>>>Phone: (+45)38153501
>>>>>>Office: A 4.23
>>>>>>Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>>>>
>>>
>>>--
>>>Dr Paul Murrell
>>>Department of Statistics
>>>The University of Auckland
>>>Private Bag 92019
>>>Auckland
>>>New Zealand
>>>64 9 3737599 x85392
>>>paul at stat.auckland.ac.nz
>>>http://www.stat.auckland.ac.nz/~paul/
>>
>>-- 
>>Peter Dalgaard, Professor,
>>Center for Statistics, Copenhagen Business School
>>Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>Phone: (+45)38153501
>>Office: A 4.23
>>Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>
>>
>>
>>
>>
>>
>>
>>
>>
>


From ||or@@|@un@@gerber @end|ng |rom gm@||@com  Thu May  2 21:35:41 2019
From: ||or@@|@un@@gerber @end|ng |rom gm@||@com (Florian Gerber)
Date: Thu, 2 May 2019 13:35:41 -0600
Subject: [Rd] R optim(method="L-BFGS-B"): unexpected behavior when working
 with parent environments
Message-ID: <45fd1e7c-fffa-11b1-3a62-08d086fcbd78@gmail.com>

Dear all,

when using optim() for a function that uses the parent environment, I
see the following unexpected behavior:

makeFn <- function(){
??? xx <- ret <- NA
??? fn <- function(x){
?????? if(!is.na(xx) && x==xx){
?????????? cat("x=", xx, ", ret=", ret, " (memory)", fill=TRUE, sep="")
?????????? return(ret)
?????? }
?????? xx <<- x; ret <<- sum(x^2)
?????? cat("x=", xx, ", ret=", ret, " (calculate)", fill=TRUE, sep="")
?????? ret
??? }
??? fn
}
fn <- makeFn()
optim(par=10, fn=fn, method="L-BFGS-B")
# x=10, ret=100 (calculate)
# x=10.001, ret=100.02 (calculate)
# x=9.999, ret=100.02 (memory)
# $par
# [1] 10
#
# $value
# [1] 100
# (...)

I would expect that optim() does more than 3 function evaluations and
that the optimization converges to 0.

Same problem with optim(par=10, fn=fn, method="BFGS").

Any ideas?

See also my related post:
https://stackoverflow.com/questions/53826521/r-optim-unexpected-behavior-when-working-with-parent-environments
???
platform?????? x86_64-pc-linux-gnu????????
arch?????????? x86_64?????????????????????
os???????????? linux-gnu??????????????????
system???????? x86_64, linux-gnu??????????
status????????????????????????????????????
major????????? 3??????????????????????????
minor????????? 6.0????????????????????????
year?????????? 2019???????????????????????
month????????? 04?????????????????????????
day??????????? 26?????????????????????????
svn rev??????? 76424??????????????????????
language?????? R??????????????????????????
version.string R version 3.6.0 (2019-04-26)
nickname?????? Planting of a Tree?????????

Best,
Florian


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Fri May  3 10:31:15 2019
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Fri, 3 May 2019 10:31:15 +0200
Subject: [Rd] 
 R optim(method="L-BFGS-B"): unexpected behavior when working
 with parent environments
In-Reply-To: <45fd1e7c-fffa-11b1-3a62-08d086fcbd78@gmail.com>
References: <45fd1e7c-fffa-11b1-3a62-08d086fcbd78@gmail.com>
Message-ID: <0346dccc-9d93-0d74-9c20-1825c67cd900@insa-toulouse.fr>

On 02/05/2019 21:35, Florian Gerber wrote:
> Dear all,
>
> when using optim() for a function that uses the parent environment, I
> see the following unexpected behavior:
>
> makeFn <- function(){
>  ??? xx <- ret <- NA
>  ??? fn <- function(x){
>  ?????? if(!is.na(xx) && x==xx){
>  ?????????? cat("x=", xx, ", ret=", ret, " (memory)", fill=TRUE, sep="")
>  ?????????? return(ret)
>  ?????? }
>  ?????? xx <<- x; ret <<- sum(x^2)
>  ?????? cat("x=", xx, ", ret=", ret, " (calculate)", fill=TRUE, sep="")
>  ?????? ret
>  ??? }
>  ??? fn
> }
> fn <- makeFn()
> optim(par=10, fn=fn, method="L-BFGS-B")
> # x=10, ret=100 (calculate)
> # x=10.001, ret=100.02 (calculate)
> # x=9.999, ret=100.02 (memory)
> # $par
> # [1] 10
> #
> # $value
> # [1] 100
> # (...)
>
> I would expect that optim() does more than 3 function evaluations and
> that the optimization converges to 0.
>
> Same problem with optim(par=10, fn=fn, method="BFGS").
>
> Any ideas?
I don't have an answer but may be an insight. For some mysterious reason 
xx is getting changed when in should not. Consider:
 > fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in 
x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx <<- 
x; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
 > optim(par=10, fn=fn, method="L-BFGS-B")
1 in x,xx,ret= 10 NA NA
out x,xx,ret= 10 10 100
2 in x,xx,ret= 10.001 10 100
out x,xx,ret= 10.001 10.001 100.02
3 in x,xx,ret= 9.999 9.999 100.02
$par
[1] 10

$value
[1] 100

$counts
function gradient
 ?????? 1??????? 1

$convergence
[1] 0

$message
[1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"

At the third call, xx has value 9.999 while it should have kept the 
value 10.001.

Serguei.


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Fri May  3 10:41:36 2019
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Fri, 3 May 2019 10:41:36 +0200
Subject: [Rd] 
 R optim(method="L-BFGS-B"): unexpected behavior when working
 with parent environments
In-Reply-To: <0346dccc-9d93-0d74-9c20-1825c67cd900@insa-toulouse.fr>
References: <45fd1e7c-fffa-11b1-3a62-08d086fcbd78@gmail.com>
 <0346dccc-9d93-0d74-9c20-1825c67cd900@insa-toulouse.fr>
Message-ID: <ddb7d325-67a3-ed65-11cd-014895d1a454@insa-toulouse.fr>

On 03/05/2019 10:31, Serguei Sokol wrote:
> On 02/05/2019 21:35, Florian Gerber wrote:
>> Dear all,
>>
>> when using optim() for a function that uses the parent environment, I
>> see the following unexpected behavior:
>>
>> makeFn <- function(){
>> ???? xx <- ret <- NA
>> ???? fn <- function(x){
>> ??????? if(!is.na(xx) && x==xx){
>> ??????????? cat("x=", xx, ", ret=", ret, " (memory)", fill=TRUE, sep="")
>> ??????????? return(ret)
>> ??????? }
>> ??????? xx <<- x; ret <<- sum(x^2)
>> ??????? cat("x=", xx, ", ret=", ret, " (calculate)", fill=TRUE, sep="")
>> ??????? ret
>> ???? }
>> ???? fn
>> }
>> fn <- makeFn()
>> optim(par=10, fn=fn, method="L-BFGS-B")
>> # x=10, ret=100 (calculate)
>> # x=10.001, ret=100.02 (calculate)
>> # x=9.999, ret=100.02 (memory)
>> # $par
>> # [1] 10
>> #
>> # $value
>> # [1] 100
>> # (...)
>>
>> I would expect that optim() does more than 3 function evaluations and
>> that the optimization converges to 0.
>>
>> Same problem with optim(par=10, fn=fn, method="BFGS").
>>
>> Any ideas?
> I don't have an answer but may be an insight. For some mysterious 
> reason xx is getting changed when in should not. Consider:
> > fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in 
> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx 
> <<- x; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
> > optim(par=10, fn=fn, method="L-BFGS-B")
> 1 in x,xx,ret= 10 NA NA
> out x,xx,ret= 10 10 100
> 2 in x,xx,ret= 10.001 10 100
> out x,xx,ret= 10.001 10.001 100.02
> 3 in x,xx,ret= 9.999 9.999 100.02
> $par
> [1] 10
>
> $value
> [1] 100
>
> $counts
> function gradient
> ?????? 1??????? 1
>
> $convergence
> [1] 0
>
> $message
> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
>
> At the third call, xx has value 9.999 while it should have kept the 
> value 10.001.
>
A little follow-up: if you untie the link between xx and x by replacing 
the expression "xx <<- x" by "xx <<- x+0" it works as expected:
 > fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in 
x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx <<- 
x+0; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
 > optim(par=10, fn=fn, method="L-BFGS-B")
1 in x,xx,ret= 10 NA NA
out x,xx,ret= 10 10 100
2 in x,xx,ret= 10.001 10 100
out x,xx,ret= 10.001 10.001 100.02
3 in x,xx,ret= 9.999 10.001 100.02
out x,xx,ret= 9.999 9.999 99.98
4 in x,xx,ret= 9 9.999 99.98
out x,xx,ret= 9 9 81
5 in x,xx,ret= 9.001 9 81
out x,xx,ret= 9.001 9.001 81.018
6 in x,xx,ret= 8.999 9.001 81.018
out x,xx,ret= 8.999 8.999 80.982
7 in x,xx,ret= 1.776357e-11 8.999 80.982
out x,xx,ret= 1.776357e-11 1.776357e-11 3.155444e-22
8 in x,xx,ret= 0.001 1.776357e-11 3.155444e-22
out x,xx,ret= 0.001 0.001 1e-06
9 in x,xx,ret= -0.001 0.001 1e-06
out x,xx,ret= -0.001 -0.001 1e-06
10 in x,xx,ret= -1.334475e-23 -0.001 1e-06
out x,xx,ret= -1.334475e-23 -1.334475e-23 1.780823e-46
11 in x,xx,ret= 0.001 -1.334475e-23 1.780823e-46
out x,xx,ret= 0.001 0.001 1e-06
12 in x,xx,ret= -0.001 0.001 1e-06
out x,xx,ret= -0.001 -0.001 1e-06
$par
[1] -1.334475e-23

$value
[1] 1.780823e-46

$counts
function gradient
 ?????? 4??????? 4

$convergence
[1] 0

$message
[1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"

Serguei.


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri May  3 11:55:38 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 3 May 2019 11:55:38 +0200
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
Message-ID: <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>

Dear Thomas,

thank you for your input. I've debugged one of the packages and I 
confirm that the breakage is related to passing of strings from C to 
Fortran. Indeed, BLAS and LAPACK define a large number of subroutines 
that take one or more explicit single-character strings as arguments. 
Other than that, BLAS has only one function (xerbla), which takes a 
string of unspecified length, LAPACK only has four (ilaenv, 
ilaenv2stage, lsamen, xerbla). The C interfaces to BLAS/LAPACK from 
Netlib depend on the historic behavior that explicit single-character 
strings are interoperable, concretely CBLAS and LAPACKE provide C 
interfaces/code that calls into Fortran BLAS/LAPACK without passing the 
1s as lengths of the character strings (functions taking a string of 
unspecified length are trivial and re-implemented in C). This has been 
working fine for very many years as the Fortran code never needed to 
access the length it knew was 1. R has been using the same practice, 
which long predates ISO_C_BINDING/BIND(C), and I've seen online 
discussions where people assumed interoperability of length 1 strings, 
once mentioning also a citation from Fortran 2003 Handbook that says "A 
Fortran character string with a length other than 1 is not 
interoperable" (which invites interpretation that length 1 strings were 
). I am not an expert to say whether the current Fortran standard 
requires that interoperability and I assume that it does not given this 
gfortran change.

This gfortran change breaks this interoperability: if a C function calls 
a Fortran function, passing it a single-character string for a parameter 
taking explicit single-character Fortran string, it may crash. I've 
debugged one case with R package BDgraph, this example 
"library(BDgraph); data.sim <- bdgraph.sim( n = 70, p = 5, size = 7, vis 
= TRUE )" crashes due to corruption of C stack by Fortran function 
DPOSV, when compiled with the new gfortran and with -O2. To see the 
problem, one can just look at the disassembly of DPOSV (LAPACK), neither 
the package nor R is not necessary:

SUBROUTINE DPOSV( UPLO, N, NRHS, A, LDA, B, LDB, INFO )
CHARACTER????????? UPLO

In one case, DPOSV calls DPOTRS before returning. The new gfortran with 
-O2 performs tail-call optimization, jumping to DPOTRS. In the annotated 
disassembly snippet, at 11747f1, DPOSV tries to ensure that there is 
constant 1 as string length of UPLO when tail-calling into DPOTRS, so it 
writes it to stack where there already should have been 1 as length of 
UPLO passed to DPOSV. But this argument has not been passed to DPOSV, so 
this causes stack corruption.

 ?1174ce:?????? 0f 85 62 ff ff ff?????? jne??? 117436 <dposv_+0xb6> <== jump if ERROR

 ???????? CALL DPOTRS( UPLO, N, NRHS, A, LDA, B, LDB, INFO )

 ? 1174d4:?????? 48 8b 04 24???????????? mov??? (%rsp),%rax <======= rax holds LDB

 ? 1174d8:?????? 4c 89 7c 24 68????????? mov??? %r15,0x68(%rsp) <=== save INFO to output param

 ? 1174dd:?????? 49 89 d8??????????????? mov??? %rbx,%r8 <========== pass LDA as LDA

 ? 1174e0:?????? 4c 89 e1??????????????? mov??? %r12,%rcx <========= pass A as A

 ? 1174e3:?????? 4c 8b 4c 24 08????????? mov??? 0x8(%rsp),%r9 <===== pass B as B

 ? 1174e8:?????? 4c 89 ea??????????????? mov??? %r13,%rdx <========= pass NRHS as NRHS

 ? 1174eb:?????? 48 89 ee??????????????? mov??? %rbp,%rsi <========= pass N as N

 ? 1174ee:?????? 4c 89 f7??????????????? mov??? %r14,%rdi <========= pass UPLO as UPLO

 ? 1174f1:?????? 48 c7 44 24 70 01 00??? movq?? $0x1,0x70(%rsp) <=== pass 1 hidden arg on stack CORRUPTS C STACK

 ? 1174f8:?????? 00 00

 ? 1174fa:?????? 48 89 44 24 60????????? mov??? %rax,0x60(%rsp) <=== pass LDB as LDB (stack)

 ????? END

 ? 1174ff:?????? 48 83 c4 28???????????? add??? $0x28,%rsp <== remove 5 vars from stack (sframe)

 ? 117503:?????? 5b????????????????????? pop??? %rbx

 ? 117504:?????? 5d????????????????????? pop??? %rbp

 ? 117505:?????? 41 5c?????????????????? pop??? %r12

 ? 117507:?????? 41 5d?????????????????? pop??? %r13

 ? 117509:?????? 41 5e?????????????????? pop??? %r14

 ? 11750b:?????? 41 5f?????????????????? pop??? %r15 <=== restore register to level before call

 ???????? CALL DPOTRS( UPLO, N, NRHS, A, LDA, B, LDB, INFO )

 ? 11750d:?????? e9 de 56 ef ff????????? jmpq?? cbf0 <dpotrs_ at plt> <=== tail call to dpotrs

Note that DPOSV never uses the length of the string (UPLO) from the 
hidden argument, the compiler clearly knows that its length is 1. In 
calls where the length is passed in registers, this does not cause 
trouble (like LSAME) and indeed is needed as the registers have 
different values

 ????? IF( .NOT.LSAME( UPLO, 'U' ) .AND. .NOT.LSAME( UPLO, 'L' ) ) THEN

 ? 117448:?????? b9 01 00 00 00????????? mov??? $0x1,%ecx

 ? 11744d:?????? ba 01 00 00 00????????? mov??? $0x1,%edx

 ? 117452:?????? 48 8d 35 bb 12 09 00??? lea??? 0x912bb(%rip),%rsi??????? # 1a8714 <ipivot.4261+0xd14>

 ? 117459:?????? 4c 89 f7??????????????? mov??? %r14,%rdi

 ? 11745c:?????? e8 1f 3d ef ff????????? callq? b180 <lsame_ at plt>

but it seems to me that the compiler could just refrain from setting the 
length to be 1 on the stack at 1174f1, since it knows it should have 
already been there. It would be a nice property if Fortran code that 
never accesses the hidden arguments with the lengths of the strings, 
because it knows what those lengths are, would also never write to those 
hidden arguments on the stack when it knows what they are (should be).

Before the gfortran change, DPOSV would call to DPOTRS normally (no 
tail-call optimization), so this problem would not occur (I tested with 
268974). By disabling tail call optimization via 
-fno-optimize-sibling-calls, the problem goes away also for other 
packages my colleagues have identified as crashing with the new 
gfortran. Did you know of any other optimization that could break this 
interoperability of 1-length strings? It would be really nice to users 
if this interoperability could be preserved, and if not by default than 
at least with some option.

Traditionally, BLAS/LAPACK implementations are interchangeable at 
dynamic linking time, using the Fortran interface that is however also 
used from C, without passing lengths for fixed 1-character strings. R 
supports this too, at least on some Linux distributions including 
Debian/Ubuntu it is packaged so that it runs with the BLAS/LAPACK 
implementation installed on the system. Even though this is probably not 
correct wrt to the todays Fortran standard (I don't know for sure), this 
is the common practice, and fixing this would not be easy - one would 
have to create a new interface to be used from C, separate from the 
Fortran one, and all software would have to start using that interface 
from C. In the current situation when the Fortran interface is used, 
confusion will arise with this gfortran change as different BLAS/LAPACK 
implementations are built by different Fortran compilers and use a 
different mix of Fortran/C for different computational subroutines. Note 
CBLAS could not be readily used as it itself breaks with the current 
gfortran change as well.

The same interoperability considerations apply to R packages, which 
include native code that calls from C or from Fortran into the (same) 
Fortran interface of BLAS/LAPACK. There would have to be a commonly 
accepted C interface instead by the BLAS/LAPACK implementations, and all 
of these packages would have to be modified to use that interface. If we 
created such a C interface just inside R and asked all package 
maintainers to update their packages, we would still have the problem 
with substitution of external BLAS(/LAPACK) implementations at dynamic 
linking time.

Indeed, it would be very hard to identify these problems by testing, 
because at least now the crashes are quite rate (for the tail-call 
optimization, a number of conditions have to be met to cause memory 
corruption, first the tail optimization has to happen, then the number 
of arguments has to be so large (on x86) that the lengths are passed on 
stack and not in registers, we have to be lucky for the memory 
corruption to map to a crash, etc).

So, any help we could get from you would be highly appreciated, be it 
just a compile option to keep the old behavior or an assurance that we 
are fine if we just disable the tail-call optimization. Appreciated by 
us but I believe also many others who use or develop BLAS/LAPACK, but 
may not have yet run into the problem, as they may not have been 
regularly testing bleeding-edge versions of compilers or may not have 
such a large code base to test as we have on CRAN.

Thanks
Tomas


On 4/24/19 11:32 PM, Thomas K?nig wrote:
> Hi,
>
> I have tried to pinpoint potential problems which could lead to the
> LAPACK issues that are currently seen in R.? I built the current R
> trunk using
>
> AR=gcc-ar RANLIB=gcc-ranlib ./configure --prefix=$HOME --enable-lto 
> --enable-BLAS-shlib=no --without-recommended-packages
>
> and used this to find problem areas.
>
> There are quite a few warnings that were flagged, due to mismatches
> in function types.
>
> The prototypes that R has in its header files, for example BLAS.h,
> are often not compatible with gfortran function declarations.? To take
> one small example, in src/main/print.c, we have
>
> void NORET F77_NAME(xerbla)(const char *srname, int *info)
>
> so xerbla_ is defined with two arguments.
>
> However, gfortran passes string lengths as hidden arguments.
> You can see this by compiling the small example
>
> $ cat xer.f
> ????? SUBROUTINE FOO
> ????? INTEGER INFO
> ????? CALL XERBLA ('FOO', INFO)
> ????? END
> $ gfortran -c -fdump-tree-original xer.f
> $ cat xer.f.004t.original
> foo ()
> {
> ? integer(kind=4) info;
>
> ? xerbla (&"FOO"[1]{lb: 1 sz: 1}, &info, 3);
> }
>
> so here we have three arguments. This mismatch is flagged
> by -Wlto-type-mismatch, which, for example, yields
>
> print.c:1120:12: note: type 'void' should match type 'long int'
> ../../src/extra/blas/blas.f:357:20: warning: type of 'xerbla' does not 
> match original declaration [-Wlto-type-mismatch]
> ? 357 |????????? CALL XERBLA( 'DGBMV ', INFO )
>
>
> So, why can gcc's r268992 / r269349 matter? Before these patches,
> gfortran used the variadic calling convention for calling procedures
> outside the current file, and the non-variadic calling convention for
> calling procedures found in the current file.
>
> Because the procedures were all compiled as non-variadic, the caller and
> the calle's signature did not match if they were not in the same
> source file, which is an ABI violation.
>
> This violation manifested itself in https://gcc.gnu.org/PR87689 ,
> where the the problem resulted in crashes on a primary gcc platform,
> POWER.
>
> How can this potentially affect R?? After the fix for PR87689,
> gfortran's calls to external procedures are no longer variadic. It is
> quite possible that, while this "works" most of the time, there
> is a problem with a particular LAPACK routine, the call sequence
> leading up to it or the procedures it calls.
>
> How to fix this problem?? The only clear way I see is to fix this
> on the R side, by adding the string lengths to the prototypes.
> These are size_t (64 bit on 64-bit systems, 32 bit on 32-bit
> systems).? You should then try to make --enable-lto pass
> without any warnings.
>
> Regarding LAPACK itself, the default build system for R builds
> it as a shared library.? Offhand, I did not see any way to
> build a *.a file instead, so I could not use LTO to check
> for mismatched prototypes between R and LAPACK.
>
> Of course, I cannot be sure that this is really the root cause
> of the problem you are seeing,but it does seem to fit quite well.
> I hope this analysis helps in resolving this.
>
> Regards
>
> ????Thomas
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri May  3 11:58:32 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 3 May 2019 05:58:32 -0400
Subject: [Rd] 
 R optim(method="L-BFGS-B"): unexpected behavior when working
 with parent environments
In-Reply-To: <ddb7d325-67a3-ed65-11cd-014895d1a454@insa-toulouse.fr>
References: <45fd1e7c-fffa-11b1-3a62-08d086fcbd78@gmail.com>
 <0346dccc-9d93-0d74-9c20-1825c67cd900@insa-toulouse.fr>
 <ddb7d325-67a3-ed65-11cd-014895d1a454@insa-toulouse.fr>
Message-ID: <e1bcc19f-413f-b518-fb7e-ad7feddb2f88@gmail.com>

Your results below make it look like a bug in optim():  it is not 
duplicating a value when it should, so changes to x affect xx as well.

Duncan Murdoch

On 03/05/2019 4:41 a.m., Serguei Sokol wrote:
> On 03/05/2019 10:31, Serguei Sokol wrote:
>> On 02/05/2019 21:35, Florian Gerber wrote:
>>> Dear all,
>>>
>>> when using optim() for a function that uses the parent environment, I
>>> see the following unexpected behavior:
>>>
>>> makeFn <- function(){
>>>  ???? xx <- ret <- NA
>>>  ???? fn <- function(x){
>>>  ??????? if(!is.na(xx) && x==xx){
>>>  ??????????? cat("x=", xx, ", ret=", ret, " (memory)", fill=TRUE, sep="")
>>>  ??????????? return(ret)
>>>  ??????? }
>>>  ??????? xx <<- x; ret <<- sum(x^2)
>>>  ??????? cat("x=", xx, ", ret=", ret, " (calculate)", fill=TRUE, sep="")
>>>  ??????? ret
>>>  ???? }
>>>  ???? fn
>>> }
>>> fn <- makeFn()
>>> optim(par=10, fn=fn, method="L-BFGS-B")
>>> # x=10, ret=100 (calculate)
>>> # x=10.001, ret=100.02 (calculate)
>>> # x=9.999, ret=100.02 (memory)
>>> # $par
>>> # [1] 10
>>> #
>>> # $value
>>> # [1] 100
>>> # (...)
>>>
>>> I would expect that optim() does more than 3 function evaluations and
>>> that the optimization converges to 0.
>>>
>>> Same problem with optim(par=10, fn=fn, method="BFGS").
>>>
>>> Any ideas?
>> I don't have an answer but may be an insight. For some mysterious
>> reason xx is getting changed when in should not. Consider:
>>> fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in
>> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx
>> <<- x; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
>>> optim(par=10, fn=fn, method="L-BFGS-B")
>> 1 in x,xx,ret= 10 NA NA
>> out x,xx,ret= 10 10 100
>> 2 in x,xx,ret= 10.001 10 100
>> out x,xx,ret= 10.001 10.001 100.02
>> 3 in x,xx,ret= 9.999 9.999 100.02
>> $par
>> [1] 10
>>
>> $value
>> [1] 100
>>
>> $counts
>> function gradient
>>  ?????? 1??????? 1
>>
>> $convergence
>> [1] 0
>>
>> $message
>> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
>>
>> At the third call, xx has value 9.999 while it should have kept the
>> value 10.001.
>>
> A little follow-up: if you untie the link between xx and x by replacing
> the expression "xx <<- x" by "xx <<- x+0" it works as expected:
>   > fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in
> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx <<-
> x+0; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
>   > optim(par=10, fn=fn, method="L-BFGS-B")
> 1 in x,xx,ret= 10 NA NA
> out x,xx,ret= 10 10 100
> 2 in x,xx,ret= 10.001 10 100
> out x,xx,ret= 10.001 10.001 100.02
> 3 in x,xx,ret= 9.999 10.001 100.02
> out x,xx,ret= 9.999 9.999 99.98
> 4 in x,xx,ret= 9 9.999 99.98
> out x,xx,ret= 9 9 81
> 5 in x,xx,ret= 9.001 9 81
> out x,xx,ret= 9.001 9.001 81.018
> 6 in x,xx,ret= 8.999 9.001 81.018
> out x,xx,ret= 8.999 8.999 80.982
> 7 in x,xx,ret= 1.776357e-11 8.999 80.982
> out x,xx,ret= 1.776357e-11 1.776357e-11 3.155444e-22
> 8 in x,xx,ret= 0.001 1.776357e-11 3.155444e-22
> out x,xx,ret= 0.001 0.001 1e-06
> 9 in x,xx,ret= -0.001 0.001 1e-06
> out x,xx,ret= -0.001 -0.001 1e-06
> 10 in x,xx,ret= -1.334475e-23 -0.001 1e-06
> out x,xx,ret= -1.334475e-23 -1.334475e-23 1.780823e-46
> 11 in x,xx,ret= 0.001 -1.334475e-23 1.780823e-46
> out x,xx,ret= 0.001 0.001 1e-06
> 12 in x,xx,ret= -0.001 0.001 1e-06
> out x,xx,ret= -0.001 -0.001 1e-06
> $par
> [1] -1.334475e-23
> 
> $value
> [1] 1.780823e-46
> 
> $counts
> function gradient
>   ?????? 4??????? 4
> 
> $convergence
> [1] 0
> 
> $message
> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
> 
> Serguei.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From pd@|gd @end|ng |rom gm@||@com  Fri May  3 13:13:39 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 3 May 2019 13:13:39 +0200
Subject: [Rd] 
 R optim(method="L-BFGS-B"): unexpected behavior when working
 with parent environments
In-Reply-To: <e1bcc19f-413f-b518-fb7e-ad7feddb2f88@gmail.com>
References: <45fd1e7c-fffa-11b1-3a62-08d086fcbd78@gmail.com>
 <0346dccc-9d93-0d74-9c20-1825c67cd900@insa-toulouse.fr>
 <ddb7d325-67a3-ed65-11cd-014895d1a454@insa-toulouse.fr>
 <e1bcc19f-413f-b518-fb7e-ad7feddb2f88@gmail.com>
Message-ID: <0574BB69-85B4-42D9-886D-F0219316ABF2@gmail.com>

Yes, I think you are right. I was at first confused by the fact that after the optim() call,

> environment(fn)$xx
[1] 10
> environment(fn)$ret
[1] 100.02

so not 9.999, but this could come from x being assigned the final value without calling fn.

-pd


> On 3 May 2019, at 11:58 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> Your results below make it look like a bug in optim():  it is not duplicating a value when it should, so changes to x affect xx as well.
> 
> Duncan Murdoch
> 
> On 03/05/2019 4:41 a.m., Serguei Sokol wrote:
>> On 03/05/2019 10:31, Serguei Sokol wrote:
>>> On 02/05/2019 21:35, Florian Gerber wrote:
>>>> Dear all,
>>>> 
>>>> when using optim() for a function that uses the parent environment, I
>>>> see the following unexpected behavior:
>>>> 
>>>> makeFn <- function(){
>>>>      xx <- ret <- NA
>>>>      fn <- function(x){
>>>>         if(!is.na(xx) && x==xx){
>>>>             cat("x=", xx, ", ret=", ret, " (memory)", fill=TRUE, sep="")
>>>>             return(ret)
>>>>         }
>>>>         xx <<- x; ret <<- sum(x^2)
>>>>         cat("x=", xx, ", ret=", ret, " (calculate)", fill=TRUE, sep="")
>>>>         ret
>>>>      }
>>>>      fn
>>>> }
>>>> fn <- makeFn()
>>>> optim(par=10, fn=fn, method="L-BFGS-B")
>>>> # x=10, ret=100 (calculate)
>>>> # x=10.001, ret=100.02 (calculate)
>>>> # x=9.999, ret=100.02 (memory)
>>>> # $par
>>>> # [1] 10
>>>> #
>>>> # $value
>>>> # [1] 100
>>>> # (...)
>>>> 
>>>> I would expect that optim() does more than 3 function evaluations and
>>>> that the optimization converges to 0.
>>>> 
>>>> Same problem with optim(par=10, fn=fn, method="BFGS").
>>>> 
>>>> Any ideas?
>>> I don't have an answer but may be an insight. For some mysterious
>>> reason xx is getting changed when in should not. Consider:
>>>> fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in
>>> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx
>>> <<- x; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
>>>> optim(par=10, fn=fn, method="L-BFGS-B")
>>> 1 in x,xx,ret= 10 NA NA
>>> out x,xx,ret= 10 10 100
>>> 2 in x,xx,ret= 10.001 10 100
>>> out x,xx,ret= 10.001 10.001 100.02
>>> 3 in x,xx,ret= 9.999 9.999 100.02
>>> $par
>>> [1] 10
>>> 
>>> $value
>>> [1] 100
>>> 
>>> $counts
>>> function gradient
>>>        1        1
>>> 
>>> $convergence
>>> [1] 0
>>> 
>>> $message
>>> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
>>> 
>>> At the third call, xx has value 9.999 while it should have kept the
>>> value 10.001.
>>> 
>> A little follow-up: if you untie the link between xx and x by replacing
>> the expression "xx <<- x" by "xx <<- x+0" it works as expected:
>>  > fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in
>> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx <<-
>> x+0; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
>>  > optim(par=10, fn=fn, method="L-BFGS-B")
>> 1 in x,xx,ret= 10 NA NA
>> out x,xx,ret= 10 10 100
>> 2 in x,xx,ret= 10.001 10 100
>> out x,xx,ret= 10.001 10.001 100.02
>> 3 in x,xx,ret= 9.999 10.001 100.02
>> out x,xx,ret= 9.999 9.999 99.98
>> 4 in x,xx,ret= 9 9.999 99.98
>> out x,xx,ret= 9 9 81
>> 5 in x,xx,ret= 9.001 9 81
>> out x,xx,ret= 9.001 9.001 81.018
>> 6 in x,xx,ret= 8.999 9.001 81.018
>> out x,xx,ret= 8.999 8.999 80.982
>> 7 in x,xx,ret= 1.776357e-11 8.999 80.982
>> out x,xx,ret= 1.776357e-11 1.776357e-11 3.155444e-22
>> 8 in x,xx,ret= 0.001 1.776357e-11 3.155444e-22
>> out x,xx,ret= 0.001 0.001 1e-06
>> 9 in x,xx,ret= -0.001 0.001 1e-06
>> out x,xx,ret= -0.001 -0.001 1e-06
>> 10 in x,xx,ret= -1.334475e-23 -0.001 1e-06
>> out x,xx,ret= -1.334475e-23 -1.334475e-23 1.780823e-46
>> 11 in x,xx,ret= 0.001 -1.334475e-23 1.780823e-46
>> out x,xx,ret= 0.001 0.001 1e-06
>> 12 in x,xx,ret= -0.001 0.001 1e-06
>> out x,xx,ret= -0.001 -0.001 1e-06
>> $par
>> [1] -1.334475e-23
>> $value
>> [1] 1.780823e-46
>> $counts
>> function gradient
>>         4        4
>> $convergence
>> [1] 0
>> $message
>> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
>> Serguei.
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri May  3 14:18:44 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 3 May 2019 08:18:44 -0400
Subject: [Rd] 
 R optim(method="L-BFGS-B"): unexpected behavior when working
 with parent environments
In-Reply-To: <0574BB69-85B4-42D9-886D-F0219316ABF2@gmail.com>
References: <45fd1e7c-fffa-11b1-3a62-08d086fcbd78@gmail.com>
 <0346dccc-9d93-0d74-9c20-1825c67cd900@insa-toulouse.fr>
 <ddb7d325-67a3-ed65-11cd-014895d1a454@insa-toulouse.fr>
 <e1bcc19f-413f-b518-fb7e-ad7feddb2f88@gmail.com>
 <0574BB69-85B4-42D9-886D-F0219316ABF2@gmail.com>
Message-ID: <1a275659-4921-c36c-3248-b73f7eb8ab87@gmail.com>

It looks as though this happens when calculating numerical gradients:  x 
is reduced by eps, and fn is called; then x is increased by eps, and fn 
is called again.  No check is made that x has other references after the 
first call to fn.

I'll put together a patch if nobody else gets there first...

Duncan Murdoch

On 03/05/2019 7:13 a.m., peter dalgaard wrote:
> Yes, I think you are right. I was at first confused by the fact that after the optim() call,
> 
>> environment(fn)$xx
> [1] 10
>> environment(fn)$ret
> [1] 100.02
> 
> so not 9.999, but this could come from x being assigned the final value without calling fn.
> 
> -pd
> 
> 
>> On 3 May 2019, at 11:58 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> Your results below make it look like a bug in optim():  it is not duplicating a value when it should, so changes to x affect xx as well.
>>
>> Duncan Murdoch
>>
>> On 03/05/2019 4:41 a.m., Serguei Sokol wrote:
>>> On 03/05/2019 10:31, Serguei Sokol wrote:
>>>> On 02/05/2019 21:35, Florian Gerber wrote:
>>>>> Dear all,
>>>>>
>>>>> when using optim() for a function that uses the parent environment, I
>>>>> see the following unexpected behavior:
>>>>>
>>>>> makeFn <- function(){
>>>>>       xx <- ret <- NA
>>>>>       fn <- function(x){
>>>>>          if(!is.na(xx) && x==xx){
>>>>>              cat("x=", xx, ", ret=", ret, " (memory)", fill=TRUE, sep="")
>>>>>              return(ret)
>>>>>          }
>>>>>          xx <<- x; ret <<- sum(x^2)
>>>>>          cat("x=", xx, ", ret=", ret, " (calculate)", fill=TRUE, sep="")
>>>>>          ret
>>>>>       }
>>>>>       fn
>>>>> }
>>>>> fn <- makeFn()
>>>>> optim(par=10, fn=fn, method="L-BFGS-B")
>>>>> # x=10, ret=100 (calculate)
>>>>> # x=10.001, ret=100.02 (calculate)
>>>>> # x=9.999, ret=100.02 (memory)
>>>>> # $par
>>>>> # [1] 10
>>>>> #
>>>>> # $value
>>>>> # [1] 100
>>>>> # (...)
>>>>>
>>>>> I would expect that optim() does more than 3 function evaluations and
>>>>> that the optimization converges to 0.
>>>>>
>>>>> Same problem with optim(par=10, fn=fn, method="BFGS").
>>>>>
>>>>> Any ideas?
>>>> I don't have an answer but may be an insight. For some mysterious
>>>> reason xx is getting changed when in should not. Consider:
>>>>> fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in
>>>> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx
>>>> <<- x; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
>>>>> optim(par=10, fn=fn, method="L-BFGS-B")
>>>> 1 in x,xx,ret= 10 NA NA
>>>> out x,xx,ret= 10 10 100
>>>> 2 in x,xx,ret= 10.001 10 100
>>>> out x,xx,ret= 10.001 10.001 100.02
>>>> 3 in x,xx,ret= 9.999 9.999 100.02
>>>> $par
>>>> [1] 10
>>>>
>>>> $value
>>>> [1] 100
>>>>
>>>> $counts
>>>> function gradient
>>>>         1        1
>>>>
>>>> $convergence
>>>> [1] 0
>>>>
>>>> $message
>>>> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
>>>>
>>>> At the third call, xx has value 9.999 while it should have kept the
>>>> value 10.001.
>>>>
>>> A little follow-up: if you untie the link between xx and x by replacing
>>> the expression "xx <<- x" by "xx <<- x+0" it works as expected:
>>>   > fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in
>>> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx <<-
>>> x+0; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
>>>   > optim(par=10, fn=fn, method="L-BFGS-B")
>>> 1 in x,xx,ret= 10 NA NA
>>> out x,xx,ret= 10 10 100
>>> 2 in x,xx,ret= 10.001 10 100
>>> out x,xx,ret= 10.001 10.001 100.02
>>> 3 in x,xx,ret= 9.999 10.001 100.02
>>> out x,xx,ret= 9.999 9.999 99.98
>>> 4 in x,xx,ret= 9 9.999 99.98
>>> out x,xx,ret= 9 9 81
>>> 5 in x,xx,ret= 9.001 9 81
>>> out x,xx,ret= 9.001 9.001 81.018
>>> 6 in x,xx,ret= 8.999 9.001 81.018
>>> out x,xx,ret= 8.999 8.999 80.982
>>> 7 in x,xx,ret= 1.776357e-11 8.999 80.982
>>> out x,xx,ret= 1.776357e-11 1.776357e-11 3.155444e-22
>>> 8 in x,xx,ret= 0.001 1.776357e-11 3.155444e-22
>>> out x,xx,ret= 0.001 0.001 1e-06
>>> 9 in x,xx,ret= -0.001 0.001 1e-06
>>> out x,xx,ret= -0.001 -0.001 1e-06
>>> 10 in x,xx,ret= -1.334475e-23 -0.001 1e-06
>>> out x,xx,ret= -1.334475e-23 -1.334475e-23 1.780823e-46
>>> 11 in x,xx,ret= 0.001 -1.334475e-23 1.780823e-46
>>> out x,xx,ret= 0.001 0.001 1e-06
>>> 12 in x,xx,ret= -0.001 0.001 1e-06
>>> out x,xx,ret= -0.001 -0.001 1e-06
>>> $par
>>> [1] -1.334475e-23
>>> $value
>>> [1] 1.780823e-46
>>> $counts
>>> function gradient
>>>          4        4
>>> $convergence
>>> [1] 0
>>> $message
>>> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
>>> Serguei.
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From d@rocz|g @end|ng |rom r@pporter@net  Fri May  3 15:04:18 2019
From: d@rocz|g @end|ng |rom r@pporter@net (=?UTF-8?Q?Gergely_Dar=C3=B3czi?=)
Date: Fri, 3 May 2019 15:04:18 +0200
Subject: [Rd] mccollect with NULL in R 3.6
In-Reply-To: <2ce32c00-d99c-227e-8b2e-c06dc1e7a21d@gmail.com>
References: <CAPvvxJUCYQ_404NN=Oor0cGQveN+CzP_oS2sOsvZtgtua=SZZw@mail.gmail.com>
 <2ce32c00-d99c-227e-8b2e-c06dc1e7a21d@gmail.com>
Message-ID: <CAPvvxJUGpq1+rauVNx-WOoGsNpDBtsAHthDF=ibMiZvm2haEKQ@mail.gmail.com>

On Thu, May 2, 2019 at 7:24 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 5/1/19 12:25 AM, Gergely Dar?czi wrote:
> > Dear All,
> >
> > I'm running into issues with calling mccollect on a list containing NULL
> > using R 3.6 (this used to work in 3.5.3):
> >
> > jobs <- lapply(
> >      list(NULL, 'foobar'),
> >      function(x) mcparallel(identity(x)))
> > mccollect(jobs, wait = FALSE, timeout = 0)
> > #> Error in names(res) <- pnames[match(s, pids)] :
> > #>   'names' attribute [2] must be the same length as the vector [1]
> >
> > Note, setting a "name" for the jobs does not help, but the above works with
> > "wait=TRUE", and also if I change the order of NULL and "foobar", although
> > in that case, the second value (NULL) is ommitted.  It also works with
> > mclapply fine.
> >
> > Any ideas/suggestion on how to get mccollect work with the above example?.
>
> NULL is not a valid job identification. Perhaps mccollect() could give a
> clearer error message, but I don't see, given its documentation, what
> else than throwing an error it should do. What is the problem you were
> trying to solve?

Thank you very much for looking into this!

What was interesting to me is that it used to work before 3.6 -- I
have a script iterating over a list of data frames to train models,
but it started to fail with the 3.6 release.

The "NULL is not a valid job identification" problem doesn't seem to
stand for my production job, as each list element has a proper name,
but I think I can reproduce this with this minimal example as well:

library(parallel)
jobs <- lapply(1:2, function(x) {
    mcparallel(if (x == 1) NULL else x, name = as.character(x))
})
mccollect(jobs, wait = FALSE, timeout = 2)
#> Error in names(res) <- pnames[match(s, pids)] :
#>   'names' attribute [1] must be the same length as the vector [0]

So the jobs have proper name, but the NULL return value is causing
problems. Note, that it only causes problems when the NULL value is
the first, eg switching 1 and 2 works, also running this on 1:3 and
returning NULL on 2 etc.

Now, I'm aware that 7 months ago this was added to the docs at
https://github.com/wch/r-source/commit/f0d15be765dcf92e2349429428d49cd5b212abb4
that NULL should not be returned, so it seems to be a user error on my
end, but it seems to fail only when NULL is the first returned element
in mccollect, and working OK eg when NULL is the 2nd or other element
(although with side effects, eg missed elements).

So maybe failing with an explicit error message whenever mccollect
hits a NULL for consistency might help here instead of skipping
"delivered.result <- delivered.result + 1L" when the returned value is
not raw at https://github.com/wch/r-source/commit/f0d15be765dcf92e2349429428d49cd5b212abb4#diff-e634fbaed323aac88667e7826865b160R72
? Or even better (at least for my use case), maybe allowing to return
NULL and throwing the warning on line 108 in that case.

Thanks for considering this,
Gergely


>
> Best
> Tomas
>
> >
> > Thanks,
> > Gergely
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From p@ve| @end|ng |rom uow@edu@@u  Fri May  3 12:47:23 2019
From: p@ve| @end|ng |rom uow@edu@@u (Pavel Krivitsky)
Date: Fri, 3 May 2019 10:47:23 +0000
Subject: [Rd] Strange error messages from parallel::mcparallel family under
 3.6.0
Message-ID: <93e743cdffe03aa9c50a76d0f40b65d89b41031e.camel@uow.edu.au>

Dear All,

Since upgrading to 3.6.0, I've been getting a strange error messages
from the child process when using mcparallel/mccollect. Before filing a report in the Bugzilla, I want to figure out whether I had been doing something wrong all this time and R 3.6.0 has exposed it, or whether something else is going on.

# Background #

Ultimately, what I want to do is to be able to set a time limit for an
expression to be evaluated that would be enforced even inside compiled
code. (R.utils::withTimeout() uses base::setTimeLimit(), which can only
enforce within R code.)

# Implementation #

The approach that my implementation, statnet.common::forkTimeout()
(source attached for convenience), uses is to call mcparallel() to
evaluate the expression in a child process, then mccollect() with
wait=FALSE and a timeout to give it a chance to finish. If it runs past
the timeout, the child process is killed and an onTimeout value is
returned. (This only works on Unix-alikes, but it's better than
nothing.)

# The problem #

Since 3.6.0---and I've tested fresh installs of 3.6.0 and 3.5.3 side-
by-side---I've been getting strange messages.

Running

  source("forkTimeout.R") # attached
  repeat print(forkTimeout({Sys.sleep(1);TRUE}, timeout=3))

results in

[1] TRUE
[1] TRUE
Error in mcexit(0L) : ignoring SIGPIPE signal
[1] TRUE
[1] TRUE
Error in mcexit(0L) : ignoring SIGPIPE signal
[1] TRUE
[1] TRUE
[1] TRUE

until interrupted. Running

  options(error=traceback)
  repeat print(forkTimeout({Sys.sleep(1);TRUE}, timeout=3))

results in sporadic messages of the form:

Error in mcexit(0L) : ignoring SIGPIPE signal
6: selectChildren(jobs, timeout)
5: parallel::mccollect(child, wait = FALSE, timeout = timeout) at
forkTimeout.R#75
4: withCallingHandlers(expr, warning = function(w)
invokeRestart("muffleWarning"))
3: suppressWarnings(parallel::mccollect(child, wait = FALSE, timeout =
timeout)) at forkTimeout.R#75
2: forkTimeout({
       Sys.sleep(1)
    ...
1: print(forkTimeout({
       Sys.sleep(1)
    ...

So, these messages do not appear to prevent the child process from
returning valid output, but I've never seen them before R 3.6.0, so I
wonder if I am doing something wrong. Session info is also attached.

				Thanks in advance,
				Pavel

-- 
Pavel Krivitsky
Lecturer in Statistics
National Institute of Applied Statistics Research Australia (NIASRA)
School of Mathematics and Applied Statistics | Building 39C Room 154
University of Wollongong NSW 2522 Australia
T +61 2 4221 3713
Web (NIASRA): http://niasra.uow.edu.au/index.html
Web (Personal): http://www.krivitsky.net/research
ORCID: 0000-0002-9101-3362

NOTICE: This email is intended for the addressee named and may contain
confidential information. If you are not the intended recipient, please
delete it and notify the sender. Please consider the environment before
printing this email.

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: sessionInfo.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190503/bfe185b4/attachment.txt>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: forkTimeout.R
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190503/bfe185b4/attachment.ksh>

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri May  3 16:34:24 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 3 May 2019 16:34:24 +0200
Subject: [Rd] mccollect with NULL in R 3.6
In-Reply-To: <CAPvvxJUGpq1+rauVNx-WOoGsNpDBtsAHthDF=ibMiZvm2haEKQ@mail.gmail.com>
References: <CAPvvxJUCYQ_404NN=Oor0cGQveN+CzP_oS2sOsvZtgtua=SZZw@mail.gmail.com>
 <2ce32c00-d99c-227e-8b2e-c06dc1e7a21d@gmail.com>
 <CAPvvxJUGpq1+rauVNx-WOoGsNpDBtsAHthDF=ibMiZvm2haEKQ@mail.gmail.com>
Message-ID: <1034680a-9478-b941-6922-febe2a42485d@gmail.com>

On 5/3/19 3:04 PM, Gergely Dar?czi wrote:
> On Thu, May 2, 2019 at 7:24 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> On 5/1/19 12:25 AM, Gergely Dar?czi wrote:
>>> Dear All,
>>>
>>> I'm running into issues with calling mccollect on a list containing NULL
>>> using R 3.6 (this used to work in 3.5.3):
>>>
>>> jobs <- lapply(
>>>       list(NULL, 'foobar'),
>>>       function(x) mcparallel(identity(x)))
>>> mccollect(jobs, wait = FALSE, timeout = 0)
>>> #> Error in names(res) <- pnames[match(s, pids)] :
>>> #>   'names' attribute [2] must be the same length as the vector [1]
>>>
>>> Note, setting a "name" for the jobs does not help, but the above works with
>>> "wait=TRUE", and also if I change the order of NULL and "foobar", although
>>> in that case, the second value (NULL) is ommitted.  It also works with
>>> mclapply fine.
>>>
>>> Any ideas/suggestion on how to get mccollect work with the above example?.
>> NULL is not a valid job identification. Perhaps mccollect() could give a
>> clearer error message, but I don't see, given its documentation, what
>> else than throwing an error it should do. What is the problem you were
>> trying to solve?
> Thank you very much for looking into this!
>
> What was interesting to me is that it used to work before 3.6 -- I
> have a script iterating over a list of data frames to train models,
> but it started to fail with the 3.6 release.
>
> The "NULL is not a valid job identification" problem doesn't seem to
> stand for my production job, as each list element has a proper name,
> but I think I can reproduce this with this minimal example as well:
>
> library(parallel)
> jobs <- lapply(1:2, function(x) {
>      mcparallel(if (x == 1) NULL else x, name = as.character(x))
> })
> mccollect(jobs, wait = FALSE, timeout = 2)
> #> Error in names(res) <- pnames[match(s, pids)] :
> #>   'names' attribute [1] must be the same length as the vector [0]
>
> So the jobs have proper name, but the NULL return value is causing
> problems. Note, that it only causes problems when the NULL value is
> the first, eg switching 1 and 2 works, also running this on 1:3 and
> returning NULL on 2 etc.
Thanks for the clarification, I got confused by that you wrote about 
"calling mccollect on a list containing NULL", so I was answering a 
different question. Now I see you actually meant collecting results from 
jobs that return NULL, and even though that writing jobs that return 
NULL is incorrect, I see that there is really a bug that causes the R error.
> Now, I'm aware that 7 months ago this was added to the docs at
> https://github.com/wch/r-source/commit/f0d15be765dcf92e2349429428d49cd5b212abb4
> that NULL should not be returned, so it seems to be a user error on my
> end, but it seems to fail only when NULL is the first returned element
> in mccollect, and working OK eg when NULL is the 2nd or other element
> (although with side effects, eg missed elements).
NULL has been reserved even well before that documentation update, and 
if it somewhat worked as a result, it had been a coincidence. The 
documentation change was only to make it more obvious, but it already 
said "?mccollect? will return ?NULL? for a terminating job that has sent 
its results already after which the job is no longer available."
> So maybe failing with an explicit error message whenever mccollect
> hits a NULL for consistency might help here instead of skipping
> "delivered.result <- delivered.result + 1L" when the returned value is
> not raw at https://github.com/wch/r-source/commit/f0d15be765dcf92e2349429428d49cd5b212abb4#diff-e634fbaed323aac88667e7826865b160R72
> ? Or even better (at least for my use case), maybe allowing to return
> NULL and throwing the warning on line 108 in that case.

Thanks for the report, I've fixed mccollect() in R-devel to return NULL 
from the job. To be ported to R-pathed unless problems appear.

Best
Tomas

>
> Thanks for considering this,
> Gergely

>
>> Best
>> Tomas
>>
>>> Thanks,
>>> Gergely
>>>
>>>        [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


From tk @end|ng |rom tkoen|g@net  Fri May  3 19:25:30 2019
From: tk @end|ng |rom tkoen|g@net (=?UTF-8?Q?Thomas_K=c3=b6nig?=)
Date: Fri, 3 May 2019 19:25:30 +0200
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
 <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
Message-ID: <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>

Hi Tomas,

thanks a lot for your analysis.  I have created
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90329
for this, and put you in CC (if your e-mail address
for GCC bugzilla is still current).

Regards

	Thomas


From d@rocz|g @end|ng |rom r@pporter@net  Sat May  4 01:20:23 2019
From: d@rocz|g @end|ng |rom r@pporter@net (=?UTF-8?Q?Gergely_Dar=C3=B3czi?=)
Date: Sat, 4 May 2019 01:20:23 +0200
Subject: [Rd] mccollect with NULL in R 3.6
In-Reply-To: <1034680a-9478-b941-6922-febe2a42485d@gmail.com>
References: <CAPvvxJUCYQ_404NN=Oor0cGQveN+CzP_oS2sOsvZtgtua=SZZw@mail.gmail.com>
 <2ce32c00-d99c-227e-8b2e-c06dc1e7a21d@gmail.com>
 <CAPvvxJUGpq1+rauVNx-WOoGsNpDBtsAHthDF=ibMiZvm2haEKQ@mail.gmail.com>
 <1034680a-9478-b941-6922-febe2a42485d@gmail.com>
Message-ID: <CAPvvxJXNnfAF_UEgVGsO-uxgcYhYXGpjHm8TMTJnV_A6pOSq4w@mail.gmail.com>

On Fri, May 3, 2019 at 4:34 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 5/3/19 3:04 PM, Gergely Dar?czi wrote:
> > On Thu, May 2, 2019 at 7:24 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >> On 5/1/19 12:25 AM, Gergely Dar?czi wrote:
> >>> Dear All,
> >>>
> >>> I'm running into issues with calling mccollect on a list containing NULL
> >>> using R 3.6 (this used to work in 3.5.3):
> >>>
> >>> jobs <- lapply(
> >>>       list(NULL, 'foobar'),
> >>>       function(x) mcparallel(identity(x)))
> >>> mccollect(jobs, wait = FALSE, timeout = 0)
> >>> #> Error in names(res) <- pnames[match(s, pids)] :
> >>> #>   'names' attribute [2] must be the same length as the vector [1]
> >>>
> >>> Note, setting a "name" for the jobs does not help, but the above works with
> >>> "wait=TRUE", and also if I change the order of NULL and "foobar", although
> >>> in that case, the second value (NULL) is ommitted.  It also works with
> >>> mclapply fine.
> >>>
> >>> Any ideas/suggestion on how to get mccollect work with the above example?.
> >> NULL is not a valid job identification. Perhaps mccollect() could give a
> >> clearer error message, but I don't see, given its documentation, what
> >> else than throwing an error it should do. What is the problem you were
> >> trying to solve?
> > Thank you very much for looking into this!
> >
> > What was interesting to me is that it used to work before 3.6 -- I
> > have a script iterating over a list of data frames to train models,
> > but it started to fail with the 3.6 release.
> >
> > The "NULL is not a valid job identification" problem doesn't seem to
> > stand for my production job, as each list element has a proper name,
> > but I think I can reproduce this with this minimal example as well:
> >
> > library(parallel)
> > jobs <- lapply(1:2, function(x) {
> >      mcparallel(if (x == 1) NULL else x, name = as.character(x))
> > })
> > mccollect(jobs, wait = FALSE, timeout = 2)
> > #> Error in names(res) <- pnames[match(s, pids)] :
> > #>   'names' attribute [1] must be the same length as the vector [0]
> >
> > So the jobs have proper name, but the NULL return value is causing
> > problems. Note, that it only causes problems when the NULL value is
> > the first, eg switching 1 and 2 works, also running this on 1:3 and
> > returning NULL on 2 etc.
> Thanks for the clarification, I got confused by that you wrote about
> "calling mccollect on a list containing NULL", so I was answering a
> different question. Now I see you actually meant collecting results from
> jobs that return NULL, and even though that writing jobs that return
> NULL is incorrect, I see that there is really a bug that causes the R error.
> > Now, I'm aware that 7 months ago this was added to the docs at
> > https://github.com/wch/r-source/commit/f0d15be765dcf92e2349429428d49cd5b212abb4
> > that NULL should not be returned, so it seems to be a user error on my
> > end, but it seems to fail only when NULL is the first returned element
> > in mccollect, and working OK eg when NULL is the 2nd or other element
> > (although with side effects, eg missed elements).
> NULL has been reserved even well before that documentation update, and
> if it somewhat worked as a result, it had been a coincidence. The
> documentation change was only to make it more obvious, but it already
> said "?mccollect? will return ?NULL? for a terminating job that has sent
> its results already after which the job is no longer available."
> > So maybe failing with an explicit error message whenever mccollect
> > hits a NULL for consistency might help here instead of skipping
> > "delivered.result <- delivered.result + 1L" when the returned value is
> > not raw at https://github.com/wch/r-source/commit/f0d15be765dcf92e2349429428d49cd5b212abb4#diff-e634fbaed323aac88667e7826865b160R72
> > ? Or even better (at least for my use case), maybe allowing to return
> > NULL and throwing the warning on line 108 in that case.
>
> Thanks for the report, I've fixed mccollect() in R-devel to return NULL
> from the job. To be ported to R-pathed unless problems appear.

Thank you very much for the great news and your work!

>
> Best
> Tomas
>
> >
> > Thanks for considering this,
> > Gergely
>
> >
> >> Best
> >> Tomas
> >>
> >>> Thanks,
> >>> Gergely
> >>>
> >>>        [[alternative HTML version deleted]]
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
>


From bhh @end|ng |rom x@4@||@n|  Sat May  4 16:49:20 2019
From: bhh @end|ng |rom x@4@||@n| (Berend Hasselman)
Date: Sat, 4 May 2019 16:49:20 +0200
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
 <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
 <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>
Message-ID: <6E812A6F-91B2-4412-A536-2CD672C5F4BA@xs4all.nl>

Hi, Thomas, Tomas,

Doesn't this issue demonstrate the warning and advice given in the  last paragraph of section 6.6 
of the "Writing R Extensions" manual:

<ref>
Passing character strings from C to Fortran or vice versa is not portable (and to Fortran 90 or later is even less so). We have found that it helps to ensure that a C string to be passed is followed by several nuls (and not just the one needed as a C terminator). But for maximal portability character strings in Fortran should be avoided.
</ref>

Avoid.

Berend

> On 3 May 2019, at 19:25, Thomas K?nig <tk at tkoenig.net> wrote:
> 
> Hi Tomas,
> 
> thanks a lot for your analysis.  I have created
> https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90329
> for this, and put you in CC (if your e-mail address
> for GCC bugzilla is still current).
> 
> Regards
> 
> 	Thomas
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Sat May  4 18:05:48 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sat, 4 May 2019 18:05:48 +0200
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <6E812A6F-91B2-4412-A536-2CD672C5F4BA@xs4all.nl>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
 <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
 <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>
 <6E812A6F-91B2-4412-A536-2CD672C5F4BA@xs4all.nl>
Message-ID: <D521C66E-D67E-4C17-98EF-D651026561ED@gmail.com>

The point is that LAPACK uses characters as control arguments in multiple places and we don't write the LAPACK Fortran routines. It has long been known that general character strings was a portability issue but many (not just R people) have thought that length-one character were safe to pass as char* pointers. So "avoid" is not really an option if we want to use LAPACK functionality at all.

Workarounds/solutions include:

- disable certain optimizations -- works for now, but doesn't remove the root cause so seems generally fragile

- "onion-skin" all LAPACK routines to call via a Fortran routine that converts integer arguments to the required character -- possible, but it adds overhead and there are hundreds of routines (and it would be kind of ugly!).

- modify LAPACK itself similarly -- requires naming change of routines as per the license, and there are still hundreds of routines; avoids overhead, but creates maintenance nightmare to keep up with changes in LAPACK

- change all prototypes and calls to follow gfortran calling conventions -- still a lot of work since each char* arguments need to be supplemented by a length going at the end of the arglist. If gfortran was the only compiler around, I'd say this would be the least painful route, but still no fun since it requires changes to a lot of user code (in packages too). It is not clear if this approach works with other Fortrans.

- figure out Fortran2003 specification for C/Fortran interoperability -- this _sounds_ like the right solution, but I don't think many understand how to use it and what is implied (in particular, will it require making changes to LAPACK itself?)

- move towards the LAPACKE C interface -- but that also adds onionskin overhead and ultimately calls Fortran in essentially the same way as R does, so doesn't really solve anything at all (unless we can shift responsibility for sorting things out onto the LAPACK team, but I kind of expect that they do not want it.)

- twist the arms of the gfortran team to do something that keeps old code working. Compiler engineers understandably hate that sort of thing, but I seem to recall some precedent (pointer alignment, back in the dark ages?). 

-pd


> On 4 May 2019, at 16:49 , Berend Hasselman <bhh at xs4all.nl> wrote:
> 
> Hi, Thomas, Tomas,
> 
> Doesn't this issue demonstrate the warning and advice given in the  last paragraph of section 6.6 
> of the "Writing R Extensions" manual:
> 
> <ref>
> Passing character strings from C to Fortran or vice versa is not portable (and to Fortran 90 or later is even less so). We have found that it helps to ensure that a C string to be passed is followed by several nuls (and not just the one needed as a C terminator). But for maximal portability character strings in Fortran should be avoided.
> </ref>
> 
> Avoid.
> 
> Berend
> 
>> On 3 May 2019, at 19:25, Thomas K?nig <tk at tkoenig.net> wrote:
>> 
>> Hi Tomas,
>> 
>> thanks a lot for your analysis.  I have created
>> https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90329
>> for this, and put you in CC (if your e-mail address
>> for GCC bugzilla is still current).
>> 
>> Regards
>> 
>> 	Thomas
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tk @end|ng |rom tkoen|g@net  Sat May  4 18:42:47 2019
From: tk @end|ng |rom tkoen|g@net (=?UTF-8?Q?Thomas_K=c3=b6nig?=)
Date: Sat, 4 May 2019 18:42:47 +0200
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <D521C66E-D67E-4C17-98EF-D651026561ED@gmail.com>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
 <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
 <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>
 <6E812A6F-91B2-4412-A536-2CD672C5F4BA@xs4all.nl>
 <D521C66E-D67E-4C17-98EF-D651026561ED@gmail.com>
Message-ID: <79689a6a-077c-019a-d16a-597d7b60199d@tkoenig.net>

Hi Peter,

we (the gfortran team) are currently discussing this at
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90329 . I
invite everybody who has an interest in this topic to
take part in the discussion there.

> Workarounds/solutions include:
> 
> - disable certain optimizations -- works for now, but doesn't remove the root cause so seems generally fragile

That looks like a short-term solutuion that could work (at least for
x86_64 using the standard Unix ABI). And yes, it is fragile.

And whatever other solution people come up with, it will still be
fragile unless the caller and the callee agree.

The root cause is that the Fortran LAPACK routines are called from C
via an incompatible call signature.

> - "onion-skin" all LAPACK routines to call via a Fortran routine that converts integer arguments to the required character -- possible, but it adds overhead and there are hundreds of routines (and it would be kind of ugly!).

I agree.

> - modify LAPACK itself similarly -- requires naming change of routines as per the license, and there are still hundreds of routines; avoids overhead, but creates maintenance nightmare to keep up with changes in LAPACK

I agree that this is not a preferred option.

> - change all prototypes and calls to follow gfortran calling conventions -- still a lot of work since each char* arguments need to be supplemented by a length going at the end of the arglist. If gfortran was the only compiler around, I'd say this would be the least painful route, but still no fun since it requires changes to a lot of user code (in packages too). It is not clear if this approach works with other Fortrans.

The interesting thing is that this convention goes back to at least f2c,
which was modeled on the very first Unix compiler.

> - figure out Fortran2003 specification for C/Fortran interoperability -- this _sounds_ like the right solution, but I don't think many understand how to use it and what is implied (in particular, will it require making changes to LAPACK itself?)

That would actually be fairly easy.  If you declare the subroutines
BIND(C), as in

       subroutine foo(a,b) BIND(C,name="foo_")
       real a
       character*1 b
       end

you will get the calling signature that you already have in your C
sources.

This also has the advantage of being standards compliant, and would be
probably be the preferred method.

> - move towards the LAPACKE C interface -- but that also adds onionskin overhead and ultimately calls Fortran in essentially the same way as R does, so doesn't really solve anything at all (unless we can shift responsibility for sorting things out onto the LAPACK team, but I kind of expect that they do not want it.)

I suspect that they will hit the issue, too.

> - twist the arms of the gfortran team to do something that keeps old code working. Compiler engineers understandably hate that sort of thing, but I seem to recall some precedent (pointer alignment, back in the dark ages?).

We're willing to do reasonable things :-) but so far all of the options
we have come up with have very serious drawbacks (see the link to the
PR at the top). If you come up with a suggestion, we'd be more than
happy to look at it.

I think the best option would really be to use BIND(C).

Regards

	Thomas


From tk @end|ng |rom tkoen|g@net  Sat May  4 18:59:12 2019
From: tk @end|ng |rom tkoen|g@net (=?UTF-8?Q?Thomas_K=c3=b6nig?=)
Date: Sat, 4 May 2019 18:59:12 +0200
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <20190504164903.GB15478@troutmask.apl.washington.edu>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
 <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
 <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>
 <6E812A6F-91B2-4412-A536-2CD672C5F4BA@xs4all.nl>
 <D521C66E-D67E-4C17-98EF-D651026561ED@gmail.com>
 <79689a6a-077c-019a-d16a-597d7b60199d@tkoenig.net>
 <20190504164903.GB15478@troutmask.apl.washington.edu>
Message-ID: <1bd74386-737b-724a-f27b-73a790d1cea7@tkoenig.net>

Hi Steve,

> With the caveat that one may need to use the VALUE attribute to
> account for pass-by-value vs pass-by-reference.

LAPACK should be all pass by reference, it is old F77-style
code (except that the odd ALLOCATABLE array has snuck in
in the testing routines).


From henr|k@bengt@@on @end|ng |rom gm@||@com  Sun May  5 04:35:27 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Sat, 4 May 2019 19:35:27 -0700
Subject: [Rd] Staged installation fail on some file systems
Message-ID: <CAFDcVCTYc53f9COpNoeqbYGxWOE_CCrAbCiStDpo6YBmXG6Txg@mail.gmail.com>

I'm observing that the new staged installation in R 3.6.0 can produce:

mv: cannot move
?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-codetools/00new/codetools?
to ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?: File
exists
ERROR:   moving to final location failed

on some file systems.

# EXAMPLE

$ R --vanilla
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)
...

> install.packages("codetools", repos="https://cran.r-project.org")
Installing package into ?/wynton/home/cbi/hb/R/x86_64-pc-linux-gnu-library/3.6?
(as ?lib? is unspecified)
trying URL 'https://cran.r-project.org/src/contrib/codetools_0.2-16.tar.gz'
Content type 'application/x-gzip' length 12996 bytes (12 KB)
==================================================
downloaded 12 KB

* installing *source* package ?codetools? ...
** package ?codetools? successfully unpacked and MD5 sums checked
** using staged installation
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
mv: cannot move
?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-codetools/00new/codetools?
to ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?: File
exists
ERROR:   moving to final location failed
* removing ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?

The downloaded source packages are in
?/scratch/alice/Rtmp6UYDzu/downloaded_packages?
Warning message:
In install.packages("codetools", repos = "https://cran.r-project.org") :
installation of package ?codetools? had non-zero exit status


# WORKAROUND

Disabling staged installation, for instance by setting environment
variable 'R_INSTALL_STAGED=false' avoids this problem.


# TROUBLESHOOTING

I think it comes down to the following call in src/library/tools/R/install.R:

  status <- system(paste("mv -f",
                         shQuote(instdir),
                         shQuote(dirname(final_instdir))))

https://github.com/wch/r-source/blob/d253331f578814f919f150ffdf1fe581618079a3/src/library/tools/R/install.R#L1645-L1647

which effectively does:

$ mkdir -p path/pkg  ## empty final destination placeholder(?)
$ mkdir -p path/to/pkg
$ mv -f path/to/pkg path

However, on one (and only one) of several systems I've tested, that
'mv' produce the error:

  mv: cannot move ?path/to/pkg? to ?path/pkg?: File exists

This is on a BeeGFS parallel file system.  I cannot tell if that 'mv
-f' should work or not, or if it is even well defined.  FWIW, the
above 'mv' does indeed work if I switch to another folder that is
mounted on a different, NFS, file system, i.e. it is not kernel/OS
specific (here CentOS 7.6.1810).

If of any use, here's the 'strace' of the above 'mv':

$ strace mv -f path/to/pkg path
execve("/usr/bin/mv", ["mv", "-f", "path/to/pkg", "path"], [/* 118 vars */]) = 0
brk(NULL)                               = 0xcf3000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
0) = 0x7fde2ceb1000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/usr/lib64/openmpi/lib/tls/x86_64/libselinux.so.1",
O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat("/usr/lib64/openmpi/lib/tls/x86_64", 0x7ffc6a3fb170) = -1 ENOENT
(No such file or directory)
open("/usr/lib64/openmpi/lib/tls/libselinux.so.1", O_RDONLY|O_CLOEXEC)
= -1 ENOENT (No such file or directory)
stat("/usr/lib64/openmpi/lib/tls", 0x7ffc6a3fb170) = -1 ENOENT (No
such file or directory)
open("/usr/lib64/openmpi/lib/x86_64/libselinux.so.1",
O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat("/usr/lib64/openmpi/lib/x86_64", 0x7ffc6a3fb170) = -1 ENOENT (No
such file or directory)
open("/usr/lib64/openmpi/lib/libselinux.so.1", O_RDONLY|O_CLOEXEC) =
-1 ENOENT (No such file or directory)
stat("/usr/lib64/openmpi/lib", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=96960, ...}) = 0
mmap(NULL, 96960, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fde2ce99000
close(3)                                = 0
open("/lib64/libselinux.so.1", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320i\0\0\0\0\0\0"...,
832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=155784, ...}) = 0
mmap(NULL, 2255184, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
0) = 0x7fde2ca6a000
mprotect(0x7fde2ca8e000, 2093056, PROT_NONE) = 0
mmap(0x7fde2cc8d000, 8192, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x23000) = 0x7fde2cc8d000
mmap(0x7fde2cc8f000, 6480, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2cc8f000
close(3)                                = 0
open("/usr/lib64/openmpi/lib/libacl.so.1", O_RDONLY|O_CLOEXEC) = -1
ENOENT (No such file or directory)
open("/lib64/libacl.so.1", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\200\37\0\0\0\0\0\0"...,
832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=37056, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
0) = 0x7fde2ce98000
mmap(NULL, 2130560, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
0) = 0x7fde2c861000
mprotect(0x7fde2c868000, 2097152, PROT_NONE) = 0
mmap(0x7fde2ca68000, 8192, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x7000) = 0x7fde2ca68000
close(3)                                = 0
open("/usr/lib64/openmpi/lib/libattr.so.1", O_RDONLY|O_CLOEXEC) = -1
ENOENT (No such file or directory)
open("/lib64/libattr.so.1", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320\23\0\0\0\0\0\0"...,
832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=19896, ...}) = 0
mmap(NULL, 2113904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
0) = 0x7fde2c65c000
mprotect(0x7fde2c660000, 2093056, PROT_NONE) = 0
mmap(0x7fde2c85f000, 8192, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0x7fde2c85f000
close(3)                                = 0
open("/usr/lib64/openmpi/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = -1
ENOENT (No such file or directory)
open("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\340$\2\0\0\0\0\0"...,
832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=2151672, ...}) = 0
mmap(NULL, 3981792, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
0) = 0x7fde2c28f000
mprotect(0x7fde2c451000, 2097152, PROT_NONE) = 0
mmap(0x7fde2c651000, 24576, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1c2000) = 0x7fde2c651000
mmap(0x7fde2c657000, 16864, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2c657000
close(3)                                = 0
open("/usr/lib64/openmpi/lib/libpcre.so.1", O_RDONLY|O_CLOEXEC) = -1
ENOENT (No such file or directory)
open("/lib64/libpcre.so.1", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\360\25\0\0\0\0\0\0"...,
832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=402384, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
0) = 0x7fde2ce97000
mmap(NULL, 2494984, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
0) = 0x7fde2c02d000
mprotect(0x7fde2c08d000, 2097152, PROT_NONE) = 0
mmap(0x7fde2c28d000, 8192, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x60000) = 0x7fde2c28d000
close(3)                                = 0
open("/usr/lib64/openmpi/lib/libdl.so.2", O_RDONLY|O_CLOEXEC) = -1
ENOENT (No such file or directory)
open("/lib64/libdl.so.2", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\220\r\0\0\0\0\0\0"...,
832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=19288, ...}) = 0
mmap(NULL, 2109712, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
0) = 0x7fde2be29000
mprotect(0x7fde2be2b000, 2097152, PROT_NONE) = 0
mmap(0x7fde2c02b000, 8192, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0x7fde2c02b000
close(3)                                = 0
open("/usr/lib64/openmpi/lib/libpthread.so.0", O_RDONLY|O_CLOEXEC) =
-1 ENOENT (No such file or directory)
open("/lib64/libpthread.so.0", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\260l\0\0\0\0\0\0"...,
832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=141968, ...}) = 0
mmap(NULL, 2208904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
0) = 0x7fde2bc0d000
mprotect(0x7fde2bc24000, 2093056, PROT_NONE) = 0
mmap(0x7fde2be23000, 8192, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x16000) = 0x7fde2be23000
mmap(0x7fde2be25000, 13448, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2be25000
close(3)                                = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
0) = 0x7fde2ce96000
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
0) = 0x7fde2ce94000
arch_prctl(ARCH_SET_FS, 0x7fde2ce94840) = 0
mprotect(0x7fde2c651000, 16384, PROT_READ) = 0
mprotect(0x7fde2be23000, 4096, PROT_READ) = 0
mprotect(0x7fde2c02b000, 4096, PROT_READ) = 0
mprotect(0x7fde2c28d000, 4096, PROT_READ) = 0
mprotect(0x7fde2c85f000, 4096, PROT_READ) = 0
mprotect(0x7fde2ca68000, 4096, PROT_READ) = 0
mprotect(0x7fde2cc8d000, 4096, PROT_READ) = 0
mprotect(0x61d000, 4096, PROT_READ)     = 0
mprotect(0x7fde2ceb2000, 4096, PROT_READ) = 0
munmap(0x7fde2ce99000, 96960)           = 0
set_tid_address(0x7fde2ce94b10)         = 85521
set_robust_list(0x7fde2ce94b20, 24)     = 0
rt_sigaction(SIGRTMIN, {0x7fde2bc13790, [], SA_RESTORER|SA_SIGINFO,
0x7fde2bc1c5d0}, NULL, 8) = 0
rt_sigaction(SIGRT_1, {0x7fde2bc13820, [],
SA_RESTORER|SA_RESTART|SA_SIGINFO, 0x7fde2bc1c5d0}, NULL, 8) = 0
rt_sigprocmask(SIG_UNBLOCK, [RTMIN RT_1], NULL, 8) = 0
getrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096,
f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={0,
0}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096,
f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={0,
0}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
stat("/sys/fs/selinux", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
brk(NULL)                               = 0xcf3000
brk(0xd14000)                           = 0xd14000
access("/etc/selinux/config", F_OK)     = 0
open("/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=106075056, ...}) = 0
mmap(NULL, 106075056, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fde256e3000
close(3)                                = 0
geteuid()                               = 34002
ioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0
stat("path", {st_mode=S_IFDIR|0755, st_size=2, ...}) = 0
lstat("path/to/pkg", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
lstat("path/pkg", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
renameat2(AT_FDCWD, "path/to/pkg", AT_FDCWD, "path/pkg", 0) = -1
EEXIST (File exists)
open("/usr/share/locale/locale.alias", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=2502, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
0) = 0x7fde2ceb0000
read(3, "# Locale name alias data base.\n#"..., 4096) = 2502
read(3, "", 4096)                       = 0
close(3)                                = 0
munmap(0x7fde2ceb0000, 4096)            = 0
open("/usr/share/locale/en_US.UTF-8/LC_MESSAGES/coreutils.mo",
O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/share/locale/en_US.utf8/LC_MESSAGES/coreutils.mo",
O_RDONLY) = -1 ENOENT (No such file or directory)
open("/usr/share/locale/en_US/LC_MESSAGES/coreutils.mo", O_RDONLY) =
-1 ENOENT (No such file or directory)
open("/usr/share/locale/en.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY)
= -1 ENOENT (No such file or directory)
open("/usr/share/locale/en.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) =
-1 ENOENT (No such file or directory)
open("/usr/share/locale/en/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1
ENOENT (No such file or directory)
open("/usr/lib64/charset.alias", O_RDONLY|O_NOFOLLOW) = -1 ENOENT (No
such file or directory)
write(2, "mv: ", 4mv: )                     = 4
write(2, "cannot move \342\200\230path/to/pkg\342\200\231 to"...,
47cannot move ?path/to/pkg? to ?path/pkg?) = 47
open("/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) =
-1 ENOENT (No such file or directory)
open("/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo", O_RDONLY) =
-1 ENOENT (No such file or directory)
open("/usr/share/locale/en_US/LC_MESSAGES/libc.mo", O_RDONLY) = -1
ENOENT (No such file or directory)
open("/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1
ENOENT (No such file or directory)
open("/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1
ENOENT (No such file or directory)
open("/usr/share/locale/en/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT
(No such file or directory)
write(2, ": File exists", 13: File exists)           = 13
write(2, "\n", 1
)                       = 1
lseek(0, 0, SEEK_CUR)                   = -1 ESPIPE (Illegal seek)
close(0)                                = 0
close(1)                                = 0
close(2)                                = 0
exit_group(1)                           = ?
+++ exited with 1 +++

/Henrik


From bbo|ker @end|ng |rom gm@||@com  Sun May  5 18:18:07 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sun, 5 May 2019 12:18:07 -0400
Subject: [Rd] Staged installation fail on some file systems
In-Reply-To: <CAFDcVCTYc53f9COpNoeqbYGxWOE_CCrAbCiStDpo6YBmXG6Txg@mail.gmail.com>
References: <CAFDcVCTYc53f9COpNoeqbYGxWOE_CCrAbCiStDpo6YBmXG6Txg@mail.gmail.com>
Message-ID: <8862a020-1378-4ba4-885b-0dd34f1e95d7@gmail.com>


  This happens to me, too, on an Ubuntu virtual machine (with a "vboxsf"
file system, over an underlying MacOS (HFS) file system), but only when
installing as part of R CMD check ... I did find the workaround, so I
don't think I reported it before.

On 2019-05-04 10:35 p.m., Henrik Bengtsson wrote:
> I'm observing that the new staged installation in R 3.6.0 can produce:
> 
> mv: cannot move
> ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-codetools/00new/codetools?
> to ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?: File
> exists
> ERROR:   moving to final location failed
> 
> on some file systems.
> 
> # EXAMPLE
> 
> $ R --vanilla
> R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
> Copyright (C) 2019 The R Foundation for Statistical Computing
> Platform: x86_64-pc-linux-gnu (64-bit)
> ...
> 
>> install.packages("codetools", repos="https://cran.r-project.org")
> Installing package into ?/wynton/home/cbi/hb/R/x86_64-pc-linux-gnu-library/3.6?
> (as ?lib? is unspecified)
> trying URL 'https://cran.r-project.org/src/contrib/codetools_0.2-16.tar.gz'
> Content type 'application/x-gzip' length 12996 bytes (12 KB)
> ==================================================
> downloaded 12 KB
> 
> * installing *source* package ?codetools? ...
> ** package ?codetools? successfully unpacked and MD5 sums checked
> ** using staged installation
> ** R
> ** byte-compile and prepare package for lazy loading
> ** help
> *** installing help indices
> ** building package indices
> ** testing if installed package can be loaded from temporary location
> mv: cannot move
> ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-codetools/00new/codetools?
> to ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?: File
> exists
> ERROR:   moving to final location failed
> * removing ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?
> 
> The downloaded source packages are in
> ?/scratch/alice/Rtmp6UYDzu/downloaded_packages?
> Warning message:
> In install.packages("codetools", repos = "https://cran.r-project.org") :
> installation of package ?codetools? had non-zero exit status
> 
> 
> # WORKAROUND
> 
> Disabling staged installation, for instance by setting environment
> variable 'R_INSTALL_STAGED=false' avoids this problem.
> 
> 
> # TROUBLESHOOTING
> 
> I think it comes down to the following call in src/library/tools/R/install.R:
> 
>   status <- system(paste("mv -f",
>                          shQuote(instdir),
>                          shQuote(dirname(final_instdir))))
> 
> https://github.com/wch/r-source/blob/d253331f578814f919f150ffdf1fe581618079a3/src/library/tools/R/install.R#L1645-L1647
> 
> which effectively does:
> 
> $ mkdir -p path/pkg  ## empty final destination placeholder(?)
> $ mkdir -p path/to/pkg
> $ mv -f path/to/pkg path
> 
> However, on one (and only one) of several systems I've tested, that
> 'mv' produce the error:
> 
>   mv: cannot move ?path/to/pkg? to ?path/pkg?: File exists
> 
> This is on a BeeGFS parallel file system.  I cannot tell if that 'mv
> -f' should work or not, or if it is even well defined.  FWIW, the
> above 'mv' does indeed work if I switch to another folder that is
> mounted on a different, NFS, file system, i.e. it is not kernel/OS
> specific (here CentOS 7.6.1810).
> 
> If of any use, here's the 'strace' of the above 'mv':
> 
> $ strace mv -f path/to/pkg path
> execve("/usr/bin/mv", ["mv", "-f", "path/to/pkg", "path"], [/* 118 vars */]) = 0
> brk(NULL)                               = 0xcf3000
> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> 0) = 0x7fde2ceb1000
> access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
> open("/usr/lib64/openmpi/lib/tls/x86_64/libselinux.so.1",
> O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
> stat("/usr/lib64/openmpi/lib/tls/x86_64", 0x7ffc6a3fb170) = -1 ENOENT
> (No such file or directory)
> open("/usr/lib64/openmpi/lib/tls/libselinux.so.1", O_RDONLY|O_CLOEXEC)
> = -1 ENOENT (No such file or directory)
> stat("/usr/lib64/openmpi/lib/tls", 0x7ffc6a3fb170) = -1 ENOENT (No
> such file or directory)
> open("/usr/lib64/openmpi/lib/x86_64/libselinux.so.1",
> O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
> stat("/usr/lib64/openmpi/lib/x86_64", 0x7ffc6a3fb170) = -1 ENOENT (No
> such file or directory)
> open("/usr/lib64/openmpi/lib/libselinux.so.1", O_RDONLY|O_CLOEXEC) =
> -1 ENOENT (No such file or directory)
> stat("/usr/lib64/openmpi/lib", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
> open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
> fstat(3, {st_mode=S_IFREG|0644, st_size=96960, ...}) = 0
> mmap(NULL, 96960, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fde2ce99000
> close(3)                                = 0
> open("/lib64/libselinux.so.1", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320i\0\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=155784, ...}) = 0
> mmap(NULL, 2255184, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2ca6a000
> mprotect(0x7fde2ca8e000, 2093056, PROT_NONE) = 0
> mmap(0x7fde2cc8d000, 8192, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x23000) = 0x7fde2cc8d000
> mmap(0x7fde2cc8f000, 6480, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2cc8f000
> close(3)                                = 0
> open("/usr/lib64/openmpi/lib/libacl.so.1", O_RDONLY|O_CLOEXEC) = -1
> ENOENT (No such file or directory)
> open("/lib64/libacl.so.1", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\200\37\0\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=37056, ...}) = 0
> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> 0) = 0x7fde2ce98000
> mmap(NULL, 2130560, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2c861000
> mprotect(0x7fde2c868000, 2097152, PROT_NONE) = 0
> mmap(0x7fde2ca68000, 8192, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x7000) = 0x7fde2ca68000
> close(3)                                = 0
> open("/usr/lib64/openmpi/lib/libattr.so.1", O_RDONLY|O_CLOEXEC) = -1
> ENOENT (No such file or directory)
> open("/lib64/libattr.so.1", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320\23\0\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=19896, ...}) = 0
> mmap(NULL, 2113904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2c65c000
> mprotect(0x7fde2c660000, 2093056, PROT_NONE) = 0
> mmap(0x7fde2c85f000, 8192, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0x7fde2c85f000
> close(3)                                = 0
> open("/usr/lib64/openmpi/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = -1
> ENOENT (No such file or directory)
> open("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\340$\2\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=2151672, ...}) = 0
> mmap(NULL, 3981792, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2c28f000
> mprotect(0x7fde2c451000, 2097152, PROT_NONE) = 0
> mmap(0x7fde2c651000, 24576, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1c2000) = 0x7fde2c651000
> mmap(0x7fde2c657000, 16864, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2c657000
> close(3)                                = 0
> open("/usr/lib64/openmpi/lib/libpcre.so.1", O_RDONLY|O_CLOEXEC) = -1
> ENOENT (No such file or directory)
> open("/lib64/libpcre.so.1", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\360\25\0\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=402384, ...}) = 0
> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> 0) = 0x7fde2ce97000
> mmap(NULL, 2494984, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2c02d000
> mprotect(0x7fde2c08d000, 2097152, PROT_NONE) = 0
> mmap(0x7fde2c28d000, 8192, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x60000) = 0x7fde2c28d000
> close(3)                                = 0
> open("/usr/lib64/openmpi/lib/libdl.so.2", O_RDONLY|O_CLOEXEC) = -1
> ENOENT (No such file or directory)
> open("/lib64/libdl.so.2", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\220\r\0\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=19288, ...}) = 0
> mmap(NULL, 2109712, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2be29000
> mprotect(0x7fde2be2b000, 2097152, PROT_NONE) = 0
> mmap(0x7fde2c02b000, 8192, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0x7fde2c02b000
> close(3)                                = 0
> open("/usr/lib64/openmpi/lib/libpthread.so.0", O_RDONLY|O_CLOEXEC) =
> -1 ENOENT (No such file or directory)
> open("/lib64/libpthread.so.0", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\260l\0\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=141968, ...}) = 0
> mmap(NULL, 2208904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2bc0d000
> mprotect(0x7fde2bc24000, 2093056, PROT_NONE) = 0
> mmap(0x7fde2be23000, 8192, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x16000) = 0x7fde2be23000
> mmap(0x7fde2be25000, 13448, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2be25000
> close(3)                                = 0
> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> 0) = 0x7fde2ce96000
> mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> 0) = 0x7fde2ce94000
> arch_prctl(ARCH_SET_FS, 0x7fde2ce94840) = 0
> mprotect(0x7fde2c651000, 16384, PROT_READ) = 0
> mprotect(0x7fde2be23000, 4096, PROT_READ) = 0
> mprotect(0x7fde2c02b000, 4096, PROT_READ) = 0
> mprotect(0x7fde2c28d000, 4096, PROT_READ) = 0
> mprotect(0x7fde2c85f000, 4096, PROT_READ) = 0
> mprotect(0x7fde2ca68000, 4096, PROT_READ) = 0
> mprotect(0x7fde2cc8d000, 4096, PROT_READ) = 0
> mprotect(0x61d000, 4096, PROT_READ)     = 0
> mprotect(0x7fde2ceb2000, 4096, PROT_READ) = 0
> munmap(0x7fde2ce99000, 96960)           = 0
> set_tid_address(0x7fde2ce94b10)         = 85521
> set_robust_list(0x7fde2ce94b20, 24)     = 0
> rt_sigaction(SIGRTMIN, {0x7fde2bc13790, [], SA_RESTORER|SA_SIGINFO,
> 0x7fde2bc1c5d0}, NULL, 8) = 0
> rt_sigaction(SIGRT_1, {0x7fde2bc13820, [],
> SA_RESTORER|SA_RESTART|SA_SIGINFO, 0x7fde2bc1c5d0}, NULL, 8) = 0
> rt_sigprocmask(SIG_UNBLOCK, [RTMIN RT_1], NULL, 8) = 0
> getrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
> statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096,
> f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={0,
> 0}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
> statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096,
> f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={0,
> 0}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
> stat("/sys/fs/selinux", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
> brk(NULL)                               = 0xcf3000
> brk(0xd14000)                           = 0xd14000
> access("/etc/selinux/config", F_OK)     = 0
> open("/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3
> fstat(3, {st_mode=S_IFREG|0644, st_size=106075056, ...}) = 0
> mmap(NULL, 106075056, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fde256e3000
> close(3)                                = 0
> geteuid()                               = 34002
> ioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0
> stat("path", {st_mode=S_IFDIR|0755, st_size=2, ...}) = 0
> lstat("path/to/pkg", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
> lstat("path/pkg", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
> renameat2(AT_FDCWD, "path/to/pkg", AT_FDCWD, "path/pkg", 0) = -1
> EEXIST (File exists)
> open("/usr/share/locale/locale.alias", O_RDONLY|O_CLOEXEC) = 3
> fstat(3, {st_mode=S_IFREG|0644, st_size=2502, ...}) = 0
> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> 0) = 0x7fde2ceb0000
> read(3, "# Locale name alias data base.\n#"..., 4096) = 2502
> read(3, "", 4096)                       = 0
> close(3)                                = 0
> munmap(0x7fde2ceb0000, 4096)            = 0
> open("/usr/share/locale/en_US.UTF-8/LC_MESSAGES/coreutils.mo",
> O_RDONLY) = -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en_US.utf8/LC_MESSAGES/coreutils.mo",
> O_RDONLY) = -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en_US/LC_MESSAGES/coreutils.mo", O_RDONLY) =
> -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY)
> = -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) =
> -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1
> ENOENT (No such file or directory)
> open("/usr/lib64/charset.alias", O_RDONLY|O_NOFOLLOW) = -1 ENOENT (No
> such file or directory)
> write(2, "mv: ", 4mv: )                     = 4
> write(2, "cannot move \342\200\230path/to/pkg\342\200\231 to"...,
> 47cannot move ?path/to/pkg? to ?path/pkg?) = 47
> open("/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) =
> -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo", O_RDONLY) =
> -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en_US/LC_MESSAGES/libc.mo", O_RDONLY) = -1
> ENOENT (No such file or directory)
> open("/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1
> ENOENT (No such file or directory)
> open("/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1
> ENOENT (No such file or directory)
> open("/usr/share/locale/en/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT
> (No such file or directory)
> write(2, ": File exists", 13: File exists)           = 13
> write(2, "\n", 1
> )                       = 1
> lseek(0, 0, SEEK_CUR)                   = -1 ESPIPE (Illegal seek)
> close(0)                                = 0
> close(1)                                = 0
> close(2)                                = 0
> exit_group(1)                           = ?
> +++ exited with 1 +++
> 
> /Henrik
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @gk @end|ng |rom troutm@@k@@p|@w@@h|ngton@edu  Sat May  4 18:43:57 2019
From: @gk @end|ng |rom troutm@@k@@p|@w@@h|ngton@edu (Steve Kargl)
Date: Sat, 4 May 2019 09:43:57 -0700
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <D521C66E-D67E-4C17-98EF-D651026561ED@gmail.com>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
 <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
 <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>
 <6E812A6F-91B2-4412-A536-2CD672C5F4BA@xs4all.nl>
 <D521C66E-D67E-4C17-98EF-D651026561ED@gmail.com>
Message-ID: <20190504164357.GA15478@troutmask.apl.washington.edu>

On Sat, May 04, 2019 at 06:05:48PM +0200, peter dalgaard wrote:
> 
> - figure out Fortran2003 specification for C/Fortran interoperability
> -- this _sounds_ like the right solution, but I don't think many
> understand how to use it and what is implied (in particular, will it
> require making changes to LAPACK itself?)

This is probably the best solution as it should allow portability
to any Fortran processor that supports F2003 or newer standard.
See the gtk-fortran project.  It has a python program that was
used to generate the needed ISO C interfaces.

-- 
Steve


From @gk @end|ng |rom troutm@@k@@p|@w@@h|ngton@edu  Sat May  4 18:49:03 2019
From: @gk @end|ng |rom troutm@@k@@p|@w@@h|ngton@edu (Steve Kargl)
Date: Sat, 4 May 2019 09:49:03 -0700
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <79689a6a-077c-019a-d16a-597d7b60199d@tkoenig.net>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
 <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
 <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>
 <6E812A6F-91B2-4412-A536-2CD672C5F4BA@xs4all.nl>
 <D521C66E-D67E-4C17-98EF-D651026561ED@gmail.com>
 <79689a6a-077c-019a-d16a-597d7b60199d@tkoenig.net>
Message-ID: <20190504164903.GB15478@troutmask.apl.washington.edu>

On Sat, May 04, 2019 at 06:42:47PM +0200, Thomas K?nig wrote:
> 
> > - figure out Fortran2003 specification for C/Fortran interoperability
> > -- this _sounds_ like the right solution, but I don't think many
> > understand how to use it and what is implied (in particular, will
> > it require making changes to LAPACK itself?)
> 
> That would actually be fairly easy.  If you declare the subroutines
> BIND(C), as in
> 
>        subroutine foo(a,b) BIND(C,name="foo_")
>        real a
>        character*1 b
>        end
> 
> you will get the calling signature that you already have in your C
> sources.
> 
> This also has the advantage of being standards compliant, and would be
> probably be the preferred method.
> 

With the caveat that one may need to use the VALUE attribute to
account for pass-by-value vs pass-by-reference.

-- 
Steve


From @tephen@berm@n @end|ng |rom gmx@net  Sat May  4 19:04:05 2019
From: @tephen@berm@n @end|ng |rom gmx@net (Stephen Berman)
Date: Sat, 04 May 2019 19:04:05 +0200
Subject: [Rd] read.table() fails with https in R 3.6 but not in R 3.5
Message-ID: <871s1e883e.fsf@gmx.net>

In versions of R prior to 3.6.0 the following invocation succeeds,
returning the data frame shown:

> read.table("https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text", header=TRUE)
   Dekade   Anzahl
1    1900 11467254
2    1910 13023370
3    1920 13434601
4    1930 13296355
5    1940 12121250
6    1950 13191131
7    1960 10587420
8    1970 10944129
9    1980 11279439
10   1990 12052652

But in version 3.6.0 it fails:

> read.table("https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text", header=TRUE)
Error in file(file, "rt") :
  cannot open the connection to 'https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text'
In addition: Warning message:
In file(file, "rt") :
  cannot open URL 'https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text': HTTP status was '403 Forbidden'

The table at this URL is generated by a query processor and the same
failure happens in 3.6.0 with other queries at this website.  This
website does not appear to serve data via http: replacing https by http
in the above gives the same results, and in 3.6.0 the error message
contains the URL with http but in the warning message the URL is with
https.  I have also tried a few other websites that serve
(non-generated) tabular data via https
(e.g. https://graphchallenge.s3.amazonaws.com/synthetic/gc3/Theory-16-25-81-Bk.tsv)
and with these read.table() succeeds in 3.6.0, so the problem isn't
https in general.  Maybe it has to do with the page being generated
rather than static?  There's only one reference to https in the 3.6.0
NEWS, concerning libcurl; I can't tell if it's relevant.

In case it matters, this is with R packaged for openSUSE, and I've found
the above difference between 3.5 and 3.6 on both openSUSE Leap 15.0 and
openSUSE Tumbleweed.

Steve Berman


From ||o@@ @end|ng |rom @pj@nke@net  Sun May  5 15:30:49 2019
From: ||o@@ @end|ng |rom @pj@nke@net (Andrew Janke)
Date: Sun, 5 May 2019 09:30:49 -0400
Subject: [Rd] Incorrect date range in austres example dataset?
Message-ID: <0df463b1-a9fd-3fb0-1a2c-f38c8537305f@apjanke.net>

Hi, R developers,

It seems there might be an issue with the "austres" example dataset in
the "datasets" package. The description in austres.Rd says it's
"measured quarterly from March 1971 to March 1994". But there are only
89 observations in the data as defined in the source code. By my count,
that only brings you up to about March 1993. Is there an issue with the
data transcription, or the Description?

I'm looking at the source code from the R 3.6.0 source distribution.

Cheers,
Andrew Janke


From ||o@@ @end|ng |rom @pj@nke@net  Sun May  5 16:47:57 2019
From: ||o@@ @end|ng |rom @pj@nke@net (Andrew Janke)
Date: Sun, 5 May 2019 10:47:57 -0400
Subject: [Rd] Porting R example datasets to GNU Octave
Message-ID: <4fc61d6f-5029-c7b3-2421-5273810b39a0@apjanke.net>

Hi, R Developers,

I'm interested in porting the R example datasets package to GNU Octave
and Matlab. Would you have objections to my doing so?

This would involve transforming the example data and metadata into a
format that Octave understands, and porting all of the datasets' Example
code pieces to Octave M-code. (This would require no work on your part;
it'd be my project.)

I think this would be a benefit to the scientific programming community.
In addition to helping Octave users, having code for identical example
data sets in both languages would serve as a Rosetta Stone for not only
users moving from R to Octave, but for users coming from Octave or
Matlab to R.

Since R's datasets package is GPL, I think I'd be within my rights to
just do this. But I wanted to ask first, to make sure I didn't ruffle
any feathers. I would include documentation indicating that R is the
original source (well, intermediate source) for these datasets, and have
links pointing back to R's documentation.

Cheers,
Andrew Janke


From groemp|ng @end|ng |rom beuth-hoch@chu|e@de  Mon May  6 10:09:05 2019
From: groemp|ng @end|ng |rom beuth-hoch@chu|e@de (=?UTF-8?Q?Ulrike_Gr=c3=b6mping?=)
Date: Mon, 6 May 2019 10:09:05 +0200
Subject: [Rd] Bug in function boxplot's axis labeling
Message-ID: <8689a18f-486b-41d3-22b0-6f82839186d7@beuth-hochschule.de>

Dear developeRs,

I appreciate that boxplot now labels the axes with variable names per 
default. However, with argument "horizontal=TRUE" (which I always use), 
the default axis labels are mixed up, as can e.g. be seen with

require(boot)
boxplot(time ~ poison, poisons, horizontal=TRUE)

The correct labels would be obtained by

boxplot(time ~ poison, poisons, horizontal=TRUE, xlab="time", ylab="poison")

Best, Ulrike

-- 
##############################################
## Prof. Ulrike Groemping
## FB II
## Beuth University of Applied Sciences Berlin
##############################################
## prof.beuth-hochschule.de/groemping
## Phone: +49(0)30 4504 5127
## Fax:   +49(0)30 4504 66 5127
## Home office: +49(0)30 394 04 863
##############################################


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon May  6 10:55:29 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 6 May 2019 10:55:29 +0200
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <20190504164903.GB15478@troutmask.apl.washington.edu>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
 <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
 <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>
 <6E812A6F-91B2-4412-A536-2CD672C5F4BA@xs4all.nl>
 <D521C66E-D67E-4C17-98EF-D651026561ED@gmail.com>
 <79689a6a-077c-019a-d16a-597d7b60199d@tkoenig.net>
 <20190504164903.GB15478@troutmask.apl.washington.edu>
Message-ID: <22803beb-5aeb-1c8b-4984-9fae0fd2759b@gmail.com>

On 5/4/19 6:49 PM, Steve Kargl wrote:
> On Sat, May 04, 2019 at 06:42:47PM +0200, Thomas K?nig wrote:
>>> - figure out Fortran2003 specification for C/Fortran interoperability
>>> -- this _sounds_ like the right solution, but I don't think many
>>> understand how to use it and what is implied (in particular, will
>>> it require making changes to LAPACK itself?)
>> That would actually be fairly easy.  If you declare the subroutines
>> BIND(C), as in
>>
>>         subroutine foo(a,b) BIND(C,name="foo_")
>>         real a
>>         character*1 b
>>         end
>>
>> you will get the calling signature that you already have in your C
>> sources.
>>
>> This also has the advantage of being standards compliant, and would be
>> probably be the preferred method.
>>
> With the caveat that one may need to use the VALUE attribute to
> account for pass-by-value vs pass-by-reference.

This seems clean solution, but as I said before not easy, because 
currently the tradition is to call the Fortran interface directly from C 
(not via any C wrappers). This means one could not substitute 
LAPACK/BLAS at dynamic linking time, unless all LAPACK/BLAS 
implementations agreed on such a C interface. Now the substitution is 
based on the original Fortran interface.

In case of R, if we only used the included reference BLAS/LAPACK, we 
could do this, define our wrappers, say "c_dgemm" for "dgemm", change R 
to call via that interface, ask maintainers of all packages to change 
their code to call via their interface, and this should work with all 
Fortran 2003 compilers.

But, R is often used also with optimized BLAS/LAPACK implementations 
that can be substituted at dynamic linking time. And there we could do 
nothing at R level to help: we cannot generate such wrappers for an 
existing LAPACK/BLAS implementation (we don't have the source code, the 
compiler, etc).

It would be certainly a good thing if BLAS/LAPACK, with all 
implementation and uses, switched to a way that is compliant with 
current Fortran standard. But this should best start with the reference 
BLAS/LAPACK, continue with other BLAS/LAPACK implementations, and then 
with systems using those libraries, including R and its packages. 
Unless/before this happens, it would really be great if we could still 
use gfortran to build and use this fundamental software library.

Best
Tomas


From r@||@@tubner @end|ng |rom d@q@n@@com  Mon May  6 11:12:25 2019
From: r@||@@tubner @end|ng |rom d@q@n@@com (Ralf Stubner)
Date: Mon, 6 May 2019 11:12:25 +0200
Subject: [Rd] read.table() fails with https in R 3.6 but not in R 3.5
In-Reply-To: <871s1e883e.fsf@gmx.net>
References: <871s1e883e.fsf@gmx.net>
Message-ID: <e3d8b66d-cf80-b55e-dedc-067b9db57456@daqana.com>

On 04.05.19 19:04, Stephen Berman wrote:
> In versions of R prior to 3.6.0 the following invocation succeeds,
> returning the data frame shown:
> 
>> read.table("https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text", header=TRUE)
>    Dekade   Anzahl
> 1    1900 11467254
> 2    1910 13023370
> 3    1920 13434601
> 4    1930 13296355
> 5    1940 12121250
> 6    1950 13191131
> 7    1960 10587420
> 8    1970 10944129
> 9    1980 11279439
> 10   1990 12052652
> 
> But in version 3.6.0 it fails:
> 
>> read.table("https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text", header=TRUE)
> Error in file(file, "rt") :
>   cannot open the connection to 'https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text'
> In addition: Warning message:
> In file(file, "rt") :
>   cannot open URL 'https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text': HTTP status was '403 Forbidden'

I can reproduce the behavior on Debian using the CRAN supplied package
for R 3.6.0. Trying to read the page with 'curl' produces also a 403
error plus some HTML text (in German) explaining that I am treated as a
'robot' due to the supplied User-Agent (here: curl/7.52.1). One
suggested solution is to adjust that value which does solve the issue:

 > options(HTTPUserAgent='mozilla')
>
read.table("https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text",
header=TRUE)
   Dekade   Anzahl
1    1900 11467254
2    1910 13023370
3    1920 13434601
4    1930 13296355
5    1940 12121250
6    1950 13191131
7    1960 10587420
8    1970 10944129
9    1980 11279439
10   1990 12052652

Other solutions are to simulate a login or to get in touch with DWDS
directly.

Greetings
Ralf

-- 
Ralf Stubner
Senior Software Engineer / Trainer

daqana GmbH
Dortustra?e 48
14467 Potsdam

T: +49 331 23 61 93 11
F: +49 331 23 61 93 90
M: +49 162 20 91 196
Mail: ralf.stubner at daqana.com

Sitz: Potsdam
Register: AG Potsdam HRB 27966
Ust.-IdNr.: DE300072622
Gesch?ftsf?hrer: Dr.-Ing. Stefan Knirsch, Prof. Dr. Dr. Karl-Kuno Kunze


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190506/534b1d42/attachment.sig>

From edd @end|ng |rom deb|@n@org  Mon May  6 13:47:34 2019
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 6 May 2019 06:47:34 -0500
Subject: [Rd] Porting R example datasets to GNU Octave
In-Reply-To: <4fc61d6f-5029-c7b3-2421-5273810b39a0@apjanke.net>
References: <4fc61d6f-5029-c7b3-2421-5273810b39a0@apjanke.net>
Message-ID: <23760.7894.613652.993754@rob.eddelbuettel.com>


On 5 May 2019 at 10:47, Andrew Janke wrote:
| I'm interested in porting the R example datasets package to GNU Octave
| and Matlab. Would you have objections to my doing so?

You don't even have to ask...

[...]

| Since R's datasets package is GPL, I think I'd be within my rights to
| just do this. But I wanted to ask first, to make sure I didn't ruffle
| any feathers. I would include documentation indicating that R is the
| original source (well, intermediate source) for these datasets, and have
| links pointing back to R's documentation.

That is the right way to do that. Respect both copyright (citing and
referencing source) and licensing (by picking a license compatible with GPL 2
or later; many of us just prefer to stick to GPL which Octave uses too).

Dirk, in no way speaking for R Core but just handing out his $0.02

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon May  6 14:33:01 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 6 May 2019 14:33:01 +0200
Subject: [Rd] Error in glm(..., family=quasi(..., variance=list(...)))
In-Reply-To: <47c66dfd998b4759a8ae54cc65b32427@uni-mainz.de>
References: <47c66dfd998b4759a8ae54cc65b32427@uni-mainz.de>
Message-ID: <23760.10621.408991.60400@stat.math.ethz.ch>

>>>>> Wollschlaeger, Daniel 
>>>>>     on Fri, 26 Apr 2019 15:13:36 +0000 writes:

    > In a glm() call using a quasi() family, one may define a custom variance function in the form of a "list containing components varfun, validmu, dev.resids, initialize and name" (quoting the help page for family). In trying to do so, I run into the following issue that I have not seen discussed previously:

    > x  <- runif(1000, min=0, max=1)
    > y  <- x + rnorm(1000, mean=0, sd=1)*x^(3/4)
    > vf <- function(mu) { abs(mu)^(3/4) }
    > vm <- function(mu) { rep(TRUE, length(mu)) }
    > dr <- function(y, mu, wt) { (y-mu)^2 }
    > it <- expression({ n <- rep.int(1, nobs); mustart <- y })
    > glm(y ~ x, family=quasi(link="identity", variance=list(varfun=vf, validmu=vm, dev.resids=dr, initialize=it, name="custom")))

    > This gives "Error in switch(vtemp, constant = { : EXPR must be a length 1 vector"
 > from line 576 in file family.R
 > (https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/stats/R/family.R#L576).
 > I believe this is due to line 573 "vtemp <- substitute(variance)" and 574 "if (!is.character(vtemp)) vtemp <- deparse(vtemp)" where vtemp becomes a length 2 character vector because, by default, deparse() breaks lines at width.cutoff = 60L characters. In stepping through quasi() during debug, setting vtemp <- (vtemp, collapse=" ") on line 576 avoids the error.

but really in this case, neither substitute() nor deparse()
should be called !

    > A workaround from https://tolstoy.newcastle.edu.au/R/help/05/06/6795.html appears to be to define one's own complete quasi2() function with the desired variance function pre-stored.

    > Is this known/expected, or should I file a bug?

and you *have* filed a bug report.  Thank you!
--> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17560

Note that the above R-help "workaround" goes back to 2005, and I
find it amazing this has never been taken up.

I've committed fix to this bug avoiding the misleading
substitute() and deparse() altogether in this case.

The plan is to port the bug fix also to "R 3.6.0 patched" so the
problem would be solved in the next released version of R.


    > Many thanks and best regards
    > Daniel

    >> sessionInfo()
    > R version 3.6.0 (2019-04-26)
    ..........

Thank you again!
Martin


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon May  6 14:57:37 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 6 May 2019 14:57:37 +0200
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <CAO9iq9GkPKrRTv5UUATggxLCZmk6oLvqrTqPCC9ZK=0KRiaEkg@mail.gmail.com>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
 <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
 <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>
 <6E812A6F-91B2-4412-A536-2CD672C5F4BA@xs4all.nl>
 <D521C66E-D67E-4C17-98EF-D651026561ED@gmail.com>
 <79689a6a-077c-019a-d16a-597d7b60199d@tkoenig.net>
 <20190504164903.GB15478@troutmask.apl.washington.edu>
 <22803beb-5aeb-1c8b-4984-9fae0fd2759b@gmail.com>
 <CAO9iq9GkPKrRTv5UUATggxLCZmk6oLvqrTqPCC9ZK=0KRiaEkg@mail.gmail.com>
Message-ID: <845c8b00-de73-2c02-4238-929b4b0f87db@gmail.com>

On 5/6/19 12:57 PM, Janne Blomqvist wrote:
> On Mon, May 6, 2019 at 11:55 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> On 5/4/19 6:49 PM, Steve Kargl wrote:
>>> On Sat, May 04, 2019 at 06:42:47PM +0200, Thomas K?nig wrote:
>>>>> - figure out Fortran2003 specification for C/Fortran interoperability
>>>>> -- this _sounds_ like the right solution, but I don't think many
>>>>> understand how to use it and what is implied (in particular, will
>>>>> it require making changes to LAPACK itself?)
>>>> That would actually be fairly easy.  If you declare the subroutines
>>>> BIND(C), as in
>>>>
>>>>          subroutine foo(a,b) BIND(C,name="foo_")
>>>>          real a
>>>>          character*1 b
>>>>          end
>>>>
>>>> you will get the calling signature that you already have in your C
>>>> sources.
>>>>
>>>> This also has the advantage of being standards compliant, and would be
>>>> probably be the preferred method.
>>>>
>>> With the caveat that one may need to use the VALUE attribute to
>>> account for pass-by-value vs pass-by-reference.
>> This seems clean solution, but as I said before not easy, because
>> currently the tradition is to call the Fortran interface directly from C
>> (not via any C wrappers). This means one could not substitute
>> LAPACK/BLAS at dynamic linking time, unless all LAPACK/BLAS
>> implementations agreed on such a C interface. Now the substitution is
>> based on the original Fortran interface.
>>
>> In case of R, if we only used the included reference BLAS/LAPACK, we
>> could do this, define our wrappers, say "c_dgemm" for "dgemm", change R
>> to call via that interface, ask maintainers of all packages to change
>> their code to call via their interface, and this should work with all
>> Fortran 2003 compilers.
>>
>> But, R is often used also with optimized BLAS/LAPACK implementations
>> that can be substituted at dynamic linking time. And there we could do
>> nothing at R level to help: we cannot generate such wrappers for an
>> existing LAPACK/BLAS implementation (we don't have the source code, the
>> compiler, etc).
>>
>> It would be certainly a good thing if BLAS/LAPACK, with all
>> implementation and uses, switched to a way that is compliant with
>> current Fortran standard. But this should best start with the reference
>> BLAS/LAPACK, continue with other BLAS/LAPACK implementations, and then
>> with systems using those libraries, including R and its packages.
>> Unless/before this happens, it would really be great if we could still
>> use gfortran to build and use this fundamental software library.
> Hi,
>
> I don't think modifying your own builtin LAPACK makes sense, as you
> mention that would make R incompatible with another LAPACK provided by
> the system. And modifying LAPACK upstream by adding BIND(C) wouldn't
> work either, as that would break all the existing Fortran code calling
> LAPACK (as LAPACK is F77-style implicit interfaces, the Fortran caller
> has no knowledge of the interface and thus it must match the compiler
> default Fortran ABI).
I meant creating another layer of functions using BIND(C), which will 
have different names (e.g. c_dgemm), and call into the original Fortran 
functions (e.g. dgemm). Fortran programs could still call into the 
original Fortran functions. Something like c_dgemm in Chapter 10.2 of 
"Numerical Computing with Modern Fortran" by Richard J. Hanson and Tim 
Hopkins, the code is available from 
https://archive.siam.org/books/ot134/Chapter10/index.php. So 
LAPACK/BLACK implementations won't break their applications by adding 
these new functions. Also indeed it would be useful to have C prototypes 
matching those interfaces distributed with BLAS/LAPACK.
> So the remaining place where this could be fixed would be in your C
> prototypes for LAPACK functions, so that they match what LAPACK
> expects. Arguably that's the correct approach anyway. I suppose for
> this task extending the GFortran -fc-prototypes option to generate C
> prototypes for external functions as well would help?

Well but the non-BIND(C) interface is different for different Fortran 
compilers, and it changed even between gfortran versions (the type of 
the lengths). So we would not be able to switch BLAS/LAPACK 
implementations anymore at dynamic linking time. We would still have to 
talk to all R package maintainers that manage packages that call 
directly to BLAS/LAPACK.

I still think -fc-prototypes would be useful, certainly it should work 
for all BIND(C) procedures (the 20190426 does not for the dgemm example 
from the book), and it would be useful even for non-BIND(C) procedures.

> AFAICS, this interface mismatch problem affects other Fortran
> compilers as well, just that by sheer luck this has worked mostly so
> far (that is, other Fortran compilers also expect a hidden string
> length argument, with no exception for length==1 strings). But with
> increasingly sophisticated interprocedural optimizations such sins can
> no longer be forgiven.

Best
Tomas



	[[alternative HTML version deleted]]


From b|omqv|@t@j@nne @end|ng |rom gm@||@com  Mon May  6 12:57:01 2019
From: b|omqv|@t@j@nne @end|ng |rom gm@||@com (Janne Blomqvist)
Date: Mon, 6 May 2019 13:57:01 +0300
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <22803beb-5aeb-1c8b-4984-9fae0fd2759b@gmail.com>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
 <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
 <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>
 <6E812A6F-91B2-4412-A536-2CD672C5F4BA@xs4all.nl>
 <D521C66E-D67E-4C17-98EF-D651026561ED@gmail.com>
 <79689a6a-077c-019a-d16a-597d7b60199d@tkoenig.net>
 <20190504164903.GB15478@troutmask.apl.washington.edu>
 <22803beb-5aeb-1c8b-4984-9fae0fd2759b@gmail.com>
Message-ID: <CAO9iq9GkPKrRTv5UUATggxLCZmk6oLvqrTqPCC9ZK=0KRiaEkg@mail.gmail.com>

On Mon, May 6, 2019 at 11:55 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 5/4/19 6:49 PM, Steve Kargl wrote:
> > On Sat, May 04, 2019 at 06:42:47PM +0200, Thomas K?nig wrote:
> >>> - figure out Fortran2003 specification for C/Fortran interoperability
> >>> -- this _sounds_ like the right solution, but I don't think many
> >>> understand how to use it and what is implied (in particular, will
> >>> it require making changes to LAPACK itself?)
> >> That would actually be fairly easy.  If you declare the subroutines
> >> BIND(C), as in
> >>
> >>         subroutine foo(a,b) BIND(C,name="foo_")
> >>         real a
> >>         character*1 b
> >>         end
> >>
> >> you will get the calling signature that you already have in your C
> >> sources.
> >>
> >> This also has the advantage of being standards compliant, and would be
> >> probably be the preferred method.
> >>
> > With the caveat that one may need to use the VALUE attribute to
> > account for pass-by-value vs pass-by-reference.
>
> This seems clean solution, but as I said before not easy, because
> currently the tradition is to call the Fortran interface directly from C
> (not via any C wrappers). This means one could not substitute
> LAPACK/BLAS at dynamic linking time, unless all LAPACK/BLAS
> implementations agreed on such a C interface. Now the substitution is
> based on the original Fortran interface.
>
> In case of R, if we only used the included reference BLAS/LAPACK, we
> could do this, define our wrappers, say "c_dgemm" for "dgemm", change R
> to call via that interface, ask maintainers of all packages to change
> their code to call via their interface, and this should work with all
> Fortran 2003 compilers.
>
> But, R is often used also with optimized BLAS/LAPACK implementations
> that can be substituted at dynamic linking time. And there we could do
> nothing at R level to help: we cannot generate such wrappers for an
> existing LAPACK/BLAS implementation (we don't have the source code, the
> compiler, etc).
>
> It would be certainly a good thing if BLAS/LAPACK, with all
> implementation and uses, switched to a way that is compliant with
> current Fortran standard. But this should best start with the reference
> BLAS/LAPACK, continue with other BLAS/LAPACK implementations, and then
> with systems using those libraries, including R and its packages.
> Unless/before this happens, it would really be great if we could still
> use gfortran to build and use this fundamental software library.

Hi,

I don't think modifying your own builtin LAPACK makes sense, as you
mention that would make R incompatible with another LAPACK provided by
the system. And modifying LAPACK upstream by adding BIND(C) wouldn't
work either, as that would break all the existing Fortran code calling
LAPACK (as LAPACK is F77-style implicit interfaces, the Fortran caller
has no knowledge of the interface and thus it must match the compiler
default Fortran ABI).

So the remaining place where this could be fixed would be in your C
prototypes for LAPACK functions, so that they match what LAPACK
expects. Arguably that's the correct approach anyway. I suppose for
this task extending the GFortran -fc-prototypes option to generate C
prototypes for external functions as well would help?

AFAICS, this interface mismatch problem affects other Fortran
compilers as well, just that by sheer luck this has worked mostly so
far (that is, other Fortran compilers also expect a hidden string
length argument, with no exception for length==1 strings). But with
increasingly sophisticated interprocedural optimizations such sins can
no longer be forgiven.

-- 
Janne Blomqvist


From @tephen@berm@n @end|ng |rom gmx@net  Mon May  6 14:27:17 2019
From: @tephen@berm@n @end|ng |rom gmx@net (Stephen Berman)
Date: Mon, 06 May 2019 14:27:17 +0200
Subject: [Rd] read.table() fails with https in R 3.6 but not in R 3.5
In-Reply-To: <e3d8b66d-cf80-b55e-dedc-067b9db57456@daqana.com> (Ralf Stubner's
 message of "Mon, 6 May 2019 11:12:25 +0200")
References: <871s1e883e.fsf@gmx.net>
 <e3d8b66d-cf80-b55e-dedc-067b9db57456@daqana.com>
Message-ID: <87a7fzdaze.fsf@gmx.net>

On Mon, 6 May 2019 11:12:25 +0200 Ralf Stubner <ralf.stubner at daqana.com> wrote:

> On 04.05.19 19:04, Stephen Berman wrote:
>> In versions of R prior to 3.6.0 the following invocation succeeds,
>> returning the data frame shown:
>>
>>> read.table("https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text",
>>> header=TRUE)
>>    Dekade   Anzahl
>> 1    1900 11467254
>> 2    1910 13023370
>> 3    1920 13434601
>> 4    1930 13296355
>> 5    1940 12121250
>> 6    1950 13191131
>> 7    1960 10587420
>> 8    1970 10944129
>> 9    1980 11279439
>> 10   1990 12052652
>>
>> But in version 3.6.0 it fails:
>>
>>> read.table("https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text",
>>> header=TRUE)
>> Error in file(file, "rt") :
>>   cannot open the connection to
>> 'https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text'
>> In addition: Warning message:
>> In file(file, "rt") :
>>   cannot open URL
>> 'https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text':
>> HTTP status was '403 Forbidden'
>
> I can reproduce the behavior on Debian using the CRAN supplied package
> for R 3.6.0. Trying to read the page with 'curl' produces also a 403
> error plus some HTML text (in German) explaining that I am treated as a
> 'robot' due to the supplied User-Agent (here: curl/7.52.1). One
> suggested solution is to adjust that value which does solve the issue:
>
>  > options(HTTPUserAgent='mozilla')

I confirm that works for me, too.  Thanks!  FWIW, the default value of
HTTPUserAgent in R 3.6 here is "R (3.6.0 x86_64-suse-linux-gnu x86_64
linux-gnu)", and using this (in R 3.6) fails as I reported, while the
default value of HTTPUserAgent in R 3.5 here is "R (3.5.0
x86_64-suse-linux-gnu x86_64 linux-gnu)" and using that (in R 3.5)
succeeds.  However, setting HTTPUserAgent in R 3.5 to "libcurl/7.60.0"
fails just as it does in 3.6.  It's not clear to me if this particular
website is being too restrictive or if R 3.6 should deal with it, or at
least mention the issue in NEWS or somewhere else.

Steve Berman


From r@v|@v@r@dh@n @end|ng |rom jhu@edu  Mon May  6 16:06:45 2019
From: r@v|@v@r@dh@n @end|ng |rom jhu@edu (Ravi Varadhan)
Date: Mon, 6 May 2019 14:06:45 +0000
Subject: [Rd] 
 R optim(method="L-BFGS-B"): unexpected behavior when working
 with parent environments
In-Reply-To: <1a275659-4921-c36c-3248-b73f7eb8ab87@gmail.com>
References: <45fd1e7c-fffa-11b1-3a62-08d086fcbd78@gmail.com>
 <0346dccc-9d93-0d74-9c20-1825c67cd900@insa-toulouse.fr>
 <ddb7d325-67a3-ed65-11cd-014895d1a454@insa-toulouse.fr>
 <e1bcc19f-413f-b518-fb7e-ad7feddb2f88@gmail.com>
 <0574BB69-85B4-42D9-886D-F0219316ABF2@gmail.com>,
 <1a275659-4921-c36c-3248-b73f7eb8ab87@gmail.com>
Message-ID: <58d7911e7e7144139d7bc5b91f5270f5@jhu.edu>

Optim's Nelder-Mead works correctly for this example.


> optim(par=10, fn=fn, method="Nelder-Mead")
x=10, ret=100.02 (memory)
x=11, ret=121 (calculate)
x=9, ret=81 (calculate)
x=8, ret=64 (calculate)
x=6, ret=36 (calculate)
x=4, ret=16 (calculate)
x=0, ret=0 (calculate)
x=-4, ret=16 (calculate)
x=-4, ret=16 (memory)
x=2, ret=4 (calculate)
x=-2, ret=4 (calculate)
x=1, ret=1 (calculate)
x=-1, ret=1 (calculate)
x=0.5, ret=0.25 (calculate)
x=-0.5, ret=0.25 (calculate)
x=0.25, ret=0.0625 (calculate)
x=-0.25, ret=0.0625 (calculate)
x=0.125, ret=0.015625 (calculate)
x=-0.125, ret=0.015625 (calculate)
x=0.0625, ret=0.00390625 (calculate)
x=-0.0625, ret=0.00390625 (calculate)
x=0.03125, ret=0.0009765625 (calculate)
x=-0.03125, ret=0.0009765625 (calculate)
x=0.015625, ret=0.0002441406 (calculate)
x=-0.015625, ret=0.0002441406 (calculate)
x=0.0078125, ret=6.103516e-05 (calculate)
x=-0.0078125, ret=6.103516e-05 (calculate)
x=0.00390625, ret=1.525879e-05 (calculate)
x=-0.00390625, ret=1.525879e-05 (calculate)
x=0.001953125, ret=3.814697e-06 (calculate)
x=-0.001953125, ret=3.814697e-06 (calculate)
x=0.0009765625, ret=9.536743e-07 (calculate)
$par
[1] 0

$value
[1] 0

$counts
function gradient
      32       NA

$convergence
[1] 0

$message
NULL




________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of Duncan Murdoch <murdoch.duncan at gmail.com>
Sent: Friday, May 3, 2019 8:18:44 AM
To: peter dalgaard
Cc: Florian Gerber; r-devel at r-project.org
Subject: Re: [Rd] R optim(method="L-BFGS-B"): unexpected behavior when working with parent environments


It looks as though this happens when calculating numerical gradients:  x
is reduced by eps, and fn is called; then x is increased by eps, and fn
is called again.  No check is made that x has other references after the
first call to fn.

I'll put together a patch if nobody else gets there first...

Duncan Murdoch

On 03/05/2019 7:13 a.m., peter dalgaard wrote:
> Yes, I think you are right. I was at first confused by the fact that after the optim() call,
>
>> environment(fn)$xx
> [1] 10
>> environment(fn)$ret
> [1] 100.02
>
> so not 9.999, but this could come from x being assigned the final value without calling fn.
>
> -pd
>
>
>> On 3 May 2019, at 11:58 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> Your results below make it look like a bug in optim():  it is not duplicating a value when it should, so changes to x affect xx as well.
>>
>> Duncan Murdoch
>>
>> On 03/05/2019 4:41 a.m., Serguei Sokol wrote:
>>> On 03/05/2019 10:31, Serguei Sokol wrote:
>>>> On 02/05/2019 21:35, Florian Gerber wrote:
>>>>> Dear all,
>>>>>
>>>>> when using optim() for a function that uses the parent environment, I
>>>>> see the following unexpected behavior:
>>>>>
>>>>> makeFn <- function(){
>>>>>       xx <- ret <- NA
>>>>>       fn <- function(x){
>>>>>          if(!is.na(xx) && x==xx){
>>>>>              cat("x=", xx, ", ret=", ret, " (memory)", fill=TRUE, sep="")
>>>>>              return(ret)
>>>>>          }
>>>>>          xx <<- x; ret <<- sum(x^2)
>>>>>          cat("x=", xx, ", ret=", ret, " (calculate)", fill=TRUE, sep="")
>>>>>          ret
>>>>>       }
>>>>>       fn
>>>>> }
>>>>> fn <- makeFn()
>>>>> optim(par=10, fn=fn, method="L-BFGS-B")
>>>>> # x=10, ret=100 (calculate)
>>>>> # x=10.001, ret=100.02 (calculate)
>>>>> # x=9.999, ret=100.02 (memory)
>>>>> # $par
>>>>> # [1] 10
>>>>> #
>>>>> # $value
>>>>> # [1] 100
>>>>> # (...)
>>>>>
>>>>> I would expect that optim() does more than 3 function evaluations and
>>>>> that the optimization converges to 0.
>>>>>
>>>>> Same problem with optim(par=10, fn=fn, method="BFGS").
>>>>>
>>>>> Any ideas?
>>>> I don't have an answer but may be an insight. For some mysterious
>>>> reason xx is getting changed when in should not. Consider:
>>>>> fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in
>>>> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx
>>>> <<- x; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
>>>>> optim(par=10, fn=fn, method="L-BFGS-B")
>>>> 1 in x,xx,ret= 10 NA NA
>>>> out x,xx,ret= 10 10 100
>>>> 2 in x,xx,ret= 10.001 10 100
>>>> out x,xx,ret= 10.001 10.001 100.02
>>>> 3 in x,xx,ret= 9.999 9.999 100.02
>>>> $par
>>>> [1] 10
>>>>
>>>> $value
>>>> [1] 100
>>>>
>>>> $counts
>>>> function gradient
>>>>         1        1
>>>>
>>>> $convergence
>>>> [1] 0
>>>>
>>>> $message
>>>> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
>>>>
>>>> At the third call, xx has value 9.999 while it should have kept the
>>>> value 10.001.
>>>>
>>> A little follow-up: if you untie the link between xx and x by replacing
>>> the expression "xx <<- x" by "xx <<- x+0" it works as expected:
>>>   > fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in
>>> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx <<-
>>> x+0; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
>>>   > optim(par=10, fn=fn, method="L-BFGS-B")
>>> 1 in x,xx,ret= 10 NA NA
>>> out x,xx,ret= 10 10 100
>>> 2 in x,xx,ret= 10.001 10 100
>>> out x,xx,ret= 10.001 10.001 100.02
>>> 3 in x,xx,ret= 9.999 10.001 100.02
>>> out x,xx,ret= 9.999 9.999 99.98
>>> 4 in x,xx,ret= 9 9.999 99.98
>>> out x,xx,ret= 9 9 81
>>> 5 in x,xx,ret= 9.001 9 81
>>> out x,xx,ret= 9.001 9.001 81.018
>>> 6 in x,xx,ret= 8.999 9.001 81.018
>>> out x,xx,ret= 8.999 8.999 80.982
>>> 7 in x,xx,ret= 1.776357e-11 8.999 80.982
>>> out x,xx,ret= 1.776357e-11 1.776357e-11 3.155444e-22
>>> 8 in x,xx,ret= 0.001 1.776357e-11 3.155444e-22
>>> out x,xx,ret= 0.001 0.001 1e-06
>>> 9 in x,xx,ret= -0.001 0.001 1e-06
>>> out x,xx,ret= -0.001 -0.001 1e-06
>>> 10 in x,xx,ret= -1.334475e-23 -0.001 1e-06
>>> out x,xx,ret= -1.334475e-23 -1.334475e-23 1.780823e-46
>>> 11 in x,xx,ret= 0.001 -1.334475e-23 1.780823e-46
>>> out x,xx,ret= 0.001 0.001 1e-06
>>> 12 in x,xx,ret= -0.001 0.001 1e-06
>>> out x,xx,ret= -0.001 -0.001 1e-06
>>> $par
>>> [1] -1.334475e-23
>>> $value
>>> [1] 1.780823e-46
>>> $counts
>>> function gradient
>>>          4        4
>>> $convergence
>>> [1] 0
>>> $message
>>> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
>>> Serguei.
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Mon May  6 16:40:55 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 6 May 2019 10:40:55 -0400
Subject: [Rd] 
 R optim(method="L-BFGS-B"): unexpected behavior when working
 with parent environments
In-Reply-To: <58d7911e7e7144139d7bc5b91f5270f5@jhu.edu>
References: <45fd1e7c-fffa-11b1-3a62-08d086fcbd78@gmail.com>
 <0346dccc-9d93-0d74-9c20-1825c67cd900@insa-toulouse.fr>
 <ddb7d325-67a3-ed65-11cd-014895d1a454@insa-toulouse.fr>
 <e1bcc19f-413f-b518-fb7e-ad7feddb2f88@gmail.com>
 <0574BB69-85B4-42D9-886D-F0219316ABF2@gmail.com>
 <1a275659-4921-c36c-3248-b73f7eb8ab87@gmail.com>
 <58d7911e7e7144139d7bc5b91f5270f5@jhu.edu>
Message-ID: <88f3b7b4-93c2-6c2b-34e0-770799054e29@gmail.com>


  That's consistent/not surprising if the problem lies in the numerical
gradient calculation step ...

On 2019-05-06 10:06 a.m., Ravi Varadhan wrote:
> Optim's Nelder-Mead works correctly for this example.
> 
> 
>> optim(par=10, fn=fn, method="Nelder-Mead")
> x=10, ret=100.02 (memory)
> x=11, ret=121 (calculate)
> x=9, ret=81 (calculate)
> x=8, ret=64 (calculate)
> x=6, ret=36 (calculate)
> x=4, ret=16 (calculate)
> x=0, ret=0 (calculate)
> x=-4, ret=16 (calculate)
> x=-4, ret=16 (memory)
> x=2, ret=4 (calculate)
> x=-2, ret=4 (calculate)
> x=1, ret=1 (calculate)
> x=-1, ret=1 (calculate)
> x=0.5, ret=0.25 (calculate)
> x=-0.5, ret=0.25 (calculate)
> x=0.25, ret=0.0625 (calculate)
> x=-0.25, ret=0.0625 (calculate)
> x=0.125, ret=0.015625 (calculate)
> x=-0.125, ret=0.015625 (calculate)
> x=0.0625, ret=0.00390625 (calculate)
> x=-0.0625, ret=0.00390625 (calculate)
> x=0.03125, ret=0.0009765625 (calculate)
> x=-0.03125, ret=0.0009765625 (calculate)
> x=0.015625, ret=0.0002441406 (calculate)
> x=-0.015625, ret=0.0002441406 (calculate)
> x=0.0078125, ret=6.103516e-05 (calculate)
> x=-0.0078125, ret=6.103516e-05 (calculate)
> x=0.00390625, ret=1.525879e-05 (calculate)
> x=-0.00390625, ret=1.525879e-05 (calculate)
> x=0.001953125, ret=3.814697e-06 (calculate)
> x=-0.001953125, ret=3.814697e-06 (calculate)
> x=0.0009765625, ret=9.536743e-07 (calculate)
> $par
> [1] 0
> 
> $value
> [1] 0
> 
> $counts
> function gradient
>       32       NA
> 
> $convergence
> [1] 0
> 
> $message
> NULL
> 
> 
> 
> 
> ________________________________
> From: R-devel <r-devel-bounces at r-project.org> on behalf of Duncan Murdoch <murdoch.duncan at gmail.com>
> Sent: Friday, May 3, 2019 8:18:44 AM
> To: peter dalgaard
> Cc: Florian Gerber; r-devel at r-project.org
> Subject: Re: [Rd] R optim(method="L-BFGS-B"): unexpected behavior when working with parent environments
> 
> 
> It looks as though this happens when calculating numerical gradients:  x
> is reduced by eps, and fn is called; then x is increased by eps, and fn
> is called again.  No check is made that x has other references after the
> first call to fn.
> 
> I'll put together a patch if nobody else gets there first...
> 
> Duncan Murdoch
> 
> On 03/05/2019 7:13 a.m., peter dalgaard wrote:
>> Yes, I think you are right. I was at first confused by the fact that after the optim() call,
>>
>>> environment(fn)$xx
>> [1] 10
>>> environment(fn)$ret
>> [1] 100.02
>>
>> so not 9.999, but this could come from x being assigned the final value without calling fn.
>>
>> -pd
>>
>>
>>> On 3 May 2019, at 11:58 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>
>>> Your results below make it look like a bug in optim():  it is not duplicating a value when it should, so changes to x affect xx as well.
>>>
>>> Duncan Murdoch
>>>
>>> On 03/05/2019 4:41 a.m., Serguei Sokol wrote:
>>>> On 03/05/2019 10:31, Serguei Sokol wrote:
>>>>> On 02/05/2019 21:35, Florian Gerber wrote:
>>>>>> Dear all,
>>>>>>
>>>>>> when using optim() for a function that uses the parent environment, I
>>>>>> see the following unexpected behavior:
>>>>>>
>>>>>> makeFn <- function(){
>>>>>>       xx <- ret <- NA
>>>>>>       fn <- function(x){
>>>>>>          if(!is.na(xx) && x==xx){
>>>>>>              cat("x=", xx, ", ret=", ret, " (memory)", fill=TRUE, sep="")
>>>>>>              return(ret)
>>>>>>          }
>>>>>>          xx <<- x; ret <<- sum(x^2)
>>>>>>          cat("x=", xx, ", ret=", ret, " (calculate)", fill=TRUE, sep="")
>>>>>>          ret
>>>>>>       }
>>>>>>       fn
>>>>>> }
>>>>>> fn <- makeFn()
>>>>>> optim(par=10, fn=fn, method="L-BFGS-B")
>>>>>> # x=10, ret=100 (calculate)
>>>>>> # x=10.001, ret=100.02 (calculate)
>>>>>> # x=9.999, ret=100.02 (memory)
>>>>>> # $par
>>>>>> # [1] 10
>>>>>> #
>>>>>> # $value
>>>>>> # [1] 100
>>>>>> # (...)
>>>>>>
>>>>>> I would expect that optim() does more than 3 function evaluations and
>>>>>> that the optimization converges to 0.
>>>>>>
>>>>>> Same problem with optim(par=10, fn=fn, method="BFGS").
>>>>>>
>>>>>> Any ideas?
>>>>> I don't have an answer but may be an insight. For some mysterious
>>>>> reason xx is getting changed when in should not. Consider:
>>>>>> fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in
>>>>> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx
>>>>> <<- x; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
>>>>>> optim(par=10, fn=fn, method="L-BFGS-B")
>>>>> 1 in x,xx,ret= 10 NA NA
>>>>> out x,xx,ret= 10 10 100
>>>>> 2 in x,xx,ret= 10.001 10 100
>>>>> out x,xx,ret= 10.001 10.001 100.02
>>>>> 3 in x,xx,ret= 9.999 9.999 100.02
>>>>> $par
>>>>> [1] 10
>>>>>
>>>>> $value
>>>>> [1] 100
>>>>>
>>>>> $counts
>>>>> function gradient
>>>>>         1        1
>>>>>
>>>>> $convergence
>>>>> [1] 0
>>>>>
>>>>> $message
>>>>> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
>>>>>
>>>>> At the third call, xx has value 9.999 while it should have kept the
>>>>> value 10.001.
>>>>>
>>>> A little follow-up: if you untie the link between xx and x by replacing
>>>> the expression "xx <<- x" by "xx <<- x+0" it works as expected:
>>>>   > fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in
>>>> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx <<-
>>>> x+0; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
>>>>   > optim(par=10, fn=fn, method="L-BFGS-B")
>>>> 1 in x,xx,ret= 10 NA NA
>>>> out x,xx,ret= 10 10 100
>>>> 2 in x,xx,ret= 10.001 10 100
>>>> out x,xx,ret= 10.001 10.001 100.02
>>>> 3 in x,xx,ret= 9.999 10.001 100.02
>>>> out x,xx,ret= 9.999 9.999 99.98
>>>> 4 in x,xx,ret= 9 9.999 99.98
>>>> out x,xx,ret= 9 9 81
>>>> 5 in x,xx,ret= 9.001 9 81
>>>> out x,xx,ret= 9.001 9.001 81.018
>>>> 6 in x,xx,ret= 8.999 9.001 81.018
>>>> out x,xx,ret= 8.999 8.999 80.982
>>>> 7 in x,xx,ret= 1.776357e-11 8.999 80.982
>>>> out x,xx,ret= 1.776357e-11 1.776357e-11 3.155444e-22
>>>> 8 in x,xx,ret= 0.001 1.776357e-11 3.155444e-22
>>>> out x,xx,ret= 0.001 0.001 1e-06
>>>> 9 in x,xx,ret= -0.001 0.001 1e-06
>>>> out x,xx,ret= -0.001 -0.001 1e-06
>>>> 10 in x,xx,ret= -1.334475e-23 -0.001 1e-06
>>>> out x,xx,ret= -1.334475e-23 -1.334475e-23 1.780823e-46
>>>> 11 in x,xx,ret= 0.001 -1.334475e-23 1.780823e-46
>>>> out x,xx,ret= 0.001 0.001 1e-06
>>>> 12 in x,xx,ret= -0.001 0.001 1e-06
>>>> out x,xx,ret= -0.001 -0.001 1e-06
>>>> $par
>>>> [1] -1.334475e-23
>>>> $value
>>>> [1] 1.780823e-46
>>>> $counts
>>>> function gradient
>>>>          4        4
>>>> $convergence
>>>> [1] 0
>>>> $message
>>>> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
>>>> Serguei.
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From thom@@@petzo|dt @end|ng |rom tu-dre@den@de  Mon May  6 18:21:04 2019
From: thom@@@petzo|dt @end|ng |rom tu-dre@den@de (Thomas Petzoldt)
Date: Mon, 6 May 2019 18:21:04 +0200
Subject: [Rd] 
 R optim(method="L-BFGS-B"): unexpected behavior when working
 with parent environments
In-Reply-To: <88f3b7b4-93c2-6c2b-34e0-770799054e29@gmail.com>
References: <45fd1e7c-fffa-11b1-3a62-08d086fcbd78@gmail.com>
 <0346dccc-9d93-0d74-9c20-1825c67cd900@insa-toulouse.fr>
 <ddb7d325-67a3-ed65-11cd-014895d1a454@insa-toulouse.fr>
 <e1bcc19f-413f-b518-fb7e-ad7feddb2f88@gmail.com>
 <0574BB69-85B4-42D9-886D-F0219316ABF2@gmail.com>
 <1a275659-4921-c36c-3248-b73f7eb8ab87@gmail.com>
 <58d7911e7e7144139d7bc5b91f5270f5@jhu.edu>
 <88f3b7b4-93c2-6c2b-34e0-770799054e29@gmail.com>
Message-ID: <d6888e9a-b457-a6e0-85fc-3810f8f93d7d@tu-dresden.de>

It seems that it's an old bug that was found in some other packages, but 
at that time not optim:

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15958

and that Duncan Murdoch posted a patch already last Friday :)

Thomas

Am 06.05.2019 um 16:40 schrieb Ben Bolker:
>    That's consistent/not surprising if the problem lies in the numerical
> gradient calculation step ...
>
> On 2019-05-06 10:06 a.m., Ravi Varadhan wrote:
>> Optim's Nelder-Mead works correctly for this example.
>>
>>
>>> optim(par=10, fn=fn, method="Nelder-Mead")
>> x=10, ret=100.02 (memory)
>> x=11, ret=121 (calculate)
>> x=9, ret=81 (calculate)
>> x=8, ret=64 (calculate)
>> x=6, ret=36 (calculate)
>> x=4, ret=16 (calculate)
>> x=0, ret=0 (calculate)
>> x=-4, ret=16 (calculate)
>> x=-4, ret=16 (memory)
>> x=2, ret=4 (calculate)
>> x=-2, ret=4 (calculate)
>> x=1, ret=1 (calculate)
>> x=-1, ret=1 (calculate)
>> x=0.5, ret=0.25 (calculate)
>> x=-0.5, ret=0.25 (calculate)
>> x=0.25, ret=0.0625 (calculate)
>> x=-0.25, ret=0.0625 (calculate)
>> x=0.125, ret=0.015625 (calculate)
>> x=-0.125, ret=0.015625 (calculate)
>> x=0.0625, ret=0.00390625 (calculate)
>> x=-0.0625, ret=0.00390625 (calculate)
>> x=0.03125, ret=0.0009765625 (calculate)
>> x=-0.03125, ret=0.0009765625 (calculate)
>> x=0.015625, ret=0.0002441406 (calculate)
>> x=-0.015625, ret=0.0002441406 (calculate)
>> x=0.0078125, ret=6.103516e-05 (calculate)
>> x=-0.0078125, ret=6.103516e-05 (calculate)
>> x=0.00390625, ret=1.525879e-05 (calculate)
>> x=-0.00390625, ret=1.525879e-05 (calculate)
>> x=0.001953125, ret=3.814697e-06 (calculate)
>> x=-0.001953125, ret=3.814697e-06 (calculate)
>> x=0.0009765625, ret=9.536743e-07 (calculate)
>> $par
>> [1] 0
>>
>> $value
>> [1] 0
>>
>> $counts
>> function gradient
>>        32       NA
>>
>> $convergence
>> [1] 0
>>
>> $message
>> NULL
>>
>>
>>
>>
>> ________________________________
>> From: R-devel <r-devel-bounces at r-project.org> on behalf of Duncan Murdoch <murdoch.duncan at gmail.com>
>> Sent: Friday, May 3, 2019 8:18:44 AM
>> To: peter dalgaard
>> Cc: Florian Gerber; r-devel at r-project.org
>> Subject: Re: [Rd] R optim(method="L-BFGS-B"): unexpected behavior when working with parent environments
>>
>>
>> It looks as though this happens when calculating numerical gradients:  x
>> is reduced by eps, and fn is called; then x is increased by eps, and fn
>> is called again.  No check is made that x has other references after the
>> first call to fn.
>>
>> I'll put together a patch if nobody else gets there first...
>>
>> Duncan Murdoch
>>
>> On 03/05/2019 7:13 a.m., peter dalgaard wrote:
>>> Yes, I think you are right. I was at first confused by the fact that after the optim() call,
>>>
>>>> environment(fn)$xx
>>> [1] 10
>>>> environment(fn)$ret
>>> [1] 100.02
>>>
>>> so not 9.999, but this could come from x being assigned the final value without calling fn.
>>>
>>> -pd
>>>
>>>
>>>> On 3 May 2019, at 11:58 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>
>>>> Your results below make it look like a bug in optim():  it is not duplicating a value when it should, so changes to x affect xx as well.
>>>>
>>>> Duncan Murdoch
>>>>
>>>> On 03/05/2019 4:41 a.m., Serguei Sokol wrote:
>>>>> On 03/05/2019 10:31, Serguei Sokol wrote:
>>>>>> On 02/05/2019 21:35, Florian Gerber wrote:
>>>>>>> Dear all,
>>>>>>>
>>>>>>> when using optim() for a function that uses the parent environment, I
>>>>>>> see the following unexpected behavior:
>>>>>>>
>>>>>>> makeFn <- function(){
>>>>>>>        xx <- ret <- NA
>>>>>>>        fn <- function(x){
>>>>>>>           if(!is.na(xx) && x==xx){
>>>>>>>               cat("x=", xx, ", ret=", ret, " (memory)", fill=TRUE, sep="")
>>>>>>>               return(ret)
>>>>>>>           }
>>>>>>>           xx <<- x; ret <<- sum(x^2)
>>>>>>>           cat("x=", xx, ", ret=", ret, " (calculate)", fill=TRUE, sep="")
>>>>>>>           ret
>>>>>>>        }
>>>>>>>        fn
>>>>>>> }
>>>>>>> fn <- makeFn()
>>>>>>> optim(par=10, fn=fn, method="L-BFGS-B")
>>>>>>> # x=10, ret=100 (calculate)
>>>>>>> # x=10.001, ret=100.02 (calculate)
>>>>>>> # x=9.999, ret=100.02 (memory)
>>>>>>> # $par
>>>>>>> # [1] 10
>>>>>>> #
>>>>>>> # $value
>>>>>>> # [1] 100
>>>>>>> # (...)
>>>>>>>
>>>>>>> I would expect that optim() does more than 3 function evaluations and
>>>>>>> that the optimization converges to 0.
>>>>>>>
>>>>>>> Same problem with optim(par=10, fn=fn, method="BFGS").
>>>>>>>
>>>>>>> Any ideas?
>>>>>> I don't have an answer but may be an insight. For some mysterious
>>>>>> reason xx is getting changed when in should not. Consider:
>>>>>>> fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in
>>>>>> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx
>>>>>> <<- x; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
>>>>>>> optim(par=10, fn=fn, method="L-BFGS-B")
>>>>>> 1 in x,xx,ret= 10 NA NA
>>>>>> out x,xx,ret= 10 10 100
>>>>>> 2 in x,xx,ret= 10.001 10 100
>>>>>> out x,xx,ret= 10.001 10.001 100.02
>>>>>> 3 in x,xx,ret= 9.999 9.999 100.02
>>>>>> $par
>>>>>> [1] 10
>>>>>>
>>>>>> $value
>>>>>> [1] 100
>>>>>>
>>>>>> $counts
>>>>>> function gradient
>>>>>>          1        1
>>>>>>
>>>>>> $convergence
>>>>>> [1] 0
>>>>>>
>>>>>> $message
>>>>>> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
>>>>>>
>>>>>> At the third call, xx has value 9.999 while it should have kept the
>>>>>> value 10.001.
>>>>>>
>>>>> A little follow-up: if you untie the link between xx and x by replacing
>>>>> the expression "xx <<- x" by "xx <<- x+0" it works as expected:
>>>>>    > fn=local({n=0; xx=ret=NA; function(x) {n <<- n+1; cat(n, "in
>>>>> x,xx,ret=", x, xx, ret, "\n"); if (!is.na(xx) && x==xx) ret else {xx <<-
>>>>> x+0; ret <<- x**2; cat("out x,xx,ret=", x, xx, ret, "\n"); ret}}})
>>>>>    > optim(par=10, fn=fn, method="L-BFGS-B")
>>>>> 1 in x,xx,ret= 10 NA NA
>>>>> out x,xx,ret= 10 10 100
>>>>> 2 in x,xx,ret= 10.001 10 100
>>>>> out x,xx,ret= 10.001 10.001 100.02
>>>>> 3 in x,xx,ret= 9.999 10.001 100.02
>>>>> out x,xx,ret= 9.999 9.999 99.98
>>>>> 4 in x,xx,ret= 9 9.999 99.98
>>>>> out x,xx,ret= 9 9 81
>>>>> 5 in x,xx,ret= 9.001 9 81
>>>>> out x,xx,ret= 9.001 9.001 81.018
>>>>> 6 in x,xx,ret= 8.999 9.001 81.018
>>>>> out x,xx,ret= 8.999 8.999 80.982
>>>>> 7 in x,xx,ret= 1.776357e-11 8.999 80.982
>>>>> out x,xx,ret= 1.776357e-11 1.776357e-11 3.155444e-22
>>>>> 8 in x,xx,ret= 0.001 1.776357e-11 3.155444e-22
>>>>> out x,xx,ret= 0.001 0.001 1e-06
>>>>> 9 in x,xx,ret= -0.001 0.001 1e-06
>>>>> out x,xx,ret= -0.001 -0.001 1e-06
>>>>> 10 in x,xx,ret= -1.334475e-23 -0.001 1e-06
>>>>> out x,xx,ret= -1.334475e-23 -1.334475e-23 1.780823e-46
>>>>> 11 in x,xx,ret= 0.001 -1.334475e-23 1.780823e-46
>>>>> out x,xx,ret= 0.001 0.001 1e-06
>>>>> 12 in x,xx,ret= -0.001 0.001 1e-06
>>>>> out x,xx,ret= -0.001 -0.001 1e-06
>>>>> $par
>>>>> [1] -1.334475e-23
>>>>> $value
>>>>> [1] 1.780823e-46
>>>>> $counts
>>>>> function gradient
>>>>>           4        4
>>>>> $convergence
>>>>> [1] 0
>>>>> $message
>>>>> [1] "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL"
>>>>> Serguei.
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Mon May  6 18:37:37 2019
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Mon, 6 May 2019 18:37:37 +0200
Subject: [Rd] 
 R optim(method="L-BFGS-B"): unexpected behavior when working
 with parent environments
In-Reply-To: <d6888e9a-b457-a6e0-85fc-3810f8f93d7d@tu-dresden.de>
References: <45fd1e7c-fffa-11b1-3a62-08d086fcbd78@gmail.com>
 <0346dccc-9d93-0d74-9c20-1825c67cd900@insa-toulouse.fr>
 <ddb7d325-67a3-ed65-11cd-014895d1a454@insa-toulouse.fr>
 <e1bcc19f-413f-b518-fb7e-ad7feddb2f88@gmail.com>
 <0574BB69-85B4-42D9-886D-F0219316ABF2@gmail.com>
 <1a275659-4921-c36c-3248-b73f7eb8ab87@gmail.com>
 <58d7911e7e7144139d7bc5b91f5270f5@jhu.edu>
 <88f3b7b4-93c2-6c2b-34e0-770799054e29@gmail.com>
 <d6888e9a-b457-a6e0-85fc-3810f8f93d7d@tu-dresden.de>
Message-ID: <57a4a97c-4a91-9e77-3e70-7b736670f21b@insa-toulouse.fr>

On 06/05/2019 18:21, Thomas Petzoldt wrote:
> It seems that it's an old bug that was found in some other packages, 
> but at that time not optim:
>
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15958
I think that the bug description is a little bit misleading. The bug is 
not in fact that "<<-" produce a reference instead of a copy (that's 
normal) but in fact that some C or Fortran code modifies a variable "in 
place" without taking care if there are some references on it or not.

Serguei (just splitting hairs)


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue May  7 13:53:55 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 7 May 2019 13:53:55 +0200
Subject: [Rd] 
 Strange error messages from parallel::mcparallel family under 3.6.0
In-Reply-To: <93e743cdffe03aa9c50a76d0f40b65d89b41031e.camel@uow.edu.au>
References: <93e743cdffe03aa9c50a76d0f40b65d89b41031e.camel@uow.edu.au>
Message-ID: <265bcf9f-0924-7452-3c2f-3dcf1edeb628@gmail.com>

Thanks, fixed in R-devel and R-patched.

The error happens in the child process when it is already exiting, after 
it had delivered a result, so this should not cause any trouble in an 
unpatched version of R (apart from showing that message). It is specific 
to mccollect(wait=FALSE).

Best
Tomas

On 5/3/19 12:47 PM, Pavel Krivitsky wrote:
> Dear All,
>
> Since upgrading to 3.6.0, I've been getting a strange error messages
> from the child process when using mcparallel/mccollect. Before filing a report in the Bugzilla, I want to figure out whether I had been doing something wrong all this time and R 3.6.0 has exposed it, or whether something else is going on.
>
> # Background #
>
> Ultimately, what I want to do is to be able to set a time limit for an
> expression to be evaluated that would be enforced even inside compiled
> code. (R.utils::withTimeout() uses base::setTimeLimit(), which can only
> enforce within R code.)
>
> # Implementation #
>
> The approach that my implementation, statnet.common::forkTimeout()
> (source attached for convenience), uses is to call mcparallel() to
> evaluate the expression in a child process, then mccollect() with
> wait=FALSE and a timeout to give it a chance to finish. If it runs past
> the timeout, the child process is killed and an onTimeout value is
> returned. (This only works on Unix-alikes, but it's better than
> nothing.)
>
> # The problem #
>
> Since 3.6.0---and I've tested fresh installs of 3.6.0 and 3.5.3 side-
> by-side---I've been getting strange messages.
>
> Running
>
>    source("forkTimeout.R") # attached
>    repeat print(forkTimeout({Sys.sleep(1);TRUE}, timeout=3))
>
> results in
>
> [1] TRUE
> [1] TRUE
> Error in mcexit(0L) : ignoring SIGPIPE signal
> [1] TRUE
> [1] TRUE
> Error in mcexit(0L) : ignoring SIGPIPE signal
> [1] TRUE
> [1] TRUE
> [1] TRUE
>
> until interrupted. Running
>
>    options(error=traceback)
>    repeat print(forkTimeout({Sys.sleep(1);TRUE}, timeout=3))
>
> results in sporadic messages of the form:
>
> Error in mcexit(0L) : ignoring SIGPIPE signal
> 6: selectChildren(jobs, timeout)
> 5: parallel::mccollect(child, wait = FALSE, timeout = timeout) at
> forkTimeout.R#75
> 4: withCallingHandlers(expr, warning = function(w)
> invokeRestart("muffleWarning"))
> 3: suppressWarnings(parallel::mccollect(child, wait = FALSE, timeout =
> timeout)) at forkTimeout.R#75
> 2: forkTimeout({
>         Sys.sleep(1)
>      ...
> 1: print(forkTimeout({
>         Sys.sleep(1)
>      ...
>
> So, these messages do not appear to prevent the child process from
> returning valid output, but I've never seen them before R 3.6.0, so I
> wonder if I am doing something wrong. Session info is also attached.
>
> 				Thanks in advance,
> 				Pavel
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue May  7 18:05:22 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 7 May 2019 18:05:22 +0200
Subject: [Rd] Staged installation fail on some file systems
In-Reply-To: <CAFDcVCTYc53f9COpNoeqbYGxWOE_CCrAbCiStDpo6YBmXG6Txg@mail.gmail.com>
References: <CAFDcVCTYc53f9COpNoeqbYGxWOE_CCrAbCiStDpo6YBmXG6Txg@mail.gmail.com>
Message-ID: <b45f3d14-9842-f64c-bb1e-0f983b6f91f9@gmail.com>

Thanks for the report.? According to my reading, this use of "mv" is ok 
and the renameat2() call which the invocation of "mv" leads to is also 
ok and allowed by POSIX in this context. It could only fail with EEXIST 
if the target directory (path/pkg) was not empty. So far I've not been 
able to reproduce but we could fall back to copy like on Windows.

Best
Tomas


On 5/5/19 4:35 AM, Henrik Bengtsson wrote:
> I'm observing that the new staged installation in R 3.6.0 can produce:
>
> mv: cannot move
> ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-codetools/00new/codetools?
> to ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?: File
> exists
> ERROR:   moving to final location failed
>
> on some file systems.
>
> # EXAMPLE
>
> $ R --vanilla
> R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
> Copyright (C) 2019 The R Foundation for Statistical Computing
> Platform: x86_64-pc-linux-gnu (64-bit)
> ...
>
>> install.packages("codetools", repos="https://cran.r-project.org")
> Installing package into ?/wynton/home/cbi/hb/R/x86_64-pc-linux-gnu-library/3.6?
> (as ?lib? is unspecified)
> trying URL 'https://cran.r-project.org/src/contrib/codetools_0.2-16.tar.gz'
> Content type 'application/x-gzip' length 12996 bytes (12 KB)
> ==================================================
> downloaded 12 KB
>
> * installing *source* package ?codetools? ...
> ** package ?codetools? successfully unpacked and MD5 sums checked
> ** using staged installation
> ** R
> ** byte-compile and prepare package for lazy loading
> ** help
> *** installing help indices
> ** building package indices
> ** testing if installed package can be loaded from temporary location
> mv: cannot move
> ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-codetools/00new/codetools?
> to ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?: File
> exists
> ERROR:   moving to final location failed
> * removing ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?
>
> The downloaded source packages are in
> ?/scratch/alice/Rtmp6UYDzu/downloaded_packages?
> Warning message:
> In install.packages("codetools", repos = "https://cran.r-project.org") :
> installation of package ?codetools? had non-zero exit status
>
>
> # WORKAROUND
>
> Disabling staged installation, for instance by setting environment
> variable 'R_INSTALL_STAGED=false' avoids this problem.
>
>
> # TROUBLESHOOTING
>
> I think it comes down to the following call in src/library/tools/R/install.R:
>
>    status <- system(paste("mv -f",
>                           shQuote(instdir),
>                           shQuote(dirname(final_instdir))))
>
> https://github.com/wch/r-source/blob/d253331f578814f919f150ffdf1fe581618079a3/src/library/tools/R/install.R#L1645-L1647
>
> which effectively does:
>
> $ mkdir -p path/pkg  ## empty final destination placeholder(?)
> $ mkdir -p path/to/pkg
> $ mv -f path/to/pkg path
>
> However, on one (and only one) of several systems I've tested, that
> 'mv' produce the error:
>
>    mv: cannot move ?path/to/pkg? to ?path/pkg?: File exists
>
> This is on a BeeGFS parallel file system.  I cannot tell if that 'mv
> -f' should work or not, or if it is even well defined.  FWIW, the
> above 'mv' does indeed work if I switch to another folder that is
> mounted on a different, NFS, file system, i.e. it is not kernel/OS
> specific (here CentOS 7.6.1810).
>
> If of any use, here's the 'strace' of the above 'mv':
>
> $ strace mv -f path/to/pkg path
> execve("/usr/bin/mv", ["mv", "-f", "path/to/pkg", "path"], [/* 118 vars */]) = 0
> brk(NULL)                               = 0xcf3000
> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> 0) = 0x7fde2ceb1000
> access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
> open("/usr/lib64/openmpi/lib/tls/x86_64/libselinux.so.1",
> O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
> stat("/usr/lib64/openmpi/lib/tls/x86_64", 0x7ffc6a3fb170) = -1 ENOENT
> (No such file or directory)
> open("/usr/lib64/openmpi/lib/tls/libselinux.so.1", O_RDONLY|O_CLOEXEC)
> = -1 ENOENT (No such file or directory)
> stat("/usr/lib64/openmpi/lib/tls", 0x7ffc6a3fb170) = -1 ENOENT (No
> such file or directory)
> open("/usr/lib64/openmpi/lib/x86_64/libselinux.so.1",
> O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
> stat("/usr/lib64/openmpi/lib/x86_64", 0x7ffc6a3fb170) = -1 ENOENT (No
> such file or directory)
> open("/usr/lib64/openmpi/lib/libselinux.so.1", O_RDONLY|O_CLOEXEC) =
> -1 ENOENT (No such file or directory)
> stat("/usr/lib64/openmpi/lib", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
> open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
> fstat(3, {st_mode=S_IFREG|0644, st_size=96960, ...}) = 0
> mmap(NULL, 96960, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fde2ce99000
> close(3)                                = 0
> open("/lib64/libselinux.so.1", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320i\0\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=155784, ...}) = 0
> mmap(NULL, 2255184, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2ca6a000
> mprotect(0x7fde2ca8e000, 2093056, PROT_NONE) = 0
> mmap(0x7fde2cc8d000, 8192, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x23000) = 0x7fde2cc8d000
> mmap(0x7fde2cc8f000, 6480, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2cc8f000
> close(3)                                = 0
> open("/usr/lib64/openmpi/lib/libacl.so.1", O_RDONLY|O_CLOEXEC) = -1
> ENOENT (No such file or directory)
> open("/lib64/libacl.so.1", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\200\37\0\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=37056, ...}) = 0
> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> 0) = 0x7fde2ce98000
> mmap(NULL, 2130560, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2c861000
> mprotect(0x7fde2c868000, 2097152, PROT_NONE) = 0
> mmap(0x7fde2ca68000, 8192, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x7000) = 0x7fde2ca68000
> close(3)                                = 0
> open("/usr/lib64/openmpi/lib/libattr.so.1", O_RDONLY|O_CLOEXEC) = -1
> ENOENT (No such file or directory)
> open("/lib64/libattr.so.1", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320\23\0\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=19896, ...}) = 0
> mmap(NULL, 2113904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2c65c000
> mprotect(0x7fde2c660000, 2093056, PROT_NONE) = 0
> mmap(0x7fde2c85f000, 8192, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0x7fde2c85f000
> close(3)                                = 0
> open("/usr/lib64/openmpi/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = -1
> ENOENT (No such file or directory)
> open("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\340$\2\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=2151672, ...}) = 0
> mmap(NULL, 3981792, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2c28f000
> mprotect(0x7fde2c451000, 2097152, PROT_NONE) = 0
> mmap(0x7fde2c651000, 24576, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1c2000) = 0x7fde2c651000
> mmap(0x7fde2c657000, 16864, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2c657000
> close(3)                                = 0
> open("/usr/lib64/openmpi/lib/libpcre.so.1", O_RDONLY|O_CLOEXEC) = -1
> ENOENT (No such file or directory)
> open("/lib64/libpcre.so.1", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\360\25\0\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=402384, ...}) = 0
> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> 0) = 0x7fde2ce97000
> mmap(NULL, 2494984, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2c02d000
> mprotect(0x7fde2c08d000, 2097152, PROT_NONE) = 0
> mmap(0x7fde2c28d000, 8192, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x60000) = 0x7fde2c28d000
> close(3)                                = 0
> open("/usr/lib64/openmpi/lib/libdl.so.2", O_RDONLY|O_CLOEXEC) = -1
> ENOENT (No such file or directory)
> open("/lib64/libdl.so.2", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\220\r\0\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=19288, ...}) = 0
> mmap(NULL, 2109712, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2be29000
> mprotect(0x7fde2be2b000, 2097152, PROT_NONE) = 0
> mmap(0x7fde2c02b000, 8192, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0x7fde2c02b000
> close(3)                                = 0
> open("/usr/lib64/openmpi/lib/libpthread.so.0", O_RDONLY|O_CLOEXEC) =
> -1 ENOENT (No such file or directory)
> open("/lib64/libpthread.so.0", O_RDONLY|O_CLOEXEC) = 3
> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\260l\0\0\0\0\0\0"...,
> 832) = 832
> fstat(3, {st_mode=S_IFREG|0755, st_size=141968, ...}) = 0
> mmap(NULL, 2208904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> 0) = 0x7fde2bc0d000
> mprotect(0x7fde2bc24000, 2093056, PROT_NONE) = 0
> mmap(0x7fde2be23000, 8192, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x16000) = 0x7fde2be23000
> mmap(0x7fde2be25000, 13448, PROT_READ|PROT_WRITE,
> MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2be25000
> close(3)                                = 0
> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> 0) = 0x7fde2ce96000
> mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> 0) = 0x7fde2ce94000
> arch_prctl(ARCH_SET_FS, 0x7fde2ce94840) = 0
> mprotect(0x7fde2c651000, 16384, PROT_READ) = 0
> mprotect(0x7fde2be23000, 4096, PROT_READ) = 0
> mprotect(0x7fde2c02b000, 4096, PROT_READ) = 0
> mprotect(0x7fde2c28d000, 4096, PROT_READ) = 0
> mprotect(0x7fde2c85f000, 4096, PROT_READ) = 0
> mprotect(0x7fde2ca68000, 4096, PROT_READ) = 0
> mprotect(0x7fde2cc8d000, 4096, PROT_READ) = 0
> mprotect(0x61d000, 4096, PROT_READ)     = 0
> mprotect(0x7fde2ceb2000, 4096, PROT_READ) = 0
> munmap(0x7fde2ce99000, 96960)           = 0
> set_tid_address(0x7fde2ce94b10)         = 85521
> set_robust_list(0x7fde2ce94b20, 24)     = 0
> rt_sigaction(SIGRTMIN, {0x7fde2bc13790, [], SA_RESTORER|SA_SIGINFO,
> 0x7fde2bc1c5d0}, NULL, 8) = 0
> rt_sigaction(SIGRT_1, {0x7fde2bc13820, [],
> SA_RESTORER|SA_RESTART|SA_SIGINFO, 0x7fde2bc1c5d0}, NULL, 8) = 0
> rt_sigprocmask(SIG_UNBLOCK, [RTMIN RT_1], NULL, 8) = 0
> getrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
> statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096,
> f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={0,
> 0}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
> statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096,
> f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={0,
> 0}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
> stat("/sys/fs/selinux", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
> brk(NULL)                               = 0xcf3000
> brk(0xd14000)                           = 0xd14000
> access("/etc/selinux/config", F_OK)     = 0
> open("/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3
> fstat(3, {st_mode=S_IFREG|0644, st_size=106075056, ...}) = 0
> mmap(NULL, 106075056, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fde256e3000
> close(3)                                = 0
> geteuid()                               = 34002
> ioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0
> stat("path", {st_mode=S_IFDIR|0755, st_size=2, ...}) = 0
> lstat("path/to/pkg", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
> lstat("path/pkg", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
> renameat2(AT_FDCWD, "path/to/pkg", AT_FDCWD, "path/pkg", 0) = -1
> EEXIST (File exists)
> open("/usr/share/locale/locale.alias", O_RDONLY|O_CLOEXEC) = 3
> fstat(3, {st_mode=S_IFREG|0644, st_size=2502, ...}) = 0
> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> 0) = 0x7fde2ceb0000
> read(3, "# Locale name alias data base.\n#"..., 4096) = 2502
> read(3, "", 4096)                       = 0
> close(3)                                = 0
> munmap(0x7fde2ceb0000, 4096)            = 0
> open("/usr/share/locale/en_US.UTF-8/LC_MESSAGES/coreutils.mo",
> O_RDONLY) = -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en_US.utf8/LC_MESSAGES/coreutils.mo",
> O_RDONLY) = -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en_US/LC_MESSAGES/coreutils.mo", O_RDONLY) =
> -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY)
> = -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) =
> -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1
> ENOENT (No such file or directory)
> open("/usr/lib64/charset.alias", O_RDONLY|O_NOFOLLOW) = -1 ENOENT (No
> such file or directory)
> write(2, "mv: ", 4mv: )                     = 4
> write(2, "cannot move \342\200\230path/to/pkg\342\200\231 to"...,
> 47cannot move ?path/to/pkg? to ?path/pkg?) = 47
> open("/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) =
> -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo", O_RDONLY) =
> -1 ENOENT (No such file or directory)
> open("/usr/share/locale/en_US/LC_MESSAGES/libc.mo", O_RDONLY) = -1
> ENOENT (No such file or directory)
> open("/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1
> ENOENT (No such file or directory)
> open("/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1
> ENOENT (No such file or directory)
> open("/usr/share/locale/en/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT
> (No such file or directory)
> write(2, ": File exists", 13: File exists)           = 13
> write(2, "\n", 1
> )                       = 1
> lseek(0, 0, SEEK_CUR)                   = -1 ESPIPE (Illegal seek)
> close(0)                                = 0
> close(1)                                = 0
> close(2)                                = 0
> exit_group(1)                           = ?
> +++ exited with 1 +++
>
> /Henrik
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue May  7 18:18:10 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 7 May 2019 09:18:10 -0700
Subject: [Rd] Staged installation fail on some file systems
In-Reply-To: <b45f3d14-9842-f64c-bb1e-0f983b6f91f9@gmail.com>
References: <CAFDcVCTYc53f9COpNoeqbYGxWOE_CCrAbCiStDpo6YBmXG6Txg@mail.gmail.com>
 <b45f3d14-9842-f64c-bb1e-0f983b6f91f9@gmail.com>
Message-ID: <CAFDcVCQFHw3yCLKms_3n-EHPgdfMxD4K768Qjfj-BKmDFhdGtA@mail.gmail.com>

On Tue, May 7, 2019 at 9:05 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> Thanks for the report.  According to my reading, this use of "mv" is ok
> and the renameat2() call which the invocation of "mv" leads to is also
> ok and allowed by POSIX in this context. It could only fail with EEXIST
> if the target directory (path/pkg) was not empty. So far I've not been
> able to reproduce but we could fall back to copy like on Windows.

Thanks for looking into this.  The purpose of the pre-existing target
directory (path/pkg) is to act as a directory lock in order to lower
the risk for parallel installation to take place at the same - is that
correct?  For the same reason, you can't just do

mv path/pkg path/pkg-quickly-now
mv -f path/to/pkg path
rmdir path/pkg-quickly-now

because there's a potential race condition?

For efficiency, to avoid copying, could one do "atomic" moves one
layer down?  Something like:

mv path/to/pkg/* path/to/pkg/.* path/pkg
rmdir path/pkg

because, in this case, we know that path/pkg/ is empty.

/Henrik


>
> Best
> Tomas
>
>
> On 5/5/19 4:35 AM, Henrik Bengtsson wrote:
> > I'm observing that the new staged installation in R 3.6.0 can produce:
> >
> > mv: cannot move
> > ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-codetools/00new/codetools?
> > to ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?: File
> > exists
> > ERROR:   moving to final location failed
> >
> > on some file systems.
> >
> > # EXAMPLE
> >
> > $ R --vanilla
> > R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
> > Copyright (C) 2019 The R Foundation for Statistical Computing
> > Platform: x86_64-pc-linux-gnu (64-bit)
> > ...
> >
> >> install.packages("codetools", repos="https://cran.r-project.org")
> > Installing package into ?/wynton/home/cbi/hb/R/x86_64-pc-linux-gnu-library/3.6?
> > (as ?lib? is unspecified)
> > trying URL 'https://cran.r-project.org/src/contrib/codetools_0.2-16.tar.gz'
> > Content type 'application/x-gzip' length 12996 bytes (12 KB)
> > ==================================================
> > downloaded 12 KB
> >
> > * installing *source* package ?codetools? ...
> > ** package ?codetools? successfully unpacked and MD5 sums checked
> > ** using staged installation
> > ** R
> > ** byte-compile and prepare package for lazy loading
> > ** help
> > *** installing help indices
> > ** building package indices
> > ** testing if installed package can be loaded from temporary location
> > mv: cannot move
> > ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-codetools/00new/codetools?
> > to ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?: File
> > exists
> > ERROR:   moving to final location failed
> > * removing ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?
> >
> > The downloaded source packages are in
> > ?/scratch/alice/Rtmp6UYDzu/downloaded_packages?
> > Warning message:
> > In install.packages("codetools", repos = "https://cran.r-project.org") :
> > installation of package ?codetools? had non-zero exit status
> >
> >
> > # WORKAROUND
> >
> > Disabling staged installation, for instance by setting environment
> > variable 'R_INSTALL_STAGED=false' avoids this problem.
> >
> >
> > # TROUBLESHOOTING
> >
> > I think it comes down to the following call in src/library/tools/R/install.R:
> >
> >    status <- system(paste("mv -f",
> >                           shQuote(instdir),
> >                           shQuote(dirname(final_instdir))))
> >
> > https://github.com/wch/r-source/blob/d253331f578814f919f150ffdf1fe581618079a3/src/library/tools/R/install.R#L1645-L1647
> >
> > which effectively does:
> >
> > $ mkdir -p path/pkg  ## empty final destination placeholder(?)
> > $ mkdir -p path/to/pkg
> > $ mv -f path/to/pkg path
> >
> > However, on one (and only one) of several systems I've tested, that
> > 'mv' produce the error:
> >
> >    mv: cannot move ?path/to/pkg? to ?path/pkg?: File exists
> >
> > This is on a BeeGFS parallel file system.  I cannot tell if that 'mv
> > -f' should work or not, or if it is even well defined.  FWIW, the
> > above 'mv' does indeed work if I switch to another folder that is
> > mounted on a different, NFS, file system, i.e. it is not kernel/OS
> > specific (here CentOS 7.6.1810).
> >
> > If of any use, here's the 'strace' of the above 'mv':
> >
> > $ strace mv -f path/to/pkg path
> > execve("/usr/bin/mv", ["mv", "-f", "path/to/pkg", "path"], [/* 118 vars */]) = 0
> > brk(NULL)                               = 0xcf3000
> > mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> > 0) = 0x7fde2ceb1000
> > access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
> > open("/usr/lib64/openmpi/lib/tls/x86_64/libselinux.so.1",
> > O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
> > stat("/usr/lib64/openmpi/lib/tls/x86_64", 0x7ffc6a3fb170) = -1 ENOENT
> > (No such file or directory)
> > open("/usr/lib64/openmpi/lib/tls/libselinux.so.1", O_RDONLY|O_CLOEXEC)
> > = -1 ENOENT (No such file or directory)
> > stat("/usr/lib64/openmpi/lib/tls", 0x7ffc6a3fb170) = -1 ENOENT (No
> > such file or directory)
> > open("/usr/lib64/openmpi/lib/x86_64/libselinux.so.1",
> > O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
> > stat("/usr/lib64/openmpi/lib/x86_64", 0x7ffc6a3fb170) = -1 ENOENT (No
> > such file or directory)
> > open("/usr/lib64/openmpi/lib/libselinux.so.1", O_RDONLY|O_CLOEXEC) =
> > -1 ENOENT (No such file or directory)
> > stat("/usr/lib64/openmpi/lib", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
> > open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
> > fstat(3, {st_mode=S_IFREG|0644, st_size=96960, ...}) = 0
> > mmap(NULL, 96960, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fde2ce99000
> > close(3)                                = 0
> > open("/lib64/libselinux.so.1", O_RDONLY|O_CLOEXEC) = 3
> > read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320i\0\0\0\0\0\0"...,
> > 832) = 832
> > fstat(3, {st_mode=S_IFREG|0755, st_size=155784, ...}) = 0
> > mmap(NULL, 2255184, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> > 0) = 0x7fde2ca6a000
> > mprotect(0x7fde2ca8e000, 2093056, PROT_NONE) = 0
> > mmap(0x7fde2cc8d000, 8192, PROT_READ|PROT_WRITE,
> > MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x23000) = 0x7fde2cc8d000
> > mmap(0x7fde2cc8f000, 6480, PROT_READ|PROT_WRITE,
> > MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2cc8f000
> > close(3)                                = 0
> > open("/usr/lib64/openmpi/lib/libacl.so.1", O_RDONLY|O_CLOEXEC) = -1
> > ENOENT (No such file or directory)
> > open("/lib64/libacl.so.1", O_RDONLY|O_CLOEXEC) = 3
> > read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\200\37\0\0\0\0\0\0"...,
> > 832) = 832
> > fstat(3, {st_mode=S_IFREG|0755, st_size=37056, ...}) = 0
> > mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> > 0) = 0x7fde2ce98000
> > mmap(NULL, 2130560, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> > 0) = 0x7fde2c861000
> > mprotect(0x7fde2c868000, 2097152, PROT_NONE) = 0
> > mmap(0x7fde2ca68000, 8192, PROT_READ|PROT_WRITE,
> > MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x7000) = 0x7fde2ca68000
> > close(3)                                = 0
> > open("/usr/lib64/openmpi/lib/libattr.so.1", O_RDONLY|O_CLOEXEC) = -1
> > ENOENT (No such file or directory)
> > open("/lib64/libattr.so.1", O_RDONLY|O_CLOEXEC) = 3
> > read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320\23\0\0\0\0\0\0"...,
> > 832) = 832
> > fstat(3, {st_mode=S_IFREG|0755, st_size=19896, ...}) = 0
> > mmap(NULL, 2113904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> > 0) = 0x7fde2c65c000
> > mprotect(0x7fde2c660000, 2093056, PROT_NONE) = 0
> > mmap(0x7fde2c85f000, 8192, PROT_READ|PROT_WRITE,
> > MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0x7fde2c85f000
> > close(3)                                = 0
> > open("/usr/lib64/openmpi/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = -1
> > ENOENT (No such file or directory)
> > open("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
> > read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\340$\2\0\0\0\0\0"...,
> > 832) = 832
> > fstat(3, {st_mode=S_IFREG|0755, st_size=2151672, ...}) = 0
> > mmap(NULL, 3981792, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> > 0) = 0x7fde2c28f000
> > mprotect(0x7fde2c451000, 2097152, PROT_NONE) = 0
> > mmap(0x7fde2c651000, 24576, PROT_READ|PROT_WRITE,
> > MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1c2000) = 0x7fde2c651000
> > mmap(0x7fde2c657000, 16864, PROT_READ|PROT_WRITE,
> > MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2c657000
> > close(3)                                = 0
> > open("/usr/lib64/openmpi/lib/libpcre.so.1", O_RDONLY|O_CLOEXEC) = -1
> > ENOENT (No such file or directory)
> > open("/lib64/libpcre.so.1", O_RDONLY|O_CLOEXEC) = 3
> > read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\360\25\0\0\0\0\0\0"...,
> > 832) = 832
> > fstat(3, {st_mode=S_IFREG|0755, st_size=402384, ...}) = 0
> > mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> > 0) = 0x7fde2ce97000
> > mmap(NULL, 2494984, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> > 0) = 0x7fde2c02d000
> > mprotect(0x7fde2c08d000, 2097152, PROT_NONE) = 0
> > mmap(0x7fde2c28d000, 8192, PROT_READ|PROT_WRITE,
> > MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x60000) = 0x7fde2c28d000
> > close(3)                                = 0
> > open("/usr/lib64/openmpi/lib/libdl.so.2", O_RDONLY|O_CLOEXEC) = -1
> > ENOENT (No such file or directory)
> > open("/lib64/libdl.so.2", O_RDONLY|O_CLOEXEC) = 3
> > read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\220\r\0\0\0\0\0\0"...,
> > 832) = 832
> > fstat(3, {st_mode=S_IFREG|0755, st_size=19288, ...}) = 0
> > mmap(NULL, 2109712, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> > 0) = 0x7fde2be29000
> > mprotect(0x7fde2be2b000, 2097152, PROT_NONE) = 0
> > mmap(0x7fde2c02b000, 8192, PROT_READ|PROT_WRITE,
> > MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0x7fde2c02b000
> > close(3)                                = 0
> > open("/usr/lib64/openmpi/lib/libpthread.so.0", O_RDONLY|O_CLOEXEC) =
> > -1 ENOENT (No such file or directory)
> > open("/lib64/libpthread.so.0", O_RDONLY|O_CLOEXEC) = 3
> > read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\260l\0\0\0\0\0\0"...,
> > 832) = 832
> > fstat(3, {st_mode=S_IFREG|0755, st_size=141968, ...}) = 0
> > mmap(NULL, 2208904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> > 0) = 0x7fde2bc0d000
> > mprotect(0x7fde2bc24000, 2093056, PROT_NONE) = 0
> > mmap(0x7fde2be23000, 8192, PROT_READ|PROT_WRITE,
> > MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x16000) = 0x7fde2be23000
> > mmap(0x7fde2be25000, 13448, PROT_READ|PROT_WRITE,
> > MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2be25000
> > close(3)                                = 0
> > mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> > 0) = 0x7fde2ce96000
> > mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> > 0) = 0x7fde2ce94000
> > arch_prctl(ARCH_SET_FS, 0x7fde2ce94840) = 0
> > mprotect(0x7fde2c651000, 16384, PROT_READ) = 0
> > mprotect(0x7fde2be23000, 4096, PROT_READ) = 0
> > mprotect(0x7fde2c02b000, 4096, PROT_READ) = 0
> > mprotect(0x7fde2c28d000, 4096, PROT_READ) = 0
> > mprotect(0x7fde2c85f000, 4096, PROT_READ) = 0
> > mprotect(0x7fde2ca68000, 4096, PROT_READ) = 0
> > mprotect(0x7fde2cc8d000, 4096, PROT_READ) = 0
> > mprotect(0x61d000, 4096, PROT_READ)     = 0
> > mprotect(0x7fde2ceb2000, 4096, PROT_READ) = 0
> > munmap(0x7fde2ce99000, 96960)           = 0
> > set_tid_address(0x7fde2ce94b10)         = 85521
> > set_robust_list(0x7fde2ce94b20, 24)     = 0
> > rt_sigaction(SIGRTMIN, {0x7fde2bc13790, [], SA_RESTORER|SA_SIGINFO,
> > 0x7fde2bc1c5d0}, NULL, 8) = 0
> > rt_sigaction(SIGRT_1, {0x7fde2bc13820, [],
> > SA_RESTORER|SA_RESTART|SA_SIGINFO, 0x7fde2bc1c5d0}, NULL, 8) = 0
> > rt_sigprocmask(SIG_UNBLOCK, [RTMIN RT_1], NULL, 8) = 0
> > getrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
> > statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096,
> > f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={0,
> > 0}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
> > statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096,
> > f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={0,
> > 0}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
> > stat("/sys/fs/selinux", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
> > brk(NULL)                               = 0xcf3000
> > brk(0xd14000)                           = 0xd14000
> > access("/etc/selinux/config", F_OK)     = 0
> > open("/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3
> > fstat(3, {st_mode=S_IFREG|0644, st_size=106075056, ...}) = 0
> > mmap(NULL, 106075056, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fde256e3000
> > close(3)                                = 0
> > geteuid()                               = 34002
> > ioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0
> > stat("path", {st_mode=S_IFDIR|0755, st_size=2, ...}) = 0
> > lstat("path/to/pkg", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
> > lstat("path/pkg", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
> > renameat2(AT_FDCWD, "path/to/pkg", AT_FDCWD, "path/pkg", 0) = -1
> > EEXIST (File exists)
> > open("/usr/share/locale/locale.alias", O_RDONLY|O_CLOEXEC) = 3
> > fstat(3, {st_mode=S_IFREG|0644, st_size=2502, ...}) = 0
> > mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> > 0) = 0x7fde2ceb0000
> > read(3, "# Locale name alias data base.\n#"..., 4096) = 2502
> > read(3, "", 4096)                       = 0
> > close(3)                                = 0
> > munmap(0x7fde2ceb0000, 4096)            = 0
> > open("/usr/share/locale/en_US.UTF-8/LC_MESSAGES/coreutils.mo",
> > O_RDONLY) = -1 ENOENT (No such file or directory)
> > open("/usr/share/locale/en_US.utf8/LC_MESSAGES/coreutils.mo",
> > O_RDONLY) = -1 ENOENT (No such file or directory)
> > open("/usr/share/locale/en_US/LC_MESSAGES/coreutils.mo", O_RDONLY) =
> > -1 ENOENT (No such file or directory)
> > open("/usr/share/locale/en.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY)
> > = -1 ENOENT (No such file or directory)
> > open("/usr/share/locale/en.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) =
> > -1 ENOENT (No such file or directory)
> > open("/usr/share/locale/en/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1
> > ENOENT (No such file or directory)
> > open("/usr/lib64/charset.alias", O_RDONLY|O_NOFOLLOW) = -1 ENOENT (No
> > such file or directory)
> > write(2, "mv: ", 4mv: )                     = 4
> > write(2, "cannot move \342\200\230path/to/pkg\342\200\231 to"...,
> > 47cannot move ?path/to/pkg? to ?path/pkg?) = 47
> > open("/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) =
> > -1 ENOENT (No such file or directory)
> > open("/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo", O_RDONLY) =
> > -1 ENOENT (No such file or directory)
> > open("/usr/share/locale/en_US/LC_MESSAGES/libc.mo", O_RDONLY) = -1
> > ENOENT (No such file or directory)
> > open("/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1
> > ENOENT (No such file or directory)
> > open("/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1
> > ENOENT (No such file or directory)
> > open("/usr/share/locale/en/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT
> > (No such file or directory)
> > write(2, ": File exists", 13: File exists)           = 13
> > write(2, "\n", 1
> > )                       = 1
> > lseek(0, 0, SEEK_CUR)                   = -1 ESPIPE (Illegal seek)
> > close(0)                                = 0
> > close(1)                                = 0
> > close(2)                                = 0
> > exit_group(1)                           = ?
> > +++ exited with 1 +++
> >
> > /Henrik
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From h@nk|n@rob|n @end|ng |rom gm@||@com  Wed May  8 02:01:16 2019
From: h@nk|n@rob|n @end|ng |rom gm@||@com (robin hankin)
Date: Wed, 8 May 2019 12:01:16 +1200
Subject: [Rd] openblas
Message-ID: <CAHHjBM7eRSRnxX7e41EAAV0Zu3tK+nem-c_HGX-2ix0VGu8Bug@mail.gmail.com>

Hello, macosx 10.13.6, Rdevel  r76458

I'm trying to compile against openblas to reproduce an error on the
CRAN check page (my package is clean under winbuilder and all but one
of the checks).   I've downloaded and installed openblas 0.3.7 but I
am not 100% sure that it is being used by R.

Using

./configure --with-blas="-lopenblas"

Then running R to discover the PID I get:


Rd % lsof -p 17960|egrep -i blas

R       17960 rhankin  txt    REG    1,8     189224 33471762
/Users/rhankin/Rd/lib/R/lib/libRblas.dylib


But it is not clear to me how to interpret this.  Am I using openblas
as intended?  I suspect not, for I cannot reproduce the error.   Can
anyone advise?


hankin.robin at gmail.com


From peter@|@ng|e|der @end|ng |rom gm@||@com  Wed May  8 03:03:52 2019
From: peter@|@ng|e|der @end|ng |rom gm@||@com (Peter Langfelder)
Date: Tue, 7 May 2019 18:03:52 -0700
Subject: [Rd] openblas
In-Reply-To: <CAHHjBM7eRSRnxX7e41EAAV0Zu3tK+nem-c_HGX-2ix0VGu8Bug@mail.gmail.com>
References: <CAHHjBM7eRSRnxX7e41EAAV0Zu3tK+nem-c_HGX-2ix0VGu8Bug@mail.gmail.com>
Message-ID: <CA+hbrhWVM9sL_Sgsf=6HXXMr5XwdbAxOV7S3DDTVD0TPdOeuug@mail.gmail.com>

I'm a linux guy so take the advice with a grain of salt... When you
run the configure script, look at the output at the end of the run, it
should either say

Options enabled:           shared BLAS, ...   (means you are using R BLAS)

or it should mention OpenBLAS in External libraries (meaning you are
using OpenBLAS).

You can also see the results in config.log of you search for BLAS.

Or you could use the old trick of replacing libRblas.dylib with a link
to the appropriate OpenBLAS dylib.

On Tue, May 7, 2019 at 5:01 PM robin hankin <hankin.robin at gmail.com> wrote:
>
> Hello, macosx 10.13.6, Rdevel  r76458
>
> I'm trying to compile against openblas to reproduce an error on the
> CRAN check page (my package is clean under winbuilder and all but one
> of the checks).   I've downloaded and installed openblas 0.3.7 but I
> am not 100% sure that it is being used by R.
>
> Using
>
> ./configure --with-blas="-lopenblas"
>
> Then running R to discover the PID I get:
>
>
> Rd % lsof -p 17960|egrep -i blas
>
> R       17960 rhankin  txt    REG    1,8     189224 33471762
> /Users/rhankin/Rd/lib/R/lib/libRblas.dylib
>
>
> But it is not clear to me how to interpret this.  Am I using openblas
> as intended?  I suspect not, for I cannot reproduce the error.   Can
> anyone advise?
>
>
> hankin.robin at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From peter@|@ng|e|der @end|ng |rom gm@||@com  Wed May  8 04:43:42 2019
From: peter@|@ng|e|der @end|ng |rom gm@||@com (Peter Langfelder)
Date: Tue, 7 May 2019 19:43:42 -0700
Subject: [Rd] openblas
In-Reply-To: <CAHHjBM5_uhvz9MKeSoTdk3MJNy+MzyL_uv1Bbgi4YUbXcXssYw@mail.gmail.com>
References: <CAHHjBM7eRSRnxX7e41EAAV0Zu3tK+nem-c_HGX-2ix0VGu8Bug@mail.gmail.com>
 <CA+hbrhWVM9sL_Sgsf=6HXXMr5XwdbAxOV7S3DDTVD0TPdOeuug@mail.gmail.com>
 <CAHHjBM5_uhvz9MKeSoTdk3MJNy+MzyL_uv1Bbgi4YUbXcXssYw@mail.gmail.com>
Message-ID: <CA+hbrhWueSWO+sSWSuA7DLRVdyhuxGGScXrUrbU+OeuujwH6+Q@mail.gmail.com>

(CCing the R-devel list, maybe someone will have a better answer.)

To be honest, I don't know how to. I wasn't able to configure R to use
OpenBLAS using the configure script and options on my Linux Fedora system.
I configure it without external BLAS, then replace the libRblas.dylib (.so
in my case) with a link to the OpenBLAS dynamic link library.

Peter

On Tue, May 7, 2019 at 7:39 PM robin hankin <hankin.robin at gmail.com> wrote:

> thanks Peter, I appreciate your advice here.
>
> ./configure --with-blas="-lopenblas"  --without-recommended-packages
>
>
> gives me
>
>
>
>
>   Interfaces supported:        X11, aqua, tcltk
>
>   External libraries:          readline, curl
>
>   Additional capabilities:     JPEG, NLS, ICU
>
>   Options enabled:             shared BLAS, R profiling
>
>
>   Capabilities skipped:        PNG, TIFF, cairo
>
>   Options not enabled:         memory profiling
>
>
>   Recommended packages:        no
>
>
>
> so it doesn't look like it's using the openBlas... how come the arguments
> to ./configure are being ignored?
>
>
>
> <hankin.robin at gmail.com>
> hankin.robin at gmail.com
>
> <hankin.robin at gmail.com>
>
> <hankin.robin at gmail.com>
>
>
> On Wed, May 8, 2019 at 1:04 PM Peter Langfelder <
> peter.langfelder at gmail.com> wrote:
>
>> I'm a linux guy so take the advice with a grain of salt... When you
>> run the configure script, look at the output at the end of the run, it
>> should either say
>>
>> Options enabled:           shared BLAS, ...   (means you are using R BLAS)
>>
>> or it should mention OpenBLAS in External libraries (meaning you are
>> using OpenBLAS).
>>
>> You can also see the results in config.log of you search for BLAS.
>>
>> Or you could use the old trick of replacing libRblas.dylib with a link
>> to the appropriate OpenBLAS dylib.
>>
>> On Tue, May 7, 2019 at 5:01 PM robin hankin <hankin.robin at gmail.com>
>> wrote:
>> >
>> > Hello, macosx 10.13.6, Rdevel  r76458
>> >
>> > I'm trying to compile against openblas to reproduce an error on the
>> > CRAN check page (my package is clean under winbuilder and all but one
>> > of the checks).   I've downloaded and installed openblas 0.3.7 but I
>> > am not 100% sure that it is being used by R.
>> >
>> > Using
>> >
>> > ./configure --with-blas="-lopenblas"
>> >
>> > Then running R to discover the PID I get:
>> >
>> >
>> > Rd % lsof -p 17960|egrep -i blas
>> >
>> > R       17960 rhankin  txt    REG    1,8     189224 33471762
>> > /Users/rhankin/Rd/lib/R/lib/libRblas.dylib
>> >
>> >
>> > But it is not clear to me how to interpret this.  Am I using openblas
>> > as intended?  I suspect not, for I cannot reproduce the error.   Can
>> > anyone advise?
>> >
>> >
>> > hankin.robin at gmail.com
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Wed May  8 04:59:58 2019
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 7 May 2019 21:59:58 -0500
Subject: [Rd] openblas
In-Reply-To: <CA+hbrhWueSWO+sSWSuA7DLRVdyhuxGGScXrUrbU+OeuujwH6+Q@mail.gmail.com>
References: <CAHHjBM7eRSRnxX7e41EAAV0Zu3tK+nem-c_HGX-2ix0VGu8Bug@mail.gmail.com>
 <CA+hbrhWVM9sL_Sgsf=6HXXMr5XwdbAxOV7S3DDTVD0TPdOeuug@mail.gmail.com>
 <CAHHjBM5_uhvz9MKeSoTdk3MJNy+MzyL_uv1Bbgi4YUbXcXssYw@mail.gmail.com>
 <CA+hbrhWueSWO+sSWSuA7DLRVdyhuxGGScXrUrbU+OeuujwH6+Q@mail.gmail.com>
Message-ID: <23762.17966.789809.889514@rob.eddelbuettel.com>


On 7 May 2019 at 19:43, Peter Langfelder wrote:
| (CCing the R-devel list, maybe someone will have a better answer.)
| 
| To be honest, I don't know how to. I wasn't able to configure R to use
| OpenBLAS using the configure script and options on my Linux Fedora system.
| I configure it without external BLAS, then replace the libRblas.dylib (.so
| in my case) with a link to the OpenBLAS dynamic link library.

We have been doing this for nearly 20 years in Debian.  The configure call
when building R is

	./configure --prefix=/usr			\
		    --with-cairo			\
                    [... stuff omitted ...]             \
		    $(atlas)		\
		    $(lapack)		\
		    --enable-R-profiling		\
		    --enable-R-shlib			\
		    --enable-memory-profiling		\
		    --without-recommended-packages	\
		    --build $(buildarch)

where $(atlas) and $(lapack) these days simply are

        atlas         = --with-blas
        [...]
        lapack	      = --with-lapack

(and that used to be different on different architectures a long time
ago). As I recall the --enable-R-shlib is also helpful.

With that we have R using _external_ LAPACK and BLAS allowing us to switch
seamlessly between, inter alia, reference BLAS, ATLAS, OpenBLAS and MKL (see
my blog for the last one). MKL appeared to be marginally faster than OpenBLAS
at a larger installation footprint.

Full details are in this (somewhat sprawling, my bad) file:

  https://salsa.debian.org/edd/r-base/blob/master/debian/rules

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From |uc@r @end|ng |rom |edor@project@org  Wed May  8 09:34:19 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 8 May 2019 09:34:19 +0200
Subject: [Rd] openblas
In-Reply-To: <CA+hbrhWueSWO+sSWSuA7DLRVdyhuxGGScXrUrbU+OeuujwH6+Q@mail.gmail.com>
References: <CAHHjBM7eRSRnxX7e41EAAV0Zu3tK+nem-c_HGX-2ix0VGu8Bug@mail.gmail.com>
 <CA+hbrhWVM9sL_Sgsf=6HXXMr5XwdbAxOV7S3DDTVD0TPdOeuug@mail.gmail.com>
 <CAHHjBM5_uhvz9MKeSoTdk3MJNy+MzyL_uv1Bbgi4YUbXcXssYw@mail.gmail.com>
 <CA+hbrhWueSWO+sSWSuA7DLRVdyhuxGGScXrUrbU+OeuujwH6+Q@mail.gmail.com>
Message-ID: <CALEXWq1R1mWBTTaaLbPJ5pgdXn=L6j4GAc00a8yLE80Ebz5Byw@mail.gmail.com>

On Wed, 8 May 2019 at 04:52, Peter Langfelder
<peter.langfelder at gmail.com> wrote:
>
> (CCing the R-devel list, maybe someone will have a better answer.)
>
> To be honest, I don't know how to. I wasn't able to configure R to use
> OpenBLAS using the configure script and options on my Linux Fedora system.
> I configure it without external BLAS, then replace the libRblas.dylib (.so
> in my case) with a link to the OpenBLAS dynamic link library.

R on Fedora uses openblas by default since Fedora 23. In fact, there's
a specific package, openblas-Rblas, that provides libRblas.so.

$ ll /usr/lib64/R/lib/
total 64544
-rwxr-xr-x. 1 root root 60113776 feb 28 13:37 libRblas.so
-rwxr-xr-x. 1 root root  1961880 mar 11 20:37 libRlapack.so
-rwxr-xr-x. 1 root root   182304 mar 11 20:37 libRrefblas.so
-rwxr-xr-x. 1 root root  3828104 mar 11 20:37 libR.so

R reference blas is installed as libRrefblas.so.

I?aki


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed May  8 11:46:14 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 8 May 2019 11:46:14 +0200
Subject: [Rd] [R] approx with NAs --> new argument 'na.rm=TRUE' ?!
In-Reply-To: <55393658-0A87-4708-99AF-C612F896AE01@quantitativebrokers.com>
References: <55393658-0A87-4708-99AF-C612F896AE01@quantitativebrokers.com>
Message-ID: <23762.42342.185323.76136@stat.math.ethz.ch>

>>>>> Robert Almgren 
>>>>>     on Fri, 3 May 2019 15:45:44 -0400 writes
[ __ to R-help __ -- here diverted to R-devel on purpose]

    > There is something I do not think is right in the approx()
    > function in base R, with method="constant" and in the
    > presence of NA values. I have 3.6.0, but the behavior
    > seems to be the same in earlier versions.

(of course; the behavior has been unchanged, and "as documented" forever)

    > My suggested fix is to add an "na.rm" argument to approx(), as in mean(). If this argument is FALSE, then NA values should be propagated into the output rather than being removed.

    > Details:

    > The documentation says 

    > "f: for method = "constant" a number between 0 and 1 inclusive, indicating a compromise between left- and right-continuous step functions. If y0 and y1 are the values to the left and right of the point then the value is y0 if f == 0, y1 if f == 1, and y0*(1-f)+y1*f for intermediate values. In this way the result is right-continuous for f == 0 and left-continuous for f == 1, even for non-finite y values."

    > This suggests to me that if the left value y0 is NA, and if f=0 (the default), then the interpolated value should be NA. (Regardless of the right value y1, see bug 15655 fixed in 2014.)

    > The documentation further says, below under "Details", that

    > "The inputs can contain missing values which are deleted."

    > The question is what is the appropriate behavior if one of the input values y is NA. Currently, approx() seems to interpret NA values as faulty data points, which should be deleted and the previous values carried forward (example below).

Well, "appropriate behavior" does not depend on just what you
want in a given case:  approx() had been designed (for S, ca 40
years ago) and well documented to do what it does now, so
there's really no bug ...

... but read on

    > But in many applications, especially with "constant" interpolation, an NA value is intended to mean that we really do not know the value in the next interval, or explicitly that there is no value. Therefore the NA should not be removed, but should be propagated forward into the output within the corresponding interval.

    > The situation is similar with functions like mean(). The presence of an NA value may mean either (a) we want to compute the mean without that value (na.rm=TRUE), or (b) we really are missing important information, we cannot determine the mean, and we should return NA (na.rm=FALSE).

    > Therefore, I propose that approx() also be given an na.rm argument, indicating whether we wish to delete NA values, or treat them as actual values on the corresponding interval. That option makes even more sense for approx() than for mean(), since the NA values apply only on small regions of the data range.

    > --Robert Almgren

I agree mostly with your thoughts above:  In some cases/applications, it would be
useful and even "appropriate" to be able to use  'na.rm=FALSE'
and have "NA carried forward".

What we should *not* do, I think,  is to change the default
behavior, even though 'na.rm=FALSE' *is* the default in many
other R functions, including your example mean().

Usually, we would have asked you here to now  file a *wishlist*
report (as opposed to a *bug* report) on R's bugzilla
( https://bugs.r-project.org/ ) ... but I have had some time and
interest, so I've now spent a bit of time (> 2 hrs) digging and trying,
notably also in the underlying C code, and it seems your
"wishlist item" should be fulfillable without too much more effort.

My change also works correspondingly for the
default  method = "linear".

Actually, if we think a bit longer about this (and broaden our horizon),
we note that  approx / approxfun really are about degree 0
("constant") and degree 1 interpolation splines, and we should
eventually also think about what  'na.rm=FALSE'  should/would
mean for the degree 3 interpolation splines provided by
spline() and splinefun().

Also, if you look at the 'rule' argument, it defines how
*extrapolation* should happen, the default rule=1, gives NA
where rule=2 uses "constant extrpolation" even for method="linear".
Now, I'd argue the following --- assume no NA's in x[] and (x,y)
ordered such that x[] is non-decreasing:
Assume one y missing, say y[k] and we don't want to just drop
the (x[k],y[k]).  This then is in some sense equivalent
to having _two_ separate sets of interpolation points:

 1)  (x[i], y[i]),  i = 1..(k-1)
 2)  (x[i], y[i]),  i = (k+1)..n

and really one could argue that one should use regular
interpolation in both groups, i.e., both x-intervals.
Then, for  x \in [x_{k-1}, x_{k+1}], i.e. between (hence
"outside") both x-intervals, one should use extrapolation, where
then, 'rule' should play a role.  But should we use
extrapolation from the left or from the right interval or from
the mean of the two?
For the default 'rule=1' that would not matter: we'd give NA in
any case, and so my current code (rule=1) would do the right thing.
And rule = c(1,2) or c(2,1)  would also result in NA (if you
take the mean of left and right), but what for rule = 2 ?

After some more experiments (*), I plan to commit my current
version of this to R-devel, so you and others can look at it and
suggest (complete!) patches if desired.
This would only be in *released* R version x.y.0 in ca April 2020..

------------------------------------------------------------------------
*) E.g., what should happen with  na.rm=FALSE and NA's in x[] ?
  Currently (in my version):

     > x2 <- c(1,NA,3:5)
     > approx(x2, x2, na.rm=FALSE) ## -->
     Error in if (!ordered && is.unsorted(x, na.rm = na.rm)) { : 
       missing value where TRUE/FALSE needed
     > approx(x2, x2, method="constant", na.rm=FALSE)
     Error in if (!ordered && is.unsorted(x, na.rm = na.rm)) { : 
       missing value where TRUE/FALSE needed
     > 

   I think an error is "fine" here, but one could also think
   approx()  "should" be more helpful here, and remove (x,y) pairs
   with missing values in x[] in all cases.
------------------------------------------------------------------------

Martin Maechler
ETH Zurich  &  R Core team


    > Example:

    > : R --vanilla

    > R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
    > Copyright (C) 2019 The R Foundation for Statistical Computing
    > Platform: x86_64-apple-darwin15.6.0 (64-bit)
    > ...

    >> t1 <- 1:5
    >> x1 <- c( 1, as.numeric(NA), 3, as.numeric(NA), 5 )
    >> print(data.frame(t1,x1))
    > t1 x1
    > 1  1  1
    > 2  2 NA   <-- we do not know the value between t=2 and t=3
    > 3  3  3
    > 4  4 NA   <-- we do not know the value between t=4 and t=5
    > 5  5  5
    >> X <- approx( t1, x1, (1:4) + 0.5, method='constant', rule=c(1,2) )
    >> print(data.frame(X))
    > x y
    > 1 1.5 1
    > 2 2.5 1   <---- I believe that these two values should be NA
    > 3 3.5 3
    > 4 4.5 3   <---- I believe that these two values should be NA

    > --
    > Quantitative Brokers         http://www.quantitativebrokers.com




    > -- 

















    > CONFIDENTIALITY NOTICE: This e-mail and any attachments=...{{dropped:23}}

    > ______________________________________________
    > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
    > https://stat.ethz.ch/mailman/listinfo/r-help
    > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
    > and provide commented, minimal, self-contained, reproducible code.


From r@||@@tubner @end|ng |rom d@q@n@@com  Wed May  8 18:00:04 2019
From: r@||@@tubner @end|ng |rom d@q@n@@com (Ralf Stubner)
Date: Wed, 8 May 2019 18:00:04 +0200
Subject: [Rd] openblas
In-Reply-To: <CALEXWq1R1mWBTTaaLbPJ5pgdXn=L6j4GAc00a8yLE80Ebz5Byw@mail.gmail.com>
References: <CAHHjBM7eRSRnxX7e41EAAV0Zu3tK+nem-c_HGX-2ix0VGu8Bug@mail.gmail.com>
 <CA+hbrhWVM9sL_Sgsf=6HXXMr5XwdbAxOV7S3DDTVD0TPdOeuug@mail.gmail.com>
 <CAHHjBM5_uhvz9MKeSoTdk3MJNy+MzyL_uv1Bbgi4YUbXcXssYw@mail.gmail.com>
 <CA+hbrhWueSWO+sSWSuA7DLRVdyhuxGGScXrUrbU+OeuujwH6+Q@mail.gmail.com>
 <CALEXWq1R1mWBTTaaLbPJ5pgdXn=L6j4GAc00a8yLE80Ebz5Byw@mail.gmail.com>
Message-ID: <4172cc6d-afa8-62e6-ec10-28af578d10fd@daqana.com>

On 08.05.19 09:34, I?aki Ucar wrote:
> On Wed, 8 May 2019 at 04:52, Peter Langfelder
> <peter.langfelder at gmail.com> wrote:
>>
>> (CCing the R-devel list, maybe someone will have a better answer.)
>>
>> To be honest, I don't know how to. I wasn't able to configure R to use
>> OpenBLAS using the configure script and options on my Linux Fedora system.
>> I configure it without external BLAS, then replace the libRblas.dylib (.so
>> in my case) with a link to the OpenBLAS dynamic link library.
> 
> R on Fedora uses openblas by default since Fedora 23. In fact, there's
> a specific package, openblas-Rblas, that provides libRblas.so.

AFAIK a single-threaded OpenBLAS is used. When compiling R from source
on a CentOS system I have used the configure option
'--with-blas="-lopenblasp"' to link with the pthread version of OpenBLAS.

cheerio
ralf

-- 
Ralf Stubner
Senior Software Engineer / Trainer

daqana GmbH
Dortustra?e 48
14467 Potsdam

T: +49 331 23 61 93 11
F: +49 331 23 61 93 90
M: +49 162 20 91 196
Mail: ralf.stubner at daqana.com

Sitz: Potsdam
Register: AG Potsdam HRB 27966
Ust.-IdNr.: DE300072622
Gesch?ftsf?hrer: Dr.-Ing. Stefan Knirsch, Prof. Dr. Dr. Karl-Kuno Kunze


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190508/47c58449/attachment.sig>

From peter@|@ng|e|der @end|ng |rom gm@||@com  Wed May  8 18:14:45 2019
From: peter@|@ng|e|der @end|ng |rom gm@||@com (Peter Langfelder)
Date: Wed, 8 May 2019 09:14:45 -0700
Subject: [Rd] openblas
In-Reply-To: <4172cc6d-afa8-62e6-ec10-28af578d10fd@daqana.com>
References: <CAHHjBM7eRSRnxX7e41EAAV0Zu3tK+nem-c_HGX-2ix0VGu8Bug@mail.gmail.com>
 <CA+hbrhWVM9sL_Sgsf=6HXXMr5XwdbAxOV7S3DDTVD0TPdOeuug@mail.gmail.com>
 <CAHHjBM5_uhvz9MKeSoTdk3MJNy+MzyL_uv1Bbgi4YUbXcXssYw@mail.gmail.com>
 <CA+hbrhWueSWO+sSWSuA7DLRVdyhuxGGScXrUrbU+OeuujwH6+Q@mail.gmail.com>
 <CALEXWq1R1mWBTTaaLbPJ5pgdXn=L6j4GAc00a8yLE80Ebz5Byw@mail.gmail.com>
 <4172cc6d-afa8-62e6-ec10-28af578d10fd@daqana.com>
Message-ID: <CA+hbrhWABoRy2LKcJZFU_a8U3JEaGbT0svK+_xuwE-TaxiQYcg@mail.gmail.com>

On Wed, May 8, 2019 at 9:00 AM Ralf Stubner <ralf.stubner at daqana.com> wrote:

> AFAIK a single-threaded OpenBLAS is used. When compiling R from source
> on a CentOS system I have used the configure option
> '--with-blas="-lopenblasp"' to link with the pthread version of OpenBLAS.

Yes, that's the right incantation. Thanks for solving it for me...

Peter


From |uc@r @end|ng |rom |edor@project@org  Wed May  8 18:21:13 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 8 May 2019 18:21:13 +0200
Subject: [Rd] openblas
In-Reply-To: <4172cc6d-afa8-62e6-ec10-28af578d10fd@daqana.com>
References: <CAHHjBM7eRSRnxX7e41EAAV0Zu3tK+nem-c_HGX-2ix0VGu8Bug@mail.gmail.com>
 <CA+hbrhWVM9sL_Sgsf=6HXXMr5XwdbAxOV7S3DDTVD0TPdOeuug@mail.gmail.com>
 <CAHHjBM5_uhvz9MKeSoTdk3MJNy+MzyL_uv1Bbgi4YUbXcXssYw@mail.gmail.com>
 <CA+hbrhWueSWO+sSWSuA7DLRVdyhuxGGScXrUrbU+OeuujwH6+Q@mail.gmail.com>
 <CALEXWq1R1mWBTTaaLbPJ5pgdXn=L6j4GAc00a8yLE80Ebz5Byw@mail.gmail.com>
 <4172cc6d-afa8-62e6-ec10-28af578d10fd@daqana.com>
Message-ID: <CALEXWq2drnPtYCm=p9rSaYx=o=59ZGbo7HvX_fh2ZF5a2CMJ8Q@mail.gmail.com>

On Wed, 8 May 2019 at 18:00, Ralf Stubner <ralf.stubner at daqana.com> wrote:
>
> On 08.05.19 09:34, I?aki Ucar wrote:
> > On Wed, 8 May 2019 at 04:52, Peter Langfelder
> > <peter.langfelder at gmail.com> wrote:
> >>
> >> (CCing the R-devel list, maybe someone will have a better answer.)
> >>
> >> To be honest, I don't know how to. I wasn't able to configure R to use
> >> OpenBLAS using the configure script and options on my Linux Fedora system.
> >> I configure it without external BLAS, then replace the libRblas.dylib (.so
> >> in my case) with a link to the OpenBLAS dynamic link library.
> >
> > R on Fedora uses openblas by default since Fedora 23. In fact, there's
> > a specific package, openblas-Rblas, that provides libRblas.so.
>
> AFAIK a single-threaded OpenBLAS is used.

Of course it is the serial version. It wouldn't be a good policy to
ship a threaded shared library by default.

> When compiling R from source
> on a CentOS system I have used the configure option
> '--with-blas="-lopenblasp"' to link with the pthread version of OpenBLAS.

CentOS uses the reference BLAS by default instead. It's a long story.
But both CentOS and Fedora configure R with --enable-BLAS-shlib, so
you don't need to recompile it to use an optimized version.

I?aki


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu May  9 14:43:47 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 9 May 2019 14:43:47 +0200
Subject: [Rd] Staged installation fail on some file systems
In-Reply-To: <CAFDcVCQFHw3yCLKms_3n-EHPgdfMxD4K768Qjfj-BKmDFhdGtA@mail.gmail.com>
References: <CAFDcVCTYc53f9COpNoeqbYGxWOE_CCrAbCiStDpo6YBmXG6Txg@mail.gmail.com>
 <b45f3d14-9842-f64c-bb1e-0f983b6f91f9@gmail.com>
 <CAFDcVCQFHw3yCLKms_3n-EHPgdfMxD4K768Qjfj-BKmDFhdGtA@mail.gmail.com>
Message-ID: <65085e74-4de7-5af5-ebfa-24bdb7513a7f@gmail.com>

On 5/7/19 6:18 PM, Henrik Bengtsson wrote:
> On Tue, May 7, 2019 at 9:05 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> Thanks for the report.  According to my reading, this use of "mv" is ok
>> and the renameat2() call which the invocation of "mv" leads to is also
>> ok and allowed by POSIX in this context. It could only fail with EEXIST
>> if the target directory (path/pkg) was not empty. So far I've not been
>> able to reproduce but we could fall back to copy like on Windows.
> Thanks for looking into this.  The purpose of the pre-existing target
> directory (path/pkg) is to act as a directory lock in order to lower
> the risk for parallel installation to take place at the same - is that
> correct?  For the same reason, you can't just do
>
> mv path/pkg path/pkg-quickly-now
> mv -f path/to/pkg path
> rmdir path/pkg-quickly-now
>
> because there's a potential race condition?

pkg (the final installation directory) should be empty when we are doing 
the move - and I understood from your report you actually reproduced 
outside R with the target directory being empty. Moving it away is the 
same as deleting it. Which is what I did now in R-devel, and which is 
what the current code has been doing already on Windows. It is a race 
condition, but I don't think it is avoidable and I doubt that 
"mv/rename" could be relied on doing the move atomically when the target 
directory exists, when not broken to do the move at all. Still, 
according to POSIX, mv/renameat should work in this context with the 
target being an empty directory, it works on my systems and that it does 
not on some is probably a bug. Likewise, from my reading of the 
documentation of MoveFileEx, the file rename should also work on Windows 
with the empty target directory with the flags we use (and it is also 
implied in CERT advisory FIO10-C), but contradicts what I am seeing on 
my system. This is why I had added the deletion on Windows before. 
Pragmatically, there is probably no point into trying to fine-tune this 
any more, because apart from the move happening, we don't have universal 
guarantees that the move will be atomic. But of course we have to make 
sure the installation always works, so thanks again for reporting this.

> For efficiency, to avoid copying, could one do "atomic" moves one
> layer down?  Something like:
>
> mv path/to/pkg/* path/to/pkg/.* path/pkg
> rmdir path/pkg
>
> because, in this case, we know that path/pkg/ is empty.

Yes, but as it seems that the bug in mv/renameat is rare, maybe this is 
not worth the added complexity/maintenance cost. And with the current 
solution - delete the target directory, but still try the move - we 
still have some hope of avoiding exposure of a partially installed 
package (a package that already has a DESCRIPTION file, but is not yet 
completely installed).

Best
Tomas

>
> /Henrik
>
>
>> Best
>> Tomas
>>
>>
>> On 5/5/19 4:35 AM, Henrik Bengtsson wrote:
>>> I'm observing that the new staged installation in R 3.6.0 can produce:
>>>
>>> mv: cannot move
>>> ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-codetools/00new/codetools?
>>> to ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?: File
>>> exists
>>> ERROR:   moving to final location failed
>>>
>>> on some file systems.
>>>
>>> # EXAMPLE
>>>
>>> $ R --vanilla
>>> R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
>>> Copyright (C) 2019 The R Foundation for Statistical Computing
>>> Platform: x86_64-pc-linux-gnu (64-bit)
>>> ...
>>>
>>>> install.packages("codetools", repos="https://cran.r-project.org")
>>> Installing package into ?/wynton/home/cbi/hb/R/x86_64-pc-linux-gnu-library/3.6?
>>> (as ?lib? is unspecified)
>>> trying URL 'https://cran.r-project.org/src/contrib/codetools_0.2-16.tar.gz'
>>> Content type 'application/x-gzip' length 12996 bytes (12 KB)
>>> ==================================================
>>> downloaded 12 KB
>>>
>>> * installing *source* package ?codetools? ...
>>> ** package ?codetools? successfully unpacked and MD5 sums checked
>>> ** using staged installation
>>> ** R
>>> ** byte-compile and prepare package for lazy loading
>>> ** help
>>> *** installing help indices
>>> ** building package indices
>>> ** testing if installed package can be loaded from temporary location
>>> mv: cannot move
>>> ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-codetools/00new/codetools?
>>> to ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?: File
>>> exists
>>> ERROR:   moving to final location failed
>>> * removing ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?
>>>
>>> The downloaded source packages are in
>>> ?/scratch/alice/Rtmp6UYDzu/downloaded_packages?
>>> Warning message:
>>> In install.packages("codetools", repos = "https://cran.r-project.org") :
>>> installation of package ?codetools? had non-zero exit status
>>>
>>>
>>> # WORKAROUND
>>>
>>> Disabling staged installation, for instance by setting environment
>>> variable 'R_INSTALL_STAGED=false' avoids this problem.
>>>
>>>
>>> # TROUBLESHOOTING
>>>
>>> I think it comes down to the following call in src/library/tools/R/install.R:
>>>
>>>     status <- system(paste("mv -f",
>>>                            shQuote(instdir),
>>>                            shQuote(dirname(final_instdir))))
>>>
>>> https://github.com/wch/r-source/blob/d253331f578814f919f150ffdf1fe581618079a3/src/library/tools/R/install.R#L1645-L1647
>>>
>>> which effectively does:
>>>
>>> $ mkdir -p path/pkg  ## empty final destination placeholder(?)
>>> $ mkdir -p path/to/pkg
>>> $ mv -f path/to/pkg path
>>>
>>> However, on one (and only one) of several systems I've tested, that
>>> 'mv' produce the error:
>>>
>>>     mv: cannot move ?path/to/pkg? to ?path/pkg?: File exists
>>>
>>> This is on a BeeGFS parallel file system.  I cannot tell if that 'mv
>>> -f' should work or not, or if it is even well defined.  FWIW, the
>>> above 'mv' does indeed work if I switch to another folder that is
>>> mounted on a different, NFS, file system, i.e. it is not kernel/OS
>>> specific (here CentOS 7.6.1810).
>>>
>>> If of any use, here's the 'strace' of the above 'mv':
>>>
>>> $ strace mv -f path/to/pkg path
>>> execve("/usr/bin/mv", ["mv", "-f", "path/to/pkg", "path"], [/* 118 vars */]) = 0
>>> brk(NULL)                               = 0xcf3000
>>> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
>>> 0) = 0x7fde2ceb1000
>>> access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
>>> open("/usr/lib64/openmpi/lib/tls/x86_64/libselinux.so.1",
>>> O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
>>> stat("/usr/lib64/openmpi/lib/tls/x86_64", 0x7ffc6a3fb170) = -1 ENOENT
>>> (No such file or directory)
>>> open("/usr/lib64/openmpi/lib/tls/libselinux.so.1", O_RDONLY|O_CLOEXEC)
>>> = -1 ENOENT (No such file or directory)
>>> stat("/usr/lib64/openmpi/lib/tls", 0x7ffc6a3fb170) = -1 ENOENT (No
>>> such file or directory)
>>> open("/usr/lib64/openmpi/lib/x86_64/libselinux.so.1",
>>> O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
>>> stat("/usr/lib64/openmpi/lib/x86_64", 0x7ffc6a3fb170) = -1 ENOENT (No
>>> such file or directory)
>>> open("/usr/lib64/openmpi/lib/libselinux.so.1", O_RDONLY|O_CLOEXEC) =
>>> -1 ENOENT (No such file or directory)
>>> stat("/usr/lib64/openmpi/lib", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
>>> open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
>>> fstat(3, {st_mode=S_IFREG|0644, st_size=96960, ...}) = 0
>>> mmap(NULL, 96960, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fde2ce99000
>>> close(3)                                = 0
>>> open("/lib64/libselinux.so.1", O_RDONLY|O_CLOEXEC) = 3
>>> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320i\0\0\0\0\0\0"...,
>>> 832) = 832
>>> fstat(3, {st_mode=S_IFREG|0755, st_size=155784, ...}) = 0
>>> mmap(NULL, 2255184, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
>>> 0) = 0x7fde2ca6a000
>>> mprotect(0x7fde2ca8e000, 2093056, PROT_NONE) = 0
>>> mmap(0x7fde2cc8d000, 8192, PROT_READ|PROT_WRITE,
>>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x23000) = 0x7fde2cc8d000
>>> mmap(0x7fde2cc8f000, 6480, PROT_READ|PROT_WRITE,
>>> MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2cc8f000
>>> close(3)                                = 0
>>> open("/usr/lib64/openmpi/lib/libacl.so.1", O_RDONLY|O_CLOEXEC) = -1
>>> ENOENT (No such file or directory)
>>> open("/lib64/libacl.so.1", O_RDONLY|O_CLOEXEC) = 3
>>> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\200\37\0\0\0\0\0\0"...,
>>> 832) = 832
>>> fstat(3, {st_mode=S_IFREG|0755, st_size=37056, ...}) = 0
>>> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
>>> 0) = 0x7fde2ce98000
>>> mmap(NULL, 2130560, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
>>> 0) = 0x7fde2c861000
>>> mprotect(0x7fde2c868000, 2097152, PROT_NONE) = 0
>>> mmap(0x7fde2ca68000, 8192, PROT_READ|PROT_WRITE,
>>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x7000) = 0x7fde2ca68000
>>> close(3)                                = 0
>>> open("/usr/lib64/openmpi/lib/libattr.so.1", O_RDONLY|O_CLOEXEC) = -1
>>> ENOENT (No such file or directory)
>>> open("/lib64/libattr.so.1", O_RDONLY|O_CLOEXEC) = 3
>>> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320\23\0\0\0\0\0\0"...,
>>> 832) = 832
>>> fstat(3, {st_mode=S_IFREG|0755, st_size=19896, ...}) = 0
>>> mmap(NULL, 2113904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
>>> 0) = 0x7fde2c65c000
>>> mprotect(0x7fde2c660000, 2093056, PROT_NONE) = 0
>>> mmap(0x7fde2c85f000, 8192, PROT_READ|PROT_WRITE,
>>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0x7fde2c85f000
>>> close(3)                                = 0
>>> open("/usr/lib64/openmpi/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = -1
>>> ENOENT (No such file or directory)
>>> open("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
>>> read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\340$\2\0\0\0\0\0"...,
>>> 832) = 832
>>> fstat(3, {st_mode=S_IFREG|0755, st_size=2151672, ...}) = 0
>>> mmap(NULL, 3981792, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
>>> 0) = 0x7fde2c28f000
>>> mprotect(0x7fde2c451000, 2097152, PROT_NONE) = 0
>>> mmap(0x7fde2c651000, 24576, PROT_READ|PROT_WRITE,
>>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1c2000) = 0x7fde2c651000
>>> mmap(0x7fde2c657000, 16864, PROT_READ|PROT_WRITE,
>>> MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2c657000
>>> close(3)                                = 0
>>> open("/usr/lib64/openmpi/lib/libpcre.so.1", O_RDONLY|O_CLOEXEC) = -1
>>> ENOENT (No such file or directory)
>>> open("/lib64/libpcre.so.1", O_RDONLY|O_CLOEXEC) = 3
>>> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\360\25\0\0\0\0\0\0"...,
>>> 832) = 832
>>> fstat(3, {st_mode=S_IFREG|0755, st_size=402384, ...}) = 0
>>> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
>>> 0) = 0x7fde2ce97000
>>> mmap(NULL, 2494984, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
>>> 0) = 0x7fde2c02d000
>>> mprotect(0x7fde2c08d000, 2097152, PROT_NONE) = 0
>>> mmap(0x7fde2c28d000, 8192, PROT_READ|PROT_WRITE,
>>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x60000) = 0x7fde2c28d000
>>> close(3)                                = 0
>>> open("/usr/lib64/openmpi/lib/libdl.so.2", O_RDONLY|O_CLOEXEC) = -1
>>> ENOENT (No such file or directory)
>>> open("/lib64/libdl.so.2", O_RDONLY|O_CLOEXEC) = 3
>>> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\220\r\0\0\0\0\0\0"...,
>>> 832) = 832
>>> fstat(3, {st_mode=S_IFREG|0755, st_size=19288, ...}) = 0
>>> mmap(NULL, 2109712, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
>>> 0) = 0x7fde2be29000
>>> mprotect(0x7fde2be2b000, 2097152, PROT_NONE) = 0
>>> mmap(0x7fde2c02b000, 8192, PROT_READ|PROT_WRITE,
>>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0x7fde2c02b000
>>> close(3)                                = 0
>>> open("/usr/lib64/openmpi/lib/libpthread.so.0", O_RDONLY|O_CLOEXEC) =
>>> -1 ENOENT (No such file or directory)
>>> open("/lib64/libpthread.so.0", O_RDONLY|O_CLOEXEC) = 3
>>> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\260l\0\0\0\0\0\0"...,
>>> 832) = 832
>>> fstat(3, {st_mode=S_IFREG|0755, st_size=141968, ...}) = 0
>>> mmap(NULL, 2208904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
>>> 0) = 0x7fde2bc0d000
>>> mprotect(0x7fde2bc24000, 2093056, PROT_NONE) = 0
>>> mmap(0x7fde2be23000, 8192, PROT_READ|PROT_WRITE,
>>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x16000) = 0x7fde2be23000
>>> mmap(0x7fde2be25000, 13448, PROT_READ|PROT_WRITE,
>>> MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2be25000
>>> close(3)                                = 0
>>> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
>>> 0) = 0x7fde2ce96000
>>> mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
>>> 0) = 0x7fde2ce94000
>>> arch_prctl(ARCH_SET_FS, 0x7fde2ce94840) = 0
>>> mprotect(0x7fde2c651000, 16384, PROT_READ) = 0
>>> mprotect(0x7fde2be23000, 4096, PROT_READ) = 0
>>> mprotect(0x7fde2c02b000, 4096, PROT_READ) = 0
>>> mprotect(0x7fde2c28d000, 4096, PROT_READ) = 0
>>> mprotect(0x7fde2c85f000, 4096, PROT_READ) = 0
>>> mprotect(0x7fde2ca68000, 4096, PROT_READ) = 0
>>> mprotect(0x7fde2cc8d000, 4096, PROT_READ) = 0
>>> mprotect(0x61d000, 4096, PROT_READ)     = 0
>>> mprotect(0x7fde2ceb2000, 4096, PROT_READ) = 0
>>> munmap(0x7fde2ce99000, 96960)           = 0
>>> set_tid_address(0x7fde2ce94b10)         = 85521
>>> set_robust_list(0x7fde2ce94b20, 24)     = 0
>>> rt_sigaction(SIGRTMIN, {0x7fde2bc13790, [], SA_RESTORER|SA_SIGINFO,
>>> 0x7fde2bc1c5d0}, NULL, 8) = 0
>>> rt_sigaction(SIGRT_1, {0x7fde2bc13820, [],
>>> SA_RESTORER|SA_RESTART|SA_SIGINFO, 0x7fde2bc1c5d0}, NULL, 8) = 0
>>> rt_sigprocmask(SIG_UNBLOCK, [RTMIN RT_1], NULL, 8) = 0
>>> getrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
>>> statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096,
>>> f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={0,
>>> 0}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
>>> statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096,
>>> f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={0,
>>> 0}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
>>> stat("/sys/fs/selinux", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
>>> brk(NULL)                               = 0xcf3000
>>> brk(0xd14000)                           = 0xd14000
>>> access("/etc/selinux/config", F_OK)     = 0
>>> open("/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3
>>> fstat(3, {st_mode=S_IFREG|0644, st_size=106075056, ...}) = 0
>>> mmap(NULL, 106075056, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fde256e3000
>>> close(3)                                = 0
>>> geteuid()                               = 34002
>>> ioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0
>>> stat("path", {st_mode=S_IFDIR|0755, st_size=2, ...}) = 0
>>> lstat("path/to/pkg", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
>>> lstat("path/pkg", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
>>> renameat2(AT_FDCWD, "path/to/pkg", AT_FDCWD, "path/pkg", 0) = -1
>>> EEXIST (File exists)
>>> open("/usr/share/locale/locale.alias", O_RDONLY|O_CLOEXEC) = 3
>>> fstat(3, {st_mode=S_IFREG|0644, st_size=2502, ...}) = 0
>>> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
>>> 0) = 0x7fde2ceb0000
>>> read(3, "# Locale name alias data base.\n#"..., 4096) = 2502
>>> read(3, "", 4096)                       = 0
>>> close(3)                                = 0
>>> munmap(0x7fde2ceb0000, 4096)            = 0
>>> open("/usr/share/locale/en_US.UTF-8/LC_MESSAGES/coreutils.mo",
>>> O_RDONLY) = -1 ENOENT (No such file or directory)
>>> open("/usr/share/locale/en_US.utf8/LC_MESSAGES/coreutils.mo",
>>> O_RDONLY) = -1 ENOENT (No such file or directory)
>>> open("/usr/share/locale/en_US/LC_MESSAGES/coreutils.mo", O_RDONLY) =
>>> -1 ENOENT (No such file or directory)
>>> open("/usr/share/locale/en.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY)
>>> = -1 ENOENT (No such file or directory)
>>> open("/usr/share/locale/en.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) =
>>> -1 ENOENT (No such file or directory)
>>> open("/usr/share/locale/en/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1
>>> ENOENT (No such file or directory)
>>> open("/usr/lib64/charset.alias", O_RDONLY|O_NOFOLLOW) = -1 ENOENT (No
>>> such file or directory)
>>> write(2, "mv: ", 4mv: )                     = 4
>>> write(2, "cannot move \342\200\230path/to/pkg\342\200\231 to"...,
>>> 47cannot move ?path/to/pkg? to ?path/pkg?) = 47
>>> open("/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) =
>>> -1 ENOENT (No such file or directory)
>>> open("/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo", O_RDONLY) =
>>> -1 ENOENT (No such file or directory)
>>> open("/usr/share/locale/en_US/LC_MESSAGES/libc.mo", O_RDONLY) = -1
>>> ENOENT (No such file or directory)
>>> open("/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1
>>> ENOENT (No such file or directory)
>>> open("/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1
>>> ENOENT (No such file or directory)
>>> open("/usr/share/locale/en/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT
>>> (No such file or directory)
>>> write(2, ": File exists", 13: File exists)           = 13
>>> write(2, "\n", 1
>>> )                       = 1
>>> lseek(0, 0, SEEK_CUR)                   = -1 ESPIPE (Illegal seek)
>>> close(0)                                = 0
>>> close(1)                                = 0
>>> close(2)                                = 0
>>> exit_group(1)                           = ?
>>> +++ exited with 1 +++
>>>
>>> /Henrik
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


From r@|mgren @end|ng |rom qu@nt|t@t|vebroker@@com  Wed May  8 18:36:08 2019
From: r@|mgren @end|ng |rom qu@nt|t@t|vebroker@@com (Robert Almgren)
Date: Wed, 8 May 2019 12:36:08 -0400
Subject: [Rd] [R] approx with NAs --> new argument 'na.rm=TRUE' ?!
In-Reply-To: <23762.42342.185323.76136@stat.math.ethz.ch>
References: <55393658-0A87-4708-99AF-C612F896AE01@quantitativebrokers.com>
 <23762.42342.185323.76136@stat.math.ethz.ch>
Message-ID: <F766B012-F323-4629-82CE-443E485BB2B7@quantitativebrokers.com>

On May 8, 2019, at 05:46 EDT, Martin Maechler wrote:
> [ __ to R-help __ -- here diverted to R-devel on purpose]

Thank you very much. I posted it to R-help because I was not sure I would be able to post to R-devel (will try it here)

> What we should *not* do, I think,  is to change the default behavior, even though 'na.rm=FALSE' *is* the default in many other R functions, including your example mean().

I completely agree that the default behavior should not change.

> ... it seems your "wishlist item" should be fulfillable without too much more effort.

Thank you so much for investing that time and effort.

> ... we should eventually also think about what  'na.rm=FALSE'  should/would mean for the degree 3 interpolation splines provided by spline() and splinefun().

I think that is somewhat less clear. The advantage of constant and linear interpolation is that the interpolation is local. So if one value is NA, you can have the interpolation function be NA only in the small interval that is affected by that.

For splines (at least if one requires a continuous second derivative), the model is not local. I think that spline interpolation is a case where it might make sense to simply delete the points with NA values.

> Assume one y missing, say y[k] and we don't want to just drop the (x[k],y[k]).  This then is in some sense equivalent to having _two_ separate sets of interpolation points:
> 1)  (x[i], y[i]),  i = 1..(k-1)
> 2)  (x[i], y[i]),  i = (k+1)..n

I am not sure that interpreting missing values as "internal endpoints" is necessarily the best way to look at it. For example, one might want to use different values of the "rule" parameter for internal endpoints than for the "real" endpoints. And as you point out, a gap in the middle is off the right end of the left set, and the left end of the right set, so which value of "rule" should be used?

And spline interpolation often does special things at the endpoints, like imposing a zero second derivative. That might not necessarily be what you want at an internal gap.

> *) E.g., what should happen with  na.rm=FALSE and NA's in x[] ?


NA's in x[] is a really tricky question and I don't think there is a good answer. For an NA in y[] with x[] not NA, the statement is "The y value at this particular location is missing or undefined, so let's mark as undefined only the interpolated values that depend explicitly on the missing value." A NA in x[], especially if the corresponding y[] is not NA, means "There is an additional data point, but we have no idea where it is. So any of our interpolated values anywhere might be wrong."

I think the only appropriate behavior is either (a) to remove points for which x[] is NA (if na.rm=TRUE), or (b) set all interpolated values to NA if any x[] is NA (if na.rm=FALSE). Or one could throw an error, which is sort of the same as (b) but can get annoying for large data sets.

Handling missing values in general is a hard problem, with more aspects than can be built into an interpolation function. With na.rm=TRUE, the mean() function assumes that missing values have the same mean as the rest of the data set; the sum() function assumes that missing values are zero (so they do not contribute to the sum).

The current behavior of the interpolation functions, in the proposed default case of na.rm=TRUE, in effect assumes that the missing values are whatever is consistent with the neighboring values. With na.rm=FALSE, they would keep the values, but set to NA only the local values.

                                    --Robert Almgren
--
Quantitative Brokers         http://www.quantitativebrokers.com




-- 

















CONFIDENTIALITY NOTICE: This e-mail and any attachments=...{{dropped:23}}


From @zwj|08 @end|ng |rom gm@||@com  Wed May  8 18:53:32 2019
From: @zwj|08 @end|ng |rom gm@||@com (=?UTF-8?B?5LuL6Z2e546L?=)
Date: Wed, 8 May 2019 08:53:32 -0800
Subject: [Rd] ALTREP: Design concept of alternative string
Message-ID: <CAGiFhPNwu=uT253zsfeD-xW5wtKjvhc_aum2AhvMp_OKQgXQPw@mail.gmail.com>

Hello from Bioconductor,

I'm developing a package to share R objects across clusters using boost
library. The concept is similar to mmap package:
https://cran.r-project.org/web/packages/mmap/index.html . However, I have a
problem when I was trying to write Dataptr_method for the alternative
string.

Based on my understanding, the return value of the Dataptr_method function
should be a vector of CHARSXP pointers. This design might be problematic in
two ways:

1. The behavior of Dataptr_method function is inconsistent for string and
the other ALTREP types. For the other types we return a vector of pure data
in memory allocated outside of R, but for the string, we return a vector of
R objects allocated by R.

2. It causes an unnecessary duplication of the data. In order to return
CHARSXPs to R, It forces me to allocate CHARSXPs and copy the entire data
to the R process. By contrast, for the other ALTREP types, say altreal, I
can just return the pointer to R if the data is in the memory.

The same problem occurs for Elt_method as well but is less serious since
only one CHARSXPs is allocated. Because my package is designed for sharing
a large R object. An allocation of the memory is undesired especially when
the data is read-only in the code(eg. print function). I'm not sure if
there are any solutions existed in the current R version, but I can imagine
three workarounds:

1. Change the behavior of the R functions and use get_element function
instead of Dataptr function. This would make the problem more
memory-friendly but still cause the allocation.

2. Return a vector of const char* in Dataptr method. It would be very
efficient and consistent with the return values of the other ALTREP types.

3. Provide an alternative CHARSXP. This might be the best solution since
STRSXP behaves more like a list instead of a string, so an alternative
CHARSXP fits the concept of ALTREP better.

Since I'm not an expert in R so I might post a solved problem. I would be
very happy and appreciate any suggestions regarding this problem.

Best,
Jiefei

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Thu May  9 20:07:30 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 9 May 2019 11:07:30 -0700
Subject: [Rd] ALTREP: Design concept of alternative string
In-Reply-To: <CAGiFhPNwu=uT253zsfeD-xW5wtKjvhc_aum2AhvMp_OKQgXQPw@mail.gmail.com>
References: <CAGiFhPNwu=uT253zsfeD-xW5wtKjvhc_aum2AhvMp_OKQgXQPw@mail.gmail.com>
Message-ID: <CAD4oTHHtKJTE=Se0nupy+GK6P3S84EBeXL+EXf44+VfGFBPNLg@mail.gmail.com>

Hi Jiefei,

The issue here is that while the memory consequences of what you're
describing may be true, this is simply how R handles character vector (what
you're calling string) values internally. It doesn't actually have anything
to do with ALTREP. Standard character vector SEXPs have an array of CHARSXP
pointers in their payload (what is returned by DATAPTR) as well.

As far as I know, this is important for string caching  and is actually
intended to save memory when the same string value appears many times in an
R session (and takes up more bytes than a pointer), though I haven't dug
around R's low-level string handling a ton. Either way though, this would
be a much much larger change than just changing the ALTREP API (which for
things like this explicitly and intentionally matches how the C api behaves
for non-ALTREP SEXPs for compatability).

Likewise the reason that get_element is going to return a CHARSXP, is
because that is what STRING_ELT(x, i) returns (equivalent to (SEXP)
DATAPTR(x)[i] ), so I don't think that can be changed either.

One other thing to note, though, is that if your'e asking for the dataptr
(and it isn't read only) then you're basically stepping out of ALTREP space
anyway, so it makes sense that a normally laid-out STRSXP (with it's
CHARSXP payload).

Best,
~G

On Thu, May 9, 2019 at 8:09 AM ??? <szwjf08 at gmail.com> wrote:

> Hello from Bioconductor,
>
> I'm developing a package to share R objects across clusters using boost
> library. The concept is similar to mmap package:
> https://cran.r-project.org/web/packages/mmap/index.html . However, I have
> a
> problem when I was trying to write Dataptr_method for the alternative
> string.
>
> Based on my understanding, the return value of the Dataptr_method function
> should be a vector of CHARSXP pointers. This design might be problematic in
> two ways:
>
> 1. The behavior of Dataptr_method function is inconsistent for string and
> the other ALTREP types. For the other types we return a vector of pure data
> in memory allocated outside of R, but for the string, we return a vector of
> R objects allocated by R.
>
> 2. It causes an unnecessary duplication of the data. In order to return
> CHARSXPs to R, It forces me to allocate CHARSXPs and copy the entire data
> to the R process. By contrast, for the other ALTREP types, say altreal, I
> can just return the pointer to R if the data is in the memory.
>
> The same problem occurs for Elt_method as well but is less serious since
> only one CHARSXPs is allocated. Because my package is designed for sharing
> a large R object. An allocation of the memory is undesired especially when
> the data is read-only in the code(eg. print function). I'm not sure if
> there are any solutions existed in the current R version, but I can imagine
> three workarounds:
>
> 1. Change the behavior of the R functions and use get_element function
> instead of Dataptr function. This would make the problem more
> memory-friendly but still cause the allocation.
>
> 2. Return a vector of const char* in Dataptr method. It would be very
> efficient and consistent with the return values of the other ALTREP types.
>
> 3. Provide an alternative CHARSXP. This might be the best solution since
> STRSXP behaves more like a list instead of a string, so an alternative
> CHARSXP fits the concept of ALTREP better.
>
> Since I'm not an expert in R so I might post a solved problem. I would be
> very happy and appreciate any suggestions regarding this problem.
>
> Best,
> Jiefei
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Fri May 10 18:05:30 2019
From: @zwj|08 @end|ng |rom gm@||@com (=?UTF-8?B?5LuL6Z2e546L?=)
Date: Fri, 10 May 2019 12:05:30 -0400
Subject: [Rd] ALTREP: Design concept of alternative string
In-Reply-To: <CAD4oTHHtKJTE=Se0nupy+GK6P3S84EBeXL+EXf44+VfGFBPNLg@mail.gmail.com>
References: <CAGiFhPNwu=uT253zsfeD-xW5wtKjvhc_aum2AhvMp_OKQgXQPw@mail.gmail.com>
 <CAD4oTHHtKJTE=Se0nupy+GK6P3S84EBeXL+EXf44+VfGFBPNLg@mail.gmail.com>
Message-ID: <CAGiFhPOSzxhqmsTKomJLeL3KC6aubmgyxrwqMAiiDWX_cu_wXw@mail.gmail.com>

Hi Gabriel,

Thanks for your explanation, I totally understand that it is almost
impossible to change the data structure of STRSXP. However, what I'm
proposing is not about changing the internal representation, but rather
about how we design and use the ALTREP API.

 I might do not state the workarounds clearly as English is not my first
language. Please let me explain them again in detail.

1. Update the existing R functions. When the ALTREP API Dataptr_or_null
returns NULL, use get_element instead(or as best as we can). I have seen
this pattern for some R functions, but somehow there are still some
functions left that do not follow this rule. For example, print function
will blindly call Dataptr (It even did not call Dataptr_or_null first) and
forces me to allocate a large chunk of memory in R. Updating these
functions would not completely solve the problem we are discussing but will
make it less serious.

2. Update the ALTREP API, return a vector of const char *, and internally
wrap them as CHARSXP. This can be a way to "hack" the R data structure with
only a little cost to create the CHARSXP header.

3. Provide character ALTREP. Instead of using string ALTREP, we can define
an alternative CHARSXP. By doing it we will completely solve the problem
since the return value of the Dataptr of CHARSXP is a const char*. We do
not have to change any internal representation of characters, it just
requires a remap of the DATAPTR macro( or function?).

Again, I sincerely appreciate your time and the detailed you provided. I'm
looking forward to seeing any method to solve this problem in the current
and future R release.

Best,
Jiefei

Gabriel Becker <gabembecker at gmail.com> ?2019?5?9??? ??2:07???

> Hi Jiefei,
>
> The issue here is that while the memory consequences of what you're
> describing may be true, this is simply how R handles character vector (what
> you're calling string) values internally. It doesn't actually have anything
> to do with ALTREP. Standard character vector SEXPs have an array of CHARSXP
> pointers in their payload (what is returned by DATAPTR) as well.
>
> As far as I know, this is important for string caching  and is actually
> intended to save memory when the same string value appears many times in an
> R session (and takes up more bytes than a pointer), though I haven't dug
> around R's low-level string handling a ton. Either way though, this would
> be a much much larger change than just changing the ALTREP API (which for
> things like this explicitly and intentionally matches how the C api behaves
> for non-ALTREP SEXPs for compatability).
>
> Likewise the reason that get_element is going to return a CHARSXP, is
> because that is what STRING_ELT(x, i) returns (equivalent to (SEXP)
> DATAPTR(x)[i] ), so I don't think that can be changed either.
>
> One other thing to note, though, is that if your'e asking for the dataptr
> (and it isn't read only) then you're basically stepping out of ALTREP space
> anyway, so it makes sense that a normally laid-out STRSXP (with it's
> CHARSXP payload).
>
> Best,
> ~G
>
> On Thu, May 9, 2019 at 8:09 AM ??? <szwjf08 at gmail.com> wrote:
>
>> Hello from Bioconductor,
>>
>> I'm developing a package to share R objects across clusters using boost
>> library. The concept is similar to mmap package:
>> https://cran.r-project.org/web/packages/mmap/index.html . However, I
>> have a
>> problem when I was trying to write Dataptr_method for the alternative
>> string.
>>
>> Based on my understanding, the return value of the Dataptr_method function
>> should be a vector of CHARSXP pointers. This design might be problematic
>> in
>> two ways:
>>
>> 1. The behavior of Dataptr_method function is inconsistent for string and
>> the other ALTREP types. For the other types we return a vector of pure
>> data
>> in memory allocated outside of R, but for the string, we return a vector
>> of
>> R objects allocated by R.
>>
>> 2. It causes an unnecessary duplication of the data. In order to return
>> CHARSXPs to R, It forces me to allocate CHARSXPs and copy the entire data
>> to the R process. By contrast, for the other ALTREP types, say altreal, I
>> can just return the pointer to R if the data is in the memory.
>>
>> The same problem occurs for Elt_method as well but is less serious since
>> only one CHARSXPs is allocated. Because my package is designed for sharing
>> a large R object. An allocation of the memory is undesired especially when
>> the data is read-only in the code(eg. print function). I'm not sure if
>> there are any solutions existed in the current R version, but I can
>> imagine
>> three workarounds:
>>
>> 1. Change the behavior of the R functions and use get_element function
>> instead of Dataptr function. This would make the problem more
>> memory-friendly but still cause the allocation.
>>
>> 2. Return a vector of const char* in Dataptr method. It would be very
>> efficient and consistent with the return values of the other ALTREP types.
>>
>> 3. Provide an alternative CHARSXP. This might be the best solution since
>> STRSXP behaves more like a list instead of a string, so an alternative
>> CHARSXP fits the concept of ALTREP better.
>>
>> Since I'm not an expert in R so I might post a solved problem. I would be
>> very happy and appreciate any suggestions regarding this problem.
>>
>> Best,
>> Jiefei
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

-- 
Jiefei Wang
Room 2-501,Tangxuan,QilinGarden,NanshanDistrict,Shenzhen
Guangdong,China
Phone (+86)18312589584
szwjf8 at gmail.com

	[[alternative HTML version deleted]]


From |uke-t|erney @end|ng |rom u|ow@@edu  Fri May 10 18:22:51 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Fri, 10 May 2019 16:22:51 +0000
Subject: [Rd] 
 [External] Re:  ALTREP: Design concept of alternative string
In-Reply-To: <CAGiFhPOSzxhqmsTKomJLeL3KC6aubmgyxrwqMAiiDWX_cu_wXw@mail.gmail.com>
References: <CAGiFhPNwu=uT253zsfeD-xW5wtKjvhc_aum2AhvMp_OKQgXQPw@mail.gmail.com>
 <CAD4oTHHtKJTE=Se0nupy+GK6P3S84EBeXL+EXf44+VfGFBPNLg@mail.gmail.com>
 <CAGiFhPOSzxhqmsTKomJLeL3KC6aubmgyxrwqMAiiDWX_cu_wXw@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1905101113250.2842@luke-Latitude-7480>

On Fri, 10 May 2019, ??? wrote:

> Hi Gabriel,
>
> Thanks for your explanation, I totally understand that it is almost
> impossible to change the data structure of STRSXP. However, what I'm
> proposing is not about changing the internal representation, but rather
> about how we design and use the ALTREP API.
>
> I might do not state the workarounds clearly as English is not my first
> language. Please let me explain them again in detail.
>
> 1. Update the existing R functions. When the ALTREP API Dataptr_or_null
> returns NULL, use get_element instead(or as best as we can). I have seen
> this pattern for some R functions, but somehow there are still some
> functions left that do not follow this rule. For example, print function
> will blindly call Dataptr (It even did not call Dataptr_or_null first) and
> forces me to allocate a large chunk of memory in R. Updating these
> functions would not completely solve the problem we are discussing but will
> make it less serious.

Fixing print() is pretty high priority (I thought we had done so for R
3.6.0 but apparently not). Others will come in over time; filing a
request with bugzilla is one way to push up priority for a particular
function or set of functions.

Keep in mind that one option for your implementation is to signal an
error if a data pointer is requested. You could make that dependent on
some sort of option setting or make the error continuable by providing
a restart.

> 2. Update the ALTREP API, return a vector of const char *, and internally
> wrap them as CHARSXP. This can be a way to "hack" the R data structure with
> only a little cost to create the CHARSXP header.

That doesn't seem feasible but I may not be understanding what you mean.

> 3. Provide character ALTREP. Instead of using string ALTREP, we can define
> an alternative CHARSXP. By doing it we will completely solve the problem
> since the return value of the Dataptr of CHARSXP is a const char*. We do
> not have to change any internal representation of characters, it just
> requires a remap of the DATAPTR macro( or function?).

Allowing ALTREP CHARSXP objects might be something to consider in the
future, but the combination of caching and encoding issues make that
very complex. I'm nat sure it would be a good idea or even
feasible. In any case it won't happen anytime soon.

Best,

luke

>
> Again, I sincerely appreciate your time and the detailed you provided. I'm
> looking forward to seeing any method to solve this problem in the current
> and future R release.
>
> Best,
> Jiefei
>
> Gabriel Becker <gabembecker at gmail.com> ?2019?5?9??? ??2:07???
>
>> Hi Jiefei,
>>
>> The issue here is that while the memory consequences of what you're
>> describing may be true, this is simply how R handles character vector (what
>> you're calling string) values internally. It doesn't actually have anything
>> to do with ALTREP. Standard character vector SEXPs have an array of CHARSXP
>> pointers in their payload (what is returned by DATAPTR) as well.
>>
>> As far as I know, this is important for string caching  and is actually
>> intended to save memory when the same string value appears many times in an
>> R session (and takes up more bytes than a pointer), though I haven't dug
>> around R's low-level string handling a ton. Either way though, this would
>> be a much much larger change than just changing the ALTREP API (which for
>> things like this explicitly and intentionally matches how the C api behaves
>> for non-ALTREP SEXPs for compatability).
>>
>> Likewise the reason that get_element is going to return a CHARSXP, is
>> because that is what STRING_ELT(x, i) returns (equivalent to (SEXP)
>> DATAPTR(x)[i] ), so I don't think that can be changed either.
>>
>> One other thing to note, though, is that if your'e asking for the dataptr
>> (and it isn't read only) then you're basically stepping out of ALTREP space
>> anyway, so it makes sense that a normally laid-out STRSXP (with it's
>> CHARSXP payload).
>>
>> Best,
>> ~G
>>
>> On Thu, May 9, 2019 at 8:09 AM ??? <szwjf08 at gmail.com> wrote:
>>
>>> Hello from Bioconductor,
>>>
>>> I'm developing a package to share R objects across clusters using boost
>>> library. The concept is similar to mmap package:
>>> https://cran.r-project.org/web/packages/mmap/index.html . However, I
>>> have a
>>> problem when I was trying to write Dataptr_method for the alternative
>>> string.
>>>
>>> Based on my understanding, the return value of the Dataptr_method function
>>> should be a vector of CHARSXP pointers. This design might be problematic
>>> in
>>> two ways:
>>>
>>> 1. The behavior of Dataptr_method function is inconsistent for string and
>>> the other ALTREP types. For the other types we return a vector of pure
>>> data
>>> in memory allocated outside of R, but for the string, we return a vector
>>> of
>>> R objects allocated by R.
>>>
>>> 2. It causes an unnecessary duplication of the data. In order to return
>>> CHARSXPs to R, It forces me to allocate CHARSXPs and copy the entire data
>>> to the R process. By contrast, for the other ALTREP types, say altreal, I
>>> can just return the pointer to R if the data is in the memory.
>>>
>>> The same problem occurs for Elt_method as well but is less serious since
>>> only one CHARSXPs is allocated. Because my package is designed for sharing
>>> a large R object. An allocation of the memory is undesired especially when
>>> the data is read-only in the code(eg. print function). I'm not sure if
>>> there are any solutions existed in the current R version, but I can
>>> imagine
>>> three workarounds:
>>>
>>> 1. Change the behavior of the R functions and use get_element function
>>> instead of Dataptr function. This would make the problem more
>>> memory-friendly but still cause the allocation.
>>>
>>> 2. Return a vector of const char* in Dataptr method. It would be very
>>> efficient and consistent with the return values of the other ALTREP types.
>>>
>>> 3. Provide an alternative CHARSXP. This might be the best solution since
>>> STRSXP behaves more like a list instead of a string, so an alternative
>>> CHARSXP fits the concept of ALTREP better.
>>>
>>> Since I'm not an expert in R so I might post a solved problem. I would be
>>> very happy and appreciate any suggestions regarding this problem.
>>>
>>> Best,
>>> Jiefei
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri May 10 18:24:29 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 10 May 2019 18:24:29 +0200
Subject: [Rd] [R] approx with NAs --> new argument 'na.rm=TRUE' ?!
In-Reply-To: <23762.42342.185323.76136@stat.math.ethz.ch>
References: <55393658-0A87-4708-99AF-C612F896AE01@quantitativebrokers.com>
 <23762.42342.185323.76136@stat.math.ethz.ch>
Message-ID: <23765.42429.851020.410399@stat.math.ethz.ch>

I have now committed a version "fulfilling" your wish, partly at
least, to R-devel .

In the new   approx(*, na.rm=FALSE)  cases,
the result of how  NA's are treated  does depend on the
4 different extrapolation rules {1, 2, 1:2, 2:1}

The main reason was that I kept the low level code in C to do
+- what it did before  which automatically was using 'rule' to
determine these results.

The help file contains nice examples.
Here are some of its results  --- comments are very welcome --

> ### Treatment of 'NA's -- are kept if  na.rm=FALSE :
> 
> xn <- 1:4
> yn <- c(1,NA,3:4)
> xout <- (1:9)/2
> ## Default behavior (na.rm = TRUE): NA's omitted; extrapolation gives NA
> data.frame(approx(xn,yn, xout))
    x   y
1 0.5  NA
2 1.0 1.0
3 1.5 1.5
4 2.0 2.0
5 2.5 2.5
6 3.0 3.0
7 3.5 3.5
8 4.0 4.0
9 4.5  NA
> data.frame(approx(xn,yn, xout, rule = 2))# -> *constant* extrapolation
    x   y
1 0.5 1.0
2 1.0 1.0
3 1.5 1.5
4 2.0 2.0
5 2.5 2.5
6 3.0 3.0
7 3.5 3.5
8 4.0 4.0
9 4.5 4.0
> ## New (2019-2020)  na.rm = FALSE: NA's are "kept"
> data.frame(approx(xn,yn, xout, na.rm=FALSE, rule = 2))
    x   y
1 0.5 1.0
2 1.0 1.0
3 1.5  NA
4 2.0  NA
5 2.5  NA
6 3.0 3.0
7 3.5 3.5
8 4.0 4.0
9 4.5 4.0
> data.frame(approx(xn,yn, xout, na.rm=FALSE, rule = 2, method="constant"))
    x  y
1 0.5  1
2 1.0  1
3 1.5  1
4 2.0 NA
5 2.5 NA
6 3.0  3
7 3.5  3
8 4.0  4
9 4.5  4
> 
> ## NA's in x[] are not allowed:
> stopifnot(inherits( try( approx(yn,yn, na.rm=FALSE) ), "try-error"))
Error in approx(yn, yn, na.rm = FALSE) : 
  approx(x,y, .., na.rm=FALSE): NA values in x are not allowed
> 
> ## Give a nice overview of all possibilities  rule * method * na.rm :
> ##             -----------------------------  ====   ======   =====
> ## extrapolations "N":= NA;   "C":= Constant :
> rules <- list(N=1, C=2, NC=1:2, CN=2:1)
> methods <- c("constant","linear")
> ry <- sapply(rules, function(R) {
+        sapply(methods, function(M)
+         sapply(setNames(,c(TRUE,FALSE)), function(na.)
+                  approx(xn, yn, xout=xout, method=M, rule=R, na.rm=na.)$y),
+         simplify="array")
+    }, simplify="array")
> names(dimnames(ry)) <- c("x = ", "na.rm", "method", "rule")
> dimnames(ry)[[1]] <- dn1 <- format(xout)
> ftable(aperm(ry, 4:1)) # --> (4 * 2 * 2) x length(xout)  =  16 x 9 matrix
                    x =  0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5
rule method   na.rm                                         
N    constant TRUE        NA 1.0 1.0 1.0 1.0 3.0 3.0 4.0  NA
              FALSE       NA 1.0 1.0  NA  NA 3.0 3.0 4.0  NA
     linear   TRUE        NA 1.0 1.5 2.0 2.5 3.0 3.5 4.0  NA
              FALSE       NA 1.0  NA  NA  NA 3.0 3.5 4.0  NA
C    constant TRUE       1.0 1.0 1.0 1.0 1.0 3.0 3.0 4.0 4.0
              FALSE      1.0 1.0 1.0  NA  NA 3.0 3.0 4.0 4.0
     linear   TRUE       1.0 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.0
              FALSE      1.0 1.0  NA  NA  NA 3.0 3.5 4.0 4.0
NC   constant TRUE        NA 1.0 1.0 1.0 1.0 3.0 3.0 4.0 4.0
              FALSE       NA 1.0 1.0  NA  NA 3.0 3.0 4.0 4.0
     linear   TRUE        NA 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.0
              FALSE       NA 1.0  NA  NA  NA 3.0 3.5 4.0 4.0
CN   constant TRUE       1.0 1.0 1.0 1.0 1.0 3.0 3.0 4.0  NA
              FALSE      1.0 1.0 1.0  NA  NA 3.0 3.0 4.0  NA
     linear   TRUE       1.0 1.0 1.5 2.0 2.5 3.0 3.5 4.0  NA
              FALSE      1.0 1.0  NA  NA  NA 3.0 3.5 4.0  NA



>>>>> Martin Maechler 
>>>>>     on Wed, 8 May 2019 11:46:14 +0200 writes:

>>>>> Robert Almgren 
>>>>>     on Fri, 3 May 2019 15:45:44 -0400 writes
    > [ __ to R-help __ -- here diverted to R-devel on purpose]

    >> There is something I do not think is right in the approx()
    >> function in base R, with method="constant" and in the
    >> presence of NA values. I have 3.6.0, but the behavior
    >> seems to be the same in earlier versions.

    > (of course; the behavior has been unchanged, and "as documented" forever)

    >> My suggested fix is to add an "na.rm" argument to approx(), as in mean(). If this argument is FALSE, then NA values should be propagated into the output rather than being removed.

    >> Details:

    >> The documentation says 

    >> "f: for method = "constant" a number between 0 and 1 inclusive, indicating a compromise between left- and right-continuous step functions. If y0 and y1 are the values to the left and right of the point then the value is y0 if f == 0, y1 if f == 1, and y0*(1-f)+y1*f for intermediate values. In this way the result is right-continuous for f == 0 and left-continuous for f == 1, even for non-finite y values."

    >> This suggests to me that if the left value y0 is NA, and if f=0 (the default), then the interpolated value should be NA. (Regardless of the right value y1, see bug 15655 fixed in 2014.)

    >> The documentation further says, below under "Details", that

    >> "The inputs can contain missing values which are deleted."

    >> The question is what is the appropriate behavior if one of the input values y is NA. Currently, approx() seems to interpret NA values as faulty data points, which should be deleted and the previous values carried forward (example below).

    > Well, "appropriate behavior" does not depend on just what you
    > want in a given case:  approx() had been designed (for S, ca 40
    > years ago) and well documented to do what it does now, so
    > there's really no bug ...

    > ... but read on

    >> But in many applications, especially with "constant" interpolation, an NA value is intended to mean that we really do not know the value in the next interval, or explicitly that there is no value. Therefore the NA should not be removed, but should be propagated forward into the output within the corresponding interval.

    >> The situation is similar with functions like mean(). The presence of an NA value may mean either (a) we want to compute the mean without that value (na.rm=TRUE), or (b) we really are missing important information, we cannot determine the mean, and we should return NA (na.rm=FALSE).

    >> Therefore, I propose that approx() also be given an na.rm argument, indicating whether we wish to delete NA values, or treat them as actual values on the corresponding interval. That option makes even more sense for approx() than for mean(), since the NA values apply only on small regions of the data range.

    >> --Robert Almgren

    > I agree mostly with your thoughts above:  In some cases/applications, it would be
    > useful and even "appropriate" to be able to use  'na.rm=FALSE'
    > and have "NA carried forward".

    > What we should *not* do, I think,  is to change the default
    > behavior, even though 'na.rm=FALSE' *is* the default in many
    > other R functions, including your example mean().

    > Usually, we would have asked you here to now  file a *wishlist*
    > report (as opposed to a *bug* report) on R's bugzilla
    > ( https://bugs.r-project.org/ ) ... but I have had some time and
    > interest, so I've now spent a bit of time (> 2 hrs) digging and trying,
    > notably also in the underlying C code, and it seems your
    > "wishlist item" should be fulfillable without too much more effort.

    > My change also works correspondingly for the
    > default  method = "linear".

    > Actually, if we think a bit longer about this (and broaden our horizon),
    > we note that  approx / approxfun really are about degree 0
    > ("constant") and degree 1 interpolation splines, and we should
    > eventually also think about what  'na.rm=FALSE'  should/would
    > mean for the degree 3 interpolation splines provided by
    > spline() and splinefun().

    > Also, if you look at the 'rule' argument, it defines how
    > *extrapolation* should happen, the default rule=1, gives NA
    > where rule=2 uses "constant extrpolation" even for method="linear".
    > Now, I'd argue the following --- assume no NA's in x[] and (x,y)
    > ordered such that x[] is non-decreasing:
    > Assume one y missing, say y[k] and we don't want to just drop
    > the (x[k],y[k]).  This then is in some sense equivalent
    > to having _two_ separate sets of interpolation points:

    > 1)  (x[i], y[i]),  i = 1..(k-1)
    > 2)  (x[i], y[i]),  i = (k+1)..n

    > and really one could argue that one should use regular
    > interpolation in both groups, i.e., both x-intervals.
    > Then, for  x \in [x_{k-1}, x_{k+1}], i.e. between (hence
    > "outside") both x-intervals, one should use extrapolation, where
    > then, 'rule' should play a role.  But should we use
    > extrapolation from the left or from the right interval or from
    > the mean of the two?
    > For the default 'rule=1' that would not matter: we'd give NA in
    > any case, and so my current code (rule=1) would do the right thing.
    > And rule = c(1,2) or c(2,1)  would also result in NA (if you
    > take the mean of left and right), but what for rule = 2 ?

    > After some more experiments (*), I plan to commit my current
    > version of this to R-devel, so you and others can look at it and
    > suggest (complete!) patches if desired.
    > This would only be in *released* R version x.y.0 in ca April 2020..

    > ------------------------------------------------------------------------
    > *) E.g., what should happen with  na.rm=FALSE and NA's in x[] ?
    > Currently (in my version):

    >> x2 <- c(1,NA,3:5)
    >> approx(x2, x2, na.rm=FALSE) ## -->
    > Error in if (!ordered && is.unsorted(x, na.rm = na.rm)) { : 
    > missing value where TRUE/FALSE needed
    >> approx(x2, x2, method="constant", na.rm=FALSE)
    > Error in if (!ordered && is.unsorted(x, na.rm = na.rm)) { : 
    > missing value where TRUE/FALSE needed
    >> 

    > I think an error is "fine" here, but one could also think
    > approx()  "should" be more helpful here, and remove (x,y) pairs
    > with missing values in x[] in all cases.
    > ------------------------------------------------------------------------

    > Martin Maechler
    > ETH Zurich  &  R Core team


    >> Example:

    >> : R --vanilla

    >> R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
    >> Copyright (C) 2019 The R Foundation for Statistical Computing
    >> Platform: x86_64-apple-darwin15.6.0 (64-bit)
    >> ...

    >>> t1 <- 1:5
    >>> x1 <- c( 1, as.numeric(NA), 3, as.numeric(NA), 5 )
    >>> print(data.frame(t1,x1))
    >> t1 x1
    >> 1  1  1
    >> 2  2 NA   <-- we do not know the value between t=2 and t=3
    >> 3  3  3
    >> 4  4 NA   <-- we do not know the value between t=4 and t=5
    >> 5  5  5
    >>> X <- approx( t1, x1, (1:4) + 0.5, method='constant', rule=c(1,2) )
    >>> print(data.frame(X))
    >> x y
    >> 1 1.5 1
    >> 2 2.5 1   <---- I believe that these two values should be NA
    >> 3 3.5 3
    >> 4 4.5 3   <---- I believe that these two values should be NA

    >> --
    >> Quantitative Brokers         http://www.quantitativebrokers.com




    >> -- 

















    >> CONFIDENTIALITY NOTICE: This e-mail and any attachments=...{{dropped:23}}

    >> ______________________________________________
    >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
    >> https://stat.ethz.ch/mailman/listinfo/r-help
    >> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
    >> and provide commented, minimal, self-contained, reproducible code.

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From x|e @end|ng |rom y|hu|@n@me  Fri May 10 21:31:17 2019
From: x|e @end|ng |rom y|hu|@n@me (Yihui Xie)
Date: Fri, 10 May 2019 14:31:17 -0500
Subject: [Rd] Should requireNamespace(quietly = TRUE) suppress messages
 about overwritten S3 methods?
Message-ID: <CANROs4cuv2h+da2E=ZMfOmxi1TTyg+fHHfza-x6T_wz6AxEPKQ@mail.gmail.com>

Hi,

In the NEWS of R 3.6.0:

> When loading namespaces, S3 method registrations which overwrite previous registrations are now noted by default (using packageStartupMessage()).

As a result, requireNamespace() with R 3.6.0 is no longer quiet as before, e.g.,

> requireNamespace('ggplot2', quietly = TRUE)
Registered S3 methods overwritten by 'ggplot2':
  method         from
  [.quosures     rlang
  c.quosures     rlang
  print.quosures rlang

I wonder if this is intentional. Thanks!

Regards,
Yihui
--
https://yihui.name


From r@|mgren @end|ng |rom qu@nt|t@t|vebroker@@com  Sat May 11 00:07:28 2019
From: r@|mgren @end|ng |rom qu@nt|t@t|vebroker@@com (Robert Almgren)
Date: Fri, 10 May 2019 18:07:28 -0400
Subject: [Rd] [R] approx with NAs --> new argument 'na.rm=TRUE' ?!
In-Reply-To: <23765.42429.851020.410399@stat.math.ethz.ch>
References: <55393658-0A87-4708-99AF-C612F896AE01@quantitativebrokers.com>
 <23762.42342.185323.76136@stat.math.ethz.ch>
 <23765.42429.851020.410399@stat.math.ethz.ch>
Message-ID: <0E4D395C-2F3E-461F-8947-F58B767EFB76@quantitativebrokers.com>

On May 10, 2019, at 12:24 EDT, Martin Maechler wrote:
> I have now committed a version "fulfilling" your wish, partly at least, to R-devel .

That is great! Thank you so much. Let me pull it and try it out.

                                       --Robert Almgren
--
Quantitative Brokers         http://www.quantitativebrokers.com




-- 

















CONFIDENTIALITY NOTICE: This e-mail and any attachments=...{{dropped:23}}


From @gk @end|ng |rom troutm@@k@@p|@w@@h|ngton@edu  Sun May 12 04:17:20 2019
From: @gk @end|ng |rom troutm@@k@@p|@w@@h|ngton@edu (Steve Kargl)
Date: Sat, 11 May 2019 19:17:20 -0700
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <a57aaa3e-e2fb-96e3-0ba1-c7be2a138b3e@netcologne.de>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
 <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
 <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>
 <6E812A6F-91B2-4412-A536-2CD672C5F4BA@xs4all.nl>
 <D521C66E-D67E-4C17-98EF-D651026561ED@gmail.com>
 <79689a6a-077c-019a-d16a-597d7b60199d@tkoenig.net>
 <20190504164903.GB15478@troutmask.apl.washington.edu>
 <1bd74386-737b-724a-f27b-73a790d1cea7@tkoenig.net>
 <a57aaa3e-e2fb-96e3-0ba1-c7be2a138b3e@netcologne.de>
Message-ID: <20190512021720.GA12287@troutmask.apl.washington.edu>

On Sat, May 11, 2019 at 05:04:06PM +0200, Thomas Koenig wrote:
> 
> gfortran trunk and 9-branch now have an option to automatically
> generate C prototypes for old-style F77 procedures.  I just did
> 
> for a in *.f; do gfortran -fsyntax-only -fc-prototypes-external $a > 
> ${a%.f}.h; done
> 
> in the src/modules/lapack directory.  This generates header
> files which contain prototypes like
> 
> int ilaenv_ (int *ispec, char *name, char *opts, int *n1, int *n2, int 
> *n3, int *n4, size_t name_len, size_t opts_len);

Any chance that this can be created without the parameter names?

For example,

int ilaenv_ (int *, char *, char *, int *, int *, int *, int *,
	size_t , size_t );

For bonus points, a tab on continuation lines would be nice.

-- 
Steve


From tkoen|g @end|ng |rom netco|ogne@de  Sat May 11 17:04:06 2019
From: tkoen|g @end|ng |rom netco|ogne@de (Thomas Koenig)
Date: Sat, 11 May 2019 17:04:06 +0200
Subject: [Rd] R problems with lapack with gfortran
In-Reply-To: <1bd74386-737b-724a-f27b-73a790d1cea7@tkoenig.net>
References: <ff60d7f9-e54d-473a-bc85-7989abc887da@tkoenig.net>
 <b24b0ef5-1f45-1a03-4153-f335e4f1f8a5@gmail.com>
 <2e68f333-1d10-02d4-3560-4b1b9d773a52@tkoenig.net>
 <6E812A6F-91B2-4412-A536-2CD672C5F4BA@xs4all.nl>
 <D521C66E-D67E-4C17-98EF-D651026561ED@gmail.com>
 <79689a6a-077c-019a-d16a-597d7b60199d@tkoenig.net>
 <20190504164903.GB15478@troutmask.apl.washington.edu>
 <1bd74386-737b-724a-f27b-73a790d1cea7@tkoenig.net>
Message-ID: <a57aaa3e-e2fb-96e3-0ba1-c7be2a138b3e@netcologne.de>

Hi,

gfortran trunk and 9-branch now have an option to automatically
generate C prototypes for old-style F77 procedures.  I just did

for a in *.f; do gfortran -fsyntax-only -fc-prototypes-external $a > 
${a%.f}.h; done

in the src/modules/lapack directory.  This generates header
files which contain prototypes like

int ilaenv_ (int *ispec, char *name, char *opts, int *n1, int *n2, int 
*n3, int *n4, size_t name_len, size_t opts_len);
void dlacn2_ (int *n, double *v, double *x, int *isgn, double *est, int 
*kase, int *isave);
void dlaln2_ (int_least32_t *ltrans, int *na, int *nw, double *smin, 
double *ca, double *a, int *lda, double *d1, double *d2, double *b, int 
*ldb, double *wr, double *wi, double *x, int *ldx, double *scale, double 
*xnorm, int *info);
void dlabad_ (double *small, double *large);
void drscl_ (int *n, double *sa, double *sx, int *incx);
void dlatrs_ (char *uplo, char *trans, char *diag, char *normin, int *n, 
double *a, int *lda, double *x, double *scale, double *cnorm, int *info, 
size_t uplo_len, size_t trans_len, size_t diag_len, size_t normin_len);

which could serve as the basis for adjusting the calling sequence
for the C bindings to what the compiler expects.

I checked, and it appears that at least ifort uses the same convention
as gfortran 8/9 regarding character argument passing.

Regards

	Thomas


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon May 13 12:42:43 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 13 May 2019 12:42:43 +0200
Subject: [Rd] read.table() fails with https in R 3.6 but not in R 3.5
In-Reply-To: <87a7fzdaze.fsf@gmx.net>
References: <871s1e883e.fsf@gmx.net>
 <e3d8b66d-cf80-b55e-dedc-067b9db57456@daqana.com> <87a7fzdaze.fsf@gmx.net>
Message-ID: <e0348883-054d-1f3f-57ed-b58cde29f714@gmail.com>

On 5/6/19 2:27 PM, Stephen Berman wrote:
> On Mon, 6 May 2019 11:12:25 +0200 Ralf Stubner <ralf.stubner at daqana.com> wrote:
>
>> On 04.05.19 19:04, Stephen Berman wrote:
>>> In versions of R prior to 3.6.0 the following invocation succeeds,
>>> returning the data frame shown:
>>>
>>>> read.table("https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text",
>>>> header=TRUE)
>>>     Dekade   Anzahl
>>> 1    1900 11467254
>>> 2    1910 13023370
>>> 3    1920 13434601
>>> 4    1930 13296355
>>> 5    1940 12121250
>>> 6    1950 13191131
>>> 7    1960 10587420
>>> 8    1970 10944129
>>> 9    1980 11279439
>>> 10   1990 12052652
>>>
>>> But in version 3.6.0 it fails:
>>>
>>>> read.table("https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text",
>>>> header=TRUE)
>>> Error in file(file, "rt") :
>>>    cannot open the connection to
>>> 'https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text'
>>> In addition: Warning message:
>>> In file(file, "rt") :
>>>    cannot open URL
>>> 'https://www.dwds.de/r/stat?corpus=kern&cnt=tokens&date=decade&format=text':
>>> HTTP status was '403 Forbidden'
>> I can reproduce the behavior on Debian using the CRAN supplied package
>> for R 3.6.0. Trying to read the page with 'curl' produces also a 403
>> error plus some HTML text (in German) explaining that I am treated as a
>> 'robot' due to the supplied User-Agent (here: curl/7.52.1). One
>> suggested solution is to adjust that value which does solve the issue:
>>
>>   > options(HTTPUserAgent='mozilla')
> I confirm that works for me, too.  Thanks!  FWIW, the default value of
> HTTPUserAgent in R 3.6 here is "R (3.6.0 x86_64-suse-linux-gnu x86_64
> linux-gnu)", and using this (in R 3.6) fails as I reported, while the
> default value of HTTPUserAgent in R 3.5 here is "R (3.5.0
> x86_64-suse-linux-gnu x86_64 linux-gnu)" and using that (in R 3.5)
> succeeds.  However, setting HTTPUserAgent in R 3.5 to "libcurl/7.60.0"
> fails just as it does in 3.6.  It's not clear to me if this particular
> website is being too restrictive or if R 3.6 should deal with it, or at
> least mention the issue in NEWS or somewhere else.

This is because (from NEWS:)

The default ?user agent? has been changed when accessing http://
 ????? and https:// sites using libcurl.? (A site was found which caused
 ????? libcurl to infinite-loop with the previous default.)

This website is ok with the default R user agent specification (also for 
R 3.6 and R-devel), but it is not ok with "libcurl/...". Setting the 
user agent to anything starting with "R (" will not help in R 3.6, 
because it will get automatically changed to "libcurl/..." when libcurl 
is used (note using wget and curl on the command line fails on this 
website). I am afraid it has to be solved on the user side (e.g. as 
hinted in that German text one gets when requesting the page using curl) 
- R should not attempt to circumvent access restrictions on external 
websites.

Best
Tomas

>
> Steve Berman
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon May 13 12:54:24 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 13 May 2019 11:54:24 +0100
Subject: [Rd] read.table() fails with https in R 3.6 but not in R 3.5
In-Reply-To: <e0348883-054d-1f3f-57ed-b58cde29f714@gmail.com>
References: <871s1e883e.fsf@gmx.net>
 <e3d8b66d-cf80-b55e-dedc-067b9db57456@daqana.com>
 <87a7fzdaze.fsf@gmx.net> <e0348883-054d-1f3f-57ed-b58cde29f714@gmail.com>
Message-ID: <CABtg=K=wOEUectke1DSTh9BXOhuRCU_LqtrKWE1AnkEqcxji6g@mail.gmail.com>

Hi Tomas,

On Mon, May 13, 2019 at 11:42 AM Tomas Kalibera
<tomas.kalibera at gmail.com> wrote:
[...]
> This is because (from NEWS:)
>
> The default ?user agent? has been changed when accessing http://
>        and https:// sites using libcurl.  (A site was found which caused
>        libcurl to infinite-loop with the previous default.)

Which site was this? Maybe it can be fixed on their end?

The current behavior is not really ideal, because the `libcurl/x,y,z`
string is not only a default, but as you mention above, anything that
start with `R (` is replaced with it, so it is basically impossible to
send out a UserAgent that starts with `R (`. This was very surprising
to me, and I had to go to the C source code to see why R does not
respect my `HTTPUserAgent` option. Would it make sense to document
this in `?options`?

Actually, the default that includes R's version number seems more
sensible to me. Maybe we can just add `libcurl/x.y.z` to that to work
around that buggy site? I would be happy to test this and send a
patch, if you could let me know which website it was.

Thanks!
Gabor

[...]


From @zwj|08 @end|ng |rom gm@||@com  Mon May 13 18:08:17 2019
From: @zwj|08 @end|ng |rom gm@||@com (=?UTF-8?B?5LuL6Z2e546L?=)
Date: Mon, 13 May 2019 12:08:17 -0400
Subject: [Rd] 
 [External] Re:  ALTREP: Design concept of alternative string
In-Reply-To: <alpine.DEB.2.21.1905101113250.2842@luke-Latitude-7480>
References: <CAGiFhPNwu=uT253zsfeD-xW5wtKjvhc_aum2AhvMp_OKQgXQPw@mail.gmail.com>
 <CAD4oTHHtKJTE=Se0nupy+GK6P3S84EBeXL+EXf44+VfGFBPNLg@mail.gmail.com>
 <CAGiFhPOSzxhqmsTKomJLeL3KC6aubmgyxrwqMAiiDWX_cu_wXw@mail.gmail.com>
 <alpine.DEB.2.21.1905101113250.2842@luke-Latitude-7480>
Message-ID: <CAGiFhPMkp9tDxCmU_CUuEzSrTOKZGC9FLNJaT5WyTq5C8LY+SQ@mail.gmail.com>

Thank you very much for your explanation! I'm looking forward to seeing the
changes of R functions in a furture release.

Best,
Jiefei

Tierney, Luke <luke-tierney at uiowa.edu> ?2019?5?10??? ??12:22???

> On Fri, 10 May 2019, ??? wrote:
>
> > Hi Gabriel,
> >
> > Thanks for your explanation, I totally understand that it is almost
> > impossible to change the data structure of STRSXP. However, what I'm
> > proposing is not about changing the internal representation, but rather
> > about how we design and use the ALTREP API.
> >
> > I might do not state the workarounds clearly as English is not my first
> > language. Please let me explain them again in detail.
> >
> > 1. Update the existing R functions. When the ALTREP API Dataptr_or_null
> > returns NULL, use get_element instead(or as best as we can). I have seen
> > this pattern for some R functions, but somehow there are still some
> > functions left that do not follow this rule. For example, print function
> > will blindly call Dataptr (It even did not call Dataptr_or_null first)
> and
> > forces me to allocate a large chunk of memory in R. Updating these
> > functions would not completely solve the problem we are discussing but
> will
> > make it less serious.
>
> Fixing print() is pretty high priority (I thought we had done so for R
> 3.6.0 but apparently not). Others will come in over time; filing a
> request with bugzilla is one way to push up priority for a particular
> function or set of functions.
>
> Keep in mind that one option for your implementation is to signal an
> error if a data pointer is requested. You could make that dependent on
> some sort of option setting or make the error continuable by providing
> a restart.
>
> > 2. Update the ALTREP API, return a vector of const char *, and internally
> > wrap them as CHARSXP. This can be a way to "hack" the R data structure
> with
> > only a little cost to create the CHARSXP header.
>
> That doesn't seem feasible but I may not be understanding what you mean.
>
> > 3. Provide character ALTREP. Instead of using string ALTREP, we can
> define
> > an alternative CHARSXP. By doing it we will completely solve the problem
> > since the return value of the Dataptr of CHARSXP is a const char*. We do
> > not have to change any internal representation of characters, it just
> > requires a remap of the DATAPTR macro( or function?).
>
> Allowing ALTREP CHARSXP objects might be something to consider in the
> future, but the combination of caching and encoding issues make that
> very complex. I'm nat sure it would be a good idea or even
> feasible. In any case it won't happen anytime soon.
>
> Best,
>
> luke
>
> >
> > Again, I sincerely appreciate your time and the detailed you provided.
> I'm
> > looking forward to seeing any method to solve this problem in the current
> > and future R release.
> >
> > Best,
> > Jiefei
> >
> > Gabriel Becker <gabembecker at gmail.com> ?2019?5?9??? ??2:07???
> >
> >> Hi Jiefei,
> >>
> >> The issue here is that while the memory consequences of what you're
> >> describing may be true, this is simply how R handles character vector
> (what
> >> you're calling string) values internally. It doesn't actually have
> anything
> >> to do with ALTREP. Standard character vector SEXPs have an array of
> CHARSXP
> >> pointers in their payload (what is returned by DATAPTR) as well.
> >>
> >> As far as I know, this is important for string caching  and is actually
> >> intended to save memory when the same string value appears many times
> in an
> >> R session (and takes up more bytes than a pointer), though I haven't dug
> >> around R's low-level string handling a ton. Either way though, this
> would
> >> be a much much larger change than just changing the ALTREP API (which
> for
> >> things like this explicitly and intentionally matches how the C api
> behaves
> >> for non-ALTREP SEXPs for compatability).
> >>
> >> Likewise the reason that get_element is going to return a CHARSXP, is
> >> because that is what STRING_ELT(x, i) returns (equivalent to (SEXP)
> >> DATAPTR(x)[i] ), so I don't think that can be changed either.
> >>
> >> One other thing to note, though, is that if your'e asking for the
> dataptr
> >> (and it isn't read only) then you're basically stepping out of ALTREP
> space
> >> anyway, so it makes sense that a normally laid-out STRSXP (with it's
> >> CHARSXP payload).
> >>
> >> Best,
> >> ~G
> >>
> >> On Thu, May 9, 2019 at 8:09 AM ??? <szwjf08 at gmail.com> wrote:
> >>
> >>> Hello from Bioconductor,
> >>>
> >>> I'm developing a package to share R objects across clusters using boost
> >>> library. The concept is similar to mmap package:
> >>> https://cran.r-project.org/web/packages/mmap/index.html . However, I
> >>> have a
> >>> problem when I was trying to write Dataptr_method for the alternative
> >>> string.
> >>>
> >>> Based on my understanding, the return value of the Dataptr_method
> function
> >>> should be a vector of CHARSXP pointers. This design might be
> problematic
> >>> in
> >>> two ways:
> >>>
> >>> 1. The behavior of Dataptr_method function is inconsistent for string
> and
> >>> the other ALTREP types. For the other types we return a vector of pure
> >>> data
> >>> in memory allocated outside of R, but for the string, we return a
> vector
> >>> of
> >>> R objects allocated by R.
> >>>
> >>> 2. It causes an unnecessary duplication of the data. In order to return
> >>> CHARSXPs to R, It forces me to allocate CHARSXPs and copy the entire
> data
> >>> to the R process. By contrast, for the other ALTREP types, say
> altreal, I
> >>> can just return the pointer to R if the data is in the memory.
> >>>
> >>> The same problem occurs for Elt_method as well but is less serious
> since
> >>> only one CHARSXPs is allocated. Because my package is designed for
> sharing
> >>> a large R object. An allocation of the memory is undesired especially
> when
> >>> the data is read-only in the code(eg. print function). I'm not sure if
> >>> there are any solutions existed in the current R version, but I can
> >>> imagine
> >>> three workarounds:
> >>>
> >>> 1. Change the behavior of the R functions and use get_element function
> >>> instead of Dataptr function. This would make the problem more
> >>> memory-friendly but still cause the allocation.
> >>>
> >>> 2. Return a vector of const char* in Dataptr method. It would be very
> >>> efficient and consistent with the return values of the other ALTREP
> types.
> >>>
> >>> 3. Provide an alternative CHARSXP. This might be the best solution
> since
> >>> STRSXP behaves more like a list instead of a string, so an alternative
> >>> CHARSXP fits the concept of ALTREP better.
> >>>
> >>> Since I'm not an expert in R so I might post a solved problem. I would
> be
> >>> very happy and appreciate any suggestions regarding this problem.
> >>>
> >>> Best,
> >>> Jiefei
> >>>
> >>>         [[alternative HTML version deleted]]
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >>
> >
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu



-- 
Jiefei Wang
Room 2-501,Tangxuan,QilinGarden,NanshanDistrict,Shenzhen
Guangdong,China
Phone (+86)18312589584
szwjf8 at gmail.com

	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Mon May 13 23:11:30 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Mon, 13 May 2019 14:11:30 -0700
Subject: [Rd] Staged installation fail on some file systems
In-Reply-To: <65085e74-4de7-5af5-ebfa-24bdb7513a7f@gmail.com>
References: <CAFDcVCTYc53f9COpNoeqbYGxWOE_CCrAbCiStDpo6YBmXG6Txg@mail.gmail.com>
 <b45f3d14-9842-f64c-bb1e-0f983b6f91f9@gmail.com>
 <CAFDcVCQFHw3yCLKms_3n-EHPgdfMxD4K768Qjfj-BKmDFhdGtA@mail.gmail.com>
 <65085e74-4de7-5af5-ebfa-24bdb7513a7f@gmail.com>
Message-ID: <CAFDcVCQv7iSWFuvs_MNSXDqqRJk1NJWy50DW8QPxsMDKYHb9pA@mail.gmail.com>

I have now tested with R version 3.6.0 Patched (2019-05-12 r76489) and
I confirm that staged install now works on our problematic file
system.

Thank you again for fixing this.

/Henrik

On Thu, May 9, 2019 at 5:43 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 5/7/19 6:18 PM, Henrik Bengtsson wrote:
> > On Tue, May 7, 2019 at 9:05 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >> Thanks for the report.  According to my reading, this use of "mv" is ok
> >> and the renameat2() call which the invocation of "mv" leads to is also
> >> ok and allowed by POSIX in this context. It could only fail with EEXIST
> >> if the target directory (path/pkg) was not empty. So far I've not been
> >> able to reproduce but we could fall back to copy like on Windows.
> > Thanks for looking into this.  The purpose of the pre-existing target
> > directory (path/pkg) is to act as a directory lock in order to lower
> > the risk for parallel installation to take place at the same - is that
> > correct?  For the same reason, you can't just do
> >
> > mv path/pkg path/pkg-quickly-now
> > mv -f path/to/pkg path
> > rmdir path/pkg-quickly-now
> >
> > because there's a potential race condition?
>
> pkg (the final installation directory) should be empty when we are doing
> the move - and I understood from your report you actually reproduced
> outside R with the target directory being empty. Moving it away is the
> same as deleting it. Which is what I did now in R-devel, and which is
> what the current code has been doing already on Windows. It is a race
> condition, but I don't think it is avoidable and I doubt that
> "mv/rename" could be relied on doing the move atomically when the target
> directory exists, when not broken to do the move at all. Still,
> according to POSIX, mv/renameat should work in this context with the
> target being an empty directory, it works on my systems and that it does
> not on some is probably a bug. Likewise, from my reading of the
> documentation of MoveFileEx, the file rename should also work on Windows
> with the empty target directory with the flags we use (and it is also
> implied in CERT advisory FIO10-C), but contradicts what I am seeing on
> my system. This is why I had added the deletion on Windows before.
> Pragmatically, there is probably no point into trying to fine-tune this
> any more, because apart from the move happening, we don't have universal
> guarantees that the move will be atomic. But of course we have to make
> sure the installation always works, so thanks again for reporting this.
>
> > For efficiency, to avoid copying, could one do "atomic" moves one
> > layer down?  Something like:
> >
> > mv path/to/pkg/* path/to/pkg/.* path/pkg
> > rmdir path/pkg
> >
> > because, in this case, we know that path/pkg/ is empty.
>
> Yes, but as it seems that the bug in mv/renameat is rare, maybe this is
> not worth the added complexity/maintenance cost. And with the current
> solution - delete the target directory, but still try the move - we
> still have some hope of avoiding exposure of a partially installed
> package (a package that already has a DESCRIPTION file, but is not yet
> completely installed).
>
> Best
> Tomas
>
> >
> > /Henrik
> >
> >
> >> Best
> >> Tomas
> >>
> >>
> >> On 5/5/19 4:35 AM, Henrik Bengtsson wrote:
> >>> I'm observing that the new staged installation in R 3.6.0 can produce:
> >>>
> >>> mv: cannot move
> >>> ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-codetools/00new/codetools?
> >>> to ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?: File
> >>> exists
> >>> ERROR:   moving to final location failed
> >>>
> >>> on some file systems.
> >>>
> >>> # EXAMPLE
> >>>
> >>> $ R --vanilla
> >>> R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
> >>> Copyright (C) 2019 The R Foundation for Statistical Computing
> >>> Platform: x86_64-pc-linux-gnu (64-bit)
> >>> ...
> >>>
> >>>> install.packages("codetools", repos="https://cran.r-project.org")
> >>> Installing package into ?/wynton/home/cbi/hb/R/x86_64-pc-linux-gnu-library/3.6?
> >>> (as ?lib? is unspecified)
> >>> trying URL 'https://cran.r-project.org/src/contrib/codetools_0.2-16.tar.gz'
> >>> Content type 'application/x-gzip' length 12996 bytes (12 KB)
> >>> ==================================================
> >>> downloaded 12 KB
> >>>
> >>> * installing *source* package ?codetools? ...
> >>> ** package ?codetools? successfully unpacked and MD5 sums checked
> >>> ** using staged installation
> >>> ** R
> >>> ** byte-compile and prepare package for lazy loading
> >>> ** help
> >>> *** installing help indices
> >>> ** building package indices
> >>> ** testing if installed package can be loaded from temporary location
> >>> mv: cannot move
> >>> ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/00LOCK-codetools/00new/codetools?
> >>> to ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?: File
> >>> exists
> >>> ERROR:   moving to final location failed
> >>> * removing ?/home/alice/R/x86_64-pc-linux-gnu-library/3.6/codetools?
> >>>
> >>> The downloaded source packages are in
> >>> ?/scratch/alice/Rtmp6UYDzu/downloaded_packages?
> >>> Warning message:
> >>> In install.packages("codetools", repos = "https://cran.r-project.org") :
> >>> installation of package ?codetools? had non-zero exit status
> >>>
> >>>
> >>> # WORKAROUND
> >>>
> >>> Disabling staged installation, for instance by setting environment
> >>> variable 'R_INSTALL_STAGED=false' avoids this problem.
> >>>
> >>>
> >>> # TROUBLESHOOTING
> >>>
> >>> I think it comes down to the following call in src/library/tools/R/install.R:
> >>>
> >>>     status <- system(paste("mv -f",
> >>>                            shQuote(instdir),
> >>>                            shQuote(dirname(final_instdir))))
> >>>
> >>> https://github.com/wch/r-source/blob/d253331f578814f919f150ffdf1fe581618079a3/src/library/tools/R/install.R#L1645-L1647
> >>>
> >>> which effectively does:
> >>>
> >>> $ mkdir -p path/pkg  ## empty final destination placeholder(?)
> >>> $ mkdir -p path/to/pkg
> >>> $ mv -f path/to/pkg path
> >>>
> >>> However, on one (and only one) of several systems I've tested, that
> >>> 'mv' produce the error:
> >>>
> >>>     mv: cannot move ?path/to/pkg? to ?path/pkg?: File exists
> >>>
> >>> This is on a BeeGFS parallel file system.  I cannot tell if that 'mv
> >>> -f' should work or not, or if it is even well defined.  FWIW, the
> >>> above 'mv' does indeed work if I switch to another folder that is
> >>> mounted on a different, NFS, file system, i.e. it is not kernel/OS
> >>> specific (here CentOS 7.6.1810).
> >>>
> >>> If of any use, here's the 'strace' of the above 'mv':
> >>>
> >>> $ strace mv -f path/to/pkg path
> >>> execve("/usr/bin/mv", ["mv", "-f", "path/to/pkg", "path"], [/* 118 vars */]) = 0
> >>> brk(NULL)                               = 0xcf3000
> >>> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> >>> 0) = 0x7fde2ceb1000
> >>> access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
> >>> open("/usr/lib64/openmpi/lib/tls/x86_64/libselinux.so.1",
> >>> O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
> >>> stat("/usr/lib64/openmpi/lib/tls/x86_64", 0x7ffc6a3fb170) = -1 ENOENT
> >>> (No such file or directory)
> >>> open("/usr/lib64/openmpi/lib/tls/libselinux.so.1", O_RDONLY|O_CLOEXEC)
> >>> = -1 ENOENT (No such file or directory)
> >>> stat("/usr/lib64/openmpi/lib/tls", 0x7ffc6a3fb170) = -1 ENOENT (No
> >>> such file or directory)
> >>> open("/usr/lib64/openmpi/lib/x86_64/libselinux.so.1",
> >>> O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
> >>> stat("/usr/lib64/openmpi/lib/x86_64", 0x7ffc6a3fb170) = -1 ENOENT (No
> >>> such file or directory)
> >>> open("/usr/lib64/openmpi/lib/libselinux.so.1", O_RDONLY|O_CLOEXEC) =
> >>> -1 ENOENT (No such file or directory)
> >>> stat("/usr/lib64/openmpi/lib", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0
> >>> open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
> >>> fstat(3, {st_mode=S_IFREG|0644, st_size=96960, ...}) = 0
> >>> mmap(NULL, 96960, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fde2ce99000
> >>> close(3)                                = 0
> >>> open("/lib64/libselinux.so.1", O_RDONLY|O_CLOEXEC) = 3
> >>> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320i\0\0\0\0\0\0"...,
> >>> 832) = 832
> >>> fstat(3, {st_mode=S_IFREG|0755, st_size=155784, ...}) = 0
> >>> mmap(NULL, 2255184, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> >>> 0) = 0x7fde2ca6a000
> >>> mprotect(0x7fde2ca8e000, 2093056, PROT_NONE) = 0
> >>> mmap(0x7fde2cc8d000, 8192, PROT_READ|PROT_WRITE,
> >>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x23000) = 0x7fde2cc8d000
> >>> mmap(0x7fde2cc8f000, 6480, PROT_READ|PROT_WRITE,
> >>> MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2cc8f000
> >>> close(3)                                = 0
> >>> open("/usr/lib64/openmpi/lib/libacl.so.1", O_RDONLY|O_CLOEXEC) = -1
> >>> ENOENT (No such file or directory)
> >>> open("/lib64/libacl.so.1", O_RDONLY|O_CLOEXEC) = 3
> >>> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\200\37\0\0\0\0\0\0"...,
> >>> 832) = 832
> >>> fstat(3, {st_mode=S_IFREG|0755, st_size=37056, ...}) = 0
> >>> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> >>> 0) = 0x7fde2ce98000
> >>> mmap(NULL, 2130560, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> >>> 0) = 0x7fde2c861000
> >>> mprotect(0x7fde2c868000, 2097152, PROT_NONE) = 0
> >>> mmap(0x7fde2ca68000, 8192, PROT_READ|PROT_WRITE,
> >>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x7000) = 0x7fde2ca68000
> >>> close(3)                                = 0
> >>> open("/usr/lib64/openmpi/lib/libattr.so.1", O_RDONLY|O_CLOEXEC) = -1
> >>> ENOENT (No such file or directory)
> >>> open("/lib64/libattr.so.1", O_RDONLY|O_CLOEXEC) = 3
> >>> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320\23\0\0\0\0\0\0"...,
> >>> 832) = 832
> >>> fstat(3, {st_mode=S_IFREG|0755, st_size=19896, ...}) = 0
> >>> mmap(NULL, 2113904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> >>> 0) = 0x7fde2c65c000
> >>> mprotect(0x7fde2c660000, 2093056, PROT_NONE) = 0
> >>> mmap(0x7fde2c85f000, 8192, PROT_READ|PROT_WRITE,
> >>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0x7fde2c85f000
> >>> close(3)                                = 0
> >>> open("/usr/lib64/openmpi/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = -1
> >>> ENOENT (No such file or directory)
> >>> open("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
> >>> read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\340$\2\0\0\0\0\0"...,
> >>> 832) = 832
> >>> fstat(3, {st_mode=S_IFREG|0755, st_size=2151672, ...}) = 0
> >>> mmap(NULL, 3981792, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> >>> 0) = 0x7fde2c28f000
> >>> mprotect(0x7fde2c451000, 2097152, PROT_NONE) = 0
> >>> mmap(0x7fde2c651000, 24576, PROT_READ|PROT_WRITE,
> >>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1c2000) = 0x7fde2c651000
> >>> mmap(0x7fde2c657000, 16864, PROT_READ|PROT_WRITE,
> >>> MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2c657000
> >>> close(3)                                = 0
> >>> open("/usr/lib64/openmpi/lib/libpcre.so.1", O_RDONLY|O_CLOEXEC) = -1
> >>> ENOENT (No such file or directory)
> >>> open("/lib64/libpcre.so.1", O_RDONLY|O_CLOEXEC) = 3
> >>> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\360\25\0\0\0\0\0\0"...,
> >>> 832) = 832
> >>> fstat(3, {st_mode=S_IFREG|0755, st_size=402384, ...}) = 0
> >>> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> >>> 0) = 0x7fde2ce97000
> >>> mmap(NULL, 2494984, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> >>> 0) = 0x7fde2c02d000
> >>> mprotect(0x7fde2c08d000, 2097152, PROT_NONE) = 0
> >>> mmap(0x7fde2c28d000, 8192, PROT_READ|PROT_WRITE,
> >>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x60000) = 0x7fde2c28d000
> >>> close(3)                                = 0
> >>> open("/usr/lib64/openmpi/lib/libdl.so.2", O_RDONLY|O_CLOEXEC) = -1
> >>> ENOENT (No such file or directory)
> >>> open("/lib64/libdl.so.2", O_RDONLY|O_CLOEXEC) = 3
> >>> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\220\r\0\0\0\0\0\0"...,
> >>> 832) = 832
> >>> fstat(3, {st_mode=S_IFREG|0755, st_size=19288, ...}) = 0
> >>> mmap(NULL, 2109712, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> >>> 0) = 0x7fde2be29000
> >>> mprotect(0x7fde2be2b000, 2097152, PROT_NONE) = 0
> >>> mmap(0x7fde2c02b000, 8192, PROT_READ|PROT_WRITE,
> >>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0x7fde2c02b000
> >>> close(3)                                = 0
> >>> open("/usr/lib64/openmpi/lib/libpthread.so.0", O_RDONLY|O_CLOEXEC) =
> >>> -1 ENOENT (No such file or directory)
> >>> open("/lib64/libpthread.so.0", O_RDONLY|O_CLOEXEC) = 3
> >>> read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\260l\0\0\0\0\0\0"...,
> >>> 832) = 832
> >>> fstat(3, {st_mode=S_IFREG|0755, st_size=141968, ...}) = 0
> >>> mmap(NULL, 2208904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3,
> >>> 0) = 0x7fde2bc0d000
> >>> mprotect(0x7fde2bc24000, 2093056, PROT_NONE) = 0
> >>> mmap(0x7fde2be23000, 8192, PROT_READ|PROT_WRITE,
> >>> MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x16000) = 0x7fde2be23000
> >>> mmap(0x7fde2be25000, 13448, PROT_READ|PROT_WRITE,
> >>> MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fde2be25000
> >>> close(3)                                = 0
> >>> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> >>> 0) = 0x7fde2ce96000
> >>> mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> >>> 0) = 0x7fde2ce94000
> >>> arch_prctl(ARCH_SET_FS, 0x7fde2ce94840) = 0
> >>> mprotect(0x7fde2c651000, 16384, PROT_READ) = 0
> >>> mprotect(0x7fde2be23000, 4096, PROT_READ) = 0
> >>> mprotect(0x7fde2c02b000, 4096, PROT_READ) = 0
> >>> mprotect(0x7fde2c28d000, 4096, PROT_READ) = 0
> >>> mprotect(0x7fde2c85f000, 4096, PROT_READ) = 0
> >>> mprotect(0x7fde2ca68000, 4096, PROT_READ) = 0
> >>> mprotect(0x7fde2cc8d000, 4096, PROT_READ) = 0
> >>> mprotect(0x61d000, 4096, PROT_READ)     = 0
> >>> mprotect(0x7fde2ceb2000, 4096, PROT_READ) = 0
> >>> munmap(0x7fde2ce99000, 96960)           = 0
> >>> set_tid_address(0x7fde2ce94b10)         = 85521
> >>> set_robust_list(0x7fde2ce94b20, 24)     = 0
> >>> rt_sigaction(SIGRTMIN, {0x7fde2bc13790, [], SA_RESTORER|SA_SIGINFO,
> >>> 0x7fde2bc1c5d0}, NULL, 8) = 0
> >>> rt_sigaction(SIGRT_1, {0x7fde2bc13820, [],
> >>> SA_RESTORER|SA_RESTART|SA_SIGINFO, 0x7fde2bc1c5d0}, NULL, 8) = 0
> >>> rt_sigprocmask(SIG_UNBLOCK, [RTMIN RT_1], NULL, 8) = 0
> >>> getrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
> >>> statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096,
> >>> f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={0,
> >>> 0}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
> >>> statfs("/sys/fs/selinux", {f_type=SELINUX_MAGIC, f_bsize=4096,
> >>> f_blocks=0, f_bfree=0, f_bavail=0, f_files=0, f_ffree=0, f_fsid={0,
> >>> 0}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0
> >>> stat("/sys/fs/selinux", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
> >>> brk(NULL)                               = 0xcf3000
> >>> brk(0xd14000)                           = 0xd14000
> >>> access("/etc/selinux/config", F_OK)     = 0
> >>> open("/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3
> >>> fstat(3, {st_mode=S_IFREG|0644, st_size=106075056, ...}) = 0
> >>> mmap(NULL, 106075056, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fde256e3000
> >>> close(3)                                = 0
> >>> geteuid()                               = 34002
> >>> ioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0
> >>> stat("path", {st_mode=S_IFDIR|0755, st_size=2, ...}) = 0
> >>> lstat("path/to/pkg", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
> >>> lstat("path/pkg", {st_mode=S_IFDIR|0755, st_size=0, ...}) = 0
> >>> renameat2(AT_FDCWD, "path/to/pkg", AT_FDCWD, "path/pkg", 0) = -1
> >>> EEXIST (File exists)
> >>> open("/usr/share/locale/locale.alias", O_RDONLY|O_CLOEXEC) = 3
> >>> fstat(3, {st_mode=S_IFREG|0644, st_size=2502, ...}) = 0
> >>> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1,
> >>> 0) = 0x7fde2ceb0000
> >>> read(3, "# Locale name alias data base.\n#"..., 4096) = 2502
> >>> read(3, "", 4096)                       = 0
> >>> close(3)                                = 0
> >>> munmap(0x7fde2ceb0000, 4096)            = 0
> >>> open("/usr/share/locale/en_US.UTF-8/LC_MESSAGES/coreutils.mo",
> >>> O_RDONLY) = -1 ENOENT (No such file or directory)
> >>> open("/usr/share/locale/en_US.utf8/LC_MESSAGES/coreutils.mo",
> >>> O_RDONLY) = -1 ENOENT (No such file or directory)
> >>> open("/usr/share/locale/en_US/LC_MESSAGES/coreutils.mo", O_RDONLY) =
> >>> -1 ENOENT (No such file or directory)
> >>> open("/usr/share/locale/en.UTF-8/LC_MESSAGES/coreutils.mo", O_RDONLY)
> >>> = -1 ENOENT (No such file or directory)
> >>> open("/usr/share/locale/en.utf8/LC_MESSAGES/coreutils.mo", O_RDONLY) =
> >>> -1 ENOENT (No such file or directory)
> >>> open("/usr/share/locale/en/LC_MESSAGES/coreutils.mo", O_RDONLY) = -1
> >>> ENOENT (No such file or directory)
> >>> open("/usr/lib64/charset.alias", O_RDONLY|O_NOFOLLOW) = -1 ENOENT (No
> >>> such file or directory)
> >>> write(2, "mv: ", 4mv: )                     = 4
> >>> write(2, "cannot move \342\200\230path/to/pkg\342\200\231 to"...,
> >>> 47cannot move ?path/to/pkg? to ?path/pkg?) = 47
> >>> open("/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) =
> >>> -1 ENOENT (No such file or directory)
> >>> open("/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo", O_RDONLY) =
> >>> -1 ENOENT (No such file or directory)
> >>> open("/usr/share/locale/en_US/LC_MESSAGES/libc.mo", O_RDONLY) = -1
> >>> ENOENT (No such file or directory)
> >>> open("/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo", O_RDONLY) = -1
> >>> ENOENT (No such file or directory)
> >>> open("/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo", O_RDONLY) = -1
> >>> ENOENT (No such file or directory)
> >>> open("/usr/share/locale/en/LC_MESSAGES/libc.mo", O_RDONLY) = -1 ENOENT
> >>> (No such file or directory)
> >>> write(2, ": File exists", 13: File exists)           = 13
> >>> write(2, "\n", 1
> >>> )                       = 1
> >>> lseek(0, 0, SEEK_CUR)                   = -1 ESPIPE (Illegal seek)
> >>> close(0)                                = 0
> >>> close(1)                                = 0
> >>> close(2)                                = 0
> >>> exit_group(1)                           = ?
> >>> +++ exited with 1 +++
> >>>
> >>> /Henrik
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
>


From @ereg@xvm@m@|n @end|ng |rom gm@||@com  Mon May 13 16:07:14 2019
From: @ereg@xvm@m@|n @end|ng |rom gm@||@com (Matsievskiy S.V.)
Date: Mon, 13 May 2019 17:07:14 +0300
Subject: [Rd] change R_LIBS_USER default location
Message-ID: <4d4a9bbe71a77ceee1df6cbfd2befbf784266eb4.camel@gmail.com>

Dear r-devel team,

By default, R_LIBS_USER is set to $HOME/R.
I think that it would be better to conform with XDG Base Directory
Specification (
https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
) and use $XDG_DATA_HOME/R (~/.local/share/R) instead.

P.S. This message was originally sent to Debian bug report system (
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=928653). Debian R
maintainer Dirk Eddelbuettel recommended sending this issue to r-devel.

--
Best regards,
S.V. Matsievskiy


From |uc@r @end|ng |rom |edor@project@org  Tue May 14 11:33:00 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Tue, 14 May 2019 11:33:00 +0200
Subject: [Rd] [R-pkg-devel] Three-argument S3method declaration does not
 seem to affect dispatching from inside the package.
In-Reply-To: <49d473a1bfa29f95d74f931ecfdc2a6b346ca6a2.camel@uow.edu.au>
References: <49d473a1bfa29f95d74f931ecfdc2a6b346ca6a2.camel@uow.edu.au>
Message-ID: <CALEXWq058Wg0oskeaFAjPdptTEjVMWLFbUr+FeBwdKwP93T=Kw@mail.gmail.com>

CCing r-devel.

On Tue, 14 May 2019 at 02:11, Pavel Krivitsky <pavel at uow.edu.au> wrote:
>
> Dear All,
>
> I've run into this while updating a package with unfortunately named
> legacy functions. It seems like something that might be worth changing
> in R, and I want to get a sense of whether this is a problem before
> submitting a report to the Bugzilla.
>
> It appears that the 3-argument form of S3method() in NAMESPACE controls
> dispatching when the generic is called from outside the package that
> defines it but not when it's called from inside the package that
> defines it.
>
> For example the attached minimal package has four R functions:
>
>    gen <- function(object, ...)
>      UseMethod("gen")
>
>    .gen.formula <- function(object, ...){
>      message("I am the S3method-declared method.")
>    }
>
>    gen.formula <- function(object, ...){
>      message("I am the function with an unfortunate name.")
>    }
>
>    test_me <- function(){
>      message("I am the tester. Which one will I call?")
>      gen(a~b)
>    }
>
> and the following NAMESPACE:
>
>    export(gen)
>    S3method(gen, formula, .gen.formula)
>    export(gen.formula)
>    export(test_me)
>
> Now,
>
>    library(anRpackage)
>    example(test_me)
>
> results in the following:
>
>    test_m> test_me
>    function(){
>      message("I am the tester. Which one will I call?")
>      gen(a~b)
>    }
>    <bytecode: 0x562fb9d32d68>
>    <environment: namespace:anRpackage>
>
>    test_m> test_me() # Calls gen.formula()
>    I am the tester. Which one will I call?
>    I am the function with an unfortunate name.
>
>    test_m> gen(a~b) # Calls .gen.formula()
>    I am the S3method-declared method.
>
> So, calling the same generic function with the same class results in
> different dispatching behaviour depending on whether the call is from
> within the package doing the export or from the outside.

It does not depend on whether you export gen.formula() or not. When
you call gen() inside your package, the S3 dispatch mechanism finds a
method gen.formula defined in that environment (the package's
namespace), so it is called.

> This behaviour appears to be as documented (
> https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Method-dispatching
> ), but it seems to me that if S3method() is allowed to give the name of
> the method to be used, then it should should override the name-based
> dispatching both inside and outside the package.
>
> Any thoughts?

Note that disabling name-based dispatch implies two things: 1) the
inability to override your method by defining gen.formula in the
global environment, and 2) another package can break yours (i.e.,
internal calls to gen()) by registering an S3 method for gen() after
you. I don't think that's a good idea.

I?aki


From p@ve| @end|ng |rom uow@edu@@u  Tue May 14 12:31:40 2019
From: p@ve| @end|ng |rom uow@edu@@u (Pavel Krivitsky)
Date: Tue, 14 May 2019 10:31:40 +0000
Subject: [Rd] [R-pkg-devel] Three-argument S3method declaration does not
 seem to affect dispatching from inside the package.
In-Reply-To: <CALEXWq058Wg0oskeaFAjPdptTEjVMWLFbUr+FeBwdKwP93T=Kw@mail.gmail.com>
References: <49d473a1bfa29f95d74f931ecfdc2a6b346ca6a2.camel@uow.edu.au>
 <CALEXWq058Wg0oskeaFAjPdptTEjVMWLFbUr+FeBwdKwP93T=Kw@mail.gmail.com>
Message-ID: <14d531d671791b51683b71ee0eece1c9a29c374d.camel@uow.edu.au>

Hi, I?aki,

Thanks for looking into this.

On Tue, 2019-05-14 at 11:33 +0200, I?aki Ucar wrote:
> > So, calling the same generic function with the same class results
> > in different dispatching behaviour depending on whether the call is
> > from within the package doing the export or from the outside.
> 
> It does not depend on whether you export gen.formula() or not. When
> you call gen() inside your package, the S3 dispatch mechanism finds a
> method gen.formula defined in that environment (the package's
> namespace), so it is called.

Indeed, this is the case. The issue is that when both are available and
exported, S3method takes precedence outside the package but function
name takes precedence inside the package.

> Note that disabling name-based dispatch implies two things: 1) the
> inability to override your method by defining gen.formula in the
> global environment, and 2) another package can break yours (i.e.,
> internal calls to gen()) by registering an S3 method for gen() after
> you.

That's a good point.

   > library(anRpackage)
   > gen(a~b)
   I am the S3method-declared method.
   > gen.formula <- function(object, ...){message("I am the externally declared method.")}
   > gen(a~b)
   I am the externally declared method.
   > test_me()
   I am the tester. Which one will I call?
   I am the function with an unfortunate name.

In that case, I think that the least surprising behaviour would
prioritise declarations and methods "nearer" to the caller over those
"farther" from the caller (where "caller" is the caller of the generic,
not the generic itself), and, within that, give precedence to S3method
declarations over function names.

That is, for a call from inside a package, the order of precedence
would be as follows:
   1. S3method() in that package's NAMESPACE.
   2. Appropriately named function?in that package (exported or not).
   3. Appropriately named function in calling environment (which may be
      GlobalEnv).
   4. S3method() in other loaded packages' NAMESPACEs.
   5. Appropriately named functions exported by other loaded packages'
      NAMESPACEs.

For a call from outside a package, the precedence is the same, but 1
and 2 are not relevant.

As far as I can tell, this is the current behaviour except for the
relative ordering of 1 and 2.

				Best,
				Pavel

-- 
Pavel Krivitsky
Lecturer in Statistics
National Institute of Applied Statistics Research Australia (NIASRA)
School of Mathematics and Applied Statistics | Building 39C Room 154
University of Wollongong NSW 2522 Australia
T +61 2 4221 3713
Web (NIASRA): http://niasra.uow.edu.au/index.html
Web (Personal): http://www.krivitsky.net/research
ORCID: 0000-0002-9101-3362

NOTICE: This email is intended for the addressee named and may contain
confidential information. If you are not the intended recipient, please
delete it and notify the sender. Please consider the environment before
printing this email.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: anRpackage_1.0.tar.gz
Type: application/x-compressed-tar
Size: 750 bytes
Desc: anRpackage_1.0.tar.gz
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190514/c7e72e56/attachment.bin>

From |uc@r @end|ng |rom |edor@project@org  Tue May 14 12:50:40 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Tue, 14 May 2019 12:50:40 +0200
Subject: [Rd] [R-pkg-devel] Three-argument S3method declaration does not
 seem to affect dispatching from inside the package.
In-Reply-To: <14d531d671791b51683b71ee0eece1c9a29c374d.camel@uow.edu.au>
References: <49d473a1bfa29f95d74f931ecfdc2a6b346ca6a2.camel@uow.edu.au>
 <CALEXWq058Wg0oskeaFAjPdptTEjVMWLFbUr+FeBwdKwP93T=Kw@mail.gmail.com>
 <14d531d671791b51683b71ee0eece1c9a29c374d.camel@uow.edu.au>
Message-ID: <CALEXWq02kZdw79BWJiAtj-HXMnCeX_PRF_yFTT6DpNCn=MxPAw@mail.gmail.com>

On Tue, 14 May 2019 at 12:31, Pavel Krivitsky <pavel at uow.edu.au> wrote:
>
> > Note that disabling name-based dispatch implies two things: 1) the
> > inability to override your method by defining gen.formula in the
> > global environment, and 2) another package can break yours (i.e.,
> > internal calls to gen()) by registering an S3 method for gen() after
> > you.
>
> That's a good point.
>
>    > library(anRpackage)
>    > gen(a~b)
>    I am the S3method-declared method.
>    > gen.formula <- function(object, ...){message("I am the externally declared method.")}
>    > gen(a~b)
>    I am the externally declared method.
>    > test_me()
>    I am the tester. Which one will I call?
>    I am the function with an unfortunate name.
>
> In that case, I think that the least surprising behaviour would
> prioritise declarations and methods "nearer" to the caller over those
> "farther" from the caller (where "caller" is the caller of the generic,
> not the generic itself), and, within that, give precedence to S3method
> declarations over function names.

The thing is that, in R, "nearer" means "the calling environment" (and
then, other things). When you call test_me(), the calling environment
for gen() is the package namespace. When you call gen() directly, then
the calling environment is the global environment. So what happens
here follows the principle of least astonishment.

The issue here is that you are registering a non-standard name
(.gen.formula) for that generic and then defining what would be the
standard name (gen.formula) for... what purpose? IMHO, this is a bad
practice and should be avoided.

> That is, for a call from inside a package, the order of precedence
> would be as follows:
>    1. S3method() in that package's NAMESPACE.
>    2. Appropriately named function in that package (exported or not).
>    3. Appropriately named function in calling environment (which may be
>       GlobalEnv).
>    4. S3method() in other loaded packages' NAMESPACEs.
>    5. Appropriately named functions exported by other loaded packages'
>       NAMESPACEs.
>
> For a call from outside a package, the precedence is the same, but 1
> and 2 are not relevant.
>
> As far as I can tell, this is the current behaviour except for the
> relative ordering of 1 and 2.

Nope. Current behaviour (see details in ?UseMethod) is:

"To support this, UseMethod and NextMethod search for methods in two
places: in the environment in which the generic function is called,
and in the registration data base for the environment in which the
generic is defined".

Changing this would probably break a lot of things out there.

I?aki


From yue||7 @end|ng |rom 126@com  Tue May 14 15:44:40 2019
From: yue||7 @end|ng |rom 126@com (yueli)
Date: Tue, 14 May 2019 21:44:40 +0800 (CST)
Subject: [Rd] Pcre install
Message-ID: <65193029.88bc.16ab6968c04.Coremail.yueli7@126.com>

Hello,



I downloaded R-3.6.0.tar.gz from https://cran.r-project.org/src/base/R-3/.


I tried to install R-3.6.0.tar.gz in Ubuntu system.


Thanks in advance for any help!


yue




checking for pcre.h... yes
checking pcre/pcre.h usability... no
checking pcre/pcre.h presence... no
checking for pcre/pcre.h... no
checking if PCRE version >= 8.20, < 10.0 and has UTF-8 support... no
checking whether PCRE support suffices... configure: error: pcre >= 8.20 library and headers are required








	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Tue May 14 15:49:44 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 14 May 2019 09:49:44 -0400
Subject: [Rd] Pcre install
In-Reply-To: <65193029.88bc.16ab6968c04.Coremail.yueli7@126.com>
References: <65193029.88bc.16ab6968c04.Coremail.yueli7@126.com>
Message-ID: <4EB117D1-2F00-4D53-8F18-F5F7BBEE9547@R-project.org>

sudo apt-get install libpcre3-dev

please read the docs [R-admin: A.1 Essential programs and libraries] - you may be missing more dependencies


> On May 14, 2019, at 9:44 AM, yueli <yueli7 at 126.com> wrote:
> 
> Hello,
> 
> 
> 
> I downloaded R-3.6.0.tar.gz from https://cran.r-project.org/src/base/R-3/.
> 
> 
> I tried to install R-3.6.0.tar.gz in Ubuntu system.
> 
> 
> Thanks in advance for any help!
> 
> 
> yue
> 
> 
> 
> 
> checking for pcre.h... yes
> checking pcre/pcre.h usability... no
> checking pcre/pcre.h presence... no
> checking for pcre/pcre.h... no
> checking if PCRE version >= 8.20, < 10.0 and has UTF-8 support... no
> checking whether PCRE support suffices... configure: error: pcre >= 8.20 library and headers are required
> 
> 
> 
> 
> 
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From edd @end|ng |rom deb|@n@org  Tue May 14 16:15:47 2019
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 14 May 2019 09:15:47 -0500
Subject: [Rd] Pcre install
In-Reply-To: <65193029.88bc.16ab6968c04.Coremail.yueli7@126.com>
References: <65193029.88bc.16ab6968c04.Coremail.yueli7@126.com>
Message-ID: <23770.52627.277408.864059@rob.eddelbuettel.com>


On 14 May 2019 at 21:44, yueli wrote:
| I downloaded R-3.6.0.tar.gz from https://cran.r-project.org/src/base/R-3/.
| 
| 
| I tried to install R-3.6.0.tar.gz in Ubuntu system.

You are likely better off to use fully-built and generally
correctly-configured R binary for Ubuntu off the CRAN mirrors. Read

   https://cloud.r-project.org/bin/linux/ubuntu/README.html

I keep the line

   deb https://cloud.r-project.org/bin/linux/ubuntu cosmic-cran35/

in /etc/apt/sources.list.d/cran.list and am on 18.10; the README explains how
to adjust for the other variants.

There is an entire mailing list dedicated to questions should you have any:

   https://stat.ethz.ch/mailman/listinfo/r-sig-debian

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @d|g @end|ng |rom jhu@edu  Tue May 14 15:50:28 2019
From: @d|g @end|ng |rom jhu@edu (Adi Gherman)
Date: Tue, 14 May 2019 13:50:28 +0000
Subject: [Rd] Pcre install
In-Reply-To: <65193029.88bc.16ab6968c04.Coremail.yueli7@126.com>
References: <65193029.88bc.16ab6968c04.Coremail.yueli7@126.com>
Message-ID: <2AF0CFB8-C82A-4CD4-A756-498D8C9B2932@jhmi.edu>

Yue,

it looks like you need to compile PCRE using the -enable-utf8 flag. Check out Toby?s post about this (the PCRE error specifically): https://tdhock.github.io/blog/2017/compiling-R/

Hope this helps,
Adi

Adi Gherman, MCS
Research Associate
Johns Hopkins Bloomberg School of Public Health
615 N. Wolfe Street, E3007
Baltimore, MD 21205

On May 14, 2019, at 9:44 AM, yueli <yueli7 at 126.com<mailto:yueli7 at 126.com>> wrote:


Hello,



I downloaded R-3.6.0.tar.gz from https://cran.r-project.org/src/base/R-3/.


I tried to install R-3.6.0.tar.gz in Ubuntu system.


Thanks in advance for any help!


yue




checking for pcre.h... yes
checking pcre/pcre.h usability... no
checking pcre/pcre.h presence... no
checking for pcre/pcre.h... no
checking if PCRE version >= 8.20, < 10.0 and has UTF-8 support... no
checking whether PCRE support suffices... configure: error: pcre >= 8.20 library and headers are required








[[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel



	[[alternative HTML version deleted]]


From ||o@@ @end|ng |rom @pj@nke@net  Wed May 15 05:36:50 2019
From: ||o@@ @end|ng |rom @pj@nke@net (Andrew Janke)
Date: Tue, 14 May 2019 23:36:50 -0400
Subject: [Rd] Porting R example datasets to GNU Octave
In-Reply-To: <eae1bde3-8897-7ad6-bb60-b409be2f203d@apjanke.net>
References: <eae1bde3-8897-7ad6-bb60-b409be2f203d@apjanke.net>
Message-ID: <3a75ba6b-83e2-7737-b8b3-04806bd758d7@apjanke.net>


On 5/6/19 7:47 AM, Dirk Eddelbuettel wrote:
>
> On 5 May 2019 at 10:47, Andrew Janke wrote:
> | I'm interested in porting the R example datasets package to GNU Octave
> | and Matlab. Would you have objections to my doing so?
>
> You don't even have to ask...
>
> [...]
>
> | Since R's datasets package is GPL, I think I'd be within my rights to
> | just do this. But I wanted to ask first, to make sure I didn't ruffle
> | any feathers. I would include documentation indicating that R is the
> | original source (well, intermediate source) for these datasets, and have
> | links pointing back to R's documentation.
>
> That is the right way to do that. Respect both copyright (citing and
> referencing source) and licensing (by picking a license compatible
> with GPL 2
> or later; many of us just prefer to stick to GPL which Octave uses too).
>
> Dirk, in no way speaking for R Core but just handing out his $0.02

Thanks Dirk!

I've ported many of the datasets over to Octave code in my "Tablicious"
project.

To preserve credit, I've:
- propagated the "Copyright (C) 1995-2007 R Core Team" copyright
statement to the copyright headers in all the individual files for the
Octave code, since GNU Octave does per-file copyright headers
- added a "This is based on the <name> dataset from R's datasets
package" comment to each individual dataset source file
- added a section to the user manual mentioning that they came from R:
https://apjanke.github.io/octave-tablicious/doc/tablicious.html#Data-Sets-from-R

My project is GPL3+, so it's license compatible.

If you're curious to see how it turned out, the source is at
https://github.com/apjanke/octave-tablicious under
https://github.com/apjanke/octave-tablicious/tree/master/inst/%2Boctave/%2Binternal/%2Bdatasets
and
https://github.com/apjanke/octave-tablicious/tree/master/inst/%2Boctave/%2Bexamples/%2Binternal/%2Bdatasets.

R seems to have an edge on Octave in terms of plotting capabilities, so
many of the code examples in my port are just "TODO: Port this plot type
to Octave".

Cheers,
Andrew


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed May 15 21:14:20 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 15 May 2019 21:14:20 +0200
Subject: [Rd] Bug in function boxplot's axis labeling
In-Reply-To: <8689a18f-486b-41d3-22b0-6f82839186d7@beuth-hochschule.de>
References: <8689a18f-486b-41d3-22b0-6f82839186d7@beuth-hochschule.de>
Message-ID: <23772.25868.321904.982200@stat.math.ethz.ch>

>>>>> Ulrike Gr?mping 
>>>>>     on Mon, 6 May 2019 10:09:05 +0200 writes:

    > Dear developeRs, I appreciate that boxplot now labels the
    > axes with variable names per default. However, with
    > argument "horizontal=TRUE" (which I always use), the
    > default axis labels are mixed up, as can e.g. be seen with

    > require(boot) 
    > boxplot(time ~ poison, poisons, horizontal=TRUE)

    > The correct labels would be obtained by

    > boxplot(time ~ poison, poisons, horizontal=TRUE,
    > 		xlab="time", ylab="poison")

    > Best, Ulrike

Yes, indeed.  Thank you, Ulrike, belatedly.

I've committed a corresponding change to R-devel yesterday, svn r 75503,
and will port that to   "R 3.6.0 patched" (so it will make it into R 3.6.1
and all newer versions) in a day or so.

Best,
Martin

--
Martin Maechler at R-project.org  &  @ETHZ.ch


From wdun|@p @end|ng |rom t|bco@com  Thu May 16 20:56:45 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Thu, 16 May 2019 11:56:45 -0700
Subject: [Rd] print.<strorageMode>() not called when autoprinting
Message-ID: <CAF8bMcatAtZ_LPWZk3QxVQXS5qHA14_j=_tBvGbbH+m0kBYnAQ@mail.gmail.com>

In R-3.6.0 autoprinting was changed so that print methods for the storage
modes are not called when there is no explicit class attribute.   E.g.,

% R-3.6.0 --vanilla --quiet
> print.function <- function(x, ...) { cat("Function with argument list ");
cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
> f <- function(x, ...) { sum( x * seq_along(x) ) }
> f
function(x, ...) { sum( x * seq_along(x) ) }
> print(f)
Function with argument list function (x, ...)

Previous to R-3.6.0 autoprinting did call such methods
% R-3.5.3 --vanilla --quiet
> print.function <- function(x, ...) { cat("Function with argument list ");
cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
> f <- function(x, ...) { sum( x * seq_along(x) ) }
> f
Function with argument list function (x, ...)
> print(f)
Function with argument list function (x, ...)

Was this intentional?

Bill Dunlap
TIBCO Software
wdunlap tibco.com

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Thu May 16 20:57:17 2019
From: @zwj|08 @end|ng |rom gm@||@com (=?UTF-8?B?5LuL6Z2e546L?=)
Date: Thu, 16 May 2019 14:57:17 -0400
Subject: [Rd] ALTREP: Bug reports
Message-ID: <CAGiFhPPjds+myJWKxfCBC_f3L+kSofnm+g3q73ntZ6v6=aATcg@mail.gmail.com>

Hello,

I have encountered two bugs when using ALTREP APIs.

1. STDVEC_DATAPTR

>From RInternal.h file it has a comment:

/* ALTREP support */
> void *(STDVEC_DATAPTR)(SEXP x);


However, this comment might not be true, the easiest way to verify it is to
define a C++ function:

 void C_testFunc(SEXP a)
> {
> STDVEC_DATAPTR(a);
> }


and call it in R via

> a=1:10
> > C_testFunc(a)
> Error in C_testFunc(a) : cannot get STDVEC_DATAPTR from ALTREP object


 We can inspect the internal type and call ALTREP function to check if it
is an ALTREP:

> .Internal(inspect(a))
> @0x000000001b5a3310 13 INTSXP g0c0 [NAM(7)]  1 : 10 (compact)
> > #This is a wrapper of ALTREP
> > is.altrep(a)
> [1] TRUE


I've also defined an ALTREP type and it did not work either. I guess this
might be a bug? Or did I miss something?

2. Wrapper objects in ALTREP

If the duplicate function is defined to return the object itself:

SEXP vector_dulplicate(SEXP x, Rboolean deep) {
return(x);
}

In R an ALTREP object will behave like an environment (pass-by-reference).
However, if we do something like(pseudo code):

n=100
> x=runif(n)
> alt1=createAltrep(x)
> alt2=alt1
> alt2[1]=10
> .Internal(inspect(alt1))
> .Internal(inspect(alt2))


The result would be:

> .Internal(inspect(alt1))
> @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
> > .Internal(inspect(alt2 ))
> @0x00000000156a33e0 14 REALSXP g0c0 [NAM(7)]  wrapper
> [srt=-2147483648,no_na=0]
>   @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]


It seems like the object alt2 automatically gets wrapped by R. Although at
the R level it seems fine because there are no differences between alt1 and
alt2, if we define a C function as:

SEXP C_peekSharedMemory(SEXP x) {
> return(R_altrep_data1(x));

}


and call it in R to get the internal data structure of an ALTREP object.

C_peekSharedMemory(alt1)
> C_peekSharedMemory(alt2)


The first one correctly returns its internal data structure, but the second
one returns the ALTREP object it wraps since the wrapper itself is an
ALTREP. This behavior is unexpected. Since the dulplicate function returns
the object itself, I will expect alt1 and alt2 should be the same object.
Even if they are essentially not the same, calling the same function should
at least return the same result. Other than that, It seems like R does not
always wrap an ALTREP object. If we change n from 100 to 10 and check the
internal again, alt2 will not get wrapped. This makes the problem even more
difficult since we cannot predict when would the wrapper appear.

Here is the source code for the wrapper:
https://github.com/wch/r-source/blob/trunk/src/main/altclasses.c#L1399

Here is a working example if one can build the sharedObject package from
https://github.com/Jiefei-Wang/sharedObject

n=100
> x=runif(n)
> so1=sharedObject(x,copyOnWrite = FALSE)
> so2=so1
> so2[1]=10
> .Internal(inspect(so1))
> .Internal(inspect(so2))


Here is my session info:

R version 3.6.0 alpha (2019-04-08 r76348)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows >= 8 x64 (build 9200)
> Matrix products: default
> locale:
> [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United
> States.1252
> [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
>
> [5] LC_TIME=English_United States.1252
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> other attached packages:
> [1] sharedObject_0.0.99
> loaded via a namespace (and not attached):
> [1] compiler_3.6.0 tools_3.6.0    Rcpp_1.0.1


Best,
Jiefei

	[[alternative HTML version deleted]]


From |uke-t|erney @end|ng |rom u|ow@@edu  Thu May 16 21:46:29 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Thu, 16 May 2019 19:46:29 +0000
Subject: [Rd] [External]  ALTREP: Bug reports
In-Reply-To: <CAGiFhPPjds+myJWKxfCBC_f3L+kSofnm+g3q73ntZ6v6=aATcg@mail.gmail.com>
References: <CAGiFhPPjds+myJWKxfCBC_f3L+kSofnm+g3q73ntZ6v6=aATcg@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1905161441540.2805@luke-Latitude-7480>

On Thu, 16 May 2019, ??? wrote:

> Hello,
>
> I have encountered two bugs when using ALTREP APIs.
>
> 1. STDVEC_DATAPTR
>
> From RInternal.h file it has a comment:
>
> /* ALTREP support */
>> void *(STDVEC_DATAPTR)(SEXP x);
>
>
> However, this comment might not be true, the easiest way to verify it is to
> define a C++ function:
>
> void C_testFunc(SEXP a)
>> {
>> STDVEC_DATAPTR(a);
>> }
>
>
> and call it in R via
>
>> a=1:10
>>> C_testFunc(a)
>> Error in C_testFunc(a) : cannot get STDVEC_DATAPTR from ALTREP object
>
>
> We can inspect the internal type and call ALTREP function to check if it
> is an ALTREP:
>
>> .Internal(inspect(a))
>> @0x000000001b5a3310 13 INTSXP g0c0 [NAM(7)]  1 : 10 (compact)
>>> #This is a wrapper of ALTREP
>>> is.altrep(a)
>> [1] TRUE
>
>
> I've also defined an ALTREP type and it did not work either. I guess this
> might be a bug? Or did I miss something?

STDVEC_DATAPTR returns the data pointer of a standard (non-ALTREP)
vector.  It should not be necessary to use it in package code; if you
callit on an ALTREP you are likely to get a segfault.

>
> 2. Wrapper objects in ALTREP
>
> If the duplicate function is defined to return the object itself:

Don't do that. Mutable objects don't work. Look at the vignette in
https://github.com/ALTREP-examples/Rpkg-mutable for more on this.

Best,

luke

>
> SEXP vector_dulplicate(SEXP x, Rboolean deep) {
> return(x);
> }
>
> In R an ALTREP object will behave like an environment (pass-by-reference).
> However, if we do something like(pseudo code):
>
> n=100
>> x=runif(n)
>> alt1=createAltrep(x)
>> alt2=alt1
>> alt2[1]=10
>> .Internal(inspect(alt1))
>> .Internal(inspect(alt2))
>
>
> The result would be:
>
>> .Internal(inspect(alt1))
>> @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
>>> .Internal(inspect(alt2 ))
>> @0x00000000156a33e0 14 REALSXP g0c0 [NAM(7)]  wrapper
>> [srt=-2147483648,no_na=0]
>>   @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
>
>
> It seems like the object alt2 automatically gets wrapped by R. Although at
> the R level it seems fine because there are no differences between alt1 and
> alt2, if we define a C function as:
>
> SEXP C_peekSharedMemory(SEXP x) {
>> return(R_altrep_data1(x));
>
> }
>
>
> and call it in R to get the internal data structure of an ALTREP object.
>
> C_peekSharedMemory(alt1)
>> C_peekSharedMemory(alt2)
>
>
> The first one correctly returns its internal data structure, but the second
> one returns the ALTREP object it wraps since the wrapper itself is an
> ALTREP. This behavior is unexpected. Since the dulplicate function returns
> the object itself, I will expect alt1 and alt2 should be the same object.
> Even if they are essentially not the same, calling the same function should
> at least return the same result. Other than that, It seems like R does not
> always wrap an ALTREP object. If we change n from 100 to 10 and check the
> internal again, alt2 will not get wrapped. This makes the problem even more
> difficult since we cannot predict when would the wrapper appear.
>
> Here is the source code for the wrapper:
> https://github.com/wch/r-source/blob/trunk/src/main/altclasses.c#L1399
>
> Here is a working example if one can build the sharedObject package from
> https://github.com/Jiefei-Wang/sharedObject
>
> n=100
>> x=runif(n)
>> so1=sharedObject(x,copyOnWrite = FALSE)
>> so2=so1
>> so2[1]=10
>> .Internal(inspect(so1))
>> .Internal(inspect(so2))
>
>
> Here is my session info:
>
> R version 3.6.0 alpha (2019-04-08 r76348)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows >= 8 x64 (build 9200)
>> Matrix products: default
>> locale:
>> [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United
>> States.1252
>> [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
>>
>> [5] LC_TIME=English_United States.1252
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>> other attached packages:
>> [1] sharedObject_0.0.99
>> loaded via a namespace (and not attached):
>> [1] compiler_3.6.0 tools_3.6.0    Rcpp_1.0.1
>
>
> Best,
> Jiefei
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From g@bembecker @end|ng |rom gm@||@com  Thu May 16 21:47:21 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 16 May 2019 12:47:21 -0700
Subject: [Rd] ALTREP: Bug reports
In-Reply-To: <CAGiFhPPjds+myJWKxfCBC_f3L+kSofnm+g3q73ntZ6v6=aATcg@mail.gmail.com>
References: <CAGiFhPPjds+myJWKxfCBC_f3L+kSofnm+g3q73ntZ6v6=aATcg@mail.gmail.com>
Message-ID: <CAD4oTHEoH8f5FLA3PChfMHmhfFkP8YaS9GVF+v3hj_A=BiJWQQ@mail.gmail.com>

Hi Jiefei,

Thanks for tryingout the ALTREP stuff and letting us know how it is going.
That said I don't think either of these are bugs, per se, but rather a
misunderstanding of the API. Details inline.



On Thu, May 16, 2019 at 11:57 AM ??? <szwjf08 at gmail.com> wrote:

> Hello,
>
> I have encountered two bugs when using ALTREP APIs.
>
> 1. STDVEC_DATAPTR
>
> From RInternal.h file it has a comment:
>
> /* ALTREP support */
> > void *(STDVEC_DATAPTR)(SEXP x);
>
>
> However, this comment might not be true, the easiest way to verify it is to
> define a C++ function:
>
>  void C_testFunc(SEXP a)
> > {
> > STDVEC_DATAPTR(a);
> > }
>
>
> and call it in R via
>
> > a=1:10
> > > C_testFunc(a)
> > Error in C_testFunc(a) : cannot get STDVEC_DATAPTR from ALTREP object
>
>
The STDVEC here refers to the SEXP not being an ALTREP. Anything that
starts with STDVEC should never receive an ALTREP, ie it should only be
called after non-ALTREPness has been confirmed by the surrounding/preceding
code. So this is expected behavior.




>
>  We can inspect the internal type and call ALTREP function to check if it
> is an ALTREP:
>
> > .Internal(inspect(a))
> > @0x000000001b5a3310 13 INTSXP g0c0 [NAM(7)]  1 : 10 (compact)
> > > #This is a wrapper of ALTREP
> > > is.altrep(a)
> > [1] TRUE
>
>
> I've also defined an ALTREP type and it did not work either. I guess this
> might be a bug? Or did I miss something?
>
> 2. Wrapper objects in ALTREP
>
> If the duplicate function is defined to return the object itself:
>
> SEXP vector_dulplicate(SEXP x, Rboolean deep) {
> return(x);
> }
>

So this is a violation of of the contract. <youraltrep>_duplicate *must* do
an actual duplication. Returning the object unduplicated when duplicate is
called is going to have all sorts of unintended negative consequences. R's
internals rely on the fact that a SEXP that has been passed to DUPLICATE
has been duplciated and is safe to modify inplace.



> In R an ALTREP object will behave like an environment (pass-by-reference).
> However, if we do something like(pseudo code):
>
> n=100
> > x=runif(n)
> > alt1=createAltrep(x)
> > alt2=alt1
> > alt2[1]=10
> > .Internal(inspect(alt1))
> > .Internal(inspect(alt2))
>
>
> The result would be:
>
> > .Internal(inspect(alt1))
> > @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
> > > .Internal(inspect(alt2 ))
> > @0x00000000156a33e0 14 REALSXP g0c0 [NAM(7)]  wrapper
> > [srt=-2147483648,no_na=0]
> >   @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
>
>
> It seems like the object alt2 automatically gets wrapped by R. Although at
> the R level it seems fine because there are no differences between alt1 and
> alt2, if we define a C function as:
>

So I'm not sure what is happening here, because it depends on what your
createAltrep function does. R automatically creates wrappers in some cases
but not nearly all (or even very many currently) cases.

>
> SEXP C_peekSharedMemory(SEXP x) {
> > return(R_altrep_data1(x));
>
> }
>
>
> and call it in R to get the internal data structure of an ALTREP object.
>
> C_peekSharedMemory(alt1)
> > C_peekSharedMemory(alt2)
>
>
> The first one correctly returns its internal data structure, but the second
> one returns the ALTREP object it wraps since the wrapper itself is an
> ALTREP. This behavior is unexpected.


I disagree. R_altrep_data1 returns whatever THAT altrep SEXP stores in its
"data1" part. There is no recursion/descent going on, and there shouldn't
be.


> Since the dulplicate function returns
> the object itself, I will expect alt1 and alt2 should be the same object.
>

Again, this is a violation of the core assumptions of ALTREP that is not
allowed, so I'd argue that any behavior this causes is largely irrelevant
(and a smart part of the much larger set of problems not duplicating when R
told you to duplicate will cause).







> Even if they are essentially not the same, calling the same function should
> at least return the same result. Other than that, It seems like R does not
> always wrap an ALTREP object. If we change n from 100 to 10 and check the
> internal again, alt2 will not get wrapped.


Right, so this is a misunderstanding (which may be the fault of sparse
documentation on our part);  wrapper is one particular ALTREP class, its
not a fundamental aspect of ALTREPs themselves. Most ALTREP objects do not
have wrappers. See, e.g.,

> .Internal(inspect(1:4))

@7fb727d6be50 13 INTSXP g0c0 [NAM(3)]  1 : 4 (compact)


That's an ALTREP with no wrapper (a compact sequence). The wrapper ALTREP
class is for attaching metadata (known sortedness, known lack of NAs) to R
vectors. Its primary use currently is on the return value of sort().


> This makes the problem even more
> difficult since we cannot predict when would the wrapper appear.
>

As currently factored, its not intended that you would be or need to
predict when a wrapper would appear. Using the C API or any R functions
will transparently treat wrapped and non-wrapped objects the same, and any
code you write should hit these API entrypoints so that any code you write
does the same.

Does that help?

Best,
~G

>
> Here is the source code for the wrapper:
> https://github.com/wch/r-source/blob/trunk/src/main/altclasses.c#L1399
>
> Here is a working example if one can build the sharedObject package from
> https://github.com/Jiefei-Wang/sharedObject
>
> n=100
> > x=runif(n)
> > so1=sharedObject(x,copyOnWrite = FALSE)
> > so2=so1
> > so2[1]=10
> > .Internal(inspect(so1))
> > .Internal(inspect(so2))
>
>
> Here is my session info:
>
> R version 3.6.0 alpha (2019-04-08 r76348)
> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> > Running under: Windows >= 8 x64 (build 9200)
> > Matrix products: default
> > locale:
> > [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United
> > States.1252
> > [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
> >
> > [5] LC_TIME=English_United States.1252
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> > other attached packages:
> > [1] sharedObject_0.0.99
> > loaded via a namespace (and not attached):
> > [1] compiler_3.6.0 tools_3.6.0    Rcpp_1.0.1
>
>
> Best,
> Jiefei
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Thu May 16 22:17:45 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 16 May 2019 13:17:45 -0700
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
Message-ID: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>

Hi all,

Apologies if this has been asked before (a quick google didn't  find it for
me),and I know this is a case of behaving as documented but its so
unintuitive (to me at least) that I figured I'd bring it up here anyway. I
figure its probably going to not be changed,  but I'm happy to submit a
patch if this is something R-core feels can/should change.

So I recently got bitten by the fact that

> nrow(rbind(character(), character()))

[1] 2


I was checking whether the result of an rbind call had more than one row,
and that unexpected returned true, causing all sorts of shenanigans
downstream as I'm sure you can imagine.

Now I know that from ?rbind

For ?cbind? (?rbind?), vectors of zero length (including ?NULL?)
>
>      are ignored unless the result would have zero rows (columns), for
>
>      S compatibility.  (Zero-extent matrices do not occur in S3 and are
>
>      not ignored in R.)
>

But there's a couple of things here. First, for the rowbind  case this
reads as "if there would be zero columns,  the vectors will not be
ignored". This wording implies to me that not ignoring the vectors is a
remedy to the "problem" of the potential for a zero-column return, but
thats not the case.  The result still has 0 columns, it just does not also
have zero rows. So even if the behavior is not changed, perhaps this
wording can be massaged for clarity?

The other issue, which I admit is likely a problem with my intuition, but
which I don't think I'm alone in having, is that even if I can't have a 0x0
matrix (which is what I'd prefer) I would have expected/preferred a 1x0
matrix, the reasoning being that if we must avoid a 0x0 return value, we
would do the  minimum required to avoid, which is to not ignore the first
length 0 vector, to ensure a non-zero-extent matrix, but then ignore the
remaining ones as they contain information for 0 new rows.

Of course I can program around this now that I know the behavior, but
again, its so unintuitive (even for someone with a fairly well developed
intuition for R's sometimes "quirky" behavior) that I figured I'd bring it
up.

Thoughts?

Best,
~G

	[[alternative HTML version deleted]]


From h@w|ckh@m @end|ng |rom gm@||@com  Thu May 16 22:59:18 2019
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Thu, 16 May 2019 15:59:18 -0500
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
In-Reply-To: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
References: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
Message-ID: <CABdHhvF5bkFigyMO=nuC===1P0USbdoV+CSw7zfcVmw02YO9xw@mail.gmail.com>

The existing behaviour seems inutitive to me. I would consider these
invariants for n vector x_i's each with size m:

* nrow(rbind(x_1, x_2, ..., x_n)) equals n
* ncol(rbind(x_1, x_2, ..., x_n)) equals m

Additionally, wouldn't you expect rbind(x_1[i], x_2[i]) to equal
rbind(x_1, x_2)[, i, drop = FALSE] ?

Hadley

On Thu, May 16, 2019 at 3:26 PM Gabriel Becker <gabembecker at gmail.com> wrote:
>
> Hi all,
>
> Apologies if this has been asked before (a quick google didn't  find it for
> me),and I know this is a case of behaving as documented but its so
> unintuitive (to me at least) that I figured I'd bring it up here anyway. I
> figure its probably going to not be changed,  but I'm happy to submit a
> patch if this is something R-core feels can/should change.
>
> So I recently got bitten by the fact that
>
> > nrow(rbind(character(), character()))
>
> [1] 2
>
>
> I was checking whether the result of an rbind call had more than one row,
> and that unexpected returned true, causing all sorts of shenanigans
> downstream as I'm sure you can imagine.
>
> Now I know that from ?rbind
>
> For ?cbind? (?rbind?), vectors of zero length (including ?NULL?)
> >
> >      are ignored unless the result would have zero rows (columns), for
> >
> >      S compatibility.  (Zero-extent matrices do not occur in S3 and are
> >
> >      not ignored in R.)
> >
>
> But there's a couple of things here. First, for the rowbind  case this
> reads as "if there would be zero columns,  the vectors will not be
> ignored". This wording implies to me that not ignoring the vectors is a
> remedy to the "problem" of the potential for a zero-column return, but
> thats not the case.  The result still has 0 columns, it just does not also
> have zero rows. So even if the behavior is not changed, perhaps this
> wording can be massaged for clarity?
>
> The other issue, which I admit is likely a problem with my intuition, but
> which I don't think I'm alone in having, is that even if I can't have a 0x0
> matrix (which is what I'd prefer) I would have expected/preferred a 1x0
> matrix, the reasoning being that if we must avoid a 0x0 return value, we
> would do the  minimum required to avoid, which is to not ignore the first
> length 0 vector, to ensure a non-zero-extent matrix, but then ignore the
> remaining ones as they contain information for 0 new rows.
>
> Of course I can program around this now that I know the behavior, but
> again, its so unintuitive (even for someone with a fairly well developed
> intuition for R's sometimes "quirky" behavior) that I figured I'd bring it
> up.
>
> Thoughts?
>
> Best,
> ~G
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
http://hadley.nz


From h@nk|n@rob|n @end|ng |rom gm@||@com  Thu May 16 23:25:14 2019
From: h@nk|n@rob|n @end|ng |rom gm@||@com (robin hankin)
Date: Fri, 17 May 2019 09:25:14 +1200
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
In-Reply-To: <CABdHhvF5bkFigyMO=nuC===1P0USbdoV+CSw7zfcVmw02YO9xw@mail.gmail.com>
References: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
 <CABdHhvF5bkFigyMO=nuC===1P0USbdoV+CSw7zfcVmw02YO9xw@mail.gmail.com>
Message-ID: <CAHHjBM4dpG4uw6EE1HpGzF_OMC70N4vYFo-uFRorV_nquYdxhw@mail.gmail.com>

Gabriel, you ask an insightful and instructive question. One of R's
great strengths is that we have a forum where this kind of edge-case
can be fruitfully discussed.
My interest in this would be the names of the arguments; in the magic
package I make heavy use of the dimnames of zero-extent arrays.

> rbind(a='x',b='y')
  [,1]
a "x"
b "y"

> rbind(a='x',b=character())
  [,1]
a "x"

> rbind(a=character(),b=character())

a
b

The first and third idiom are fine.  The result of the second one, in
which we rbind() a length-one to  a length-zero vector, is desirable
IMO on the grounds that the content of a two-row matrix cannot be
defined sensibly, so R takes the perfectly reasonable stance of
deciding to ignore the second argument...which carries with it the
implication that the name ('b')  be ignored too.  If the second
argument *could* be recycled, I would want the name, otherwise I
wouldn't.  And this is what R does.

best wishes,


hankin.robin at gmail.com



hankin.robin at gmail.com




On Fri, May 17, 2019 at 9:06 AM Hadley Wickham <h.wickham at gmail.com> wrote:
>
> The existing behaviour seems inutitive to me. I would consider these
> invariants for n vector x_i's each with size m:
>
> * nrow(rbind(x_1, x_2, ..., x_n)) equals n
> * ncol(rbind(x_1, x_2, ..., x_n)) equals m
>
> Additionally, wouldn't you expect rbind(x_1[i], x_2[i]) to equal
> rbind(x_1, x_2)[, i, drop = FALSE] ?
>
> Hadley
>
> On Thu, May 16, 2019 at 3:26 PM Gabriel Becker <gabembecker at gmail.com> wrote:
> >
> > Hi all,
> >
> > Apologies if this has been asked before (a quick google didn't  find it for
> > me),and I know this is a case of behaving as documented but its so
> > unintuitive (to me at least) that I figured I'd bring it up here anyway. I
> > figure its probably going to not be changed,  but I'm happy to submit a
> > patch if this is something R-core feels can/should change.
> >
> > So I recently got bitten by the fact that
> >
> > > nrow(rbind(character(), character()))
> >
> > [1] 2
> >
> >
> > I was checking whether the result of an rbind call had more than one row,
> > and that unexpected returned true, causing all sorts of shenanigans
> > downstream as I'm sure you can imagine.
> >
> > Now I know that from ?rbind
> >
> > For ?cbind? (?rbind?), vectors of zero length (including ?NULL?)
> > >
> > >      are ignored unless the result would have zero rows (columns), for
> > >
> > >      S compatibility.  (Zero-extent matrices do not occur in S3 and are
> > >
> > >      not ignored in R.)
> > >
> >
> > But there's a couple of things here. First, for the rowbind  case this
> > reads as "if there would be zero columns,  the vectors will not be
> > ignored". This wording implies to me that not ignoring the vectors is a
> > remedy to the "problem" of the potential for a zero-column return, but
> > thats not the case.  The result still has 0 columns, it just does not also
> > have zero rows. So even if the behavior is not changed, perhaps this
> > wording can be massaged for clarity?
> >
> > The other issue, which I admit is likely a problem with my intuition, but
> > which I don't think I'm alone in having, is that even if I can't have a 0x0
> > matrix (which is what I'd prefer) I would have expected/preferred a 1x0
> > matrix, the reasoning being that if we must avoid a 0x0 return value, we
> > would do the  minimum required to avoid, which is to not ignore the first
> > length 0 vector, to ensure a non-zero-extent matrix, but then ignore the
> > remaining ones as they contain information for 0 new rows.
> >
> > Of course I can program around this now that I know the behavior, but
> > again, its so unintuitive (even for someone with a fairly well developed
> > intuition for R's sometimes "quirky" behavior) that I figured I'd bring it
> > up.
> >
> > Thoughts?
> >
> > Best,
> > ~G
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> http://hadley.nz
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @zwj|08 @end|ng |rom gm@||@com  Thu May 16 23:29:58 2019
From: @zwj|08 @end|ng |rom gm@||@com (=?UTF-8?B?5LuL6Z2e546L?=)
Date: Thu, 16 May 2019 17:29:58 -0400
Subject: [Rd] ALTREP: Bug reports
In-Reply-To: <CAD4oTHEoH8f5FLA3PChfMHmhfFkP8YaS9GVF+v3hj_A=BiJWQQ@mail.gmail.com>
References: <CAGiFhPPjds+myJWKxfCBC_f3L+kSofnm+g3q73ntZ6v6=aATcg@mail.gmail.com>
 <CAD4oTHEoH8f5FLA3PChfMHmhfFkP8YaS9GVF+v3hj_A=BiJWQQ@mail.gmail.com>
Message-ID: <CAGiFhPNr0Fp6E_iTqHB+29HoOYBARvs5pr1Uyh8pgASrvfg+iQ@mail.gmail.com>

Hello Luke and Gabriel,

Thank you very much for your quick responses. The explanation of STDVEC is
very helpful and I appreciate it! For the wrapper, I have a few new
questions.


1. Like Luke said a mutable object is not possible. However, I noticed that
there is one extra argument *deep* in the function duplicate. I've googled
all the available documentation for ALTREP but I did not find any
explanation of it. Could you please give some detail on it?


2.

> The first one correctly returns its internal data structure, but the second
> one returns the ALTREP object it wraps since the wrapper itself is an
> ALTREP. This behavior is unexpected.


I disagree. R_altrep_data1 returns whatever THAT altrep SEXP stores in its
> "data1" part. There is no recursion/descent going on, and there shouldn't
> be.


This is might be a bug since in R release 3.6 it will return the ALTREP
instead of the data of the ALTREP. I'm not sure if it has been fixed in
3.7. Here is a simple example:

SEXP C_peekSharedMemory(SEXP x) {
> while (ALTREP(x)) {
> Rprintf("getting data 1\n");
> x = R_altrep_data1(x);
> }
> return(x);
> }


If calling R_altrep_data1 return the internal data directly, we will only
see one message. following my last example

> .Internal(inspect(so1))
> @0x0000000005e7fbb0 14 REALSXP g0c0 [MARK,NAM(7)]  Share object of type
> double
> > .Internal(inspect(so2))
> @0x0000000005fc5ac0 14 REALSXP g0c0 [MARK,NAM(7)]  wrapper
> [srt=-2147483648,no_na=0]
>   @0x0000000005e7fbb0 14 REALSXP g0c0 [MARK,NAM(7)]  Share object of type
> double
> > sm1=peekSharedMemory(so1)
> getting data 1
> > sm2=peekSharedMemory(so2)
> getting data 1
> getting data 1


We see that so2 call R_altrep_data1 twice to get the internal data. This is
very unexpected.

Thank you very much for your help again!

Best,
Jiefei



On Thu, May 16, 2019 at 3:47 PM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Hi Jiefei,
>
> Thanks for tryingout the ALTREP stuff and letting us know how it is going.
> That said I don't think either of these are bugs, per se, but rather a
> misunderstanding of the API. Details inline.
>
>
>
> On Thu, May 16, 2019 at 11:57 AM ??? <szwjf08 at gmail.com> wrote:
>
>> Hello,
>>
>> I have encountered two bugs when using ALTREP APIs.
>>
>> 1. STDVEC_DATAPTR
>>
>> From RInternal.h file it has a comment:
>>
>> /* ALTREP support */
>> > void *(STDVEC_DATAPTR)(SEXP x);
>>
>>
>> However, this comment might not be true, the easiest way to verify it is
>> to
>> define a C++ function:
>>
>>  void C_testFunc(SEXP a)
>> > {
>> > STDVEC_DATAPTR(a);
>> > }
>>
>>
>> and call it in R via
>>
>> > a=1:10
>> > > C_testFunc(a)
>> > Error in C_testFunc(a) : cannot get STDVEC_DATAPTR from ALTREP object
>>
>>
> The STDVEC here refers to the SEXP not being an ALTREP. Anything that
> starts with STDVEC should never receive an ALTREP, ie it should only be
> called after non-ALTREPness has been confirmed by the surrounding/preceding
> code. So this is expected behavior.
>
>
>
>
>>
>>  We can inspect the internal type and call ALTREP function to check if it
>> is an ALTREP:
>>
>> > .Internal(inspect(a))
>> > @0x000000001b5a3310 13 INTSXP g0c0 [NAM(7)]  1 : 10 (compact)
>> > > #This is a wrapper of ALTREP
>> > > is.altrep(a)
>> > [1] TRUE
>>
>>
>> I've also defined an ALTREP type and it did not work either. I guess this
>> might be a bug? Or did I miss something?
>>
>> 2. Wrapper objects in ALTREP
>>
>> If the duplicate function is defined to return the object itself:
>>
>> SEXP vector_dulplicate(SEXP x, Rboolean deep) {
>> return(x);
>> }
>>
>
> So this is a violation of of the contract. <youraltrep>_duplicate *must*
> do an actual duplication. Returning the object unduplicated when duplicate
> is called is going to have all sorts of unintended negative consequences.
> R's internals rely on the fact that a SEXP that has been passed to
> DUPLICATE has been duplciated and is safe to modify inplace.
>
>
>
>> In R an ALTREP object will behave like an environment (pass-by-reference).
>> However, if we do something like(pseudo code):
>>
>> n=100
>> > x=runif(n)
>> > alt1=createAltrep(x)
>> > alt2=alt1
>> > alt2[1]=10
>> > .Internal(inspect(alt1))
>> > .Internal(inspect(alt2))
>>
>>
>> The result would be:
>>
>> > .Internal(inspect(alt1))
>> > @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
>> > > .Internal(inspect(alt2 ))
>> > @0x00000000156a33e0 14 REALSXP g0c0 [NAM(7)]  wrapper
>> > [srt=-2147483648,no_na=0]
>> >   @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
>>
>>
>> It seems like the object alt2 automatically gets wrapped by R. Although at
>> the R level it seems fine because there are no differences between alt1
>> and
>> alt2, if we define a C function as:
>>
>
> So I'm not sure what is happening here, because it depends on what your
> createAltrep function does. R automatically creates wrappers in some cases
> but not nearly all (or even very many currently) cases.
>
>>
>> SEXP C_peekSharedMemory(SEXP x) {
>> > return(R_altrep_data1(x));
>>
>> }
>>
>>
>> and call it in R to get the internal data structure of an ALTREP object.
>>
>> C_peekSharedMemory(alt1)
>> > C_peekSharedMemory(alt2)
>>
>>
>> The first one correctly returns its internal data structure, but the
>> second
>> one returns the ALTREP object it wraps since the wrapper itself is an
>> ALTREP. This behavior is unexpected.
>
>
> I disagree. R_altrep_data1 returns whatever THAT altrep SEXP stores in its
> "data1" part. There is no recursion/descent going on, and there shouldn't
> be.
>
>
>> Since the dulplicate function returns
>> the object itself, I will expect alt1 and alt2 should be the same object.
>>
>
> Again, this is a violation of the core assumptions of ALTREP that is not
> allowed, so I'd argue that any behavior this causes is largely irrelevant
> (and a smart part of the much larger set of problems not duplicating when R
> told you to duplicate will cause).
>
>
>
>
>
>
>
>> Even if they are essentially not the same, calling the same function
>> should
>> at least return the same result. Other than that, It seems like R does not
>> always wrap an ALTREP object. If we change n from 100 to 10 and check the
>> internal again, alt2 will not get wrapped.
>
>
> Right, so this is a misunderstanding (which may be the fault of sparse
> documentation on our part);  wrapper is one particular ALTREP class, its
> not a fundamental aspect of ALTREPs themselves. Most ALTREP objects do not
> have wrappers. See, e.g.,
>
> > .Internal(inspect(1:4))
>
> @7fb727d6be50 13 INTSXP g0c0 [NAM(3)]  1 : 4 (compact)
>
>
> That's an ALTREP with no wrapper (a compact sequence). The wrapper ALTREP
> class is for attaching metadata (known sortedness, known lack of NAs) to R
> vectors. Its primary use currently is on the return value of sort().
>
>
>> This makes the problem even more
>> difficult since we cannot predict when would the wrapper appear.
>>
>
> As currently factored, its not intended that you would be or need to
> predict when a wrapper would appear. Using the C API or any R functions
> will transparently treat wrapped and non-wrapped objects the same, and any
> code you write should hit these API entrypoints so that any code you write
> does the same.
>
> Does that help?
>
> Best,
> ~G
>
>>
>> Here is the source code for the wrapper:
>> https://github.com/wch/r-source/blob/trunk/src/main/altclasses.c#L1399
>>
>> Here is a working example if one can build the sharedObject package from
>> https://github.com/Jiefei-Wang/sharedObject
>>
>> n=100
>> > x=runif(n)
>> > so1=sharedObject(x,copyOnWrite = FALSE)
>> > so2=so1
>> > so2[1]=10
>> > .Internal(inspect(so1))
>> > .Internal(inspect(so2))
>>
>>
>> Here is my session info:
>>
>> R version 3.6.0 alpha (2019-04-08 r76348)
>> > Platform: x86_64-w64-mingw32/x64 (64-bit)
>> > Running under: Windows >= 8 x64 (build 9200)
>> > Matrix products: default
>> > locale:
>> > [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United
>> > States.1252
>> > [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
>> >
>> > [5] LC_TIME=English_United States.1252
>> > attached base packages:
>> > [1] stats     graphics  grDevices utils     datasets  methods   base
>> > other attached packages:
>> > [1] sharedObject_0.0.99
>> > loaded via a namespace (and not attached):
>> > [1] compiler_3.6.0 tools_3.6.0    Rcpp_1.0.1
>>
>>
>> Best,
>> Jiefei
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Thu May 16 23:35:16 2019
From: @zwj|08 @end|ng |rom gm@||@com (=?UTF-8?B?5LuL6Z2e546L?=)
Date: Thu, 16 May 2019 17:35:16 -0400
Subject: [Rd] ALTREP: Bug reports
In-Reply-To: <CAGiFhPNr0Fp6E_iTqHB+29HoOYBARvs5pr1Uyh8pgASrvfg+iQ@mail.gmail.com>
References: <CAGiFhPPjds+myJWKxfCBC_f3L+kSofnm+g3q73ntZ6v6=aATcg@mail.gmail.com>
 <CAD4oTHEoH8f5FLA3PChfMHmhfFkP8YaS9GVF+v3hj_A=BiJWQQ@mail.gmail.com>
 <CAGiFhPNr0Fp6E_iTqHB+29HoOYBARvs5pr1Uyh8pgASrvfg+iQ@mail.gmail.com>
Message-ID: <CAGiFhPMn-Tc0yS+5_41i5zVvO_iBjMeUF1fO=24G_ZSDyB1H+w@mail.gmail.com>

Hi,

Sorry for overflow the mailbox. Please ignore the second question, I
misunderstand Gabriel answer.

Best,
Jiefei

On Thu, May 16, 2019 at 5:29 PM ??? <szwjf08 at gmail.com> wrote:

> Hello Luke and Gabriel,
>
> Thank you very much for your quick responses. The explanation of STDVEC is
> very helpful and I appreciate it! For the wrapper, I have a few new
> questions.
>
>
> 1. Like Luke said a mutable object is not possible. However, I noticed
> that there is one extra argument *deep* in the function duplicate. I've
> googled all the available documentation for ALTREP but I did not find any
> explanation of it. Could you please give some detail on it?
>
>
> 2.
>
>> The first one correctly returns its internal data structure, but the
>> second
>> one returns the ALTREP object it wraps since the wrapper itself is an
>> ALTREP. This behavior is unexpected.
>
>
> I disagree. R_altrep_data1 returns whatever THAT altrep SEXP stores in its
>> "data1" part. There is no recursion/descent going on, and there shouldn't
>> be.
>
>
> This is might be a bug since in R release 3.6 it will return the ALTREP
> instead of the data of the ALTREP. I'm not sure if it has been fixed in
> 3.7. Here is a simple example:
>
> SEXP C_peekSharedMemory(SEXP x) {
>> while (ALTREP(x)) {
>> Rprintf("getting data 1\n");
>> x = R_altrep_data1(x);
>> }
>> return(x);
>> }
>
>
> If calling R_altrep_data1 return the internal data directly, we will only
> see one message. following my last example
>
> > .Internal(inspect(so1))
>> @0x0000000005e7fbb0 14 REALSXP g0c0 [MARK,NAM(7)]  Share object of type
>> double
>> > .Internal(inspect(so2))
>> @0x0000000005fc5ac0 14 REALSXP g0c0 [MARK,NAM(7)]  wrapper
>> [srt=-2147483648,no_na=0]
>>   @0x0000000005e7fbb0 14 REALSXP g0c0 [MARK,NAM(7)]  Share object of type
>> double
>> > sm1=peekSharedMemory(so1)
>> getting data 1
>> > sm2=peekSharedMemory(so2)
>> getting data 1
>> getting data 1
>
>
> We see that so2 call R_altrep_data1 twice to get the internal data. This
> is very unexpected.
>
> Thank you very much for your help again!
>
> Best,
> Jiefei
>
>
>
> On Thu, May 16, 2019 at 3:47 PM Gabriel Becker <gabembecker at gmail.com>
> wrote:
>
>> Hi Jiefei,
>>
>> Thanks for tryingout the ALTREP stuff and letting us know how it is
>> going. That said I don't think either of these are bugs, per se, but rather
>> a misunderstanding of the API. Details inline.
>>
>>
>>
>> On Thu, May 16, 2019 at 11:57 AM ??? <szwjf08 at gmail.com> wrote:
>>
>>> Hello,
>>>
>>> I have encountered two bugs when using ALTREP APIs.
>>>
>>> 1. STDVEC_DATAPTR
>>>
>>> From RInternal.h file it has a comment:
>>>
>>> /* ALTREP support */
>>> > void *(STDVEC_DATAPTR)(SEXP x);
>>>
>>>
>>> However, this comment might not be true, the easiest way to verify it is
>>> to
>>> define a C++ function:
>>>
>>>  void C_testFunc(SEXP a)
>>> > {
>>> > STDVEC_DATAPTR(a);
>>> > }
>>>
>>>
>>> and call it in R via
>>>
>>> > a=1:10
>>> > > C_testFunc(a)
>>> > Error in C_testFunc(a) : cannot get STDVEC_DATAPTR from ALTREP object
>>>
>>>
>> The STDVEC here refers to the SEXP not being an ALTREP. Anything that
>> starts with STDVEC should never receive an ALTREP, ie it should only be
>> called after non-ALTREPness has been confirmed by the surrounding/preceding
>> code. So this is expected behavior.
>>
>>
>>
>>
>>>
>>>  We can inspect the internal type and call ALTREP function to check if it
>>> is an ALTREP:
>>>
>>> > .Internal(inspect(a))
>>> > @0x000000001b5a3310 13 INTSXP g0c0 [NAM(7)]  1 : 10 (compact)
>>> > > #This is a wrapper of ALTREP
>>> > > is.altrep(a)
>>> > [1] TRUE
>>>
>>>
>>> I've also defined an ALTREP type and it did not work either. I guess this
>>> might be a bug? Or did I miss something?
>>>
>>> 2. Wrapper objects in ALTREP
>>>
>>> If the duplicate function is defined to return the object itself:
>>>
>>> SEXP vector_dulplicate(SEXP x, Rboolean deep) {
>>> return(x);
>>> }
>>>
>>
>> So this is a violation of of the contract. <youraltrep>_duplicate *must*
>> do an actual duplication. Returning the object unduplicated when duplicate
>> is called is going to have all sorts of unintended negative consequences.
>> R's internals rely on the fact that a SEXP that has been passed to
>> DUPLICATE has been duplciated and is safe to modify inplace.
>>
>>
>>
>>> In R an ALTREP object will behave like an environment
>>> (pass-by-reference).
>>> However, if we do something like(pseudo code):
>>>
>>> n=100
>>> > x=runif(n)
>>> > alt1=createAltrep(x)
>>> > alt2=alt1
>>> > alt2[1]=10
>>> > .Internal(inspect(alt1))
>>> > .Internal(inspect(alt2))
>>>
>>>
>>> The result would be:
>>>
>>> > .Internal(inspect(alt1))
>>> > @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
>>> > > .Internal(inspect(alt2 ))
>>> > @0x00000000156a33e0 14 REALSXP g0c0 [NAM(7)]  wrapper
>>> > [srt=-2147483648,no_na=0]
>>> >   @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
>>>
>>>
>>> It seems like the object alt2 automatically gets wrapped by R. Although
>>> at
>>> the R level it seems fine because there are no differences between alt1
>>> and
>>> alt2, if we define a C function as:
>>>
>>
>> So I'm not sure what is happening here, because it depends on what your
>> createAltrep function does. R automatically creates wrappers in some cases
>> but not nearly all (or even very many currently) cases.
>>
>>>
>>> SEXP C_peekSharedMemory(SEXP x) {
>>> > return(R_altrep_data1(x));
>>>
>>> }
>>>
>>>
>>> and call it in R to get the internal data structure of an ALTREP object.
>>>
>>> C_peekSharedMemory(alt1)
>>> > C_peekSharedMemory(alt2)
>>>
>>>
>>> The first one correctly returns its internal data structure, but the
>>> second
>>> one returns the ALTREP object it wraps since the wrapper itself is an
>>> ALTREP. This behavior is unexpected.
>>
>>
>> I disagree. R_altrep_data1 returns whatever THAT altrep SEXP stores in
>> its "data1" part. There is no recursion/descent going on, and there
>> shouldn't be.
>>
>>
>>> Since the dulplicate function returns
>>> the object itself, I will expect alt1 and alt2 should be the same object.
>>>
>>
>> Again, this is a violation of the core assumptions of ALTREP that is not
>> allowed, so I'd argue that any behavior this causes is largely irrelevant
>> (and a smart part of the much larger set of problems not duplicating when R
>> told you to duplicate will cause).
>>
>>
>>
>>
>>
>>
>>
>>> Even if they are essentially not the same, calling the same function
>>> should
>>> at least return the same result. Other than that, It seems like R does
>>> not
>>> always wrap an ALTREP object. If we change n from 100 to 10 and check the
>>> internal again, alt2 will not get wrapped.
>>
>>
>> Right, so this is a misunderstanding (which may be the fault of sparse
>> documentation on our part);  wrapper is one particular ALTREP class, its
>> not a fundamental aspect of ALTREPs themselves. Most ALTREP objects do not
>> have wrappers. See, e.g.,
>>
>> > .Internal(inspect(1:4))
>>
>> @7fb727d6be50 13 INTSXP g0c0 [NAM(3)]  1 : 4 (compact)
>>
>>
>> That's an ALTREP with no wrapper (a compact sequence). The wrapper ALTREP
>> class is for attaching metadata (known sortedness, known lack of NAs) to R
>> vectors. Its primary use currently is on the return value of sort().
>>
>>
>>> This makes the problem even more
>>> difficult since we cannot predict when would the wrapper appear.
>>>
>>
>> As currently factored, its not intended that you would be or need to
>> predict when a wrapper would appear. Using the C API or any R functions
>> will transparently treat wrapped and non-wrapped objects the same, and any
>> code you write should hit these API entrypoints so that any code you write
>> does the same.
>>
>> Does that help?
>>
>> Best,
>> ~G
>>
>>>
>>> Here is the source code for the wrapper:
>>> https://github.com/wch/r-source/blob/trunk/src/main/altclasses.c#L1399
>>>
>>> Here is a working example if one can build the sharedObject package from
>>> https://github.com/Jiefei-Wang/sharedObject
>>>
>>> n=100
>>> > x=runif(n)
>>> > so1=sharedObject(x,copyOnWrite = FALSE)
>>> > so2=so1
>>> > so2[1]=10
>>> > .Internal(inspect(so1))
>>> > .Internal(inspect(so2))
>>>
>>>
>>> Here is my session info:
>>>
>>> R version 3.6.0 alpha (2019-04-08 r76348)
>>> > Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> > Running under: Windows >= 8 x64 (build 9200)
>>> > Matrix products: default
>>> > locale:
>>> > [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United
>>> > States.1252
>>> > [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
>>> >
>>> > [5] LC_TIME=English_United States.1252
>>> > attached base packages:
>>> > [1] stats     graphics  grDevices utils     datasets  methods   base
>>> > other attached packages:
>>> > [1] sharedObject_0.0.99
>>> > loaded via a namespace (and not attached):
>>> > [1] compiler_3.6.0 tools_3.6.0    Rcpp_1.0.1
>>>
>>>
>>> Best,
>>> Jiefei
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Fri May 17 00:47:57 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 16 May 2019 15:47:57 -0700
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
In-Reply-To: <CABdHhvF5bkFigyMO=nuC===1P0USbdoV+CSw7zfcVmw02YO9xw@mail.gmail.com>
References: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
 <CABdHhvF5bkFigyMO=nuC===1P0USbdoV+CSw7zfcVmw02YO9xw@mail.gmail.com>
Message-ID: <CAD4oTHHFri915TAVkKw+EVz7c7niE9-wFijuB=_6hiqnkiHJRQ@mail.gmail.com>

Hi Hadley,

Thanks for the counterpoint. Response below.

On Thu, May 16, 2019 at 1:59 PM Hadley Wickham <h.wickham at gmail.com> wrote:

> The existing behaviour seems inutitive to me. I would consider these
> invariants for n vector x_i's each with size m:
>
> * nrow(rbind(x_1, x_2, ..., x_n)) equals n
>

Personally, no I wouldn't. I would consider m==0 a degenerate case, where
there is no data, but I personally find matrices (or data.frames) with rows
but no columns a very strange concept. The converse is not true, I
understand the utility of columns but no rows, particularly in the
data.frame case, but rows with no columns are observations we didn't
observe anything about. Strange, imho.

Also, I know that you said *each with size m*, but the generalization would
be

for n vectors with m = max(length(x_i))
nrow(rbind(x_1, ..., x_n)) = m

And that is the behavior now as documented, but *only* when length(x_i) >0
for all i (or, currently, when m == 0, so all vectors are length 0).

> nrow(rbind(1:5, numeric()))

[1] 1


So that is where I was coming from. Length-zero vectors don't add rows
because they contain no observed information.

I do see where you'er coming from, but it does make interrogating
nrow(rbind(x_1, ..., x_n)) NOT mean  (give me the number of observations
for which I have data), which is what it means in non-degenerate contexts,
and that seems pretty important too.

Robin does also have an interesting point below about argument names, but
I'll leave that for another mail.

Best,
~G

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Fri May 17 01:07:08 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 16 May 2019 16:07:08 -0700
Subject: [Rd] ALTREP: Bug reports
In-Reply-To: <CAGiFhPNr0Fp6E_iTqHB+29HoOYBARvs5pr1Uyh8pgASrvfg+iQ@mail.gmail.com>
References: <CAGiFhPPjds+myJWKxfCBC_f3L+kSofnm+g3q73ntZ6v6=aATcg@mail.gmail.com>
 <CAD4oTHEoH8f5FLA3PChfMHmhfFkP8YaS9GVF+v3hj_A=BiJWQQ@mail.gmail.com>
 <CAGiFhPNr0Fp6E_iTqHB+29HoOYBARvs5pr1Uyh8pgASrvfg+iQ@mail.gmail.com>
Message-ID: <CAD4oTHG72GjL2HkZ906-Z18q_Zbkac-qwtOzf1-QhqqE7Z81Vw@mail.gmail.com>

Jiefei,

Inline.

On Thu, May 16, 2019 at 2:30 PM ??? <szwjf08 at gmail.com> wrote:

> Hello Luke and Gabriel,
>
> Thank you very much for your quick responses. The explanation of STDVEC is
> very helpful and I appreciate it! For the wrapper, I have a few new
> questions.
>
>
> 1. Like Luke said a mutable object is not possible. However, I noticed
> that there is one extra argument *deep* in the function duplicate. I've
> googled all the available documentation for ALTREP but I did not find any
> explanation of it. Could you please give some detail on it?
>

Deep means in the case of compound/nested structure, e.g., most easily
illustrative the case of a list in R (or VECSXP in C) , do the elements
need to be duplicated (deep == TRUE) or *only* the "container" SEXP.

Consider an R list:

x = 1:5

y = 2:20

z= c(TRUE, FALSE)

w = "hi there"

lst = list(a= x, b = y, c =z)

lst2 =lst # NAMED == 2, more than one symbol pointing to

And we want to modify lst like so

lst[[2]] = w

We need to duplicate the "container SEXP", ie the VECSXP, so that lst's
SEXP and lst2's SEXP point to diferent SEXPs in their second element, but
we don't need to duplicate any SEXPs that represent the data in any of the
elements (the SEXPs bound to symbols x, y, z, and w), because none of those
were modified.

Thus, if deep == FALSE, those element SEXPs are NOT duplicated, just the
top-level one is. if deep==TRUE, then the element SEXPs are duplicated too,
because  R decided it neeeded that to happen for some reason.

In terms of implementing an ALTREP class, you can either a) just ignore
deep and *always* do a deep (ie full) duplication of everything in your
ALTREP class, or  b) you can pay attention to it and  always create a new
altrep  but which can potentially - *ONLY in cases where deep==FALSE* -
not duplicate the SEXPs that make up its alternative representation,
provided you're careful about then making sure that duplication happens at
a later time if necessary.

I'd strongly suggest starting with option (a) just to have something
working and completely safe, then considering if its important enough to
you to look into (b).

Does that make sense?

Best,
~G




>
> 2.
>
>> The first one correctly returns its internal data structure, but the
>> second
>> one returns the ALTREP object it wraps since the wrapper itself is an
>> ALTREP. This behavior is unexpected.
>
>
> I disagree. R_altrep_data1 returns whatever THAT altrep SEXP stores in its
>> "data1" part. There is no recursion/descent going on, and there shouldn't
>> be.
>
>
> This is might be a bug since in R release 3.6 it will return the ALTREP
> instead of the data of the ALTREP. I'm not sure if it has been fixed in
> 3.7. Here is a simple example:
>
> SEXP C_peekSharedMemory(SEXP x) {
>> while (ALTREP(x)) {
>> Rprintf("getting data 1\n");
>> x = R_altrep_data1(x);
>> }
>> return(x);
>> }
>
>
> If calling R_altrep_data1 return the internal data directly, we will only
> see one message. following my last example
>
> > .Internal(inspect(so1))
>> @0x0000000005e7fbb0 14 REALSXP g0c0 [MARK,NAM(7)]  Share object of type
>> double
>> > .Internal(inspect(so2))
>> @0x0000000005fc5ac0 14 REALSXP g0c0 [MARK,NAM(7)]  wrapper
>> [srt=-2147483648,no_na=0]
>>   @0x0000000005e7fbb0 14 REALSXP g0c0 [MARK,NAM(7)]  Share object of type
>> double
>> > sm1=peekSharedMemory(so1)
>> getting data 1
>> > sm2=peekSharedMemory(so2)
>> getting data 1
>> getting data 1
>
>
> We see that so2 call R_altrep_data1 twice to get the internal data. This
> is very unexpected.
>
> Thank you very much for your help again!
>
> Best,
> Jiefei
>
>
>
> On Thu, May 16, 2019 at 3:47 PM Gabriel Becker <gabembecker at gmail.com>
> wrote:
>
>> Hi Jiefei,
>>
>> Thanks for tryingout the ALTREP stuff and letting us know how it is
>> going. That said I don't think either of these are bugs, per se, but rather
>> a misunderstanding of the API. Details inline.
>>
>>
>>
>> On Thu, May 16, 2019 at 11:57 AM ??? <szwjf08 at gmail.com> wrote:
>>
>>> Hello,
>>>
>>> I have encountered two bugs when using ALTREP APIs.
>>>
>>> 1. STDVEC_DATAPTR
>>>
>>> From RInternal.h file it has a comment:
>>>
>>> /* ALTREP support */
>>> > void *(STDVEC_DATAPTR)(SEXP x);
>>>
>>>
>>> However, this comment might not be true, the easiest way to verify it is
>>> to
>>> define a C++ function:
>>>
>>>  void C_testFunc(SEXP a)
>>> > {
>>> > STDVEC_DATAPTR(a);
>>> > }
>>>
>>>
>>> and call it in R via
>>>
>>> > a=1:10
>>> > > C_testFunc(a)
>>> > Error in C_testFunc(a) : cannot get STDVEC_DATAPTR from ALTREP object
>>>
>>>
>> The STDVEC here refers to the SEXP not being an ALTREP. Anything that
>> starts with STDVEC should never receive an ALTREP, ie it should only be
>> called after non-ALTREPness has been confirmed by the surrounding/preceding
>> code. So this is expected behavior.
>>
>>
>>
>>
>>>
>>>  We can inspect the internal type and call ALTREP function to check if it
>>> is an ALTREP:
>>>
>>> > .Internal(inspect(a))
>>> > @0x000000001b5a3310 13 INTSXP g0c0 [NAM(7)]  1 : 10 (compact)
>>> > > #This is a wrapper of ALTREP
>>> > > is.altrep(a)
>>> > [1] TRUE
>>>
>>>
>>> I've also defined an ALTREP type and it did not work either. I guess this
>>> might be a bug? Or did I miss something?
>>>
>>> 2. Wrapper objects in ALTREP
>>>
>>> If the duplicate function is defined to return the object itself:
>>>
>>> SEXP vector_dulplicate(SEXP x, Rboolean deep) {
>>> return(x);
>>> }
>>>
>>
>> So this is a violation of of the contract. <youraltrep>_duplicate *must*
>> do an actual duplication. Returning the object unduplicated when duplicate
>> is called is going to have all sorts of unintended negative consequences.
>> R's internals rely on the fact that a SEXP that has been passed to
>> DUPLICATE has been duplciated and is safe to modify inplace.
>>
>>
>>
>>> In R an ALTREP object will behave like an environment
>>> (pass-by-reference).
>>> However, if we do something like(pseudo code):
>>>
>>> n=100
>>> > x=runif(n)
>>> > alt1=createAltrep(x)
>>> > alt2=alt1
>>> > alt2[1]=10
>>> > .Internal(inspect(alt1))
>>> > .Internal(inspect(alt2))
>>>
>>>
>>> The result would be:
>>>
>>> > .Internal(inspect(alt1))
>>> > @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
>>> > > .Internal(inspect(alt2 ))
>>> > @0x00000000156a33e0 14 REALSXP g0c0 [NAM(7)]  wrapper
>>> > [srt=-2147483648,no_na=0]
>>> >   @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
>>>
>>>
>>> It seems like the object alt2 automatically gets wrapped by R. Although
>>> at
>>> the R level it seems fine because there are no differences between alt1
>>> and
>>> alt2, if we define a C function as:
>>>
>>
>> So I'm not sure what is happening here, because it depends on what your
>> createAltrep function does. R automatically creates wrappers in some cases
>> but not nearly all (or even very many currently) cases.
>>
>>>
>>> SEXP C_peekSharedMemory(SEXP x) {
>>> > return(R_altrep_data1(x));
>>>
>>> }
>>>
>>>
>>> and call it in R to get the internal data structure of an ALTREP object.
>>>
>>> C_peekSharedMemory(alt1)
>>> > C_peekSharedMemory(alt2)
>>>
>>>
>>> The first one correctly returns its internal data structure, but the
>>> second
>>> one returns the ALTREP object it wraps since the wrapper itself is an
>>> ALTREP. This behavior is unexpected.
>>
>>
>> I disagree. R_altrep_data1 returns whatever THAT altrep SEXP stores in
>> its "data1" part. There is no recursion/descent going on, and there
>> shouldn't be.
>>
>>
>>> Since the dulplicate function returns
>>> the object itself, I will expect alt1 and alt2 should be the same object.
>>>
>>
>> Again, this is a violation of the core assumptions of ALTREP that is not
>> allowed, so I'd argue that any behavior this causes is largely irrelevant
>> (and a smart part of the much larger set of problems not duplicating when R
>> told you to duplicate will cause).
>>
>>
>>
>>
>>
>>
>>
>>> Even if they are essentially not the same, calling the same function
>>> should
>>> at least return the same result. Other than that, It seems like R does
>>> not
>>> always wrap an ALTREP object. If we change n from 100 to 10 and check the
>>> internal again, alt2 will not get wrapped.
>>
>>
>> Right, so this is a misunderstanding (which may be the fault of sparse
>> documentation on our part);  wrapper is one particular ALTREP class, its
>> not a fundamental aspect of ALTREPs themselves. Most ALTREP objects do not
>> have wrappers. See, e.g.,
>>
>> > .Internal(inspect(1:4))
>>
>> @7fb727d6be50 13 INTSXP g0c0 [NAM(3)]  1 : 4 (compact)
>>
>>
>> That's an ALTREP with no wrapper (a compact sequence). The wrapper ALTREP
>> class is for attaching metadata (known sortedness, known lack of NAs) to R
>> vectors. Its primary use currently is on the return value of sort().
>>
>>
>>> This makes the problem even more
>>> difficult since we cannot predict when would the wrapper appear.
>>>
>>
>> As currently factored, its not intended that you would be or need to
>> predict when a wrapper would appear. Using the C API or any R functions
>> will transparently treat wrapped and non-wrapped objects the same, and any
>> code you write should hit these API entrypoints so that any code you write
>> does the same.
>>
>> Does that help?
>>
>> Best,
>> ~G
>>
>>>
>>> Here is the source code for the wrapper:
>>> https://github.com/wch/r-source/blob/trunk/src/main/altclasses.c#L1399
>>>
>>> Here is a working example if one can build the sharedObject package from
>>> https://github.com/Jiefei-Wang/sharedObject
>>>
>>> n=100
>>> > x=runif(n)
>>> > so1=sharedObject(x,copyOnWrite = FALSE)
>>> > so2=so1
>>> > so2[1]=10
>>> > .Internal(inspect(so1))
>>> > .Internal(inspect(so2))
>>>
>>>
>>> Here is my session info:
>>>
>>> R version 3.6.0 alpha (2019-04-08 r76348)
>>> > Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> > Running under: Windows >= 8 x64 (build 9200)
>>> > Matrix products: default
>>> > locale:
>>> > [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United
>>> > States.1252
>>> > [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
>>> >
>>> > [5] LC_TIME=English_United States.1252
>>> > attached base packages:
>>> > [1] stats     graphics  grDevices utils     datasets  methods   base
>>> > other attached packages:
>>> > [1] sharedObject_0.0.99
>>> > loaded via a namespace (and not attached):
>>> > [1] compiler_3.6.0 tools_3.6.0    Rcpp_1.0.1
>>>
>>>
>>> Best,
>>> Jiefei
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Fri May 17 01:11:57 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 16 May 2019 16:11:57 -0700
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
In-Reply-To: <CAD4oTHHFri915TAVkKw+EVz7c7niE9-wFijuB=_6hiqnkiHJRQ@mail.gmail.com>
References: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
 <CABdHhvF5bkFigyMO=nuC===1P0USbdoV+CSw7zfcVmw02YO9xw@mail.gmail.com>
 <CAD4oTHHFri915TAVkKw+EVz7c7niE9-wFijuB=_6hiqnkiHJRQ@mail.gmail.com>
Message-ID: <CAD4oTHEdgMWjtDj31EsHc_7ZK4B3Jp1od0dx+AgfO1pWLkgi1Q@mail.gmail.com>

On Thu, May 16, 2019 at 3:47 PM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Hi Hadley,
>
> Thanks for the counterpoint. Response below.
>
> On Thu, May 16, 2019 at 1:59 PM Hadley Wickham <h.wickham at gmail.com>
> wrote:
>
>> The existing behaviour seems inutitive to me. I would consider these
>> invariants for n vector x_i's each with size m:
>>
>> * nrow(rbind(x_1, x_2, ..., x_n)) equals n
>>
>
> Personally, no I wouldn't. I would consider m==0 a degenerate case, where
> there is no data, but I personally find matrices (or data.frames) with rows
> but no columns a very strange concept. The converse is not true, I
> understand the utility of columns but no rows, particularly in the
> data.frame case, but rows with no columns are observations we didn't
> observe anything about. Strange, imho.
>
> Also, I know that you said *each with size m*, but the generalization
> would be
>
> for n vectors with m = max(length(x_i))
> nrow(rbind(x_1, ..., x_n)) = m
>

Ugh, obviously that should say ==n, not =m and then we have
ncol(rbind(x_1, ..., x_n)) == m

~G



>
> And that is the behavior now as documented, but *only* when length(x_i)
> >0 for all i (or, currently, when m == 0, so all vectors are length 0).
>
> > nrow(rbind(1:5, numeric()))
>
> [1] 1
>
>
> So that is where I was coming from. Length-zero vectors don't add rows
> because they contain no observed information.
>
> I do see where you'er coming from, but it does make interrogating
> nrow(rbind(x_1, ..., x_n)) NOT mean  (give me the number of observations
> for which I have data), which is what it means in non-degenerate contexts,
> and that seems pretty important too.
>
> Robin does also have an interesting point below about argument names, but
> I'll leave that for another mail.
>
> Best,
> ~G
>

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Fri May 17 01:45:16 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Thu, 16 May 2019 23:45:16 +0000
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
In-Reply-To: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
References: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
Message-ID: <d01d8909-39b0-0281-96f7-8a897e7d1a7a@fredhutch.org>

Hi Gabe,

 ? ncol(data.frame(aa=c("a", "b", "c"), AA=c("A", "B", "C")))
 ? # [1] 2

 ? ncol(data.frame(aa="a", AA="A"))
 ? # [1] 2

 ? ncol(data.frame(aa=character(0), AA=character(0)))
 ? # [1] 2

 ? ncol(cbind(aa=c("a", "b", "c"), AA=c("A", "B", "C")))
 ? # [1] 2

 ? ncol(cbind(aa="a", AA="A"))
 ? # [1] 2

 ? ncol(cbind(aa=character(0), AA=character(0)))
 ? # [1] 2

 ? nrow(rbind(aa=c("a", "b", "c"), AA=c("A", "B", "C")))
 ? # [1] 2

 ? nrow(rbind(aa="a", AA="A"))
 ? # [1] 2

 ? nrow(rbind(aa=character(0), AA=character(0)))
 ? # [1] 2

hmmm... not sure why ncol(cbind(aa=character(0), AA=character(0))) or 
nrow(rbind(aa=character(0), AA=character(0))) should do anything 
different from what they do.

In my experience, and more generally speaking, the desire to treat 
0-length vectors as a special case that deviates from the 
non-zero-length case has never been productive.

H.


On 5/16/19 13:17, Gabriel Becker wrote:
> Hi all,
>
> Apologies if this has been asked before (a quick google didn't  find it for
> me),and I know this is a case of behaving as documented but its so
> unintuitive (to me at least) that I figured I'd bring it up here anyway. I
> figure its probably going to not be changed,  but I'm happy to submit a
> patch if this is something R-core feels can/should change.
>
> So I recently got bitten by the fact that
>
>> nrow(rbind(character(), character()))
> [1] 2
>
>
> I was checking whether the result of an rbind call had more than one row,
> and that unexpected returned true, causing all sorts of shenanigans
> downstream as I'm sure you can imagine.
>
> Now I know that from ?rbind
>
> For ?cbind? (?rbind?), vectors of zero length (including ?NULL?)
>>       are ignored unless the result would have zero rows (columns), for
>>
>>       S compatibility.  (Zero-extent matrices do not occur in S3 and are
>>
>>       not ignored in R.)
>>
> But there's a couple of things here. First, for the rowbind  case this
> reads as "if there would be zero columns,  the vectors will not be
> ignored". This wording implies to me that not ignoring the vectors is a
> remedy to the "problem" of the potential for a zero-column return, but
> thats not the case.  The result still has 0 columns, it just does not also
> have zero rows. So even if the behavior is not changed, perhaps this
> wording can be massaged for clarity?
>
> The other issue, which I admit is likely a problem with my intuition, but
> which I don't think I'm alone in having, is that even if I can't have a 0x0
> matrix (which is what I'd prefer) I would have expected/preferred a 1x0
> matrix, the reasoning being that if we must avoid a 0x0 return value, we
> would do the  minimum required to avoid, which is to not ignore the first
> length 0 vector, to ensure a non-zero-extent matrix, but then ignore the
> remaining ones as they contain information for 0 new rows.
>
> Of course I can program around this now that I know the behavior, but
> again, its so unintuitive (even for someone with a fairly well developed
> intuition for R's sometimes "quirky" behavior) that I figured I'd bring it
> up.
>
> Thoughts?
>
> Best,
> ~G
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=WzRf-6PuyYeprM0v55lLX2U-_hYGf__5yf3h6JNdJH0&s=nn76KQtp4viR66768zoSNcH7WpG77Pp8LyhOwYOs674&e=

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From g@bembecker @end|ng |rom gm@||@com  Fri May 17 02:48:17 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 16 May 2019 17:48:17 -0700
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
In-Reply-To: <d01d8909-39b0-0281-96f7-8a897e7d1a7a@fredhutch.org>
References: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
 <d01d8909-39b0-0281-96f7-8a897e7d1a7a@fredhutch.org>
Message-ID: <CAD4oTHFjq3YvMTFrvufAXMgFy6YOwrSoCya8y5NkjsoNm9n-wQ@mail.gmail.com>

Hi Herve,

Inline.



On Thu, May 16, 2019 at 4:45 PM Pages, Herve <hpages at fredhutch.org> wrote:

> Hi Gabe,
>
>    ncol(data.frame(aa=c("a", "b", "c"), AA=c("A", "B", "C")))
>    # [1] 2
>
>    ncol(data.frame(aa="a", AA="A"))
>    # [1] 2
>
>    ncol(data.frame(aa=character(0), AA=character(0)))
>    # [1] 2
>
>    ncol(cbind(aa=c("a", "b", "c"), AA=c("A", "B", "C")))
>    # [1] 2
>
>    ncol(cbind(aa="a", AA="A"))
>    # [1] 2
>
>    ncol(cbind(aa=character(0), AA=character(0)))
>    # [1] 2
>
>    nrow(rbind(aa=c("a", "b", "c"), AA=c("A", "B", "C")))
>    # [1] 2
>
>    nrow(rbind(aa="a", AA="A"))
>    # [1] 2
>
>    nrow(rbind(aa=character(0), AA=character(0)))
>    # [1] 2
>

Sure, but

> nrow(rbind(aa = c("a", "b", "c"), AA = c("a", "b", "c")))

[1] 2

> nrow(rbind(aa = c("a", "b", "c"), AA = "a"))

[1] 2

> nrow(rbind(aa = c("a", "b", "c"), AA = character()))
[1] 1

So even if I ultimately "lose"  this debate (which really wouldn't shock
me, even if R-core did agree with me there's backwards compatibility to
consider), you have to concede that the current behavior is more
complicated than the above is acknowledging.

By rights of the invariance that you and Hadley are advocating,  as far as
I understand it, the last should give 2 rows, one of which is all NAs,
rather than giving only one row as it currently does (and, I assume?,
always has).

So there are two different behavior patterns that could coherently (and
internally-consistently) be generalized to apply to the  rbind(character(),
character()) case, not just one. I'm making the case that the other one
(that length 0 vectors do not add rows because they don't contain data)
would be equally valid, and to N>1 people, at least equally intuitive.

Best,
~G

>
> hmmm... not sure why ncol(cbind(aa=character(0), AA=character(0))) or
> nrow(rbind(aa=character(0), AA=character(0))) should do anything
> different from what they do.
>
> In my experience, and more generally speaking, the desire to treat
> 0-length vectors as a special case that deviates from the
> non-zero-length case has never been productive.
>
> H.
>
>
> On 5/16/19 13:17, Gabriel Becker wrote:
> > Hi all,
> >
> > Apologies if this has been asked before (a quick google didn't  find it
> for
> > me),and I know this is a case of behaving as documented but its so
> > unintuitive (to me at least) that I figured I'd bring it up here anyway.
> I
> > figure its probably going to not be changed,  but I'm happy to submit a
> > patch if this is something R-core feels can/should change.
> >
> > So I recently got bitten by the fact that
> >
> >> nrow(rbind(character(), character()))
> > [1] 2
> >
> >
> > I was checking whether the result of an rbind call had more than one row,
> > and that unexpected returned true, causing all sorts of shenanigans
> > downstream as I'm sure you can imagine.
> >
> > Now I know that from ?rbind
> >
> > For ?cbind? (?rbind?), vectors of zero length (including ?NULL?)
> >>       are ignored unless the result would have zero rows (columns), for
> >>
> >>       S compatibility.  (Zero-extent matrices do not occur in S3 and are
> >>
> >>       not ignored in R.)
> >>
> > But there's a couple of things here. First, for the rowbind  case this
> > reads as "if there would be zero columns,  the vectors will not be
> > ignored". This wording implies to me that not ignoring the vectors is a
> > remedy to the "problem" of the potential for a zero-column return, but
> > thats not the case.  The result still has 0 columns, it just does not
> also
> > have zero rows. So even if the behavior is not changed, perhaps this
> > wording can be massaged for clarity?
> >
> > The other issue, which I admit is likely a problem with my intuition, but
> > which I don't think I'm alone in having, is that even if I can't have a
> 0x0
> > matrix (which is what I'd prefer) I would have expected/preferred a 1x0
> > matrix, the reasoning being that if we must avoid a 0x0 return value, we
> > would do the  minimum required to avoid, which is to not ignore the first
> > length 0 vector, to ensure a non-zero-extent matrix, but then ignore the
> > remaining ones as they contain information for 0 new rows.
> >
> > Of course I can program around this now that I know the behavior, but
> > again, its so unintuitive (even for someone with a fairly well developed
> > intuition for R's sometimes "quirky" behavior) that I figured I'd bring
> it
> > up.
> >
> > Thoughts?
> >
> > Best,
> > ~G
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=WzRf-6PuyYeprM0v55lLX2U-_hYGf__5yf3h6JNdJH0&s=nn76KQtp4viR66768zoSNcH7WpG77Pp8LyhOwYOs674&e=
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>
>

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Fri May 17 04:41:08 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Fri, 17 May 2019 02:41:08 +0000
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
In-Reply-To: <CAD4oTHFjq3YvMTFrvufAXMgFy6YOwrSoCya8y5NkjsoNm9n-wQ@mail.gmail.com>
References: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
 <d01d8909-39b0-0281-96f7-8a897e7d1a7a@fredhutch.org>
 <CAD4oTHFjq3YvMTFrvufAXMgFy6YOwrSoCya8y5NkjsoNm9n-wQ@mail.gmail.com>
Message-ID: <7f2aa2e5-f505-a3fc-7b9d-6df858b66340@fredhutch.org>

On 5/16/19 17:48, Gabriel Becker wrote:

Hi Herve,

Inline.



On Thu, May 16, 2019 at 4:45 PM Pages, Herve <hpages at fredhutch.org<mailto:hpages at fredhutch.org>> wrote:
Hi Gabe,

   ncol(data.frame(aa=c("a", "b", "c"), AA=c("A", "B", "C")))
   # [1] 2

   ncol(data.frame(aa="a", AA="A"))
   # [1] 2

   ncol(data.frame(aa=character(0), AA=character(0)))
   # [1] 2

   ncol(cbind(aa=c("a", "b", "c"), AA=c("A", "B", "C")))
   # [1] 2

   ncol(cbind(aa="a", AA="A"))
   # [1] 2

   ncol(cbind(aa=character(0), AA=character(0)))
   # [1] 2

   nrow(rbind(aa=c("a", "b", "c"), AA=c("A", "B", "C")))
   # [1] 2

   nrow(rbind(aa="a", AA="A"))
   # [1] 2

   nrow(rbind(aa=character(0), AA=character(0)))
   # [1] 2

Sure, but


> nrow(rbind(aa = c("a", "b", "c"), AA = c("a", "b", "c")))

[1] 2

> nrow(rbind(aa = c("a", "b", "c"), AA = "a"))

[1] 2

> nrow(rbind(aa = c("a", "b", "c"), AA = character()))

[1] 1


Ah, I see now.

But:

  > data.frame(aa = c("a", "b", "c"), AA = character())
  Error in data.frame(aa = c("a", "b", "c"), AA = character()) :
    arguments imply differing number of rows: 3, 0

and

  > mapply(`*`, 1:5, integer(0))
  Error in mapply(`*`, 1:5, integer(0)) :
    zero-length inputs cannot be mixed with those of non-zero length

So I would declare rbind(aa = c("a", "b", "c"), AA = character()) inconsistent rather than making the case that rbind(aa = character(), AA = character()) needs to change.

Cheers,

H.


So even if I ultimately "lose"  this debate (which really wouldn't shock me, even if R-core did agree with me there's backwards compatibility to consider), you have to concede that the current behavior is more complicated than the above is acknowledging.

By rights of the invariance that you and Hadley are advocating,  as far as I understand it, the last should give 2 rows, one of which is all NAs, rather than giving only one row as it currently does (and, I assume?,  always has).

So there are two different behavior patterns that could coherently (and internally-consistently) be generalized to apply to the  rbind(character(), character()) case, not just one. I'm making the case that the other one (that length 0 vectors do not add rows because they don't contain data) would be equally valid, and to N>1 people, at least equally intuitive.

Best,
~G

hmmm... not sure why ncol(cbind(aa=character(0), AA=character(0))) or
nrow(rbind(aa=character(0), AA=character(0))) should do anything
different from what they do.

In my experience, and more generally speaking, the desire to treat
0-length vectors as a special case that deviates from the
non-zero-length case has never been productive.

H.


On 5/16/19 13:17, Gabriel Becker wrote:
> Hi all,
>
> Apologies if this has been asked before (a quick google didn't  find it for
> me),and I know this is a case of behaving as documented but its so
> unintuitive (to me at least) that I figured I'd bring it up here anyway. I
> figure its probably going to not be changed,  but I'm happy to submit a
> patch if this is something R-core feels can/should change.
>
> So I recently got bitten by the fact that
>
>> nrow(rbind(character(), character()))
> [1] 2
>
>
> I was checking whether the result of an rbind call had more than one row,
> and that unexpected returned true, causing all sorts of shenanigans
> downstream as I'm sure you can imagine.
>
> Now I know that from ?rbind
>
> For ?cbind? (?rbind?), vectors of zero length (including ?NULL?)
>>       are ignored unless the result would have zero rows (columns), for
>>
>>       S compatibility.  (Zero-extent matrices do not occur in S3 and are
>>
>>       not ignored in R.)
>>
> But there's a couple of things here. First, for the rowbind  case this
> reads as "if there would be zero columns,  the vectors will not be
> ignored". This wording implies to me that not ignoring the vectors is a
> remedy to the "problem" of the potential for a zero-column return, but
> thats not the case.  The result still has 0 columns, it just does not also
> have zero rows. So even if the behavior is not changed, perhaps this
> wording can be massaged for clarity?
>
> The other issue, which I admit is likely a problem with my intuition, but
> which I don't think I'm alone in having, is that even if I can't have a 0x0
> matrix (which is what I'd prefer) I would have expected/preferred a 1x0
> matrix, the reasoning being that if we must avoid a 0x0 return value, we
> would do the  minimum required to avoid, which is to not ignore the first
> length 0 vector, to ensure a non-zero-extent matrix, but then ignore the
> remaining ones as they contain information for 0 new rows.
>
> Of course I can program around this now that I know the behavior, but
> again, its so unintuitive (even for someone with a fairly well developed
> intuition for R's sometimes "quirky" behavior) that I figured I'd bring it
> up.
>
> Thoughts?
>
> Best,
> ~G
>
>       [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=WzRf-6PuyYeprM0v55lLX2U-_hYGf__5yf3h6JNdJH0&s=nn76KQtp4viR66768zoSNcH7WpG77Pp8LyhOwYOs674&e=

--
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org<mailto:hpages at fredhutch.org>
Phone:  (206) 667-5791
Fax:    (206) 667-1319


--
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org<mailto:hpages at fredhutch.org>
Phone:  (206) 667-5791
Fax:    (206) 667-1319


	[[alternative HTML version deleted]]


From j@goreck| @end|ng |rom w|t@edu@p|  Fri May 17 05:48:50 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Fri, 17 May 2019 09:18:50 +0530
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
In-Reply-To: <7f2aa2e5-f505-a3fc-7b9d-6df858b66340@fredhutch.org>
References: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
 <d01d8909-39b0-0281-96f7-8a897e7d1a7a@fredhutch.org>
 <CAD4oTHFjq3YvMTFrvufAXMgFy6YOwrSoCya8y5NkjsoNm9n-wQ@mail.gmail.com>
 <7f2aa2e5-f505-a3fc-7b9d-6df858b66340@fredhutch.org>
Message-ID: <CAOO9MKV52Ljg6RYeb6FWscd785j+EuA8MTx1vixByK0SOyE9UA@mail.gmail.com>

Hi Gabriel

> Personally, no I wouldn't. I would consider m==0 a degenerate case, where
there is no data, but I personally find matrices (or data.frames) with rows
but no columns a very strange concept.

This distinction between matrix and data.frames is the crux in this case.
>From the dimensional modelling point of view, matrix can have non-zero
rows and zero columns, but data.frame (assuming it maps to database
table structure) should never have non-zero rows and zero columns.
This kind of issue was raised before in our issue tracker:
https://github.com/Rdatatable/data.table/issues/2422
You should find that discussion useful.

Best,
Jan Gorecki


On Fri, May 17, 2019 at 8:11 AM Pages, Herve <hpages at fredhutch.org> wrote:
>
> On 5/16/19 17:48, Gabriel Becker wrote:
>
> Hi Herve,
>
> Inline.
>
>
>
> On Thu, May 16, 2019 at 4:45 PM Pages, Herve <hpages at fredhutch.org<mailto:hpages at fredhutch.org>> wrote:
> Hi Gabe,
>
>    ncol(data.frame(aa=c("a", "b", "c"), AA=c("A", "B", "C")))
>    # [1] 2
>
>    ncol(data.frame(aa="a", AA="A"))
>    # [1] 2
>
>    ncol(data.frame(aa=character(0), AA=character(0)))
>    # [1] 2
>
>    ncol(cbind(aa=c("a", "b", "c"), AA=c("A", "B", "C")))
>    # [1] 2
>
>    ncol(cbind(aa="a", AA="A"))
>    # [1] 2
>
>    ncol(cbind(aa=character(0), AA=character(0)))
>    # [1] 2
>
>    nrow(rbind(aa=c("a", "b", "c"), AA=c("A", "B", "C")))
>    # [1] 2
>
>    nrow(rbind(aa="a", AA="A"))
>    # [1] 2
>
>    nrow(rbind(aa=character(0), AA=character(0)))
>    # [1] 2
>
> Sure, but
>
>
> > nrow(rbind(aa = c("a", "b", "c"), AA = c("a", "b", "c")))
>
> [1] 2
>
> > nrow(rbind(aa = c("a", "b", "c"), AA = "a"))
>
> [1] 2
>
> > nrow(rbind(aa = c("a", "b", "c"), AA = character()))
>
> [1] 1
>
>
> Ah, I see now.
>
> But:
>
>   > data.frame(aa = c("a", "b", "c"), AA = character())
>   Error in data.frame(aa = c("a", "b", "c"), AA = character()) :
>     arguments imply differing number of rows: 3, 0
>
> and
>
>   > mapply(`*`, 1:5, integer(0))
>   Error in mapply(`*`, 1:5, integer(0)) :
>     zero-length inputs cannot be mixed with those of non-zero length
>
> So I would declare rbind(aa = c("a", "b", "c"), AA = character()) inconsistent rather than making the case that rbind(aa = character(), AA = character()) needs to change.
>
> Cheers,
>
> H.
>
>
> So even if I ultimately "lose"  this debate (which really wouldn't shock me, even if R-core did agree with me there's backwards compatibility to consider), you have to concede that the current behavior is more complicated than the above is acknowledging.
>
> By rights of the invariance that you and Hadley are advocating,  as far as I understand it, the last should give 2 rows, one of which is all NAs, rather than giving only one row as it currently does (and, I assume?,  always has).
>
> So there are two different behavior patterns that could coherently (and internally-consistently) be generalized to apply to the  rbind(character(), character()) case, not just one. I'm making the case that the other one (that length 0 vectors do not add rows because they don't contain data) would be equally valid, and to N>1 people, at least equally intuitive.
>
> Best,
> ~G
>
> hmmm... not sure why ncol(cbind(aa=character(0), AA=character(0))) or
> nrow(rbind(aa=character(0), AA=character(0))) should do anything
> different from what they do.
>
> In my experience, and more generally speaking, the desire to treat
> 0-length vectors as a special case that deviates from the
> non-zero-length case has never been productive.
>
> H.
>
>
> On 5/16/19 13:17, Gabriel Becker wrote:
> > Hi all,
> >
> > Apologies if this has been asked before (a quick google didn't  find it for
> > me),and I know this is a case of behaving as documented but its so
> > unintuitive (to me at least) that I figured I'd bring it up here anyway. I
> > figure its probably going to not be changed,  but I'm happy to submit a
> > patch if this is something R-core feels can/should change.
> >
> > So I recently got bitten by the fact that
> >
> >> nrow(rbind(character(), character()))
> > [1] 2
> >
> >
> > I was checking whether the result of an rbind call had more than one row,
> > and that unexpected returned true, causing all sorts of shenanigans
> > downstream as I'm sure you can imagine.
> >
> > Now I know that from ?rbind
> >
> > For ?cbind? (?rbind?), vectors of zero length (including ?NULL?)
> >>       are ignored unless the result would have zero rows (columns), for
> >>
> >>       S compatibility.  (Zero-extent matrices do not occur in S3 and are
> >>
> >>       not ignored in R.)
> >>
> > But there's a couple of things here. First, for the rowbind  case this
> > reads as "if there would be zero columns,  the vectors will not be
> > ignored". This wording implies to me that not ignoring the vectors is a
> > remedy to the "problem" of the potential for a zero-column return, but
> > thats not the case.  The result still has 0 columns, it just does not also
> > have zero rows. So even if the behavior is not changed, perhaps this
> > wording can be massaged for clarity?
> >
> > The other issue, which I admit is likely a problem with my intuition, but
> > which I don't think I'm alone in having, is that even if I can't have a 0x0
> > matrix (which is what I'd prefer) I would have expected/preferred a 1x0
> > matrix, the reasoning being that if we must avoid a 0x0 return value, we
> > would do the  minimum required to avoid, which is to not ignore the first
> > length 0 vector, to ensure a non-zero-extent matrix, but then ignore the
> > remaining ones as they contain information for 0 new rows.
> >
> > Of course I can program around this now that I know the behavior, but
> > again, its so unintuitive (even for someone with a fairly well developed
> > intuition for R's sometimes "quirky" behavior) that I figured I'd bring it
> > up.
> >
> > Thoughts?
> >
> > Best,
> > ~G
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
> > https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=WzRf-6PuyYeprM0v55lLX2U-_hYGf__5yf3h6JNdJH0&s=nn76KQtp4viR66768zoSNcH7WpG77Pp8LyhOwYOs674&e=
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org<mailto:hpages at fredhutch.org>
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org<mailto:hpages at fredhutch.org>
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @purd|e@@ @end|ng |rom gm@||@com  Fri May 17 07:09:09 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Fri, 17 May 2019 17:09:09 +1200
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
In-Reply-To: <CAD4oTHFjq3YvMTFrvufAXMgFy6YOwrSoCya8y5NkjsoNm9n-wQ@mail.gmail.com>
References: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
 <d01d8909-39b0-0281-96f7-8a897e7d1a7a@fredhutch.org>
 <CAD4oTHFjq3YvMTFrvufAXMgFy6YOwrSoCya8y5NkjsoNm9n-wQ@mail.gmail.com>
Message-ID: <CAB8pepxNQxuqzuZUqTSqxcyD2kG9xmgyvv2ne72=o3OD2Wo=eQ@mail.gmail.com>

Herve Pages wrote:

> In my experience, and more generally speaking, the desire to treat
> 0-length vectors as a special case that deviates from the
> non-zero-length case has never been productive.

Good idea.

Gabriel Becker Wrote:

> > nrow(rbind(aa = c("a", "b", "c"), AA = character()))
> [1] 1

> By rights of the invariance that you and Hadley are advocating,  as far as
> I understand it, the last should give 2 rows, one of which is all NAs,
> rather than giving only one row as it currently does (and, I assume?,
> always has).

I think, ideally, this example should generate an error or a warning.

	[[alternative HTML version deleted]]


From p@ve| @end|ng |rom uow@edu@@u  Fri May 17 09:31:04 2019
From: p@ve| @end|ng |rom uow@edu@@u (Pavel N. Krivitsky)
Date: Fri, 17 May 2019 17:31:04 +1000
Subject: [Rd] Give update.formula() an option not to simplify or reorder the
 result -- request for comments
Message-ID: <56ee72cb833f01d6eb3925452925d54f7c2e03d7.camel@uow.edu.au>

Dear All,

Martin Maechler has asked me to send this to R-devel for discussion
after I submitted it as an enhancement request (
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17563).

At this time, the update.formula() method always performs a number of
transformations on the results, eliminating redundant variables and
reordering interactions to be after the main effects. This is not
always the desired behaviour, because formulas are increasingly used
for purposes other than specifying linear models.

This the proposal is to add an option simplify= (defaulting to TRUE,
for backwards compatibility) that if FALSE will skip the simplification
step.

That is,

> update(a~b:c+b, .~.+b) # default: simplify=TRUE

a ~ b + b:c

> update(a~b:c+b, .~.+b, simplify=FALSE) # results are a mock-up

a ~ b:c + b + b

>From what I can tell, this can be accomplished by skipping the second
line of the implementation of update.formula() ("out <-
formula(terms.formula(tmp, simplify = TRUE))").

Any thoughts? One particular question that Martin raised is whether the
UI should be just a single logical argument, or something else.

			Best Regards,
			Pavel

-- 
Pavel Krivitsky
Lecturer in Statistics
National Institute of Applied Statistics Research Australia (NIASRA)
School of Mathematics and Applied Statistics | Building 39C Room 154
University of Wollongong NSW 2522 Australia
T +61 2 4221 3713
Web (NIASRA): http://niasra.uow.edu.au/index.html
Web (Personal): http://www.krivitsky.net/research
ORCID: 0000-0002-9101-3362

NOTICE: This email is intended for the addressee named and may contain
confidential information. If you are not the intended recipient, please
delete it and notify the sender. Please consider the environment before
printing this email.


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri May 17 09:32:56 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 17 May 2019 09:32:56 +0200
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
In-Reply-To: <CAD4oTHHFri915TAVkKw+EVz7c7niE9-wFijuB=_6hiqnkiHJRQ@mail.gmail.com>
References: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
 <CABdHhvF5bkFigyMO=nuC===1P0USbdoV+CSw7zfcVmw02YO9xw@mail.gmail.com>
 <CAD4oTHHFri915TAVkKw+EVz7c7niE9-wFijuB=_6hiqnkiHJRQ@mail.gmail.com>
Message-ID: <23774.25512.842877.618811@stat.math.ethz.ch>

>>>>> Gabriel Becker 
>>>>>     on Thu, 16 May 2019 15:47:57 -0700 writes:

    > Hi Hadley,
    > Thanks for the counterpoint. Response below.

    > On Thu, May 16, 2019 at 1:59 PM Hadley Wickham <h.wickham at gmail.com> wrote:

    >> The existing behaviour seems inutitive to me. I would consider these
    >> invariants for n vector x_i's each with size m:
    >> 
    >> * nrow(rbind(x_1, x_2, ..., x_n)) equals n
    >> 

    > Personally, no I wouldn't. I would consider m==0 a degenerate case, where
    > there is no data, but I personally find matrices (or data.frames) with rows
    > but no columns a very strange concept. The converse is not true, I
    > understand the utility of columns but no rows, particularly in the
    > data.frame case, but rows with no columns are observations we didn't
    > observe anything about. Strange, imho.

Gabe, here I have to very strongly disagree.

Matrices (and higher order Arrays)  are  always definitely to
behave "symmetrically" / "uniformly" with respect to all of their dimensions.

We (and the S developers before us) have always taken a lot of
care trying to ensure that this is true.

So for the matrix case, if rows and columns behaved differently
that would be a bug "by definition".

Of course there's one thing where this uniformity / symmetry
must be violated: in the coercion from and to atomic vectors:
There, 'by column' (generalized for arrays to "earlier dimensions vary faster
than later one") has been chosen, not the least because this had
been adapted for Fortran (first, AFAIK) and all related ABIs
dealing with Matrix vector arithmetic for very good (numerical,
performance, known convention) reasons that enabled to know how
fast numerical linear algebra should be implemented.

Martin


From g@bembecker @end|ng |rom gm@||@com  Fri May 17 10:06:11 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Fri, 17 May 2019 01:06:11 -0700
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
In-Reply-To: <23774.25512.842877.618811@stat.math.ethz.ch>
References: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
 <CABdHhvF5bkFigyMO=nuC===1P0USbdoV+CSw7zfcVmw02YO9xw@mail.gmail.com>
 <CAD4oTHHFri915TAVkKw+EVz7c7niE9-wFijuB=_6hiqnkiHJRQ@mail.gmail.com>
 <23774.25512.842877.618811@stat.math.ethz.ch>
Message-ID: <CAD4oTHEvZUyKD_4Gmr8YbJsLSVvqNb9epH6YYx791-3q6X4tbw@mail.gmail.com>

Hi Martin,

Thanks for chiming in. Responses inline.

On Fri, May 17, 2019 at 12:32 AM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> Gabriel Becker
> >>>>>     on Thu, 16 May 2019 15:47:57 -0700 writes:
>
>     > Hi Hadley,
>     > Thanks for the counterpoint. Response below.
>
>     > On Thu, May 16, 2019 at 1:59 PM Hadley Wickham <h.wickham at gmail.com>
> wrote:
>
>     >> The existing behaviour seems inutitive to me. I would consider these
>     >> invariants for n vector x_i's each with size m:
>     >>
>     >> * nrow(rbind(x_1, x_2, ..., x_n)) equals n
>     >>
>
>     > Personally, no I wouldn't. I would consider m==0 a degenerate case,
> where
>     > there is no data, but I personally find matrices (or data.frames)
> with rows
>     > but no columns a very strange concept. The converse is not true, I
>     > understand the utility of columns but no rows, particularly in the
>     > data.frame case, but rows with no columns are observations we didn't
>     > observe anything about. Strange, imho.
>
> Gabe, here I have to very strongly disagree.
>
> Matrices (and higher order Arrays)  are  always definitely to
> behave "symmetrically" / "uniformly" with respect to all of their
> dimensions.
>
> We (and the S developers before us) have always taken a lot of
> care trying to ensure that this is true.
>
> So for the matrix case, if rows and columns behaved differently
> that would be a bug "by definition".
>

I realize now I could have been  clearer/more  explicit about this, but I
wasn't  arguing that the behavior should be different between columns and
rows, just that the behavior in the rows case didn't necessarily make a ton
of sense to me.  I was arguing that a change to both rbind and cbind be
considered when all length zero vectors are passed, not that rbind change
without cbind also changing. I will admit even here to feeling much more
strongly about the data.frame case.

That said, I do see that the cbind/columns argument seems harder (though
not impossible) for me to make. And maybe that's a good enough reason not
to consider such a change, because as I say, I agree the symmetry is
important, and would (also) want  cbind to change the same way rbind did if
such a change  happened, and that might bother many? more people than the
rbind case would. Maybe not though, based on the other responses in the
thread.

Honestly,  the most intuitive thing for me if you rbind or cbind a bunch of
length zero vectors together would be a  0x0 matrix, at  the very least in
the non-named arguments case. Its  a matrix with 0 elements in it, after
all. It seems perhaps that my intuition  is just somewhat  non-standard
though.


> Of course there's one thing where this uniformity / symmetry
> must be violated: in the coercion from and to atomic vectors:
> There, 'by column' (generalized for arrays to "earlier dimensions vary
> faster
> than later one") has been chosen, not the least because this had
> been adapted for Fortran (first, AFAIK) and all related ABIs
> dealing with Matrix vector arithmetic for very good (numerical,
> performance, known convention) reasons that enabled to know how
> fast numerical linear algebra should be implemented.
>

I do understand here, and would never suggest anything  that could damage
numerical linear algebra capabilities, in R or more broadly. That said, can
numerical algebra routines operate meaningfully in the degerate
one/both/all dimensions are 0 case anyway? Maybe they do, I'd be somewhat
surprised but not my area of expertise.

 Best,
~G

>
> Martin
>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri May 17 11:39:31 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 17 May 2019 11:39:31 +0200
Subject: [Rd] nrow(rbind(character(),
 character())) returns 2 (as documented but very unintuitive, IMHO)
In-Reply-To: <CAD4oTHEvZUyKD_4Gmr8YbJsLSVvqNb9epH6YYx791-3q6X4tbw@mail.gmail.com>
References: <CAD4oTHFE9SUD2nrfLqoppBQv9QgQV2sA_qo9XA9JwuD+oRdz3g@mail.gmail.com>
 <CABdHhvF5bkFigyMO=nuC===1P0USbdoV+CSw7zfcVmw02YO9xw@mail.gmail.com>
 <CAD4oTHHFri915TAVkKw+EVz7c7niE9-wFijuB=_6hiqnkiHJRQ@mail.gmail.com>
 <23774.25512.842877.618811@stat.math.ethz.ch>
 <CAD4oTHEvZUyKD_4Gmr8YbJsLSVvqNb9epH6YYx791-3q6X4tbw@mail.gmail.com>
Message-ID: <23774.33107.341943.814812@stat.math.ethz.ch>

>>>>> Gabriel Becker 
>>>>>     on Fri, 17 May 2019 01:06:11 -0700 writes:

    > Hi Martin,
    > Thanks for chiming in. Responses inline.

    > On Fri, May 17, 2019 at 12:32 AM Martin Maechler <maechler at stat.math.ethz.ch>
    > wrote:

    >> >>>>> Gabriel Becker
    >> >>>>>     on Thu, 16 May 2019 15:47:57 -0700 writes:
    >> 
    >> > Hi Hadley,
    >> > Thanks for the counterpoint. Response below.
    >> 
    >> > On Thu, May 16, 2019 at 1:59 PM Hadley Wickham <h.wickham at gmail.com>
    >> wrote:
    >> 
    >> >> The existing behaviour seems inutitive to me. I would consider these
    >> >> invariants for n vector x_i's each with size m:
    >> >>
    >> >> * nrow(rbind(x_1, x_2, ..., x_n)) equals n
    >> >>
    >> 
    >> > Personally, no I wouldn't. I would consider m==0 a degenerate case,
    >> where
    >> > there is no data, but I personally find matrices (or data.frames)
    >> with rows
    >> > but no columns a very strange concept. The converse is not true, I
    >> > understand the utility of columns but no rows, particularly in the
    >> > data.frame case, but rows with no columns are observations we didn't
    >> > observe anything about. Strange, imho.
    >> 
    >> Gabe, here I have to very strongly disagree.
    >> 
    >> Matrices (and higher order Arrays)  are  always definitely to
    >> behave "symmetrically" / "uniformly" with respect to all of their
    >> dimensions.
    >> 
    >> We (and the S developers before us) have always taken a lot of
    >> care trying to ensure that this is true.
    >> 
    >> So for the matrix case, if rows and columns behaved differently
    >> that would be a bug "by definition".
    >> 

    > I realize now I could have been  clearer/more  explicit about this, but I
    > wasn't  arguing that the behavior should be different between columns and
    > rows, just that the behavior in the rows case didn't necessarily make a ton
    > of sense to me.  I was arguing that a change to both rbind and cbind be
    > considered when all length zero vectors are passed, not that rbind change
    > without cbind also changing. I will admit even here to feeling much more
    > strongly about the data.frame case.

    > That said, I do see that the cbind/columns argument seems harder (though
    > not impossible) for me to make. And maybe that's a good enough reason not
    > to consider such a change, because as I say, I agree the symmetry is
    > important, and would (also) want  cbind to change the same way rbind did if
    > such a change  happened, and that might bother many? more people than the
    > rbind case would. Maybe not though, based on the other responses in the
    > thread.

    > Honestly,  the most intuitive thing for me if you rbind or cbind a bunch of
    > length zero vectors together would be a  0x0 matrix, at  the very least in
    > the non-named arguments case. Its  a matrix with 0 elements in it, after
    > all. It seems perhaps that my intuition  is just somewhat  non-standard
    > though.

I think  your "problem"  may be that you've not appreciated yet
the importance of   {0 x p}  and {n x 0}  matrices  and would
think all of these should be  {0 x 0} ?

Believe me we did quite a bit of reasoning and looking at
associative law and transitiveness etc at the time, which I can't easily
recall, but believe me that it has been very beneficial to
consistently deal with  n x 0   and  0 x d  matrices :
Much of R code could be simplified / automagically worked
correctly in edge cases, once such matrices were fulfilling
basic consistency identities.

Martin


From c@g|||e@p|e @end|ng |rom gm@||@com  Fri May 17 11:56:50 2019
From: c@g|||e@p|e @end|ng |rom gm@||@com (Colin Gillespie)
Date: Fri, 17 May 2019 10:56:50 +0100
Subject: [Rd] Barplot & Boxplot: lim and horizontal
Message-ID: <CADbDLZ=9RdNmJsi6S9__GDxLHqJOk_t9KJjs+SV0fBYsjgkTSA@mail.gmail.com>

Dear All,

I've noticed an inconsistency between boxplot & barplot regarding the
interaction between
switching to a horizontal graph and the limits.

par(mfrow = c(2, 2))
boxplot(1:10, xlim = c(0.1, 5), ylim = c(1, 10),
              log = "y", horizontal=FALSE, xlab = "X", ylab = "Y")
axis(1)
# Changing to horizontal, xlim <-> ylim
# log = y is still the y-axis. ylab is still the y-axis
boxplot(1:10, xlim = c(0.1, 5), ylim = c(1, 10), log = "y",
                       horizontal=TRUE, xlab = "X", ylab = "Y")
axis(2)

barplot(2, xlim = c(0.1, 5), ylim = c(0.1, 10),
                  log = "y", horiz=FALSE, xlab = "X", ylab = "Y")
axis(1)
# Changing to horizontal, xlim still refers to xlim
# log = y is still the y-axis. ylab is still the y-axis
barplot(2, xlim = c(0.1, 5), ylim = c(0.1, 10), log = "y",
                horiz=TRUE, xlab = "X", ylab = "Y")
axis(2)

Thanks

Colin


From @zwj|08 @end|ng |rom gm@||@com  Fri May 17 19:06:47 2019
From: @zwj|08 @end|ng |rom gm@||@com (=?UTF-8?B?5LuL6Z2e546L?=)
Date: Fri, 17 May 2019 09:06:47 -0800
Subject: [Rd] ALTREP: Bug reports
In-Reply-To: <CAD4oTHG72GjL2HkZ906-Z18q_Zbkac-qwtOzf1-QhqqE7Z81Vw@mail.gmail.com>
References: <CAGiFhPPjds+myJWKxfCBC_f3L+kSofnm+g3q73ntZ6v6=aATcg@mail.gmail.com>
 <CAD4oTHEoH8f5FLA3PChfMHmhfFkP8YaS9GVF+v3hj_A=BiJWQQ@mail.gmail.com>
 <CAGiFhPNr0Fp6E_iTqHB+29HoOYBARvs5pr1Uyh8pgASrvfg+iQ@mail.gmail.com>
 <CAD4oTHG72GjL2HkZ906-Z18q_Zbkac-qwtOzf1-QhqqE7Z81Vw@mail.gmail.com>
Message-ID: <CAGiFhPPjGryNcsSr=7+9Z744RDobWfRQiGO0MgycZDf-nubC0g@mail.gmail.com>

Thank you very much for your answer. If I understand it correctly, for an
ALTREP class, a non-deep copy only creates a new ALTREP object but refers
to the same underlying SEXP as the old ALTREP object has, is it correct?
But since they all share the same underlying SEXP, will change of the value
in the old ALTREP object cause the change of the value in the new ALTREP
object? Or do you mean we need to decide which SEXP has to be copied even
*deep==FALSE*? I made a small test code:

x=runif(10)
> so1=sharedObject(x)
> so2=so1
> so2[1]=10


The last line of the code will call the duplicate function with
*deep==FALSE,* which does not sound correct to me if we don't do a deep
copy of the SEXP.

Best,
Jiefei

On Thu, May 16, 2019 at 3:07 PM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Jiefei,
>
> Inline.
>
> On Thu, May 16, 2019 at 2:30 PM ??? <szwjf08 at gmail.com> wrote:
>
>> Hello Luke and Gabriel,
>>
>> Thank you very much for your quick responses. The explanation of STDVEC
>> is very helpful and I appreciate it! For the wrapper, I have a few new
>> questions.
>>
>>
>> 1. Like Luke said a mutable object is not possible. However, I noticed
>> that there is one extra argument *deep* in the function duplicate. I've
>> googled all the available documentation for ALTREP but I did not find any
>> explanation of it. Could you please give some detail on it?
>>
>
> Deep means in the case of compound/nested structure, e.g., most easily
> illustrative the case of a list in R (or VECSXP in C) , do the elements
> need to be duplicated (deep == TRUE) or *only* the "container" SEXP.
>
> Consider an R list:
>
> x = 1:5
>
> y = 2:20
>
> z= c(TRUE, FALSE)
>
> w = "hi there"
>
> lst = list(a= x, b = y, c =z)
>
> lst2 =lst # NAMED == 2, more than one symbol pointing to
>
> And we want to modify lst like so
>
> lst[[2]] = w
>
> We need to duplicate the "container SEXP", ie the VECSXP, so that lst's
> SEXP and lst2's SEXP point to diferent SEXPs in their second element, but
> we don't need to duplicate any SEXPs that represent the data in any of the
> elements (the SEXPs bound to symbols x, y, z, and w), because none of those
> were modified.
>
> Thus, if deep == FALSE, those element SEXPs are NOT duplicated, just the
> top-level one is. if deep==TRUE, then the element SEXPs are duplicated too,
> because  R decided it neeeded that to happen for some reason.
>
> In terms of implementing an ALTREP class, you can either a) just ignore
> deep and *always* do a deep (ie full) duplication of everything in your
> ALTREP class, or  b) you can pay attention to it and  always create a new
> altrep  but which can potentially - *ONLY in cases where deep==FALSE* -
> not duplicate the SEXPs that make up its alternative representation,
> provided you're careful about then making sure that duplication happens at
> a later time if necessary.
>
> I'd strongly suggest starting with option (a) just to have something
> working and completely safe, then considering if its important enough to
> you to look into (b).
>
> Does that make sense?
>
> Best,
> ~G
>
>
>
>
>>
>> 2.
>>
>>> The first one correctly returns its internal data structure, but the
>>> second
>>> one returns the ALTREP object it wraps since the wrapper itself is an
>>> ALTREP. This behavior is unexpected.
>>
>>
>> I disagree. R_altrep_data1 returns whatever THAT altrep SEXP stores in
>>> its "data1" part. There is no recursion/descent going on, and there
>>> shouldn't be.
>>
>>
>> This is might be a bug since in R release 3.6 it will return the ALTREP
>> instead of the data of the ALTREP. I'm not sure if it has been fixed in
>> 3.7. Here is a simple example:
>>
>> SEXP C_peekSharedMemory(SEXP x) {
>>> while (ALTREP(x)) {
>>> Rprintf("getting data 1\n");
>>> x = R_altrep_data1(x);
>>> }
>>> return(x);
>>> }
>>
>>
>> If calling R_altrep_data1 return the internal data directly, we will only
>> see one message. following my last example
>>
>> > .Internal(inspect(so1))
>>> @0x0000000005e7fbb0 14 REALSXP g0c0 [MARK,NAM(7)]  Share object of type
>>> double
>>> > .Internal(inspect(so2))
>>> @0x0000000005fc5ac0 14 REALSXP g0c0 [MARK,NAM(7)]  wrapper
>>> [srt=-2147483648,no_na=0]
>>>   @0x0000000005e7fbb0 14 REALSXP g0c0 [MARK,NAM(7)]  Share object of
>>> type double
>>> > sm1=peekSharedMemory(so1)
>>> getting data 1
>>> > sm2=peekSharedMemory(so2)
>>> getting data 1
>>> getting data 1
>>
>>
>> We see that so2 call R_altrep_data1 twice to get the internal data. This
>> is very unexpected.
>>
>> Thank you very much for your help again!
>>
>> Best,
>> Jiefei
>>
>>
>>
>> On Thu, May 16, 2019 at 3:47 PM Gabriel Becker <gabembecker at gmail.com>
>> wrote:
>>
>>> Hi Jiefei,
>>>
>>> Thanks for tryingout the ALTREP stuff and letting us know how it is
>>> going. That said I don't think either of these are bugs, per se, but rather
>>> a misunderstanding of the API. Details inline.
>>>
>>>
>>>
>>> On Thu, May 16, 2019 at 11:57 AM ??? <szwjf08 at gmail.com> wrote:
>>>
>>>> Hello,
>>>>
>>>> I have encountered two bugs when using ALTREP APIs.
>>>>
>>>> 1. STDVEC_DATAPTR
>>>>
>>>> From RInternal.h file it has a comment:
>>>>
>>>> /* ALTREP support */
>>>> > void *(STDVEC_DATAPTR)(SEXP x);
>>>>
>>>>
>>>> However, this comment might not be true, the easiest way to verify it
>>>> is to
>>>> define a C++ function:
>>>>
>>>>  void C_testFunc(SEXP a)
>>>> > {
>>>> > STDVEC_DATAPTR(a);
>>>> > }
>>>>
>>>>
>>>> and call it in R via
>>>>
>>>> > a=1:10
>>>> > > C_testFunc(a)
>>>> > Error in C_testFunc(a) : cannot get STDVEC_DATAPTR from ALTREP object
>>>>
>>>>
>>> The STDVEC here refers to the SEXP not being an ALTREP. Anything that
>>> starts with STDVEC should never receive an ALTREP, ie it should only be
>>> called after non-ALTREPness has been confirmed by the surrounding/preceding
>>> code. So this is expected behavior.
>>>
>>>
>>>
>>>
>>>>
>>>>  We can inspect the internal type and call ALTREP function to check if
>>>> it
>>>> is an ALTREP:
>>>>
>>>> > .Internal(inspect(a))
>>>> > @0x000000001b5a3310 13 INTSXP g0c0 [NAM(7)]  1 : 10 (compact)
>>>> > > #This is a wrapper of ALTREP
>>>> > > is.altrep(a)
>>>> > [1] TRUE
>>>>
>>>>
>>>> I've also defined an ALTREP type and it did not work either. I guess
>>>> this
>>>> might be a bug? Or did I miss something?
>>>>
>>>> 2. Wrapper objects in ALTREP
>>>>
>>>> If the duplicate function is defined to return the object itself:
>>>>
>>>> SEXP vector_dulplicate(SEXP x, Rboolean deep) {
>>>> return(x);
>>>> }
>>>>
>>>
>>> So this is a violation of of the contract. <youraltrep>_duplicate *must*
>>> do an actual duplication. Returning the object unduplicated when duplicate
>>> is called is going to have all sorts of unintended negative consequences.
>>> R's internals rely on the fact that a SEXP that has been passed to
>>> DUPLICATE has been duplciated and is safe to modify inplace.
>>>
>>>
>>>
>>>> In R an ALTREP object will behave like an environment
>>>> (pass-by-reference).
>>>> However, if we do something like(pseudo code):
>>>>
>>>> n=100
>>>> > x=runif(n)
>>>> > alt1=createAltrep(x)
>>>> > alt2=alt1
>>>> > alt2[1]=10
>>>> > .Internal(inspect(alt1))
>>>> > .Internal(inspect(alt2))
>>>>
>>>>
>>>> The result would be:
>>>>
>>>> > .Internal(inspect(alt1))
>>>> > @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
>>>> > > .Internal(inspect(alt2 ))
>>>> > @0x00000000156a33e0 14 REALSXP g0c0 [NAM(7)]  wrapper
>>>> > [srt=-2147483648,no_na=0]
>>>> >   @0x00000000156f4d18 14 REALSXP g0c0 [NAM(7)]
>>>>
>>>>
>>>> It seems like the object alt2 automatically gets wrapped by R. Although
>>>> at
>>>> the R level it seems fine because there are no differences between alt1
>>>> and
>>>> alt2, if we define a C function as:
>>>>
>>>
>>> So I'm not sure what is happening here, because it depends on what your
>>> createAltrep function does. R automatically creates wrappers in some cases
>>> but not nearly all (or even very many currently) cases.
>>>
>>>>
>>>> SEXP C_peekSharedMemory(SEXP x) {
>>>> > return(R_altrep_data1(x));
>>>>
>>>> }
>>>>
>>>>
>>>> and call it in R to get the internal data structure of an ALTREP object.
>>>>
>>>> C_peekSharedMemory(alt1)
>>>> > C_peekSharedMemory(alt2)
>>>>
>>>>
>>>> The first one correctly returns its internal data structure, but the
>>>> second
>>>> one returns the ALTREP object it wraps since the wrapper itself is an
>>>> ALTREP. This behavior is unexpected.
>>>
>>>
>>> I disagree. R_altrep_data1 returns whatever THAT altrep SEXP stores in
>>> its "data1" part. There is no recursion/descent going on, and there
>>> shouldn't be.
>>>
>>>
>>>> Since the dulplicate function returns
>>>> the object itself, I will expect alt1 and alt2 should be the same
>>>> object.
>>>>
>>>
>>> Again, this is a violation of the core assumptions of ALTREP that is not
>>> allowed, so I'd argue that any behavior this causes is largely irrelevant
>>> (and a smart part of the much larger set of problems not duplicating when R
>>> told you to duplicate will cause).
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>> Even if they are essentially not the same, calling the same function
>>>> should
>>>> at least return the same result. Other than that, It seems like R does
>>>> not
>>>> always wrap an ALTREP object. If we change n from 100 to 10 and check
>>>> the
>>>> internal again, alt2 will not get wrapped.
>>>
>>>
>>> Right, so this is a misunderstanding (which may be the fault of sparse
>>> documentation on our part);  wrapper is one particular ALTREP class, its
>>> not a fundamental aspect of ALTREPs themselves. Most ALTREP objects do not
>>> have wrappers. See, e.g.,
>>>
>>> > .Internal(inspect(1:4))
>>>
>>> @7fb727d6be50 13 INTSXP g0c0 [NAM(3)]  1 : 4 (compact)
>>>
>>>
>>> That's an ALTREP with no wrapper (a compact sequence). The wrapper
>>> ALTREP class is for attaching metadata (known sortedness, known lack of
>>> NAs) to R vectors. Its primary use currently is on the return value of
>>> sort().
>>>
>>>
>>>> This makes the problem even more
>>>> difficult since we cannot predict when would the wrapper appear.
>>>>
>>>
>>> As currently factored, its not intended that you would be or need to
>>> predict when a wrapper would appear. Using the C API or any R functions
>>> will transparently treat wrapped and non-wrapped objects the same, and any
>>> code you write should hit these API entrypoints so that any code you write
>>> does the same.
>>>
>>> Does that help?
>>>
>>> Best,
>>> ~G
>>>
>>>>
>>>> Here is the source code for the wrapper:
>>>> https://github.com/wch/r-source/blob/trunk/src/main/altclasses.c#L1399
>>>>
>>>> Here is a working example if one can build the sharedObject package from
>>>> https://github.com/Jiefei-Wang/sharedObject
>>>>
>>>> n=100
>>>> > x=runif(n)
>>>> > so1=sharedObject(x,copyOnWrite = FALSE)
>>>> > so2=so1
>>>> > so2[1]=10
>>>> > .Internal(inspect(so1))
>>>> > .Internal(inspect(so2))
>>>>
>>>>
>>>> Here is my session info:
>>>>
>>>> R version 3.6.0 alpha (2019-04-08 r76348)
>>>> > Platform: x86_64-w64-mingw32/x64 (64-bit)
>>>> > Running under: Windows >= 8 x64 (build 9200)
>>>> > Matrix products: default
>>>> > locale:
>>>> > [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United
>>>> > States.1252
>>>> > [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
>>>> >
>>>> > [5] LC_TIME=English_United States.1252
>>>> > attached base packages:
>>>> > [1] stats     graphics  grDevices utils     datasets  methods   base
>>>> > other attached packages:
>>>> > [1] sharedObject_0.0.99
>>>> > loaded via a namespace (and not attached):
>>>> > [1] compiler_3.6.0 tools_3.6.0    Rcpp_1.0.1
>>>>
>>>>
>>>> Best,
>>>> Jiefei
>>>>
>>>>         [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>

	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Sat May 18 00:46:43 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Sat, 18 May 2019 10:46:43 +1200
Subject: [Rd] print.<strorageMode>() not called when autoprinting
In-Reply-To: <CAF8bMcatAtZ_LPWZk3QxVQXS5qHA14_j=_tBvGbbH+m0kBYnAQ@mail.gmail.com>
References: <CAF8bMcatAtZ_LPWZk3QxVQXS5qHA14_j=_tBvGbbH+m0kBYnAQ@mail.gmail.com>
Message-ID: <CAB8pepzH-oWR6L+w8R3K-Hy+ESvZXvRYwXiprr37bJ5-cf47Zg@mail.gmail.com>

I don't know the answer to your question.
However, here's a side issue that may be relevant.

Last year, I tried creating my own ecdf object, and redefined the print
method for ecdf.

It worked ok in the console, interactively.
However, when I tried calling the method (with autoprinting) inside an
Sweave document, the stats package method was used instead of my method.
I never determined why this was happening.
However, R check generated a warning later, so I renamed the classes and
methods.


Abs


On Fri, May 17, 2019 at 6:57 AM William Dunlap via R-devel <
r-devel at r-project.org> wrote:
>
> In R-3.6.0 autoprinting was changed so that print methods for the storage
> modes are not called when there is no explicit class attribute.   E.g.,
>
> % R-3.6.0 --vanilla --quiet
> > print.function <- function(x, ...) { cat("Function with argument list
");
> cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
> > f <- function(x, ...) { sum( x * seq_along(x) ) }
> > f
> function(x, ...) { sum( x * seq_along(x) ) }
> > print(f)
> Function with argument list function (x, ...)
>
> Previous to R-3.6.0 autoprinting did call such methods
> % R-3.5.3 --vanilla --quiet
> > print.function <- function(x, ...) { cat("Function with argument list
");
> cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
> > f <- function(x, ...) { sum( x * seq_along(x) ) }
> > f
> Function with argument list function (x, ...)
> > print(f)
> Function with argument list function (x, ...)
>
> Was this intentional?
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From p@ve| @end|ng |rom uow@edu@@u  Sat May 18 23:34:29 2019
From: p@ve| @end|ng |rom uow@edu@@u (Pavel Krivitsky)
Date: Sat, 18 May 2019 21:34:29 +0000
Subject: [Rd] [R-pkg-devel] Three-argument S3method declaration does not
 seem to affect dispatching from inside the package.
In-Reply-To: <CALEXWq02kZdw79BWJiAtj-HXMnCeX_PRF_yFTT6DpNCn=MxPAw@mail.gmail.com>
References: <49d473a1bfa29f95d74f931ecfdc2a6b346ca6a2.camel@uow.edu.au>
 <CALEXWq058Wg0oskeaFAjPdptTEjVMWLFbUr+FeBwdKwP93T=Kw@mail.gmail.com>
 <14d531d671791b51683b71ee0eece1c9a29c374d.camel@uow.edu.au>
 <CALEXWq02kZdw79BWJiAtj-HXMnCeX_PRF_yFTT6DpNCn=MxPAw@mail.gmail.com>
Message-ID: <8429787eb123a937ddb8770c80587d6e2ae05195.camel@uow.edu.au>

Hi, Inaki,

On Tue, 2019-05-14 at 12:50 +0200, I?aki Ucar wrote:
> The thing is that, in R, "nearer" means "the calling environment"
> (and then, other things). When you call test_me(), the calling
> environment for gen() is the package namespace. When you call gen()
> directly, thenthe calling environment is the global environment. So
> what happens here follows the principle of least astonishment.

I don't think that we disagree about which environment takes
precedence. The issue is whether *within a a given environment*,
registration or function naming should take precedence.

> The issue here is that you are registering a non-standard name
> (.gen.formula) for that generic and then defining what would be the
> standard name (gen.formula) for... what purpose? IMHO, this is a bad
> practice and should be avoided.

The situation initially arose when I wanted to soft-deprecate calling a
particular method by its full name in order to clean up the package's
namespace.

To use our working example, I wanted calls to gen.formula() to issue a
deprecation warning, but calls to gen(formula) not to. The simplest way
to do that that I could find was to create a function, say,
.gen.formula() that would implement the method and declare it as the S3
export, and modify gen.formula() to issue the warning before passing on
to .gen.formula(). Then, direct calls to gen.formula() would produce a
warning, but gen(formula) would by pass it.

> > That is, for a call from inside a package, the order of precedence
> > would be as follows:
> >    1. S3method() in that package's NAMESPACE.
> >    2. Appropriately named function in that package (exported or
> > not).
> >    3. Appropriately named function in calling environment (which
> > may be
> >       GlobalEnv).
> >    4. S3method() in other loaded packages' NAMESPACEs.
> >    5. Appropriately named functions exported by other loaded
> > packages'
> >       NAMESPACEs.
> > 
> > For a call from outside a package, the precedence is the same, but
> > 1 and 2 are not relevant.
> > 
> > As far as I can tell, this is the current behaviour except for the
> > relative ordering of 1 and 2.
> 
> Nope. Current behaviour (see details in ?UseMethod) is:
> 
> "To support this, UseMethod and NextMethod search for methods in two
> places: in the environment in which the generic function is called,
> and in the registration data base for the environment in which the
> generic is defined".

Can you be more specific where the sequence above contradicts the
current implementation (except for swapping 1 and 2)? As far as I can
tell, it's just a more concrete description of what's in the
documentation.

			Best Regards,
			Pavel

-- 
Pavel Krivitsky
Lecturer in Statistics
National Institute of Applied Statistics Research Australia (NIASRA)
School of Mathematics and Applied Statistics | Building 39C Room 154
University of Wollongong NSW 2522 Australia
T +61 2 4221 3713
Web (NIASRA): http://niasra.uow.edu.au/index.html
Web (Personal): http://www.krivitsky.net/research
ORCID: 0000-0002-9101-3362

NOTICE: This email is intended for the addressee named and may contain
confidential information. If you are not the intended recipient, please
delete it and notify the sender. Please consider the environment before
printing this email.

From r-deve| @end|ng |rom @ker@t|ng@de  Sun May 19 11:31:35 2019
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Sun, 19 May 2019 11:31:35 +0200 (CEST)
Subject: [Rd] most robust way to call R API functions from a secondary thread
Message-ID: <E1hSIAJ-0005FM-8P@rmmprod07.runbox>

Hi,

As the subject suggests, I am looking for the most robust way to call an (arbitrary) function from the R API from another but the main POSIX thread in a package's code.

I know that, "[c]alling any of the R API from threaded code is ?for experts only? and strongly discouraged. Many functions in the R API modify internal R data structures and might corrupt these data structures if called simultaneously from multiple threads. Most R API functions can signal errors, which must only happen on the R main thread." (https://cran.r-project.org/doc/manuals/r-release/R-exts.html#OpenMP-support)

Let me start with my understanding of the related issues and possible solutions:

1) R API functions are generally not thread-safe and hence one must ensure, e.g. by using mutexes, that no two threads use the R API simultaneously

2) R uses longjmps on error and interrupts as well as for condition handling and it is undefined behaviour to do a longjmp from one thread to another; interrupts can be suspended before creating the threads by setting R_interrupts_suspended = TRUE; by wrapping the calls to functions from the R API with R_ToplevelExec(), longjmps across thread boundaries can be avoided; the only reason for R_ToplevelExec() itself to fail with an R-style error (longjmp) is a pointer protection stack overflow

3) R_CheckStack() might be executed (indirectly), which will (probably) signal a stack overflow because it only works correctly when called form the main thread (see https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Threading-issues); in particular, any function that does allocations, e.g. via allocVector3() might end up calling it via GC -> finalizer -> ... -> eval; the only way around this problem which I could find is to adjust R_CStackLimit, which is outside of the official API; it can be set to -1 to disable the check or be changed to a value appropriate for the current thread

4) R sets signal handlers for several signals and some of them make use of the R API; hence, issues 1) - 3) apply; signal masks can be used to block delivery of signals to secondary threads in general and to the main thread while other threads are using the R API


I basically have the following questions:

a) Is my understanding of the issues accurate?
b) Are there more things to consider when calling the R API from secondary threads?
c) Are the solutions proposed appropriate? Are there scenarios in which they will fail to solve the issue? Or might they even cause new problems?
d) Are there alternative/better solutions?

Any feedback on this is highly appreciated.

Below you can find a template which, combines the proposed solutions (and skips all non-illustrative checks of return values). Additionally, R_CheckUserInterrupt() is used in combination with R_UnwindProtect() to regularly check for interrupts from the main thread, while still being able to cleanly cancel the threads before fun_running_in_main_thread() is left via a longjmp. This is e.g. required if the secondary threads use memory which was allocated in fun_running_in_main_thread() using e.g. R_alloc().

Best regards,
Andreas Kersting



#include <Rinternals.h>
#include <pthread.h>
#include <signal.h>
#include <stdint.h>

extern uintptr_t R_CStackLimit;
extern int R_PPStackTop;
extern int R_PPStackSize;

#include <R_ext/libextern.h>
LibExtern Rboolean R_interrupts_suspended;
LibExtern int R_interrupts_pending;
extern void Rf_onintr(void);

// mutex for exclusive access to the R API:
static pthread_mutex_t r_api_mutex = PTHREAD_MUTEX_INITIALIZER;

// a wrapper arround R_CheckUserInterrupt() which can be passed to R_UnwindProtect():
SEXP check_interrupt(void *data) {
  R_CheckUserInterrupt();
  return R_NilValue;
}

// a wrapper arround Rf_onintr() which can be passed to R_UnwindProtect():
SEXP my_onintr(void *data) {
  Rf_onintr();
  return R_NilValue;
}

// function called by R_UnwindProtect() to cleanup on interrupt
void cleanfun(void *data, Rboolean jump) {
  if (jump) {
    // terminate threads cleanly ...
  }
}

void fun_calling_R_API(void *data) {
  // call some R API function, e.g. mkCharCE() ...
}

void *threaded_fun(void *td) {

  // ...

  pthread_mutex_lock(&r_api_mutex);

  // avoid false stack overflow error:
  intptr_t R_CStackLimit_old = R_CStackLimit;
  R_CStackLimit = -1;


  // R_ToplevelExec() below will call PROTECT 4x:
  if (R_PPStackTop > R_PPStackSize - 4) {
    // ppstack would overflow in R_ToplevelExec() -> handle this ...
  }

  // avoid longjmp to different thread:
  Rboolean ok = R_ToplevelExec(fun_calling_R_API, (void *) &some_data);

  // re-enable stack size checking:
  R_CStackLimit = R_CStackLimit_old;
  pthread_mutex_unlock(&r_api_mutex);

  if (!ok) {
    // handle error ...
  }

  // ...
}

SEXP fun_running_in_main_thread() {

  // ...

  /* create continuation token for R_UnwindProtect():
   *
   * do this explicitly here before the threads are created because this might
   * fail in allocation or with pointer protection stack overflow
   */
  SEXP cont = PROTECT(R_MakeUnwindCont());

  /* block all signals:
   *
   * do this before the threads are created such that they inherit the mask
   */
  sigset_t block_set, prev_mask;
  sigfillset(&block_set);
  pthread_sigmask(SIG_SETMASK, &block_set, &prev_mask);

  // suspend interrupts:
  Rboolean __oldsusp__ = R_interrupts_suspended;
  R_interrupts_suspended = TRUE;

  // create threads running threaded_fun() ...

  for(;;) {
    // timed blocking check if threads are done ...

    // unblock signals, check for interrupts and run cleanfun if there is one:
    pthread_mutex_lock(&r_api_mutex);
    pthread_sigmask(SIG_SETMASK, &prev_mask, NULL);

    R_interrupts_suspended = __oldsusp__;
    if (R_interrupts_pending && ! R_interrupts_suspended) {
      R_UnwindProtect(my_onintr, NULL, cleanfun, (void *) clean_data, cont);
    }

    R_UnwindProtect(check_interrupt, NULL, cleanfun, (void *) clean_data, cont);

    R_interrupts_suspended = TRUE;

    pthread_sigmask(SIG_SETMASK, &block_set, NULL);
    pthread_mutex_unlock(&r_api_mutex);
  }

  // now all threads are dead

  UNPROTECT(1);  // continuation token

  // unblock signals:
  pthread_sigmask(SIG_SETMASK, &prev_mask, NULL);

  // reset interrupt-suspension:
  R_interrupts_suspended = __oldsusp__;
  if (R_interrupts_pending && ! R_interrupts_suspended) {
    Rf_onintr();
  }

  // ...
}

From |uc@r @end|ng |rom |edor@project@org  Sun May 19 16:59:07 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Sun, 19 May 2019 16:59:07 +0200
Subject: [Rd] [R-pkg-devel] Three-argument S3method declaration does not
 seem to affect dispatching from inside the package.
In-Reply-To: <8429787eb123a937ddb8770c80587d6e2ae05195.camel@uow.edu.au>
References: <49d473a1bfa29f95d74f931ecfdc2a6b346ca6a2.camel@uow.edu.au>
 <CALEXWq058Wg0oskeaFAjPdptTEjVMWLFbUr+FeBwdKwP93T=Kw@mail.gmail.com>
 <14d531d671791b51683b71ee0eece1c9a29c374d.camel@uow.edu.au>
 <CALEXWq02kZdw79BWJiAtj-HXMnCeX_PRF_yFTT6DpNCn=MxPAw@mail.gmail.com>
 <8429787eb123a937ddb8770c80587d6e2ae05195.camel@uow.edu.au>
Message-ID: <CALEXWq0duRo9zX1f_TBytsEZgdfhtxvQ=kFKtnzZP-sZOp6iXQ@mail.gmail.com>

On Sat, 18 May 2019 at 23:34, Pavel Krivitsky <pavel at uow.edu.au> wrote:
>
> > The issue here is that you are registering a non-standard name
> > (.gen.formula) for that generic and then defining what would be the
> > standard name (gen.formula) for... what purpose? IMHO, this is a bad
> > practice and should be avoided.
>
> The situation initially arose when I wanted to soft-deprecate calling a
> particular method by its full name in order to clean up the package's
> namespace.
>
> To use our working example, I wanted calls to gen.formula() to issue a
> deprecation warning, but calls to gen(formula) not to. The simplest way
> to do that that I could find was to create a function, say,
> .gen.formula() that would implement the method and declare it as the S3
> export, and modify gen.formula() to issue the warning before passing on
> to .gen.formula(). Then, direct calls to gen.formula() would produce a
> warning, but gen(formula) would by pass it.

IMO the simplest way to do this is to check who the caller was:

foo <- function(x) UseMethod("foo")
foo.bar <- function(x) {
  sc <- sys.call(-1)
  if (is.null(sc) || sc[[1]] != "foo")
    .Deprecated(msg="Calling 'foo.bar' directly is deprecated")
}

x <- 1
class(x) <- "bar"

foo(x)      # silent
foo.bar(x)  # a warning is issued

> > > That is, for a call from inside a package, the order of precedence
> > > would be as follows:
> > >    1. S3method() in that package's NAMESPACE.
> > >    2. Appropriately named function in that package (exported or
> > > not).
> > >    3. Appropriately named function in calling environment (which
> > > may be
> > >       GlobalEnv).
> > >    4. S3method() in other loaded packages' NAMESPACEs.
> > >    5. Appropriately named functions exported by other loaded
> > > packages'
> > >       NAMESPACEs.
> > >
> > > For a call from outside a package, the precedence is the same, but
> > > 1 and 2 are not relevant.
> > >
> > > As far as I can tell, this is the current behaviour except for the
> > > relative ordering of 1 and 2.
> >
> > Nope. Current behaviour (see details in ?UseMethod) is:
> >
> > "To support this, UseMethod and NextMethod search for methods in two
> > places: in the environment in which the generic function is called,
> > and in the registration data base for the environment in which the
> > generic is defined".
>
> Can you be more specific where the sequence above contradicts the
> current implementation (except for swapping 1 and 2)? As far as I can
> tell, it's just a more concrete description of what's in the
> documentation.

The description in the documentation means that point 3) in your list
goes always first, which automatically implies 2) if the generic is
defined in the same package.

I?aki


From p@ve| @end|ng |rom uow@edu@@u  Sun May 19 23:23:45 2019
From: p@ve| @end|ng |rom uow@edu@@u (Pavel Krivitsky)
Date: Sun, 19 May 2019 21:23:45 +0000
Subject: [Rd] [R-pkg-devel] Three-argument S3method declaration does not
 seem to affect dispatching from inside the package.
In-Reply-To: <CALEXWq0duRo9zX1f_TBytsEZgdfhtxvQ=kFKtnzZP-sZOp6iXQ@mail.gmail.com>
References: <49d473a1bfa29f95d74f931ecfdc2a6b346ca6a2.camel@uow.edu.au>
 <CALEXWq058Wg0oskeaFAjPdptTEjVMWLFbUr+FeBwdKwP93T=Kw@mail.gmail.com>
 <14d531d671791b51683b71ee0eece1c9a29c374d.camel@uow.edu.au>
 <CALEXWq02kZdw79BWJiAtj-HXMnCeX_PRF_yFTT6DpNCn=MxPAw@mail.gmail.com>
 <8429787eb123a937ddb8770c80587d6e2ae05195.camel@uow.edu.au>
 <CALEXWq0duRo9zX1f_TBytsEZgdfhtxvQ=kFKtnzZP-sZOp6iXQ@mail.gmail.com>
Message-ID: <133e2cf6d1a5a3597545997f441aca9502597632.camel@uow.edu.au>

Hi, Inaki,

On Sun, 2019-05-19 at 16:59 +0200, I?aki Ucar wrote:
> IMO the simplest way to do this is to check who the caller was:
> 
> foo <- function(x) UseMethod("foo")
> foo.bar <- function(x) {
>   sc <- sys.call(-1)
>   if (is.null(sc) || sc[[1]] != "foo")
>     .Deprecated(msg="Calling 'foo.bar' directly is deprecated")
> }
> 
> x <- 1
> class(x) <- "bar"
> 
> foo(x)      # silent
> foo.bar(x)  # a warning is issued

f <- getS3method("foo","bar")
f(x) # spurious warning

foo.baz <- function(x) NextMethod("foo")
class(x) <- c("baz","bar")
foo(x) # spurious warning

Believe me, I spent a lot of time trying to get this to work, and I
tried even more sophisticated call stack alchemy, but people kept
getting false positives and negatives. (Take a look at my attempt in
the statnet.common package.)

> The description in the documentation means that point 3) in your list
> goes always first, which automatically implies 2) if the generic is
> defined in the same package.

Are you sure which package defines the generic matters? I've just ran
some tests with two packages and moving the generic around doesn't seem
to affect things: the calling function determines whose method is used.

It seems to me like there is no contradiction after all, except that I
propose that the registered method should take precedence within a
namespace.

The only situation in which it would change R's behaviour would be when
a package/namespace contains a function foo.bar() AND a NAMESPACE
containing S3method(foo,bar,not.foo.bar) AND calls foo() on objects of
type bar from inside the package. It is extremely unlikely to break any
existing code.

				Best,
				Pavel

-- 
Pavel Krivitsky
Lecturer in Statistics
National Institute of Applied Statistics Research Australia (NIASRA)
School of Mathematics and Applied Statistics | Building 39C Room 154
University of Wollongong NSW 2522 Australia
T +61 2 4221 3713
Web (NIASRA): http://niasra.uow.edu.au/index.html
Web (Personal): http://www.krivitsky.net/research
ORCID: 0000-0002-9101-3362

NOTICE: This email is intended for the addressee named and may contain
confidential information. If you are not the intended recipient, please
delete it and notify the sender. Please consider the environment before
printing this email.

From |uc@r @end|ng |rom |edor@project@org  Mon May 20 01:45:06 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Mon, 20 May 2019 01:45:06 +0200
Subject: [Rd] [R-pkg-devel] Three-argument S3method declaration does not
 seem to affect dispatching from inside the package.
In-Reply-To: <133e2cf6d1a5a3597545997f441aca9502597632.camel@uow.edu.au>
References: <49d473a1bfa29f95d74f931ecfdc2a6b346ca6a2.camel@uow.edu.au>
 <CALEXWq058Wg0oskeaFAjPdptTEjVMWLFbUr+FeBwdKwP93T=Kw@mail.gmail.com>
 <14d531d671791b51683b71ee0eece1c9a29c374d.camel@uow.edu.au>
 <CALEXWq02kZdw79BWJiAtj-HXMnCeX_PRF_yFTT6DpNCn=MxPAw@mail.gmail.com>
 <8429787eb123a937ddb8770c80587d6e2ae05195.camel@uow.edu.au>
 <CALEXWq0duRo9zX1f_TBytsEZgdfhtxvQ=kFKtnzZP-sZOp6iXQ@mail.gmail.com>
 <133e2cf6d1a5a3597545997f441aca9502597632.camel@uow.edu.au>
Message-ID: <CALEXWq1UQBHAYt5Y7i+ja7o9Xwber-6QYmfpWk5eZ4Fux-q3Aw@mail.gmail.com>

On Sun, 19 May 2019 at 23:23, Pavel Krivitsky <pavel at uow.edu.au> wrote:
>
> Hi, Inaki,
>
> On Sun, 2019-05-19 at 16:59 +0200, I?aki Ucar wrote:
> > IMO the simplest way to do this is to check who the caller was:
> >
> > foo <- function(x) UseMethod("foo")
> > foo.bar <- function(x) {
> >   sc <- sys.call(-1)
> >   if (is.null(sc) || sc[[1]] != "foo")
> >     .Deprecated(msg="Calling 'foo.bar' directly is deprecated")
> > }
> >
> > x <- 1
> > class(x) <- "bar"
> >
> > foo(x)      # silent
> > foo.bar(x)  # a warning is issued
>
> f <- getS3method("foo","bar")
> f(x) # spurious warning
>
> foo.baz <- function(x) NextMethod("foo")
> class(x) <- c("baz","bar")
> foo(x) # spurious warning

Checking the enclosing environment and whether was called through
NextMethod respectively covers these cases too.

> > The description in the documentation means that point 3) in your list
> > goes always first, which automatically implies 2) if the generic is
> > defined in the same package.
>
> Are you sure which package defines the generic matters? I've just ran
> some tests with two packages and moving the generic around doesn't seem
> to affect things: the calling function determines whose method is used.

If package A defines generic foo and package B defines method foo.bar
without registering nor exporting it, then foo can't find foo.bar.

> It seems to me like there is no contradiction after all, except that I
> propose that the registered method should take precedence within a
> namespace.
>
> The only situation in which it would change R's behaviour would be when
> a package/namespace contains a function foo.bar() AND a NAMESPACE
> containing S3method(foo,bar,not.foo.bar) AND calls foo() on objects of
> type bar from inside the package. It is extremely unlikely to break any
> existing code.

To try to avoid changing current behaviour if foo.bar is found, R
would need to check whether the enclosing environment is identical to
the enclosing environment of the registered method, and in that case,
give precedence to the latter (which, BTW, is exactly what you need to
do to fix the first spurious warning above).

And still, funny things may happen. For example, pkgA defines generic
foo, exports foo.bar and registers other.foo.bar instead of foo.bar.
Following your proposal, if I load pkgA and call foo for an object of
class bar, other.foo.bar is called. Then I load pkgB, which registers
just another method for foo.bar, and call foo again. What happens is
that the registered method belongs now to pkgB, which is a different
namespace, so we got different precedence, and foo.bar is called
instead.

Exceptions leads us to inconsistencies like this. I can't speak for R
core, but I don't think that the use case is compelling enough to take
that path.

I?aki


From @purd|e@@ @end|ng |rom gm@||@com  Mon May 20 04:11:47 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Mon, 20 May 2019 14:11:47 +1200
Subject: [Rd] 
 Give update.formula() an option not to simplify or reorder the
 result -- request for comments
In-Reply-To: <56ee72cb833f01d6eb3925452925d54f7c2e03d7.camel@uow.edu.au>
References: <56ee72cb833f01d6eb3925452925d54f7c2e03d7.camel@uow.edu.au>
Message-ID: <CAB8pepydYdTRYqKAsL0kJ_o3aTfhg7pT38U1t=pFJqpyYfJ+tw@mail.gmail.com>

Hi Pavel
(Back On List)

And my two cents...

> At this time, the update.formula() method always performs a number of
> transformations on the results, eliminating redundant variables and
> reordering interactions to be after the main effects.
> This the proposal is to add an option simplify= (defaulting to TRUE,
> for backwards compatibility) that if FALSE will skip the simplification
> step.
> Any thoughts? One particular question that Martin raised is whether the
> UI should be just a single logical argument, or something else.

Firstly, note that the constructor for formula objects behaves differently
to the update method, so I think any changes should be consistent between
the two functions.
> #constructor - doesn't simplify
> y ~ x + x
y ~ x + x
> #update method - does simplify
> update (y ~ x, ~. + x)
y ~ x

Interestingly, this doesn't simplify.
> update (y ~ I (x), ~. + x)
y ~ I(x) + x

I think that simplification could mean different things.
So, there could be something like:
> update (y ~ x, ~. + x, strip=FALSE)
y ~ I (2 * x)

I don't know how easy that would be to implement.
(Symbolic computation on par with computer algebra systems is a discussion
in itself...).
And you could have one argument (say, method="simplify") rather than two or
more logical arguments.

It would also be possible to allow partial forms of simplification, by
specifying which terms should be collapsed, however, I doubt any possible
usefulness of this, would justify the complexity.
However, feel free to disagree.

You made an interesting comment.

> This is not
> always the desired behavior, because formulas are increasingly used
> for purposes other than specifying linear models.

Can I ask what these purposes are?


kind regards
Abs

	[[alternative HTML version deleted]]


From @tep@n@@|nde|@r @end|ng |rom or@c|e@com  Mon May 20 11:45:47 2019
From: @tep@n@@|nde|@r @end|ng |rom or@c|e@com (Stepan)
Date: Mon, 20 May 2019 11:45:47 +0200
Subject: [Rd] most robust way to call R API functions from a secondary
 thread
In-Reply-To: <E1hSIAJ-0005FM-8P@rmmprod07.runbox>
References: <E1hSIAJ-0005FM-8P@rmmprod07.runbox>
Message-ID: <b337000d-20ea-d948-cb86-cfed8164fd8c@oracle.com>

Hi Andreas,

note that with the introduction of ALTREP, as far as I understand, calls 
as "simple" as DATAPTR can execute arbitrary code (R or native). Even 
without ALTREP, if you execute user-provided R code via Rf_eval and such 
on some custom thread, you may end up executing native code of some 
package, which may assume it is executed only from the R main thread.

Could you (1) decompose your problem in a way that in some initial phase 
you pull all the necessary data from R, then start the parallel 
computation, and then again in the R main thread "submit" the results 
back to the R world?

If you wanted something really robust, you can (2) "send" the requests 
for R API usage to the R main thread and pause the worker thread until 
it receives the results back. This looks similar to what the "later" 
package does. Maybe you can even use that package for your purposes?

Do you want to parallelize your code to achieve better performance? Even 
with your proposed solution, you need synchronization and chances are 
that excessive synchronization will severely affect the expected 
performance benefits of parallelization. If you do not need to 
synchronize that much, then the question is if you can do with (1) or (2).

Best regards,
Stepan

On 19/05/2019 11:31, Andreas Kersting wrote:
> Hi,
> 
> As the subject suggests, I am looking for the most robust way to call an (arbitrary) function from the R API from another but the main POSIX thread in a package's code.
> 
> I know that, "[c]alling any of the R API from threaded code is ?for experts only? and strongly discouraged. Many functions in the R API modify internal R data structures and might corrupt these data structures if called simultaneously from multiple threads. Most R API functions can signal errors, which must only happen on the R main thread." (https://urldefense.proofpoint.com/v2/url?u=https-3A__cran.r-2Dproject.org_doc_manuals_r-2Drelease_R-2Dexts.html-23OpenMP-2Dsupport&d=DwIFaQ&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=d1r2raD4w0FF7spOVuz2IVEo0P_II3ZtSbw0TU2NmaE&s=JaadZR_m-QiJ3BQzzQ_fJPYt034tM5Ts6vKhdi6f__A&e=)
> 
> Let me start with my understanding of the related issues and possible solutions:
> 
> 1) R API functions are generally not thread-safe and hence one must ensure, e.g. by using mutexes, that no two threads use the R API simultaneously
> 
> 2) R uses longjmps on error and interrupts as well as for condition handling and it is undefined behaviour to do a longjmp from one thread to another; interrupts can be suspended before creating the threads by setting R_interrupts_suspended = TRUE; by wrapping the calls to functions from the R API with R_ToplevelExec(), longjmps across thread boundaries can be avoided; the only reason for R_ToplevelExec() itself to fail with an R-style error (longjmp) is a pointer protection stack overflow
> 
> 3) R_CheckStack() might be executed (indirectly), which will (probably) signal a stack overflow because it only works correctly when called form the main thread (see https://urldefense.proofpoint.com/v2/url?u=https-3A__cran.r-2Dproject.org_doc_manuals_r-2Drelease_R-2Dexts.html-23Threading-2Dissues&d=DwIFaQ&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=d1r2raD4w0FF7spOVuz2IVEo0P_II3ZtSbw0TU2NmaE&s=J_TMw2gu43dxB_EX2vHbtF4Zr4bIAFR8RSFzvbRV6jE&e=); in particular, any function that does allocations, e.g. via allocVector3() might end up calling it via GC -> finalizer -> ... -> eval; the only way around this problem which I could find is to adjust R_CStackLimit, which is outside of the official API; it can be set to -1 to disable the check or be changed to a value appropriate for the current thread
> 
> 4) R sets signal handlers for several signals and some of them make use of the R API; hence, issues 1) - 3) apply; signal masks can be used to block delivery of signals to secondary threads in general and to the main thread while other threads are using the R API
> 
> 
> I basically have the following questions:
> 
> a) Is my understanding of the issues accurate?
> b) Are there more things to consider when calling the R API from secondary threads?
> c) Are the solutions proposed appropriate? Are there scenarios in which they will fail to solve the issue? Or might they even cause new problems?
> d) Are there alternative/better solutions?
> 
> Any feedback on this is highly appreciated.
> 
> Below you can find a template which, combines the proposed solutions (and skips all non-illustrative checks of return values). Additionally, R_CheckUserInterrupt() is used in combination with R_UnwindProtect() to regularly check for interrupts from the main thread, while still being able to cleanly cancel the threads before fun_running_in_main_thread() is left via a longjmp. This is e.g. required if the secondary threads use memory which was allocated in fun_running_in_main_thread() using e.g. R_alloc().
> 
> Best regards,
> Andreas Kersting
> 
> 
> 
> #include <Rinternals.h>
> #include <pthread.h>
> #include <signal.h>
> #include <stdint.h>
> 
> extern uintptr_t R_CStackLimit;
> extern int R_PPStackTop;
> extern int R_PPStackSize;
> 
> #include <R_ext/libextern.h>
> LibExtern Rboolean R_interrupts_suspended;
> LibExtern int R_interrupts_pending;
> extern void Rf_onintr(void);
> 
> // mutex for exclusive access to the R API:
> static pthread_mutex_t r_api_mutex = PTHREAD_MUTEX_INITIALIZER;
> 
> // a wrapper arround R_CheckUserInterrupt() which can be passed to R_UnwindProtect():
> SEXP check_interrupt(void *data) {
>    R_CheckUserInterrupt();
>    return R_NilValue;
> }
> 
> // a wrapper arround Rf_onintr() which can be passed to R_UnwindProtect():
> SEXP my_onintr(void *data) {
>    Rf_onintr();
>    return R_NilValue;
> }
> 
> // function called by R_UnwindProtect() to cleanup on interrupt
> void cleanfun(void *data, Rboolean jump) {
>    if (jump) {
>      // terminate threads cleanly ...
>    }
> }
> 
> void fun_calling_R_API(void *data) {
>    // call some R API function, e.g. mkCharCE() ...
> }
> 
> void *threaded_fun(void *td) {
> 
>    // ...
> 
>    pthread_mutex_lock(&r_api_mutex);
> 
>    // avoid false stack overflow error:
>    intptr_t R_CStackLimit_old = R_CStackLimit;
>    R_CStackLimit = -1;
> 
> 
>    // R_ToplevelExec() below will call PROTECT 4x:
>    if (R_PPStackTop > R_PPStackSize - 4) {
>      // ppstack would overflow in R_ToplevelExec() -> handle this ...
>    }
> 
>    // avoid longjmp to different thread:
>    Rboolean ok = R_ToplevelExec(fun_calling_R_API, (void *) &some_data);
> 
>    // re-enable stack size checking:
>    R_CStackLimit = R_CStackLimit_old;
>    pthread_mutex_unlock(&r_api_mutex);
> 
>    if (!ok) {
>      // handle error ...
>    }
> 
>    // ...
> }
> 
> SEXP fun_running_in_main_thread() {
> 
>    // ...
> 
>    /* create continuation token for R_UnwindProtect():
>     *
>     * do this explicitly here before the threads are created because this might
>     * fail in allocation or with pointer protection stack overflow
>     */
>    SEXP cont = PROTECT(R_MakeUnwindCont());
> 
>    /* block all signals:
>     *
>     * do this before the threads are created such that they inherit the mask
>     */
>    sigset_t block_set, prev_mask;
>    sigfillset(&block_set);
>    pthread_sigmask(SIG_SETMASK, &block_set, &prev_mask);
> 
>    // suspend interrupts:
>    Rboolean __oldsusp__ = R_interrupts_suspended;
>    R_interrupts_suspended = TRUE;
> 
>    // create threads running threaded_fun() ...
> 
>    for(;;) {
>      // timed blocking check if threads are done ...
> 
>      // unblock signals, check for interrupts and run cleanfun if there is one:
>      pthread_mutex_lock(&r_api_mutex);
>      pthread_sigmask(SIG_SETMASK, &prev_mask, NULL);
> 
>      R_interrupts_suspended = __oldsusp__;
>      if (R_interrupts_pending && ! R_interrupts_suspended) {
>        R_UnwindProtect(my_onintr, NULL, cleanfun, (void *) clean_data, cont);
>      }
> 
>      R_UnwindProtect(check_interrupt, NULL, cleanfun, (void *) clean_data, cont);
> 
>      R_interrupts_suspended = TRUE;
> 
>      pthread_sigmask(SIG_SETMASK, &block_set, NULL);
>      pthread_mutex_unlock(&r_api_mutex);
>    }
> 
>    // now all threads are dead
> 
>    UNPROTECT(1);  // continuation token
> 
>    // unblock signals:
>    pthread_sigmask(SIG_SETMASK, &prev_mask, NULL);
> 
>    // reset interrupt-suspension:
>    R_interrupts_suspended = __oldsusp__;
>    if (R_interrupts_pending && ! R_interrupts_suspended) {
>      Rf_onintr();
>    }
> 
>    // ...
> }
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=d1r2raD4w0FF7spOVuz2IVEo0P_II3ZtSbw0TU2NmaE&s=Cv18jzHzhslwwzRcd4ztMRE_4xqphJz7bQ8lprgol6I&e=
>


From @uny|j|@ng @end|ng |rom gm@||@com  Sun May 19 11:39:27 2019
From: @uny|j|@ng @end|ng |rom gm@||@com (Sun Yijiang)
Date: Sun, 19 May 2019 17:39:27 +0800
Subject: [Rd] Race condition on parallel package's mcexit and rmChild
Message-ID: <CAL109ePW+43Gxzd5KjQN1NOAnpnEUQErk-x=7-RaJx4b3xiH+w@mail.gmail.com>

I've been hacking with parallel package for some time and built a
parallel processing framework with it.  However, although very rarely,
I did notice "ignoring SIGPIPE signal" error every now and then.
After a deep dig into the source code, I think I found something worth
noticing.

In short, wring to pipe in the C function mc_exit(SEXP sRes) may cause
a SIGPIPE.  Code from src/library/parallel/src/fork.c:

SEXP NORET mc_exit(SEXP sRes)
{
    int res = asInteger(sRes);
... ...
    if (master_fd != -1) { /* send 0 to signify that we're leaving */
        size_t len = 0;
        /* assign result for Fedora security settings */
        ssize_t n = write(master_fd, &len, sizeof(len));
... ...
}

So a pipe write is made in mc_exit, and here's how this function is
used in src/library/parallel/R/unix/mcfork.R:

mcexit <- function(exit.code = 0L, send = NULL)
{
    if (!is.null(send)) try(sendMaster(send), silent = TRUE)
    .Call(C_mc_exit, as.integer(exit.code))
}

Between sendMaster() and mc_exit() calls, which are made in the child
process, the master process may call readChild() followed by
rmChild().  rmChild closes the pipe on the master side, and if it's
called before child calls mc_exit, a SIGPIPE will be raised when child
tries to write to the pipe in mc_exit.

rmChild is defined but not used in parallel package, so this problem
won't surface in most cases.  However, it is a useful API and may be
used by users like me for advanced control over child processes.  I
hope we can discuss a solution on it.

In fact, I don't see why we need to write to the pipe on child exit
and how it has anything to do with "Fedora security settings" as
suggested in the comments.  Removing it, IMHO, would be a good and
clean way to solve this problem.

Regards,
Yijiang


From d@nny @end|ng |rom gorch@@org  Mon May 20 05:23:39 2019
From: d@nny @end|ng |rom gorch@@org (Danny Smith)
Date: Mon, 20 May 2019 13:23:39 +1000
Subject: [Rd] 
 Give update.formula() an option not to simplify or reorder the
 result -- request for comments
In-Reply-To: <CAB8pepydYdTRYqKAsL0kJ_o3aTfhg7pT38U1t=pFJqpyYfJ+tw@mail.gmail.com>
References: <56ee72cb833f01d6eb3925452925d54f7c2e03d7.camel@uow.edu.au>
 <CAB8pepydYdTRYqKAsL0kJ_o3aTfhg7pT38U1t=pFJqpyYfJ+tw@mail.gmail.com>
Message-ID: <CAOgn7imMjKedfTeHNOP6K23AyJYxUHVeDZKqjoaOYyGVHeErpA@mail.gmail.com>

Hi Abs,

Re: your last point:

> You made an interesting comment.
>

> > This is not
> > always the desired behavior, because formulas are increasingly used
> > for purposes other than specifying linear models.
>
> Can I ask what these purposes are?



Not sure how relevant these are/what Pavel was referring to specifically,
but there are a few alternative uses that I'm familiar with in the
tidyverse packages.

Since formulas store both an expression and an environment they're really
useful for complex evaluation. rlang's "quosures" are a subclass of formula
<https://adv-r.hadley.nz/evaluation.html#quosure-impl>.

Othewise the main tidyverse use is a shorthand for specifying anonymous
functions (this is used extensively, particularly in purrr). From
?dplyr::mutate_at:
# You can also pass formulas to create functions on the spot, purrr-style:
starwars %>% mutate_at(c("height", "mass"), ~scale2(., na.rm = TRUE))

Also see ?dplyr::case_when:
x <- 1:50
case_when(
  x %% 35 == 0 ~ "fizz buzz",
  x %% 5 == 0 ~ "fizz",
  x %% 7 == 0 ~ "buzz",
  TRUE ~ as.character(x)
)

And in base R, formulas are used in the plotting functions, e.g.:
## boxplot on a formula:
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")

Cheers,
Danny

On Mon, May 20, 2019 at 12:12 PM Abby Spurdle <spurdle.a at gmail.com> wrote:

> Hi Pavel
> (Back On List)
>
> And my two cents...
>
> > At this time, the update.formula() method always performs a number of
> > transformations on the results, eliminating redundant variables and
> > reordering interactions to be after the main effects.
> > This the proposal is to add an option simplify= (defaulting to TRUE,
> > for backwards compatibility) that if FALSE will skip the simplification
> > step.
> > Any thoughts? One particular question that Martin raised is whether the
> > UI should be just a single logical argument, or something else.
>
> Firstly, note that the constructor for formula objects behaves differently
> to the update method, so I think any changes should be consistent between
> the two functions.
> > #constructor - doesn't simplify
> > y ~ x + x
> y ~ x + x
> > #update method - does simplify
> > update (y ~ x, ~. + x)
> y ~ x
>
> Interestingly, this doesn't simplify.
> > update (y ~ I (x), ~. + x)
> y ~ I(x) + x
>
> I think that simplification could mean different things.
> So, there could be something like:
> > update (y ~ x, ~. + x, strip=FALSE)
> y ~ I (2 * x)
>
> I don't know how easy that would be to implement.
> (Symbolic computation on par with computer algebra systems is a discussion
> in itself...).
> And you could have one argument (say, method="simplify") rather than two or
> more logical arguments.
>
> It would also be possible to allow partial forms of simplification, by
> specifying which terms should be collapsed, however, I doubt any possible
> usefulness of this, would justify the complexity.
> However, feel free to disagree.
>
> You made an interesting comment.
>
> > This is not
> > always the desired behavior, because formulas are increasingly used
> > for purposes other than specifying linear models.
>
> Can I ask what these purposes are?
>
>
> kind regards
> Abs
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @uny|j|@ng @end|ng |rom gm@||@com  Mon May 20 15:36:26 2019
From: @uny|j|@ng @end|ng |rom gm@||@com (Sun Yijiang)
Date: Mon, 20 May 2019 21:36:26 +0800
Subject: [Rd] Race condition on parallel package's mcexit and rmChild
Message-ID: <CAL109eNwAwYF2zB4j0m=0PdHKt5Wbh=PKxycrGjDJ6LSc89C+g@mail.gmail.com>

I've been hacking with parallel package for some time and built a
parallel processing framework with it.  However, although very rarely,
I did notice "ignoring SIGPIPE signal" error every now and then.
After a deep dig into the source code, I think I found something worth
noticing.

In short, wring to pipe in the C function mc_exit(SEXP sRes) may cause
a SIGPIPE.  Code from src/library/parallel/src/fork.c:

SEXP NORET mc_exit(SEXP sRes)
{
    int res = asInteger(sRes);
... ...
    if (master_fd != -1) { /* send 0 to signify that we're leaving */
        size_t len = 0;
        /* assign result for Fedora security settings */
        ssize_t n = write(master_fd, &len, sizeof(len));
... ...
}

So a pipe write is made in mc_exit, and here's how this function is
used in src/library/parallel/R/unix/mcfork.R:

mcexit <- function(exit.code = 0L, send = NULL)
{
    if (!is.null(send)) try(sendMaster(send), silent = TRUE)
    .Call(C_mc_exit, as.integer(exit.code))
}

Between sendMaster() and mc_exit() calls, which are made in the child
process, the master process may call readChild() followed by
rmChild().  rmChild closes the pipe on the master side, and if it's
called before child calls mc_exit, a SIGPIPE will be raised when child
tries to write to the pipe in mc_exit.

rmChild is defined but not used in parallel package, so this problem
won't surface in most cases.  However, it is a useful API and may be
used by users like me for advanced control over child processes.  I
hope we can discuss a solution on it.

In fact, I don't see why we need to write to the pipe on child exit
and how it has anything to do with "Fedora security settings" as
suggested in the comments.  Removing it, IMHO, would be a good and
clean way to solve this problem.

Regards,
Yijiang


From @|mon@urb@nek @end|ng |rom R-project@org  Mon May 20 15:54:54 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 20 May 2019 09:54:54 -0400
Subject: [Rd] most robust way to call R API functions from a secondary
 thread
In-Reply-To: <b337000d-20ea-d948-cb86-cfed8164fd8c@oracle.com>
References: <E1hSIAJ-0005FM-8P@rmmprod07.runbox>
 <b337000d-20ea-d948-cb86-cfed8164fd8c@oracle.com>
Message-ID: <D9CC3798-DD96-4D61-9311-6D9E892868AD@R-project.org>

Stepan,

Andreas gave a lot more thought into what you question in your reply. His question was how you can avoid what you where proposing and have proper threading under safe conditions. Having dealt with this before, I think Andreas' write up is pretty much the most complete analysis I have seen. I'd wait for Luke to chime in as the ultimate authority if he gets to it.

The "classic" approach which you mention is to collect and allocate everything, then execute parallel code and then return. What Andres is proposing is obviously much more efficient: you only synchronize on R API calls which are likely a small fraction on the entire time while you keep all threads alive. His question was how to do that safely. (BTW: I really like the touch of counting frames that toplevel exec can use ;) - it may make sense to deal with that edge-case in R if we can ...).

Cheers,
Simon




> On May 20, 2019, at 5:45 AM, Stepan <stepan.sindelar at oracle.com> wrote:
> 
> Hi Andreas,
> 
> note that with the introduction of ALTREP, as far as I understand, calls as "simple" as DATAPTR can execute arbitrary code (R or native). Even without ALTREP, if you execute user-provided R code via Rf_eval and such on some custom thread, you may end up executing native code of some package, which may assume it is executed only from the R main thread.
> 
> Could you (1) decompose your problem in a way that in some initial phase you pull all the necessary data from R, then start the parallel computation, and then again in the R main thread "submit" the results back to the R world?
> 
> If you wanted something really robust, you can (2) "send" the requests for R API usage to the R main thread and pause the worker thread until it receives the results back. This looks similar to what the "later" package does. Maybe you can even use that package for your purposes?
> 
> Do you want to parallelize your code to achieve better performance? Even with your proposed solution, you need synchronization and chances are that excessive synchronization will severely affect the expected performance benefits of parallelization. If you do not need to synchronize that much, then the question is if you can do with (1) or (2).
> 
> Best regards,
> Stepan
> 
> On 19/05/2019 11:31, Andreas Kersting wrote:
>> Hi,
>> As the subject suggests, I am looking for the most robust way to call an (arbitrary) function from the R API from another but the main POSIX thread in a package's code.
>> I know that, "[c]alling any of the R API from threaded code is ?for experts only? and strongly discouraged. Many functions in the R API modify internal R data structures and might corrupt these data structures if called simultaneously from multiple threads. Most R API functions can signal errors, which must only happen on the R main thread." (https://urldefense.proofpoint.com/v2/url?u=https-3A__cran.r-2Dproject.org_doc_manuals_r-2Drelease_R-2Dexts.html-23OpenMP-2Dsupport&d=DwIFaQ&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=d1r2raD4w0FF7spOVuz2IVEo0P_II3ZtSbw0TU2NmaE&s=JaadZR_m-QiJ3BQzzQ_fJPYt034tM5Ts6vKhdi6f__A&e=)
>> Let me start with my understanding of the related issues and possible solutions:
>> 1) R API functions are generally not thread-safe and hence one must ensure, e.g. by using mutexes, that no two threads use the R API simultaneously
>> 2) R uses longjmps on error and interrupts as well as for condition handling and it is undefined behaviour to do a longjmp from one thread to another; interrupts can be suspended before creating the threads by setting R_interrupts_suspended = TRUE; by wrapping the calls to functions from the R API with R_ToplevelExec(), longjmps across thread boundaries can be avoided; the only reason for R_ToplevelExec() itself to fail with an R-style error (longjmp) is a pointer protection stack overflow
>> 3) R_CheckStack() might be executed (indirectly), which will (probably) signal a stack overflow because it only works correctly when called form the main thread (see https://urldefense.proofpoint.com/v2/url?u=https-3A__cran.r-2Dproject.org_doc_manuals_r-2Drelease_R-2Dexts.html-23Threading-2Dissues&d=DwIFaQ&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=d1r2raD4w0FF7spOVuz2IVEo0P_II3ZtSbw0TU2NmaE&s=J_TMw2gu43dxB_EX2vHbtF4Zr4bIAFR8RSFzvbRV6jE&e=); in particular, any function that does allocations, e.g. via allocVector3() might end up calling it via GC -> finalizer -> ... -> eval; the only way around this problem which I could find is to adjust R_CStackLimit, which is outside of the official API; it can be set to -1 to disable the check or be changed to a value appropriate for the current thread
>> 4) R sets signal handlers for several signals and some of them make use of the R API; hence, issues 1) - 3) apply; signal masks can be used to block delivery of signals to secondary threads in general and to the main thread while other threads are using the R API
>> I basically have the following questions:
>> a) Is my understanding of the issues accurate?
>> b) Are there more things to consider when calling the R API from secondary threads?
>> c) Are the solutions proposed appropriate? Are there scenarios in which they will fail to solve the issue? Or might they even cause new problems?
>> d) Are there alternative/better solutions?
>> Any feedback on this is highly appreciated.
>> Below you can find a template which, combines the proposed solutions (and skips all non-illustrative checks of return values). Additionally, R_CheckUserInterrupt() is used in combination with R_UnwindProtect() to regularly check for interrupts from the main thread, while still being able to cleanly cancel the threads before fun_running_in_main_thread() is left via a longjmp. This is e.g. required if the secondary threads use memory which was allocated in fun_running_in_main_thread() using e.g. R_alloc().
>> Best regards,
>> Andreas Kersting
>> #include <Rinternals.h>
>> #include <pthread.h>
>> #include <signal.h>
>> #include <stdint.h>
>> extern uintptr_t R_CStackLimit;
>> extern int R_PPStackTop;
>> extern int R_PPStackSize;
>> #include <R_ext/libextern.h>
>> LibExtern Rboolean R_interrupts_suspended;
>> LibExtern int R_interrupts_pending;
>> extern void Rf_onintr(void);
>> // mutex for exclusive access to the R API:
>> static pthread_mutex_t r_api_mutex = PTHREAD_MUTEX_INITIALIZER;
>> // a wrapper arround R_CheckUserInterrupt() which can be passed to R_UnwindProtect():
>> SEXP check_interrupt(void *data) {
>>   R_CheckUserInterrupt();
>>   return R_NilValue;
>> }
>> // a wrapper arround Rf_onintr() which can be passed to R_UnwindProtect():
>> SEXP my_onintr(void *data) {
>>   Rf_onintr();
>>   return R_NilValue;
>> }
>> // function called by R_UnwindProtect() to cleanup on interrupt
>> void cleanfun(void *data, Rboolean jump) {
>>   if (jump) {
>>     // terminate threads cleanly ...
>>   }
>> }
>> void fun_calling_R_API(void *data) {
>>   // call some R API function, e.g. mkCharCE() ...
>> }
>> void *threaded_fun(void *td) {
>>   // ...
>>   pthread_mutex_lock(&r_api_mutex);
>>   // avoid false stack overflow error:
>>   intptr_t R_CStackLimit_old = R_CStackLimit;
>>   R_CStackLimit = -1;
>>   // R_ToplevelExec() below will call PROTECT 4x:
>>   if (R_PPStackTop > R_PPStackSize - 4) {
>>     // ppstack would overflow in R_ToplevelExec() -> handle this ...
>>   }
>>   // avoid longjmp to different thread:
>>   Rboolean ok = R_ToplevelExec(fun_calling_R_API, (void *) &some_data);
>>   // re-enable stack size checking:
>>   R_CStackLimit = R_CStackLimit_old;
>>   pthread_mutex_unlock(&r_api_mutex);
>>   if (!ok) {
>>     // handle error ...
>>   }
>>   // ...
>> }
>> SEXP fun_running_in_main_thread() {
>>   // ...
>>   /* create continuation token for R_UnwindProtect():
>>    *
>>    * do this explicitly here before the threads are created because this might
>>    * fail in allocation or with pointer protection stack overflow
>>    */
>>   SEXP cont = PROTECT(R_MakeUnwindCont());
>>   /* block all signals:
>>    *
>>    * do this before the threads are created such that they inherit the mask
>>    */
>>   sigset_t block_set, prev_mask;
>>   sigfillset(&block_set);
>>   pthread_sigmask(SIG_SETMASK, &block_set, &prev_mask);
>>   // suspend interrupts:
>>   Rboolean __oldsusp__ = R_interrupts_suspended;
>>   R_interrupts_suspended = TRUE;
>>   // create threads running threaded_fun() ...
>>   for(;;) {
>>     // timed blocking check if threads are done ...
>>     // unblock signals, check for interrupts and run cleanfun if there is one:
>>     pthread_mutex_lock(&r_api_mutex);
>>     pthread_sigmask(SIG_SETMASK, &prev_mask, NULL);
>>     R_interrupts_suspended = __oldsusp__;
>>     if (R_interrupts_pending && ! R_interrupts_suspended) {
>>       R_UnwindProtect(my_onintr, NULL, cleanfun, (void *) clean_data, cont);
>>     }
>>     R_UnwindProtect(check_interrupt, NULL, cleanfun, (void *) clean_data, cont);
>>     R_interrupts_suspended = TRUE;
>>     pthread_sigmask(SIG_SETMASK, &block_set, NULL);
>>     pthread_mutex_unlock(&r_api_mutex);
>>   }
>>   // now all threads are dead
>>   UNPROTECT(1);  // continuation token
>>   // unblock signals:
>>   pthread_sigmask(SIG_SETMASK, &prev_mask, NULL);
>>   // reset interrupt-suspension:
>>   R_interrupts_suspended = __oldsusp__;
>>   if (R_interrupts_pending && ! R_interrupts_suspended) {
>>     Rf_onintr();
>>   }
>>   // ...
>> }
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=d1r2raD4w0FF7spOVuz2IVEo0P_II3ZtSbw0TU2NmaE&s=Cv18jzHzhslwwzRcd4ztMRE_4xqphJz7bQ8lprgol6I&e=
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon May 20 16:52:12 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 20 May 2019 16:52:12 +0200
Subject: [Rd] Race condition on parallel package's mcexit and rmChild
In-Reply-To: <CAL109ePW+43Gxzd5KjQN1NOAnpnEUQErk-x=7-RaJx4b3xiH+w@mail.gmail.com>
References: <CAL109ePW+43Gxzd5KjQN1NOAnpnEUQErk-x=7-RaJx4b3xiH+w@mail.gmail.com>
Message-ID: <420ba039-99c1-6fc8-141a-6f5742eaa57a@gmail.com>

This issue has already been addressed in 76462 (R-devel) and also ported 
to R-patched. In fact rmChild() is used in mccollect(wait=FALSE).

Best
Tomas

On 5/19/19 11:39 AM, Sun Yijiang wrote:
> I've been hacking with parallel package for some time and built a
> parallel processing framework with it.  However, although very rarely,
> I did notice "ignoring SIGPIPE signal" error every now and then.
> After a deep dig into the source code, I think I found something worth
> noticing.
>
> In short, wring to pipe in the C function mc_exit(SEXP sRes) may cause
> a SIGPIPE.  Code from src/library/parallel/src/fork.c:
>
> SEXP NORET mc_exit(SEXP sRes)
> {
>      int res = asInteger(sRes);
> ... ...
>      if (master_fd != -1) { /* send 0 to signify that we're leaving */
>          size_t len = 0;
>          /* assign result for Fedora security settings */
>          ssize_t n = write(master_fd, &len, sizeof(len));
> ... ...
> }
>
> So a pipe write is made in mc_exit, and here's how this function is
> used in src/library/parallel/R/unix/mcfork.R:
>
> mcexit <- function(exit.code = 0L, send = NULL)
> {
>      if (!is.null(send)) try(sendMaster(send), silent = TRUE)
>      .Call(C_mc_exit, as.integer(exit.code))
> }
>
> Between sendMaster() and mc_exit() calls, which are made in the child
> process, the master process may call readChild() followed by
> rmChild().  rmChild closes the pipe on the master side, and if it's
> called before child calls mc_exit, a SIGPIPE will be raised when child
> tries to write to the pipe in mc_exit.
>
> rmChild is defined but not used in parallel package, so this problem
> won't surface in most cases.  However, it is a useful API and may be
> used by users like me for advanced control over child processes.  I
> hope we can discuss a solution on it.
>
> In fact, I don't see why we need to write to the pipe on child exit
> and how it has anything to do with "Fedora security settings" as
> suggested in the comments.  Removing it, IMHO, would be a good and
> clean way to solve this problem.
>
> Regards,
> Yijiang
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @uny|j|@ng @end|ng |rom gm@||@com  Mon May 20 17:22:30 2019
From: @uny|j|@ng @end|ng |rom gm@||@com (Sun Yijiang)
Date: Mon, 20 May 2019 23:22:30 +0800
Subject: [Rd] Race condition on parallel package's mcexit and rmChild
In-Reply-To: <420ba039-99c1-6fc8-141a-6f5742eaa57a@gmail.com>
References: <CAL109ePW+43Gxzd5KjQN1NOAnpnEUQErk-x=7-RaJx4b3xiH+w@mail.gmail.com>
 <420ba039-99c1-6fc8-141a-6f5742eaa57a@gmail.com>
Message-ID: <CAL109eMS2FoD18pO_oRSDURVe4D7ERZUM+=CO6M=e3TBhvsbrA@mail.gmail.com>

Have read the latest code, but I still don't understand why mc_exit
needs to write zero on exit.  If a child closes its pipe, parent will
know that on next select.

Best,
Yijiang

Tomas Kalibera <tomas.kalibera at gmail.com> ?2019?5?20??? ??10:52???
>
> This issue has already been addressed in 76462 (R-devel) and also ported
> to R-patched. In fact rmChild() is used in mccollect(wait=FALSE).
>
> Best
> Tomas
>
> On 5/19/19 11:39 AM, Sun Yijiang wrote:
> > I've been hacking with parallel package for some time and built a
> > parallel processing framework with it.  However, although very rarely,
> > I did notice "ignoring SIGPIPE signal" error every now and then.
> > After a deep dig into the source code, I think I found something worth
> > noticing.
> >
> > In short, wring to pipe in the C function mc_exit(SEXP sRes) may cause
> > a SIGPIPE.  Code from src/library/parallel/src/fork.c:
> >
> > SEXP NORET mc_exit(SEXP sRes)
> > {
> >      int res = asInteger(sRes);
> > ... ...
> >      if (master_fd != -1) { /* send 0 to signify that we're leaving */
> >          size_t len = 0;
> >          /* assign result for Fedora security settings */
> >          ssize_t n = write(master_fd, &len, sizeof(len));
> > ... ...
> > }
> >
> > So a pipe write is made in mc_exit, and here's how this function is
> > used in src/library/parallel/R/unix/mcfork.R:
> >
> > mcexit <- function(exit.code = 0L, send = NULL)
> > {
> >      if (!is.null(send)) try(sendMaster(send), silent = TRUE)
> >      .Call(C_mc_exit, as.integer(exit.code))
> > }
> >
> > Between sendMaster() and mc_exit() calls, which are made in the child
> > process, the master process may call readChild() followed by
> > rmChild().  rmChild closes the pipe on the master side, and if it's
> > called before child calls mc_exit, a SIGPIPE will be raised when child
> > tries to write to the pipe in mc_exit.
> >
> > rmChild is defined but not used in parallel package, so this problem
> > won't surface in most cases.  However, it is a useful API and may be
> > used by users like me for advanced control over child processes.  I
> > hope we can discuss a solution on it.
> >
> > In fact, I don't see why we need to write to the pipe on child exit
> > and how it has anything to do with "Fedora security settings" as
> > suggested in the comments.  Removing it, IMHO, would be a good and
> > clean way to solve this problem.
> >
> > Regards,
> > Yijiang
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From @|mon@urb@nek @end|ng |rom R-project@org  Mon May 20 17:36:07 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 20 May 2019 11:36:07 -0400
Subject: [Rd] Race condition on parallel package's mcexit and rmChild
In-Reply-To: <CAL109eMS2FoD18pO_oRSDURVe4D7ERZUM+=CO6M=e3TBhvsbrA@mail.gmail.com>
References: <CAL109ePW+43Gxzd5KjQN1NOAnpnEUQErk-x=7-RaJx4b3xiH+w@mail.gmail.com>
 <420ba039-99c1-6fc8-141a-6f5742eaa57a@gmail.com>
 <CAL109eMS2FoD18pO_oRSDURVe4D7ERZUM+=CO6M=e3TBhvsbrA@mail.gmail.com>
Message-ID: <754227F6-ADE5-4CB7-A096-0BBED4883D28@R-project.org>

Because that's the communication protocol between the parent and child. There is a difference between unsolicited exit and empty result exit.

Cheers,
Simon


> On May 20, 2019, at 11:22 AM, Sun Yijiang <sunyijiang at gmail.com> wrote:
> 
> Have read the latest code, but I still don't understand why mc_exit
> needs to write zero on exit.  If a child closes its pipe, parent will
> know that on next select.
> 
> Best,
> Yijiang
> 
> Tomas Kalibera <tomas.kalibera at gmail.com> ?2019?5?20??? ??10:52???
>> 
>> This issue has already been addressed in 76462 (R-devel) and also ported
>> to R-patched. In fact rmChild() is used in mccollect(wait=FALSE).
>> 
>> Best
>> Tomas
>> 
>> On 5/19/19 11:39 AM, Sun Yijiang wrote:
>>> I've been hacking with parallel package for some time and built a
>>> parallel processing framework with it.  However, although very rarely,
>>> I did notice "ignoring SIGPIPE signal" error every now and then.
>>> After a deep dig into the source code, I think I found something worth
>>> noticing.
>>> 
>>> In short, wring to pipe in the C function mc_exit(SEXP sRes) may cause
>>> a SIGPIPE.  Code from src/library/parallel/src/fork.c:
>>> 
>>> SEXP NORET mc_exit(SEXP sRes)
>>> {
>>>     int res = asInteger(sRes);
>>> ... ...
>>>     if (master_fd != -1) { /* send 0 to signify that we're leaving */
>>>         size_t len = 0;
>>>         /* assign result for Fedora security settings */
>>>         ssize_t n = write(master_fd, &len, sizeof(len));
>>> ... ...
>>> }
>>> 
>>> So a pipe write is made in mc_exit, and here's how this function is
>>> used in src/library/parallel/R/unix/mcfork.R:
>>> 
>>> mcexit <- function(exit.code = 0L, send = NULL)
>>> {
>>>     if (!is.null(send)) try(sendMaster(send), silent = TRUE)
>>>     .Call(C_mc_exit, as.integer(exit.code))
>>> }
>>> 
>>> Between sendMaster() and mc_exit() calls, which are made in the child
>>> process, the master process may call readChild() followed by
>>> rmChild().  rmChild closes the pipe on the master side, and if it's
>>> called before child calls mc_exit, a SIGPIPE will be raised when child
>>> tries to write to the pipe in mc_exit.
>>> 
>>> rmChild is defined but not used in parallel package, so this problem
>>> won't surface in most cases.  However, it is a useful API and may be
>>> used by users like me for advanced control over child processes.  I
>>> hope we can discuss a solution on it.
>>> 
>>> In fact, I don't see why we need to write to the pipe on child exit
>>> and how it has anything to do with "Fedora security settings" as
>>> suggested in the comments.  Removing it, IMHO, would be a good and
>>> clean way to solve this problem.
>>> 
>>> Regards,
>>> Yijiang
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From |uke-t|erney @end|ng |rom u|ow@@edu  Mon May 20 19:29:50 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Mon, 20 May 2019 17:29:50 +0000
Subject: [Rd] [External] most robust way to call R API functions from a
 secondary thread
In-Reply-To: <E1hSIAJ-0005FM-8P@rmmprod07.runbox>
References: <E1hSIAJ-0005FM-8P@rmmprod07.runbox>
Message-ID: <alpine.DEB.2.21.1905201213210.2805@luke-Latitude-7480>

Your analysis looks pretty complete to me and your solutions seems
plausible.  That said, I don't know that I would have the level of
confidence yet that we haven't missed an important point that I would
want before going down this route.

Losing stack checking is risky; it might be eventually possible to
provide some support for this to be handled via a thread-local
variable. Ensuring that R_ToplevelExec can't jump before entering the
body function would be a good idea; if you want to propose a patch we
can have a look.

Best,

luke

On Sun, 19 May 2019, Andreas Kersting wrote:

> Hi,
>
> As the subject suggests, I am looking for the most robust way to call an (arbitrary) function from the R API from another but the main POSIX thread in a package's code.
>
> I know that, "[c]alling any of the R API from threaded code is ?for experts only? and strongly discouraged. Many functions in the R API modify internal R data structures and might corrupt these data structures if called simultaneously from multiple threads. Most R API functions can signal errors, which must only happen on the R main thread." (https://cran.r-project.org/doc/manuals/r-release/R-exts.html#OpenMP-support)
>
> Let me start with my understanding of the related issues and possible solutions:
>
> 1) R API functions are generally not thread-safe and hence one must ensure, e.g. by using mutexes, that no two threads use the R API simultaneously
>
> 2) R uses longjmps on error and interrupts as well as for condition handling and it is undefined behaviour to do a longjmp from one thread to another; interrupts can be suspended before creating the threads by setting R_interrupts_suspended = TRUE; by wrapping the calls to functions from the R API with R_ToplevelExec(), longjmps across thread boundaries can be avoided; the only reason for R_ToplevelExec() itself to fail with an R-style error (longjmp) is a pointer protection stack overflow
>
> 3) R_CheckStack() might be executed (indirectly), which will (probably) signal a stack overflow because it only works correctly when called form the main thread (see https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Threading-issues); in particular, any function that does allocations, e.g. via allocVector3() might end up calling it via GC -> finalizer -> ... -> eval; the only way around this problem which I could find is to adjust R_CStackLimit, which is outside of the official API; it can be set to -1 to disable the check or be changed to a value appropriate for the current thread
>
> 4) R sets signal handlers for several signals and some of them make use of the R API; hence, issues 1) - 3) apply; signal masks can be used to block delivery of signals to secondary threads in general and to the main thread while other threads are using the R API
>
>
> I basically have the following questions:
>
> a) Is my understanding of the issues accurate?
> b) Are there more things to consider when calling the R API from secondary threads?
> c) Are the solutions proposed appropriate? Are there scenarios in which they will fail to solve the issue? Or might they even cause new problems?
> d) Are there alternative/better solutions?
>
> Any feedback on this is highly appreciated.
>
> Below you can find a template which, combines the proposed solutions (and skips all non-illustrative checks of return values). Additionally, R_CheckUserInterrupt() is used in combination with R_UnwindProtect() to regularly check for interrupts from the main thread, while still being able to cleanly cancel the threads before fun_running_in_main_thread() is left via a longjmp. This is e.g. required if the secondary threads use memory which was allocated in fun_running_in_main_thread() using e.g. R_alloc().
>
> Best regards,
> Andreas Kersting
>
>
>
> #include <Rinternals.h>
> #include <pthread.h>
> #include <signal.h>
> #include <stdint.h>
>
> extern uintptr_t R_CStackLimit;
> extern int R_PPStackTop;
> extern int R_PPStackSize;
>
> #include <R_ext/libextern.h>
> LibExtern Rboolean R_interrupts_suspended;
> LibExtern int R_interrupts_pending;
> extern void Rf_onintr(void);
>
> // mutex for exclusive access to the R API:
> static pthread_mutex_t r_api_mutex = PTHREAD_MUTEX_INITIALIZER;
>
> // a wrapper arround R_CheckUserInterrupt() which can be passed to R_UnwindProtect():
> SEXP check_interrupt(void *data) {
>  R_CheckUserInterrupt();
>  return R_NilValue;
> }
>
> // a wrapper arround Rf_onintr() which can be passed to R_UnwindProtect():
> SEXP my_onintr(void *data) {
>  Rf_onintr();
>  return R_NilValue;
> }
>
> // function called by R_UnwindProtect() to cleanup on interrupt
> void cleanfun(void *data, Rboolean jump) {
>  if (jump) {
>    // terminate threads cleanly ...
>  }
> }
>
> void fun_calling_R_API(void *data) {
>  // call some R API function, e.g. mkCharCE() ...
> }
>
> void *threaded_fun(void *td) {
>
>  // ...
>
>  pthread_mutex_lock(&r_api_mutex);
>
>  // avoid false stack overflow error:
>  intptr_t R_CStackLimit_old = R_CStackLimit;
>  R_CStackLimit = -1;
>
>
>  // R_ToplevelExec() below will call PROTECT 4x:
>  if (R_PPStackTop > R_PPStackSize - 4) {
>    // ppstack would overflow in R_ToplevelExec() -> handle this ...
>  }
>
>  // avoid longjmp to different thread:
>  Rboolean ok = R_ToplevelExec(fun_calling_R_API, (void *) &some_data);
>
>  // re-enable stack size checking:
>  R_CStackLimit = R_CStackLimit_old;
>  pthread_mutex_unlock(&r_api_mutex);
>
>  if (!ok) {
>    // handle error ...
>  }
>
>  // ...
> }
>
> SEXP fun_running_in_main_thread() {
>
>  // ...
>
>  /* create continuation token for R_UnwindProtect():
>   *
>   * do this explicitly here before the threads are created because this might
>   * fail in allocation or with pointer protection stack overflow
>   */
>  SEXP cont = PROTECT(R_MakeUnwindCont());
>
>  /* block all signals:
>   *
>   * do this before the threads are created such that they inherit the mask
>   */
>  sigset_t block_set, prev_mask;
>  sigfillset(&block_set);
>  pthread_sigmask(SIG_SETMASK, &block_set, &prev_mask);
>
>  // suspend interrupts:
>  Rboolean __oldsusp__ = R_interrupts_suspended;
>  R_interrupts_suspended = TRUE;
>
>  // create threads running threaded_fun() ...
>
>  for(;;) {
>    // timed blocking check if threads are done ...
>
>    // unblock signals, check for interrupts and run cleanfun if there is one:
>    pthread_mutex_lock(&r_api_mutex);
>    pthread_sigmask(SIG_SETMASK, &prev_mask, NULL);
>
>    R_interrupts_suspended = __oldsusp__;
>    if (R_interrupts_pending && ! R_interrupts_suspended) {
>      R_UnwindProtect(my_onintr, NULL, cleanfun, (void *) clean_data, cont);
>    }
>
>    R_UnwindProtect(check_interrupt, NULL, cleanfun, (void *) clean_data, cont);
>
>    R_interrupts_suspended = TRUE;
>
>    pthread_sigmask(SIG_SETMASK, &block_set, NULL);
>    pthread_mutex_unlock(&r_api_mutex);
>  }
>
>  // now all threads are dead
>
>  UNPROTECT(1);  // continuation token
>
>  // unblock signals:
>  pthread_sigmask(SIG_SETMASK, &prev_mask, NULL);
>
>  // reset interrupt-suspension:
>  R_interrupts_suspended = __oldsusp__;
>  if (R_interrupts_pending && ! R_interrupts_suspended) {
>    Rf_onintr();
>  }
>
>  // ...
> }
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue May 21 01:48:08 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Mon, 20 May 2019 16:48:08 -0700
Subject: [Rd] WISH: Built-in R session-specific universally unique
 identifier (UUID)
Message-ID: <CAFDcVCSYc5N6Kq7238xRHqdFEk+Es9G-_Go4M6NFM98zU6KtYA@mail.gmail.com>

# Proposal

Provide a built-in mechanism for obtaining an identifier for the
current R session, e.g.

> Sys.info()[["session_uuid"]]
[1] "4258db4d-d4fb-46b3-a214-8c762b99a443"

The identifier should be "unique" in the sense that the probability
for two R sessions(*) having the same identifier should be extremely
small.  There's no need for reproducibility, i.e. the algorithm for
producing the identifier may be changed at any time.

(*) Two R sessions running at different times (seconds, minutes, days,
years, ...) or on different machines (locally or anywhere in the
world).


# Use cases

In parallel-processing workflows, R objects may be "exported"
(serialized) to background R processes ("workers") for further
processing.  In other workflows, objects may be saved to file to be
reloaded in a future R session.  However, certain types of objects in
R maybe only be relevant, or valid, in the R session that created
them.  Attempts to use them in other R processes may give an obscure
error or in the worst case produce garbage results.

Having an identifier that is unique to each R process will make it
possible to detect when an object is used in the wrong context.  This
can be done by attaching the session identifier to the object.  For
example,

obj <- 42L
attr(obj, "owner") <- Sys.info()[["session_uuid"]]

With this, it is easy to validate the "ownership" later;

stopifnot(identical(attr(obj, "owner"), Sys.info()[["session_uuid"]]))

I argue that such an identifier should be part of base R for easy
access and avoid each developer having to roll their own.


# Possible implementation

One proposal would be to bring in Simon Urbanek's 'uuid' package
(https://cran.r-project.org/package=uuid) into base R.  This package
provides:

> uuid::UUIDgenerate()
[1] "b7de6182-c9c1-47a8-b5cd-e5c8307a8efb"

based on Theodore Ts'o's libuuid
(https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/).  From
'man uuid_generate':

"The uuid_generate function creates a new universally unique
identifier (UUID). The uuid will be generated based on high-quality
randomness from /dev/urandom, if available. If it is not available,
then uuid_generate will use an alternative algorithm which uses the
current time, the local ethernet MAC address (if available), and
random data generated using a pseudo-random generator.
[...]
The UUID is 16 bytes (128 bits) long, which gives approximately
3.4x10^38 unique values (there are approximately 10^80 elementary
particles in the universe according to Carl Sagan's Cosmos). The new
UUID can reasonably be considered unique among all UUIDs created on
the local system, and among UUIDs created on other systems in the past
and in the future."

An alternative, that does not require adding a dependency on the
libuuid library, would be to roll a poor man's version based on a set
of semi-unique attributes, e.g.

make_id <- function(...) {
  args <- list(...)
  saveRDS(args, file = f <- tempfile())
  on.exit(file.remove(f))
  unname(tools::md5sum(f))
}

session_id <- local({
  id <- NULL
  function() {
    if (is.null(id)) {
      id <<- make_id(
        info    = Sys.info(),
        pid     = Sys.getpid(),
        tempdir = tempdir(),
        time    = Sys.time(),
        random  = sample.int(.Machine$integer.max, size = 1L)
      )
    }
    id
  }
})

Example:

> session_id()
[1] "8d00b17384e69e7c9ecee47e0426b2a5"

> session_id()
[1] "8d00b17384e69e7c9ecee47e0426b2a5"

/Henrik

PS. Having a built-in make_id() function would be handy too, e.g. when
creating object-specific identifiers for other purposes.

PPS. It would be neat if there was an object, or connection, interface
for tools::md5sum(), which currently only operates on files sitting on
the file system. The digest package provides this functionality.


From wdun|@p @end|ng |rom t|bco@com  Tue May 21 02:42:12 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Mon, 20 May 2019 17:42:12 -0700
Subject: [Rd] WISH: Built-in R session-specific universally unique
 identifier (UUID)
In-Reply-To: <CAFDcVCSYc5N6Kq7238xRHqdFEk+Es9G-_Go4M6NFM98zU6KtYA@mail.gmail.com>
References: <CAFDcVCSYc5N6Kq7238xRHqdFEk+Es9G-_Go4M6NFM98zU6KtYA@mail.gmail.com>
Message-ID: <CAF8bMcZdE9Sie-iO94gCyA9KTBLbrM7DcQKUrgAHot6eQmOQtg@mail.gmail.com>

I think a machine-specific input, like the MAC address, to the UUID is
essential.  S+ used to make a seed for the random number generator based on
the the current time and process ID.  A customer complained that all
machines in his cluster generated the same random number stream.  The
machines were rebooted each night, simultaneously, and S+ was started
during the boot process so times and process ids were identical, hence the
seeds were identical.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Mon, May 20, 2019 at 4:48 PM Henrik Bengtsson <henrik.bengtsson at gmail.com>
wrote:

> # Proposal
>
> Provide a built-in mechanism for obtaining an identifier for the
> current R session, e.g.
>
> > Sys.info()[["session_uuid"]]
> [1] "4258db4d-d4fb-46b3-a214-8c762b99a443"
>
> The identifier should be "unique" in the sense that the probability
> for two R sessions(*) having the same identifier should be extremely
> small.  There's no need for reproducibility, i.e. the algorithm for
> producing the identifier may be changed at any time.
>
> (*) Two R sessions running at different times (seconds, minutes, days,
> years, ...) or on different machines (locally or anywhere in the
> world).
>
>
> # Use cases
>
> In parallel-processing workflows, R objects may be "exported"
> (serialized) to background R processes ("workers") for further
> processing.  In other workflows, objects may be saved to file to be
> reloaded in a future R session.  However, certain types of objects in
> R maybe only be relevant, or valid, in the R session that created
> them.  Attempts to use them in other R processes may give an obscure
> error or in the worst case produce garbage results.
>
> Having an identifier that is unique to each R process will make it
> possible to detect when an object is used in the wrong context.  This
> can be done by attaching the session identifier to the object.  For
> example,
>
> obj <- 42L
> attr(obj, "owner") <- Sys.info()[["session_uuid"]]
>
> With this, it is easy to validate the "ownership" later;
>
> stopifnot(identical(attr(obj, "owner"), Sys.info()[["session_uuid"]]))
>
> I argue that such an identifier should be part of base R for easy
> access and avoid each developer having to roll their own.
>
>
> # Possible implementation
>
> One proposal would be to bring in Simon Urbanek's 'uuid' package
> (https://cran.r-project.org/package=uuid) into base R.  This package
> provides:
>
> > uuid::UUIDgenerate()
> [1] "b7de6182-c9c1-47a8-b5cd-e5c8307a8efb"
>
> based on Theodore Ts'o's libuuid
> (https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/).  From
> 'man uuid_generate':
>
> "The uuid_generate function creates a new universally unique
> identifier (UUID). The uuid will be generated based on high-quality
> randomness from /dev/urandom, if available. If it is not available,
> then uuid_generate will use an alternative algorithm which uses the
> current time, the local ethernet MAC address (if available), and
> random data generated using a pseudo-random generator.
> [...]
> The UUID is 16 bytes (128 bits) long, which gives approximately
> 3.4x10^38 unique values (there are approximately 10^80 elementary
> particles in the universe according to Carl Sagan's Cosmos). The new
> UUID can reasonably be considered unique among all UUIDs created on
> the local system, and among UUIDs created on other systems in the past
> and in the future."
>
> An alternative, that does not require adding a dependency on the
> libuuid library, would be to roll a poor man's version based on a set
> of semi-unique attributes, e.g.
>
> make_id <- function(...) {
>   args <- list(...)
>   saveRDS(args, file = f <- tempfile())
>   on.exit(file.remove(f))
>   unname(tools::md5sum(f))
> }
>
> session_id <- local({
>   id <- NULL
>   function() {
>     if (is.null(id)) {
>       id <<- make_id(
>         info    = Sys.info(),
>         pid     = Sys.getpid(),
>         tempdir = tempdir(),
>         time    = Sys.time(),
>         random  = sample.int(.Machine$integer.max, size = 1L)
>       )
>     }
>     id
>   }
> })
>
> Example:
>
> > session_id()
> [1] "8d00b17384e69e7c9ecee47e0426b2a5"
>
> > session_id()
> [1] "8d00b17384e69e7c9ecee47e0426b2a5"
>
> /Henrik
>
> PS. Having a built-in make_id() function would be handy too, e.g. when
> creating object-specific identifiers for other purposes.
>
> PPS. It would be neat if there was an object, or connection, interface
> for tools::md5sum(), which currently only operates on files sitting on
> the file system. The digest package provides this functionality.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From jo@h@m@u|r|ch @end|ng |rom gm@||@com  Tue May 21 13:59:15 2019
From: jo@h@m@u|r|ch @end|ng |rom gm@||@com (Joshua Ulrich)
Date: Tue, 21 May 2019 06:59:15 -0500
Subject: [Rd] anyNA() performance on vectors of POSIXct
In-Reply-To: <CACVELJ3k3zpUOQ22k539ynFpqrePbuNa+EAxiKcK9WxkQHMo0g@mail.gmail.com>
References: <CACVELJ3k3zpUOQ22k539ynFpqrePbuNa+EAxiKcK9WxkQHMo0g@mail.gmail.com>
Message-ID: <CAPPM_gSi3hNJL=Ym9py+0aYUnUCGx8KRH+Pk=rdO8aVxzX6tmw@mail.gmail.com>

On Wed, May 1, 2019 at 7:45 AM Harvey Smith <harvey13131 at gmail.com> wrote:
>
> Inside of the anyNA() function, it will use the legacy any(is.na()) code if
> x is an OBJECT().  If x is a vector of POSIXct, it will be an OBJECT(), but
> it is also TYPEOF(x) == REALSXP.  Therefore, it will skip the faster
> ITERATE_BY_REGION, which is typically 5x faster in my testing.
>
> Is the OBJECT() condition really necessary, or could it be moved after the
> switch() for the individual TYPEOF(x) ITERATE_BY_REGION calls?
>
> # script to demonstrate performance difference if x is an OBJECT or not by
> using unclass()
> x.posixct = Sys.time() + 1:1e6
> microbenchmark::microbenchmark(
>   any(is.na( x.posixct )),
>   anyNA( x.posixct ),
>   anyNA( unclass(x.posixct) ),
>   unit='ms')
>
>
>
> static Rboolean anyNA(SEXP call, SEXP op, SEXP args, SEXP env)
> {
>   SEXP x = CAR(args);
>   SEXPTYPE xT = TYPEOF(x);
>   Rboolean isList =  (xT == VECSXP || xT == LISTSXP), recursive = FALSE;
>
>   if (isList && length(args) > 1) recursive = asLogical(CADR(args));
>   *if (OBJECT(x) || (isList && !recursive)) {*
>     SEXP e0 = PROTECT(lang2(install("is.na"), x));
>     SEXP e = PROTECT(lang2(install("any"), e0));
>     SEXP res = PROTECT(eval(e, env));
>     int ans = asLogical(res);
>     UNPROTECT(3);
>     return ans == 1; // so NA answer is false.
>   }
>
>   R_xlen_t i, n = xlength(x);
>   switch (xT) {
>     case REALSXP:
>     {
>       if(REAL_NO_NA(x))
>         return FALSE;
>       ITERATE_BY_REGION(x, xD, i, nbatch, double, REAL, {
>         for (int k = 0; k < nbatch; k++)
>           if (ISNAN(xD[k]))
>             return TRUE;
>       });
>       break;
>     }
>

I'm interested in this as well, because it causes performance
degradation in xts subsetting:
https://github.com/joshuaulrich/xts/issues/296

Would it be possible to special-case POSIXct, and perhaps other types
defined in base+recommended packages?

Best,
Josh

-- 
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com
R/Finance 2019 | www.rinfinance.com


From m@e||e@@@|mon @end|ng |rom y@hoo@@e  Tue May 21 14:35:44 2019
From: m@e||e@@@|mon @end|ng |rom y@hoo@@e (=?UTF-8?Q?Ma=C3=ABlle_SALMON?=)
Date: Tue, 21 May 2019 12:35:44 +0000 (UTC)
Subject: [Rd] Patch to replace "his" in Writing R Extensions
References: <696282792.6042907.1558442144156.ref@mail.yahoo.com>
Message-ID: <696282792.6042907.1558442144156@mail.yahoo.com>

Dear R-devel team,

Many thanks for the great resource that is "Writing R Extensions"! 

I noticed two occurrences of "his", one to refer to the R package user, another to refer to the R package author. Folks in these two groups are not all men, so I suggest changing the word to "their" to make it gender-neutral. Attached is a patch for your consideration. 

Thanks for your time, best regards, 

Ma?lle.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: patch.diff
Type: text/x-patch
Size: 1306 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190521/9d3f60c0/attachment.bin>

From |uke-t|erney @end|ng |rom u|ow@@edu  Tue May 21 15:43:36 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Tue, 21 May 2019 13:43:36 +0000
Subject: [Rd] [External]  Patch to replace "his" in Writing R Extensions
In-Reply-To: <696282792.6042907.1558442144156@mail.yahoo.com>
References: <696282792.6042907.1558442144156.ref@mail.yahoo.com>
 <696282792.6042907.1558442144156@mail.yahoo.com>
Message-ID: <alpine.DEB.2.21.1905210842290.2805@luke-Latitude-7480>

Thanks. Addressed in r76559 (trunk) and r76560 (R-3-6-branch).

Best,

luke

On Tue, 21 May 2019, Ma?lle SALMON via R-devel wrote:

> Dear R-devel team,
>
> Many thanks for the great resource that is "Writing R Extensions"!
>
> I noticed two occurrences of "his", one to refer to the R package user, another to refer to the R package author. Folks in these two groups are not all men, so I suggest changing the word to "their" to make it gender-neutral. Attached is a patch for your consideration.
>
> Thanks for your time, best regards,
>
> Ma?lle.

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue May 21 18:04:43 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 21 May 2019 18:04:43 +0200
Subject: [Rd] anyNA() performance on vectors of POSIXct
In-Reply-To: <CACVELJ3k3zpUOQ22k539ynFpqrePbuNa+EAxiKcK9WxkQHMo0g@mail.gmail.com>
References: <CACVELJ3k3zpUOQ22k539ynFpqrePbuNa+EAxiKcK9WxkQHMo0g@mail.gmail.com>
Message-ID: <23780.8603.94402.482745@stat.math.ethz.ch>

>>>>> Harvey Smith 
>>>>>     on Wed, 1 May 2019 03:20:55 -0400 writes:

    > Inside of the anyNA() function, it will use the legacy any(is.na()) code if
    > x is an OBJECT().  If x is a vector of POSIXct, it will be an OBJECT(), but
    > it is also TYPEOF(x) == REALSXP.  Therefore, it will skip the faster
    > ITERATE_BY_REGION, which is typically 5x faster in my testing.

    > Is the OBJECT() condition really necessary, or could it be moved after the
    > switch() for the individual TYPEOF(x) ITERATE_BY_REGION calls?

 "necessary ?" :  yes, in the following sense :

When it was introduced, the idea of anyNA(.) has been that it
should be equivalent (but often faster) than  any(is.na(.)).
As anyNA() was only introduced quite recently (*)
and many (S3 and S4) classes have had  is.na() methods defined
for them but -- initially at least -- not an anyNA().

So to ensure  the equivalence    anyNA(x)  ===   any(is.na(x))
for "all" R objects 'x', that OBJECT(.) condition had been
important and necessary.

Still, being the person who had added  anyNA() to R,
I'm naturally sympathetic to have it faster in cases such as
"Date" or "POSIXct" objects.

I'd find it ugly to test for these classes specifically in the C code (via
the equivalent of  inherits(., "POSIXct")
  {{ *NOT* via the really wrong  class(.)[[1]] == "POSIXct"
      that I see in some "experts" R code, because that fails
      for all class extensions ! }}
but that may still be an option;

Yet alternatively, one *could* consider changing the API and
declare that for atomic types with a class {i.e. OBJECT(.)}, and
*if* there is no anyNA() method, anyNA() will use the "atomic"
fast method, instead of using any(is.na(.)).

This may break existing code in packages, but the maintainers of
that code could solve the problems by providing  anyNA(.)
methods for their objects.

Other opinions / ideas ?

Martin Maechler
ETH Zurich / R Core Team

    
--
*) in Spring 2013, but too late for R 3.0.0;
   "recently", considering R's history starting with S in the early 1980's


> # script to demonstrate performance difference if x is an OBJECT or not by
> using unclass()
> x.posixct = Sys.time() + 1:1e6
> microbenchmark::microbenchmark(
>   any(is.na( x.posixct )),
>   anyNA( x.posixct ),
>   anyNA( unclass(x.posixct) ),
>   unit='ms')
> 
> 
> 
> static Rboolean anyNA(SEXP call, SEXP op, SEXP args, SEXP env)
> {
>   SEXP x = CAR(args);
>   SEXPTYPE xT = TYPEOF(x);
>   Rboolean isList =  (xT == VECSXP || xT == LISTSXP), recursive = FALSE;
> 
>   if (isList && length(args) > 1) recursive = asLogical(CADR(args));
>   *if (OBJECT(x) || (isList && !recursive)) {*
>     SEXP e0 = PROTECT(lang2(install("is.na"), x));
>     SEXP e = PROTECT(lang2(install("any"), e0));
>     SEXP res = PROTECT(eval(e, env));
>     int ans = asLogical(res);
>     UNPROTECT(3);
>     return ans == 1; // so NA answer is false.
>   }
> 
>   R_xlen_t i, n = xlength(x);
>   switch (xT) {
>     case REALSXP:
>     {
>       if(REAL_NO_NA(x))
>         return FALSE;
>       ITERATE_BY_REGION(x, xD, i, nbatch, double, REAL, {
>         for (int k = 0; k < nbatch; k++)
>           if (ISNAN(xD[k]))
>             return TRUE;
>       });
>       break;
>     }
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue May 21 18:28:58 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 21 May 2019 18:28:58 +0200
Subject: [Rd] print.<strorageMode>() not called when autoprinting
In-Reply-To: <CAF8bMcatAtZ_LPWZk3QxVQXS5qHA14_j=_tBvGbbH+m0kBYnAQ@mail.gmail.com>
References: <CAF8bMcatAtZ_LPWZk3QxVQXS5qHA14_j=_tBvGbbH+m0kBYnAQ@mail.gmail.com>
Message-ID: <23780.10058.726995.538115@stat.math.ethz.ch>

>>>>> William Dunlap via R-devel 
>>>>>     on Thu, 16 May 2019 11:56:45 -0700 writes:

    > In R-3.6.0 autoprinting was changed so that print methods for the storage
    > modes are not called when there is no explicit class attribute.   E.g.,

    > % R-3.6.0 --vanilla --quiet
    >> print.function <- function(x, ...) { cat("Function with argument list ");
    > cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
    >> f <- function(x, ...) { sum( x * seq_along(x) ) }
    >> f
    > function(x, ...) { sum( x * seq_along(x) ) }
    >> print(f)
    > Function with argument list function (x, ...)

    > Previous to R-3.6.0 autoprinting did call such methods
    > % R-3.5.3 --vanilla --quiet
    >> print.function <- function(x, ...) { cat("Function with argument list ");
    > cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
    >> f <- function(x, ...) { sum( x * seq_along(x) ) }
    >> f
    > Function with argument list function (x, ...)
    >> print(f)
    > Function with argument list function (x, ...)

    > Was this intentional?

No, it was not.  ... and I've been the one committing the wrong change.

... Related to the NEWS entries which start

     "Changes in print.*() ...."

Thank you Bill, for reporting....

It's amazing this has not been detected earlier by anybody.

I think it is *only* for functions, not general
print.<storagemode>() as you were suggesting - right?

Martin


From wdun|@p @end|ng |rom t|bco@com  Tue May 21 19:38:38 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Tue, 21 May 2019 10:38:38 -0700
Subject: [Rd] print.<strorageMode>() not called when autoprinting
In-Reply-To: <23780.10058.726995.538115@stat.math.ethz.ch>
References: <CAF8bMcatAtZ_LPWZk3QxVQXS5qHA14_j=_tBvGbbH+m0kBYnAQ@mail.gmail.com>
 <23780.10058.726995.538115@stat.math.ethz.ch>
Message-ID: <CAF8bMcYeVioX6-vxz+-P6SsFHyoU6QSBD55_veNcvXpw7wEdyA@mail.gmail.com>

It also is a problem with storage.modes "integer" and "complex":

3.6.0> print.integer <- function(x,...) "integer vector"
                3.6.0> 1:10
 [1]  1  2  3  4  5  6  7  8  9 10
3.6.0> print(1:10)
[1] "integer vector"
3.6.0>
3.6.0> print.complex <- function(x, ...) "complex vector"
3.6.0> 1+2i
[1] 1+2i
3.6.0> print(1+2i)
[1] "complex vector"

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Tue, May 21, 2019 at 9:31 AM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> William Dunlap via R-devel
> >>>>>     on Thu, 16 May 2019 11:56:45 -0700 writes:
>
>     > In R-3.6.0 autoprinting was changed so that print methods for the
> storage
>     > modes are not called when there is no explicit class attribute.
>  E.g.,
>
>     > % R-3.6.0 --vanilla --quiet
>     >> print.function <- function(x, ...) { cat("Function with argument
> list ");
>     > cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
>     >> f <- function(x, ...) { sum( x * seq_along(x) ) }
>     >> f
>     > function(x, ...) { sum( x * seq_along(x) ) }
>     >> print(f)
>     > Function with argument list function (x, ...)
>
>     > Previous to R-3.6.0 autoprinting did call such methods
>     > % R-3.5.3 --vanilla --quiet
>     >> print.function <- function(x, ...) { cat("Function with argument
> list ");
>     > cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
>     >> f <- function(x, ...) { sum( x * seq_along(x) ) }
>     >> f
>     > Function with argument list function (x, ...)
>     >> print(f)
>     > Function with argument list function (x, ...)
>
>     > Was this intentional?
>
> No, it was not.  ... and I've been the one committing the wrong change.
>
> ... Related to the NEWS entries which start
>
>      "Changes in print.*() ...."
>
> Thank you Bill, for reporting....
>
> It's amazing this has not been detected earlier by anybody.
>
> I think it is *only* for functions, not general
> print.<storagemode>() as you were suggesting - right?
>
> Martin
>

	[[alternative HTML version deleted]]


From ||one| @end|ng |rom r@tud|o@com  Tue May 21 19:50:13 2019
From: ||one| @end|ng |rom r@tud|o@com (Lionel Henry)
Date: Tue, 21 May 2019 13:50:13 -0400
Subject: [Rd] print.<strorageMode>() not called when autoprinting
In-Reply-To: <CAF8bMcYeVioX6-vxz+-P6SsFHyoU6QSBD55_veNcvXpw7wEdyA@mail.gmail.com>
References: <CAF8bMcatAtZ_LPWZk3QxVQXS5qHA14_j=_tBvGbbH+m0kBYnAQ@mail.gmail.com>
 <23780.10058.726995.538115@stat.math.ethz.ch>
 <CAF8bMcYeVioX6-vxz+-P6SsFHyoU6QSBD55_veNcvXpw7wEdyA@mail.gmail.com>
Message-ID: <76885C3C-1100-490B-990E-5519F6AAD40B@rstudio.com>

FWIW it was the intention of the patch to make printing of unclassed
functions consistent with other base types. This was documented in the
"patch 3" section:

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17398

I think we need a general way to customise auto-printing for base types
and even classed objects as that'd be useful for both users and IDEs.

However S3 dispatch may not be optimal for this because it essentially
requires polluting the global environment with print methods. Maybe
it'd make sense to add getOption("autoprint") which should be set to
a user- or environment- supplied function. That function would do the
dispatch. I'd be happy to send a patch for this, if it makes sense.

Best,
Lionel


> On 21 May 2019, at 13:38, William Dunlap via R-devel <r-devel at r-project.org> wrote:
> 
> It also is a problem with storage.modes "integer" and "complex":
> 
> 3.6.0> print.integer <- function(x,...) "integer vector"
>                3.6.0> 1:10
> [1]  1  2  3  4  5  6  7  8  9 10
> 3.6.0> print(1:10)
> [1] "integer vector"
> 3.6.0>
> 3.6.0> print.complex <- function(x, ...) "complex vector"
> 3.6.0> 1+2i
> [1] 1+2i
> 3.6.0> print(1+2i)
> [1] "complex vector"
> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
> 
> 
> On Tue, May 21, 2019 at 9:31 AM Martin Maechler <maechler at stat.math.ethz.ch>
> wrote:
> 
>>>>>>> William Dunlap via R-devel
>>>>>>>    on Thu, 16 May 2019 11:56:45 -0700 writes:
>> 
>>> In R-3.6.0 autoprinting was changed so that print methods for the
>> storage
>>> modes are not called when there is no explicit class attribute.
>> E.g.,
>> 
>>> % R-3.6.0 --vanilla --quiet
>>>> print.function <- function(x, ...) { cat("Function with argument
>> list ");
>>> cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
>>>> f <- function(x, ...) { sum( x * seq_along(x) ) }
>>>> f
>>> function(x, ...) { sum( x * seq_along(x) ) }
>>>> print(f)
>>> Function with argument list function (x, ...)
>> 
>>> Previous to R-3.6.0 autoprinting did call such methods
>>> % R-3.5.3 --vanilla --quiet
>>>> print.function <- function(x, ...) { cat("Function with argument
>> list ");
>>> cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
>>>> f <- function(x, ...) { sum( x * seq_along(x) ) }
>>>> f
>>> Function with argument list function (x, ...)
>>>> print(f)
>>> Function with argument list function (x, ...)
>> 
>>> Was this intentional?
>> 
>> No, it was not.  ... and I've been the one committing the wrong change.
>> 
>> ... Related to the NEWS entries which start
>> 
>>     "Changes in print.*() ...."
>> 
>> Thank you Bill, for reporting....
>> 
>> It's amazing this has not been detected earlier by anybody.
>> 
>> I think it is *only* for functions, not general
>> print.<storagemode>() as you were suggesting - right?
>> 
>> Martin
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From h@rvey13131 @end|ng |rom gm@||@com  Tue May 21 20:30:23 2019
From: h@rvey13131 @end|ng |rom gm@||@com (Harvey Smith)
Date: Tue, 21 May 2019 14:30:23 -0400
Subject: [Rd] anyNA() performance on vectors of POSIXct
In-Reply-To: <23780.8603.94402.482745@stat.math.ethz.ch>
References: <CACVELJ3k3zpUOQ22k539ynFpqrePbuNa+EAxiKcK9WxkQHMo0g@mail.gmail.com>
 <23780.8603.94402.482745@stat.math.ethz.ch>
Message-ID: <CACVELJ3J8oxqB7tTKAc3bhdT84Tr-X_PSHruJLkv=vXmVSALbA@mail.gmail.com>

 I think there was a similar discussion to this when I raised the issue of
interpreting the sort order for an object versus its underlying type.  In
this anyNA example it is the is.na for the object versus the is.na for the
type, whereas in the discussion below, which Gabriel Becker raised, it was
the sort ordering.  They seem to be related when vectors of POSIXct are
handled as objects instead of the underlying numeric type.

So looking at this, it is because is.object(x.posixct) returns true, which
means sort.default does x[order(x, <bla bla bla>)], which ALTREP is not
currently (and may not ever be?) smart enough to catch on its own and know
is sorted.

Its true we could add something after that to wrap it in what is called a
wrapper altrep which would know it's sorted, but we don't do that currently
now and I'm not sure we actually should in the general case. I'm not
convinced its safe to assume an object class' defined ordering will match
the ordering of an underlying double/int representation. I believe we ran
into something similar with deferred sting conversions from integers (I
think, possibly doubles) where the int had sortedness information but that
wasn't correct for the *character vector *the ALTREP ultimately
represented.

http://r.789695.n4.nabble.com/unsorted-suggestion-for-performance-improvement-and-ALTREP-support-for-POSIXct-td4754634.html


On Tue, May 21, 2019 at 12:04 PM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> Harvey Smith
> >>>>>     on Wed, 1 May 2019 03:20:55 -0400 writes:
>
>     > Inside of the anyNA() function, it will use the legacy any(is.na())
> code if
>     > x is an OBJECT().  If x is a vector of POSIXct, it will be an
> OBJECT(), but
>     > it is also TYPEOF(x) == REALSXP.  Therefore, it will skip the faster
>     > ITERATE_BY_REGION, which is typically 5x faster in my testing.
>
>     > Is the OBJECT() condition really necessary, or could it be moved
> after the
>     > switch() for the individual TYPEOF(x) ITERATE_BY_REGION calls?
>
>  "necessary ?" :  yes, in the following sense :
>
> When it was introduced, the idea of anyNA(.) has been that it
> should be equivalent (but often faster) than  any(is.na(.)).
> As anyNA() was only introduced quite recently (*)
> and many (S3 and S4) classes have had  is.na() methods defined
> for them but -- initially at least -- not an anyNA().
>
> So to ensure  the equivalence    anyNA(x)  ===   any(is.na(x))
> for "all" R objects 'x', that OBJECT(.) condition had been
> important and necessary.
>
> Still, being the person who had added  anyNA() to R,
> I'm naturally sympathetic to have it faster in cases such as
> "Date" or "POSIXct" objects.
>
> I'd find it ugly to test for these classes specifically in the C code (via
> the equivalent of  inherits(., "POSIXct")
>   {{ *NOT* via the really wrong  class(.)[[1]] == "POSIXct"
>       that I see in some "experts" R code, because that fails
>       for all class extensions ! }}
> but that may still be an option;
>
> Yet alternatively, one *could* consider changing the API and
> declare that for atomic types with a class {i.e. OBJECT(.)}, and
> *if* there is no anyNA() method, anyNA() will use the "atomic"
> fast method, instead of using any(is.na(.)).
>
> This may break existing code in packages, but the maintainers of
> that code could solve the problems by providing  anyNA(.)
> methods for their objects.
>
> Other opinions / ideas ?
>
> Martin Maechler
> ETH Zurich / R Core Team
>
>
> --
> *) in Spring 2013, but too late for R 3.0.0;
>    "recently", considering R's history starting with S in the early 1980's
>
>
> > # script to demonstrate performance difference if x is an OBJECT or not
> by
> > using unclass()
> > x.posixct = Sys.time() + 1:1e6
> > microbenchmark::microbenchmark(
> >   any(is.na( x.posixct )),
> >   anyNA( x.posixct ),
> >   anyNA( unclass(x.posixct) ),
> >   unit='ms')
> >
> >
> >
> > static Rboolean anyNA(SEXP call, SEXP op, SEXP args, SEXP env)
> > {
> >   SEXP x = CAR(args);
> >   SEXPTYPE xT = TYPEOF(x);
> >   Rboolean isList =  (xT == VECSXP || xT == LISTSXP), recursive = FALSE;
> >
> >   if (isList && length(args) > 1) recursive = asLogical(CADR(args));
> >   *if (OBJECT(x) || (isList && !recursive)) {*
> >     SEXP e0 = PROTECT(lang2(install("is.na"), x));
> >     SEXP e = PROTECT(lang2(install("any"), e0));
> >     SEXP res = PROTECT(eval(e, env));
> >     int ans = asLogical(res);
> >     UNPROTECT(3);
> >     return ans == 1; // so NA answer is false.
> >   }
> >
> >   R_xlen_t i, n = xlength(x);
> >   switch (xT) {
> >     case REALSXP:
> >     {
> >       if(REAL_NO_NA(x))
> >         return FALSE;
> >       ITERATE_BY_REGION(x, xD, i, nbatch, double, REAL, {
> >         for (int k = 0; k < nbatch; k++)
> >           if (ISNAN(xD[k]))
> >             return TRUE;
> >       });
> >       break;
> >     }
> >
>

	[[alternative HTML version deleted]]


From wdun|@p @end|ng |rom t|bco@com  Tue May 21 21:11:45 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Tue, 21 May 2019 12:11:45 -0700
Subject: [Rd] print.<strorageMode>() not called when autoprinting
In-Reply-To: <76885C3C-1100-490B-990E-5519F6AAD40B@rstudio.com>
References: <CAF8bMcatAtZ_LPWZk3QxVQXS5qHA14_j=_tBvGbbH+m0kBYnAQ@mail.gmail.com>
 <23780.10058.726995.538115@stat.math.ethz.ch>
 <CAF8bMcYeVioX6-vxz+-P6SsFHyoU6QSBD55_veNcvXpw7wEdyA@mail.gmail.com>
 <76885C3C-1100-490B-990E-5519F6AAD40B@rstudio.com>
Message-ID: <CAF8bMcYX5o2joaqXa2F2Tw8iU-CvN8FmmGm58Yezs-RnwWxEGQ@mail.gmail.com>

Letting a user supply the autoprint function would be nice also.  In a way
you can already do that, using addTaskCallback(), but that doesn't let you
suppress the standard autoprinting.

Having the default autoprinting do its own style of method dispatch doesn't
seem right.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Tue, May 21, 2019 at 10:50 AM Lionel Henry <lionel at rstudio.com> wrote:

> FWIW it was the intention of the patch to make printing of unclassed
> functions consistent with other base types. This was documented in the
> "patch 3" section:
>
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17398
>
> I think we need a general way to customise auto-printing for base types
> and even classed objects as that'd be useful for both users and IDEs.
>
> However S3 dispatch may not be optimal for this because it essentially
> requires polluting the global environment with print methods. Maybe
> it'd make sense to add getOption("autoprint") which should be set to
> a user- or environment- supplied function. That function would do the
> dispatch. I'd be happy to send a patch for this, if it makes sense.
>
> Best,
> Lionel
>
>
> > On 21 May 2019, at 13:38, William Dunlap via R-devel <
> r-devel at r-project.org> wrote:
> >
> > It also is a problem with storage.modes "integer" and "complex":
> >
> > 3.6.0> print.integer <- function(x,...) "integer vector"
> >                3.6.0> 1:10
> > [1]  1  2  3  4  5  6  7  8  9 10
> > 3.6.0> print(1:10)
> > [1] "integer vector"
> > 3.6.0>
> > 3.6.0> print.complex <- function(x, ...) "complex vector"
> > 3.6.0> 1+2i
> > [1] 1+2i
> > 3.6.0> print(1+2i)
> > [1] "complex vector"
> >
> > Bill Dunlap
> > TIBCO Software
> > wdunlap tibco.com
> >
> >
> > On Tue, May 21, 2019 at 9:31 AM Martin Maechler <
> maechler at stat.math.ethz.ch>
> > wrote:
> >
> >>>>>>> William Dunlap via R-devel
> >>>>>>>    on Thu, 16 May 2019 11:56:45 -0700 writes:
> >>
> >>> In R-3.6.0 autoprinting was changed so that print methods for the
> >> storage
> >>> modes are not called when there is no explicit class attribute.
> >> E.g.,
> >>
> >>> % R-3.6.0 --vanilla --quiet
> >>>> print.function <- function(x, ...) { cat("Function with argument
> >> list ");
> >>> cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
> >>>> f <- function(x, ...) { sum( x * seq_along(x) ) }
> >>>> f
> >>> function(x, ...) { sum( x * seq_along(x) ) }
> >>>> print(f)
> >>> Function with argument list function (x, ...)
> >>
> >>> Previous to R-3.6.0 autoprinting did call such methods
> >>> % R-3.5.3 --vanilla --quiet
> >>>> print.function <- function(x, ...) { cat("Function with argument
> >> list ");
> >>> cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
> >>>> f <- function(x, ...) { sum( x * seq_along(x) ) }
> >>>> f
> >>> Function with argument list function (x, ...)
> >>>> print(f)
> >>> Function with argument list function (x, ...)
> >>
> >>> Was this intentional?
> >>
> >> No, it was not.  ... and I've been the one committing the wrong change.
> >>
> >> ... Related to the NEWS entries which start
> >>
> >>     "Changes in print.*() ...."
> >>
> >> Thank you Bill, for reporting....
> >>
> >> It's amazing this has not been detected earlier by anybody.
> >>
> >> I think it is *only* for functions, not general
> >> print.<storagemode>() as you were suggesting - right?
> >>
> >> Martin
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

	[[alternative HTML version deleted]]


From r-deve| @end|ng |rom @ker@t|ng@de  Tue May 21 21:42:01 2019
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Tue, 21 May 2019 21:42:01 +0200 (CEST)
Subject: [Rd] most robust way to call R API functions from a secondary
 thread
In-Reply-To: <D9CC3798-DD96-4D61-9311-6D9E892868AD@R-project.org>
Message-ID: <E1hTAe9-0003Sa-FM@rmmprod07.runbox>

Hi Simon,

Your response hits the mark of why I am doing it that way rather than going with what Stepan proposed. Also good to hear that you consider my analysis to be pretty complete. Thanks for the feedback!

Regards,
Andreas

2019-05-20 15:54 GMT+02:00 Simon Urbanek<simon.urbanek at R-project.org>:
> Stepan,
>
> Andreas gave a lot more thought into what you question in your reply. His question was how you can avoid what you where proposing and have proper threading under safe conditions. Having dealt with this before, I think Andreas' write up is pretty much the most complete analysis I have seen. I'd wait for Luke to chime in as the ultimate authority if he gets to it.
>
> The "classic" approach which you mention is to collect and allocate everything, then execute parallel code and then return. What Andres is proposing is obviously much more efficient: you only synchronize on R API calls which are likely a small fraction on the entire time while you keep all threads alive. His question was how to do that safely. (BTW: I really like the touch of counting frames that toplevel exec can use ;) - it may make sense to deal with that edge-case in R if we can ...).
>
> Cheers,
> Simon
>
>
>
>
>> On May 20, 2019, at 5:45 AM, Stepan <stepan.sindelar at oracle.com> wrote:
>>
>> Hi Andreas,
>>
>> note that with the introduction of ALTREP, as far as I understand, calls as "simple" as DATAPTR can execute arbitrary code (R or native). Even without ALTREP, if you execute user-provided R code via Rf_eval and such on some custom thread, you may end up executing native code of some package, which may assume it is executed only from the R main thread.
>>
>> Could you (1) decompose your problem in a way that in some initial phase you pull all the necessary data from R, then start the parallel computation, and then again in the R main thread "submit" the results back to the R world?
>>
>> If you wanted something really robust, you can (2) "send" the requests for R API usage to the R main thread and pause the worker thread until it receives the results back. This looks similar to what the "later" package does. Maybe you can even use that package for your purposes?
>>
>> Do you want to parallelize your code to achieve better performance? Even with your proposed solution, you need synchronization and chances are that excessive synchronization will severely affect the expected performance benefits of parallelization. If you do not need to synchronize that much, then the question is if you can do with (1) or (2).
>>
>> Best regards,
>> Stepan
>>
>> On 19/05/2019 11:31, Andreas Kersting wrote:
>>> Hi,
>>> As the subject suggests, I am looking for the most robust way to call an (arbitrary) function from the R API from another but the main POSIX thread in a package's code.
>>> I know that, "[c]alling any of the R API from threaded code is ?for experts only? and strongly discouraged. Many functions in the R API modify internal R data structures and might corrupt these data structures if called simultaneously from multiple threads. Most R API functions can signal errors, which must only happen on the R main thread." (https://urldefense.proofpoint.com/v2/url?u=https-3A__cran.r-2Dproject.org_doc_manuals_r-2Drelease_R-2Dexts.html-23OpenMP-2Dsupport&d=DwIFaQ&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=d1r2raD4w0FF7spOVuz2IVEo0P_II3ZtSbw0TU2NmaE&s=JaadZR_m-QiJ3BQzzQ_fJPYt034tM5Ts6vKhdi6f__A&e=)
>>> Let me start with my understanding of the related issues and possible solutions:
>>> 1) R API functions are generally not thread-safe and hence one must ensure, e.g. by using mutexes, that no two threads use the R API simultaneously
>>> 2) R uses longjmps on error and interrupts as well as for condition handling and it is undefined behaviour to do a longjmp from one thread to another; interrupts can be suspended before creating the threads by setting R_interrupts_suspended = TRUE; by wrapping the calls to functions from the R API with R_ToplevelExec(), longjmps across thread boundaries can be avoided; the only reason for R_ToplevelExec() itself to fail with an R-style error (longjmp) is a pointer protection stack overflow
>>> 3) R_CheckStack() might be executed (indirectly), which will (probably) signal a stack overflow because it only works correctly when called form the main thread (see https://urldefense.proofpoint.com/v2/url?u=https-3A__cran.r-2Dproject.org_doc_manuals_r-2Drelease_R-2Dexts.html-23Threading-2Dissues&d=DwIFaQ&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=d1r2raD4w0FF7spOVuz2IVEo0P_II3ZtSbw0TU2NmaE&s=J_TMw2gu43dxB_EX2vHbtF4Zr4bIAFR8RSFzvbRV6jE&e=); in particular, any function that does allocations, e.g. via allocVector3() might end up calling it via GC -> finalizer -> ... -> eval; the only way around this problem which I could find is to adjust R_CStackLimit, which is outside of the official API; it can be set to -1 to disable the check or be changed to a value appropriate for the current thread
>>> 4) R sets signal handlers for several signals and some of them make use of the R API; hence, issues 1) - 3) apply; signal masks can be used to block delivery of signals to secondary threads in general and to the main thread while other threads are using the R API
>>> I basically have the following questions:
>>> a) Is my understanding of the issues accurate?
>>> b) Are there more things to consider when calling the R API from secondary threads?
>>> c) Are the solutions proposed appropriate? Are there scenarios in which they will fail to solve the issue? Or might they even cause new problems?
>>> d) Are there alternative/better solutions?
>>> Any feedback on this is highly appreciated.
>>> Below you can find a template which, combines the proposed solutions (and skips all non-illustrative checks of return values). Additionally, R_CheckUserInterrupt() is used in combination with R_UnwindProtect() to regularly check for interrupts from the main thread, while still being able to cleanly cancel the threads before fun_running_in_main_thread() is left via a longjmp. This is e.g. required if the secondary threads use memory which was allocated in fun_running_in_main_thread() using e.g. R_alloc().
>>> Best regards,
>>> Andreas Kersting
>>> #include
>>> #include
>>> #include
>>> #include
>>> extern uintptr_t R_CStackLimit;
>>> extern int R_PPStackTop;
>>> extern int R_PPStackSize;
>>> #include <R_ext/libextern.h>
>>> LibExtern Rboolean R_interrupts_suspended;
>>> LibExtern int R_interrupts_pending;
>>> extern void Rf_onintr(void);
>>> // mutex for exclusive access to the R API:
>>> static pthread_mutex_t r_api_mutex = PTHREAD_MUTEX_INITIALIZER;
>>> // a wrapper arround R_CheckUserInterrupt() which can be passed to R_UnwindProtect():
>>> SEXP check_interrupt(void *data) {
>>> R_CheckUserInterrupt();
>>> return R_NilValue;
>>> }
>>> // a wrapper arround Rf_onintr() which can be passed to R_UnwindProtect():
>>> SEXP my_onintr(void *data) {
>>> Rf_onintr();
>>> return R_NilValue;
>>> }
>>> // function called by R_UnwindProtect() to cleanup on interrupt
>>> void cleanfun(void *data, Rboolean jump) {
>>> if (jump) {
>>> // terminate threads cleanly ...
>>> }
>>> }
>>> void fun_calling_R_API(void *data) {
>>> // call some R API function, e.g. mkCharCE() ...
>>> }
>>> void *threaded_fun(void *td) {
>>> // ...
>>> pthread_mutex_lock(&r_api_mutex);
>>> // avoid false stack overflow error:
>>> intptr_t R_CStackLimit_old = R_CStackLimit;
>>> R_CStackLimit = -1;
>>> // R_ToplevelExec() below will call PROTECT 4x:
>>> if (R_PPStackTop > R_PPStackSize - 4) {
>>> // ppstack would overflow in R_ToplevelExec() -> handle this ...
>>> }
>>> // avoid longjmp to different thread:
>>> Rboolean ok = R_ToplevelExec(fun_calling_R_API, (void *) &some_data);
>>> // re-enable stack size checking:
>>> R_CStackLimit = R_CStackLimit_old;
>>> pthread_mutex_unlock(&r_api_mutex);
>>> if (!ok) {
>>> // handle error ...
>>> }
>>> // ...
>>> }
>>> SEXP fun_running_in_main_thread() {
>>> // ...
>>> /* create continuation token for R_UnwindProtect():
>>> *
>>> * do this explicitly here before the threads are created because this might
>>> * fail in allocation or with pointer protection stack overflow
>>> */
>>> SEXP cont = PROTECT(R_MakeUnwindCont());
>>> /* block all signals:
>>> *
>>> * do this before the threads are created such that they inherit the mask
>>> */
>>> sigset_t block_set, prev_mask;
>>> sigfillset(&block_set);
>>> pthread_sigmask(SIG_SETMASK, &block_set, &prev_mask);
>>> // suspend interrupts:
>>> Rboolean __oldsusp__ = R_interrupts_suspended;
>>> R_interrupts_suspended = TRUE;
>>> // create threads running threaded_fun() ...
>>> for(;;) {
>>> // timed blocking check if threads are done ...
>>> // unblock signals, check for interrupts and run cleanfun if there is one:
>>> pthread_mutex_lock(&r_api_mutex);
>>> pthread_sigmask(SIG_SETMASK, &prev_mask, NULL);
>>> R_interrupts_suspended = __oldsusp__;
>>> if (R_interrupts_pending && ! R_interrupts_suspended) {
>>> R_UnwindProtect(my_onintr, NULL, cleanfun, (void *) clean_data, cont);
>>> }
>>> R_UnwindProtect(check_interrupt, NULL, cleanfun, (void *) clean_data, cont);
>>> R_interrupts_suspended = TRUE;
>>> pthread_sigmask(SIG_SETMASK, &block_set, NULL);
>>> pthread_mutex_unlock(&r_api_mutex);
>>> }
>>> // now all threads are dead
>>> UNPROTECT(1); // continuation token
>>> // unblock signals:
>>> pthread_sigmask(SIG_SETMASK, &prev_mask, NULL);
>>> // reset interrupt-suspension:
>>> R_interrupts_suspended = __oldsusp__;
>>> if (R_interrupts_pending && ! R_interrupts_suspended) {
>>> Rf_onintr();
>>> }
>>> // ...
>>> }
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIFaQ&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=d1r2raD4w0FF7spOVuz2IVEo0P_II3ZtSbw0TU2NmaE&s=Cv18jzHzhslwwzRcd4ztMRE_4xqphJz7bQ8lprgol6I&e=
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

From r-deve| @end|ng |rom @ker@t|ng@de  Tue May 21 21:54:24 2019
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Tue, 21 May 2019 21:54:24 +0200 (CEST)
Subject: [Rd] [External] most robust way to call R API functions from a
 secondary thread
In-Reply-To: <alpine.DEB.2.21.1905201213210.2805@luke-Latitude-7480>
Message-ID: <E1hTAq8-0004FY-K8@rmmprod07.runbox>

Hi Luke,

Thanks also for your feedback! I will then follow the proposed route for the problem at hand and I will report back if I encounter any issues. 

I am also going look into the issues of stack checking and R_ToplevelExec.

Regards,
Andreas

2019-05-20 19:29 GMT+02:00 Tierney, Luke<luke-tierney at uiowa.edu>:
> Your analysis looks pretty complete to me and your solutions seemsplausible.  That said, I don't know that I would have the level of
> confidence yet that we haven't missed an important point that I would
> want before going down this route.
> 
> Losing stack checking is risky; it might be eventually possible to
> provide some support for this to be handled via a thread-local
> variable. Ensuring that R_ToplevelExec can't jump before entering the
> body function would be a good idea; if you want to propose a patch we
> can have a look.
> 
> Best,
> 
> luke
> 
> On Sun, 19 May 2019, Andreas Kersting wrote:
> 
>> Hi,
>>
>> As the subject suggests, I am looking for the most robust way to call an (arbitrary) function from the R API from another but the main POSIX thread in a package's code.
>>
>> I know that, "[c]alling any of the R API from threaded code is ?for experts only? and strongly discouraged. Many functions in the R API modify internal R data structures and might corrupt these data structures if called simultaneously from multiple threads. Most R API functions can signal errors, which must only happen on the R main thread." (https://cran.r-project.org/doc/manuals/r-release/R-exts.html#OpenMP-support)
>>
>> Let me start with my understanding of the related issues and possible solutions:
>>
>> 1) R API functions are generally not thread-safe and hence one must ensure, e.g. by using mutexes, that no two threads use the R API simultaneously
>>
>> 2) R uses longjmps on error and interrupts as well as for condition handling and it is undefined behaviour to do a longjmp from one thread to another; interrupts can be suspended before creating the threads by setting R_interrupts_suspended = TRUE; by wrapping the calls to functions from the R API with R_ToplevelExec(), longjmps across thread boundaries can be avoided; the only reason for R_ToplevelExec() itself to fail with an R-style error (longjmp) is a pointer protection stack overflow
>>
>> 3) R_CheckStack() might be executed (indirectly), which will (probably) signal a stack overflow because it only works correctly when called form the main thread (see https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Threading-issues); in particular, any function that does allocations, e.g. via allocVector3() might end up calling it via GC -> finalizer -> ... -> eval; the only way around this problem which I could find is to adjust R_CStackLimit, which is outside of the official API; it can be set to -1 to disable the check or be changed to a value appropriate for the current thread
>>
>> 4) R sets signal handlers for several signals and some of them make use of the R API; hence, issues 1) - 3) apply; signal masks can be used to block delivery of signals to secondary threads in general and to the main thread while other threads are using the R API
>>
>>
>> I basically have the following questions:
>>
>> a) Is my understanding of the issues accurate?
>> b) Are there more things to consider when calling the R API from secondary threads?
>> c) Are the solutions proposed appropriate? Are there scenarios in which they will fail to solve the issue? Or might they even cause new problems?
>> d) Are there alternative/better solutions?
>>
>> Any feedback on this is highly appreciated.
>>
>> Below you can find a template which, combines the proposed solutions (and skips all non-illustrative checks of return values). Additionally, R_CheckUserInterrupt() is used in combination with R_UnwindProtect() to regularly check for interrupts from the main thread, while still being able to cleanly cancel the threads before fun_running_in_main_thread() is left via a longjmp. This is e.g. required if the secondary threads use memory which was allocated in fun_running_in_main_thread() using e.g. R_alloc().
>>
>> Best regards,
>> Andreas Kersting
>>
>>
>>
>> #include <Rinternals.h>
>> #include <pthread.h>
>> #include <signal.h>
>> #include <stdint.h>
>>
>> extern uintptr_t R_CStackLimit;
>> extern int R_PPStackTop;
>> extern int R_PPStackSize;
>>
>> #include <R_ext/libextern.h>
>> LibExtern Rboolean R_interrupts_suspended;
>> LibExtern int R_interrupts_pending;
>> extern void Rf_onintr(void);
>>
>> // mutex for exclusive access to the R API:
>> static pthread_mutex_t r_api_mutex = PTHREAD_MUTEX_INITIALIZER;
>>
>> // a wrapper arround R_CheckUserInterrupt() which can be passed to R_UnwindProtect():
>> SEXP check_interrupt(void *data) {
>>  R_CheckUserInterrupt();
>>  return R_NilValue;
>> }
>>
>> // a wrapper arround Rf_onintr() which can be passed to R_UnwindProtect():
>> SEXP my_onintr(void *data) {
>>  Rf_onintr();
>>  return R_NilValue;
>> }
>>
>> // function called by R_UnwindProtect() to cleanup on interrupt
>> void cleanfun(void *data, Rboolean jump) {
>>  if (jump) {
>>    // terminate threads cleanly ...
>>  }
>> }
>>
>> void fun_calling_R_API(void *data) {
>>  // call some R API function, e.g. mkCharCE() ...
>> }
>>
>> void *threaded_fun(void *td) {
>>
>>  // ...
>>
>>  pthread_mutex_lock(&r_api_mutex);
>>
>>  // avoid false stack overflow error:
>>  intptr_t R_CStackLimit_old = R_CStackLimit;
>>  R_CStackLimit = -1;
>>
>>
>>  // R_ToplevelExec() below will call PROTECT 4x:
>>  if (R_PPStackTop > R_PPStackSize - 4) {
>>    // ppstack would overflow in R_ToplevelExec() -> handle this ...
>>  }
>>
>>  // avoid longjmp to different thread:
>>  Rboolean ok = R_ToplevelExec(fun_calling_R_API, (void *) &some_data);
>>
>>  // re-enable stack size checking:
>>  R_CStackLimit = R_CStackLimit_old;
>>  pthread_mutex_unlock(&r_api_mutex);
>>
>>  if (!ok) {
>>    // handle error ...
>>  }
>>
>>  // ...
>> }
>>
>> SEXP fun_running_in_main_thread() {
>>
>>  // ...
>>
>>  /* create continuation token for R_UnwindProtect():
>>   *
>>   * do this explicitly here before the threads are created because this might
>>   * fail in allocation or with pointer protection stack overflow
>>   */
>>  SEXP cont = PROTECT(R_MakeUnwindCont());
>>
>>  /* block all signals:
>>   *
>>   * do this before the threads are created such that they inherit the mask
>>   */
>>  sigset_t block_set, prev_mask;
>>  sigfillset(&block_set);
>>  pthread_sigmask(SIG_SETMASK, &block_set, &prev_mask);
>>
>>  // suspend interrupts:
>>  Rboolean __oldsusp__ = R_interrupts_suspended;
>>  R_interrupts_suspended = TRUE;
>>
>>  // create threads running threaded_fun() ...
>>
>>  for(;;) {
>>    // timed blocking check if threads are done ...
>>
>>    // unblock signals, check for interrupts and run cleanfun if there is one:
>>    pthread_mutex_lock(&r_api_mutex);
>>    pthread_sigmask(SIG_SETMASK, &prev_mask, NULL);
>>
>>    R_interrupts_suspended = __oldsusp__;
>>    if (R_interrupts_pending && ! R_interrupts_suspended) {
>>      R_UnwindProtect(my_onintr, NULL, cleanfun, (void *) clean_data, cont);
>>    }
>>
>>    R_UnwindProtect(check_interrupt, NULL, cleanfun, (void *) clean_data, cont);
>>
>>    R_interrupts_suspended = TRUE;
>>
>>    pthread_sigmask(SIG_SETMASK, &block_set, NULL);
>>    pthread_mutex_unlock(&r_api_mutex);
>>  }
>>
>>  // now all threads are dead
>>
>>  UNPROTECT(1);  // continuation token
>>
>>  // unblock signals:
>>  pthread_sigmask(SIG_SETMASK, &prev_mask, NULL);
>>
>>  // reset interrupt-suspension:
>>  R_interrupts_suspended = __oldsusp__;
>>  if (R_interrupts_pending && ! R_interrupts_suspended) {
>>    Rf_onintr();
>>  }
>>
>>  // ...
>> }
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> -- 
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>    Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed May 22 09:50:10 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 22 May 2019 09:50:10 +0200
Subject: [Rd] print.<strorageMode>() not called when autoprinting
In-Reply-To: <CAF8bMcYX5o2joaqXa2F2Tw8iU-CvN8FmmGm58Yezs-RnwWxEGQ@mail.gmail.com>
References: <CAF8bMcatAtZ_LPWZk3QxVQXS5qHA14_j=_tBvGbbH+m0kBYnAQ@mail.gmail.com>
 <23780.10058.726995.538115@stat.math.ethz.ch>
 <CAF8bMcYeVioX6-vxz+-P6SsFHyoU6QSBD55_veNcvXpw7wEdyA@mail.gmail.com>
 <76885C3C-1100-490B-990E-5519F6AAD40B@rstudio.com>
 <CAF8bMcYX5o2joaqXa2F2Tw8iU-CvN8FmmGm58Yezs-RnwWxEGQ@mail.gmail.com>
Message-ID: <23780.65330.841197.95483@stat.math.ethz.ch>

>>>>> William Dunlap 
>>>>>     on Tue, 21 May 2019 12:11:45 -0700 writes:

    > Letting a user supply the autoprint function would be nice also.  In a way
    > you can already do that, using addTaskCallback(), but that doesn't let you
    > suppress the standard autoprinting.

    > Having the default autoprinting do its own style of method dispatch doesn't
    > seem right.

I agree (if I understand correctly what you mean ... ;-)

    > Bill Dunlap
    > TIBCO Software
    > wdunlap tibco.com


    > On Tue, May 21, 2019 at 10:50 AM Lionel Henry <lionel at rstudio.com> wrote:

    >> FWIW it was the intention of the patch to make printing of unclassed
    >> functions consistent with other base types. This was documented in the
    >> "patch 3" section:
    >> 
    >> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17398

I now vaguely remember.
OTOH,  tests/reg-tests-2.R  {the "output related" regression tests} 
*did* have an explicit test to ensure that print() and
auto-print do the same thing for functions:

    print.function <- function(x, ...) { str(x,...); invisible(x) }
    print.function
    f
    rm(print.function)
    ## auto-printing and printing differed up to R 2.9.x

so this was not
  "an undocumented consequence of an implementation detail"  ..

but you are right that it has not been documented explicitly.

    >> I think we need a general way to customise auto-printing for base types
    >> and even classed objects as that'd be useful for both users and IDEs.

Thank you, Lionel;  but I'm not convinced :

I'm pretty sure that all teaching and documentation about S and R 
has suggested that  print(f)  and auto-printing should result in
the same output _ AFAIR also for S4 objects
[unless  print() and show() methods were explicitly made to differ.. ? ]

    >> However S3 dispatch may not be optimal for this because it essentially
    >> requires polluting the global environment with print methods. Maybe
    >> it'd make sense to add getOption("autoprint") which should be set to
    >> a user- or environment- supplied function. That function would do the
    >> dispatch. I'd be happy to send a patch for this, if it makes sense.

    >> Best,
    >> Lionel

I'd rather we'd work towards the goal that auto printing
and print() should result in identical output :

1) for unclassed basic objects, i.e., what Bill meant with print.<storageMode>
   where maybe   print.<typeof>   would be a slightly better name;
2) for S3 classed objects;
3) for S4 classed objects with no print() method (but possibly a show() one).

Adding an option for autoprinting would render R even less
strictly functional, depending on yet another powerful global option,
and typical R usage would become more different from
'R --vanilla' even more --- really not a good direction to go in my view.

AFAICS, the above goal would need changes only for case '1)'

Martin

    >> > On 21 May 2019, at 13:38, William Dunlap via R-devel <
    >> r-devel at r-project.org> wrote:
    >> >
    >> > It also is a problem with storage.modes "integer" and "complex":
    >> >
    >> > 3.6.0> print.integer <- function(x,...) "integer vector"
    >> >                3.6.0> 1:10
    >> > [1]  1  2  3  4  5  6  7  8  9 10
    >> > 3.6.0> print(1:10)
    >> > [1] "integer vector"
    >> > 3.6.0>
    >> > 3.6.0> print.complex <- function(x, ...) "complex vector"
    >> > 3.6.0> 1+2i
    >> > [1] 1+2i
    >> > 3.6.0> print(1+2i)
    >> > [1] "complex vector"
    >> >
    >> > Bill Dunlap
    >> > TIBCO Software
    >> > wdunlap tibco.com
    >> >
    >> >
    >> > On Tue, May 21, 2019 at 9:31 AM Martin Maechler <
    >> maechler at stat.math.ethz.ch>
    >> > wrote:
    >> >
    >> >>>>>>> William Dunlap via R-devel
    >> >>>>>>>    on Thu, 16 May 2019 11:56:45 -0700 writes:
    >> >>
    >> >>> In R-3.6.0 autoprinting was changed so that print methods for the
    >> >> storage
    >> >>> modes are not called when there is no explicit class attribute.
    >> >> E.g.,
    >> >>
    >> >>> % R-3.6.0 --vanilla --quiet
    >> >>>> print.function <- function(x, ...) { cat("Function with argument
    >> >> list ");
    >> >>> cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
    >> >>>> f <- function(x, ...) { sum( x * seq_along(x) ) }
    >> >>>> f
    >> >>> function(x, ...) { sum( x * seq_along(x) ) }
    >> >>>> print(f)
    >> >>> Function with argument list function (x, ...)
    >> >>
    >> >>> Previous to R-3.6.0 autoprinting did call such methods
    >> >>> % R-3.5.3 --vanilla --quiet
    >> >>>> print.function <- function(x, ...) { cat("Function with argument
    >> >> list ");
    >> >>> cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
    >> >>>> f <- function(x, ...) { sum( x * seq_along(x) ) }
    >> >>>> f
    >> >>> Function with argument list function (x, ...)
    >> >>>> print(f)
    >> >>> Function with argument list function (x, ...)
    >> >>
    >> >>> Was this intentional?
    >> >>
    >> >> No, it was not.  ... and I've been the one committing the wrong change.
    >> >>
    >> >> ... Related to the NEWS entries which start
    >> >>
    >> >>     "Changes in print.*() ...."
    >> >>
    >> >> Thank you Bill, for reporting....
    >> >>
    >> >> It's amazing this has not been detected earlier by anybody.
    >> >>
    >> >> I think it is *only* for functions, not general
    >> >> print.<storagemode>() as you were suggesting - right?
    >> >>
    >> >> Martin
    >> >>
    >> >
    >> >       [[alternative HTML version deleted]]
    >> >
    >> > ______________________________________________
    >> > R-devel at r-project.org mailing list
    >> > https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> 

    > [[alternative HTML version deleted]]


From r-deve| @end|ng |rom @ker@t|ng@de  Wed May 22 11:18:46 2019
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Wed, 22 May 2019 11:18:46 +0200 (CEST)
Subject: [Rd] make running on.exit expr uninterruptible
Message-ID: <E1hTNOY-00039f-Br@rmmprod07.runbox>

Hi,

Is there currently any way to guarantee that on.exit does not fail to execute the recorded expression because of a user interrupt arriving during function exit? Consider:

f <- function() {
  suspendInterrupts({
    on.exit(suspendInterrupts(cntr_on.exit <<- cntr_on.exit + 1L))
    cntr_f <<- cntr_f + 1L
  })
  TRUE
}

It is possible to interrupt this function such that cntr_f is incremented while cntr_on.exit is not (you might need to adjust timeout_upper to trigger the error on your machine):

timeout_upper <- 0.00001
repeat {
  cntr_f <- 0L
  cntr_on.exit <- 0L
  
  # timeout code borrowed from R.utils::withTimeout but with setTimeLimit()
  # (correctly) place inside tryCatch (otherwise timeout can occur before it can
  # be caught) and with time limit reset before going into the error handler
  res_list <- lapply(seq(0, timeout_upper, length.out = 1000), function(timeout) {
    on.exit({
      setTimeLimit(cpu = Inf, elapsed = Inf, transient = FALSE)
    })
    tryCatch({
      setTimeLimit(cpu = timeout, elapsed = timeout, transient = TRUE)
      res <- f()
      
      # avoid timeout while running error handler
      setTimeLimit(cpu = Inf, elapsed = Inf, transient = FALSE)
      
      res
    }, error = function(ex) {
      msg <- ex$message
      pattern <- gettext("reached elapsed time limit", "reached CPU time limit",
                         domain = "R")
      pattern <- paste(pattern, collapse = "|")
      if (regexpr(pattern, msg) != -1L) {
        FALSE
      }
      else {
        stop(ex)
      }
    })
  })
  print(sum(unlist(res_list)))  # number of times f completed
  stopifnot(cntr_on.exit == cntr_f)
}

Example output:

1] 1000
[1] 1000
[1] 1000
[1] 1000
[1] 999
[1] 1000
[1] 1000
[1] 999
[1] 998
[1] 1000
[1] 998
[1] 1000
[1] 1000
[1] 1000
[1] 1000
[1] 999
Error: cntr_on.exit == cntr_f is not TRUE

I was bitten by this because an on.exit expression, which releases a file lock, was interrupted (before it actually executed) such that subsequent calls block indefinitely.

Regards,
Andreas

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed May 22 13:15:27 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 22 May 2019 13:15:27 +0200
Subject: [Rd] print.<strorageMode>() not called when autoprinting
In-Reply-To: <23780.65330.841197.95483@stat.math.ethz.ch>
References: <CAF8bMcatAtZ_LPWZk3QxVQXS5qHA14_j=_tBvGbbH+m0kBYnAQ@mail.gmail.com>
 <23780.10058.726995.538115@stat.math.ethz.ch>
 <CAF8bMcYeVioX6-vxz+-P6SsFHyoU6QSBD55_veNcvXpw7wEdyA@mail.gmail.com>
 <76885C3C-1100-490B-990E-5519F6AAD40B@rstudio.com>
 <CAF8bMcYX5o2joaqXa2F2Tw8iU-CvN8FmmGm58Yezs-RnwWxEGQ@mail.gmail.com>
 <23780.65330.841197.95483@stat.math.ethz.ch>
Message-ID: <23781.12111.73756.124350@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Wed, 22 May 2019 09:50:10 +0200 writes:

>>>>> William Dunlap 
>>>>>     on Tue, 21 May 2019 12:11:45 -0700 writes:

    >> Letting a user supply the autoprint function would be nice also.  In a way
    >> you can already do that, using addTaskCallback(), but that doesn't let you
    >> suppress the standard autoprinting.

    >> Having the default autoprinting do its own style of method dispatch doesn't
    >> seem right.

    > I agree (if I understand correctly what you mean ... ;-)

    >> Bill Dunlap
    >> TIBCO Software
    >> wdunlap tibco.com


    >> On Tue, May 21, 2019 at 10:50 AM Lionel Henry <lionel at rstudio.com> wrote:

    >>> FWIW it was the intention of the patch to make printing of unclassed
    >>> functions consistent with other base types. This was documented in the
    >>> "patch 3" section:
    >>> 
    >>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17398

    > I now vaguely remember.
    > OTOH,  tests/reg-tests-2.R  {the "output related" regression tests} 
    > *did* have an explicit test to ensure that print() and
    > auto-print do the same thing for functions:

    > print.function <- function(x, ...) { str(x,...); invisible(x) }
    > print.function
    > f
    > rm(print.function)
    > ## auto-printing and printing differed up to R 2.9.x

    > so this was not
    > "an undocumented consequence of an implementation detail"  ..

    > but you are right that it has not been documented explicitly.

    >>> I think we need a general way to customise auto-printing for base types
    >>> and even classed objects as that'd be useful for both users and IDEs.

    > Thank you, Lionel;  but I'm not convinced :

    > I'm pretty sure that all teaching and documentation about S and R 
    > has suggested that  print(f)  and auto-printing should result in
    > the same output _ AFAIR also for S4 objects
    > [unless  print() and show() methods were explicitly made to differ.. ? ]

    >>> However S3 dispatch may not be optimal for this because it essentially
    >>> requires polluting the global environment with print methods. Maybe
    >>> it'd make sense to add getOption("autoprint") which should be set to
    >>> a user- or environment- supplied function. That function would do the
    >>> dispatch. I'd be happy to send a patch for this, if it makes sense.

    >>> Best,
    >>> Lionel

    > I'd rather we'd work towards the goal that auto printing
    > and print() should result in identical output :

    > 1) for unclassed basic objects, i.e., what Bill meant with print.<storageMode>
    > where maybe   print.<typeof>   would be a slightly better name;
    > 2) for S3 classed objects;
    > 3) for S4 classed objects with no print() method (but possibly a show() one).

    > Adding an option for autoprinting would render R even less
    > strictly functional, depending on yet another powerful global option,
    > and typical R usage would become more different from
    > 'R --vanilla' even more --- really not a good direction to go in my view.

    > AFAICS, the above goal would need changes only for case '1)'

One relatively simple way (for R core) to reach that goal would
be to declare that  print.default() will be used in all cases
for ``basic classes'' and consequently
"forbid"  print.<basic>() in the sense that such functions would
be regular functions and not be used for (S3) print() method dispatch.
{We could define <basic> to be one of the basic SEXPs i.e. typeof()
 + some of the basic aliases "call", "name", "numeric",  (maybe plus
 "matrix", "array" ..)  or we could have a few basic classes for
 which methods are allowed, e.g. "function", and disallow all others.
}
That would allow the internal code to remain fast and not have
to consider dispatch to user/package provided print.numeric() etc.

But that would of course break previous use such as Bill's
examples for integer and complex (below).
It would be a clear API change, but probably only break didactic code.
All "production" code (incl all packages) really should define
a _new_ class for having customized printing.


Also, correct separation between print() and auto-print may be
difficult really if basic objects are involved:

  > print.numeric <- function(x, ...) { cat("print(<numeric>): "); str(x, ...) }
  > print(pi, digits = 11)
  print(<numeric>):  num 3.1415926536

  > L <- list(pi = pi, i = 1:2)
  > print(L)
  $pi
  [1] 3.141593

  $i
  [1] 1 2
  > print(L$pi)
  print(<numeric>):  num 3.14
  > 

and we typically would not want that print()ing large objects with data,
i.e., numeric vectors, would have to check for the presence of a
print.numeric() method (and if present call it) for all of these ...

Martin


    >>> > On 21 May 2019, at 13:38, William Dunlap via R-devel <
    >>> r-devel at r-project.org> wrote:
    >>> >
    >>> > It also is a problem with storage.modes "integer" and "complex":
    >>> >
    >>> > 3.6.0> print.integer <- function(x,...) "integer vector"
    >>> >                3.6.0> 1:10
    >>> > [1]  1  2  3  4  5  6  7  8  9 10
    >>> > 3.6.0> print(1:10)
    >>> > [1] "integer vector"
    >>> > 3.6.0>
    >>> > 3.6.0> print.complex <- function(x, ...) "complex vector"
    >>> > 3.6.0> 1+2i
    >>> > [1] 1+2i
    >>> > 3.6.0> print(1+2i)
    >>> > [1] "complex vector"
    >>> >
    >>> > Bill Dunlap
    >>> > TIBCO Software
    >>> > wdunlap tibco.com
    >>> >
    >>> >
    >>> > On Tue, May 21, 2019 at 9:31 AM Martin Maechler <
    >>> maechler at stat.math.ethz.ch>
    >>> > wrote:
    >>> >
    >>> >>>>>>> William Dunlap via R-devel
    >>> >>>>>>>    on Thu, 16 May 2019 11:56:45 -0700 writes:
    >>> >>
    >>> >>> In R-3.6.0 autoprinting was changed so that print methods for the
    >>> >> storage
    >>> >>> modes are not called when there is no explicit class attribute.
    >>> >> E.g.,
    >>> >>
    >>> >>> % R-3.6.0 --vanilla --quiet
    >>> >>>> print.function <- function(x, ...) { cat("Function with argument
    >>> >> list ");
    >>> >>> cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
    >>> >>>> f <- function(x, ...) { sum( x * seq_along(x) ) }
    >>> >>>> f
    >>> >>> function(x, ...) { sum( x * seq_along(x) ) }
    >>> >>>> print(f)
    >>> >>> Function with argument list function (x, ...)
    >>> >>
    >>> >>> Previous to R-3.6.0 autoprinting did call such methods
    >>> >>> % R-3.5.3 --vanilla --quiet
    >>> >>>> print.function <- function(x, ...) { cat("Function with argument
    >>> >> list ");
    >>> >>> cat(sep="\n    ", head(deparse(args(x)), -1)); invisible(x) }
    >>> >>>> f <- function(x, ...) { sum( x * seq_along(x) ) }
    >>> >>>> f
    >>> >>> Function with argument list function (x, ...)
    >>> >>>> print(f)
    >>> >>> Function with argument list function (x, ...)
    >>> >>
    >>> >>> Was this intentional?
    >>> >>
    >>> >> No, it was not.  ... and I've been the one committing the wrong change.
    >>> >>
    >>> >> ... Related to the NEWS entries which start
    >>> >>
    >>> >>     "Changes in print.*() ...."
    >>> >>
    >>> >> Thank you Bill, for reporting....
    >>> >>
    >>> >> It's amazing this has not been detected earlier by anybody.
    >>> >>
    >>> >> I think it is *only* for functions, not general
    >>> >> print.<storagemode>() as you were suggesting - right?
    >>> >>
    >>> >> Martin
    >>> >>


From ||one| @end|ng |rom r@tud|o@com  Wed May 22 16:25:46 2019
From: ||one| @end|ng |rom r@tud|o@com (Lionel Henry)
Date: Wed, 22 May 2019 10:25:46 -0400
Subject: [Rd] print.<strorageMode>() not called when autoprinting
In-Reply-To: <23780.65330.841197.95483@stat.math.ethz.ch>
References: <CAF8bMcatAtZ_LPWZk3QxVQXS5qHA14_j=_tBvGbbH+m0kBYnAQ@mail.gmail.com>
 <23780.10058.726995.538115@stat.math.ethz.ch>
 <CAF8bMcYeVioX6-vxz+-P6SsFHyoU6QSBD55_veNcvXpw7wEdyA@mail.gmail.com>
 <76885C3C-1100-490B-990E-5519F6AAD40B@rstudio.com>
 <CAF8bMcYX5o2joaqXa2F2Tw8iU-CvN8FmmGm58Yezs-RnwWxEGQ@mail.gmail.com>
 <23780.65330.841197.95483@stat.math.ethz.ch>
Message-ID: <411491BA-CE6C-4289-954B-EF3D31670669@rstudio.com>

Hi Martin,

> On 22 May 2019, at 03:50, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
> I'm pretty sure that all teaching and documentation about S and R 
> has suggested that  print(f)  and auto-printing should result in
> the same output _ AFAIR also for S4 objects

I agree with the principle that autoprint and print() should be
equivalent for users. However it also seems that print calls in
packages should be independent of user customisations. For instance a
package author might gather tabular data in a matrix or data frame and
print() it as part of a larger print method. In that case, user
customisations might cause a mess.

Would it make sense to resort to autoprint customisation when the
topenv() of the parent.frame() of print() is the global environment,
and ignore the customisation otherwise? This should ensure consistent
printing behaviour at the REPL and in scripts. Checking the topenv()
allows print() calls inserted to debug lapply'd functions to behave the
same as when called from top level or within a loop.

Lionel


From |uke-t|erney @end|ng |rom u|ow@@edu  Wed May 22 16:28:55 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Wed, 22 May 2019 14:28:55 +0000
Subject: [Rd] [External]  make running on.exit expr uninterruptible
In-Reply-To: <E1hTNOY-00039f-Br@rmmprod07.runbox>
References: <E1hTNOY-00039f-Br@rmmprod07.runbox>
Message-ID: <alpine.LFD.2.21.1905220916430.3300@itasca.stat.uiowa.edu>

suspendInterrupts has dynamic extent, so you need to make sure it
covers the entire computation. Defining your f like this is one option:

f <- function() {
     ff <- function() {
         on.exit(cntr_on.exit <<- cntr_on.exit + 1L)
         cntr_f <<- cntr_f + 1L
         ## allowInterrupts(... interruptable stuff ...)
         TRUE
     }
     suspendInterrupts(ff())
}

You can move the suspendInterrupts higher up in the computation, but
then it becomes more important to use allowInterrupts at appropriate
points.

It would be possible to have R suspend interrupts around function
calling infrastructure to provide stronger guarantees about
non-interruptable on.exit/finally actions, but there are both upsides
and downsides to doing that.

Best,

luke


On Wed, 22 May 2019, Andreas Kersting wrote:

> Hi,
>
> Is there currently any way to guarantee that on.exit does not fail to execute the recorded expression because of a user interrupt arriving during function exit? Consider:
>
> f <- function() {
>  suspendInterrupts({
>    on.exit(suspendInterrupts(cntr_on.exit <<- cntr_on.exit + 1L))
>    cntr_f <<- cntr_f + 1L
>  })
>  TRUE
> }
>
> It is possible to interrupt this function such that cntr_f is incremented while cntr_on.exit is not (you might need to adjust timeout_upper to trigger the error on your machine):
>
> timeout_upper <- 0.00001
> repeat {
>  cntr_f <- 0L
>  cntr_on.exit <- 0L
>
>  # timeout code borrowed from R.utils::withTimeout but with setTimeLimit()
>  # (correctly) place inside tryCatch (otherwise timeout can occur before it can
>  # be caught) and with time limit reset before going into the error handler
>  res_list <- lapply(seq(0, timeout_upper, length.out = 1000), function(timeout) {
>    on.exit({
>      setTimeLimit(cpu = Inf, elapsed = Inf, transient = FALSE)
>    })
>    tryCatch({
>      setTimeLimit(cpu = timeout, elapsed = timeout, transient = TRUE)
>      res <- f()
>
>      # avoid timeout while running error handler
>      setTimeLimit(cpu = Inf, elapsed = Inf, transient = FALSE)
>
>      res
>    }, error = function(ex) {
>      msg <- ex$message
>      pattern <- gettext("reached elapsed time limit", "reached CPU time limit",
>                         domain = "R")
>      pattern <- paste(pattern, collapse = "|")
>      if (regexpr(pattern, msg) != -1L) {
>        FALSE
>      }
>      else {
>        stop(ex)
>      }
>    })
>  })
>  print(sum(unlist(res_list)))  # number of times f completed
>  stopifnot(cntr_on.exit == cntr_f)
> }
>
> Example output:
>
> 1] 1000
> [1] 1000
> [1] 1000
> [1] 1000
> [1] 999
> [1] 1000
> [1] 1000
> [1] 999
> [1] 998
> [1] 1000
> [1] 998
> [1] 1000
> [1] 1000
> [1] 1000
> [1] 1000
> [1] 999
> Error: cntr_on.exit == cntr_f is not TRUE
>
> I was bitten by this because an on.exit expression, which releases a file lock, was interrupted (before it actually executed) such that subsequent calls block indefinitely.
>
> Regards,
> Andreas
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From pmenze| @end|ng |rom mo|gen@mpg@de  Wed May 22 07:08:47 2019
From: pmenze| @end|ng |rom mo|gen@mpg@de (Paul Menzel)
Date: Wed, 22 May 2019 07:08:47 +0200
Subject: [Rd] HTTPS warning on developer.r-project.org
Message-ID: <ab2d5a83-ee7e-d4e7-730a-b2f6c2342ddc@molgen.mpg.de>

[Please CC me on replies, as I am not subscribed.]

Dear R folks,


Accessing the *R Developer Page* [1], the browser (Firefox) shows an 
HTTPS warning.

The reason is the embedded Google logo.

> Gemischte (unsichere) Anzeige-Inhalte von "http://www.google.com/logos/Logo_40wht.gif" werden auf einer sicheren Seite geladen
Could you change that to an HTTPS link please?

```
$ curl -I https://www.google.com/logos/Logo_40wht.gif
HTTP/2 200
accept-ranges: bytes
content-type: image/gif
content-length: 3845
date: Wed, 22 May 2019 05:07:35 GMT
expires: Wed, 22 May 2019 05:07:35 GMT
cache-control: private, max-age=31536000
last-modified: Thu, 08 Dec 2016 01:00:57 GMT
x-content-type-options: nosniff
server: sffe
x-xss-protection: 0
alt-svc: quic=":443"; ma=2592000; v="46,44,43,39"

```


Kind regards,

Paul


[1]: https://developer.r-project.org/


From @|mon@urb@nek @end|ng |rom R-project@org  Wed May 22 17:54:49 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 22 May 2019 11:54:49 -0400
Subject: [Rd] HTTPS warning on developer.r-project.org
In-Reply-To: <ab2d5a83-ee7e-d4e7-730a-b2f6c2342ddc@molgen.mpg.de>
References: <ab2d5a83-ee7e-d4e7-730a-b2f6c2342ddc@molgen.mpg.de>
Message-ID: <A7AA303A-C8CB-4C6F-B137-32E69EB840EF@R-project.org>

More to the point: the custom search function is currently broken anyway - it just gives me 404.

Should we just get rid of it? If people want to use Google they can just say

site:developer.r-project.org foo





> On May 22, 2019, at 1:08 AM, Paul Menzel <pmenzel at molgen.mpg.de> wrote:
> 
> [Please CC me on replies, as I am not subscribed.]
> 
> Dear R folks,
> 
> 
> Accessing the *R Developer Page* [1], the browser (Firefox) shows an HTTPS warning.
> 
> The reason is the embedded Google logo.
> 
>> Gemischte (unsichere) Anzeige-Inhalte von "http://www.google.com/logos/Logo_40wht.gif" werden auf einer sicheren Seite geladen
> Could you change that to an HTTPS link please?
> 
> ```
> $ curl -I https://www.google.com/logos/Logo_40wht.gif
> HTTP/2 200
> accept-ranges: bytes
> content-type: image/gif
> content-length: 3845
> date: Wed, 22 May 2019 05:07:35 GMT
> expires: Wed, 22 May 2019 05:07:35 GMT
> cache-control: private, max-age=31536000
> last-modified: Thu, 08 Dec 2016 01:00:57 GMT
> x-content-type-options: nosniff
> server: sffe
> x-xss-protection: 0
> alt-svc: quic=":443"; ma=2592000; v="46,44,43,39"
> 
> ```
> 
> 
> Kind regards,
> 
> Paul
> 
> 
> [1]: https://developer.r-project.org/
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From |uke-t|erney @end|ng |rom u|ow@@edu  Wed May 22 18:03:00 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Wed, 22 May 2019 16:03:00 +0000
Subject: [Rd] [External] Re: print.<strorageMode>() not called when
 autoprinting
In-Reply-To: <411491BA-CE6C-4289-954B-EF3D31670669@rstudio.com>
References: <CAF8bMcatAtZ_LPWZk3QxVQXS5qHA14_j=_tBvGbbH+m0kBYnAQ@mail.gmail.com>
 <23780.10058.726995.538115@stat.math.ethz.ch>
 <CAF8bMcYeVioX6-vxz+-P6SsFHyoU6QSBD55_veNcvXpw7wEdyA@mail.gmail.com>
 <76885C3C-1100-490B-990E-5519F6AAD40B@rstudio.com>
 <CAF8bMcYX5o2joaqXa2F2Tw8iU-CvN8FmmGm58Yezs-RnwWxEGQ@mail.gmail.com>
 <23780.65330.841197.95483@stat.math.ethz.ch>
 <411491BA-CE6C-4289-954B-EF3D31670669@rstudio.com>
Message-ID: <alpine.DEB.2.21.1905221051470.2805@luke-Latitude-7480>

On Wed, 22 May 2019, Lionel Henry wrote:

> Hi Martin,
>
>> On 22 May 2019, at 03:50, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>>
>> I'm pretty sure that all teaching and documentation about S and R
>> has suggested that  print(f)  and auto-printing should result in
>> the same output _ AFAIR also for S4 objects

Looks like we intend auto-printing to do what evaluating the expression

    if (base::isS4(base::.Last.value)) methods::show(base::.Last.value) else base::print(base::.lastValue)

would do. The simplest approach would be to save this expression and
pass it to eval, or define an equivalent .autoprint function. That
would avoid code duplication and divergence.

I'm guessing the main reason we don't do this is that going through
the print() closure bumps NAMED on the value and forces a duplicate on
a subsequent assignment. This issue would disappear if we could manage
the transition to reference counting. In the meantime it would seem
best to keep any changes consistent with evaluating this expression.

Best,

luke

>
> I agree with the principle that autoprint and print() should be
> equivalent for users. However it also seems that print calls in
> packages should be independent of user customisations. For instance a
> package author might gather tabular data in a matrix or data frame and
> print() it as part of a larger print method. In that case, user
> customisations might cause a mess.
>
> Would it make sense to resort to autoprint customisation when the
> topenv() of the parent.frame() of print() is the global environment,
> and ignore the customisation otherwise? This should ensure consistent
> printing behaviour at the REPL and in scripts. Checking the topenv()
> allows print() calls inserted to debug lapply'd functions to behave the
> same as when called from top level or within a loop.
>
> Lionel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri May 24 08:51:35 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 24 May 2019 08:51:35 +0200
Subject: [Rd] HTTPS warning on developer.r-project.org
In-Reply-To: <A7AA303A-C8CB-4C6F-B137-32E69EB840EF@R-project.org>
References: <ab2d5a83-ee7e-d4e7-730a-b2f6c2342ddc@molgen.mpg.de>
 <A7AA303A-C8CB-4C6F-B137-32E69EB840EF@R-project.org>
Message-ID: <23783.38007.536111.221206@stat.math.ethz.ch>

>>>>> Simon Urbanek 
>>>>>     on Wed, 22 May 2019 11:54:49 -0400 writes:

    > More to the point: the custom search function is currently broken anyway - it just gives me 404.
    > Should we just get rid of it? If people want to use Google they can just say

    > site:developer.r-project.org foo

the problem is that > 99.5% of the users do not know the

    site:<server>  * 

trick ...



    >> On May 22, 2019, at 1:08 AM, Paul Menzel <pmenzel at molgen.mpg.de> wrote:
    >> 
    >> [Please CC me on replies, as I am not subscribed.]
    >> 
    >> Dear R folks,
    >> 
    >> 
    >> Accessing the *R Developer Page* [1], the browser (Firefox) shows an HTTPS warning.
    >> 
    >> The reason is the embedded Google logo.
    >> 
    >>> Gemischte (unsichere) Anzeige-Inhalte von "http://www.google.com/logos/Logo_40wht.gif" werden auf einer sicheren Seite geladen
    >> Could you change that to an HTTPS link please?
    >> 
    >> ```
    >> $ curl -I https://www.google.com/logos/Logo_40wht.gif
    >> HTTP/2 200
    >> accept-ranges: bytes
    >> content-type: image/gif
    >> content-length: 3845
    >> date: Wed, 22 May 2019 05:07:35 GMT
    >> expires: Wed, 22 May 2019 05:07:35 GMT
    >> cache-control: private, max-age=31536000
    >> last-modified: Thu, 08 Dec 2016 01:00:57 GMT
    >> x-content-type-options: nosniff
    >> server: sffe
    >> x-xss-protection: 0
    >> alt-svc: quic=":443"; ma=2592000; v="46,44,43,39"
    >> 
    >> ```
    >> 
    >> 
    >> Kind regards,
    >> 
    >> Paul
    >> 
    >> 
    >> [1]: https://developer.r-project.org/
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From jenny @end|ng |rom r@tud|o@com  Thu May 23 06:03:05 2019
From: jenny @end|ng |rom r@tud|o@com (Jennifer Bryan)
Date: Thu, 23 May 2019 00:03:05 -0400
Subject: [Rd] writing Unicode text to the Windows clipboard
Message-ID: <CANe9BHG6LFE2kKRJ=xB8Tpz-krDw0WiSS0n+25po9f-2FxZkHw@mail.gmail.com>

Hello,

I'm interested in moving text from and to the clipboard that cannot
necessarily be represented in the native encoding. So, really, this is
about Windows.

I can successfully read from the clipboard by specifying the format that
corresponds to unicode text.

From R >=2.7.0, it seems you should also be able to write unicode text
to the Windows clipboard.

https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/gnuwin32/CHANGES0#L535-L536

However, in my hands, this does not seem to be true. I can make it work
with this change:

diff --git a/src/library/utils/src/windows/util.c
b/src/library/utils/src/windows/util.c
index 373049495dd..fc3dc39e3a7 100644
--- a/src/library/utils/src/windows/util.c
+++ b/src/library/utils/src/windows/util.c
@@ -318,7 +318,7 @@ SEXP writeClipboard(SEXP text, SEXP sformat)
  warning(_("unable to open the clipboard"));
  GlobalFree(hglb);
      } else {
- success = SetClipboardData(CF_TEXT, hglb) != 0;
+ success = SetClipboardData(format, hglb) != 0;
  if(!success) {
      warning(_("unable to write to the clipboard"));
      GlobalFree(hglb);

Example:

"?" is "GREATER-THAN OVER EQUAL TO", which is unicode <U+2267>, has
UTF-16LE bytes 67 22, and is not representable in latin1.

I copy ? to the Windows clipboard and attempt a round trip. I see:

x <- readClipboard(format = 13, raw = TRUE) # 13 <--> "Unicode text"
#> [1] 67 22 00 00
writeClipboard(x, format = 13L)
readClipboard(format = 13, raw = TRUE)
#> [1] 67 00 22 00 00 00 00 00

and, literally, pasting yields: g"

If I build r-devel with the patch, the same process yields

x <- readClipboard(format = 13, raw = TRUE)
#> [1] 67 22 00 00
writeClipboard(x, format = 13)
readClipboard(format = 13, raw = TRUE)
#> [1] 67 22 00 00

and pasting returns the original input: ?

Passing the `format` to SetClipboardData() instead of hard-wiring
"CF_TEXT" brings behaviour in line with the docs.

-- Jenny

	[[alternative HTML version deleted]]


From P@u|@W|kr@m@r@tn@ @end|ng |rom @m@rtodd@@co@uk  Thu May 23 14:32:53 2019
From: P@u|@W|kr@m@r@tn@ @end|ng |rom @m@rtodd@@co@uk (Paul Wikramaratna)
Date: Thu, 23 May 2019 12:32:53 +0000
Subject: [Rd] Typo/bug in R-3.6.0/src/scripts/config ?
Message-ID: <1558614773428.85693@smartodds.co.uk>

Hi there,


I think there is a typo in the src/scripts/config file for R 3.6.0


This is my R version:


platform       x86_64-suse-linux-gnu
arch           x86_64
os             linux-gnu
system         x86_64, linux-gnu
status
major          3
minor          6.0
year           2019
month          04
day            26
svn rev        76424
language       R
version.string R version 3.6.0 (2019-04-26)
nickname       Planting of a Tree


I think that on line 277 of src/scripts/config "CXX17PICFLAGSS" should read "CXX17PICFLAGS"


On my UNIX-alike, without this change I get:


R CMD config CXX17PICFLAGS
ERROR: no information for variable 'CXX17PICFLAGS'


but if I delete the second S, then I get:


R CMD config CXX17PICFLAGS
-fPIC


which is the same as on R 3.5.2


Have had a look and couldn't see an existing bug report, apologies if I missed it (am trying to follow the advice here: https://www.r-project.org/bugs.html)<https://www.r-project.org/bugs.html>.


Best, Paul



______________________________________________________________________
This email has been scanned by the Symantec Email Security.cloud service.
For more information please visit http://www.symanteccloud.com
______________________________________________________________________

This e-mail and any files transmitted with it are confid...{{dropped:11}}


From woo@k@r@ @end|ng |rom gm@||@com  Thu May 23 23:24:26 2019
From: woo@k@r@ @end|ng |rom gm@||@com (Kara Woo)
Date: Thu, 23 May 2019 14:24:26 -0700
Subject: [Rd] Possible bug when finding shared libraries during staged
 installation
Message-ID: <CAEvqV34wSchVg+YW57khWh7NffGOyCeYd5PbmC+1x5OUZk-jRQ@mail.gmail.com>

Hi all,

With the new staged installation, it seems that R CMD INSTALL sometimes
fails on macOS due to these lines [1] when sapply() returns a list. The
x13binary package has an example [2], reproducible with the following steps:

$ git clone git at github.com:x13org/x13binary.git && cd x13binary
$ git checkout 663ad7122
$ R CMD INSTALL .

(We've also run into it in an internal package, but it's easier to
reproduce with x13binary)

In this case the file command returns multiple results for one of the
dynamic libraries, so are_shared looks like this:

> are_shared
$`/Users/Kara/projects/forks/x13binary/inst//lib/libgcc_s.1.dylib`
[1] TRUE TRUE TRUE

$`/Users/Kara/projects/forks/x13binary/inst//lib/libgfortran.3.dylib`
[1] TRUE

$`/Users/Kara/projects/forks/x13binary/inst//lib/libquadmath.0.dylib`
[1] TRUE

slibs[are_shared] then fails with invalid subscript type 'list'.

I believe this may be a bug and I have included a patch that uses any() and
vapply() to ensure that only one value is returned for each library and the
result is an atomic vector. This is my first time submitting a bug report
or patch here; I'm happy to make any changes if needed.

Thanks for considering,
Kara

[1]
https://github.com/wch/r-source/blob/3fe2bb01e9ec1b268803a437c308742775c2442d/src/library/tools/R/install.R#L594-L597
[2] https://github.com/x13org/x13binary/issues/46

R version 3.6.0 Patched (2019-05-22 r76579)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Mojave 10.14.4

From jenny@|@bry@n @end|ng |rom gm@||@com  Fri May 24 08:16:15 2019
From: jenny@|@bry@n @end|ng |rom gm@||@com (Jennifer Bryan)
Date: Thu, 23 May 2019 23:16:15 -0700
Subject: [Rd] writing Unicode text to the Windows clipboard
Message-ID: <CANe9BHFzyng5mX6VE6zmB3E0k=eyj9tvuegrbeUMe++BnTgJ0Q@mail.gmail.com>

Hello,

I'm interested in moving text from and to the clipboard that cannot
necessarily be represented in the native encoding. So, really, this is
about Windows.

I can successfully read from the clipboard by specifying the format that
corresponds to unicode text.

From R >=2.7.0, it seems you should also be able to write unicode text
to the Windows clipboard.

https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/gnuwin32/CHANGES0#L535-L536

However, in my hands, this does not seem to be true. I can make it work
with this change:

diff --git a/src/library/utils/src/windows/util.c
b/src/library/utils/src/windows/util.c
index 373049495dd..fc3dc39e3a7 100644
--- a/src/library/utils/src/windows/util.c
+++ b/src/library/utils/src/windows/util.c
@@ -318,7 +318,7 @@ SEXP writeClipboard(SEXP text, SEXP sformat)
  warning(_("unable to open the clipboard"));
  GlobalFree(hglb);
      } else {
- success = SetClipboardData(CF_TEXT, hglb) != 0;
+ success = SetClipboardData(format, hglb) != 0;
  if(!success) {
      warning(_("unable to write to the clipboard"));
      GlobalFree(hglb);

Example:

"?" is "GREATER-THAN OVER EQUAL TO", which is unicode <U+2267>, has
UTF-16LE bytes 67 22, and is not representable in latin1.

I copy ? to the Windows clipboard and attempt a round trip. I see:

x <- readClipboard(format = 13, raw = TRUE) # 13 <--> "Unicode text"
#> [1] 67 22 00 00
writeClipboard(x, format = 13L)
readClipboard(format = 13, raw = TRUE)
#> [1] 67 00 22 00 00 00 00 00

and, literally, pasting yields: g"

If I build r-devel with the patch, the same process yields

x <- readClipboard(format = 13, raw = TRUE)
#> [1] 67 22 00 00
writeClipboard(x, format = 13)
readClipboard(format = 13, raw = TRUE)
#> [1] 67 22 00 00

and pasting returns the original input: ?

Passing the `format` to SetClipboardData() instead of hard-wiring
"CF_TEXT" brings behaviour in line with the docs.

-- Jenny

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri May 24 09:40:07 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 24 May 2019 09:40:07 +0200
Subject: [Rd] Typo/bug in R-3.6.0/src/scripts/config ?
In-Reply-To: <1558614773428.85693@smartodds.co.uk>
References: <1558614773428.85693@smartodds.co.uk>
Message-ID: <23783.40919.534603.830065@stat.math.ethz.ch>

>>>>> Paul Wikramaratna 
>>>>>     on Thu, 23 May 2019 12:32:53 +0000 writes:

    > Hi there,
    > I think there is a typo in the src/scripts/config file for R 3.6.0


    > This is my R version:


    > platform       x86_64-suse-linux-gnu
    > arch           x86_64
    > os             linux-gnu
    > system         x86_64, linux-gnu
    > status
    > major          3
    > minor          6.0
    > year           2019
    > month          04
    > day            26
    > svn rev        76424
    > language       R
    > version.string R version 3.6.0 (2019-04-26)
    > nickname       Planting of a Tree


    > I think that on line 277 of src/scripts/config "CXX17PICFLAGSS" should read "CXX17PICFLAGS"


    > On my UNIX-alike, without this change I get:


    > R CMD config CXX17PICFLAGS
    > ERROR: no information for variable 'CXX17PICFLAGS'


    > but if I delete the second S, then I get:


    > R CMD config CXX17PICFLAGS
    > -fPIC


    > which is the same as on R 3.5.2


    > Have had a look and couldn't see an existing bug report, apologies if I missed it (am trying to follow the advice here: https://www.r-project.org/bugs.html)<https://www.r-project.org/bugs.html>.


    > Best, Paul

Thank you, Paul!

The typo is fixed in the sources of both "R-devel" and "R 3.6.0
patched" now.

With grateful regards,
Martin
--
Martin Maechler
ETH Zurich and R Core Team


From c@g|||e@p|e @end|ng |rom gm@||@com  Fri May 24 09:57:28 2019
From: c@g|||e@p|e @end|ng |rom gm@||@com (Colin Gillespie)
Date: Fri, 24 May 2019 08:57:28 +0100
Subject: [Rd] HTTPS warning on developer.r-project.org
In-Reply-To: <A7AA303A-C8CB-4C6F-B137-32E69EB840EF@R-project.org>
References: <ab2d5a83-ee7e-d4e7-730a-b2f6c2342ddc@molgen.mpg.de>
 <A7AA303A-C8CB-4C6F-B137-32E69EB840EF@R-project.org>
Message-ID: <CADbDLZk-Q2zacn3RdVpYs2XtjfW+9z=iecnbiA=50pqu-SMHAQ@mail.gmail.com>

On Wed, 22 May 2019 at 16:55, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>
> More to the point: the custom search function is currently broken anyway - it just gives me 404.
>
> Should we just get rid of it?

Does anyone actually use it? Are there logs available?

Colin


>If people want to use Google they can just say
>
> site:developer.r-project.org foo
>
>
>
>
>
> > On May 22, 2019, at 1:08 AM, Paul Menzel <pmenzel at molgen.mpg.de> wrote:
> >
> > [Please CC me on replies, as I am not subscribed.]
> >
> > Dear R folks,
> >
> >
> > Accessing the *R Developer Page* [1], the browser (Firefox) shows an HTTPS warning.
> >
> > The reason is the embedded Google logo.
> >
> >> Gemischte (unsichere) Anzeige-Inhalte von "http://www.google.com/logos/Logo_40wht.gif" werden auf einer sicheren Seite geladen
> > Could you change that to an HTTPS link please?
> >
> > ```
> > $ curl -I https://www.google.com/logos/Logo_40wht.gif
> > HTTP/2 200
> > accept-ranges: bytes
> > content-type: image/gif
> > content-length: 3845
> > date: Wed, 22 May 2019 05:07:35 GMT
> > expires: Wed, 22 May 2019 05:07:35 GMT
> > cache-control: private, max-age=31536000
> > last-modified: Thu, 08 Dec 2016 01:00:57 GMT
> > x-content-type-options: nosniff
> > server: sffe
> > x-xss-protection: 0
> > alt-svc: quic=":443"; ma=2592000; v="46,44,43,39"
> >
> > ```
> >
> >
> > Kind regards,
> >
> > Paul
> >
> >
> > [1]: https://developer.r-project.org/
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri May 24 14:52:54 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 24 May 2019 14:52:54 +0200
Subject: [Rd] Possible bug when finding shared libraries during staged
 installation
In-Reply-To: <CAEvqV34wSchVg+YW57khWh7NffGOyCeYd5PbmC+1x5OUZk-jRQ@mail.gmail.com>
References: <CAEvqV34wSchVg+YW57khWh7NffGOyCeYd5PbmC+1x5OUZk-jRQ@mail.gmail.com>
Message-ID: <23783.59686.93067.483632@stat.math.ethz.ch>

>>>>> Kara Woo 
>>>>>     on Thu, 23 May 2019 14:24:26 -0700 writes:

    > Hi all,
    > With the new staged installation, it seems that R CMD INSTALL sometimes
    > fails on macOS due to these lines [1] when sapply() returns a list. The
    > x13binary package has an example [2], reproducible with the following steps:

    > $ git clone git at github.com:x13org/x13binary.git && cd x13binary
    > $ git checkout 663ad7122
    > $ R CMD INSTALL .

    > (We've also run into it in an internal package, but it's easier to
    > reproduce with x13binary)

    > In this case the file command returns multiple results for one of the
    > dynamic libraries, so are_shared looks like this:

    >> are_shared
    > $`/Users/Kara/projects/forks/x13binary/inst//lib/libgcc_s.1.dylib`
    > [1] TRUE TRUE TRUE

    > $`/Users/Kara/projects/forks/x13binary/inst//lib/libgfortran.3.dylib`
    > [1] TRUE

    > $`/Users/Kara/projects/forks/x13binary/inst//lib/libquadmath.0.dylib`
    > [1] TRUE

Thank you, Kara.

Just for curiosity, what does

 file /Users/Kara/projects/forks/x13binary/inst//lib/libgcc_s.1.dylib

produce on your Mac?

    > slibs[are_shared] then fails with invalid subscript type 'list'.

yes, "of course".

    > I believe this may be a bug and I have included a patch that uses any() and
    > vapply() to ensure that only one value is returned for each library and the
    > result is an atomic vector. This is my first time submitting a bug report
    > or patch here; I'm happy to make any changes if needed.

Your patch was not attached with MIME type   text/plain  and so
was filtered out by the mailing list software.
OTOH, I could relatively easily guess how to fix the bug,
notably when seeing the above "file ...dylib" result.

What we *meant* to say in  https://www.r-project.org/bugs.html 
is that in such a situation
1) you send your finding / suspicion / diagnosis
   to the R-devel mailing list,  in order to get confirmation etc
   if what you see is a bug;
2) then ideally, you'd do a formal bug report at
   https://bugs.r-project.org/
	(for which you need to get an "account" there to be created
	 once only by a bugzilla admin, typically an R core member).

In this case, that (2) may not be necessary, but you may want
that anyway (and let some of us know).

    > Thanks for considering,
    > Kara

Thank *you* indeed for the report,
Martin

    > [1]
    > https://github.com/wch/r-source/blob/3fe2bb01e9ec1b268803a437c308742775c2442d/src/library/tools/R/install.R#L594-L597
    > [2] https://github.com/x13org/x13binary/issues/46

    > R version 3.6.0 Patched (2019-05-22 r76579)
    > Platform: x86_64-apple-darwin15.6.0 (64-bit)
    > Running under: macOS Mojave 10.14.4

--
Martin Maechler
ETH Zurich  and  R Core Team


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri May 24 14:58:44 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 24 May 2019 14:58:44 +0200
Subject: [Rd] Possible bug when finding shared libraries during staged
 installation
In-Reply-To: <23783.59686.93067.483632@stat.math.ethz.ch>
References: <CAEvqV34wSchVg+YW57khWh7NffGOyCeYd5PbmC+1x5OUZk-jRQ@mail.gmail.com>
 <23783.59686.93067.483632@stat.math.ethz.ch>
Message-ID: <b0dc0646-50fd-9f27-62c7-ff1e3a4e925c@gmail.com>

On 5/24/19 2:52 PM, Martin Maechler wrote:
>>>>>> Kara Woo
>>>>>>      on Thu, 23 May 2019 14:24:26 -0700 writes:
>      > Hi all,
>      > With the new staged installation, it seems that R CMD INSTALL sometimes
>      > fails on macOS due to these lines [1] when sapply() returns a list. The
>      > x13binary package has an example [2], reproducible with the following steps:
>
>      > $ git clone git at github.com:x13org/x13binary.git && cd x13binary
>      > $ git checkout 663ad7122
>      > $ R CMD INSTALL .
>
>      > (We've also run into it in an internal package, but it's easier to
>      > reproduce with x13binary)
>
>      > In this case the file command returns multiple results for one of the
>      > dynamic libraries, so are_shared looks like this:
>
>      >> are_shared
>      > $`/Users/Kara/projects/forks/x13binary/inst//lib/libgcc_s.1.dylib`
>      > [1] TRUE TRUE TRUE
>
>      > $`/Users/Kara/projects/forks/x13binary/inst//lib/libgfortran.3.dylib`
>      > [1] TRUE
>
>      > $`/Users/Kara/projects/forks/x13binary/inst//lib/libquadmath.0.dylib`
>      > [1] TRUE
>
> Thank you, Kara.
>
> Just for curiosity, what does
>
>   file /Users/Kara/projects/forks/x13binary/inst//lib/libgcc_s.1.dylib
>
> produce on your Mac?

I can reproduce, it is something like

/usr/lib/libgcc_s.1.dylib: Mach-O universal binary with 2 architectures: 
[x86_64:Mach-O 64-bit dynamically linked shared library x86_64] 
[i386:Mach-O dynamically linked shared library i386]
/usr/lib/libgcc_s.1.dylib (for architecture x86_64):??? Mach-O 64-bit 
dynamically linked shared library x86_64
/usr/lib/libgcc_s.1.dylib (for architecture i386):??? Mach-O dynamically 
linked shared library i386

Thanks for the report, I will fix.

Tomas

>
>      > slibs[are_shared] then fails with invalid subscript type 'list'.
>
> yes, "of course".
>
>      > I believe this may be a bug and I have included a patch that uses any() and
>      > vapply() to ensure that only one value is returned for each library and the
>      > result is an atomic vector. This is my first time submitting a bug report
>      > or patch here; I'm happy to make any changes if needed.
>
> Your patch was not attached with MIME type   text/plain  and so
> was filtered out by the mailing list software.
> OTOH, I could relatively easily guess how to fix the bug,
> notably when seeing the above "file ...dylib" result.
>
> What we *meant* to say in  https://www.r-project.org/bugs.html
> is that in such a situation
> 1) you send your finding / suspicion / diagnosis
>     to the R-devel mailing list,  in order to get confirmation etc
>     if what you see is a bug;
> 2) then ideally, you'd do a formal bug report at
>     https://bugs.r-project.org/
> 	(for which you need to get an "account" there to be created
> 	 once only by a bugzilla admin, typically an R core member).
>
> In this case, that (2) may not be necessary, but you may want
> that anyway (and let some of us know).
>
>      > Thanks for considering,
>      > Kara
>
> Thank *you* indeed for the report,
> Martin
>
>      > [1]
>      > https://github.com/wch/r-source/blob/3fe2bb01e9ec1b268803a437c308742775c2442d/src/library/tools/R/install.R#L594-L597
>      > [2] https://github.com/x13org/x13binary/issues/46
>
>      > R version 3.6.0 Patched (2019-05-22 r76579)
>      > Platform: x86_64-apple-darwin15.6.0 (64-bit)
>      > Running under: macOS Mojave 10.14.4
>
> --
> Martin Maechler
> ETH Zurich  and  R Core Team
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Fri May 24 15:00:27 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 24 May 2019 09:00:27 -0400
Subject: [Rd] Possible bug when finding shared libraries during staged
 installation
In-Reply-To: <23783.59686.93067.483632@stat.math.ethz.ch>
References: <CAEvqV34wSchVg+YW57khWh7NffGOyCeYd5PbmC+1x5OUZk-jRQ@mail.gmail.com>
 <23783.59686.93067.483632@stat.math.ethz.ch>
Message-ID: <C0650760-CC91-4DA5-B2E3-4735591FC476@R-project.org>

I'll have a look at the code - I don't think I actually reviewed all those macOS modifications - I wasn't even aware that they were added to the code.


> On May 24, 2019, at 08:52, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
>>>>>> Kara Woo 
>>>>>>    on Thu, 23 May 2019 14:24:26 -0700 writes:
> 
>> Hi all,
>> With the new staged installation, it seems that R CMD INSTALL sometimes
>> fails on macOS due to these lines [1] when sapply() returns a list. The
>> x13binary package has an example [2], reproducible with the following steps:
> 
>> $ git clone git at github.com:x13org/x13binary.git && cd x13binary
>> $ git checkout 663ad7122
>> $ R CMD INSTALL .
> 
>> (We've also run into it in an internal package, but it's easier to
>> reproduce with x13binary)
> 
>> In this case the file command returns multiple results for one of the
>> dynamic libraries, so are_shared looks like this:
> 
>>> are_shared
>> $`/Users/Kara/projects/forks/x13binary/inst//lib/libgcc_s.1.dylib`
>> [1] TRUE TRUE TRUE
> 
>> $`/Users/Kara/projects/forks/x13binary/inst//lib/libgfortran.3.dylib`
>> [1] TRUE
> 
>> $`/Users/Kara/projects/forks/x13binary/inst//lib/libquadmath.0.dylib`
>> [1] TRUE
> 
> Thank you, Kara.
> 
> Just for curiosity, what does
> 
> file /Users/Kara/projects/forks/x13binary/inst//lib/libgcc_s.1.dylib
> 
> produce on your Mac?
> 
>> slibs[are_shared] then fails with invalid subscript type 'list'.
> 
> yes, "of course".
> 
>> I believe this may be a bug and I have included a patch that uses any() and
>> vapply() to ensure that only one value is returned for each library and the
>> result is an atomic vector. This is my first time submitting a bug report
>> or patch here; I'm happy to make any changes if needed.
> 
> Your patch was not attached with MIME type   text/plain  and so
> was filtered out by the mailing list software.
> OTOH, I could relatively easily guess how to fix the bug,
> notably when seeing the above "file ...dylib" result.
> 
> What we *meant* to say in  https://www.r-project.org/bugs.html 
> is that in such a situation
> 1) you send your finding / suspicion / diagnosis
>   to the R-devel mailing list,  in order to get confirmation etc
>   if what you see is a bug;
> 2) then ideally, you'd do a formal bug report at
>   https://bugs.r-project.org/
> 	(for which you need to get an "account" there to be created
> 	 once only by a bugzilla admin, typically an R core member).
> 
> In this case, that (2) may not be necessary, but you may want
> that anyway (and let some of us know).
> 
>> Thanks for considering,
>> Kara
> 
> Thank *you* indeed for the report,
> Martin
> 
>> [1]
>> https://github.com/wch/r-source/blob/3fe2bb01e9ec1b268803a437c308742775c2442d/src/library/tools/R/install.R#L594-L597
>> [2] https://github.com/x13org/x13binary/issues/46
> 
>> R version 3.6.0 Patched (2019-05-22 r76579)
>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>> Running under: macOS Mojave 10.14.4
> 
> --
> Martin Maechler
> ETH Zurich  and  R Core Team
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From woo@k@r@ @end|ng |rom gm@||@com  Fri May 24 18:56:37 2019
From: woo@k@r@ @end|ng |rom gm@||@com (Kara Woo)
Date: Fri, 24 May 2019 09:56:37 -0700
Subject: [Rd] Possible bug when finding shared libraries during staged
 installation
In-Reply-To: <b0dc0646-50fd-9f27-62c7-ff1e3a4e925c@gmail.com>
References: <CAEvqV34wSchVg+YW57khWh7NffGOyCeYd5PbmC+1x5OUZk-jRQ@mail.gmail.com>
 <23783.59686.93067.483632@stat.math.ethz.ch>
 <b0dc0646-50fd-9f27-62c7-ff1e3a4e925c@gmail.com>
Message-ID: <CAEvqV37y6VqWh_v_rGjH2+BzN3QieNS+Xv36cUe24x4o2Bp1sQ@mail.gmail.com>

Yes, that's the same result that I see as well.

If you still want the formal report I can create one if someone adds me to
bugzilla, but it sounds like that may not be necessary. Thanks for looking
into this!

On Fri, May 24, 2019 at 5:58 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> On 5/24/19 2:52 PM, Martin Maechler wrote:
> >>>>>> Kara Woo
> >>>>>>      on Thu, 23 May 2019 14:24:26 -0700 writes:
> >      > Hi all,
> >      > With the new staged installation, it seems that R CMD INSTALL
> sometimes
> >      > fails on macOS due to these lines [1] when sapply() returns a
> list. The
> >      > x13binary package has an example [2], reproducible with the
> following steps:
> >
> >      > $ git clone git at github.com:x13org/x13binary.git && cd x13binary
> >      > $ git checkout 663ad7122
> >      > $ R CMD INSTALL .
> >
> >      > (We've also run into it in an internal package, but it's easier to
> >      > reproduce with x13binary)
> >
> >      > In this case the file command returns multiple results for one of
> the
> >      > dynamic libraries, so are_shared looks like this:
> >
> >      >> are_shared
> >      > $`/Users/Kara/projects/forks/x13binary/inst//lib/libgcc_s.1.dylib`
> >      > [1] TRUE TRUE TRUE
> >
> >      >
> $`/Users/Kara/projects/forks/x13binary/inst//lib/libgfortran.3.dylib`
> >      > [1] TRUE
> >
> >      >
> $`/Users/Kara/projects/forks/x13binary/inst//lib/libquadmath.0.dylib`
> >      > [1] TRUE
> >
> > Thank you, Kara.
> >
> > Just for curiosity, what does
> >
> >   file /Users/Kara/projects/forks/x13binary/inst//lib/libgcc_s.1.dylib
> >
> > produce on your Mac?
>
> I can reproduce, it is something like
>
> /usr/lib/libgcc_s.1.dylib: Mach-O universal binary with 2 architectures:
> [x86_64:Mach-O 64-bit dynamically linked shared library x86_64]
> [i386:Mach-O dynamically linked shared library i386]
> /usr/lib/libgcc_s.1.dylib (for architecture x86_64):    Mach-O 64-bit
> dynamically linked shared library x86_64
> /usr/lib/libgcc_s.1.dylib (for architecture i386):    Mach-O dynamically
> linked shared library i386
>
> Thanks for the report, I will fix.
>
> Tomas
>
> >
> >      > slibs[are_shared] then fails with invalid subscript type 'list'.
> >
> > yes, "of course".
> >
> >      > I believe this may be a bug and I have included a patch that uses
> any() and
> >      > vapply() to ensure that only one value is returned for each
> library and the
> >      > result is an atomic vector. This is my first time submitting a
> bug report
> >      > or patch here; I'm happy to make any changes if needed.
> >
> > Your patch was not attached with MIME type   text/plain  and so
> > was filtered out by the mailing list software.
> > OTOH, I could relatively easily guess how to fix the bug,
> > notably when seeing the above "file ...dylib" result.
> >
> > What we *meant* to say in  https://www.r-project.org/bugs.html
> > is that in such a situation
> > 1) you send your finding / suspicion / diagnosis
> >     to the R-devel mailing list,  in order to get confirmation etc
> >     if what you see is a bug;
> > 2) then ideally, you'd do a formal bug report at
> >     https://bugs.r-project.org/
> >       (for which you need to get an "account" there to be created
> >        once only by a bugzilla admin, typically an R core member).
> >
> > In this case, that (2) may not be necessary, but you may want
> > that anyway (and let some of us know).
> >
> >      > Thanks for considering,
> >      > Kara
> >
> > Thank *you* indeed for the report,
> > Martin
> >
> >      > [1]
> >      >
> https://github.com/wch/r-source/blob/3fe2bb01e9ec1b268803a437c308742775c2442d/src/library/tools/R/install.R#L594-L597
> >      > [2] https://github.com/x13org/x13binary/issues/46
> >
> >      > R version 3.6.0 Patched (2019-05-22 r76579)
> >      > Platform: x86_64-apple-darwin15.6.0 (64-bit)
> >      > Running under: macOS Mojave 10.14.4
> >
> > --
> > Martin Maechler
> > ETH Zurich  and  R Core Team
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>

	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Sat May 25 00:59:14 2019
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Sat, 25 May 2019 10:59:14 +1200
Subject: [Rd] 
 Give update.formula() an option not to simplify or reorder the
 result -- request for comments
In-Reply-To: <56ee72cb833f01d6eb3925452925d54f7c2e03d7.camel@uow.edu.au>
References: <56ee72cb833f01d6eb3925452925d54f7c2e03d7.camel@uow.edu.au>
Message-ID: <CAB8pepy_OJyxZNJMm=_GXQrcpYT0dXz22QrCCU0tSo+GRVEL1A@mail.gmail.com>

> Martin Maechler has asked me to send this to R-devel for discussion
> after I submitted it as an enhancement request (
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17563).

I think R needs to provide more support for CAS-style symbolic computation.
That is, support by either the R language itself or the standard packages,
or both.
(And certainly not by interfacing with another interpreted language).

Obviously, I don't speak for R Core.
However, this is how I would like to see R move in the future.
...improved symbolic and symbolic-numeric computation...

I think any changes to formula objects or their methods, should be
congruent with these symbolic improvements.

	[[alternative HTML version deleted]]


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Sat May 25 09:34:59 2019
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Sat, 25 May 2019 15:34:59 +0800
Subject: [Rd] \dots used improperly in ?Rprof examples
Message-ID: <CAPRVBczcDJ-4vACmpGkhjK1QYnsHzYgsLtrQ60wbTJ1p+NdvdA@mail.gmail.com>

\dots is used in the Usage section of the Rprof manual, but it's not
rendered as ...

I'm not sure if this should be \ldots, or just written manually with ...

Also, I think the Rprof() on the first line is intended to be on the second
line? So that the flow looks like

Rprof() # start profiling
## some code to be profiled
Rprof(NULL) # shut off profiling
## some code NOT to be profiled
Rprof(append = TRUE) # turn profiling back on and append output to current
file
## some code to be profiled
Rprof(NULL)
## ... et cetera
## Now post-process the output as described in Details

As it is the first line looks like it's commented out

Michael Chirico

	[[alternative HTML version deleted]]


From jeroen @end|ng |rom berke|ey@edu  Sat May 25 23:34:17 2019
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Sat, 25 May 2019 14:34:17 -0700
Subject: [Rd] writing Unicode text to the Windows clipboard
In-Reply-To: <CANe9BHG6LFE2kKRJ=xB8Tpz-krDw0WiSS0n+25po9f-2FxZkHw@mail.gmail.com>
References: <CANe9BHG6LFE2kKRJ=xB8Tpz-krDw0WiSS0n+25po9f-2FxZkHw@mail.gmail.com>
Message-ID: <CABFfbXsygNgD5hobQkOUteCOeeDFRnOgpnXUzhJK+vuvHA5qXg@mail.gmail.com>

On Fri, May 24, 2019 at 12:06 AM Jennifer Bryan <jenny at rstudio.com> wrote:
>
> Hello,
>
> I'm interested in moving text from and to the clipboard that cannot
> necessarily be represented in the native encoding. So, really, this is
> about Windows.
>
> I can successfully read from the clipboard by specifying the format that
> corresponds to unicode text.
>
> From R >=2.7.0, it seems you should also be able to write unicode text
> to the Windows clipboard.
>
> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/gnuwin32/CHANGES0#L535-L536

Thanks!

I tested this and can confirm that this patch works. With this change,
any (non ascii) unicode text now properly copies and pastes from/to
the Windows clipboard.


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Sun May 26 07:16:08 2019
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Sun, 26 May 2019 13:16:08 +0800
Subject: [Rd] rbind has confusing result for custom sub-class (possible bug?)
Message-ID: <CAPRVBcz2zPtcFbdJwtrmvHBOj1Z9u-oCBbH27a96=BAESaDq1Q@mail.gmail.com>

Debugging this issue:

https://github.com/Rdatatable/data.table/issues/2008

We have custom class 'IDate' which inherits from 'Date' (it just forces
integer storage for efficiency, hence, I).

The concatenation done by rbind, however, breaks this and returns a double:

library(data.table)
DF = data.frame(date = as.IDate(Sys.Date()))
storage.mode(rbind(DF, DF)$date)
# [1] "double"

This is specific to base::rbind (data.table's rbind returns an integer as
expected); in ?rbind we see:

The method dispatching is not done via UseMethod(), but by C-internal
dispatching. Therefore there is no need for, e.g., rbind.default.
The dispatch algorithm is described in the source file
(?.../src/main/bind.c?) as
1. For each argument we get the list of possible class memberships from the
class attribute.
2. *We inspect each class in turn to see if there is an applicable method.*
3. If we find an applicable method we make sure that it is identical to any
method determined for prior arguments. If it is identical, we proceed,
otherwise we immediately drop through to the default code.

It's not clear what #2 means -- an applicable method *for what*? Glancing
at the source code would suggest it's looking for rbind.IDate:

https://github.com/wch/r-source/blob/trunk/src/main/bind.c#L1051-L1063

const char *generic = ((PRIMVAL(op) == 1) ? "cbind" : "rbind"); // should
be rbind here
const char *s = translateChar(STRING_ELT(classlist, i)); // iterating over
the classes, should get to IDate first
sprintf(buf, "%s.%s", generic, s); // should be rbind.IDate

but adding this method (or even exporting it) is no help [ simply defining
rbind.IDate = function(...) as.IDate(NextMethod()) ]

Lastly, it appears that as.Date.IDate is called, which is causing the type
conversion:

debug(data.table:::as.Date.IDate)
rbind(DF, DF) # launches debugger
x
# [1] "2019-05-26" <-- singleton, so apparently applied to DF$date, not
c(DF$date, DF$date)
undebug(data.table:::as.Date.IDate)

I can't really wrap my head around why as.Date is being called here, and
even allowing that, why the end result is still the original class [
class(rbind(DF, DF)$date) == c('IDate', 'Date') ]

So, I'm beginning to think this might be a bug. Am I missing something?

	[[alternative HTML version deleted]]


From @|ex@ndre@court|o| @end|ng |rom gm@||@com  Sun May 26 10:45:06 2019
From: @|ex@ndre@court|o| @end|ng |rom gm@||@com (Alexandre Courtiol)
Date: Sun, 26 May 2019 10:45:06 +0200
Subject: [Rd] "if" function in pure R?
Message-ID: <CAERMt4fyeJ293njYHCFVZhYpm1Y8NaU8NSZ+Q3OFY2jopLMUEg@mail.gmail.com>

Hi all,

Could anyone refer to me to a good source to learn how to program a simple
control-flow construct* in R, or provide me with a simple example?

Control-flow constructs are programmed as primitives, but I would like to
be able to do that (if possible) in pure R.

The general context is that those functions are a mystery to me. The
motivating example is that I would like to create a function that behave
similarly to base::`if` with an extra argument to the function (e.g. to
include an error rate on the condition).

Many thanks,

Alex

* control-flow constructs are functions such as if, for, while... that
allow for call of the form fn(x) expr to work (see ?Control).

-- 
Alexandre Courtiol

http://sites.google.com/site/alexandrecourtiol/home

*"Science is the belief in the ignorance of experts"*, R. Feynman

	[[alternative HTML version deleted]]


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Sun May 26 11:05:12 2019
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Sun, 26 May 2019 17:05:12 +0800
Subject: [Rd] rbind has confusing result for custom sub-class (possible
 bug?)
In-Reply-To: <CAPRVBcz2zPtcFbdJwtrmvHBOj1Z9u-oCBbH27a96=BAESaDq1Q@mail.gmail.com>
References: <CAPRVBcz2zPtcFbdJwtrmvHBOj1Z9u-oCBbH27a96=BAESaDq1Q@mail.gmail.com>
Message-ID: <CAPRVBcwBCxHBMAPy=i0_8gtjsFbYrCqkXxqeO2xDGwH3-WChiQ@mail.gmail.com>

Have finally managed to come up with a fix after checking out sys.calls()
from within the as.Date.IDate debugger, which shows something like:

[[1]] rbind(DF, DF)
[[2]] rbind(deparse.level, ...)
[[3]] `[<-`(`*tmp*`, ri, value = 18042L)
[[4]] `[<-.Date`(`*tmp*`, ri, value = 18042L)
[[5]] as.Date(value)
[[6]] as.Date.IDate(value)

I'm not sure why [<- is called, I guess the implementation is to assign to
the output block by block? Anyway, we didn't have a [<- method. And
[<-.Date looks like:

value <- unclass(as.Date(value)) # <- converts to double
.Date(NextMethod(.Generic), oldClass(x)) # <- restores 'IDate' class

So we can fix our bug by defining a [<- class; the question that I still
don't see answered in documentation or source code is, why/where is [<-
called, exactly?

Mike C

On Sun, May 26, 2019 at 1:16 PM Michael Chirico <michaelchirico4 at gmail.com>
wrote:

> Debugging this issue:
>
> https://github.com/Rdatatable/data.table/issues/2008
>
> We have custom class 'IDate' which inherits from 'Date' (it just forces
> integer storage for efficiency, hence, I).
>
> The concatenation done by rbind, however, breaks this and returns a double:
>
> library(data.table)
> DF = data.frame(date = as.IDate(Sys.Date()))
> storage.mode(rbind(DF, DF)$date)
> # [1] "double"
>
> This is specific to base::rbind (data.table's rbind returns an integer as
> expected); in ?rbind we see:
>
> The method dispatching is not done via UseMethod(), but by C-internal
> dispatching. Therefore there is no need for, e.g., rbind.default.
> The dispatch algorithm is described in the source file
> (?.../src/main/bind.c?) as
> 1. For each argument we get the list of possible class memberships from
> the class attribute.
> 2. *We inspect each class in turn to see if there is an applicable
> method.*
> 3. If we find an applicable method we make sure that it is identical to
> any method determined for prior arguments. If it is identical, we proceed,
> otherwise we immediately drop through to the default code.
>
> It's not clear what #2 means -- an applicable method *for what*? Glancing
> at the source code would suggest it's looking for rbind.IDate:
>
> https://github.com/wch/r-source/blob/trunk/src/main/bind.c#L1051-L1063
>
> const char *generic = ((PRIMVAL(op) == 1) ? "cbind" : "rbind"); // should
> be rbind here
> const char *s = translateChar(STRING_ELT(classlist, i)); // iterating over
> the classes, should get to IDate first
> sprintf(buf, "%s.%s", generic, s); // should be rbind.IDate
>
> but adding this method (or even exporting it) is no help [ simply defining
> rbind.IDate = function(...) as.IDate(NextMethod()) ]
>
> Lastly, it appears that as.Date.IDate is called, which is causing the type
> conversion:
>
> debug(data.table:::as.Date.IDate)
> rbind(DF, DF) # launches debugger
> x
> # [1] "2019-05-26" <-- singleton, so apparently applied to DF$date, not
> c(DF$date, DF$date)
> undebug(data.table:::as.Date.IDate)
>
> I can't really wrap my head around why as.Date is being called here, and
> even allowing that, why the end result is still the original class [
> class(rbind(DF, DF)$date) == c('IDate', 'Date') ]
>
> So, I'm beginning to think this might be a bug. Am I missing something?
>

	[[alternative HTML version deleted]]


From jo@h@m@u|r|ch @end|ng |rom gm@||@com  Sun May 26 13:47:11 2019
From: jo@h@m@u|r|ch @end|ng |rom gm@||@com (Joshua Ulrich)
Date: Sun, 26 May 2019 06:47:11 -0500
Subject: [Rd] rbind has confusing result for custom sub-class (possible
 bug?)
In-Reply-To: <CAPRVBcwBCxHBMAPy=i0_8gtjsFbYrCqkXxqeO2xDGwH3-WChiQ@mail.gmail.com>
References: <CAPRVBcz2zPtcFbdJwtrmvHBOj1Z9u-oCBbH27a96=BAESaDq1Q@mail.gmail.com>
 <CAPRVBcwBCxHBMAPy=i0_8gtjsFbYrCqkXxqeO2xDGwH3-WChiQ@mail.gmail.com>
Message-ID: <CAPPM_gRYoZFvLZ_T8M2rNY7uhZ4kcPzOFF6ot+nRUJW4HCBPkg@mail.gmail.com>

On Sun, May 26, 2019 at 4:06 AM Michael Chirico
<michaelchirico4 at gmail.com> wrote:
>
> Have finally managed to come up with a fix after checking out sys.calls()
> from within the as.Date.IDate debugger, which shows something like:
>
> [[1]] rbind(DF, DF)
> [[2]] rbind(deparse.level, ...)
> [[3]] `[<-`(`*tmp*`, ri, value = 18042L)
> [[4]] `[<-.Date`(`*tmp*`, ri, value = 18042L)
> [[5]] as.Date(value)
> [[6]] as.Date.IDate(value)
>
> I'm not sure why [<- is called, I guess the implementation is to assign to
> the output block by block? Anyway, we didn't have a [<- method. And
> [<-.Date looks like:
>
> value <- unclass(as.Date(value)) # <- converts to double
> .Date(NextMethod(.Generic), oldClass(x)) # <- restores 'IDate' class
>
> So we can fix our bug by defining a [<- class; the question that I still
> don't see answered in documentation or source code is, why/where is [<-
> called, exactly?
>
Your rbind(DF, DF) call dispatches to base::rbind.data.frame().  The
`[<-` call is this line:
value[[jj]][ri] <- if (is.factor(xij)) as.vector(xij) else xij

That's where the storage.mode changes from integer to double.

debug: value[[jj]][ri] <- if (is.factor(xij)) as.vector(xij) else xij
Browse[2]>
debug: xij
Browse[2]> storage.mode(xij)
[1] "integer"
Browse[2]> value[[jj]][ri]
[1] "2019-05-26"
Browse[2]> storage.mode(value[[jj]][ri])
[1] "integer"
Browse[2]>
debug: if (!is.null(nm <- names(xij))) names(value[[jj]])[ri] <- nm
Browse[2]> storage.mode(value[[jj]][ri])
[1] "double"


> Mike C
>
> On Sun, May 26, 2019 at 1:16 PM Michael Chirico <michaelchirico4 at gmail.com>
> wrote:
>
> > Debugging this issue:
> >
> > https://github.com/Rdatatable/data.table/issues/2008
> >
> > We have custom class 'IDate' which inherits from 'Date' (it just forces
> > integer storage for efficiency, hence, I).
> >
> > The concatenation done by rbind, however, breaks this and returns a double:
> >
> > library(data.table)
> > DF = data.frame(date = as.IDate(Sys.Date()))
> > storage.mode(rbind(DF, DF)$date)
> > # [1] "double"
> >
> > This is specific to base::rbind (data.table's rbind returns an integer as
> > expected); in ?rbind we see:
> >
> > The method dispatching is not done via UseMethod(), but by C-internal
> > dispatching. Therefore there is no need for, e.g., rbind.default.
> > The dispatch algorithm is described in the source file
> > (?.../src/main/bind.c?) as
> > 1. For each argument we get the list of possible class memberships from
> > the class attribute.
> > 2. *We inspect each class in turn to see if there is an applicable
> > method.*
> > 3. If we find an applicable method we make sure that it is identical to
> > any method determined for prior arguments. If it is identical, we proceed,
> > otherwise we immediately drop through to the default code.
> >
> > It's not clear what #2 means -- an applicable method *for what*? Glancing
> > at the source code would suggest it's looking for rbind.IDate:
> >
> > https://github.com/wch/r-source/blob/trunk/src/main/bind.c#L1051-L1063
> >
> > const char *generic = ((PRIMVAL(op) == 1) ? "cbind" : "rbind"); // should
> > be rbind here
> > const char *s = translateChar(STRING_ELT(classlist, i)); // iterating over
> > the classes, should get to IDate first
> > sprintf(buf, "%s.%s", generic, s); // should be rbind.IDate
> >
> > but adding this method (or even exporting it) is no help [ simply defining
> > rbind.IDate = function(...) as.IDate(NextMethod()) ]
> >
> > Lastly, it appears that as.Date.IDate is called, which is causing the type
> > conversion:
> >
> > debug(data.table:::as.Date.IDate)
> > rbind(DF, DF) # launches debugger
> > x
> > # [1] "2019-05-26" <-- singleton, so apparently applied to DF$date, not
> > c(DF$date, DF$date)
> > undebug(data.table:::as.Date.IDate)
> >
> > I can't really wrap my head around why as.Date is being called here, and
> > even allowing that, why the end result is still the original class [
> > class(rbind(DF, DF)$date) == c('IDate', 'Date') ]
> >
> > So, I'm beginning to think this might be a bug. Am I missing something?
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com
R/Finance 2019 | www.rinfinance.com


From @zwj|08 @end|ng |rom gm@||@com  Mon May 27 04:27:09 2019
From: @zwj|08 @end|ng |rom gm@||@com (King Jiefei)
Date: Sun, 26 May 2019 22:27:09 -0400
Subject: [Rd] "if" function in pure R?
In-Reply-To: <CAERMt4fyeJ293njYHCFVZhYpm1Y8NaU8NSZ+Q3OFY2jopLMUEg@mail.gmail.com>
References: <CAERMt4fyeJ293njYHCFVZhYpm1Y8NaU8NSZ+Q3OFY2jopLMUEg@mail.gmail.com>
Message-ID: <CAGiFhPOkbKMiSZtiLnpsnN2wMx1fb-fj5Ud569Fjbzds6UbcMw@mail.gmail.com>

Hi Alexandre,

I'm not an R expert so this is only my personal thought:

I don't think you can achieve what you want exactly. A possible solution
would be defining a binary operator %*%, where you can replace the asterisk
with any function name you want. The function %*% is special since it has
two arguments, left operand and right operand respectively. You then
can call the `substitute` function to get its function arguments in an
expression format and proceed to do what you want. Here is an example to
show the idea.

*Code:*

`%myOperator%` <- function(x, y) {
  x = substitute(x)
  y = substitute(y)
  return(list(x, y))
}


myIf(i == 1, arg1) %myOperator% {
  doSomeThing
}


*Results:*

[[1]]
myIf(i == 1, arg1)

[[2]]
{
    doSomeThing
}

I hope that helps.

Best,
Jiefei

On Sun, May 26, 2019 at 4:45 AM Alexandre Courtiol <
alexandre.courtiol at gmail.com> wrote:

> Hi all,
>
> Could anyone refer to me to a good source to learn how to program a simple
> control-flow construct* in R, or provide me with a simple example?
>
> Control-flow constructs are programmed as primitives, but I would like to
> be able to do that (if possible) in pure R.
>
> The general context is that those functions are a mystery to me. The
> motivating example is that I would like to create a function that behave
> similarly to base::`if` with an extra argument to the function (e.g. to
> include an error rate on the condition).
>
> Many thanks,
>
> Alex
>
> * control-flow constructs are functions such as if, for, while... that
> allow for call of the form fn(x) expr to work (see ?Control).
>
> --
> Alexandre Courtiol
>
> http://sites.google.com/site/alexandrecourtiol/home
>
> *"Science is the belief in the ignorance of experts"*, R. Feynman
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @|ex@ndre@court|o| @end|ng |rom gm@||@com  Mon May 27 08:16:31 2019
From: @|ex@ndre@court|o| @end|ng |rom gm@||@com (Alexandre Courtiol)
Date: Mon, 27 May 2019 08:16:31 +0200
Subject: [Rd] "if" function in pure R?
In-Reply-To: <CAGiFhPOkbKMiSZtiLnpsnN2wMx1fb-fj5Ud569Fjbzds6UbcMw@mail.gmail.com>
References: <CAERMt4fyeJ293njYHCFVZhYpm1Y8NaU8NSZ+Q3OFY2jopLMUEg@mail.gmail.com>
 <CAGiFhPOkbKMiSZtiLnpsnN2wMx1fb-fj5Ud569Fjbzds6UbcMw@mail.gmail.com>
Message-ID: <CAERMt4d91i1pmP-xZ9G+5Bk98pQMAahutig05RTVPYyDSDfbbw@mail.gmail.com>

Thanks a lot Jiefei,

I had thought of defining a binary operator (inspired by pipes) or simply
using an additional condition in the if() calls [e.g. if(foo & fn(bar))
doSomeThing; with fn(bar) returning a logical], but both are workaround
that I do not find as elegant as a proper control-flow construct.

Thus two questions remain:
- is it possible to create a control-flow construct in pure R?
- if yes, how?

Anyone with more insights?
Thanks

On Mon, 27 May 2019 at 04:27, King Jiefei <szwjf08 at gmail.com> wrote:

> Hi Alexandre,
>
> I'm not an R expert so this is only my personal thought:
>
> I don't think you can achieve what you want exactly. A possible solution
> would be defining a binary operator %*%, where you can replace the asterisk
> with any function name you want. The function %*% is special since it has
> two arguments, left operand and right operand respectively. You then
> can call the `substitute` function to get its function arguments in an
> expression format and proceed to do what you want. Here is an example to
> show the idea.
>
> *Code:*
>
> `%myOperator%` <- function(x, y) {
>   x = substitute(x)
>   y = substitute(y)
>   return(list(x, y))
> }
>
>
> myIf(i == 1, arg1) %myOperator% {
>   doSomeThing
> }
>
>
> *Results:*
>
> [[1]]
> myIf(i == 1, arg1)
>
> [[2]]
> {
>     doSomeThing
> }
>
> I hope that helps.
>
> Best,
> Jiefei
>
> On Sun, May 26, 2019 at 4:45 AM Alexandre Courtiol <
> alexandre.courtiol at gmail.com> wrote:
>
>> Hi all,
>>
>> Could anyone refer to me to a good source to learn how to program a simple
>> control-flow construct* in R, or provide me with a simple example?
>>
>> Control-flow constructs are programmed as primitives, but I would like to
>> be able to do that (if possible) in pure R.
>>
>> The general context is that those functions are a mystery to me. The
>> motivating example is that I would like to create a function that behave
>> similarly to base::`if` with an extra argument to the function (e.g. to
>> include an error rate on the condition).
>>
>> Many thanks,
>>
>> Alex
>>
>> * control-flow constructs are functions such as if, for, while... that
>> allow for call of the form fn(x) expr to work (see ?Control).
>>
>> --
>> Alexandre Courtiol
>>
>> http://sites.google.com/site/alexandrecourtiol/home
>>
>> *"Science is the belief in the ignorance of experts"*, R. Feynman
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

-- 
Alexandre Courtiol

http://sites.google.com/site/alexandrecourtiol/home

*"Science is the belief in the ignorance of experts"*, R. Feynman

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon May 27 09:25:16 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 27 May 2019 09:25:16 +0200
Subject: [Rd] Possible bug when finding shared libraries during staged
 installation
In-Reply-To: <CAEvqV37y6VqWh_v_rGjH2+BzN3QieNS+Xv36cUe24x4o2Bp1sQ@mail.gmail.com>
References: <CAEvqV34wSchVg+YW57khWh7NffGOyCeYd5PbmC+1x5OUZk-jRQ@mail.gmail.com>
 <23783.59686.93067.483632@stat.math.ethz.ch>
 <b0dc0646-50fd-9f27-62c7-ff1e3a4e925c@gmail.com>
 <CAEvqV37y6VqWh_v_rGjH2+BzN3QieNS+Xv36cUe24x4o2Bp1sQ@mail.gmail.com>
Message-ID: <d91a4bb2-7cc9-e775-f5dc-3e578b9c4543@gmail.com>

Fixed in R-devel and R-patched.

Best,
Tomas

On 5/24/19 6:56 PM, Kara Woo wrote:
> Yes, that's the same result that I see as well.
>
> If you still want the formal report I can create one if someone adds 
> me to bugzilla, but it sounds like that may not be necessary. Thanks 
> for looking into this!
>
> On Fri, May 24, 2019 at 5:58 AM Tomas Kalibera 
> <tomas.kalibera at gmail.com <mailto:tomas.kalibera at gmail.com>> wrote:
>
>     On 5/24/19 2:52 PM, Martin Maechler wrote:
>     >>>>>> Kara Woo
>     >>>>>>? ? ? on Thu, 23 May 2019 14:24:26 -0700 writes:
>     >? ? ? > Hi all,
>     >? ? ? > With the new staged installation, it seems that R CMD
>     INSTALL sometimes
>     >? ? ? > fails on macOS due to these lines [1] when sapply()
>     returns a list. The
>     >? ? ? > x13binary package has an example [2], reproducible with
>     the following steps:
>     >
>     >? ? ? > $ git clone git at github.com:x13org/x13binary.git && cd
>     x13binary
>     >? ? ? > $ git checkout 663ad7122
>     >? ? ? > $ R CMD INSTALL .
>     >
>     >? ? ? > (We've also run into it in an internal package, but it's
>     easier to
>     >? ? ? > reproduce with x13binary)
>     >
>     >? ? ? > In this case the file command returns multiple results
>     for one of the
>     >? ? ? > dynamic libraries, so are_shared looks like this:
>     >
>     >? ? ? >> are_shared
>     >? ? ? >
>     $`/Users/Kara/projects/forks/x13binary/inst//lib/libgcc_s.1.dylib`
>     >? ? ? > [1] TRUE TRUE TRUE
>     >
>     >? ? ? >
>     $`/Users/Kara/projects/forks/x13binary/inst//lib/libgfortran.3.dylib`
>     >? ? ? > [1] TRUE
>     >
>     >? ? ? >
>     $`/Users/Kara/projects/forks/x13binary/inst//lib/libquadmath.0.dylib`
>     >? ? ? > [1] TRUE
>     >
>     > Thank you, Kara.
>     >
>     > Just for curiosity, what does
>     >
>     >? ?file
>     /Users/Kara/projects/forks/x13binary/inst//lib/libgcc_s.1.dylib
>     >
>     > produce on your Mac?
>
>     I can reproduce, it is something like
>
>     /usr/lib/libgcc_s.1.dylib: Mach-O universal binary with 2
>     architectures:
>     [x86_64:Mach-O 64-bit dynamically linked shared library x86_64]
>     [i386:Mach-O dynamically linked shared library i386]
>     /usr/lib/libgcc_s.1.dylib (for architecture x86_64):??? Mach-O 64-bit
>     dynamically linked shared library x86_64
>     /usr/lib/libgcc_s.1.dylib (for architecture i386):??? Mach-O
>     dynamically
>     linked shared library i386
>
>     Thanks for the report, I will fix.
>
>     Tomas
>
>     >
>     >? ? ? > slibs[are_shared] then fails with invalid subscript type
>     'list'.
>     >
>     > yes, "of course".
>     >
>     >? ? ? > I believe this may be a bug and I have included a patch
>     that uses any() and
>     >? ? ? > vapply() to ensure that only one value is returned for
>     each library and the
>     >? ? ? > result is an atomic vector. This is my first time
>     submitting a bug report
>     >? ? ? > or patch here; I'm happy to make any changes if needed.
>     >
>     > Your patch was not attached with MIME type? ?text/plain and so
>     > was filtered out by the mailing list software.
>     > OTOH, I could relatively easily guess how to fix the bug,
>     > notably when seeing the above "file ...dylib" result.
>     >
>     > What we *meant* to say in https://www.r-project.org/bugs.html
>     > is that in such a situation
>     > 1) you send your finding / suspicion / diagnosis
>     >? ? ?to the R-devel mailing list,? in order to get confirmation etc
>     >? ? ?if what you see is a bug;
>     > 2) then ideally, you'd do a formal bug report at
>     > https://bugs.r-project.org/
>     >? ? ? ?(for which you need to get an "account" there to be created
>     >? ? ? ? once only by a bugzilla admin, typically an R core member).
>     >
>     > In this case, that (2) may not be necessary, but you may want
>     > that anyway (and let some of us know).
>     >
>     >? ? ? > Thanks for considering,
>     >? ? ? > Kara
>     >
>     > Thank *you* indeed for the report,
>     > Martin
>     >
>     >? ? ? > [1]
>     >? ? ? >
>     https://github.com/wch/r-source/blob/3fe2bb01e9ec1b268803a437c308742775c2442d/src/library/tools/R/install.R#L594-L597
>     >? ? ? > [2] https://github.com/x13org/x13binary/issues/46
>     >
>     >? ? ? > R version 3.6.0 Patched (2019-05-22 r76579)
>     >? ? ? > Platform: x86_64-apple-darwin15.6.0 (64-bit)
>     >? ? ? > Running under: macOS Mojave 10.14.4
>     >
>     > --
>     > Martin Maechler
>     > ETH Zurich? and? R Core Team
>     >
>     > ______________________________________________
>     > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


	[[alternative HTML version deleted]]


From ||eeuv@@n @end|ng |rom gm@||@com  Wed May 22 00:57:12 2019
From: ||eeuv@@n @end|ng |rom gm@||@com (kklot)
Date: Tue, 21 May 2019 17:57:12 -0500 (CDT)
Subject: [Rd] coerce SEXP type to C++ matrix class and back
In-Reply-To: <CABGWzFSLgybYi0Tw2XhWXZVdMf11HXF6EwLapugDaMqddg_wCA@mail.gmail.com>
References: <CABGWzFSLgybYi0Tw2XhWXZVdMf11HXF6EwLapugDaMqddg_wCA@mail.gmail.com>
Message-ID: <1558479432626-0.post-6772@n4.nabble.com>


perhaps you don't need this anymore but now after extract the dimension m, n,
we can simply generate arma matrix as
mat an_arma_mat(REAL(RA), m, n);
similarly you can convert RB to an arma matrix pointer, operate on it then
return directly RB to R.


I am testing a simple C++ function that takes a double matrix as
argument and which uses routines provided by the C++ Armadillo
package. I am aware of the nice capabilities of Rcpp and RcppArmadillo
which helps simplifying a lot and that I have already successfully
tested. However, I had a hard time trying to figure out how the
coercion from a REALSPX matrix to an arma::mat = arma::Mat<double>
matrix (double matrix in Armadillo) is done. In this particular case,
because of the simplicity of my function, I would like to use base R
only.



--
Sent from: http://r.789695.n4.nabble.com/R-devel-f909078.html


From m@||und @end|ng |rom b|rc@@u@dk  Sat May 25 07:40:46 2019
From: m@||und @end|ng |rom b|rc@@u@dk (Thomas Mailund)
Date: Sat, 25 May 2019 05:40:46 +0000
Subject: [Rd] 
 Give update.formula() an option not to simplify or reorder the
 result -- request for comments
In-Reply-To: <CAB8pepy_OJyxZNJMm=_GXQrcpYT0dXz22QrCCU0tSo+GRVEL1A@mail.gmail.com>
References: <56ee72cb833f01d6eb3925452925d54f7c2e03d7.camel@uow.edu.au>
 <CAB8pepy_OJyxZNJMm=_GXQrcpYT0dXz22QrCCU0tSo+GRVEL1A@mail.gmail.com>
Message-ID: <etPan.5ce8d55a.6d9d6b7e.123@uni.au.dk>

With a bit of meta programming that manipulates expressions, I don?t think this would be difficult to implement in a package. Well, as difficult as it is to implement a CAS, but not harder. I wrote some code for symbolic differentiation ? I don?t remember where I put it ? and that was easy. But that is because differentiation is just a handful of rules and then the chain rule. I don?t have the skills for handling more complex symbolic manipulation, but anyone who could add it to the language could also easily add it as a package, I think.

Whether in a standard package or not, I have no preference whatsoever.

Cheers
Thomas



On 25 May 2019 at 00.59.44, Abby Spurdle (spurdle.a at gmail.com<mailto:spurdle.a at gmail.com>) wrote:

> Martin Maechler has asked me to send this to R-devel for discussion
> after I submitted it as an enhancement request (
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17563).

I think R needs to provide more support for CAS-style symbolic computation.
That is, support by either the R language itself or the standard packages,
or both.
(And certainly not by interfacing with another interpreted language).

Obviously, I don't speak for R Core.
However, this is how I would like to see R move in the future.
...improved symbolic and symbolic-numeric computation...

I think any changes to formula objects or their methods, should be
congruent with these symbolic improvements.

[[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From @tep@n@@|nde|@r @end|ng |rom or@c|e@com  Mon May 27 09:52:38 2019
From: @tep@n@@|nde|@r @end|ng |rom or@c|e@com (Stepan)
Date: Mon, 27 May 2019 09:52:38 +0200
Subject: [Rd] "if" function in pure R?
In-Reply-To: <CAERMt4d91i1pmP-xZ9G+5Bk98pQMAahutig05RTVPYyDSDfbbw@mail.gmail.com>
References: <CAERMt4fyeJ293njYHCFVZhYpm1Y8NaU8NSZ+Q3OFY2jopLMUEg@mail.gmail.com>
 <CAGiFhPOkbKMiSZtiLnpsnN2wMx1fb-fj5Ud569Fjbzds6UbcMw@mail.gmail.com>
 <CAERMt4d91i1pmP-xZ9G+5Bk98pQMAahutig05RTVPYyDSDfbbw@mail.gmail.com>
Message-ID: <2fd90c4c-f3e0-20ea-f522-683403f77f0f@oracle.com>

Hello Alexandre,

there are two sides of your question it seems to me:

- there is no possibility to extend the R parser with new syntax. The R 
parser knows to internally "rewrite"(*) things such as

if (a>b) print(1) else print(2)

into

`if`(a>b, print(1), print(2))

The parser has a fixed set of functions that get some special treatment 
like this.

- there is possibility to implement control flow constructs thanks to 
the lazy evaluation of arguments. An example of such function is ifelse 
from base.

Best,
Stepan

(*) "rewrite" is illustrative, the exact internal working of this is not 
important for this discussion


On 27/05/2019 08:16, Alexandre Courtiol wrote:
> Thanks a lot Jiefei,
> 
> I had thought of defining a binary operator (inspired by pipes) or simply
> using an additional condition in the if() calls [e.g. if(foo & fn(bar))
> doSomeThing; with fn(bar) returning a logical], but both are workaround
> that I do not find as elegant as a proper control-flow construct.
> 
> Thus two questions remain:
> - is it possible to create a control-flow construct in pure R?
> - if yes, how?
> 
> Anyone with more insights?
> Thanks
> 
> On Mon, 27 May 2019 at 04:27, King Jiefei <szwjf08 at gmail.com> wrote:
> 
>> Hi Alexandre,
>>
>> I'm not an R expert so this is only my personal thought:
>>
>> I don't think you can achieve what you want exactly. A possible solution
>> would be defining a binary operator %*%, where you can replace the asterisk
>> with any function name you want. The function %*% is special since it has
>> two arguments, left operand and right operand respectively. You then
>> can call the `substitute` function to get its function arguments in an
>> expression format and proceed to do what you want. Here is an example to
>> show the idea.
>>
>> *Code:*
>>
>> `%myOperator%` <- function(x, y) {
>>    x = substitute(x)
>>    y = substitute(y)
>>    return(list(x, y))
>> }
>>
>>
>> myIf(i == 1, arg1) %myOperator% {
>>    doSomeThing
>> }
>>
>>
>> *Results:*
>>
>> [[1]]
>> myIf(i == 1, arg1)
>>
>> [[2]]
>> {
>>      doSomeThing
>> }
>>
>> I hope that helps.
>>
>> Best,
>> Jiefei
>>
>> On Sun, May 26, 2019 at 4:45 AM Alexandre Courtiol <
>> alexandre.courtiol at gmail.com> wrote:
>>
>>> Hi all,
>>>
>>> Could anyone refer to me to a good source to learn how to program a simple
>>> control-flow construct* in R, or provide me with a simple example?
>>>
>>> Control-flow constructs are programmed as primitives, but I would like to
>>> be able to do that (if possible) in pure R.
>>>
>>> The general context is that those functions are a mystery to me. The
>>> motivating example is that I would like to create a function that behave
>>> similarly to base::`if` with an extra argument to the function (e.g. to
>>> include an error rate on the condition).
>>>
>>> Many thanks,
>>>
>>> Alex
>>>
>>> * control-flow constructs are functions such as if, for, while... that
>>> allow for call of the form fn(x) expr to work (see ?Control).
>>>
>>> --
>>> Alexandre Courtiol
>>>
>>> https://urldefense.proofpoint.com/v2/url?u=http-3A__sites.google.com_site_alexandrecourtiol_home&d=DwICAg&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=S7ovivpWoG4APCzcwxdRGsn_Rr4FYxNrxmayP5prMhQ&s=LOGFMQPijyvAAyk5wcsWQkM6HjyrNqd9bJTkHhi_4YA&e=
>>>
>>> *"Science is the belief in the ignorance of experts"*, R. Feynman
>>>
>>>          [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=S7ovivpWoG4APCzcwxdRGsn_Rr4FYxNrxmayP5prMhQ&s=sAVfqnOeGqyqLFdvykN3nfGgEwxOCo7oq3slMwEWKi8&e=
>>>
>>
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon May 27 10:06:58 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 27 May 2019 10:06:58 +0200
Subject: [Rd] writing Unicode text to the Windows clipboard
In-Reply-To: <CANe9BHG6LFE2kKRJ=xB8Tpz-krDw0WiSS0n+25po9f-2FxZkHw@mail.gmail.com>
References: <CANe9BHG6LFE2kKRJ=xB8Tpz-krDw0WiSS0n+25po9f-2FxZkHw@mail.gmail.com>
Message-ID: <23787.39586.941043.193318@stat.math.ethz.ch>

>>>>> Jennifer Bryan 
>>>>>     on Thu, 23 May 2019 00:03:05 -0400 writes:

    > Hello, I'm interested in moving text from and to the
    > clipboard that cannot necessarily be represented in the
    > native encoding. So, really, this is about Windows.

    > I can successfully read from the clipboard by specifying
    > the format that corresponds to unicode text.

    >> From R >=2.7.0, it seems you should also be able to write
    >> unicode text
    > to the Windows clipboard.

    > https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/gnuwin32/CHANGES0#L535-L536

    > However, in my hands, this does not seem to be true. I can
    > make it work with this change:

> diff --git a/src/library/utils/src/windows/util.c
> b/src/library/utils/src/windows/util.c
> index 373049495dd..fc3dc39e3a7 100644
> --- a/src/library/utils/src/windows/util.c
> +++ b/src/library/utils/src/windows/util.c
> @@ -318,7 +318,7 @@ SEXP writeClipboard(SEXP text, SEXP sformat)
>   warning(_("unable to open the clipboard"));
>   GlobalFree(hglb);
>       } else {
> - success = SetClipboardData(CF_TEXT, hglb) != 0;
> + success = SetClipboardData(format, hglb) != 0;
>   if(!success) {
>       warning(_("unable to write to the clipboard"));
>       GlobalFree(hglb);
> 
> Example:
> 
> "?" is "GREATER-THAN OVER EQUAL TO", which is unicode <U+2267>, has
> UTF-16LE bytes 67 22, and is not representable in latin1.
> 
> I copy ? to the Windows clipboard and attempt a round trip. I see:
> 
> x <- readClipboard(format = 13, raw = TRUE) # 13 <--> "Unicode text"
> #> [1] 67 22 00 00
> writeClipboard(x, format = 13L)
> readClipboard(format = 13, raw = TRUE)
> #> [1] 67 00 22 00 00 00 00 00
> 
> and, literally, pasting yields: g"
> 
> If I build r-devel with the patch, the same process yields
> 
> x <- readClipboard(format = 13, raw = TRUE)
> #> [1] 67 22 00 00
> writeClipboard(x, format = 13)
> readClipboard(format = 13, raw = TRUE)
> #> [1] 67 22 00 00
> 
> and pasting returns the original input: ?
> 
> Passing the `format` to SetClipboardData() instead of hard-wiring
> "CF_TEXT" brings behaviour in line with the docs.
> 
> -- Jenny
> 
> 	[[alternative HTML version deleted]]

Thank you, Jenny -- and Jeroen for confirmation!

I've now found the time to read up a bit on this, notably ?writeClipboard
and the underlying source code,
and just from that reading I'd agree that the change seems a
clear improvement and does what indeed the documentation had
suggested all along.

I'll commit the change to R-devel .. and plan to port it to 'R
3.6.0 patched' in a few days.

Martin


From pd@|gd @end|ng |rom gm@||@com  Mon May 27 11:31:41 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 27 May 2019 11:31:41 +0200
Subject: [Rd] 
 [R] Increasing number of observations worsen the regression model
In-Reply-To: <20190527114754.52c675be@Tarkus>
References: <1824c21d-7676-c895-dc81-352f2a0c7722@gmail.com>
 <20190527114754.52c675be@Tarkus>
Message-ID: <FAE20F7F-30FC-4217-B66A-ACA7EDE8F368@gmail.com>

Yes, it is important that it only happens with certan BLAS, so probably not really an R issue. 
However, there has been some concern over the C/Fortran interfaces lately, so if you could narrow it down to a specific BLAS routine, it could prove useful for the developers.

One fairly easy thing to do would be to find the breakdown point. I speculate that it could be at 16384 (=2^14) and that some sort of endianness or integer width declaration is the cause. (It would in turn suggest that MKL is using 16-bit integers somehow, which doesn't really seem credible, but you never know.)

I'm moving this to the r-devel list. It certainly is not for r-help.

-pd

> On 27 May 2019, at 10:47 , Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
> On Sat, 25 May 2019 14:38:07 +0200
> Raffa <raffamaiden at gmail.com> wrote:
> 
>> I have tried to ask for example in CrossValidated 
>> <https://stats.stackexchange.com/questions/410050/increasing-number-of-observations-worsen-the-regression-model> 
>> but the code works for them. Any help?
> 
> In the comments you note that the problem went away after you replaced
> Intel MKL with OpenBLAS. This is important.
> 
> The code that fits linear models in R is somewhat complex[*]; if
> you want to get to the bottom of the problem, you may have to take
> parts of it and feed them differently-sized linear regression problems
> until you narrow it down to a specific set of calls to BLAS or LAPACK
> functions which Intel MKL provides.
> 
> One option would be to ask at Intel MKL forums[**].
> 
> -- 
> Best regards,
> Ivan
> 
> [*]
> https://madrury.github.io/jekyll/update/statistics/2016/07/20/lm-in-R.html
> 
> [**] https://software.intel.com/en-us/forums/intel-math-kernel-library/
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon May 27 16:09:21 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 27 May 2019 16:09:21 +0200
Subject: [Rd] bug in rbind?
In-Reply-To: <CAPPM_gRThYFANgAwxb-9fa4=X4qRE80gH3SGESnxWEe-DzVRqg@mail.gmail.com>
References: <D1E6227CBC482446B2D877554FCD338C2CCB4982@MBX01A.stf.nus.edu.sg>
 <CAPPM_gRThYFANgAwxb-9fa4=X4qRE80gH3SGESnxWEe-DzVRqg@mail.gmail.com>
Message-ID: <23787.61329.533658.858225@stat.math.ethz.ch>

With thanks to Krzysztof Banas (and Joshua Ulrich),

Almost 2.5 years ago, there's been a bug report that never made
it to  https://bugs.r-project.org/  and has been forgotten
... until I've stumbled over this again.

I've found an easy fix (and improved readability also by adding
comments) and committed the fix to R-devel rev 76612 , planned
to be ported to   R 3.6.0 patched   a bit later.

Thank you once more!
Martin

--
Martin Maechler
ETH Zurich  and  R Core Team


>>>>> Joshua Ulrich 
>>>>>     on Sat, 21 Jan 2017 11:58:18 -0600 writes:

    > I'm not sure whether or not this is a bug, but I did isolate the line
    > where the error is thrown:
    > src/library/base/R/dataframe.R:1395.
    > https://github.com/wch/r-source/blob/01374c3c367fa12f555fd354f735a6e16e5bd98e/src/library/base/R/dataframe.R#L1395

    > The error is thrown because the line attempts to set a subset of the
    > rownames to NULL, which fails.

    R> options(error = recover)
    R> rbind(dfm.names, dfm)
    > Error in rownames(value[[jj]])[ri] <- rownames(xij) :
    > replacement has length zero

    > Enter a frame number, or 0 to exit

    > 1: rbind(dfm.names, dfm)
    > 2: rbind(deparse.level, ...)

    > Selection: 2
    > Called from: top level
    > Browse[1]> rownames(value[[jj]])
    > [1] "a" "b" "c" NA  NA  NA
    > Browse[1]> rownames(xij)
    > NULL
    > Browse[1]> ri
    > [1] 4 5 6
    > Browse[1]> rownames(value[[jj]])[ri]
    > [1] NA NA NA


    > On Mon, Jan 16, 2017 at 7:50 PM, Krzysztof Banas <krzysztof at nus.edu.sg> wrote:
    >> I suspect there may be a bug in base::rbind.data.frame
    >> 
    >> Below there is minimal example of the problem:
    >> 
    >> m <- matrix (1:12, 3)
    >> dfm <- data.frame (c = 1 : 3, m = I (m))
    >> str (dfm)
    >> 
    >> m.names <- m
    >> rownames (m.names) <- letters [1:3]
    >> dfm.names <- data.frame (c = 1 : 3, m = I (m.names))
    >> str (dfm.names)
    >> 
    >> rbind (m, m.names)
    >> rbind (m.names, m)
    >> rbind (dfm, dfm.names)
    >> 
    >> #not working
    >> rbind (dfm.names, dfm)
    >> 
    >> Error in rbind(deparse.level, ...) : replacement has length zero
    >> 
    >> rbind (dfm, dfm.names)$m
    >> 
    >> 
    >> [,1] [,2] [,3] [,4]
    >> 
    >> <NA>    1    4    7   10
    >> 
    >> <NA>    2    5    8   11
    >> 
    >> <NA>    3    6    9   12
    >> 
    >> a       1    4    7   10
    >> 
    >> b       2    5    8   11
    >> 
    >> c       3    6    9   12
    >> 
    >> 
    >> 
    >> ________________________________
    >> 
    >> Important: This email is confidential and may be privileged. If you are not the intended recipient, please delete it and notify us immediately; you should not copy or use it for any purpose, nor disclose its contents to any other person. Thank you.
    >> 
    >> [[alternative HTML version deleted]]
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel



    > -- 
    > Joshua Ulrich  |  about.me/joshuaulrich
    > FOSS Trading  |  www.fosstrading.com
    > R/Finance 2016 | www.rinfinance.com

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From jo@h@m@u|r|ch @end|ng |rom gm@||@com  Mon May 27 16:25:00 2019
From: jo@h@m@u|r|ch @end|ng |rom gm@||@com (Joshua Ulrich)
Date: Mon, 27 May 2019 09:25:00 -0500
Subject: [Rd] rbind has confusing result for custom sub-class (possible
 bug?)
In-Reply-To: <CAPPM_gRYoZFvLZ_T8M2rNY7uhZ4kcPzOFF6ot+nRUJW4HCBPkg@mail.gmail.com>
References: <CAPRVBcz2zPtcFbdJwtrmvHBOj1Z9u-oCBbH27a96=BAESaDq1Q@mail.gmail.com>
 <CAPRVBcwBCxHBMAPy=i0_8gtjsFbYrCqkXxqeO2xDGwH3-WChiQ@mail.gmail.com>
 <CAPPM_gRYoZFvLZ_T8M2rNY7uhZ4kcPzOFF6ot+nRUJW4HCBPkg@mail.gmail.com>
Message-ID: <CAPPM_gTCkdRYMJV16KC-wAKt7uONbt1cYyJfxJ_n8AkQ25oxFw@mail.gmail.com>

On Sun, May 26, 2019 at 6:47 AM Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
>
> On Sun, May 26, 2019 at 4:06 AM Michael Chirico
> <michaelchirico4 at gmail.com> wrote:
> >
> > Have finally managed to come up with a fix after checking out sys.calls()
> > from within the as.Date.IDate debugger, which shows something like:
> >
> > [[1]] rbind(DF, DF)
> > [[2]] rbind(deparse.level, ...)
> > [[3]] `[<-`(`*tmp*`, ri, value = 18042L)
> > [[4]] `[<-.Date`(`*tmp*`, ri, value = 18042L)
> > [[5]] as.Date(value)
> > [[6]] as.Date.IDate(value)
> >
> > I'm not sure why [<- is called, I guess the implementation is to assign to
> > the output block by block? Anyway, we didn't have a [<- method. And
> > [<-.Date looks like:
> >
> > value <- unclass(as.Date(value)) # <- converts to double
> > .Date(NextMethod(.Generic), oldClass(x)) # <- restores 'IDate' class
> >
> > So we can fix our bug by defining a [<- class; the question that I still
> > don't see answered in documentation or source code is, why/where is [<-
> > called, exactly?
> >
> Your rbind(DF, DF) call dispatches to base::rbind.data.frame().  The
> `[<-` call is this line:
> value[[jj]][ri] <- if (is.factor(xij)) as.vector(xij) else xij
>
> That's where the storage.mode changes from integer to double.
>
> debug: value[[jj]][ri] <- if (is.factor(xij)) as.vector(xij) else xij
> Browse[2]>
> debug: xij
> Browse[2]> storage.mode(xij)
> [1] "integer"
> Browse[2]> value[[jj]][ri]
> [1] "2019-05-26"
> Browse[2]> storage.mode(value[[jj]][ri])
> [1] "integer"
> Browse[2]>
> debug: if (!is.null(nm <- names(xij))) names(value[[jj]])[ri] <- nm
> Browse[2]> storage.mode(value[[jj]][ri])
> [1] "double"
>
To be clear, I don't think this is a bug in rbind() or
rbind.data.frame().  The confusion is that rbind.data.frame() calls
`[<-` for each column of the data.frame, and there is no `[<-.IDate`
method.  So the parent class method is dispatched, which converts the
storage mode to double.

Someone may argue that this is an issue with `[<-.Date`, and that it
shouldn't convert the storage.mode from integer to double.
>
> > Mike C
> >
> > On Sun, May 26, 2019 at 1:16 PM Michael Chirico <michaelchirico4 at gmail.com>
> > wrote:
> >
> > > Debugging this issue:
> > >
> > > https://github.com/Rdatatable/data.table/issues/2008
> > >
> > > We have custom class 'IDate' which inherits from 'Date' (it just forces
> > > integer storage for efficiency, hence, I).
> > >
> > > The concatenation done by rbind, however, breaks this and returns a double:
> > >
> > > library(data.table)
> > > DF = data.frame(date = as.IDate(Sys.Date()))
> > > storage.mode(rbind(DF, DF)$date)
> > > # [1] "double"
> > >
> > > This is specific to base::rbind (data.table's rbind returns an integer as
> > > expected); in ?rbind we see:
> > >
> > > The method dispatching is not done via UseMethod(), but by C-internal
> > > dispatching. Therefore there is no need for, e.g., rbind.default.
> > > The dispatch algorithm is described in the source file
> > > (?.../src/main/bind.c?) as
> > > 1. For each argument we get the list of possible class memberships from
> > > the class attribute.
> > > 2. *We inspect each class in turn to see if there is an applicable
> > > method.*
> > > 3. If we find an applicable method we make sure that it is identical to
> > > any method determined for prior arguments. If it is identical, we proceed,
> > > otherwise we immediately drop through to the default code.
> > >
> > > It's not clear what #2 means -- an applicable method *for what*? Glancing
> > > at the source code would suggest it's looking for rbind.IDate:
> > >
> > > https://github.com/wch/r-source/blob/trunk/src/main/bind.c#L1051-L1063
> > >
> > > const char *generic = ((PRIMVAL(op) == 1) ? "cbind" : "rbind"); // should
> > > be rbind here
> > > const char *s = translateChar(STRING_ELT(classlist, i)); // iterating over
> > > the classes, should get to IDate first
> > > sprintf(buf, "%s.%s", generic, s); // should be rbind.IDate
> > >
> > > but adding this method (or even exporting it) is no help [ simply defining
> > > rbind.IDate = function(...) as.IDate(NextMethod()) ]
> > >
> > > Lastly, it appears that as.Date.IDate is called, which is causing the type
> > > conversion:
> > >
> > > debug(data.table:::as.Date.IDate)
> > > rbind(DF, DF) # launches debugger
> > > x
> > > # [1] "2019-05-26" <-- singleton, so apparently applied to DF$date, not
> > > c(DF$date, DF$date)
> > > undebug(data.table:::as.Date.IDate)
> > >
> > > I can't really wrap my head around why as.Date is being called here, and
> > > even allowing that, why the end result is still the original class [
> > > class(rbind(DF, DF)$date) == c('IDate', 'Date') ]
> > >
> > > So, I'm beginning to think this might be a bug. Am I missing something?
> > >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> Joshua Ulrich  |  about.me/joshuaulrich
> FOSS Trading  |  www.fosstrading.com
> R/Finance 2019 | www.rinfinance.com



-- 
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com
R/Finance 2019 | www.rinfinance.com


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Mon May 27 16:31:43 2019
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Mon, 27 May 2019 22:31:43 +0800
Subject: [Rd] rbind has confusing result for custom sub-class (possible
 bug?)
In-Reply-To: <CAPPM_gTCkdRYMJV16KC-wAKt7uONbt1cYyJfxJ_n8AkQ25oxFw@mail.gmail.com>
References: <CAPRVBcz2zPtcFbdJwtrmvHBOj1Z9u-oCBbH27a96=BAESaDq1Q@mail.gmail.com>
 <CAPRVBcwBCxHBMAPy=i0_8gtjsFbYrCqkXxqeO2xDGwH3-WChiQ@mail.gmail.com>
 <CAPPM_gRYoZFvLZ_T8M2rNY7uhZ4kcPzOFF6ot+nRUJW4HCBPkg@mail.gmail.com>
 <CAPPM_gTCkdRYMJV16KC-wAKt7uONbt1cYyJfxJ_n8AkQ25oxFw@mail.gmail.com>
Message-ID: <CAPRVBczGX=xy+LmMoRaZzoEtqQ9Rx__pVbzNpZMPq=Sn9+Cf4w@mail.gmail.com>

Yes, thanks for following up on thread here. And thanks again for clearing
things up, your email was a finger snap of clarity on the whole issue.

I'll add that actually it was data.table's code at fault on the storage
conversion -- note that if you use an arbitrary sub-class 'foo' with no
methods defined, it'll stay integer.

That's because [<- calls as.Date and then as.Date.IDate, and that method
(ours) has as.numeric(); earlier I had recognized that if we commented that
line, the issue was "fixed" but I still wasn't understanding the root cause.

My last curiosity on this issue will be in my follow-up thread.

Mike C

On Mon, May 27, 2019, 10:25 PM Joshua Ulrich <josh.m.ulrich at gmail.com>
wrote:

> On Sun, May 26, 2019 at 6:47 AM Joshua Ulrich <josh.m.ulrich at gmail.com>
> wrote:
> >
> > On Sun, May 26, 2019 at 4:06 AM Michael Chirico
> > <michaelchirico4 at gmail.com> wrote:
> > >
> > > Have finally managed to come up with a fix after checking out
> sys.calls()
> > > from within the as.Date.IDate debugger, which shows something like:
> > >
> > > [[1]] rbind(DF, DF)
> > > [[2]] rbind(deparse.level, ...)
> > > [[3]] `[<-`(`*tmp*`, ri, value = 18042L)
> > > [[4]] `[<-.Date`(`*tmp*`, ri, value = 18042L)
> > > [[5]] as.Date(value)
> > > [[6]] as.Date.IDate(value)
> > >
> > > I'm not sure why [<- is called, I guess the implementation is to
> assign to
> > > the output block by block? Anyway, we didn't have a [<- method. And
> > > [<-.Date looks like:
> > >
> > > value <- unclass(as.Date(value)) # <- converts to double
> > > .Date(NextMethod(.Generic), oldClass(x)) # <- restores 'IDate' class
> > >
> > > So we can fix our bug by defining a [<- class; the question that I
> still
> > > don't see answered in documentation or source code is, why/where is [<-
> > > called, exactly?
> > >
> > Your rbind(DF, DF) call dispatches to base::rbind.data.frame().  The
> > `[<-` call is this line:
> > value[[jj]][ri] <- if (is.factor(xij)) as.vector(xij) else xij
> >
> > That's where the storage.mode changes from integer to double.
> >
> > debug: value[[jj]][ri] <- if (is.factor(xij)) as.vector(xij) else xij
> > Browse[2]>
> > debug: xij
> > Browse[2]> storage.mode(xij)
> > [1] "integer"
> > Browse[2]> value[[jj]][ri]
> > [1] "2019-05-26"
> > Browse[2]> storage.mode(value[[jj]][ri])
> > [1] "integer"
> > Browse[2]>
> > debug: if (!is.null(nm <- names(xij))) names(value[[jj]])[ri] <- nm
> > Browse[2]> storage.mode(value[[jj]][ri])
> > [1] "double"
> >
> To be clear, I don't think this is a bug in rbind() or
> rbind.data.frame().  The confusion is that rbind.data.frame() calls
> `[<-` for each column of the data.frame, and there is no `[<-.IDate`
> method.  So the parent class method is dispatched, which converts the
> storage mode to double.
>
> Someone may argue that this is an issue with `[<-.Date`, and that it
> shouldn't convert the storage.mode from integer to double.
> >
> > > Mike C
> > >
> > > On Sun, May 26, 2019 at 1:16 PM Michael Chirico <
> michaelchirico4 at gmail.com>
> > > wrote:
> > >
> > > > Debugging this issue:
> > > >
> > > > https://github.com/Rdatatable/data.table/issues/2008
> > > >
> > > > We have custom class 'IDate' which inherits from 'Date' (it just
> forces
> > > > integer storage for efficiency, hence, I).
> > > >
> > > > The concatenation done by rbind, however, breaks this and returns a
> double:
> > > >
> > > > library(data.table)
> > > > DF = data.frame(date = as.IDate(Sys.Date()))
> > > > storage.mode(rbind(DF, DF)$date)
> > > > # [1] "double"
> > > >
> > > > This is specific to base::rbind (data.table's rbind returns an
> integer as
> > > > expected); in ?rbind we see:
> > > >
> > > > The method dispatching is not done via UseMethod(), but by C-internal
> > > > dispatching. Therefore there is no need for, e.g., rbind.default.
> > > > The dispatch algorithm is described in the source file
> > > > (?.../src/main/bind.c?) as
> > > > 1. For each argument we get the list of possible class memberships
> from
> > > > the class attribute.
> > > > 2. *We inspect each class in turn to see if there is an applicable
> > > > method.*
> > > > 3. If we find an applicable method we make sure that it is identical
> to
> > > > any method determined for prior arguments. If it is identical, we
> proceed,
> > > > otherwise we immediately drop through to the default code.
> > > >
> > > > It's not clear what #2 means -- an applicable method *for what*?
> Glancing
> > > > at the source code would suggest it's looking for rbind.IDate:
> > > >
> > > >
> https://github.com/wch/r-source/blob/trunk/src/main/bind.c#L1051-L1063
> > > >
> > > > const char *generic = ((PRIMVAL(op) == 1) ? "cbind" : "rbind"); //
> should
> > > > be rbind here
> > > > const char *s = translateChar(STRING_ELT(classlist, i)); //
> iterating over
> > > > the classes, should get to IDate first
> > > > sprintf(buf, "%s.%s", generic, s); // should be rbind.IDate
> > > >
> > > > but adding this method (or even exporting it) is no help [ simply
> defining
> > > > rbind.IDate = function(...) as.IDate(NextMethod()) ]
> > > >
> > > > Lastly, it appears that as.Date.IDate is called, which is causing
> the type
> > > > conversion:
> > > >
> > > > debug(data.table:::as.Date.IDate)
> > > > rbind(DF, DF) # launches debugger
> > > > x
> > > > # [1] "2019-05-26" <-- singleton, so apparently applied to DF$date,
> not
> > > > c(DF$date, DF$date)
> > > > undebug(data.table:::as.Date.IDate)
> > > >
> > > > I can't really wrap my head around why as.Date is being called here,
> and
> > > > even allowing that, why the end result is still the original class [
> > > > class(rbind(DF, DF)$date) == c('IDate', 'Date') ]
> > > >
> > > > So, I'm beginning to think this might be a bug. Am I missing
> something?
> > > >
> > >
> > >         [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
> >
> > --
> > Joshua Ulrich  |  about.me/joshuaulrich
> > FOSS Trading  |  www.fosstrading.com
> > R/Finance 2019 | www.rinfinance.com
>
>
>
> --
> Joshua Ulrich  |  about.me/joshuaulrich
> FOSS Trading  |  www.fosstrading.com
> R/Finance 2019 | www.rinfinance.com
>

	[[alternative HTML version deleted]]


From jo@h@m@u|r|ch @end|ng |rom gm@||@com  Mon May 27 16:34:34 2019
From: jo@h@m@u|r|ch @end|ng |rom gm@||@com (Joshua Ulrich)
Date: Mon, 27 May 2019 09:34:34 -0500
Subject: [Rd] rbind has confusing result for custom sub-class (possible
 bug?)
In-Reply-To: <CAPRVBczGX=xy+LmMoRaZzoEtqQ9Rx__pVbzNpZMPq=Sn9+Cf4w@mail.gmail.com>
References: <CAPRVBcz2zPtcFbdJwtrmvHBOj1Z9u-oCBbH27a96=BAESaDq1Q@mail.gmail.com>
 <CAPRVBcwBCxHBMAPy=i0_8gtjsFbYrCqkXxqeO2xDGwH3-WChiQ@mail.gmail.com>
 <CAPPM_gRYoZFvLZ_T8M2rNY7uhZ4kcPzOFF6ot+nRUJW4HCBPkg@mail.gmail.com>
 <CAPPM_gTCkdRYMJV16KC-wAKt7uONbt1cYyJfxJ_n8AkQ25oxFw@mail.gmail.com>
 <CAPRVBczGX=xy+LmMoRaZzoEtqQ9Rx__pVbzNpZMPq=Sn9+Cf4w@mail.gmail.com>
Message-ID: <CAPPM_gRGb3Jgwvhgw97ptJ5MVmJuYzH5SjT8s78pHwJJtBcpyA@mail.gmail.com>

Follow-up (inline) on my comment about a potential issue in `[<-.Date`.

On Mon, May 27, 2019 at 9:31 AM Michael Chirico
<michaelchirico4 at gmail.com> wrote:
>
> Yes, thanks for following up on thread here. And thanks again for clearing things up, your email was a finger snap of clarity on the whole issue.
>
> I'll add that actually it was data.table's code at fault on the storage conversion -- note that if you use an arbitrary sub-class 'foo' with no methods defined, it'll stay integer.
>
> That's because [<- calls as.Date and then as.Date.IDate, and that method (ours) has as.numeric(); earlier I had recognized that if we commented that line, the issue was "fixed" but I still wasn't understanding the root cause.
>
> My last curiosity on this issue will be in my follow-up thread.
>
> Mike C
>
> On Mon, May 27, 2019, 10:25 PM Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
>>
>> On Sun, May 26, 2019 at 6:47 AM Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
>> >
>> > On Sun, May 26, 2019 at 4:06 AM Michael Chirico
>> > <michaelchirico4 at gmail.com> wrote:
>> > >
>> > > Have finally managed to come up with a fix after checking out sys.calls()
>> > > from within the as.Date.IDate debugger, which shows something like:
>> > >
>> > > [[1]] rbind(DF, DF)
>> > > [[2]] rbind(deparse.level, ...)
>> > > [[3]] `[<-`(`*tmp*`, ri, value = 18042L)
>> > > [[4]] `[<-.Date`(`*tmp*`, ri, value = 18042L)
>> > > [[5]] as.Date(value)
>> > > [[6]] as.Date.IDate(value)
>> > >
>> > > I'm not sure why [<- is called, I guess the implementation is to assign to
>> > > the output block by block? Anyway, we didn't have a [<- method. And
>> > > [<-.Date looks like:
>> > >
>> > > value <- unclass(as.Date(value)) # <- converts to double
>> > > .Date(NextMethod(.Generic), oldClass(x)) # <- restores 'IDate' class
>> > >
>> > > So we can fix our bug by defining a [<- class; the question that I still
>> > > don't see answered in documentation or source code is, why/where is [<-
>> > > called, exactly?
>> > >
>> > Your rbind(DF, DF) call dispatches to base::rbind.data.frame().  The
>> > `[<-` call is this line:
>> > value[[jj]][ri] <- if (is.factor(xij)) as.vector(xij) else xij
>> >
>> > That's where the storage.mode changes from integer to double.
>> >
>> > debug: value[[jj]][ri] <- if (is.factor(xij)) as.vector(xij) else xij
>> > Browse[2]>
>> > debug: xij
>> > Browse[2]> storage.mode(xij)
>> > [1] "integer"
>> > Browse[2]> value[[jj]][ri]
>> > [1] "2019-05-26"
>> > Browse[2]> storage.mode(value[[jj]][ri])
>> > [1] "integer"
>> > Browse[2]>
>> > debug: if (!is.null(nm <- names(xij))) names(value[[jj]])[ri] <- nm
>> > Browse[2]> storage.mode(value[[jj]][ri])
>> > [1] "double"
>> >
>> To be clear, I don't think this is a bug in rbind() or
>> rbind.data.frame().  The confusion is that rbind.data.frame() calls
>> `[<-` for each column of the data.frame, and there is no `[<-.IDate`
>> method.  So the parent class method is dispatched, which converts the
>> storage mode to double.
>>
>> Someone may argue that this is an issue with `[<-.Date`, and that it
>> shouldn't convert the storage.mode from integer to double.

I don't think this is an issue.  The storage mode isn't converted if
the replacement is the same storage mode.  For example:

R> x <- .Date(1:5)
R> storage.mode(x)
[1] "integer"
R> x[1L] <- .Date(0L)
R> storage.mode(x)
[1] "integer"
R> x[1L] <- .Date(0)
R> storage.mode(x)
[1] "double"

>> >
>> > > Mike C
>> > >
>> > > On Sun, May 26, 2019 at 1:16 PM Michael Chirico <michaelchirico4 at gmail.com>
>> > > wrote:
>> > >
>> > > > Debugging this issue:
>> > > >
>> > > > https://github.com/Rdatatable/data.table/issues/2008
>> > > >
>> > > > We have custom class 'IDate' which inherits from 'Date' (it just forces
>> > > > integer storage for efficiency, hence, I).
>> > > >
>> > > > The concatenation done by rbind, however, breaks this and returns a double:
>> > > >
>> > > > library(data.table)
>> > > > DF = data.frame(date = as.IDate(Sys.Date()))
>> > > > storage.mode(rbind(DF, DF)$date)
>> > > > # [1] "double"
>> > > >
>> > > > This is specific to base::rbind (data.table's rbind returns an integer as
>> > > > expected); in ?rbind we see:
>> > > >
>> > > > The method dispatching is not done via UseMethod(), but by C-internal
>> > > > dispatching. Therefore there is no need for, e.g., rbind.default.
>> > > > The dispatch algorithm is described in the source file
>> > > > (?.../src/main/bind.c?) as
>> > > > 1. For each argument we get the list of possible class memberships from
>> > > > the class attribute.
>> > > > 2. *We inspect each class in turn to see if there is an applicable
>> > > > method.*
>> > > > 3. If we find an applicable method we make sure that it is identical to
>> > > > any method determined for prior arguments. If it is identical, we proceed,
>> > > > otherwise we immediately drop through to the default code.
>> > > >
>> > > > It's not clear what #2 means -- an applicable method *for what*? Glancing
>> > > > at the source code would suggest it's looking for rbind.IDate:
>> > > >
>> > > > https://github.com/wch/r-source/blob/trunk/src/main/bind.c#L1051-L1063
>> > > >
>> > > > const char *generic = ((PRIMVAL(op) == 1) ? "cbind" : "rbind"); // should
>> > > > be rbind here
>> > > > const char *s = translateChar(STRING_ELT(classlist, i)); // iterating over
>> > > > the classes, should get to IDate first
>> > > > sprintf(buf, "%s.%s", generic, s); // should be rbind.IDate
>> > > >
>> > > > but adding this method (or even exporting it) is no help [ simply defining
>> > > > rbind.IDate = function(...) as.IDate(NextMethod()) ]
>> > > >
>> > > > Lastly, it appears that as.Date.IDate is called, which is causing the type
>> > > > conversion:
>> > > >
>> > > > debug(data.table:::as.Date.IDate)
>> > > > rbind(DF, DF) # launches debugger
>> > > > x
>> > > > # [1] "2019-05-26" <-- singleton, so apparently applied to DF$date, not
>> > > > c(DF$date, DF$date)
>> > > > undebug(data.table:::as.Date.IDate)
>> > > >
>> > > > I can't really wrap my head around why as.Date is being called here, and
>> > > > even allowing that, why the end result is still the original class [
>> > > > class(rbind(DF, DF)$date) == c('IDate', 'Date') ]
>> > > >
>> > > > So, I'm beginning to think this might be a bug. Am I missing something?
>> > > >
>> > >
>> > >         [[alternative HTML version deleted]]
>> > >
>> > > ______________________________________________
>> > > R-devel at r-project.org mailing list
>> > > https://stat.ethz.ch/mailman/listinfo/r-devel
>> >
>> >
>> >
>> > --
>> > Joshua Ulrich  |  about.me/joshuaulrich
>> > FOSS Trading  |  www.fosstrading.com
>> > R/Finance 2019 | www.rinfinance.com
>>
>>
>>
>> --
>> Joshua Ulrich  |  about.me/joshuaulrich
>> FOSS Trading  |  www.fosstrading.com
>> R/Finance 2019 | www.rinfinance.com



-- 
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com
R/Finance 2019 | www.rinfinance.com


From ky|e@h@m||ton @end|ng |rom gm@||@com  Tue May 28 01:41:57 2019
From: ky|e@h@m||ton @end|ng |rom gm@||@com (Kyle Hamilton)
Date: Mon, 27 May 2019 16:41:57 -0700
Subject: [Rd] Wrong IEEE reference in documentation for the Round function
Message-ID: <CAN17LWM0hXRWoUBiZ28vK8H7Ep14roPmu3Kk8vr9-WT_76EUWA@mail.gmail.com>

Hello,

Since I can't open an account on Bugzilla and the website told me to
submit my bug report to the mailing list here's a patch addressing a
minor typo in the documentation for the Round function. The reference
section states that the correct IEEE standard is 745:2008 but
everywhere else in the documentation it's IEEE 754:2008. I've attached
the patch correcting this typo. If someone creates an account for me
on Bugzilla I'll submit the patch and other though that system.

Kyle Hamilton
kylehamilton.com

From Kurt@Horn|k @end|ng |rom wu@@c@@t  Tue May 28 13:15:22 2019
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Tue, 28 May 2019 13:15:22 +0200
Subject: [Rd] 
 Wrong IEEE reference in documentation for the Round function
In-Reply-To: <CAN17LWM0hXRWoUBiZ28vK8H7Ep14roPmu3Kk8vr9-WT_76EUWA@mail.gmail.com>
References: <CAN17LWM0hXRWoUBiZ28vK8H7Ep14roPmu3Kk8vr9-WT_76EUWA@mail.gmail.com>
Message-ID: <23789.6218.758347.620702@hornik.net>

>>>>> Kyle Hamilton writes:

Thanks: I'll fix that.

Best
-k

> Hello,
> Since I can't open an account on Bugzilla and the website told me to
> submit my bug report to the mailing list here's a patch addressing a
> minor typo in the documentation for the Round function. The reference
> section states that the correct IEEE standard is 745:2008 but
> everywhere else in the documentation it's IEEE 754:2008. I've attached
> the patch correcting this typo. If someone creates an account for me
> on Bugzilla I'll submit the patch and other though that system.

> Kyle Hamilton
> kylehamilton.com
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Wed May 29 10:17:18 2019
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Wed, 29 May 2019 16:17:18 +0800
Subject: [Rd] Why is R in Japanese (only in Mac terminal)?
Message-ID: <CAPRVBcyZj2thzzo6NyPDFv8uDGcJDpEkmeXURHyLTonzvsPhLA@mail.gmail.com>

Since a while ago, R on my Mac terminal is being started in Japanese:

R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"

Copyright (C) 2018 The R Foundation for Statistical Computing

Platform: x86_64-apple-darwin15.6.0 (64-bit)


R ??????????????????????????

?????????????????????????????

?????????????'license()' ???? 'licence()' ??????????


  Natural language support but running in an English locale


R is a collaborative project with many contributors.

Type 'contributors()' for more information and

'citation()' on how to cite R or R packages in publications.


'demo()' ???????????????????

'help()' ?????????????????

'help.start()' ? HTML ?????????????????

'q()' ?????? R ???????

I never gave it too much mind since I understand Japanese and am mostly
working in RStudio anyway (RStudio is in English). But I found a "bug" in
testthat's is_english (which tests whether the current session is reporting
base messages in English) and reported here:

https://github.com/r-lib/testthat/issues/879

I say "bug" because as near as I can tell is_english is built assuming the
logic laid out in ?gettext, ?locales. So even though my machine appears to
have none of the "symptoms" of a non-English locale, nevertheless I get
Japanese. My session info:

R version 3.5.2 (2018-12-20)

Platform: x86_64-apple-darwin15.6.0 (64-bit)

Running under: macOS High Sierra 10.13.6


Matrix products: default

BLAS:
/Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRblas.0.dylib

LAPACK:
/Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib


locale:

[1] C/UTF-8/C/C/C/C


attached base packages:

[1] stats     graphics  grDevices utils     datasets  methods   base


loaded via a namespace (and not attached):

[1] compiler_3.5.2

My Sys.getenv() and "Languages & Region" settings are in the issue link.

Where else should I be looking in my R session or terminal to figure out
why it's in Japanese?

Mike C

	[[alternative HTML version deleted]]


From j|nghu@zh@o @end|ng |rom hotm@||@com  Wed May 29 17:49:05 2019
From: j|nghu@zh@o @end|ng |rom hotm@||@com (jing hua zhao)
Date: Wed, 29 May 2019 15:49:05 +0000
Subject: [Rd] use of buffers in sprintf and snprintf
In-Reply-To: <f3388993-5e20-d7e5-346a-785d33fab27b@daqana.com>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
 <23307.48529.773039.904392@stat.math.ethz.ch>
 <23307.49323.908367.788461@stat.math.ethz.ch>
 <CABtg=KkuVHoX1tZ=+Lr7mDFrXvn5zdf3+Wmqhnv58GXZJS2KwQ@mail.gmail.com>,
 <f3388993-5e20-d7e5-346a-785d33fab27b@daqana.com>
Message-ID: <DB6P189MB0581F101B909FA1E2ACC509DA51F0@DB6P189MB0581.EURP189.PROD.OUTLOOK.COM>

Dear R-developers,

I am struggling with packaging with sprintf and snprintf() as the following WARNINGS from gcc 9.x,

  hap_c.c:380:46: warning: ?%d? directive output may be truncated writing between 1 and 10 bytes into a region of size between 0 and 127 [-Wformat-truncation=]
  hap_c.c:392:46: warning: ?%d? directive output may be truncated writing between 1 and 10 bytes into a region of size between 0 and 127 [-Wformat-truncation=]

Essentially, I have

#define MAX_FILENAME_LEN 128
char of1name[MAX_FILENAME_LEN],of2name[MAX_FILENAME_LEN], tempname[MAX_FILENAME_LEN];

...

 snprintf(tempname,sizeof(tempname),"%s.%d", of1name, j);

It looks I could get around with


#define MAX_FILENAME_LEN 128

#define MAX_FILENAME_LEN2 256

char of1name[MAX_FILENAME_LEN],of2name[MAX_FILENAME_LEN], tempname[MAX_FILENAME_LEN2];

...
snprintf(tempname,2*sizeof(tempname)+1,"%s.%d", of1name, j)

It looks a bit waste of resources to me.


Any idea will be greatly appreciated,



Jing Hua

	[[alternative HTML version deleted]]


From jte||er|@@rproject @end|ng |rom gm@||@com  Wed May 29 21:47:50 2019
From: jte||er|@@rproject @end|ng |rom gm@||@com (Juan Telleria Ruiz de Aguirre)
Date: Wed, 29 May 2019 21:47:50 +0200
Subject: [Rd] Converting non-32-bit integers from python to R to use bit64:
 reticulate
Message-ID: <CAJXDcw3jQd2B+hvfXuUUeczx=mmtw0MA_Udaesd-UgM+spyGJw@mail.gmail.com>

Dear R Developers,

There is an interesting issue related to "reticulate" R package which
discusses how to convert Python's non-32 bit integers to R, which has had
quite an exhaustive discussion:

https://github.com/rstudio/reticulate/issues/323

Python seems to handle integers differently from R, and is dependant on the
system arquitecture: On 32 bit systems uses 32-bit integers, and on 64-bit
systems uses 64-bit integers.

So my question is:

As regards R's C Interface, how costly would it be to convert INTSXP from
32 bits to 64 bits using C, on 64 bits Systems? Do the benefits surpass the
costs? And should such development be handled from within R Core / Ordinary
Members , or it shall be left to package maintainers?

Thank you! :)

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Wed May 29 22:24:58 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 29 May 2019 13:24:58 -0700
Subject: [Rd] 
 Converting non-32-bit integers from python to R to use bit64:
 reticulate
In-Reply-To: <CAJXDcw3jQd2B+hvfXuUUeczx=mmtw0MA_Udaesd-UgM+spyGJw@mail.gmail.com>
References: <CAJXDcw3jQd2B+hvfXuUUeczx=mmtw0MA_Udaesd-UgM+spyGJw@mail.gmail.com>
Message-ID: <CAD4oTHH_ixXYEk1OEuFq_yJf83sDYmShbZ1nPGFovRvy-XZPnw@mail.gmail.com>

Hi Juan,

Comments inline.

On Wed, May 29, 2019 at 12:48 PM Juan Telleria Ruiz de Aguirre <
jtelleria.rproject at gmail.com> wrote:

> Dear R Developers,
>
> There is an interesting issue related to "reticulate" R package which
> discusses how to convert Python's non-32 bit integers to R, which has had
> quite an exhaustive discussion:
>
> https://github.com/rstudio/reticulate/issues/323
>
> Python seems to handle integers differently from R, and is dependant on the
> system arquitecture: On 32 bit systems uses 32-bit integers, and on 64-bit
> systems uses 64-bit integers.
>
> So my question is:
>
> As regards R's C Interface, how costly would it be to convert INTSXP from
> 32 bits to 64 bits using C, on 64 bits Systems? Do the benefits surpass the
> costs? And should such development be handled from within R Core / Ordinary
> Members , or it shall be left to package maintainers?
>

Well, I am not an R-core member, but I can mention a few things:

1. This seems like it would make the results of R code non-reproducible
between 32 and 64bit versions of R; at least some code would give different
results (at the very least in terms of when integer values overflow to NA,
which is documented behavior).
2. Obviously all integer data would take twice as much memory, memory
bandwidth, space in caches, etc, even when it doesn't need it.
3. Various places treat data /data pointers coming out of INTSXP and LGLSXP
objects the same within the internal R sources (as currently they're both
int/int*). Catching and fixing all those wouldn't be impossible, but it
would take at least some doing.

For me personally 1 seems like a big problem, and 3 makes the conversion
more work than it might have seemed initially.

As a related side note, as far as I understand what I've heard from R-core
members directly, the choice to not have multiple types of integers is
intentional and unlikely to change.

Best,
~G




>
> Thank you! :)
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From je||er|@ @end|ng |rom mrc-|mb@c@m@@c@uk  Thu May 30 00:16:00 2019
From: je||er|@ @end|ng |rom mrc-|mb@c@m@@c@uk (Dr Gregory Jefferis)
Date: Wed, 29 May 2019 23:16:00 +0100
Subject: [Rd] Making a package CITATION file from BibTeX
Message-ID: <D3161B69-D245-47A3-BBC0-030CA767EFC9@mrc-lmb.cam.ac.uk>

Dear Colleagues,

I would like to provide a CITATION file for my package nat.nblast [1].

I have the correct citation in BibTeX format [2]. How can I convert this 
BibTeX to the format needed by R for a package CITATION file (I have a 
lot of other packages needing citations ...).

I think what I need is the opposite of RefManageR::toBiblatex [3]. This 
seems like it should be a common need, so I feel sure I must be missing 
something, but I can't seem to google up any hints.

With many thanks,

Greg Jefferis.

[1] http://github.com/jefferislab/nat.nblast 
https://cran.r-project.org/package=nat.nblast
[2]

@article{Costa:2016aa,
	Author = {Costa, Marta and Manton, James D and Ostrovsky, Aaron D and 
Prohaska, Steffen and Jefferis, Gregory S X E},
	Doi = {10.1016/j.neuron.2016.06.012},
	Journal = {Neuron},
	Month = {Jul},
	Number = {2},
	Pages = {293-311},
	Title = {NBLAST: Rapid, Sensitive Comparison of Neuronal Structure and 
Construction of Neuron Family Databases},
	Volume = {91},
	Year = {2016}}

[3] https://rdrr.io/github/ropensci/RefManageR/man/toBiblatex.html


--
Gregory Jefferis
Division of Neurobiology
MRC Laboratory of Molecular Biology
Francis Crick Avenue
Cambridge Biomedical Campus
Cambridge, CB2 OQH, UK

http://www2.mrc-lmb.cam.ac.uk/group-leaders/h-to-m/g-jefferis
http://jefferislab.org
http://www.zoo.cam.ac.uk/departments/connectomics


From Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t  Thu May 30 00:46:40 2019
From: Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t (Achim Zeileis)
Date: Thu, 30 May 2019 00:46:40 +0200 (CEST)
Subject: [Rd] Making a package CITATION file from BibTeX
In-Reply-To: <D3161B69-D245-47A3-BBC0-030CA767EFC9@mrc-lmb.cam.ac.uk>
References: <D3161B69-D245-47A3-BBC0-030CA767EFC9@mrc-lmb.cam.ac.uk>
Message-ID: <alpine.DEB.2.21.1905300038070.6310@paninaro>

On Thu, 30 May 2019, Dr Gregory Jefferis wrote:

> Dear Colleagues,
>
> I would like to provide a CITATION file for my package nat.nblast [1].
>
> I have the correct citation in BibTeX format [2]. How can I convert this 
> BibTeX to the format needed by R for a package CITATION file (I have a 
> lot of other packages needing citations ...).

(1) You can use read.bib() from the "bibtex" package to read the .bib file 
containing the relevant reference.

(2) This gives you a "bibentry" object that can be turned into the R code 
generating it with format(..., style = "R") from the basic "utils" 
package.

(3) Then you can writeLines() this R code on the console or 
writeLines(..., "CITATION") to a CITATION file.

(4) Optionally you can also include a $header in your bibentry with a 
short introductory sentence. Or if you have multiple references to go into 
the same CITATION you might want to include a $header for each and an 
$mheader for everything.

A worked example is included below. Background information is given in: 
https://doi.org/10.32614/RJ-2012-009

Let's assume that your BibTeX entry [2] is the first entry in a file 
called "my.bib". Then you can do:

## read first item from BibTeX as "bibentry" object
b <- bibtex::read.bib("my.bib")[[1]]

## delete the bib key and add a header for the citation
b$key <- NULL
b$header <- "To cite nat.nblast in publications use:"

## turn the "bibentry" into the R code generating it
b <- format(b, style = "R")

## write the R code to the console
writeLines(b)

bibentry(bibtype = "Article",
          header = "To cite nat.nblast in publications use:",
          author = c(person(given = "Marta",
                            family = "Costa"),
                     person(given = c("James", "D"),
                            family = "Manton"),
                     person(given = c("Aaron", "D"),
                            family = "Ostrovsky"),
                     person(given = "Steffen",
                            family = "Prohaska"),
                     person(given = c("Gregory", "S", "X", "E"),
                            family = "Jefferis")),
          doi = "10.1016/j.neuron.2016.06.012",
          journal = "Neuron",
          month = "Jul",
          number = "2",
          pages = "293-311",
          title = "NBLAST: Rapid, Sensitive Comparison of Neuronal 
Structure and Construction of Neuron Family Databases",
          volume = "91",
          year = "2016")


> I think what I need is the opposite of RefManageR::toBiblatex [3]. This seems 
> like it should be a common need, so I feel sure I must be missing something, 
> but I can't seem to google up any hints.
>
> With many thanks,
>
> Greg Jefferis.
>
> [1] http://github.com/jefferislab/nat.nblast 
> https://cran.r-project.org/package=nat.nblast
> [2]
>
> @article{Costa:2016aa,
> 	Author = {Costa, Marta and Manton, James D and Ostrovsky, Aaron D and 
> Prohaska, Steffen and Jefferis, Gregory S X E},
> 	Doi = {10.1016/j.neuron.2016.06.012},
> 	Journal = {Neuron},
> 	Month = {Jul},
> 	Number = {2},
> 	Pages = {293-311},
> 	Title = {NBLAST: Rapid, Sensitive Comparison of Neuronal Structure 
> and Construction of Neuron Family Databases},
> 	Volume = {91},
> 	Year = {2016}}
>
> [3] https://rdrr.io/github/ropensci/RefManageR/man/toBiblatex.html
>
>
> --
> Gregory Jefferis
> Division of Neurobiology
> MRC Laboratory of Molecular Biology
> Francis Crick Avenue
> Cambridge Biomedical Campus
> Cambridge, CB2 OQH, UK
>
> http://www2.mrc-lmb.cam.ac.uk/group-leaders/h-to-m/g-jefferis
> http://jefferislab.org
> http://www.zoo.cam.ac.uk/departments/connectomics
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From |uc@r @end|ng |rom |edor@project@org  Thu May 30 00:48:35 2019
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Thu, 30 May 2019 00:48:35 +0200
Subject: [Rd] Making a package CITATION file from BibTeX
In-Reply-To: <D3161B69-D245-47A3-BBC0-030CA767EFC9@mrc-lmb.cam.ac.uk>
References: <D3161B69-D245-47A3-BBC0-030CA767EFC9@mrc-lmb.cam.ac.uk>
Message-ID: <CALEXWq3d+x6UqDv=iTL4FfuigNqWqj9yoNbdZXaUjSZHTPJCNg@mail.gmail.com>

I believe r-package-devel is the proper list for this. Now in CC.

On Thu, 30 May 2019 at 00:16, Dr Gregory Jefferis
<jefferis at mrc-lmb.cam.ac.uk> wrote:
>
> Dear Colleagues,
>
> I would like to provide a CITATION file for my package nat.nblast [1].
>
> I have the correct citation in BibTeX format [2]. How can I convert this
> BibTeX to the format needed by R for a package CITATION file (I have a
> lot of other packages needing citations ...).
>
> I think what I need is the opposite of RefManageR::toBiblatex [3]. This
> seems like it should be a common need, so I feel sure I must be missing
> something, but I can't seem to google up any hints.

There's a specific section in the manual about this (1.9 CITATION
files), and lots of examples out there. Here's one:

https://github.com/r-simmer/simmer/blob/master/inst/CITATION

I?aki


From tdhock5 @end|ng |rom gm@||@com  Thu May 30 01:16:52 2019
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 29 May 2019 16:16:52 -0700
Subject: [Rd] R pkg install should fail for unsuccessful DLL copy on windows?
Message-ID: <CALK03d2hj9Ae3=7RTt-KLK+zZZ_2b1RK6RHK=rBNrR1MbZrV=w@mail.gmail.com>

Hi all,

I am having an issue related to installing packages on windows with
R-3.6.0. When installing a package that is in use, I expected R to stop
with an error. However I am getting a warning that the DLL copy was not
successful, but the overall package installation IS successful. This is
quite dangerous because the old DLL and the new R code could be
incompatible.

I am definitely not the first person to have this issue.
* Matt Dowle reported
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17478 which was never
addressed.
* Jim Hester reported
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17453 which was
apparently addressed in R-3.5.1, via
https://github.com/wch/r-source/commit/828a04f9c428403e476620b1905a1d8ca41d0bcd

But I am now having the same issue in R-3.6.0 -- is this a regression in R?
or is there another fix that I can use?

Below is the minimal R code that I used to reproduce the issue. Essentially,
* I start R with --vanilla and set options repos=cloud and warn=2 (which I
expect should convert warnings to errors).
* I do library(penaltyLearning) and then install the package from source,
which results in the
  warnings. I expected there should be an error.

th798 at cmp2986 MINGW64 ~/R
$ R --vanilla -e "options(repos='https://cloud.r-project.org',
warn=2);library(penaltyLearning);install.packages('penaltyLearning',
type='source');getOption('warn');sessionInfo()"

R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(repos='https://cloud.r-project.org',
warn=2);library(penaltyLearning);install.packages('penaltyLearning',
type='source');getOption('warn');sessionInfo()
Loading required package: data.table
Registered S3 methods overwritten by 'ggplot2':
  method         from
  [.quosures     rlang
  c.quosures     rlang
  print.quosures rlang
trying URL '
https://cloud.r-project.org/src/contrib/penaltyLearning_2018.09.04.tar.gz'
Content type 'application/x-gzip' length 2837289 bytes (2.7 MB)
==================================================
downloaded 2.7 MB

* installing *source* package 'penaltyLearning' ...
** package 'penaltyLearning' successfully unpacked and MD5 sums checked
** using staged installation
** libs
c:/Rtools/mingw_64/bin/g++  -std=gnu++11 -I"C:/PROGRA~1/R/R-36~1.0/include"
-DNDEBUG          -O2 -Wall  -mtune=generic -c interface.cpp -o interface.o
c:/Rtools/mingw_64/bin/g++  -std=gnu++11 -I"C:/PROGRA~1/R/R-36~1.0/include"
-DNDEBUG          -O2 -Wall  -mtune=generic -c largestContinuousMinimum.cpp
-o largestContinuousMinimum.o
largestContinuousMinimum.cpp: In function 'int
largestContinuousMinimum(int, double*, double*, int*)':
largestContinuousMinimum.cpp:38:27: warning: 'start' may be used
uninitialized in this function [-Wmaybe-uninitialized]
       index_vec[0] = start;
                           ^
c:/Rtools/mingw_64/bin/g++  -std=gnu++11 -I"C:/PROGRA~1/R/R-36~1.0/include"
-DNDEBUG          -O2 -Wall  -mtune=generic -c modelSelection.cpp -o
modelSelection.o
/usr/bin/sed: -e expression #1, char 1: unknown command: `C'
c:/Rtools/mingw_64/bin/g++ -shared -s -static-libgcc -o penaltyLearning.dll
tmp.def interface.o largestContinuousMinimum.o modelSelection.o
-LC:/PROGRA~1/R/R-36~1.0/bin/x64 -lR
installing to C:/Program
Files/R/R-3.6.0/library/00LOCK-penaltyLearning/00new/penaltyLearning/libs/x64
** R
** data
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
  converting help for package 'penaltyLearning'
    finding HTML links ... done
    GeomTallRect                            html
    IntervalRegressionCV                    html
    IntervalRegressionCVmargin              html
    IntervalRegressionInternal              html
    IntervalRegressionRegularized           html
    IntervalRegressionUnregularized         html
    ROChange                                html
    change.colors                           html
    change.labels                           html
    changeLabel                             html
    check_features_targets                  html
    check_target_pred                       html
    coef.IntervalRegression                 html
    demo8                                   html
    featureMatrix                           html
    featureVector                           html
    geom_tallrect                           html
    labelError                              html
    largestContinuousMinimumC               html
    largestContinuousMinimumR               html
    modelSelection                          html
    modelSelectionC                         html
    modelSelectionR                         html
    neuroblastomaProcessed                  html
    oneSkip                                 html
    plot.IntervalRegression                 html
    predict.IntervalRegression              html
    print.IntervalRegression                html
    squared.hinge                           html
    targetIntervalROC                       html
    targetIntervalResidual                  html
    targetIntervals                         html
    theme_no_space                          html
** building package indices
** testing if installed package can be loaded from temporary location
WARNING: moving package to final location failed, copying instead
Warning in file.copy(instdir, dirname(final_instdir), recursive = TRUE,  :
  problem copying C:\Program
Files\R\R-3.6.0\library\00LOCK-penaltyLearning\00new\penaltyLearning\libs\x64\penaltyLearning.dll
to C:\Program
Files\R\R-3.6.0\library\penaltyLearning\libs\x64\penaltyLearning.dll:
Permission denied
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation
path
* DONE (penaltyLearning)

The downloaded source packages are in
'C:\Users\th798\AppData\Local\Temp\RtmpUrOoFE\downloaded_packages'
[1] 2
R version 3.6.0 (2019-04-26)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 17134)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252
[2] LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] penaltyLearning_2018.09.04 data.table_1.12.2

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.1       assertthat_0.2.1 dplyr_0.8.1      crayon_1.3.4
 [5] R6_2.4.0         grid_3.6.0       plyr_1.8.4       magic_1.5-9
 [9] gtable_0.3.0     magrittr_1.5     scales_1.0.0     ggplot2_3.1.1
[13] pillar_1.4.0     rlang_0.3.4      lazyeval_0.2.2   geometry_0.4.1
[17] tools_3.6.0      glue_1.3.1       purrr_0.3.2      munsell_0.5.0
[21] abind_1.4-7      compiler_3.6.0   pkgconfig_2.0.2  colorspace_1.4-1
[25] tidyselect_0.2.5 tibble_2.1.1
>
>
]0;MINGW64:/c/Users/th798/R
th798 at cmp2986 MINGW64 ~/R
$

related blog post: https://tdhock.github.io/blog/2019/windows-dll/

	[[alternative HTML version deleted]]


From je||er|@ @end|ng |rom mrc-|mb@c@m@@c@uk  Thu May 30 02:31:30 2019
From: je||er|@ @end|ng |rom mrc-|mb@c@m@@c@uk (Dr Gregory Jefferis)
Date: Thu, 30 May 2019 01:31:30 +0100
Subject: [Rd] Making a package CITATION file from BibTeX
In-Reply-To: <alpine.DEB.2.21.1905300038070.6310@paninaro>
References: <D3161B69-D245-47A3-BBC0-030CA767EFC9@mrc-lmb.cam.ac.uk>
 <alpine.DEB.2.21.1905300038070.6310@paninaro>
Message-ID: <59AB7C12-A77C-450A-B71F-FAA3F149A3CC@mrc-lmb.cam.ac.uk>

Dear Achim,

Thank you so much for taking the time to write out a perfect response to 
my question. I hope it will soon be available for others to google!

@Inaki: Thank you. You are quite right. I intended to write to 
r-package-devel. Achim's reply is still copied below for users of that 
list.

All the best,

Greg.

On 29 May 2019, at 23:46, Achim Zeileis wrote:

> On Thu, 30 May 2019, Dr Gregory Jefferis wrote:
>
>> Dear Colleagues,
>>
>> I would like to provide a CITATION file for my package nat.nblast 
>> [1].
>>
>> I have the correct citation in BibTeX format [2]. How can I convert 
>> this BibTeX to the format needed by R for a package CITATION file (I 
>> have a lot of other packages needing citations ...).
>
> (1) You can use read.bib() from the "bibtex" package to read the .bib 
> file containing the relevant reference.
>
> (2) This gives you a "bibentry" object that can be turned into the R 
> code generating it with format(..., style = "R") from the basic 
> "utils" package.
>
> (3) Then you can writeLines() this R code on the console or 
> writeLines(..., "CITATION") to a CITATION file.
>
> (4) Optionally you can also include a $header in your bibentry with a 
> short introductory sentence. Or if you have multiple references to go 
> into the same CITATION you might want to include a $header for each 
> and an $mheader for everything.
>
> A worked example is included below. Background information is given 
> in: https://doi.org/10.32614/RJ-2012-009
>
> Let's assume that your BibTeX entry [2] is the first entry in a file 
> called "my.bib". Then you can do:
>
> ## read first item from BibTeX as "bibentry" object
> b <- bibtex::read.bib("my.bib")[[1]]
>
> ## delete the bib key and add a header for the citation
> b$key <- NULL
> b$header <- "To cite nat.nblast in publications use:"
>
> ## turn the "bibentry" into the R code generating it
> b <- format(b, style = "R")
>
> ## write the R code to the console
> writeLines(b)
>
> bibentry(bibtype = "Article",
>          header = "To cite nat.nblast in publications use:",
>          author = c(person(given = "Marta",
>                            family = "Costa"),
>                     person(given = c("James", "D"),
>                            family = "Manton"),
>                     person(given = c("Aaron", "D"),
>                            family = "Ostrovsky"),
>                     person(given = "Steffen",
>                            family = "Prohaska"),
>                     person(given = c("Gregory", "S", "X", "E"),
>                            family = "Jefferis")),
>          doi = "10.1016/j.neuron.2016.06.012",
>          journal = "Neuron",
>          month = "Jul",
>          number = "2",
>          pages = "293-311",
>          title = "NBLAST: Rapid, Sensitive Comparison of Neuronal 
> Structure and Construction of Neuron Family Databases",
>          volume = "91",
>          year = "2016")
>
>
>> I think what I need is the opposite of RefManageR::toBiblatex [3]. 
>> This seems like it should be a common need, so I feel sure I must be 
>> missing something, but I can't seem to google up any hints.
>>
>> With many thanks,
>>
>> Greg Jefferis.
>>
>> [1] http://github.com/jefferislab/nat.nblast 
>> https://cran.r-project.org/package=nat.nblast
>> [2]
>>
>> @article{Costa:2016aa,
>> 	Author = {Costa, Marta and Manton, James D and Ostrovsky, Aaron D 
>> and Prohaska, Steffen and Jefferis, Gregory S X E},
>> 	Doi = {10.1016/j.neuron.2016.06.012},
>> 	Journal = {Neuron},
>> 	Month = {Jul},
>> 	Number = {2},
>> 	Pages = {293-311},
>> 	Title = {NBLAST: Rapid, Sensitive Comparison of Neuronal Structure 
>> and Construction of Neuron Family Databases},
>> 	Volume = {91},
>> 	Year = {2016}}
>>
>> [3] https://rdrr.io/github/ropensci/RefManageR/man/toBiblatex.html
>>
>>
>> --
>> Gregory Jefferis
>> Division of Neurobiology
>> MRC Laboratory of Molecular Biology
>> Francis Crick Avenue
>> Cambridge Biomedical Campus
>> Cambridge, CB2 OQH, UK
>>
>> http://www2.mrc-lmb.cam.ac.uk/group-leaders/h-to-m/g-jefferis
>> http://jefferislab.org
>> http://www.zoo.cam.ac.uk/departments/connectomics
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


--
Gregory Jefferis, PhD                   Tel: +44 1223 267048
Division of Neurobiology
MRC Laboratory of Molecular Biology
Francis Crick Avenue
Cambridge Biomedical Campus
Cambridge, CB2 OQH, UK

http://www2.mrc-lmb.cam.ac.uk/group-leaders/h-to-m/g-jefferis
http://jefferislab.org
http://www.zoo.cam.ac.uk/departments/connectomics


From j@goreck| @end|ng |rom w|t@edu@p|  Thu May 30 05:14:52 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Thu, 30 May 2019 08:44:52 +0530
Subject: [Rd] R pkg install should fail for unsuccessful DLL copy on
 windows?
In-Reply-To: <CALK03d2hj9Ae3=7RTt-KLK+zZZ_2b1RK6RHK=rBNrR1MbZrV=w@mail.gmail.com>
References: <CALK03d2hj9Ae3=7RTt-KLK+zZZ_2b1RK6RHK=rBNrR1MbZrV=w@mail.gmail.com>
Message-ID: <CAOO9MKUNCqx+x4=Ny-OyO9TFiqZifDn7_vKGR7m04fyVbnhjLA@mail.gmail.com>

Hi Toby,
AFAIK it has not been addressed in R. You can handle the problem on
your package side, see
https://github.com/Rdatatable/data.table/pull/3237
Regards,
Jan


On Thu, May 30, 2019 at 4:46 AM Toby Hocking <tdhock5 at gmail.com> wrote:
>
> Hi all,
>
> I am having an issue related to installing packages on windows with
> R-3.6.0. When installing a package that is in use, I expected R to stop
> with an error. However I am getting a warning that the DLL copy was not
> successful, but the overall package installation IS successful. This is
> quite dangerous because the old DLL and the new R code could be
> incompatible.
>
> I am definitely not the first person to have this issue.
> * Matt Dowle reported
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17478 which was never
> addressed.
> * Jim Hester reported
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17453 which was
> apparently addressed in R-3.5.1, via
> https://github.com/wch/r-source/commit/828a04f9c428403e476620b1905a1d8ca41d0bcd
>
> But I am now having the same issue in R-3.6.0 -- is this a regression in R?
> or is there another fix that I can use?
>
> Below is the minimal R code that I used to reproduce the issue. Essentially,
> * I start R with --vanilla and set options repos=cloud and warn=2 (which I
> expect should convert warnings to errors).
> * I do library(penaltyLearning) and then install the package from source,
> which results in the
>   warnings. I expected there should be an error.
>
> th798 at cmp2986 MINGW64 ~/R
> $ R --vanilla -e "options(repos='https://cloud.r-project.org',
> warn=2);library(penaltyLearning);install.packages('penaltyLearning',
> type='source');getOption('warn');sessionInfo()"
>
> R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
> Copyright (C) 2019 The R Foundation for Statistical Computing
> Platform: x86_64-w64-mingw32/x64 (64-bit)
>
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
>
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
>
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
>
> > options(repos='https://cloud.r-project.org',
> warn=2);library(penaltyLearning);install.packages('penaltyLearning',
> type='source');getOption('warn');sessionInfo()
> Loading required package: data.table
> Registered S3 methods overwritten by 'ggplot2':
>   method         from
>   [.quosures     rlang
>   c.quosures     rlang
>   print.quosures rlang
> trying URL '
> https://cloud.r-project.org/src/contrib/penaltyLearning_2018.09.04.tar.gz'
> Content type 'application/x-gzip' length 2837289 bytes (2.7 MB)
> ==================================================
> downloaded 2.7 MB
>
> * installing *source* package 'penaltyLearning' ...
> ** package 'penaltyLearning' successfully unpacked and MD5 sums checked
> ** using staged installation
> ** libs
> c:/Rtools/mingw_64/bin/g++  -std=gnu++11 -I"C:/PROGRA~1/R/R-36~1.0/include"
> -DNDEBUG          -O2 -Wall  -mtune=generic -c interface.cpp -o interface.o
> c:/Rtools/mingw_64/bin/g++  -std=gnu++11 -I"C:/PROGRA~1/R/R-36~1.0/include"
> -DNDEBUG          -O2 -Wall  -mtune=generic -c largestContinuousMinimum.cpp
> -o largestContinuousMinimum.o
> largestContinuousMinimum.cpp: In function 'int
> largestContinuousMinimum(int, double*, double*, int*)':
> largestContinuousMinimum.cpp:38:27: warning: 'start' may be used
> uninitialized in this function [-Wmaybe-uninitialized]
>        index_vec[0] = start;
>                            ^
> c:/Rtools/mingw_64/bin/g++  -std=gnu++11 -I"C:/PROGRA~1/R/R-36~1.0/include"
> -DNDEBUG          -O2 -Wall  -mtune=generic -c modelSelection.cpp -o
> modelSelection.o
> /usr/bin/sed: -e expression #1, char 1: unknown command: `C'
> c:/Rtools/mingw_64/bin/g++ -shared -s -static-libgcc -o penaltyLearning.dll
> tmp.def interface.o largestContinuousMinimum.o modelSelection.o
> -LC:/PROGRA~1/R/R-36~1.0/bin/x64 -lR
> installing to C:/Program
> Files/R/R-3.6.0/library/00LOCK-penaltyLearning/00new/penaltyLearning/libs/x64
> ** R
> ** data
> ** byte-compile and prepare package for lazy loading
> ** help
> *** installing help indices
>   converting help for package 'penaltyLearning'
>     finding HTML links ... done
>     GeomTallRect                            html
>     IntervalRegressionCV                    html
>     IntervalRegressionCVmargin              html
>     IntervalRegressionInternal              html
>     IntervalRegressionRegularized           html
>     IntervalRegressionUnregularized         html
>     ROChange                                html
>     change.colors                           html
>     change.labels                           html
>     changeLabel                             html
>     check_features_targets                  html
>     check_target_pred                       html
>     coef.IntervalRegression                 html
>     demo8                                   html
>     featureMatrix                           html
>     featureVector                           html
>     geom_tallrect                           html
>     labelError                              html
>     largestContinuousMinimumC               html
>     largestContinuousMinimumR               html
>     modelSelection                          html
>     modelSelectionC                         html
>     modelSelectionR                         html
>     neuroblastomaProcessed                  html
>     oneSkip                                 html
>     plot.IntervalRegression                 html
>     predict.IntervalRegression              html
>     print.IntervalRegression                html
>     squared.hinge                           html
>     targetIntervalROC                       html
>     targetIntervalResidual                  html
>     targetIntervals                         html
>     theme_no_space                          html
> ** building package indices
> ** testing if installed package can be loaded from temporary location
> WARNING: moving package to final location failed, copying instead
> Warning in file.copy(instdir, dirname(final_instdir), recursive = TRUE,  :
>   problem copying C:\Program
> Files\R\R-3.6.0\library\00LOCK-penaltyLearning\00new\penaltyLearning\libs\x64\penaltyLearning.dll
> to C:\Program
> Files\R\R-3.6.0\library\penaltyLearning\libs\x64\penaltyLearning.dll:
> Permission denied
> ** testing if installed package can be loaded from final location
> ** testing if installed package keeps a record of temporary installation
> path
> * DONE (penaltyLearning)
>
> The downloaded source packages are in
> 'C:\Users\th798\AppData\Local\Temp\RtmpUrOoFE\downloaded_packages'
> [1] 2
> R version 3.6.0 (2019-04-26)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 17134)
>
> Matrix products: default
>
> locale:
> [1] LC_COLLATE=English_United States.1252
> [2] LC_CTYPE=English_United States.1252
> [3] LC_MONETARY=English_United States.1252
> [4] LC_NUMERIC=C
> [5] LC_TIME=English_United States.1252
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> other attached packages:
> [1] penaltyLearning_2018.09.04 data.table_1.12.2
>
> loaded via a namespace (and not attached):
>  [1] Rcpp_1.0.1       assertthat_0.2.1 dplyr_0.8.1      crayon_1.3.4
>  [5] R6_2.4.0         grid_3.6.0       plyr_1.8.4       magic_1.5-9
>  [9] gtable_0.3.0     magrittr_1.5     scales_1.0.0     ggplot2_3.1.1
> [13] pillar_1.4.0     rlang_0.3.4      lazyeval_0.2.2   geometry_0.4.1
> [17] tools_3.6.0      glue_1.3.1       purrr_0.3.2      munsell_0.5.0
> [21] abind_1.4-7      compiler_3.6.0   pkgconfig_2.0.2  colorspace_1.4-1
> [25] tidyselect_0.2.5 tibble_2.1.1
> >
> >
> ]0;MINGW64:/c/Users/th798/R
> th798 at cmp2986 MINGW64 ~/R
> $
>
> related blog post: https://tdhock.github.io/blog/2019/windows-dll/
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @uh@rto_@nggono @end|ng |rom y@hoo@com  Thu May 30 16:45:22 2019
From: @uh@rto_@nggono @end|ng |rom y@hoo@com (Suharto Anggono Suharto Anggono)
Date: Thu, 30 May 2019 14:45:22 +0000 (UTC)
Subject: [Rd] stopifnot
References: <1923928808.6775475.1559227522953.ref@mail.yahoo.com>
Message-ID: <1923928808.6775475.1559227522953@mail.yahoo.com>

Here is a patch to function 'stopifnot' that adds 'evaluated' argument and makes 'exprs' argument in 'stopifnot' like 'exprs' argument in 'withAutoprint'.

--- stop.R	2019-05-30 14:01:15.282197286 +0000
+++ stop_new.R	2019-05-30 14:01:51.372187466 +0000
@@ -31,7 +31,7 @@
         .Internal(stop(call., .makeMessage(..., domain = domain)))
 }
 
-stopifnot <- function(..., exprs, local = TRUE)
+stopifnot <- function(..., exprs, evaluated = FALSE, local = TRUE)
 {
     n <- ...length()
     if(!missing(exprs)) {
@@ -41,21 +41,19 @@
 		 else if(isFALSE(local)) .GlobalEnv
 		 else if (is.environment(local)) local
 		 else stop("'local' must be TRUE, FALSE or an environment")
-	exprs <- substitute(exprs) # protect from evaluation
-	E1 <- if(is.call(exprs)) exprs[[1]]
+	E1 <- if(!evaluated && is.call(exprs <- substitute(exprs))) exprs[[1]]
 	cl <- if(is.symbol(E1) &&
-		 (E1 == quote(`{`) || E1 == quote(expression))) {
+		 E1 == quote(`{`)) {
 		  exprs[[1]] <- quote(stopifnot) ## --> stopifnot(*, *, ..., *) :
 		  exprs
 	      }
 	      else
 		  as.call(c(quote(stopifnot),
-			    if(is.null(E1) && is.symbol(exprs) &&
-			       is.expression(E1 <- eval(exprs))) # the *name* of an expression
-				as.list(E1)
+			    if(is.expression(exprs))
+				exprs
 			    else
 				as.expression(exprs)
-			    )) # or fail ..
+			    ))
         names(cl) <- NULL
 	return(eval(cl, envir=envir))
     }

--------------------------------------------


 Subject: Re: [Rd] stopifnot
 To: "Martin Maechler" <maechler at stat.math.ethz.ch>
 Cc: r-devel at r-project.org
 Date: Monday, 15 April, 2019, 2:56 AM
 
Also, in current definition of function 'stopifnot' in R 3.6.0 beta or R devel, for 'cl' if 'exprs' is specified, there a case with comment "the *name* of an expression". The intent is allowing
stopifnot(exprs = ee) ,
where variable 'ee' holds an expression object, to work on the expression object.

It is not quite right to use eval(exprs) . It fails when 'stopifnot' is called inside a function, like
f <- function(ee) stopifnot(exprs = ee)
f(expression())

But, how about local=FALSE case? Should the following work?
f <- function(ee) stopifnot(exprs = ee, local = FALSE)
f(expression())

But, why bother making it work, while it is undocumented that 'exprs' argument in 'stopifnot' can be an expression? Well, yes, expectation may be set from the name "exprs" itself or from argument 'exprs' in function 'source' or 'withAutoprint'. Function 'withAutoprint' may be the closest match.

Function 'withAutoprint' has 'evaluated' argument that controls whether work is on value of  'exprs' or on 'exprs' as given. I like the approach.


From j|nghu@zh@o @end|ng |rom hotm@||@com  Thu May 30 16:54:57 2019
From: j|nghu@zh@o @end|ng |rom hotm@||@com (jing hua zhao)
Date: Thu, 30 May 2019 14:54:57 +0000
Subject: [Rd] use of buffers in sprintf and snprintf
In-Reply-To: <DB6P189MB0581F101B909FA1E2ACC509DA51F0@DB6P189MB0581.EURP189.PROD.OUTLOOK.COM>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
 <23307.48529.773039.904392@stat.math.ethz.ch>
 <23307.49323.908367.788461@stat.math.ethz.ch>
 <CABtg=KkuVHoX1tZ=+Lr7mDFrXvn5zdf3+Wmqhnv58GXZJS2KwQ@mail.gmail.com>,
 <f3388993-5e20-d7e5-346a-785d33fab27b@daqana.com>,
 <DB6P189MB0581F101B909FA1E2ACC509DA51F0@DB6P189MB0581.EURP189.PROD.OUTLOOK.COM>
Message-ID: <DB6P189MB0581A9E34BD18A3E06B8E725A5180@DB6P189MB0581.EURP189.PROD.OUTLOOK.COM>

Hi again,

I realised it is useful to replicate the warnings locally without relying on CRAN automatic check; instead of R(-devel)  CMD check --as-cran package_version.tar.gz one can use

R CMD check --configure-args=""

and in my case the WARNINGS were initially given with https://www.stats.ox.ac.uk/pub/bdr/gcc9/README.txt and those specification might as well used in --configure-args above.

Besst regards,


Jing Hua

________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of jing hua zhao <jinghuazhao at hotmail.com>
Sent: 29 May 2019 15:49
To: r-devel at r-project.org
Subject: [Rd] use of buffers in sprintf and snprintf

Dear R-developers,

I am struggling with packaging with sprintf and snprintf() as the following WARNINGS from gcc 9.x,

  hap_c.c:380:46: warning: ?%d? directive output may be truncated writing between 1 and 10 bytes into a region of size between 0 and 127 [-Wformat-truncation=]
  hap_c.c:392:46: warning: ?%d? directive output may be truncated writing between 1 and 10 bytes into a region of size between 0 and 127 [-Wformat-truncation=]

Essentially, I have

#define MAX_FILENAME_LEN 128
char of1name[MAX_FILENAME_LEN],of2name[MAX_FILENAME_LEN], tempname[MAX_FILENAME_LEN];

...

 snprintf(tempname,sizeof(tempname),"%s.%d", of1name, j);

It looks I could get around with


#define MAX_FILENAME_LEN 128

#define MAX_FILENAME_LEN2 256

char of1name[MAX_FILENAME_LEN],of2name[MAX_FILENAME_LEN], tempname[MAX_FILENAME_LEN2];

...
snprintf(tempname,2*sizeof(tempname)+1,"%s.%d", of1name, j)

It looks a bit waste of resources to me.


Any idea will be greatly appreciated,



Jing Hua

        [[alternative HTML version deleted]]


	[[alternative HTML version deleted]]


From jte||er|@@rproject @end|ng |rom gm@||@com  Thu May 30 18:46:29 2019
From: jte||er|@@rproject @end|ng |rom gm@||@com (Juan Telleria Ruiz de Aguirre)
Date: Thu, 30 May 2019 18:46:29 +0200
Subject: [Rd] 
 Converting non-32-bit integers from python to R to use bit64:
 reticulate
In-Reply-To: <CAD4oTHH_ixXYEk1OEuFq_yJf83sDYmShbZ1nPGFovRvy-XZPnw@mail.gmail.com>
References: <CAJXDcw3jQd2B+hvfXuUUeczx=mmtw0MA_Udaesd-UgM+spyGJw@mail.gmail.com>
 <CAD4oTHH_ixXYEk1OEuFq_yJf83sDYmShbZ1nPGFovRvy-XZPnw@mail.gmail.com>
Message-ID: <CAJXDcw1V=2Z0BM31Ovc5SfiUEotuHoQRqWWi5z-8UfRg2qkM5w@mail.gmail.com>

Thank you Gabriel for valuable insights on the 64-bit integers topic.

In addition, my statement was wrong, as Python3 seems to have unlimited
(and variable) size integers. Here is related CPython Code:

https://github.com/python/cpython/blob/master/Objects/longobject.c

Division between Int-32 and Int-64 seems to only happen in Python2.

Best,
Juan

El mi?rcoles, 29 de mayo de 2019, Gabriel Becker <gabembecker at gmail.com>
escribi?:

> Hi Juan,
>
> Comments inline.
>
> On Wed, May 29, 2019 at 12:48 PM Juan Telleria Ruiz de Aguirre <
> jtelleria.rproject at gmail.com> wrote:
>
>> Dear R Developers,
>>
>> There is an interesting issue related to "reticulate" R package which
>> discusses how to convert Python's non-32 bit integers to R, which has had
>> quite an exhaustive discussion:
>>
>> https://github.com/rstudio/reticulate/issues/323
>>
>> Python seems to handle integers differently from R, and is dependant on
>> the
>> system arquitecture: On 32 bit systems uses 32-bit integers, and on 64-bit
>> systems uses 64-bit integers.
>>
>> So my question is:
>>
>> As regards R's C Interface, how costly would it be to convert INTSXP from
>> 32 bits to 64 bits using C, on 64 bits Systems? Do the benefits surpass
>> the
>> costs? And should such development be handled from within R Core /
>> Ordinary
>> Members , or it shall be left to package maintainers?
>>
>
> Well, I am not an R-core member, but I can mention a few things:
>
> 1. This seems like it would make the results of R code non-reproducible
> between 32 and 64bit versions of R; at least some code would give different
> results (at the very least in terms of when integer values overflow to NA,
> which is documented behavior).
> 2. Obviously all integer data would take twice as much memory, memory
> bandwidth, space in caches, etc, even when it doesn't need it.
> 3. Various places treat data /data pointers coming out of INTSXP and
> LGLSXP objects the same within the internal R sources (as currently they're
> both int/int*). Catching and fixing all those wouldn't be impossible, but
> it would take at least some doing.
>
> For me personally 1 seems like a big problem, and 3 makes the conversion
> more work than it might have seemed initially.
>
> As a related side note, as far as I understand what I've heard from R-core
> members directly, the choice to not have multiple types of integers is
> intentional and unlikely to change.
>
> Best,
> ~G
>
>
>
>
>>
>> Thank you! :)
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Fri May 31 01:31:44 2019
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Thu, 30 May 2019 16:31:44 -0700
Subject: [Rd] R pkg install should fail for unsuccessful DLL copy on
 windows?
In-Reply-To: <CAOO9MKUNCqx+x4=Ny-OyO9TFiqZifDn7_vKGR7m04fyVbnhjLA@mail.gmail.com>
References: <CALK03d2hj9Ae3=7RTt-KLK+zZZ_2b1RK6RHK=rBNrR1MbZrV=w@mail.gmail.com>
 <CAOO9MKUNCqx+x4=Ny-OyO9TFiqZifDn7_vKGR7m04fyVbnhjLA@mail.gmail.com>
Message-ID: <CALK03d2kWF2NT-x0uOqbxriLMgKVatLfVEkxwUmkb6Zgnyy7OQ@mail.gmail.com>

thanks for the tip Jan.

However it would be nice if I didn't have to handle this myself for all of
my packages. (and teach my students how to do that)

BTW I tried to disable staged installation, and the issue still happens:

th798 at cmp2986 MINGW64 ~/projects/max-generalized-auc (master)
$ R_INSTALL_STAGED=FALSE R --vanilla -e
".libPaths('~/R/library');.libPaths();options(repos='
https://cloud.r-project.org',
warn=2);library(penaltyLearning);install.packages('penaltyLearning',
type='source');getOption('warn');sessionInfo()"

R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> .libPaths('~/R/library');.libPaths();options(repos='
https://cloud.r-project.org',
warn=2);library(penaltyLearning);install.packages('penaltyLearning',
type='source');getOption('warn');sessionInfo()
[1] "C:/Users/th798/R/library"           "C:/Program
Files/R/R-3.6.0/library"
Loading required package: data.table
Registered S3 methods overwritten by 'ggplot2':
  method         from
  [.quosures     rlang
  c.quosures     rlang
  print.quosures rlang
Installing package into 'C:/Users/th798/R/library'
(as 'lib' is unspecified)
trying URL '
https://cloud.r-project.org/src/contrib/penaltyLearning_2018.09.04.tar.gz'
Content type 'application/x-gzip' length 2837289 bytes (2.7 MB)
==================================================
downloaded 2.7 MB

* installing *source* package 'penaltyLearning' ...
** package 'penaltyLearning' successfully unpacked and MD5 sums checked
** using non-staged installation
** libs
c:/Rtools/mingw_64/bin/g++  -std=gnu++11 -I"C:/PROGRA~1/R/R-36~1.0/include"
-DNDEBUG          -O2 -Wall  -mtune=generic -c interface.cpp -o interface.o
c:/Rtools/mingw_64/bin/g++  -std=gnu++11 -I"C:/PROGRA~1/R/R-36~1.0/include"
-DNDEBUG          -O2 -Wall  -mtune=generic -c largestContinuousMinimum.cpp
-o largestContinuousMinimum.o
largestContinuousMinimum.cpp: In function 'int
largestContinuousMinimum(int, double*, double*, int*)':
largestContinuousMinimum.cpp:38:27: warning: 'start' may be used
uninitialized in this function [-Wmaybe-uninitialized]
       index_vec[0] = start;
                           ^
c:/Rtools/mingw_64/bin/g++  -std=gnu++11 -I"C:/PROGRA~1/R/R-36~1.0/include"
-DNDEBUG          -O2 -Wall  -mtune=generic -c modelSelection.cpp -o
modelSelection.o
/usr/bin/sed: -e expression #1, char 1: unknown command: `C'
c:/Rtools/mingw_64/bin/g++ -shared -s -static-libgcc -o penaltyLearning.dll
tmp.def interface.o largestContinuousMinimum.o modelSelection.o
-LC:/PROGRA~1/R/R-36~1.0/bin/x64 -lR
installing to C:/Users/th798/R/library/penaltyLearning/libs/x64
Warning in file.copy(files, dest, overwrite = TRUE) :
  problem copying .\penaltyLearning.dll to
C:\Users\th798\R\library\penaltyLearning\libs\x64\penaltyLearning.dll:
Permission denied
** R
** data
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
  converting help for package 'penaltyLearning'
    finding HTML links ... done
    GeomTallRect                            html
    IntervalRegressionCV                    html
    IntervalRegressionCVmargin              html
    IntervalRegressionInternal              html
    IntervalRegressionRegularized           html
    IntervalRegressionUnregularized         html
    ROChange                                html
    change.colors                           html
    change.labels                           html
    changeLabel                             html
    check_features_targets                  html
    check_target_pred                       html
    coef.IntervalRegression                 html
    demo8                                   html
    featureMatrix                           html
    featureVector                           html
    geom_tallrect                           html
    labelError                              html
    largestContinuousMinimumC               html
    largestContinuousMinimumR               html
    modelSelection                          html
    modelSelectionC                         html
    modelSelectionR                         html
    neuroblastomaProcessed                  html
    oneSkip                                 html
    plot.IntervalRegression                 html
    predict.IntervalRegression              html
    print.IntervalRegression                html
    squared.hinge                           html
    targetIntervalROC                       html
    targetIntervalResidual                  html
    targetIntervals                         html
    theme_no_space                          html
** building package indices
** testing if installed package can be loaded
* DONE (penaltyLearning)

The downloaded source packages are in
'C:\Users\th798\AppData\Local\Temp\RtmpkVV0sH\downloaded_packages'
[1] 2
R version 3.6.0 (2019-04-26)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 17134)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252
[2] LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] penaltyLearning_2018.09.04 data.table_1.12.2

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.1       assertthat_0.2.1 dplyr_0.8.1      crayon_1.3.4
 [5] R6_2.4.0         grid_3.6.0       plyr_1.8.4       magic_1.5-9
 [9] gtable_0.3.0     magrittr_1.5     scales_1.0.0     ggplot2_3.1.1
[13] pillar_1.4.0     rlang_0.3.4      lazyeval_0.2.2   geometry_0.4.1
[17] tools_3.6.0      glue_1.3.1       purrr_0.3.2      munsell_0.5.0
[21] abind_1.4-7      compiler_3.6.0   pkgconfig_2.0.2  colorspace_1.4-1
[25] tidyselect_0.2.5 tibble_2.1.1
>
>
]0;MINGW64:/c/Users/th798/projects/max-generalized-auc
th798 at cmp2986 MINGW64 ~/projects/max-generalized-auc (master)
$



On Wed, May 29, 2019 at 8:15 PM Jan Gorecki <j.gorecki at wit.edu.pl> wrote:

> Hi Toby,
> AFAIK it has not been addressed in R. You can handle the problem on
> your package side, see
> https://github.com/Rdatatable/data.table/pull/3237
> Regards,
> Jan
>
>
> On Thu, May 30, 2019 at 4:46 AM Toby Hocking <tdhock5 at gmail.com> wrote:
> >
> > Hi all,
> >
> > I am having an issue related to installing packages on windows with
> > R-3.6.0. When installing a package that is in use, I expected R to stop
> > with an error. However I am getting a warning that the DLL copy was not
> > successful, but the overall package installation IS successful. This is
> > quite dangerous because the old DLL and the new R code could be
> > incompatible.
> >
> > I am definitely not the first person to have this issue.
> > * Matt Dowle reported
> > https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17478 which was
> never
> > addressed.
> > * Jim Hester reported
> > https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17453 which was
> > apparently addressed in R-3.5.1, via
> >
> https://github.com/wch/r-source/commit/828a04f9c428403e476620b1905a1d8ca41d0bcd
> >
> > But I am now having the same issue in R-3.6.0 -- is this a regression in
> R?
> > or is there another fix that I can use?
> >
> > Below is the minimal R code that I used to reproduce the issue.
> Essentially,
> > * I start R with --vanilla and set options repos=cloud and warn=2 (which
> I
> > expect should convert warnings to errors).
> > * I do library(penaltyLearning) and then install the package from source,
> > which results in the
> >   warnings. I expected there should be an error.
> >
> > th798 at cmp2986 MINGW64 ~/R
> > $ R --vanilla -e "options(repos='https://cloud.r-project.org',
> > warn=2);library(penaltyLearning);install.packages('penaltyLearning',
> > type='source');getOption('warn');sessionInfo()"
> >
> > R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
> > Copyright (C) 2019 The R Foundation for Statistical Computing
> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> >
> > R is free software and comes with ABSOLUTELY NO WARRANTY.
> > You are welcome to redistribute it under certain conditions.
> > Type 'license()' or 'licence()' for distribution details.
> >
> > R is a collaborative project with many contributors.
> > Type 'contributors()' for more information and
> > 'citation()' on how to cite R or R packages in publications.
> >
> > Type 'demo()' for some demos, 'help()' for on-line help, or
> > 'help.start()' for an HTML browser interface to help.
> > Type 'q()' to quit R.
> >
> > > options(repos='https://cloud.r-project.org',
> > warn=2);library(penaltyLearning);install.packages('penaltyLearning',
> > type='source');getOption('warn');sessionInfo()
> > Loading required package: data.table
> > Registered S3 methods overwritten by 'ggplot2':
> >   method         from
> >   [.quosures     rlang
> >   c.quosures     rlang
> >   print.quosures rlang
> > trying URL '
> >
> https://cloud.r-project.org/src/contrib/penaltyLearning_2018.09.04.tar.gz'
> > Content type 'application/x-gzip' length 2837289 bytes (2.7 MB)
> > ==================================================
> > downloaded 2.7 MB
> >
> > * installing *source* package 'penaltyLearning' ...
> > ** package 'penaltyLearning' successfully unpacked and MD5 sums checked
> > ** using staged installation
> > ** libs
> > c:/Rtools/mingw_64/bin/g++  -std=gnu++11
> -I"C:/PROGRA~1/R/R-36~1.0/include"
> > -DNDEBUG          -O2 -Wall  -mtune=generic -c interface.cpp -o
> interface.o
> > c:/Rtools/mingw_64/bin/g++  -std=gnu++11
> -I"C:/PROGRA~1/R/R-36~1.0/include"
> > -DNDEBUG          -O2 -Wall  -mtune=generic -c
> largestContinuousMinimum.cpp
> > -o largestContinuousMinimum.o
> > largestContinuousMinimum.cpp: In function 'int
> > largestContinuousMinimum(int, double*, double*, int*)':
> > largestContinuousMinimum.cpp:38:27: warning: 'start' may be used
> > uninitialized in this function [-Wmaybe-uninitialized]
> >        index_vec[0] = start;
> >                            ^
> > c:/Rtools/mingw_64/bin/g++  -std=gnu++11
> -I"C:/PROGRA~1/R/R-36~1.0/include"
> > -DNDEBUG          -O2 -Wall  -mtune=generic -c modelSelection.cpp -o
> > modelSelection.o
> > /usr/bin/sed: -e expression #1, char 1: unknown command: `C'
> > c:/Rtools/mingw_64/bin/g++ -shared -s -static-libgcc -o
> penaltyLearning.dll
> > tmp.def interface.o largestContinuousMinimum.o modelSelection.o
> > -LC:/PROGRA~1/R/R-36~1.0/bin/x64 -lR
> > installing to C:/Program
> >
> Files/R/R-3.6.0/library/00LOCK-penaltyLearning/00new/penaltyLearning/libs/x64
> > ** R
> > ** data
> > ** byte-compile and prepare package for lazy loading
> > ** help
> > *** installing help indices
> >   converting help for package 'penaltyLearning'
> >     finding HTML links ... done
> >     GeomTallRect                            html
> >     IntervalRegressionCV                    html
> >     IntervalRegressionCVmargin              html
> >     IntervalRegressionInternal              html
> >     IntervalRegressionRegularized           html
> >     IntervalRegressionUnregularized         html
> >     ROChange                                html
> >     change.colors                           html
> >     change.labels                           html
> >     changeLabel                             html
> >     check_features_targets                  html
> >     check_target_pred                       html
> >     coef.IntervalRegression                 html
> >     demo8                                   html
> >     featureMatrix                           html
> >     featureVector                           html
> >     geom_tallrect                           html
> >     labelError                              html
> >     largestContinuousMinimumC               html
> >     largestContinuousMinimumR               html
> >     modelSelection                          html
> >     modelSelectionC                         html
> >     modelSelectionR                         html
> >     neuroblastomaProcessed                  html
> >     oneSkip                                 html
> >     plot.IntervalRegression                 html
> >     predict.IntervalRegression              html
> >     print.IntervalRegression                html
> >     squared.hinge                           html
> >     targetIntervalROC                       html
> >     targetIntervalResidual                  html
> >     targetIntervals                         html
> >     theme_no_space                          html
> > ** building package indices
> > ** testing if installed package can be loaded from temporary location
> > WARNING: moving package to final location failed, copying instead
> > Warning in file.copy(instdir, dirname(final_instdir), recursive = TRUE,
> :
> >   problem copying C:\Program
> >
> Files\R\R-3.6.0\library\00LOCK-penaltyLearning\00new\penaltyLearning\libs\x64\penaltyLearning.dll
> > to C:\Program
> > Files\R\R-3.6.0\library\penaltyLearning\libs\x64\penaltyLearning.dll:
> > Permission denied
> > ** testing if installed package can be loaded from final location
> > ** testing if installed package keeps a record of temporary installation
> > path
> > * DONE (penaltyLearning)
> >
> > The downloaded source packages are in
> > 'C:\Users\th798\AppData\Local\Temp\RtmpUrOoFE\downloaded_packages'
> > [1] 2
> > R version 3.6.0 (2019-04-26)
> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> > Running under: Windows 10 x64 (build 17134)
> >
> > Matrix products: default
> >
> > locale:
> > [1] LC_COLLATE=English_United States.1252
> > [2] LC_CTYPE=English_United States.1252
> > [3] LC_MONETARY=English_United States.1252
> > [4] LC_NUMERIC=C
> > [5] LC_TIME=English_United States.1252
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > other attached packages:
> > [1] penaltyLearning_2018.09.04 data.table_1.12.2
> >
> > loaded via a namespace (and not attached):
> >  [1] Rcpp_1.0.1       assertthat_0.2.1 dplyr_0.8.1      crayon_1.3.4
> >  [5] R6_2.4.0         grid_3.6.0       plyr_1.8.4       magic_1.5-9
> >  [9] gtable_0.3.0     magrittr_1.5     scales_1.0.0     ggplot2_3.1.1
> > [13] pillar_1.4.0     rlang_0.3.4      lazyeval_0.2.2   geometry_0.4.1
> > [17] tools_3.6.0      glue_1.3.1       purrr_0.3.2      munsell_0.5.0
> > [21] abind_1.4-7      compiler_3.6.0   pkgconfig_2.0.2  colorspace_1.4-1
> > [25] tidyselect_0.2.5 tibble_2.1.1
> > >
> > >
> > ]0;MINGW64:/c/Users/th798/R
> > th798 at cmp2986 MINGW64 ~/R
> > $
> >
> > related blog post: https://tdhock.github.io/blog/2019/windows-dll/
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Fri May 31 01:50:29 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Thu, 30 May 2019 23:50:29 +0000
Subject: [Rd] R pkg install should fail for unsuccessful DLL copy on
 windows?
In-Reply-To: <CALK03d2kWF2NT-x0uOqbxriLMgKVatLfVEkxwUmkb6Zgnyy7OQ@mail.gmail.com>
References: <CALK03d2hj9Ae3=7RTt-KLK+zZZ_2b1RK6RHK=rBNrR1MbZrV=w@mail.gmail.com>
 <CAOO9MKUNCqx+x4=Ny-OyO9TFiqZifDn7_vKGR7m04fyVbnhjLA@mail.gmail.com>
 <CALK03d2kWF2NT-x0uOqbxriLMgKVatLfVEkxwUmkb6Zgnyy7OQ@mail.gmail.com>
Message-ID: <35b31c30-cf83-1505-70ca-c6a90185dce5@fredhutch.org>

Also note that this can lead to people not being able to load the
package if the set of .Call entry points has changed between the old
and new versions of the package. We strongly suspect that this is what
happened to this Bioconductor user:

   https://support.bioconductor.org/p/121228/

Note that she's installing the binary and in this case no warning
is issued. All we see is:

   package ?S4Vectors? successfully unpacked and MD5 sums checked

but the old DLL apparently didn't get replaced with the new one.
Hence the

   error: "make_RAW_from_NA_LLINT" not available for .Call() for package 
"S4Vectors"

later on when trying to load the package.

Cheers,
H.


On 5/30/19 16:31, Toby Hocking wrote:
> thanks for the tip Jan.
> 
> However it would be nice if I didn't have to handle this myself for all of
> my packages. (and teach my students how to do that)
> 
> BTW I tried to disable staged installation, and the issue still happens:
> 
> th798 at cmp2986 MINGW64 ~/projects/max-generalized-auc (master)
> $ R_INSTALL_STAGED=FALSE R --vanilla -e
> ".libPaths('~/R/library');.libPaths();options(repos='
> https://urldefense.proofpoint.com/v2/url?u=https-3A__cloud.r-2Dproject.org&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=7X00xNRObhT9O68YU8m-IBkt38N5p_GP-UV77XEnKZw&e= ',
> warn=2);library(penaltyLearning);install.packages('penaltyLearning',
> type='source');getOption('warn');sessionInfo()"
> 
> R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
> Copyright (C) 2019 The R Foundation for Statistical Computing
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> 
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
> 
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
> 
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
> 
>> .libPaths('~/R/library');.libPaths();options(repos='
> https://urldefense.proofpoint.com/v2/url?u=https-3A__cloud.r-2Dproject.org&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=7X00xNRObhT9O68YU8m-IBkt38N5p_GP-UV77XEnKZw&e= ',
> warn=2);library(penaltyLearning);install.packages('penaltyLearning',
> type='source');getOption('warn');sessionInfo()
> [1] "C:/Users/th798/R/library"           "C:/Program
> Files/R/R-3.6.0/library"
> Loading required package: data.table
> Registered S3 methods overwritten by 'ggplot2':
>    method         from
>    [.quosures     rlang
>    c.quosures     rlang
>    print.quosures rlang
> Installing package into 'C:/Users/th798/R/library'
> (as 'lib' is unspecified)
> trying URL '
> https://urldefense.proofpoint.com/v2/url?u=https-3A__cloud.r-2Dproject.org_src_contrib_penaltyLearning-5F2018.09.04.tar.gz&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=o34c6BnD4LvJv-00tYn5M2TqO_IjH5qtaKnnhI4ph50&e= '
> Content type 'application/x-gzip' length 2837289 bytes (2.7 MB)
> ==================================================
> downloaded 2.7 MB
> 
> * installing *source* package 'penaltyLearning' ...
> ** package 'penaltyLearning' successfully unpacked and MD5 sums checked
> ** using non-staged installation
> ** libs
> c:/Rtools/mingw_64/bin/g++  -std=gnu++11 -I"C:/PROGRA~1/R/R-36~1.0/include"
> -DNDEBUG          -O2 -Wall  -mtune=generic -c interface.cpp -o interface.o
> c:/Rtools/mingw_64/bin/g++  -std=gnu++11 -I"C:/PROGRA~1/R/R-36~1.0/include"
> -DNDEBUG          -O2 -Wall  -mtune=generic -c largestContinuousMinimum.cpp
> -o largestContinuousMinimum.o
> largestContinuousMinimum.cpp: In function 'int
> largestContinuousMinimum(int, double*, double*, int*)':
> largestContinuousMinimum.cpp:38:27: warning: 'start' may be used
> uninitialized in this function [-Wmaybe-uninitialized]
>         index_vec[0] = start;
>                             ^
> c:/Rtools/mingw_64/bin/g++  -std=gnu++11 -I"C:/PROGRA~1/R/R-36~1.0/include"
> -DNDEBUG          -O2 -Wall  -mtune=generic -c modelSelection.cpp -o
> modelSelection.o
> /usr/bin/sed: -e expression #1, char 1: unknown command: `C'
> c:/Rtools/mingw_64/bin/g++ -shared -s -static-libgcc -o penaltyLearning.dll
> tmp.def interface.o largestContinuousMinimum.o modelSelection.o
> -LC:/PROGRA~1/R/R-36~1.0/bin/x64 -lR
> installing to C:/Users/th798/R/library/penaltyLearning/libs/x64
> Warning in file.copy(files, dest, overwrite = TRUE) :
>    problem copying .\penaltyLearning.dll to
> C:\Users\th798\R\library\penaltyLearning\libs\x64\penaltyLearning.dll:
> Permission denied
> ** R
> ** data
> ** byte-compile and prepare package for lazy loading
> ** help
> *** installing help indices
>    converting help for package 'penaltyLearning'
>      finding HTML links ... done
>      GeomTallRect                            html
>      IntervalRegressionCV                    html
>      IntervalRegressionCVmargin              html
>      IntervalRegressionInternal              html
>      IntervalRegressionRegularized           html
>      IntervalRegressionUnregularized         html
>      ROChange                                html
>      change.colors                           html
>      change.labels                           html
>      changeLabel                             html
>      check_features_targets                  html
>      check_target_pred                       html
>      coef.IntervalRegression                 html
>      demo8                                   html
>      featureMatrix                           html
>      featureVector                           html
>      geom_tallrect                           html
>      labelError                              html
>      largestContinuousMinimumC               html
>      largestContinuousMinimumR               html
>      modelSelection                          html
>      modelSelectionC                         html
>      modelSelectionR                         html
>      neuroblastomaProcessed                  html
>      oneSkip                                 html
>      plot.IntervalRegression                 html
>      predict.IntervalRegression              html
>      print.IntervalRegression                html
>      squared.hinge                           html
>      targetIntervalROC                       html
>      targetIntervalResidual                  html
>      targetIntervals                         html
>      theme_no_space                          html
> ** building package indices
> ** testing if installed package can be loaded
> * DONE (penaltyLearning)
> 
> The downloaded source packages are in
> 'C:\Users\th798\AppData\Local\Temp\RtmpkVV0sH\downloaded_packages'
> [1] 2
> R version 3.6.0 (2019-04-26)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 17134)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=English_United States.1252
> [2] LC_CTYPE=English_United States.1252
> [3] LC_MONETARY=English_United States.1252
> [4] LC_NUMERIC=C
> [5] LC_TIME=English_United States.1252
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> other attached packages:
> [1] penaltyLearning_2018.09.04 data.table_1.12.2
> 
> loaded via a namespace (and not attached):
>   [1] Rcpp_1.0.1       assertthat_0.2.1 dplyr_0.8.1      crayon_1.3.4
>   [5] R6_2.4.0         grid_3.6.0       plyr_1.8.4       magic_1.5-9
>   [9] gtable_0.3.0     magrittr_1.5     scales_1.0.0     ggplot2_3.1.1
> [13] pillar_1.4.0     rlang_0.3.4      lazyeval_0.2.2   geometry_0.4.1
> [17] tools_3.6.0      glue_1.3.1       purrr_0.3.2      munsell_0.5.0
> [21] abind_1.4-7      compiler_3.6.0   pkgconfig_2.0.2  colorspace_1.4-1
> [25] tidyselect_0.2.5 tibble_2.1.1
>>
>>
> ]0;MINGW64:/c/Users/th798/projects/max-generalized-auc
> th798 at cmp2986 MINGW64 ~/projects/max-generalized-auc (master)
> $
> 
> 
> 
> On Wed, May 29, 2019 at 8:15 PM Jan Gorecki <j.gorecki at wit.edu.pl> wrote:
> 
>> Hi Toby,
>> AFAIK it has not been addressed in R. You can handle the problem on
>> your package side, see
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_Rdatatable_data.table_pull_3237&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=rI7qS9klz5h9_Cxq2381FT730_fIJS2eYuO7zfoFuOQ&e=
>> Regards,
>> Jan
>>
>>
>> On Thu, May 30, 2019 at 4:46 AM Toby Hocking <tdhock5 at gmail.com> wrote:
>>>
>>> Hi all,
>>>
>>> I am having an issue related to installing packages on windows with
>>> R-3.6.0. When installing a package that is in use, I expected R to stop
>>> with an error. However I am getting a warning that the DLL copy was not
>>> successful, but the overall package installation IS successful. This is
>>> quite dangerous because the old DLL and the new R code could be
>>> incompatible.
>>>
>>> I am definitely not the first person to have this issue.
>>> * Matt Dowle reported
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__bugs.r-2Dproject.org_bugzilla_show-5Fbug.cgi-3Fid-3D17478&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=IJuOtHB4O_KwvegXltTlKm91bD5nu9Ltdcyi2xBqurA&e=  which was
>> never
>>> addressed.
>>> * Jim Hester reported
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__bugs.r-2Dproject.org_bugzilla_show-5Fbug.cgi-3Fid-3D17453&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=j0nlC7mk5y3nA30dLMfkiYhsgFRsexMMfWoLgOVIO6w&e=  which was
>>> apparently addressed in R-3.5.1, via
>>>
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_wch_r-2Dsource_commit_828a04f9c428403e476620b1905a1d8ca41d0bcd&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=92B6JnxdBpF06tY0vcrp4SJ2avJA6t68xlDGF7cWFfk&e=
>>>
>>> But I am now having the same issue in R-3.6.0 -- is this a regression in
>> R?
>>> or is there another fix that I can use?
>>>
>>> Below is the minimal R code that I used to reproduce the issue.
>> Essentially,
>>> * I start R with --vanilla and set options repos=cloud and warn=2 (which
>> I
>>> expect should convert warnings to errors).
>>> * I do library(penaltyLearning) and then install the package from source,
>>> which results in the
>>>    warnings. I expected there should be an error.
>>>
>>> th798 at cmp2986 MINGW64 ~/R
>>> $ R --vanilla -e "options(repos='https://urldefense.proofpoint.com/v2/url?u=https-3A__cloud.r-2Dproject.org&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=7X00xNRObhT9O68YU8m-IBkt38N5p_GP-UV77XEnKZw&e= ',
>>> warn=2);library(penaltyLearning);install.packages('penaltyLearning',
>>> type='source');getOption('warn');sessionInfo()"
>>>
>>> R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
>>> Copyright (C) 2019 The R Foundation for Statistical Computing
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>>
>>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>>> You are welcome to redistribute it under certain conditions.
>>> Type 'license()' or 'licence()' for distribution details.
>>>
>>> R is a collaborative project with many contributors.
>>> Type 'contributors()' for more information and
>>> 'citation()' on how to cite R or R packages in publications.
>>>
>>> Type 'demo()' for some demos, 'help()' for on-line help, or
>>> 'help.start()' for an HTML browser interface to help.
>>> Type 'q()' to quit R.
>>>
>>>> options(repos='https://urldefense.proofpoint.com/v2/url?u=https-3A__cloud.r-2Dproject.org&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=7X00xNRObhT9O68YU8m-IBkt38N5p_GP-UV77XEnKZw&e= ',
>>> warn=2);library(penaltyLearning);install.packages('penaltyLearning',
>>> type='source');getOption('warn');sessionInfo()
>>> Loading required package: data.table
>>> Registered S3 methods overwritten by 'ggplot2':
>>>    method         from
>>>    [.quosures     rlang
>>>    c.quosures     rlang
>>>    print.quosures rlang
>>> trying URL '
>>>
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__cloud.r-2Dproject.org_src_contrib_penaltyLearning-5F2018.09.04.tar.gz&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=o34c6BnD4LvJv-00tYn5M2TqO_IjH5qtaKnnhI4ph50&e= '
>>> Content type 'application/x-gzip' length 2837289 bytes (2.7 MB)
>>> ==================================================
>>> downloaded 2.7 MB
>>>
>>> * installing *source* package 'penaltyLearning' ...
>>> ** package 'penaltyLearning' successfully unpacked and MD5 sums checked
>>> ** using staged installation
>>> ** libs
>>> c:/Rtools/mingw_64/bin/g++  -std=gnu++11
>> -I"C:/PROGRA~1/R/R-36~1.0/include"
>>> -DNDEBUG          -O2 -Wall  -mtune=generic -c interface.cpp -o
>> interface.o
>>> c:/Rtools/mingw_64/bin/g++  -std=gnu++11
>> -I"C:/PROGRA~1/R/R-36~1.0/include"
>>> -DNDEBUG          -O2 -Wall  -mtune=generic -c
>> largestContinuousMinimum.cpp
>>> -o largestContinuousMinimum.o
>>> largestContinuousMinimum.cpp: In function 'int
>>> largestContinuousMinimum(int, double*, double*, int*)':
>>> largestContinuousMinimum.cpp:38:27: warning: 'start' may be used
>>> uninitialized in this function [-Wmaybe-uninitialized]
>>>         index_vec[0] = start;
>>>                             ^
>>> c:/Rtools/mingw_64/bin/g++  -std=gnu++11
>> -I"C:/PROGRA~1/R/R-36~1.0/include"
>>> -DNDEBUG          -O2 -Wall  -mtune=generic -c modelSelection.cpp -o
>>> modelSelection.o
>>> /usr/bin/sed: -e expression #1, char 1: unknown command: `C'
>>> c:/Rtools/mingw_64/bin/g++ -shared -s -static-libgcc -o
>> penaltyLearning.dll
>>> tmp.def interface.o largestContinuousMinimum.o modelSelection.o
>>> -LC:/PROGRA~1/R/R-36~1.0/bin/x64 -lR
>>> installing to C:/Program
>>>
>> Files/R/R-3.6.0/library/00LOCK-penaltyLearning/00new/penaltyLearning/libs/x64
>>> ** R
>>> ** data
>>> ** byte-compile and prepare package for lazy loading
>>> ** help
>>> *** installing help indices
>>>    converting help for package 'penaltyLearning'
>>>      finding HTML links ... done
>>>      GeomTallRect                            html
>>>      IntervalRegressionCV                    html
>>>      IntervalRegressionCVmargin              html
>>>      IntervalRegressionInternal              html
>>>      IntervalRegressionRegularized           html
>>>      IntervalRegressionUnregularized         html
>>>      ROChange                                html
>>>      change.colors                           html
>>>      change.labels                           html
>>>      changeLabel                             html
>>>      check_features_targets                  html
>>>      check_target_pred                       html
>>>      coef.IntervalRegression                 html
>>>      demo8                                   html
>>>      featureMatrix                           html
>>>      featureVector                           html
>>>      geom_tallrect                           html
>>>      labelError                              html
>>>      largestContinuousMinimumC               html
>>>      largestContinuousMinimumR               html
>>>      modelSelection                          html
>>>      modelSelectionC                         html
>>>      modelSelectionR                         html
>>>      neuroblastomaProcessed                  html
>>>      oneSkip                                 html
>>>      plot.IntervalRegression                 html
>>>      predict.IntervalRegression              html
>>>      print.IntervalRegression                html
>>>      squared.hinge                           html
>>>      targetIntervalROC                       html
>>>      targetIntervalResidual                  html
>>>      targetIntervals                         html
>>>      theme_no_space                          html
>>> ** building package indices
>>> ** testing if installed package can be loaded from temporary location
>>> WARNING: moving package to final location failed, copying instead
>>> Warning in file.copy(instdir, dirname(final_instdir), recursive = TRUE,
>> :
>>>    problem copying C:\Program
>>>
>> Files\R\R-3.6.0\library\00LOCK-penaltyLearning\00new\penaltyLearning\libs\x64\penaltyLearning.dll
>>> to C:\Program
>>> Files\R\R-3.6.0\library\penaltyLearning\libs\x64\penaltyLearning.dll:
>>> Permission denied
>>> ** testing if installed package can be loaded from final location
>>> ** testing if installed package keeps a record of temporary installation
>>> path
>>> * DONE (penaltyLearning)
>>>
>>> The downloaded source packages are in
>>> 'C:\Users\th798\AppData\Local\Temp\RtmpUrOoFE\downloaded_packages'
>>> [1] 2
>>> R version 3.6.0 (2019-04-26)
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> Running under: Windows 10 x64 (build 17134)
>>>
>>> Matrix products: default
>>>
>>> locale:
>>> [1] LC_COLLATE=English_United States.1252
>>> [2] LC_CTYPE=English_United States.1252
>>> [3] LC_MONETARY=English_United States.1252
>>> [4] LC_NUMERIC=C
>>> [5] LC_TIME=English_United States.1252
>>>
>>> attached base packages:
>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>
>>> other attached packages:
>>> [1] penaltyLearning_2018.09.04 data.table_1.12.2
>>>
>>> loaded via a namespace (and not attached):
>>>   [1] Rcpp_1.0.1       assertthat_0.2.1 dplyr_0.8.1      crayon_1.3.4
>>>   [5] R6_2.4.0         grid_3.6.0       plyr_1.8.4       magic_1.5-9
>>>   [9] gtable_0.3.0     magrittr_1.5     scales_1.0.0     ggplot2_3.1.1
>>> [13] pillar_1.4.0     rlang_0.3.4      lazyeval_0.2.2   geometry_0.4.1
>>> [17] tools_3.6.0      glue_1.3.1       purrr_0.3.2      munsell_0.5.0
>>> [21] abind_1.4-7      compiler_3.6.0   pkgconfig_2.0.2  colorspace_1.4-1
>>> [25] tidyselect_0.2.5 tibble_2.1.1
>>>>
>>>>
>>> ]0;MINGW64:/c/Users/th798/R
>>> th798 at cmp2986 MINGW64 ~/R
>>> $
>>>
>>> related blog post: https://urldefense.proofpoint.com/v2/url?u=https-3A__tdhock.github.io_blog_2019_windows-2Ddll_&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=966ZHBqmdlD56fg01o9FZKpQYT07ZL3dzmZt3cEWgaQ&e=
>>>
>>>          [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=8Tg6DVEkxJdPCYGLbPDOm7UQuVwBJS_ezJksvJkECNM&e=
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=8Tg6DVEkxJdPCYGLbPDOm7UQuVwBJS_ezJksvJkECNM&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From @|mon@urb@nek @end|ng |rom R-project@org  Fri May 31 04:20:51 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 30 May 2019 22:20:51 -0400
Subject: [Rd] use of buffers in sprintf and snprintf
In-Reply-To: <DB6P189MB0581F101B909FA1E2ACC509DA51F0@DB6P189MB0581.EURP189.PROD.OUTLOOK.COM>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
 <23307.48529.773039.904392@stat.math.ethz.ch>
 <23307.49323.908367.788461@stat.math.ethz.ch>
 <CABtg=KkuVHoX1tZ=+Lr7mDFrXvn5zdf3+Wmqhnv58GXZJS2KwQ@mail.gmail.com>
 <f3388993-5e20-d7e5-346a-785d33fab27b@daqana.com>
 <DB6P189MB0581F101B909FA1E2ACC509DA51F0@DB6P189MB0581.EURP189.PROD.OUTLOOK.COM>
Message-ID: <A863224C-6DBD-45DA-A9A8-45A2D25613DA@R-project.org>

No, that will make it even worse since you'll be declaring a lot more memory that you actually have.

The real problem is that you're ignoring the truncation, so you probably want to use something like

if (snprintf(tempname, sizeof(tempname), "%s.%d", of1name, j) >= sizeof(tempname)) Rf_error("file name is too long");

BTW: most OSes systems have a path limits that are no lower than 256 so you should allow at least as much.

Cheers,
Simon




> On May 29, 2019, at 11:49 AM, jing hua zhao <jinghuazhao at hotmail.com> wrote:
> 
> Dear R-developers,
> 
> I am struggling with packaging with sprintf and snprintf() as the following WARNINGS from gcc 9.x,
> 
>  hap_c.c:380:46: warning: ?%d? directive output may be truncated writing between 1 and 10 bytes into a region of size between 0 and 127 [-Wformat-truncation=]
>  hap_c.c:392:46: warning: ?%d? directive output may be truncated writing between 1 and 10 bytes into a region of size between 0 and 127 [-Wformat-truncation=]
> 
> Essentially, I have
> 
> #define MAX_FILENAME_LEN 128
> char of1name[MAX_FILENAME_LEN],of2name[MAX_FILENAME_LEN], tempname[MAX_FILENAME_LEN];
> 
> ...
> 
> snprintf(tempname,sizeof(tempname),"%s.%d", of1name, j);
> 
> It looks I could get around with
> 
> 
> #define MAX_FILENAME_LEN 128
> 
> #define MAX_FILENAME_LEN2 256
> 
> char of1name[MAX_FILENAME_LEN],of2name[MAX_FILENAME_LEN], tempname[MAX_FILENAME_LEN2];
> 
> ...
> snprintf(tempname,2*sizeof(tempname)+1,"%s.%d", of1name, j)
> 
> It looks a bit waste of resources to me.
> 
> 
> Any idea will be greatly appreciated,
> 
> 
> 
> Jing Hua
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri May 31 04:38:59 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Thu, 30 May 2019 19:38:59 -0700
Subject: [Rd] use of buffers in sprintf and snprintf
In-Reply-To: <A863224C-6DBD-45DA-A9A8-45A2D25613DA@R-project.org>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
 <23307.48529.773039.904392@stat.math.ethz.ch>
 <23307.49323.908367.788461@stat.math.ethz.ch>
 <CABtg=KkuVHoX1tZ=+Lr7mDFrXvn5zdf3+Wmqhnv58GXZJS2KwQ@mail.gmail.com>
 <f3388993-5e20-d7e5-346a-785d33fab27b@daqana.com>
 <DB6P189MB0581F101B909FA1E2ACC509DA51F0@DB6P189MB0581.EURP189.PROD.OUTLOOK.COM>
 <A863224C-6DBD-45DA-A9A8-45A2D25613DA@R-project.org>
Message-ID: <CAFDcVCRCnvwjvDYSq6tRTBJGg-4A+isjE+mJ3HiAA3guqBmQDA@mail.gmail.com>

On Thu, May 30, 2019 at 7:21 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> No, that will make it even worse since you'll be declaring a lot more memory that you actually have.
>
> The real problem is that you're ignoring the truncation, so you probably want to use something like
>
> if (snprintf(tempname, sizeof(tempname), "%s.%d", of1name, j) >= sizeof(tempname)) Rf_error("file name is too long");
>
> BTW: most OSes systems have a path limits that are no lower than 256 so you should allow at least as much.

On MS Windows, there's actually a limit of 255 characters, cf.
http://www.aroma-project.org/howtos/UseLongFilenamesOnWindows/
(disclaimer: I'm the author).  Note particularly the comment at the
end:

"Unfortunately it is not a solution to try to use relative instead of
absolute pathnames. The limitation is deep down in the file system
itself and it is the absolute pathname that counts."

Admittedly, it's been several years when I last looked into it, but at
the time when I wrote that I spent lots of time investigating it.

/Henrik

>
> Cheers,
> Simon
>
>
>
>
> > On May 29, 2019, at 11:49 AM, jing hua zhao <jinghuazhao at hotmail.com> wrote:
> >
> > Dear R-developers,
> >
> > I am struggling with packaging with sprintf and snprintf() as the following WARNINGS from gcc 9.x,
> >
> >  hap_c.c:380:46: warning: ?%d? directive output may be truncated writing between 1 and 10 bytes into a region of size between 0 and 127 [-Wformat-truncation=]
> >  hap_c.c:392:46: warning: ?%d? directive output may be truncated writing between 1 and 10 bytes into a region of size between 0 and 127 [-Wformat-truncation=]
> >
> > Essentially, I have
> >
> > #define MAX_FILENAME_LEN 128
> > char of1name[MAX_FILENAME_LEN],of2name[MAX_FILENAME_LEN], tempname[MAX_FILENAME_LEN];
> >
> > ...
> >
> > snprintf(tempname,sizeof(tempname),"%s.%d", of1name, j);
> >
> > It looks I could get around with
> >
> >
> > #define MAX_FILENAME_LEN 128
> >
> > #define MAX_FILENAME_LEN2 256
> >
> > char of1name[MAX_FILENAME_LEN],of2name[MAX_FILENAME_LEN], tempname[MAX_FILENAME_LEN2];
> >
> > ...
> > snprintf(tempname,2*sizeof(tempname)+1,"%s.%d", of1name, j)
> >
> > It looks a bit waste of resources to me.
> >
> >
> > Any idea will be greatly appreciated,
> >
> >
> >
> > Jing Hua
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @ko@ty@h@k @end|ng |rom u||@edu  Fri May 31 07:28:55 2019
From: @ko@ty@h@k @end|ng |rom u||@edu (Scott Kostyshak)
Date: Fri, 31 May 2019 01:28:55 -0400
Subject: [Rd] [patch] add sanity checks to quantile()
Message-ID: <20190531052855.5zzdb2x7i4et3vyb@boogie>

The attached patch adds some sanity checks to the "type" argument of
quantile(). Output from the following commands show the change of
behavior with the current patch:

  vec <- 1:10
  quantile(vec, type = c(1, 2))
  quantile(vec, type = 10)
  quantile(vec, type = "aaa")
  quantile(vec, type = NA_real_)
  quantile(vec, type = 4.3)
  quantile(vec, type = -1)

Current behavior (i.e., without the patch):

  > vec <- 1:10
  > quantile(vec, type = c(1, 2))
  Error in switch(type, (nppm > j), ((nppm > j) + 1)/2, (nppm != j) | ((j%%2L) ==  : 
    EXPR must be a length 1 vector
  In addition: Warning messages:
  1: In if (type == 7) { :
    the condition has length > 1 and only the first element will be used
  2: In if (type <= 3) { :
    the condition has length > 1 and only the first element will be used
  3: In if (type == 3) n * probs - 0.5 else n * probs :
    the condition has length > 1 and only the first element will be used
  > quantile(vec, type = 10)
  Error in quantile.default(vec, type = 10) : object 'a' not found
  > quantile(vec, type = "aaa")
  Error in type - 3 : non-numeric argument to binary operator
  > quantile(vec, type = NA_real_)
  Error in if (type == 7) { : missing value where TRUE/FALSE needed
  > quantile(vec, type = 4.3)
    0%  25%  50%  75% 100% 
   1.0  2.5  5.0  7.5 10.0 
  > quantile(vec, type = -1)
    0%  25%  50%  75% 100% 
     1    2    5    7   10 


Behavior with the patch:

  > vec <- 1:10
  > quantile(vec, type = c(1, 2))
  Error in quantile.default(vec, type = c(1, 2)) : 
    'type' must be of length 1
  > quantile(vec, type = 10)
  Error in quantile.default(vec, type = 10) : 
    'type' must be an integer between 1 and 9
  > quantile(vec, type = "aaa")
  Error in quantile.default(vec, type = "aaa") : 
    'type' must be an integer between 1 and 9
  > quantile(vec, type = NA_real_)
  Error in quantile.default(vec, type = NA_real_) : 
    'type' must be an integer between 1 and 9
  > quantile(vec, type = 4.3)
  Error in quantile.default(vec, type = 4.3) : 
    'type' must be an integer between 1 and 9
  > quantile(vec, type = -1)
  Error in quantile.default(vec, type = -1) : 
    'type' must be an integer between 1 and 9


Note that with the patch, quantile() gives an error in some cases where
the current code does not. Specifically, the following two calls to
quantile() do not give an error without the patch:

  quantile(vec, type = 4.3)
  quantile(vec, type = -1)

Thus, this patch could cause current code to give an error. If it is
desired, I could change the patch such that it only gives an error when
current R gives an error (i.e., the only benefit of the patch would be
better error messages), or I can change the patch to give a warning in
these cases.

Scott


-- 
Scott Kostyshak
Assistant Professor of Economics
University of Florida
https://people.clas.ufl.edu/skostyshak/


-------------- next part --------------
A non-text attachment was scrubbed...
Name: quantile.diff
Type: text/x-diff
Size: 623 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190531/f5cdbe7c/attachment.bin>

From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri May 31 09:51:49 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 31 May 2019 08:51:49 +0100
Subject: [Rd] use of buffers in sprintf and snprintf
In-Reply-To: <CAFDcVCRCnvwjvDYSq6tRTBJGg-4A+isjE+mJ3HiAA3guqBmQDA@mail.gmail.com>
References: <32da856c-a60a-974f-65ab-d7123e12e813@daqana.com>
 <23307.48529.773039.904392@stat.math.ethz.ch>
 <23307.49323.908367.788461@stat.math.ethz.ch>
 <CABtg=KkuVHoX1tZ=+Lr7mDFrXvn5zdf3+Wmqhnv58GXZJS2KwQ@mail.gmail.com>
 <f3388993-5e20-d7e5-346a-785d33fab27b@daqana.com>
 <DB6P189MB0581F101B909FA1E2ACC509DA51F0@DB6P189MB0581.EURP189.PROD.OUTLOOK.COM>
 <A863224C-6DBD-45DA-A9A8-45A2D25613DA@R-project.org>
 <CAFDcVCRCnvwjvDYSq6tRTBJGg-4A+isjE+mJ3HiAA3guqBmQDA@mail.gmail.com>
Message-ID: <CABtg=KkwObHZCetM2hAL1-dpNT1Uk3mtEOMQ7n=vxjSdqkhQjA@mail.gmail.com>

On Fri, May 31, 2019 at 3:39 AM Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
[...]
> On MS Windows, there's actually a limit of 255 characters, cf.
> http://www.aroma-project.org/howtos/UseLongFilenamesOnWindows/
> (disclaimer: I'm the author).  Note particularly the comment at the
> end:
>
> "Unfortunately it is not a solution to try to use relative instead of
> absolute pathnames. The limitation is deep down in the file system
> itself and it is the absolute pathname that counts."
>
> Admittedly, it's been several years when I last looked into it, but at
> the time when I wrote that I spent lots of time investigating it.

AFAICT NTFS supports path names up to 32,767 characters. The Unicode
Win API functions also support these, or you can just prefix the paths
with \\?\ to support them. I don't know if there is anything in R that
would prevent using the \\?\ prefix but just doing a file() on them
seems to work fine.

Gabor


> /Henrik
>
> >
> > Cheers,
> > Simon
> >
> >
> >
> >
> > > On May 29, 2019, at 11:49 AM, jing hua zhao <jinghuazhao at hotmail.com> wrote:
> > >
> > > Dear R-developers,
> > >
> > > I am struggling with packaging with sprintf and snprintf() as the following WARNINGS from gcc 9.x,
> > >
> > >  hap_c.c:380:46: warning: ?%d? directive output may be truncated writing between 1 and 10 bytes into a region of size between 0 and 127 [-Wformat-truncation=]
> > >  hap_c.c:392:46: warning: ?%d? directive output may be truncated writing between 1 and 10 bytes into a region of size between 0 and 127 [-Wformat-truncation=]
> > >
> > > Essentially, I have
> > >
> > > #define MAX_FILENAME_LEN 128
> > > char of1name[MAX_FILENAME_LEN],of2name[MAX_FILENAME_LEN], tempname[MAX_FILENAME_LEN];
> > >
> > > ...
> > >
> > > snprintf(tempname,sizeof(tempname),"%s.%d", of1name, j);
> > >
> > > It looks I could get around with
> > >
> > >
> > > #define MAX_FILENAME_LEN 128
> > >
> > > #define MAX_FILENAME_LEN2 256
> > >
> > > char of1name[MAX_FILENAME_LEN],of2name[MAX_FILENAME_LEN], tempname[MAX_FILENAME_LEN2];
> > >
> > > ...
> > > snprintf(tempname,2*sizeof(tempname)+1,"%s.%d", of1name, j)
> > >
> > > It looks a bit waste of resources to me.
> > >
> > >
> > > Any idea will be greatly appreciated,
> > >
> > >
> > >
> > > Jing Hua
> > >
> > >       [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tdhock5 @end|ng |rom gm@||@com  Fri May 31 17:41:16 2019
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Fri, 31 May 2019 08:41:16 -0700
Subject: [Rd] R pkg install should fail for unsuccessful DLL copy on
 windows?
In-Reply-To: <35b31c30-cf83-1505-70ca-c6a90185dce5@fredhutch.org>
References: <CALK03d2hj9Ae3=7RTt-KLK+zZZ_2b1RK6RHK=rBNrR1MbZrV=w@mail.gmail.com>
 <CAOO9MKUNCqx+x4=Ny-OyO9TFiqZifDn7_vKGR7m04fyVbnhjLA@mail.gmail.com>
 <CALK03d2kWF2NT-x0uOqbxriLMgKVatLfVEkxwUmkb6Zgnyy7OQ@mail.gmail.com>
 <35b31c30-cf83-1505-70ca-c6a90185dce5@fredhutch.org>
Message-ID: <CALK03d3C2GREMTmjVHDeLJQ0ck9Jae93q2n+tpS+w3ouFf62kA@mail.gmail.com>

thanks for your input Herv?. Glad to hear I'm not the only one still having
this issue.

In my opinion install.packages should stop with an error (instead of a
warning) if this happens.

However even if you want to keep the warning, at least make it so that
users can set options(warn=2) to get an error if they want one. I tried
setting options(warn=2) but for some reason I still get a warning.

I believe that is a bug in install.packages -- if I specify options(warn=2)
it should convert that warning to an error (but it currently does not).

Toby

On Thu, May 30, 2019 at 4:50 PM Pages, Herve <hpages at fredhutch.org> wrote:

> Also note that this can lead to people not being able to load the
> package if the set of .Call entry points has changed between the old
> and new versions of the package. We strongly suspect that this is what
> happened to this Bioconductor user:
>
>    https://support.bioconductor.org/p/121228/
>
> Note that she's installing the binary and in this case no warning
> is issued. All we see is:
>
>    package ?S4Vectors? successfully unpacked and MD5 sums checked
>
> but the old DLL apparently didn't get replaced with the new one.
> Hence the
>
>    error: "make_RAW_from_NA_LLINT" not available for .Call() for package
> "S4Vectors"
>
> later on when trying to load the package.
>
> Cheers,
> H.
>
>
> On 5/30/19 16:31, Toby Hocking wrote:
> > thanks for the tip Jan.
> >
> > However it would be nice if I didn't have to handle this myself for all
> of
> > my packages. (and teach my students how to do that)
> >
> > BTW I tried to disable staged installation, and the issue still happens:
> >
> > th798 at cmp2986 MINGW64 ~/projects/max-generalized-auc (master)
> > $ R_INSTALL_STAGED=FALSE R --vanilla -e
> > ".libPaths('~/R/library');.libPaths();options(repos='
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__cloud.r-2Dproject.org&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=7X00xNRObhT9O68YU8m-IBkt38N5p_GP-UV77XEnKZw&e=
> ',
> > warn=2);library(penaltyLearning);install.packages('penaltyLearning',
> > type='source');getOption('warn');sessionInfo()"
> >
> > R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
> > Copyright (C) 2019 The R Foundation for Statistical Computing
> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> >
> > R is free software and comes with ABSOLUTELY NO WARRANTY.
> > You are welcome to redistribute it under certain conditions.
> > Type 'license()' or 'licence()' for distribution details.
> >
> > R is a collaborative project with many contributors.
> > Type 'contributors()' for more information and
> > 'citation()' on how to cite R or R packages in publications.
> >
> > Type 'demo()' for some demos, 'help()' for on-line help, or
> > 'help.start()' for an HTML browser interface to help.
> > Type 'q()' to quit R.
> >
> >> .libPaths('~/R/library');.libPaths();options(repos='
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__cloud.r-2Dproject.org&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=7X00xNRObhT9O68YU8m-IBkt38N5p_GP-UV77XEnKZw&e=
> ',
> > warn=2);library(penaltyLearning);install.packages('penaltyLearning',
> > type='source');getOption('warn');sessionInfo()
> > [1] "C:/Users/th798/R/library"           "C:/Program
> > Files/R/R-3.6.0/library"
> > Loading required package: data.table
> > Registered S3 methods overwritten by 'ggplot2':
> >    method         from
> >    [.quosures     rlang
> >    c.quosures     rlang
> >    print.quosures rlang
> > Installing package into 'C:/Users/th798/R/library'
> > (as 'lib' is unspecified)
> > trying URL '
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__cloud.r-2Dproject.org_src_contrib_penaltyLearning-5F2018.09.04.tar.gz&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=o34c6BnD4LvJv-00tYn5M2TqO_IjH5qtaKnnhI4ph50&e=
> '
> > Content type 'application/x-gzip' length 2837289 bytes (2.7 MB)
> > ==================================================
> > downloaded 2.7 MB
> >
> > * installing *source* package 'penaltyLearning' ...
> > ** package 'penaltyLearning' successfully unpacked and MD5 sums checked
> > ** using non-staged installation
> > ** libs
> > c:/Rtools/mingw_64/bin/g++  -std=gnu++11
> -I"C:/PROGRA~1/R/R-36~1.0/include"
> > -DNDEBUG          -O2 -Wall  -mtune=generic -c interface.cpp -o
> interface.o
> > c:/Rtools/mingw_64/bin/g++  -std=gnu++11
> -I"C:/PROGRA~1/R/R-36~1.0/include"
> > -DNDEBUG          -O2 -Wall  -mtune=generic -c
> largestContinuousMinimum.cpp
> > -o largestContinuousMinimum.o
> > largestContinuousMinimum.cpp: In function 'int
> > largestContinuousMinimum(int, double*, double*, int*)':
> > largestContinuousMinimum.cpp:38:27: warning: 'start' may be used
> > uninitialized in this function [-Wmaybe-uninitialized]
> >         index_vec[0] = start;
> >                             ^
> > c:/Rtools/mingw_64/bin/g++  -std=gnu++11
> -I"C:/PROGRA~1/R/R-36~1.0/include"
> > -DNDEBUG          -O2 -Wall  -mtune=generic -c modelSelection.cpp -o
> > modelSelection.o
> > /usr/bin/sed: -e expression #1, char 1: unknown command: `C'
> > c:/Rtools/mingw_64/bin/g++ -shared -s -static-libgcc -o
> penaltyLearning.dll
> > tmp.def interface.o largestContinuousMinimum.o modelSelection.o
> > -LC:/PROGRA~1/R/R-36~1.0/bin/x64 -lR
> > installing to C:/Users/th798/R/library/penaltyLearning/libs/x64
> > Warning in file.copy(files, dest, overwrite = TRUE) :
> >    problem copying .\penaltyLearning.dll to
> > C:\Users\th798\R\library\penaltyLearning\libs\x64\penaltyLearning.dll:
> > Permission denied
> > ** R
> > ** data
> > ** byte-compile and prepare package for lazy loading
> > ** help
> > *** installing help indices
> >    converting help for package 'penaltyLearning'
> >      finding HTML links ... done
> >      GeomTallRect                            html
> >      IntervalRegressionCV                    html
> >      IntervalRegressionCVmargin              html
> >      IntervalRegressionInternal              html
> >      IntervalRegressionRegularized           html
> >      IntervalRegressionUnregularized         html
> >      ROChange                                html
> >      change.colors                           html
> >      change.labels                           html
> >      changeLabel                             html
> >      check_features_targets                  html
> >      check_target_pred                       html
> >      coef.IntervalRegression                 html
> >      demo8                                   html
> >      featureMatrix                           html
> >      featureVector                           html
> >      geom_tallrect                           html
> >      labelError                              html
> >      largestContinuousMinimumC               html
> >      largestContinuousMinimumR               html
> >      modelSelection                          html
> >      modelSelectionC                         html
> >      modelSelectionR                         html
> >      neuroblastomaProcessed                  html
> >      oneSkip                                 html
> >      plot.IntervalRegression                 html
> >      predict.IntervalRegression              html
> >      print.IntervalRegression                html
> >      squared.hinge                           html
> >      targetIntervalROC                       html
> >      targetIntervalResidual                  html
> >      targetIntervals                         html
> >      theme_no_space                          html
> > ** building package indices
> > ** testing if installed package can be loaded
> > * DONE (penaltyLearning)
> >
> > The downloaded source packages are in
> > 'C:\Users\th798\AppData\Local\Temp\RtmpkVV0sH\downloaded_packages'
> > [1] 2
> > R version 3.6.0 (2019-04-26)
> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> > Running under: Windows 10 x64 (build 17134)
> >
> > Matrix products: default
> >
> > locale:
> > [1] LC_COLLATE=English_United States.1252
> > [2] LC_CTYPE=English_United States.1252
> > [3] LC_MONETARY=English_United States.1252
> > [4] LC_NUMERIC=C
> > [5] LC_TIME=English_United States.1252
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > other attached packages:
> > [1] penaltyLearning_2018.09.04 data.table_1.12.2
> >
> > loaded via a namespace (and not attached):
> >   [1] Rcpp_1.0.1       assertthat_0.2.1 dplyr_0.8.1      crayon_1.3.4
> >   [5] R6_2.4.0         grid_3.6.0       plyr_1.8.4       magic_1.5-9
> >   [9] gtable_0.3.0     magrittr_1.5     scales_1.0.0     ggplot2_3.1.1
> > [13] pillar_1.4.0     rlang_0.3.4      lazyeval_0.2.2   geometry_0.4.1
> > [17] tools_3.6.0      glue_1.3.1       purrr_0.3.2      munsell_0.5.0
> > [21] abind_1.4-7      compiler_3.6.0   pkgconfig_2.0.2  colorspace_1.4-1
> > [25] tidyselect_0.2.5 tibble_2.1.1
> >>
> >>
> > ]0;MINGW64:/c/Users/th798/projects/max-generalized-auc
> > th798 at cmp2986 MINGW64 ~/projects/max-generalized-auc (master)
> > $
> >
> >
> >
> > On Wed, May 29, 2019 at 8:15 PM Jan Gorecki <j.gorecki at wit.edu.pl>
> wrote:
> >
> >> Hi Toby,
> >> AFAIK it has not been addressed in R. You can handle the problem on
> >> your package side, see
> >>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_Rdatatable_data.table_pull_3237&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=rI7qS9klz5h9_Cxq2381FT730_fIJS2eYuO7zfoFuOQ&e=
> >> Regards,
> >> Jan
> >>
> >>
> >> On Thu, May 30, 2019 at 4:46 AM Toby Hocking <tdhock5 at gmail.com> wrote:
> >>>
> >>> Hi all,
> >>>
> >>> I am having an issue related to installing packages on windows with
> >>> R-3.6.0. When installing a package that is in use, I expected R to stop
> >>> with an error. However I am getting a warning that the DLL copy was not
> >>> successful, but the overall package installation IS successful. This is
> >>> quite dangerous because the old DLL and the new R code could be
> >>> incompatible.
> >>>
> >>> I am definitely not the first person to have this issue.
> >>> * Matt Dowle reported
> >>>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__bugs.r-2Dproject.org_bugzilla_show-5Fbug.cgi-3Fid-3D17478&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=IJuOtHB4O_KwvegXltTlKm91bD5nu9Ltdcyi2xBqurA&e=
> which was
> >> never
> >>> addressed.
> >>> * Jim Hester reported
> >>>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__bugs.r-2Dproject.org_bugzilla_show-5Fbug.cgi-3Fid-3D17453&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=j0nlC7mk5y3nA30dLMfkiYhsgFRsexMMfWoLgOVIO6w&e=
> which was
> >>> apparently addressed in R-3.5.1, via
> >>>
> >>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_wch_r-2Dsource_commit_828a04f9c428403e476620b1905a1d8ca41d0bcd&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=92B6JnxdBpF06tY0vcrp4SJ2avJA6t68xlDGF7cWFfk&e=
> >>>
> >>> But I am now having the same issue in R-3.6.0 -- is this a regression
> in
> >> R?
> >>> or is there another fix that I can use?
> >>>
> >>> Below is the minimal R code that I used to reproduce the issue.
> >> Essentially,
> >>> * I start R with --vanilla and set options repos=cloud and warn=2
> (which
> >> I
> >>> expect should convert warnings to errors).
> >>> * I do library(penaltyLearning) and then install the package from
> source,
> >>> which results in the
> >>>    warnings. I expected there should be an error.
> >>>
> >>> th798 at cmp2986 MINGW64 ~/R
> >>> $ R --vanilla -e "options(repos='
> https://urldefense.proofpoint.com/v2/url?u=https-3A__cloud.r-2Dproject.org&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=7X00xNRObhT9O68YU8m-IBkt38N5p_GP-UV77XEnKZw&e=
> ',
> >>> warn=2);library(penaltyLearning);install.packages('penaltyLearning',
> >>> type='source');getOption('warn');sessionInfo()"
> >>>
> >>> R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
> >>> Copyright (C) 2019 The R Foundation for Statistical Computing
> >>> Platform: x86_64-w64-mingw32/x64 (64-bit)
> >>>
> >>> R is free software and comes with ABSOLUTELY NO WARRANTY.
> >>> You are welcome to redistribute it under certain conditions.
> >>> Type 'license()' or 'licence()' for distribution details.
> >>>
> >>> R is a collaborative project with many contributors.
> >>> Type 'contributors()' for more information and
> >>> 'citation()' on how to cite R or R packages in publications.
> >>>
> >>> Type 'demo()' for some demos, 'help()' for on-line help, or
> >>> 'help.start()' for an HTML browser interface to help.
> >>> Type 'q()' to quit R.
> >>>
> >>>> options(repos='
> https://urldefense.proofpoint.com/v2/url?u=https-3A__cloud.r-2Dproject.org&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=7X00xNRObhT9O68YU8m-IBkt38N5p_GP-UV77XEnKZw&e=
> ',
> >>> warn=2);library(penaltyLearning);install.packages('penaltyLearning',
> >>> type='source');getOption('warn');sessionInfo()
> >>> Loading required package: data.table
> >>> Registered S3 methods overwritten by 'ggplot2':
> >>>    method         from
> >>>    [.quosures     rlang
> >>>    c.quosures     rlang
> >>>    print.quosures rlang
> >>> trying URL '
> >>>
> >>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__cloud.r-2Dproject.org_src_contrib_penaltyLearning-5F2018.09.04.tar.gz&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=o34c6BnD4LvJv-00tYn5M2TqO_IjH5qtaKnnhI4ph50&e=
> '
> >>> Content type 'application/x-gzip' length 2837289 bytes (2.7 MB)
> >>> ==================================================
> >>> downloaded 2.7 MB
> >>>
> >>> * installing *source* package 'penaltyLearning' ...
> >>> ** package 'penaltyLearning' successfully unpacked and MD5 sums checked
> >>> ** using staged installation
> >>> ** libs
> >>> c:/Rtools/mingw_64/bin/g++  -std=gnu++11
> >> -I"C:/PROGRA~1/R/R-36~1.0/include"
> >>> -DNDEBUG          -O2 -Wall  -mtune=generic -c interface.cpp -o
> >> interface.o
> >>> c:/Rtools/mingw_64/bin/g++  -std=gnu++11
> >> -I"C:/PROGRA~1/R/R-36~1.0/include"
> >>> -DNDEBUG          -O2 -Wall  -mtune=generic -c
> >> largestContinuousMinimum.cpp
> >>> -o largestContinuousMinimum.o
> >>> largestContinuousMinimum.cpp: In function 'int
> >>> largestContinuousMinimum(int, double*, double*, int*)':
> >>> largestContinuousMinimum.cpp:38:27: warning: 'start' may be used
> >>> uninitialized in this function [-Wmaybe-uninitialized]
> >>>         index_vec[0] = start;
> >>>                             ^
> >>> c:/Rtools/mingw_64/bin/g++  -std=gnu++11
> >> -I"C:/PROGRA~1/R/R-36~1.0/include"
> >>> -DNDEBUG          -O2 -Wall  -mtune=generic -c modelSelection.cpp -o
> >>> modelSelection.o
> >>> /usr/bin/sed: -e expression #1, char 1: unknown command: `C'
> >>> c:/Rtools/mingw_64/bin/g++ -shared -s -static-libgcc -o
> >> penaltyLearning.dll
> >>> tmp.def interface.o largestContinuousMinimum.o modelSelection.o
> >>> -LC:/PROGRA~1/R/R-36~1.0/bin/x64 -lR
> >>> installing to C:/Program
> >>>
> >>
> Files/R/R-3.6.0/library/00LOCK-penaltyLearning/00new/penaltyLearning/libs/x64
> >>> ** R
> >>> ** data
> >>> ** byte-compile and prepare package for lazy loading
> >>> ** help
> >>> *** installing help indices
> >>>    converting help for package 'penaltyLearning'
> >>>      finding HTML links ... done
> >>>      GeomTallRect                            html
> >>>      IntervalRegressionCV                    html
> >>>      IntervalRegressionCVmargin              html
> >>>      IntervalRegressionInternal              html
> >>>      IntervalRegressionRegularized           html
> >>>      IntervalRegressionUnregularized         html
> >>>      ROChange                                html
> >>>      change.colors                           html
> >>>      change.labels                           html
> >>>      changeLabel                             html
> >>>      check_features_targets                  html
> >>>      check_target_pred                       html
> >>>      coef.IntervalRegression                 html
> >>>      demo8                                   html
> >>>      featureMatrix                           html
> >>>      featureVector                           html
> >>>      geom_tallrect                           html
> >>>      labelError                              html
> >>>      largestContinuousMinimumC               html
> >>>      largestContinuousMinimumR               html
> >>>      modelSelection                          html
> >>>      modelSelectionC                         html
> >>>      modelSelectionR                         html
> >>>      neuroblastomaProcessed                  html
> >>>      oneSkip                                 html
> >>>      plot.IntervalRegression                 html
> >>>      predict.IntervalRegression              html
> >>>      print.IntervalRegression                html
> >>>      squared.hinge                           html
> >>>      targetIntervalROC                       html
> >>>      targetIntervalResidual                  html
> >>>      targetIntervals                         html
> >>>      theme_no_space                          html
> >>> ** building package indices
> >>> ** testing if installed package can be loaded from temporary location
> >>> WARNING: moving package to final location failed, copying instead
> >>> Warning in file.copy(instdir, dirname(final_instdir), recursive = TRUE,
> >> :
> >>>    problem copying C:\Program
> >>>
> >>
> Files\R\R-3.6.0\library\00LOCK-penaltyLearning\00new\penaltyLearning\libs\x64\penaltyLearning.dll
> >>> to C:\Program
> >>> Files\R\R-3.6.0\library\penaltyLearning\libs\x64\penaltyLearning.dll:
> >>> Permission denied
> >>> ** testing if installed package can be loaded from final location
> >>> ** testing if installed package keeps a record of temporary
> installation
> >>> path
> >>> * DONE (penaltyLearning)
> >>>
> >>> The downloaded source packages are in
> >>> 'C:\Users\th798\AppData\Local\Temp\RtmpUrOoFE\downloaded_packages'
> >>> [1] 2
> >>> R version 3.6.0 (2019-04-26)
> >>> Platform: x86_64-w64-mingw32/x64 (64-bit)
> >>> Running under: Windows 10 x64 (build 17134)
> >>>
> >>> Matrix products: default
> >>>
> >>> locale:
> >>> [1] LC_COLLATE=English_United States.1252
> >>> [2] LC_CTYPE=English_United States.1252
> >>> [3] LC_MONETARY=English_United States.1252
> >>> [4] LC_NUMERIC=C
> >>> [5] LC_TIME=English_United States.1252
> >>>
> >>> attached base packages:
> >>> [1] stats     graphics  grDevices utils     datasets  methods   base
> >>>
> >>> other attached packages:
> >>> [1] penaltyLearning_2018.09.04 data.table_1.12.2
> >>>
> >>> loaded via a namespace (and not attached):
> >>>   [1] Rcpp_1.0.1       assertthat_0.2.1 dplyr_0.8.1      crayon_1.3.4
> >>>   [5] R6_2.4.0         grid_3.6.0       plyr_1.8.4       magic_1.5-9
> >>>   [9] gtable_0.3.0     magrittr_1.5     scales_1.0.0     ggplot2_3.1.1
> >>> [13] pillar_1.4.0     rlang_0.3.4      lazyeval_0.2.2   geometry_0.4.1
> >>> [17] tools_3.6.0      glue_1.3.1       purrr_0.3.2      munsell_0.5.0
> >>> [21] abind_1.4-7      compiler_3.6.0   pkgconfig_2.0.2
> colorspace_1.4-1
> >>> [25] tidyselect_0.2.5 tibble_2.1.1
> >>>>
> >>>>
> >>> ]0;MINGW64:/c/Users/th798/R
> >>> th798 at cmp2986 MINGW64 ~/R
> >>> $
> >>>
> >>> related blog post:
> https://urldefense.proofpoint.com/v2/url?u=https-3A__tdhock.github.io_blog_2019_windows-2Ddll_&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=966ZHBqmdlD56fg01o9FZKpQYT07ZL3dzmZt3cEWgaQ&e=
> >>>
> >>>          [[alternative HTML version deleted]]
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=8Tg6DVEkxJdPCYGLbPDOm7UQuVwBJS_ezJksvJkECNM&e=
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=zldJhdavBFtHDHr08_HFRAi9MY2WBkTiDn1ggbog4cA&s=8Tg6DVEkxJdPCYGLbPDOm7UQuVwBJS_ezJksvJkECNM&e=
> >
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>

	[[alternative HTML version deleted]]


From rc @end|ng |rom rcr@gun@net  Thu May 30 06:26:38 2019
From: rc @end|ng |rom rcr@gun@net (Randy Cragun)
Date: Thu, 30 May 2019 00:26:38 -0400
Subject: [Rd] Possible bug in formatC
Message-ID: <00de01d5169f$e07f2de0$a17d89a0$@rcragun.net>

I do not know if this is a bug or a case of improper documentation. The
documentation for formatC() implies that the difference between the options
format="f" and format="g" is that with "g", scientific format is sometimes
used. There is another difference between them that is not mentioned in the
documentation. drop0trailing=FALSE is ignored when format is set to "g"
unless flag contains "#" (this is the documented behavior for format="fg").
For instance, the first line below return " 2.5", whereas the second returns
the expected  "2.50".

formatC(2.50, format="g", digits=3, drop0trailing=F)
formatC(2.50, format="g", digits=3, drop0trailing=F, flag="#")


----------------------
sessionInfo():

R version 3.5.3 (2019-03-11)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows >= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United
States.1252   
[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C

[5] LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.5.3 tools_3.5.3


From @k@e|@henr|k@en @end|ng |rom gm@||@com  Thu May 30 15:41:13 2019
From: @k@e|@henr|k@en @end|ng |rom gm@||@com (Aksel Anker Henriksen)
Date: Thu, 30 May 2019 15:41:13 +0200
Subject: [Rd] Patch suggestion for stats:::summary.stl
Message-ID: <4D7629B7-384D-40EF-A3FE-F4E3BEA4FD74@gmail.com>

There appears to be a single "\n" missing from the body of stats:::summary.stl, causing the "Time.series components" and "IQR" sections to butt up against each other. The fix should be to simply switch 

    cat(" IQR:\n")

for

    cat("\n IQR:\n")


While looking at this function I wondered: Has it been considered to include a printout of explained variance? 
For example, following the IQR pattern:

    cat("\n Variance:\n")
    exv <- apply(cbind(STL = object$time.series, data = object$time.series %*% 
        rep(1, 3)), 2L, var)
    print(rbind(format(exv, digits = max(2L, digits - 3L)),
        `   %` = format(round(100 * exv/exv["data"], 1))), quote = FALSE)


?Aksel


