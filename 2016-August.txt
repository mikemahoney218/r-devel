From kyleb at metrumrg.com  Tue Aug  2 06:25:05 2016
From: kyleb at metrumrg.com (Kyle Baron)
Date: Mon, 1 Aug 2016 23:25:05 -0500
Subject: [Rd] Creating shared object with BASE in EXPORTS on Windows
Message-ID: <CAJ2Cw8QtUamTH4E-8xG1p9WZG+4ok62pt-aV8GetCFw2vQYMuA@mail.gmail.com>

It looks like `BASE` is a keyword in the .def file specification.

https://github.com/bminor/binutils-gdb/blob/master/ld/deffilep.y#L241-L268

For several keywords, I could replicate the syntax error from ld.exe
when the keyword was listed in EXPORTS in the .def file.

As far as I can tell, the dllname-win.def file is a must in this  case
making sure none of the keywords get exported there.


Also:
https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Using_ld_the_GNU_Linker/win32.html


-- 
Kyle Baron
Metrum Research Group
kyleb at metrumrg.com
www.metrumrg.com


On Wed, Jul 27, 2016 at 7:47 PM, Kyle Baron <kyleb at metrumrg.com> wrote:
>
> I am building shared objects on Windows system with BASE as a name in
> the shared object.  When BASE appears under EXPORTS in tmp.def file, R
> CMD SHLIB doesn't succeed.  This happens on Windows but not Mac or
> Ubuntu.
>
> Minimal examples:
>
> ////////////////////////////////////////
> This code builds fine
> ////////////////////////////////////////
> void base(int *nin, double *x) {
>   int n = nin[0];
>   int i;
>   for (i=0; i<n; i++) x[i] = x[i] * x[i];
> }
>
> system("R CMD SHLIB foo.c --preclean")
> c:/Rtools/mingw_64/bin/gcc  -I"C:/PROGRA~1/R/R-33~1.1/include"
> -DNDEBUG     -I"d:/Compiler/gcc-4.9.3/local330/include"     -O2 -Wall
> -std=gnu99 -mtune=core2 -c foo.c -o foo.o
> c:/Rtools/mingw_64/bin/gcc -shared -s -static-libgcc -o foo.dll
> tmp.def foo.o -Ld:/Compiler/gcc-4.9.3/local330/lib/x64
> -Ld:/Compiler/gcc-4.9.3/local330/lib -LC:/PROGRA~1/R/R-33~1.1/bin/x64
> -lR
> ////////////////////////////////////////
>
>
> ////////////////////////////////////////
> Creating shared object from this code
> doesn't succeed
> (error: ld returned 1 exit status)
> ////////////////////////////////////////
> void BASE(int *nin, double *x) {
>   int n = nin[0];
>   int i;
>   for (i=0; i<n; i++) x[i] = x[i] * x[i];
> }
>
>
> system("R CMD SHLIB foo_base.c --preclean")
> c:/Rtools/mingw_64/bin/gcc  -I"C:/PROGRA~1/R/R-33~1.1/include"
> -DNDEBUG     -I"d:/Compiler/gcc-4.9.3/local330/include"     -O2 -Wall
> -std=gnu99 -mtune=core2 -c foo_base.c -o foo_base.o
> c:/Rtools/mingw_64/bin/gcc -shared -s -static-libgcc -o foo_base.dll
> tmp.def foo_base.o -Ld:/Compiler/gcc-4.9.3/local330/lib/x64
> -Ld:/Compiler/gcc-4.9.3/local330/lib -LC:/PROGRA~1/R/R-33~1.1/bin/x64
> -lR
>
> C:/Rtools/mingw_64/bin/../lib/gcc/x86_64-w64-mingw32/4.9.3/../../../../x86_64-w64-mingw32/bin/ld.exe:
> tmp.def:3: syntax error
> C:/Rtools/mingw_64/bin/../lib/gcc/x86_64-w64-mingw32/4.9.3/../../../../x86_64-w64-mingw32/bin/ld.exe:tmp.def:
> file format not recognized; treating as linker script
> C:/Rtools/mingw_64/bin/../lib/gcc/x86_64-w64-mingw32/4.9.3/../../../../x86_64-w64-mingw32/bin/ld.exe:tmp.def:2:
> syntax error
> collect2.exe: error: ld returned 1 exit status
>
> ////////////////////////////////////////
>
>
> I don't personally need to use the BASE name, but my package allows
> users to write code that gets incorporated into a shared object and
> unfortunately BASE is a common name to use in these models.  I'm not
> sure if I should just (somehow) prohibit use of BASE or if there is
> something else not right here.
>
> If there is another solution, I hoping to avoid having to write
> dllname-win.def file on Windows platforms (per
> https://cran.r-project.org/doc/manuals/R-exts.html#Creating-shared-objects)
> ... it worked  but seems that the file needs to be in getwd(), which
> I'd rather not do.
>
> Any insight or advice would be appreciated.
>
> Best Regards,
> Kyle
>
> --
> Kyle Baron
> Metrum Research Group
> kyleb at metrumrg.com
> www.metrumrg.com
>
>
>
> sessionInfo()
> R version 3.3.1 (2016-06-21)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows Server 2008 R2 x64 (build 7601) Service Pack 1
>
> locale:
> [1] LC_COLLATE=English_United States.1252
> [2] LC_CTYPE=English_United States.1252
> [3] LC_MONETARY=English_United States.1252
> [4] LC_NUMERIC=C
> [5] LC_TIME=English_United States.1252
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets
> [6] methods   base
>
> loaded via a namespace (and not attached):
> [1] tools_3.3.1
>
>
> Rtools33.exe


From sis.naqvi at gmail.com  Tue Aug  2 10:02:35 2016
From: sis.naqvi at gmail.com (S Iqbal)
Date: Tue, 2 Aug 2016 13:32:35 +0530
Subject: [Rd] A request regarding R GUI
Message-ID: <CAK1235LBKhTvkLGN8+9k-WPDJMfQUhXHfn==CT3srk89USbp0g@mail.gmail.com>

Hi,
I use R on windows and linux. It is regarding R GUI in linux.
In linux the output and script spaces are stacked vertically. It becomes
cumbersome to check the output or script in the space whenever the output
or script are longer than the space available.
The GUI in linux should be like that in Windows. The output and script
windows are two seperate resizable child windows. These windows can be
arranged or resized as per the requirement. If output is big then the
output window can be maximized.

I wish the Windows like R GUI may be implemented in Linux also.

regards,

	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Tue Aug  2 12:52:53 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Tue, 2 Aug 2016 06:52:53 -0400
Subject: [Rd] A request regarding R GUI
In-Reply-To: <CAK1235LBKhTvkLGN8+9k-WPDJMfQUhXHfn==CT3srk89USbp0g@mail.gmail.com>
References: <CAK1235LBKhTvkLGN8+9k-WPDJMfQUhXHfn==CT3srk89USbp0g@mail.gmail.com>
Message-ID: <502d5748-6481-39db-aa2c-272ed45fb3cb@gmail.com>

On 02/08/2016 4:02 AM, S Iqbal wrote:
> Hi,
> I use R on windows and linux. It is regarding R GUI in linux.
> In linux the output and script spaces are stacked vertically. It becomes
> cumbersome to check the output or script in the space whenever the output
> or script are longer than the space available.
> The GUI in linux should be like that in Windows. The output and script
> windows are two seperate resizable child windows. These windows can be
> arranged or resized as per the requirement. If output is big then the
> output window can be maximized.
>
> I wish the Windows like R GUI may be implemented in Linux also.
>

It sounds as though you're talking about RStudio on Windows, not the R 
GUI.  If so, you should use RStudio on Linux as well; it is very similar.

Duncan Murdoch


From wellington at sophiainformatica.com.br  Tue Aug  2 15:04:53 2016
From: wellington at sophiainformatica.com.br (wellington at sophiainformatica.com.br)
Date: Tue, 02 Aug 2016 10:04:53 -0300
Subject: [Rd] Accessing R engine with Delphi
Message-ID: <12fc64840e79675e7815772bc087fe23@sophiainformatica.com.br>

 

Hello Hans -Peter , 

I need to call R functions with DELPHI , you
can help in this my need ? 

Will be via DCOM , DLL ? 

which quickly
and efficiently? 

Please , if possible , show me examples.
>From already
thank you for your attention. 

Wellington Sala,

developer DELPHI

 
	[[alternative HTML version deleted]]


From luke-tierney at uiowa.edu  Tue Aug  2 17:39:55 2016
From: luke-tierney at uiowa.edu (luke-tierney at uiowa.edu)
Date: Tue, 2 Aug 2016 10:39:55 -0500
Subject: [Rd] [R] Fwd: Help: malloc/free deadlock in unsafe signal
 handler 'Rf_onsigusr1'
In-Reply-To: <CA+F1ufn=6DcGMYaR--o-BrSjOWR+xO3xqU__NR3X4kCXVKmEug@mail.gmail.com>
References: <CA+F1ufkY+=gUBwGJFLdb+yCYyoqHHmQ3xJ_4zaiNo-084pmEoQ@mail.gmail.com>
	<CA+F1ufmmoqieSC_UiVfnoVAE_FvFZt10hDsKM=KMzR8s_VBaYA@mail.gmail.com>
	<alpine.OSX.2.20.1608011459480.801@lukes-macbook-air.local>
	<CA+F1ufn=6DcGMYaR--o-BrSjOWR+xO3xqU__NR3X4kCXVKmEug@mail.gmail.com>
Message-ID: <alpine.OSX.2.20.1608021034100.801@lukes-macbook-air.local>

Redirecting to R-devel

I don't recall how long the SUGUSR handlers have been in R -- you can
check in svn if you like -- it's been a long time. The intention is
for them to serve as an emergency break -- a chance of possibly saving
the workspace when you get stuck in an infinite loop in C/Fortran code
that cant be interrupted by a SIGINT. This can't be accomplished
without doing things that really shouldn't be done in a signal handler.
That is all these handlers are intended for. If you are using them
programatically you should rethink what you are doing. If you explain
what you are trying to do you might get some help with that.

Best,

luke

On Tue, 2 Aug 2016, Ming Li wrote:

> Thanks luke.?cc hawq dev team.
> I sent this email to?R-devel 2 days before forwarding it to R-help, but no
> one reply.
> 
> Is there any workaround? When were?SIGUSR1 and SIGUSR2?sent in R? Or maybe
> we should move all operations not too emergency out of signal handler? 
> 
> Thanks. 
> 
> 
> On Tue, Aug 2, 2016 at 4:02 AM, <luke-tierney at uiowa.edu> wrote:
>       The handlers for SIGUSR1 and SIGUSR2 are really intended as an
>       emergency break, not for ordinary programming. These could be
>       rewritten to be safer but that would make them less immediate.
>
>       Followups would be more appropriate on R-devel.
>
>       Best,
>
>       luke
>
>       On Mon, 1 Aug 2016, Ming Li wrote:
>
>       Hi all,
>
>       I am working on a bug,? which running PLR on HAWQ. The
>       process hung and
>       can't be terminated.
>
>             From my investigation, it seems signal handler
>             'Rf_onsigusr1' trigger a
>
>       malloc/free deadlock.
>
>       The calling stack is below.
>
>       Thread 1 (Thread 0x7f4c93af48e0 (LWP 431263)):
>       #0? 0x00007f4c9015805e in __lll_lock_wait_private () from
>       /lib64/libc.so.6
>       #1? 0x00007f4c900dd16b in _L_lock_9503 () from
>       /lib64/libc.so.6
>       #2? 0x00007f4c900da6a6 in malloc () from /lib64/libc.so.6
>       #3? 0x00007f4c9008fb39 in _nl_make_l10nflist () from
>       /lib64/libc.so.6
>       #4? 0x00007f4c9008ddf5 in _nl_find_domain () from
>       /lib64/libc.so.6
>       #5? 0x00007f4c9008d6e0 in __dcigettext () from
>       /lib64/libc.so.6
>       #6? 0x00007f4c6fabcfe3 in Rf_onsigusr1 () from
>       /usr/local/lib64/R/lib/libR.so
>       #7? <signal handler called>
>       #8? 0x00007f4c9014079a in brk () from /lib64/libc.so.6
>       #9? 0x00007f4c90140845 in sbrk () from /lib64/libc.so.6
>       #10 0x00007f4c900dd769 in __default_morecore () from
>       /lib64/libc.so.6
>       #11 0x00007f4c900d87a2 in _int_free () from
>       /lib64/libc.so.6
>       #12 0x0000000000b3ff24 in gp_free2 ()
>       #13 0x0000000000b356fc in AllocSetDelete ()
>       #14 0x0000000000b38391 in MemoryContextDeleteImpl ()
>       #15 0x000000000077c851 in ExecEndAgg ()
>       #16 0x00000000007592ad in ExecEndNode ()
>       #17 0x000000000075186c in ExecEndPlan ()
>       #18 0x000000000079dffa in ExecEndSubqueryScan ()
>       #19 0x000000000075921d in ExecEndNode ()
>       #20 0x000000000075186c in ExecEndPlan ()
>       #21 0x0000000000752565 in ExecutorEnd ()
>       #22 0x00000000006dd9bd in PortalCleanup ()
>       #23 0x0000000000b3f077 in AtCommit_Portals ()
>       #24 0x000000000051abe5 in CommitTransaction ()
>       #25 0x000000000051f1d5 in CommitTransactionCommand ()
>       #26 0x000000000099809e in PostgresMain ()
>       #27 0x00000000008f1031 in BackendStartup ()
>       #28 0x00000000008f70e0 in PostmasterMain ()
>       #29 0x00000000007f63da in main ()
> 
>
>       I googled and found below info maybe useful to fix it: The
>       best way to
>       avoid this kind of deadlock is to Call only
>       asynchronous-safe functions
>       within signal handlers.
> 
> https://www.securecoding.cert.org/confluence/display/c/SIG30-C.+Call+only+a
>       synchronous-safe+functions+within+signal+handlers
>
>       Thanks a lot.
>
> ? ? ? ? [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more,
> see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible
> code.
> 
> 
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa? ? ? ? ? ? ? ? ? Phone:? ? ? ? ? ? ?319-335-3386
> Department of Statistics and? ? ? ? Fax:? ? ? ? ? ? ? ?319-335-3017
> ? ?Actuarial Science
> 241 Schaeffer Hall? ? ? ? ? ? ? ? ? email:? ?luke-tierney at uiowa.edu
> Iowa City, IA 52242? ? ? ? ? ? ? ? ?WWW:? http://www.stat.uiowa.edu
> 
> 
> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From kevinushey at gmail.com  Tue Aug  2 20:48:15 2016
From: kevinushey at gmail.com (Kevin Ushey)
Date: Tue, 2 Aug 2016 11:48:15 -0700
Subject: [Rd] strange behavior in 'inherits' check for loaded S4 object
In-Reply-To: <92CB0846-DD2C-48FF-8BCD-376A1B75A30B@r-project.org>
References: <CAJXgQP3ap2QSemxr533=AAHNKA+J_xMWns6EB_ky7FPGpSsQwg@mail.gmail.com>
	<CAJXgQP1qDaBc9dEW8J9H7xYonzJGtOjhs-fBVWtA5RgUG7aW7A@mail.gmail.com>
	<CAJXgQP3JeEouvyFz_4etkHfQ9kvyn+ARExdvswLyMtRuHz2miQ@mail.gmail.com>
	<22428.49843.816650.803324@stat.math.ethz.ch>
	<92CB0846-DD2C-48FF-8BCD-376A1B75A30B@r-project.org>
Message-ID: <CAJXgQP1QOxVyJE3-Tdq4MazAv9f7Gj5niW2RQ_0x-rW4n_9xTQ@mail.gmail.com>

Hi Martin, John,

Thanks for the responses! I've tidied up some of the notes from this
mailing list thread and posted them on the bug tracker.

John, in this case, I think namespaces are relevant because for
non-exported S4 classes, the class information is made available
through the '.__C__<package>' symbol in the package's namespace, but
not the package environment that gets attached to the search path. In
this (rare, yet not impossible) sequence of events, it looks like R
attempts to resolve the '.__C__<package>' symbol in the wrong
environment, and so class information lookup fails, and we end up
caching the wrong inheritance information.

Thanks,
Kevin

On Sun, Jul 31, 2016 at 5:12 AM, John Chambers <jmc at r-project.org> wrote:
> (Just returning from the "wilds" of Canada, so not able to comment on the specifics, but ...)
>
> There is a basic point about generic functions that may be related to the "private" class question and my earlier remarks that Martin alluded to.
>
> R (and S4 before it)  allows packages to define methods for a generic function in another package.  Say, for plot() in graphics.
>
> The current model is that the generic plot() remains one function, specifically a generic associated with the graphics package.
>
> Package A might define a method corresponding to one or two classes defined in that package.  When A is loaded, those methods are added to the table for plot() in the current session.
>
> Now suppose a user calls a function, foo(), in package B, and that foo() in turn calls plot().  This is the same plot() function, and in particular will include the methods supplied from package A.
>
> This is regardless of the two packages having any overt connection.  Also, the methods are accepted by the generic function regardless of whether the class is explicitly exported or not.  In this sense, classes cannot be entirely private if methods are defined for a non-local function.  Namespaces are not directly relevant.
>
> Whether this can lead to strange behavior isn't clear, and if so, is it a sign that something undesirable was done in the particular example?  (In Extending R, I suggested a "right to write methods" that  would discourage a package from having methods unless it owned the function or some of the classes.)
>
> R could adopt a different model for generic functions, where a package that defined a method for a non-exported class would create a "local" version of the generic, but that would likely raise some other issues.
>
> But seems like a useful topic for discussion.
>
> John
>
> On Jul 30, 2016, at 11:07 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>
>>>>>>> Kevin Ushey <kevinushey at gmail.com>
>>>>>>>    on Fri, 29 Jul 2016 11:46:19 -0700 writes:
>>
>>> I should add one more item that may be related here --
>>> calling 'methods:::.requirePackage' returns a different
>>> result based on whether the package namespace is already
>>> loaded or not.
>>
>>> If the package namespace is not loaded, the package is
>>> loaded and attached, and the package environment is
>>> returned:
>>
>>>> methods:::.requirePackage("digest")
>>>    Loading required package: digest <environment:
>>> package:digest> attr(,"name") [1] "package:digest"
>>> attr(,"path") [1]
>>> "/Users/kevin/Library/R/3.3/library/digest"
>>>> "digest" %in% loadedNamespaces()
>>>    [1] TRUE
>>>> "package:digest" %in% search()
>>>    [1] TRUE
>>
>>> On the other hand, if the package namespace has already
>>> been loaded, the package namespace is returned without
>>> attaching the package:
>>
>>>> requireNamespace("digest")
>>>    Loading required namespace: digest
>>>> methods:::.requirePackage("digest")
>>>    <environment: namespace:digest>
>>>> "digest" %in% loadedNamespaces()
>>>    [1] TRUE
>>>> "package:digest" %in% search()
>>>    [1] FALSE
>>
>>> This may be intentional, but the behavior seems surprising
>>> and could be responsible for the behavior outlined
>>> earlier.
>>
>> Yes, the behavior you outlined earlier is buggy, and I also have
>> seen similar bugous behavior for the case of non-exported
>> classes.
>>
>> Part of it is historical:  The S4 code was mostly written before
>> namespaces were introduced into R;   I vaguely remember John
>> Chambers (the principal creator of S4) saying that he did not
>> intend the formal classes to be not visible... which in some
>> sense only contains the fact that he (or anybody) would not
>> think much about hidden objects before they were introduced.
>>
>> Still, in the mean time, most of us have seen many cases where
>> we wanted to have "private" classes,  and many packages do have
>> them, too.... and they "mostly work" ;-)
>>
>> In other words, I agree that it would be very desirable to get
>> to the bottom of this and fix such problems.
>>
>> .requirePackage() is among the parts of the methods package code
>> which are quite delicate (and not much documented AFAIK, the hidden
>> .requirePackage() function is a good example!).
>>
>> Delicate for at least two reasons:
>>
>> 1) They are not only used in crucial steps when "bootstrapping"
>>   the methods package ('methods' has to define its own S4
>>   generics, methods, and classes before the package "exists"),
>>
>> 1b) they are also used both when building and installing another
>>    'methods'-dependent package.  This could be called
>>    "bootstrapping another package".
>>
>> 2) they are also much used whenever S4 code (aka
>>   'methods'-dependent) packages are loaded and attached,
>>   so should be as fast as possible.
>>   I think you know that in recent years there have been
>>   considerable (and successful!) efforts to speedup package
>>   loading time, e.g. speeding up 'library(Matrix)' by about
>>   2 factors of 2, and changing such functions should not
>>   deteriorate package-load speed noticably.
>>
>> Still, it is very desirable to improve / fix the issue:
>> After all this musings, I'd currently guess that it would be a
>> good idea if  .requirePackage()  would always return the
>> *namespace* of the corresponding package unless that does not
>> yet exist, as in the the 'bootstrap' situations above.
>> ... or we'd add a new argument to .requirePackage() dealing with
>> that, or we use two functions:  .requirePackage() needed for
>> boostrapping, returning a package envionment, and
>> .requireNamespace() used to access class (and generic function!)
>> environments.
>>
>> Well tested patches are very welcome; as is filing a formal
>> bug report with bugzilla (https://bugs.r-project.org/ ;
>> (if you have no "account" there, we will have to
>> manually create one, for now, see the 'Note' on
>> https://www.r-project.org/bugs.html because of the spammer
>> attacks earlier this month ... but I see you, Kevin are
>> registered there),
>> or
>> just continuing your findings here.
>>
>> Martin
>>
>>
>>> Best, Kevin
>>
>>> On Fri, Jul 29, 2016 at 11:37 AM, Kevin Ushey
>>> <kevinushey at gmail.com> wrote:
>>>> I have a small idea as to what's going on now; at least,
>>>> why exporting the class resolves this particular issue.
>>>>
>>>> Firstly, when an S4 class is not exported, the associated
>>>> '.__C__<class>' object is not made part of the package
>>>> environment.  For example, I see:
>>>>
>>>>> getAnywhere(".__C__SubMatrix") A single object matching
>>>> '.__C__SubMatrix' was found It was found in the following
>>>> places namespace:s4inherits with value < ... >
>>>>
>>>> Note that the symbol is only discovered in the package
>>>> namespace. When the class is exported (e.g. with
>>>> 'exportClasses(SubMatrix)' in the NAMESPACE file), it's
>>>> found both in 'package:s4inherits' and
>>>> 'namespace:s4inherits'.
>>>>
>>>> Secondly, when R attempts to resolve the superclasses for
>>>> an S3 class, the function 'methods:::.extendsForS3' is
>>>> called. Tracing that code eventually gets us here:
>>>>
>>>> https://github.com/wch/r-source/blob/trunk/src/library/methods/R/SClasses.R#L255
>>>>
>>>> Note that we reach this code path as the S3 class cache
>>>> has not been populated yet; ie, this code returns NULL:
>>>>
>>>> https://github.com/wch/r-source/blob/trunk/src/library/methods/R/SClasses.R#L238-L240
>>>>
>>>> So, the class hierarchy is looked up using this code:
>>>>
>>>> if(isTRUE(nzchar(package))) { whereP <-
>>>> .requirePackage(package) value <- get0(cname, whereP,
>>>> inherits = inherits) }
>>>>
>>>> However, because the '.__C__SubMatrix' object is only
>>>> made available in the package's namespace, not within the
>>>> package environment, it is not resolved, and so lookup
>>>> fails. (Presumedly, that lookup is done when initially
>>>> building a cache for S3 dispatch?) So, I wonder if that
>>>> class lookup should occur within the package's namespace
>>>> instead?
>>>>
>>>> Thanks for your time, Kevin
>>>>
>>>> On Sat, Jun 25, 2016 at 12:46 PM, Kevin Ushey
>>>> <kevinushey at gmail.com> wrote:
>>>>> Hi,
>>>>>
>>>>> (sorry for the wall of text; the issue here appears to
>>>>> be rather complicated)
>>>>>
>>>>> I'm seeing a somewhat strange case where checking
>>>>> whether an S4 object inherits from a parent class
>>>>> defined from another package with 'inherits' fails if
>>>>> that object is materialized through a call to
>>>>> 'load'. That's a mouthful, so I've put together a
>>>>> relatively small reproducible example online here:
>>>>>
>>>>> https://github.com/kevinushey/s4inherits
>>>>>
>>>>> This package, 's4inherits', defines an S4 class,
>>>>> 'SubMatrix', that inherits from the 'dsyMatrix' class
>>>>> defined in the Matrix package.  After installing the
>>>>> package, I run some simple tests:
>>>>>
>>>>> $ R -f test-save.R
>>>>>
>>>>>> library(s4inherits) data <- SubMatrix(1)
>>>>>>
>>>>>> is(data, "SubMatrix")
>>>>> [1] TRUE
>>>>>> inherits(data, "SubMatrix")
>>>>> [1] TRUE
>>>>>>
>>>>>> is(data, "dsyMatrix")
>>>>> [1] TRUE
>>>>>> inherits(data, "dsyMatrix")
>>>>> [1] TRUE
>>>>>>
>>>>>> save(data, file = "test.RData")
>>>>>>
>>>>>
>>>>> All the inheritance checks report as we would expect. I
>>>>> check that the inheritance reports are as expected, then
>>>>> save that object to 'test.RData'. I then load that data
>>>>> file in a new R session and run the same checks:
>>>>>
>>>>> $ R -f test-load.R
>>>>>
>>>>>> library(methods) load("test.RData")
>>>>>>
>>>>>> inherits(data, "SubMatrix")
>>>>> Loading required package: s4inherits [1] TRUE
>>>>>> is(data, "SubMatrix")
>>>>> [1] TRUE
>>>>>>
>>>>>> inherits(data, "dsyMatrix")
>>>>> [1] FALSE # (??)
>>>>>> is(data, "dsyMatrix")
>>>>> [1] TRUE
>>>>>>
>>>>>
>>>>> Note that R now reports that my loaded object does _not_
>>>>> inherit from "dsyMatrix", yet this occurs only when
>>>>> checked with 'inherits()' -- 'is' produces the expected
>>>>> result.
>>>>>
>>>>> I do not see the behavior if I explicitly load / attach
>>>>> the 's4inherits' package before loading the associated
>>>>> data file; it only occurs if the package namespace is
>>>>> loaded in response to loading the data object hosting a
>>>>> 'SubMatrix' object.
>>>>>
>>>>> More precisely, the package namespace is loaded when the
>>>>> promise hosting the data object is evaluated; that
>>>>> promise being generated by 'load', if I understand
>>>>> correctly. Somehow, evaluation of that promise within
>>>>> the call to 'inherits' in this very special case causes
>>>>> the unexpected behavior -- ie, if the first thing that
>>>>> you do with the loaded object is check its class with
>>>>> 'inherits', then you get this unexpected result.
>>>>>
>>>>> Even more, this behavior seems to go away if the
>>>>> 's4inherits' package explicitly exports the class --
>>>>> however, you could imagine this class normally being
>>>>> internal to the package, and so it may be undesirable to
>>>>> export it.
>>>>>
>>>>> I checked a bit into the C code, and IIUC the check here
>>>>> looks up the class hierarchy in the R_S4_extends_table
>>>>> object defined in 'attrib.c', so it seems like that
>>>>> mapping is potentially not getting constructed with the
>>>>> full hierarchy (although hopefully someone with more
>>>>> knowledge of the S4 internals + interaction with S3 can
>>>>> elaborate).
>>>>>
>>>>> (FWIW, this was distilled from a case where S3 dispatch
>>>>> on a similar loaded S4 object failed, due to failure to
>>>>> resolve the class hierarchy for the S3 dispatch
>>>>> context.)
>>>>>
>>>>> Thanks, Kevin
>>>>>
>>>>> ---
>>>>>
>>>>> $ R --slave -e "utils::sessionInfo()" R Under
>>>>> development (unstable) (2016-06-13 r70769) Platform:
>>>>> x86_64-apple-darwin15.5.0 (64-bit) Running under: OS X
>>>>> 10.11.5 (El Capitan)
>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From bbolker at gmail.com  Tue Aug  2 22:53:26 2016
From: bbolker at gmail.com (Ben Bolker)
Date: Tue, 2 Aug 2016 16:53:26 -0400
Subject: [Rd] save/load + all.equal on reference class objects
Message-ID: <6aea8f5c-cdf8-fcc8-6b74-9488b884a987@gmail.com>


 After I save an object that contains reference class objects in some of
its slots to a file and then re-load it, all.equal() seems to break for
me.  Is this a bug in all.equal, or is it likely caused by bad
implementation of methods on my side?  (I see that "'all.equal()' gains
methods for 'environment's and 'refClass'es" for R 3.2.0, but that was a
little while ago ...)  I haven't ever noticed loading these objects from
files to be problematic before.

library(lme4)
fn <- "savecopy.rda"
unlink(fn)
fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy)
save("fm1",file="savecopy.rda")
rm(fm1)
load(fn)

'pp' is one of the slots in this S4 object; it contains a reference
class object.  (The same thing happens for the other reference class
slot, 'resp', which is of a different RC ...)

all.equal(fm1 at pp,fm1 at pp$copy())

   Error in as.character.factor(target) : attempting to coerce non-factor

  Digging into this a bit I can see that all.equal() is attempting to
compare a 'current' and 'target' that both look like this:

str(current)
Formal class 'ordered' [package "methods"] with 1 slot
  ..@ .S3Class: chr [1:2] "ordered" "factor"
Browse[1]> current
Object of class "ordered"
ordered(0)
Levels:

 ... but I can't really make much more sense of it than that.

  In contrast, this works fine:

fm2 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy)
all.equal(fm2 at pp,fm2 at pp$copy())  ## TRUE

  Any thoughts from someone wiser than I am about this stuff?


From jmc at r-project.org  Tue Aug  2 23:24:03 2016
From: jmc at r-project.org (John Chambers)
Date: Tue, 2 Aug 2016 14:24:03 -0700
Subject: [Rd] strange behavior in 'inherits' check for loaded S4 object
In-Reply-To: <CAJXgQP1QOxVyJE3-Tdq4MazAv9f7Gj5niW2RQ_0x-rW4n_9xTQ@mail.gmail.com>
References: <CAJXgQP3ap2QSemxr533=AAHNKA+J_xMWns6EB_ky7FPGpSsQwg@mail.gmail.com>
	<CAJXgQP1qDaBc9dEW8J9H7xYonzJGtOjhs-fBVWtA5RgUG7aW7A@mail.gmail.com>
	<CAJXgQP3JeEouvyFz_4etkHfQ9kvyn+ARExdvswLyMtRuHz2miQ@mail.gmail.com>
	<22428.49843.816650.803324@stat.math.ethz.ch>
	<92CB0846-DD2C-48FF-8BCD-376A1B75A30B@r-project.org>
	<CAJXgQP1QOxVyJE3-Tdq4MazAv9f7Gj5niW2RQ_0x-rW4n_9xTQ@mail.gmail.com>
Message-ID: <8A65F3B1-7C7F-4D9C-9E31-9DDFB72CA8D9@r-project.org>

Agreed that this looks like a real bug, and is independent of how one regards the more general issue about specifying methods for a public generic and a non-exported class.

John

On Aug 2, 2016, at 11:48 AM, Kevin Ushey <kevinushey at gmail.com> wrote:

> Hi Martin, John,
> 
> Thanks for the responses! I've tidied up some of the notes from this
> mailing list thread and posted them on the bug tracker.
> 
> John, in this case, I think namespaces are relevant because for
> non-exported S4 classes, the class information is made available
> through the '.__C__<package>' symbol in the package's namespace, but
> not the package environment that gets attached to the search path. In
> this (rare, yet not impossible) sequence of events, it looks like R
> attempts to resolve the '.__C__<package>' symbol in the wrong
> environment, and so class information lookup fails, and we end up
> caching the wrong inheritance information.
> 
> Thanks,
> Kevin
> 
> On Sun, Jul 31, 2016 at 5:12 AM, John Chambers <jmc at r-project.org> wrote:
>> (Just returning from the "wilds" of Canada, so not able to comment on the specifics, but ...)
>> 
>> There is a basic point about generic functions that may be related to the "private" class question and my earlier remarks that Martin alluded to.
>> 
>> R (and S4 before it)  allows packages to define methods for a generic function in another package.  Say, for plot() in graphics.
>> 
>> The current model is that the generic plot() remains one function, specifically a generic associated with the graphics package.
>> 
>> Package A might define a method corresponding to one or two classes defined in that package.  When A is loaded, those methods are added to the table for plot() in the current session.
>> 
>> Now suppose a user calls a function, foo(), in package B, and that foo() in turn calls plot().  This is the same plot() function, and in particular will include the methods supplied from package A.
>> 
>> This is regardless of the two packages having any overt connection.  Also, the methods are accepted by the generic function regardless of whether the class is explicitly exported or not.  In this sense, classes cannot be entirely private if methods are defined for a non-local function.  Namespaces are not directly relevant.
>> 
>> Whether this can lead to strange behavior isn't clear, and if so, is it a sign that something undesirable was done in the particular example?  (In Extending R, I suggested a "right to write methods" that  would discourage a package from having methods unless it owned the function or some of the classes.)
>> 
>> R could adopt a different model for generic functions, where a package that defined a method for a non-exported class would create a "local" version of the generic, but that would likely raise some other issues.
>> 
>> But seems like a useful topic for discussion.
>> 
>> John
>> 
>> On Jul 30, 2016, at 11:07 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>> 
>>>>>>>> Kevin Ushey <kevinushey at gmail.com>
>>>>>>>>   on Fri, 29 Jul 2016 11:46:19 -0700 writes:
>>> 
>>>> I should add one more item that may be related here --
>>>> calling 'methods:::.requirePackage' returns a different
>>>> result based on whether the package namespace is already
>>>> loaded or not.
>>> 
>>>> If the package namespace is not loaded, the package is
>>>> loaded and attached, and the package environment is
>>>> returned:
>>> 
>>>>> methods:::.requirePackage("digest")
>>>>   Loading required package: digest <environment:
>>>> package:digest> attr(,"name") [1] "package:digest"
>>>> attr(,"path") [1]
>>>> "/Users/kevin/Library/R/3.3/library/digest"
>>>>> "digest" %in% loadedNamespaces()
>>>>   [1] TRUE
>>>>> "package:digest" %in% search()
>>>>   [1] TRUE
>>> 
>>>> On the other hand, if the package namespace has already
>>>> been loaded, the package namespace is returned without
>>>> attaching the package:
>>> 
>>>>> requireNamespace("digest")
>>>>   Loading required namespace: digest
>>>>> methods:::.requirePackage("digest")
>>>>   <environment: namespace:digest>
>>>>> "digest" %in% loadedNamespaces()
>>>>   [1] TRUE
>>>>> "package:digest" %in% search()
>>>>   [1] FALSE
>>> 
>>>> This may be intentional, but the behavior seems surprising
>>>> and could be responsible for the behavior outlined
>>>> earlier.
>>> 
>>> Yes, the behavior you outlined earlier is buggy, and I also have
>>> seen similar bugous behavior for the case of non-exported
>>> classes.
>>> 
>>> Part of it is historical:  The S4 code was mostly written before
>>> namespaces were introduced into R;   I vaguely remember John
>>> Chambers (the principal creator of S4) saying that he did not
>>> intend the formal classes to be not visible... which in some
>>> sense only contains the fact that he (or anybody) would not
>>> think much about hidden objects before they were introduced.
>>> 
>>> Still, in the mean time, most of us have seen many cases where
>>> we wanted to have "private" classes,  and many packages do have
>>> them, too.... and they "mostly work" ;-)
>>> 
>>> In other words, I agree that it would be very desirable to get
>>> to the bottom of this and fix such problems.
>>> 
>>> .requirePackage() is among the parts of the methods package code
>>> which are quite delicate (and not much documented AFAIK, the hidden
>>> .requirePackage() function is a good example!).
>>> 
>>> Delicate for at least two reasons:
>>> 
>>> 1) They are not only used in crucial steps when "bootstrapping"
>>>  the methods package ('methods' has to define its own S4
>>>  generics, methods, and classes before the package "exists"),
>>> 
>>> 1b) they are also used both when building and installing another
>>>   'methods'-dependent package.  This could be called
>>>   "bootstrapping another package".
>>> 
>>> 2) they are also much used whenever S4 code (aka
>>>  'methods'-dependent) packages are loaded and attached,
>>>  so should be as fast as possible.
>>>  I think you know that in recent years there have been
>>>  considerable (and successful!) efforts to speedup package
>>>  loading time, e.g. speeding up 'library(Matrix)' by about
>>>  2 factors of 2, and changing such functions should not
>>>  deteriorate package-load speed noticably.
>>> 
>>> Still, it is very desirable to improve / fix the issue:
>>> After all this musings, I'd currently guess that it would be a
>>> good idea if  .requirePackage()  would always return the
>>> *namespace* of the corresponding package unless that does not
>>> yet exist, as in the the 'bootstrap' situations above.
>>> ... or we'd add a new argument to .requirePackage() dealing with
>>> that, or we use two functions:  .requirePackage() needed for
>>> boostrapping, returning a package envionment, and
>>> .requireNamespace() used to access class (and generic function!)
>>> environments.
>>> 
>>> Well tested patches are very welcome; as is filing a formal
>>> bug report with bugzilla (https://bugs.r-project.org/ ;
>>> (if you have no "account" there, we will have to
>>> manually create one, for now, see the 'Note' on
>>> https://www.r-project.org/bugs.html because of the spammer
>>> attacks earlier this month ... but I see you, Kevin are
>>> registered there),
>>> or
>>> just continuing your findings here.
>>> 
>>> Martin
>>> 
>>> 
>>>> Best, Kevin
>>> 
>>>> On Fri, Jul 29, 2016 at 11:37 AM, Kevin Ushey
>>>> <kevinushey at gmail.com> wrote:
>>>>> I have a small idea as to what's going on now; at least,
>>>>> why exporting the class resolves this particular issue.
>>>>> 
>>>>> Firstly, when an S4 class is not exported, the associated
>>>>> '.__C__<class>' object is not made part of the package
>>>>> environment.  For example, I see:
>>>>> 
>>>>>> getAnywhere(".__C__SubMatrix") A single object matching
>>>>> '.__C__SubMatrix' was found It was found in the following
>>>>> places namespace:s4inherits with value < ... >
>>>>> 
>>>>> Note that the symbol is only discovered in the package
>>>>> namespace. When the class is exported (e.g. with
>>>>> 'exportClasses(SubMatrix)' in the NAMESPACE file), it's
>>>>> found both in 'package:s4inherits' and
>>>>> 'namespace:s4inherits'.
>>>>> 
>>>>> Secondly, when R attempts to resolve the superclasses for
>>>>> an S3 class, the function 'methods:::.extendsForS3' is
>>>>> called. Tracing that code eventually gets us here:
>>>>> 
>>>>> https://github.com/wch/r-source/blob/trunk/src/library/methods/R/SClasses.R#L255
>>>>> 
>>>>> Note that we reach this code path as the S3 class cache
>>>>> has not been populated yet; ie, this code returns NULL:
>>>>> 
>>>>> https://github.com/wch/r-source/blob/trunk/src/library/methods/R/SClasses.R#L238-L240
>>>>> 
>>>>> So, the class hierarchy is looked up using this code:
>>>>> 
>>>>> if(isTRUE(nzchar(package))) { whereP <-
>>>>> .requirePackage(package) value <- get0(cname, whereP,
>>>>> inherits = inherits) }
>>>>> 
>>>>> However, because the '.__C__SubMatrix' object is only
>>>>> made available in the package's namespace, not within the
>>>>> package environment, it is not resolved, and so lookup
>>>>> fails. (Presumedly, that lookup is done when initially
>>>>> building a cache for S3 dispatch?) So, I wonder if that
>>>>> class lookup should occur within the package's namespace
>>>>> instead?
>>>>> 
>>>>> Thanks for your time, Kevin
>>>>> 
>>>>> On Sat, Jun 25, 2016 at 12:46 PM, Kevin Ushey
>>>>> <kevinushey at gmail.com> wrote:
>>>>>> Hi,
>>>>>> 
>>>>>> (sorry for the wall of text; the issue here appears to
>>>>>> be rather complicated)
>>>>>> 
>>>>>> I'm seeing a somewhat strange case where checking
>>>>>> whether an S4 object inherits from a parent class
>>>>>> defined from another package with 'inherits' fails if
>>>>>> that object is materialized through a call to
>>>>>> 'load'. That's a mouthful, so I've put together a
>>>>>> relatively small reproducible example online here:
>>>>>> 
>>>>>> https://github.com/kevinushey/s4inherits
>>>>>> 
>>>>>> This package, 's4inherits', defines an S4 class,
>>>>>> 'SubMatrix', that inherits from the 'dsyMatrix' class
>>>>>> defined in the Matrix package.  After installing the
>>>>>> package, I run some simple tests:
>>>>>> 
>>>>>> $ R -f test-save.R
>>>>>> 
>>>>>>> library(s4inherits) data <- SubMatrix(1)
>>>>>>> 
>>>>>>> is(data, "SubMatrix")
>>>>>> [1] TRUE
>>>>>>> inherits(data, "SubMatrix")
>>>>>> [1] TRUE
>>>>>>> 
>>>>>>> is(data, "dsyMatrix")
>>>>>> [1] TRUE
>>>>>>> inherits(data, "dsyMatrix")
>>>>>> [1] TRUE
>>>>>>> 
>>>>>>> save(data, file = "test.RData")
>>>>>>> 
>>>>>> 
>>>>>> All the inheritance checks report as we would expect. I
>>>>>> check that the inheritance reports are as expected, then
>>>>>> save that object to 'test.RData'. I then load that data
>>>>>> file in a new R session and run the same checks:
>>>>>> 
>>>>>> $ R -f test-load.R
>>>>>> 
>>>>>>> library(methods) load("test.RData")
>>>>>>> 
>>>>>>> inherits(data, "SubMatrix")
>>>>>> Loading required package: s4inherits [1] TRUE
>>>>>>> is(data, "SubMatrix")
>>>>>> [1] TRUE
>>>>>>> 
>>>>>>> inherits(data, "dsyMatrix")
>>>>>> [1] FALSE # (??)
>>>>>>> is(data, "dsyMatrix")
>>>>>> [1] TRUE
>>>>>>> 
>>>>>> 
>>>>>> Note that R now reports that my loaded object does _not_
>>>>>> inherit from "dsyMatrix", yet this occurs only when
>>>>>> checked with 'inherits()' -- 'is' produces the expected
>>>>>> result.
>>>>>> 
>>>>>> I do not see the behavior if I explicitly load / attach
>>>>>> the 's4inherits' package before loading the associated
>>>>>> data file; it only occurs if the package namespace is
>>>>>> loaded in response to loading the data object hosting a
>>>>>> 'SubMatrix' object.
>>>>>> 
>>>>>> More precisely, the package namespace is loaded when the
>>>>>> promise hosting the data object is evaluated; that
>>>>>> promise being generated by 'load', if I understand
>>>>>> correctly. Somehow, evaluation of that promise within
>>>>>> the call to 'inherits' in this very special case causes
>>>>>> the unexpected behavior -- ie, if the first thing that
>>>>>> you do with the loaded object is check its class with
>>>>>> 'inherits', then you get this unexpected result.
>>>>>> 
>>>>>> Even more, this behavior seems to go away if the
>>>>>> 's4inherits' package explicitly exports the class --
>>>>>> however, you could imagine this class normally being
>>>>>> internal to the package, and so it may be undesirable to
>>>>>> export it.
>>>>>> 
>>>>>> I checked a bit into the C code, and IIUC the check here
>>>>>> looks up the class hierarchy in the R_S4_extends_table
>>>>>> object defined in 'attrib.c', so it seems like that
>>>>>> mapping is potentially not getting constructed with the
>>>>>> full hierarchy (although hopefully someone with more
>>>>>> knowledge of the S4 internals + interaction with S3 can
>>>>>> elaborate).
>>>>>> 
>>>>>> (FWIW, this was distilled from a case where S3 dispatch
>>>>>> on a similar loaded S4 object failed, due to failure to
>>>>>> resolve the class hierarchy for the S3 dispatch
>>>>>> context.)
>>>>>> 
>>>>>> Thanks, Kevin
>>>>>> 
>>>>>> ---
>>>>>> 
>>>>>> $ R --slave -e "utils::sessionInfo()" R Under
>>>>>> development (unstable) (2016-06-13 r70769) Platform:
>>>>>> x86_64-apple-darwin15.5.0 (64-bit) Running under: OS X
>>>>>> 10.11.5 (El Capitan)
>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 


From mdsumner at gmail.com  Wed Aug  3 08:24:14 2016
From: mdsumner at gmail.com (Michael Sumner)
Date: Wed, 3 Aug 2016 06:24:14 +0000
Subject: [Rd] polypath winding rule with transparency
Message-ID: <CAAcGz99g-zD9AHSg-6=fgBPMtCOzwykO0YRXa+Yqm4x5QePSJg@mail.gmail.com>

Hi, I see different results in png() and pdf() for polypath() on Windows
when using the "winding" rule

## overlapping, both clock-wise
x <- cbind(c(.1, .1, .6, .6, NA, .4, .4, .9, .9),
          c(.1, .6, .6, .1, NA, .4, .9, .9, .4))

pfun <- function() {
  plot(x)
  polypath(x * 0.8 + 0.2,  rule = "winding", col = "#BEBEBE80")
  polypath(x,  rule = "winding", col = "#BEBEBE80")
}

## output  "windows.png/pdf" or "unix.png/pdf"
label <- .Platform$OS.type
png(sprintf("%s.png", label))
pfun()
dev.off()
pdf(sprintf("%s.pdf", label))
pfun()
dev.off()


Visually, the result in the "windows.png" file is as if the "evenodd" rule
was specified. All other examples unix.pdf, unix.png, windows.pdf give me
the expected result - which is "all bounded regions shaded grey, with two
tones for the different regions of overlap". The unexpected result is the
completely transparent region.

Is this a known/expected difference on Windows?  I see the unexpected
result in 3.3.1 and in R version 3.3.1 Patched (2016-07-27 r70991) on
Windows.

Cheers, Mike.
-- 
Dr. Michael Sumner
Software and Database Engineer
Australian Antarctic Division
203 Channel Highway
Kingston Tasmania 7050 Australia

	[[alternative HTML version deleted]]


From mdsumner at gmail.com  Wed Aug  3 08:47:16 2016
From: mdsumner at gmail.com (Michael Sumner)
Date: Wed, 3 Aug 2016 06:47:16 +0000
Subject: [Rd] polypath winding rule with transparency
In-Reply-To: <CAAcGz99g-zD9AHSg-6=fgBPMtCOzwykO0YRXa+Yqm4x5QePSJg@mail.gmail.com>
References: <CAAcGz99g-zD9AHSg-6=fgBPMtCOzwykO0YRXa+Yqm4x5QePSJg@mail.gmail.com>
Message-ID: <CAAcGz9-oEfbiRmKnUtYRa7p42A539G_DRSSYq2ZbB=wAvFJcpg@mail.gmail.com>

Hello,

it's probably worth adding that this is not a problem with pathGrob, only
polypath.

This code is sufficient to demonstrate the problem in Windows.

## overlapping, both clock-wise
x <- cbind(c(.1, .1, .6, .6, NA, .4, .4, .9, .9),
          c(.1, .6, .6, .1, NA, .4, .9, .9, .4))
## only a problem on Windows windows() and png()
plot(x);polypath(x, rule = "winding", col = "#BEBEBE80")

This code shows the same behaviour on different systems/devices.

## no problem on Windows/Linux/PNG/PDF ...
library(grid)
grid.newpage()
pushViewport(viewport(0.5, 0.5, width = 1, height = 1))
grid.draw(pathGrob(x[,1], x[,2], rule = "winding", gp = gpar(fill =
"#BEBEBE80")))

Cheers, Mike.

On Wed, 3 Aug 2016 at 16:24 Michael Sumner <mdsumner at gmail.com> wrote:

> Hi, I see different results in png() and pdf() for polypath() on Windows
> when using the "winding" rule
>
> ## overlapping, both clock-wise
> x <- cbind(c(.1, .1, .6, .6, NA, .4, .4, .9, .9),
>           c(.1, .6, .6, .1, NA, .4, .9, .9, .4))
>
> pfun <- function() {
>   plot(x)
>   polypath(x * 0.8 + 0.2,  rule = "winding", col = "#BEBEBE80")
>   polypath(x,  rule = "winding", col = "#BEBEBE80")
> }
>
> ## output  "windows.png/pdf" or "unix.png/pdf"
> label <- .Platform$OS.type
> png(sprintf("%s.png", label))
> pfun()
> dev.off()
> pdf(sprintf("%s.pdf", label))
> pfun()
> dev.off()
>
>
> Visually, the result in the "windows.png" file is as if the "evenodd" rule
> was specified. All other examples unix.pdf, unix.png, windows.pdf give me
> the expected result - which is "all bounded regions shaded grey, with two
> tones for the different regions of overlap". The unexpected result is the
> completely transparent region.
>
> Is this a known/expected difference on Windows?  I see the unexpected
> result in 3.3.1 and in R version 3.3.1 Patched (2016-07-27 r70991) on
> Windows.
>
> Cheers, Mike.
> --
> Dr. Michael Sumner
> Software and Database Engineer
> Australian Antarctic Division
> 203 Channel Highway
> Kingston Tasmania 7050 Australia
>
> --
Dr. Michael Sumner
Software and Database Engineer
Australian Antarctic Division
203 Channel Highway
Kingston Tasmania 7050 Australia

	[[alternative HTML version deleted]]


From mli at pivotal.io  Wed Aug  3 10:02:36 2016
From: mli at pivotal.io (Ming Li)
Date: Wed, 3 Aug 2016 16:02:36 +0800
Subject: [Rd] [R] Fwd: Help: malloc/free deadlock in unsafe signal
	handler 'Rf_onsigusr1'
In-Reply-To: <alpine.OSX.2.20.1608021034100.801@lukes-macbook-air.local>
References: <CA+F1ufkY+=gUBwGJFLdb+yCYyoqHHmQ3xJ_4zaiNo-084pmEoQ@mail.gmail.com>
	<CA+F1ufmmoqieSC_UiVfnoVAE_FvFZt10hDsKM=KMzR8s_VBaYA@mail.gmail.com>
	<alpine.OSX.2.20.1608011459480.801@lukes-macbook-air.local>
	<CA+F1ufn=6DcGMYaR--o-BrSjOWR+xO3xqU__NR3X4kCXVKmEug@mail.gmail.com>
	<alpine.OSX.2.20.1608021034100.801@lukes-macbook-air.local>
Message-ID: <CA+F1uf=DiiatXrayWuJHQu4pESL1V4U7vPDuVL36heBFN4q94g@mail.gmail.com>

Thanks luke,

>From your explanation, it seems that the signal SIGUSR1 was only triggered
when user want to break/cancel R execution, so we can't control the time
when SIGUSR1 sent. So for this defect, the best way is to make sure in the
signal handler function, we need to make sure there is no direct/cascade
call malloc/free, if any buffer needed, it is better to keep buffer static
and malloc before calling signal handler.


On Tue, Aug 2, 2016 at 11:39 PM, <luke-tierney at uiowa.edu> wrote:

> Redirecting to R-devel
>
> I don't recall how long the SUGUSR handlers have been in R -- you can
> check in svn if you like -- it's been a long time. The intention is
> for them to serve as an emergency break -- a chance of possibly saving
> the workspace when you get stuck in an infinite loop in C/Fortran code
> that cant be interrupted by a SIGINT. This can't be accomplished
> without doing things that really shouldn't be done in a signal handler.
> That is all these handlers are intended for. If you are using them
> programatically you should rethink what you are doing. If you explain
> what you are trying to do you might get some help with that.
>
> Best,
>
> luke
>
>
> On Tue, 2 Aug 2016, Ming Li wrote:
>
> Thanks luke. cc hawq dev team.
>> I sent this email to R-devel 2 days before forwarding it to R-help, but no
>> one reply.
>>
>> Is there any workaround? When were SIGUSR1 and SIGUSR2 sent in R? Or maybe
>> we should move all operations not too emergency out of signal handler?
>> Thanks.
>>
>> On Tue, Aug 2, 2016 at 4:02 AM, <luke-tierney at uiowa.edu> wrote:
>>       The handlers for SIGUSR1 and SIGUSR2 are really intended as an
>>       emergency break, not for ordinary programming. These could be
>>       rewritten to be safer but that would make them less immediate.
>>
>>       Followups would be more appropriate on R-devel.
>>
>>       Best,
>>
>>       luke
>>
>>       On Mon, 1 Aug 2016, Ming Li wrote:
>>
>>       Hi all,
>>
>>       I am working on a bug,  which running PLR on HAWQ. The
>>       process hung and
>>       can't be terminated.
>>
>>             From my investigation, it seems signal handler
>>             'Rf_onsigusr1' trigger a
>>
>>       malloc/free deadlock.
>>
>>       The calling stack is below.
>>
>>       Thread 1 (Thread 0x7f4c93af48e0 (LWP 431263)):
>>       #0  0x00007f4c9015805e in __lll_lock_wait_private () from
>>       /lib64/libc.so.6
>>       #1  0x00007f4c900dd16b in _L_lock_9503 () from
>>       /lib64/libc.so.6
>>       #2  0x00007f4c900da6a6 in malloc () from /lib64/libc.so.6
>>       #3  0x00007f4c9008fb39 in _nl_make_l10nflist () from
>>       /lib64/libc.so.6
>>       #4  0x00007f4c9008ddf5 in _nl_find_domain () from
>>       /lib64/libc.so.6
>>       #5  0x00007f4c9008d6e0 in __dcigettext () from
>>       /lib64/libc.so.6
>>       #6  0x00007f4c6fabcfe3 in Rf_onsigusr1 () from
>>       /usr/local/lib64/R/lib/libR.so
>>       #7  <signal handler called>
>>       #8  0x00007f4c9014079a in brk () from /lib64/libc.so.6
>>       #9  0x00007f4c90140845 in sbrk () from /lib64/libc.so.6
>>       #10 0x00007f4c900dd769 in __default_morecore () from
>>       /lib64/libc.so.6
>>       #11 0x00007f4c900d87a2 in _int_free () from
>>       /lib64/libc.so.6
>>       #12 0x0000000000b3ff24 in gp_free2 ()
>>       #13 0x0000000000b356fc in AllocSetDelete ()
>>       #14 0x0000000000b38391 in MemoryContextDeleteImpl ()
>>       #15 0x000000000077c851 in ExecEndAgg ()
>>       #16 0x00000000007592ad in ExecEndNode ()
>>       #17 0x000000000075186c in ExecEndPlan ()
>>       #18 0x000000000079dffa in ExecEndSubqueryScan ()
>>       #19 0x000000000075921d in ExecEndNode ()
>>       #20 0x000000000075186c in ExecEndPlan ()
>>       #21 0x0000000000752565 in ExecutorEnd ()
>>       #22 0x00000000006dd9bd in PortalCleanup ()
>>       #23 0x0000000000b3f077 in AtCommit_Portals ()
>>       #24 0x000000000051abe5 in CommitTransaction ()
>>       #25 0x000000000051f1d5 in CommitTransactionCommand ()
>>       #26 0x000000000099809e in PostgresMain ()
>>       #27 0x00000000008f1031 in BackendStartup ()
>>       #28 0x00000000008f70e0 in PostmasterMain ()
>>       #29 0x00000000007f63da in main ()
>>
>>
>>       I googled and found below info maybe useful to fix it: The
>>       best way to
>>       avoid this kind of deadlock is to Call only
>>       asynchronous-safe functions
>>       within signal handlers.
>>
>>
>> https://www.securecoding.cert.org/confluence/display/c/SIG30-C.+Call+only+a
>>       synchronous-safe+functions+within+signal+handlers
>>
>>       Thanks a lot.
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more,
>> see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible
>> code.
>>
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>    Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>>
>>
>>
>>
>>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>    Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>

	[[alternative HTML version deleted]]


From pauljohn32 at gmail.com  Wed Aug  3 22:12:42 2016
From: pauljohn32 at gmail.com (Paul Johnson)
Date: Wed, 3 Aug 2016 15:12:42 -0500
Subject: [Rd] seq.int does not return a sequence of integers sometimes
Message-ID: <CAErODj_hSunpyZug+dbH7rLuBJuUtsnNvjK_4ii=Pwct6W-1mg@mail.gmail.com>

I have a script that goes wrong because I assumed that seq.int would
return integers.

Below please see it does not unless user is super cautious about
inserting "L" with inputs. I think seq.int should do coercion for me
before returning the sequence.

> xx <- seq.int(1,10)
> class(xx)
[1] "integer"
> is.integer(xx)
[1] TRUE
> xx <- seq.int(1,10, 2)
> class(xx)
[1] "numeric"
> is.integer(xx)
[1] FALSE
> xx <- seq.int(1,10, 2L)
> class(xx)
[1] "numeric"
> is.integer(xx)
[1] FALSE
> xx <- seq.int(1L, 10L, 2L)
> class(xx)
[1] "integer"
> is.integer(xx)
[1] TRUE


I think all of those should have same return value, if the function is
correctly named seq.int.

-- 
Paul E. Johnson   http://pj.freefaculty.org
Director, Center for Research Methods and Data Analysis http://crmda.ku.edu

I only use this account for email list memberships. To write directly,
address me at pauljohn at ku.edu.


From marc_schwartz at me.com  Wed Aug  3 22:26:25 2016
From: marc_schwartz at me.com (Marc Schwartz)
Date: Wed, 03 Aug 2016 15:26:25 -0500
Subject: [Rd] seq.int does not return a sequence of integers sometimes
In-Reply-To: <CAErODj_hSunpyZug+dbH7rLuBJuUtsnNvjK_4ii=Pwct6W-1mg@mail.gmail.com>
References: <CAErODj_hSunpyZug+dbH7rLuBJuUtsnNvjK_4ii=Pwct6W-1mg@mail.gmail.com>
Message-ID: <B47B8264-D9AA-4776-9E3F-66E22C14CA6A@me.com>


> On Aug 3, 2016, at 3:12 PM, Paul Johnson <pauljohn32 at gmail.com> wrote:
> 
> I have a script that goes wrong because I assumed that seq.int would
> return integers.
> 
> Below please see it does not unless user is super cautious about
> inserting "L" with inputs. I think seq.int should do coercion for me
> before returning the sequence.
> 
>> xx <- seq.int(1,10)
>> class(xx)
> [1] "integer"
>> is.integer(xx)
> [1] TRUE
>> xx <- seq.int(1,10, 2)
>> class(xx)
> [1] "numeric"
>> is.integer(xx)
> [1] FALSE
>> xx <- seq.int(1,10, 2L)
>> class(xx)
> [1] "numeric"
>> is.integer(xx)
> [1] FALSE
>> xx <- seq.int(1L, 10L, 2L)
>> class(xx)
> [1] "integer"
>> is.integer(xx)
> [1] TRUE
> 
> 
> I think all of those should have same return value, if the function is
> correctly named seq.int.


Paul,

?seq.int has the following:

under Details:

"seq.int is an internal generic which dispatches on methods for "seq" based on the class of the first supplied argument (before argument matching)."

and under Value:

"seq.int and the default method of seq for numeric arguments return a vector of type "integer" or "double": programmers should not rely on which."


So:

> is.integer(1)
[1] FALSE

> is.integer(1L)
[1] TRUE

which would seem to explain the behavior that you are observing.

Regards,

Marc Schwartz


From murdoch.duncan at gmail.com  Wed Aug  3 23:19:58 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Wed, 3 Aug 2016 17:19:58 -0400
Subject: [Rd] seq.int does not return a sequence of integers sometimes
In-Reply-To: <CAErODj_hSunpyZug+dbH7rLuBJuUtsnNvjK_4ii=Pwct6W-1mg@mail.gmail.com>
References: <CAErODj_hSunpyZug+dbH7rLuBJuUtsnNvjK_4ii=Pwct6W-1mg@mail.gmail.com>
Message-ID: <79576c75-b370-b00c-5a93-7a8703338f70@gmail.com>

On 03/08/2016 4:12 PM, Paul Johnson wrote:
> I have a script that goes wrong because I assumed that seq.int would
> return integers.

"int" means "internal", not "integer".  Sometimes you should read the 
documentation.

Duncan Murdoch

>
> Below please see it does not unless user is super cautious about
> inserting "L" with inputs. I think seq.int should do coercion for me
> before returning the sequence.
>
>> xx <- seq.int(1,10)
>> class(xx)
> [1] "integer"
>> is.integer(xx)
> [1] TRUE
>> xx <- seq.int(1,10, 2)
>> class(xx)
> [1] "numeric"
>> is.integer(xx)
> [1] FALSE
>> xx <- seq.int(1,10, 2L)
>> class(xx)
> [1] "numeric"
>> is.integer(xx)
> [1] FALSE
>> xx <- seq.int(1L, 10L, 2L)
>> class(xx)
> [1] "integer"
>> is.integer(xx)
> [1] TRUE
>
>
> I think all of those should have same return value, if the function is
> correctly named seq.int.
>


From paul at stat.auckland.ac.nz  Thu Aug  4 03:17:12 2016
From: paul at stat.auckland.ac.nz (Paul Murrell)
Date: Thu, 4 Aug 2016 13:17:12 +1200
Subject: [Rd] [FORGED] Re:  polypath winding rule with transparency
In-Reply-To: <CAAcGz9-oEfbiRmKnUtYRa7p42A539G_DRSSYq2ZbB=wAvFJcpg@mail.gmail.com>
References: <CAAcGz99g-zD9AHSg-6=fgBPMtCOzwykO0YRXa+Yqm4x5QePSJg@mail.gmail.com>
	<CAAcGz9-oEfbiRmKnUtYRa7p42A539G_DRSSYq2ZbB=wAvFJcpg@mail.gmail.com>
Message-ID: <8992e9d3-e0ca-95c1-5a32-85e2bbde0d63@stat.auckland.ac.nz>

Hi

Just to clarify, I think this IS a problem with grid.path() as well as 
polypath().

For the example you give, grid.path() diverts to drawing a polygon 
(because there is no 'id' specified), and the NAs in 'x' generate two 
separate polygons, which get drawn one on top of the other.

The correct analogy to the polypath() example is ...

x2 <- matrix(x[!is.na(x)], ncol=2)
grid.path(x2[,1], x2[,2], id=rep(1:2, each=4),
           rule="winding", gp=gpar(="#BEBEBE80"))

... which produces the same (wrong) result as polypath() on Windows.

Also, the grid.path() result for your example is NOT the same as the 
correct result;  we do NOT want a separate shade for the intersecting 
region when the "winding" fill rule is working correctly.  The fill 
should be the same across the union of the square regions (this is what 
Cairo and PDF on Linux produce).

Another data point:  the problem is NOT just a matter of getting the 
rules round the wrong way in the devWindows.c;  using rule="evenodd" 
produces the SAME result as using rule="winding".

One more data point:  this is not JUST a problem with polypath(). 
Creating a self-intersecting polygon and then drawing it, using 
polygon(), in windows(fillEvenOdd=FALSE) and windows(filleEvenOdd=TRUE) 
produces exactly the same result.

Sadly, none of that helps to explain why the "winding" rule is not 
working on Windows :(

Thanks for reporting the problem - needs more study to find out what is 
going wrong.

Paul

On 03/08/16 18:47, Michael Sumner wrote:
> Hello,
>
> it's probably worth adding that this is not a problem with pathGrob, only
> polypath.
>
> This code is sufficient to demonstrate the problem in Windows.
>
> ## overlapping, both clock-wise
> x <- cbind(c(.1, .1, .6, .6, NA, .4, .4, .9, .9),
>           c(.1, .6, .6, .1, NA, .4, .9, .9, .4))
> ## only a problem on Windows windows() and png()
> plot(x);polypath(x, rule = "winding", col = "#BEBEBE80")
>
> This code shows the same behaviour on different systems/devices.
>
> ## no problem on Windows/Linux/PNG/PDF ...
> library(grid)
> grid.newpage()
> pushViewport(viewport(0.5, 0.5, width = 1, height = 1))
> grid.draw(pathGrob(x[,1], x[,2], rule = "winding", gp = gpar(fill =
> "#BEBEBE80")))
>
> Cheers, Mike.
>
> On Wed, 3 Aug 2016 at 16:24 Michael Sumner <mdsumner at gmail.com> wrote:
>
>> Hi, I see different results in png() and pdf() for polypath() on Windows
>> when using the "winding" rule
>>
>> ## overlapping, both clock-wise
>> x <- cbind(c(.1, .1, .6, .6, NA, .4, .4, .9, .9),
>>           c(.1, .6, .6, .1, NA, .4, .9, .9, .4))
>>
>> pfun <- function() {
>>   plot(x)
>>   polypath(x * 0.8 + 0.2,  rule = "winding", col = "#BEBEBE80")
>>   polypath(x,  rule = "winding", col = "#BEBEBE80")
>> }
>>
>> ## output  "windows.png/pdf" or "unix.png/pdf"
>> label <- .Platform$OS.type
>> png(sprintf("%s.png", label))
>> pfun()
>> dev.off()
>> pdf(sprintf("%s.pdf", label))
>> pfun()
>> dev.off()
>>
>>
>> Visually, the result in the "windows.png" file is as if the "evenodd" rule
>> was specified. All other examples unix.pdf, unix.png, windows.pdf give me
>> the expected result - which is "all bounded regions shaded grey, with two
>> tones for the different regions of overlap". The unexpected result is the
>> completely transparent region.
>>
>> Is this a known/expected difference on Windows?  I see the unexpected
>> result in 3.3.1 and in R version 3.3.1 Patched (2016-07-27 r70991) on
>> Windows.
>>
>> Cheers, Mike.
>> --
>> Dr. Michael Sumner
>> Software and Database Engineer
>> Australian Antarctic Division
>> 203 Channel Highway
>> Kingston Tasmania 7050 Australia
>>
>> --
> Dr. Michael Sumner
> Software and Database Engineer
> Australian Antarctic Division
> 203 Channel Highway
> Kingston Tasmania 7050 Australia
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From mdsumner at gmail.com  Thu Aug  4 09:52:58 2016
From: mdsumner at gmail.com (Michael Sumner)
Date: Thu, 4 Aug 2016 07:52:58 +0000
Subject: [Rd] [FORGED] Re:  polypath winding rule with transparency
In-Reply-To: <8992e9d3-e0ca-95c1-5a32-85e2bbde0d63@stat.auckland.ac.nz>
References: <CAAcGz99g-zD9AHSg-6=fgBPMtCOzwykO0YRXa+Yqm4x5QePSJg@mail.gmail.com>
	<CAAcGz9-oEfbiRmKnUtYRa7p42A539G_DRSSYq2ZbB=wAvFJcpg@mail.gmail.com>
	<8992e9d3-e0ca-95c1-5a32-85e2bbde0d63@stat.auckland.ac.nz>
Message-ID: <CAAcGz9-1VEYUF=YsaxKkKDw4-NRRUXCQ_6WUeR0G16VNsfvGFg@mail.gmail.com>

On Thu, 4 Aug 2016 at 11:17 Paul Murrell <paul at stat.auckland.ac.nz> wrote:

> Hi
>
> Just to clarify, I think this IS a problem with grid.path() as well as
> polypath().
>
>
Hi, oh dear - sorry about that

I appreciate the deeper explanation, I knew about the id aspect in grid,
but just forgot in my haste.

I'll be more careful with examples if I find any more clues.

Cheers, Mike.


> For the example you give, grid.path() diverts to drawing a polygon
> (because there is no 'id' specified), and the NAs in 'x' generate two
> separate polygons, which get drawn one on top of the other.
>
> The correct analogy to the polypath() example is ...
>
> x2 <- matrix(x[!is.na(x)], ncol=2)
> grid.path(x2[,1], x2[,2], id=rep(1:2, each=4),
>            rule="winding", gp=gpar(="#BEBEBE80"))
>
> ... which produces the same (wrong) result as polypath() on Windows.
>
> Also, the grid.path() result for your example is NOT the same as the
> correct result;  we do NOT want a separate shade for the intersecting
> region when the "winding" fill rule is working correctly.  The fill
> should be the same across the union of the square regions (this is what
> Cairo and PDF on Linux produce).
>
> Another data point:  the problem is NOT just a matter of getting the
> rules round the wrong way in the devWindows.c;  using rule="evenodd"
> produces the SAME result as using rule="winding".
>
> One more data point:  this is not JUST a problem with polypath().
> Creating a self-intersecting polygon and then drawing it, using
> polygon(), in windows(fillEvenOdd=FALSE) and windows(filleEvenOdd=TRUE)
> produces exactly the same result.
>
> Sadly, none of that helps to explain why the "winding" rule is not
> working on Windows :(
>
> Thanks for reporting the problem - needs more study to find out what is
> going wrong.
>
> Paul
>
> On 03/08/16 18:47, Michael Sumner wrote:
> > Hello,
> >
> > it's probably worth adding that this is not a problem with pathGrob, only
> > polypath.
> >
> > This code is sufficient to demonstrate the problem in Windows.
> >
> > ## overlapping, both clock-wise
> > x <- cbind(c(.1, .1, .6, .6, NA, .4, .4, .9, .9),
> >           c(.1, .6, .6, .1, NA, .4, .9, .9, .4))
> > ## only a problem on Windows windows() and png()
> > plot(x);polypath(x, rule = "winding", col = "#BEBEBE80")
> >
> > This code shows the same behaviour on different systems/devices.
> >
> > ## no problem on Windows/Linux/PNG/PDF ...
> > library(grid)
> > grid.newpage()
> > pushViewport(viewport(0.5, 0.5, width = 1, height = 1))
> > grid.draw(pathGrob(x[,1], x[,2], rule = "winding", gp = gpar(fill =
> > "#BEBEBE80")))
> >
> > Cheers, Mike.
> >
> > On Wed, 3 Aug 2016 at 16:24 Michael Sumner <mdsumner at gmail.com> wrote:
> >
> >> Hi, I see different results in png() and pdf() for polypath() on Windows
> >> when using the "winding" rule
> >>
> >> ## overlapping, both clock-wise
> >> x <- cbind(c(.1, .1, .6, .6, NA, .4, .4, .9, .9),
> >>           c(.1, .6, .6, .1, NA, .4, .9, .9, .4))
> >>
> >> pfun <- function() {
> >>   plot(x)
> >>   polypath(x * 0.8 + 0.2,  rule = "winding", col = "#BEBEBE80")
> >>   polypath(x,  rule = "winding", col = "#BEBEBE80")
> >> }
> >>
> >> ## output  "windows.png/pdf" or "unix.png/pdf"
> >> label <- .Platform$OS.type
> >> png(sprintf("%s.png", label))
> >> pfun()
> >> dev.off()
> >> pdf(sprintf("%s.pdf", label))
> >> pfun()
> >> dev.off()
> >>
> >>
> >> Visually, the result in the "windows.png" file is as if the "evenodd"
> rule
> >> was specified. All other examples unix.pdf, unix.png, windows.pdf give
> me
> >> the expected result - which is "all bounded regions shaded grey, with
> two
> >> tones for the different regions of overlap". The unexpected result is
> the
> >> completely transparent region.
> >>
> >> Is this a known/expected difference on Windows?  I see the unexpected
> >> result in 3.3.1 and in R version 3.3.1 Patched (2016-07-27 r70991) on
> >> Windows.
> >>
> >> Cheers, Mike.
> >> --
> >> Dr. Michael Sumner
> >> Software and Database Engineer
> >> Australian Antarctic Division
> >> 203 Channel Highway
> >> Kingston Tasmania 7050 Australia
> >>
> >> --
> > Dr. Michael Sumner
> > Software and Database Engineer
> > Australian Antarctic Division
> > 203 Channel Highway
> > Kingston Tasmania 7050 Australia
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Dr Paul Murrell
> Department of Statistics
> The University of Auckland
> Private Bag 92019
> Auckland
> New Zealand
> 64 9 3737599 x85392
> paul at stat.auckland.ac.nz
> http://www.stat.auckland.ac.nz/~paul/
>
-- 
Dr. Michael Sumner
Software and Database Engineer
Australian Antarctic Division
203 Channel Highway
Kingston Tasmania 7050 Australia

	[[alternative HTML version deleted]]


From wdunlap at tibco.com  Fri Aug  5 00:20:57 2016
From: wdunlap at tibco.com (William Dunlap)
Date: Thu, 4 Aug 2016 15:20:57 -0700
Subject: [Rd] findInterval(all.inside=TRUE) for degenerate 'vec' arguments
Message-ID: <CAF8bMcbGorHL_zf=M1x7cyMGC5-KnRsHPg+753CpohFx9CU5xA@mail.gmail.com>

What should findInterval(x,vec,all.inside=TRUE) return when length(vec)<=1,
so there are no inside intervals?

R-3.3.0 gives a decreasing map of x->output when length(vec)==1 and -1's
when length(vec)==0.  Would '0' in all those cases be better?

> findInterval(x=c(10, 11, 12), vec=11, all.inside=TRUE,
rightmost.closed=FALSE, left.open=FALSE)
[1] 1 0 0
> findInterval(x=c(10, 11, 12), vec=11, all.inside=TRUE,
rightmost.closed=FALSE, left.open=TRUE)
[1] 1 1 0
> findInterval(x=c(10, 11, 12), vec=11, all.inside=TRUE,
rightmost.closed=TRUE, left.open=FALSE)
[1] 1 0 0
> findInterval(x=c(10, 11, 12), vec=11, all.inside=TRUE,
rightmost.closed=TRUE, left.open=TRUE)
[1] 1 1 0
>
> findInterval(x=c(10, 11, 12), vec=numeric(), all.inside=TRUE,
rightmost.closed=FALSE, left.open=FALSE)
[1] -1 -1 -1
> findInterval(x=c(10, 11, 12), vec=numeric(), all.inside=TRUE,
rightmost.closed=FALSE, left.open=TRUE)
[1] -1 -1 -1
> findInterval(x=c(10, 11, 12), vec=numeric(), all.inside=TRUE,
rightmost.closed=TRUE, left.open=FALSE)
[1] -1 -1 -1
> findInterval(x=c(10, 11, 12), vec=numeric(), all.inside=TRUE,
rightmost.closed=TRUE, left.open=TRUE)
[1] -1 -1 -1

Bill Dunlap
TIBCO Software
wdunlap tibco.com

	[[alternative HTML version deleted]]


From ajskim at gmail.com  Fri Aug  5 06:41:59 2016
From: ajskim at gmail.com (Andrew Judson)
Date: Thu, 4 Aug 2016 21:41:59 -0700
Subject: [Rd] What happened to Ross Ihaka's proposal for a Common Lisp based
	R successor?
Message-ID: <CAC+g_xGEPD5N-jmjX3dZvrrukFJ8W36YsDmJk_McY2TimMK_SQ@mail.gmail.com>

I read this paper
<https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf> and
haven't been able to find out what happened - I have seen some sporadic
mention in message groups but nothing definitive. Does anyone know?

	[[alternative HTML version deleted]]


From pdalgd at gmail.com  Fri Aug  5 13:49:19 2016
From: pdalgd at gmail.com (peter dalgaard)
Date: Fri, 5 Aug 2016 13:49:19 +0200
Subject: [Rd] What happened to Ross Ihaka's proposal for a Common Lisp
	based R successor?
In-Reply-To: <CAC+g_xGEPD5N-jmjX3dZvrrukFJ8W36YsDmJk_McY2TimMK_SQ@mail.gmail.com>
References: <CAC+g_xGEPD5N-jmjX3dZvrrukFJ8W36YsDmJk_McY2TimMK_SQ@mail.gmail.com>
Message-ID: <8B14D041-84B7-4BA1-B122-3895ECAC0232@gmail.com>


On 05 Aug 2016, at 06:41 , Andrew Judson <ajskim at gmail.com> wrote:

> I read this paper
> <https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf> and
> haven't been able to find out what happened - I have seen some sporadic
> mention in message groups but nothing definitive. Does anyone know?

Presumably Ross does...

You get a hint if you go one level up and look for the newest file:

https://www.stat.auckland.ac.nz/~ihaka/downloads/New-System.pdf


-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From kmbell56 at gmail.com  Fri Aug  5 17:48:25 2016
From: kmbell56 at gmail.com (Kenny Bell)
Date: Fri, 05 Aug 2016 15:48:25 +0000
Subject: [Rd] What happened to Ross Ihaka's proposal for a Common Lisp
 based R successor?
In-Reply-To: <8B14D041-84B7-4BA1-B122-3895ECAC0232@gmail.com>
References: <CAC+g_xGEPD5N-jmjX3dZvrrukFJ8W36YsDmJk_McY2TimMK_SQ@mail.gmail.com>
	<8B14D041-84B7-4BA1-B122-3895ECAC0232@gmail.com>
Message-ID: <CAPekMCkJ5nC9NmewQ=9PQSQStg6gk1LQxoto2gOOmTLPxW80WA@mail.gmail.com>

Why is the described system preferable to Julia?

On Fri, Aug 5, 2016, 4:50 AM peter dalgaard <pdalgd at gmail.com> wrote:

>
> On 05 Aug 2016, at 06:41 , Andrew Judson <ajskim at gmail.com> wrote:
>
> > I read this paper
> > <https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf> and
> > haven't been able to find out what happened - I have seen some sporadic
> > mention in message groups but nothing definitive. Does anyone know?
>
> Presumably Ross does...
>
> You get a hint if you go one level up and look for the newest file:
>
> https://www.stat.auckland.ac.nz/~ihaka/downloads/New-System.pdf
>
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From maechler at stat.math.ethz.ch  Fri Aug  5 17:53:25 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 5 Aug 2016 17:53:25 +0200
Subject: [Rd] findInterval(all.inside=TRUE) for degenerate 'vec'
	arguments
In-Reply-To: <CAF8bMcbGorHL_zf=M1x7cyMGC5-KnRsHPg+753CpohFx9CU5xA@mail.gmail.com>
References: <CAF8bMcbGorHL_zf=M1x7cyMGC5-KnRsHPg+753CpohFx9CU5xA@mail.gmail.com>
Message-ID: <22436.46709.943556.772466@stat.math.ethz.ch>

>>>>> William Dunlap via R-devel <r-devel at r-project.org>
>>>>>     on Thu, 4 Aug 2016 15:20:57 -0700 writes:

    > What should findInterval(x,vec,all.inside=TRUE) return when length(vec)<=1,
    > so there are no inside intervals?

    > R-3.3.0 gives a decreasing map of x->output when length(vec)==1 and -1's
    > when length(vec)==0.  Would '0' in all those cases be better?

Yes.  '0' would be according to the documentation,
and if you dig all the way down to the C part
(originally created via f2c (!)),
you'll notice that the -1
are really  from  'n - 1'  where n == 0 here ... a case that was
not even possible in the very original (Fortran!) code.

I'll commit a fix to the source
Martin

--
Martin Maechler
ETH Zurich /  R Core Team


    >> findInterval(x=c(10, 11, 12), vec=11, all.inside=TRUE,
    > rightmost.closed=FALSE, left.open=FALSE)
    > [1] 1 0 0
    >> findInterval(x=c(10, 11, 12), vec=11, all.inside=TRUE,
    > rightmost.closed=FALSE, left.open=TRUE)
    > [1] 1 1 0
    >> findInterval(x=c(10, 11, 12), vec=11, all.inside=TRUE,
    > rightmost.closed=TRUE, left.open=FALSE)
    > [1] 1 0 0
    >> findInterval(x=c(10, 11, 12), vec=11, all.inside=TRUE,
    > rightmost.closed=TRUE, left.open=TRUE)
    > [1] 1 1 0
    >> 
    >> findInterval(x=c(10, 11, 12), vec=numeric(), all.inside=TRUE,
    > rightmost.closed=FALSE, left.open=FALSE)
    > [1] -1 -1 -1
    >> findInterval(x=c(10, 11, 12), vec=numeric(), all.inside=TRUE,
    > rightmost.closed=FALSE, left.open=TRUE)
    > [1] -1 -1 -1
    >> findInterval(x=c(10, 11, 12), vec=numeric(), all.inside=TRUE,
    > rightmost.closed=TRUE, left.open=FALSE)
    > [1] -1 -1 -1
    >> findInterval(x=c(10, 11, 12), vec=numeric(), all.inside=TRUE,
    > rightmost.closed=TRUE, left.open=TRUE)
    > [1] -1 -1 -1

    > Bill Dunlap
    > TIBCO Software
    > wdunlap tibco.com

    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From h.wickham at gmail.com  Fri Aug  5 17:59:54 2016
From: h.wickham at gmail.com (Hadley Wickham)
Date: Fri, 5 Aug 2016 10:59:54 -0500
Subject: [Rd] What happened to Ross Ihaka's proposal for a Common Lisp
 based R successor?
In-Reply-To: <CAPekMCkJ5nC9NmewQ=9PQSQStg6gk1LQxoto2gOOmTLPxW80WA@mail.gmail.com>
References: <CAC+g_xGEPD5N-jmjX3dZvrrukFJ8W36YsDmJk_McY2TimMK_SQ@mail.gmail.com>
	<8B14D041-84B7-4BA1-B122-3895ECAC0232@gmail.com>
	<CAPekMCkJ5nC9NmewQ=9PQSQStg6gk1LQxoto2gOOmTLPxW80WA@mail.gmail.com>
Message-ID: <CABdHhvGbn77VHnN0Y3W_msH7rabEzoPYmCNT21fObx3bn027MA@mail.gmail.com>

When it was being actively worked on, it had the advantage of existing.

Hadley

On Fri, Aug 5, 2016 at 10:48 AM, Kenny Bell <kmbell56 at gmail.com> wrote:
> Why is the described system preferable to Julia?
>
> On Fri, Aug 5, 2016, 4:50 AM peter dalgaard <pdalgd at gmail.com> wrote:
>
>>
>> On 05 Aug 2016, at 06:41 , Andrew Judson <ajskim at gmail.com> wrote:
>>
>> > I read this paper
>> > <https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf> and
>> > haven't been able to find out what happened - I have seen some sporadic
>> > mention in message groups but nothing definitive. Does anyone know?
>>
>> Presumably Ross does...
>>
>> You get a hint if you go one level up and look for the newest file:
>>
>> https://www.stat.auckland.ac.nz/~ihaka/downloads/New-System.pdf
>>
>>
>> --
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
http://hadley.nz


From kmbell56 at gmail.com  Fri Aug  5 18:12:07 2016
From: kmbell56 at gmail.com (Kenny Bell)
Date: Fri, 05 Aug 2016 16:12:07 +0000
Subject: [Rd] What happened to Ross Ihaka's proposal for a Common Lisp
 based R successor?
In-Reply-To: <CABdHhvGbn77VHnN0Y3W_msH7rabEzoPYmCNT21fObx3bn027MA@mail.gmail.com>
References: <CAC+g_xGEPD5N-jmjX3dZvrrukFJ8W36YsDmJk_McY2TimMK_SQ@mail.gmail.com>
	<8B14D041-84B7-4BA1-B122-3895ECAC0232@gmail.com>
	<CAPekMCkJ5nC9NmewQ=9PQSQStg6gk1LQxoto2gOOmTLPxW80WA@mail.gmail.com>
	<CABdHhvGbn77VHnN0Y3W_msH7rabEzoPYmCNT21fObx3bn027MA@mail.gmail.com>
Message-ID: <CAPekMC=RG1F2Oc4Mza4s+UNjEVyW4kG4OO+=aEV2_jWSkRDqhg@mail.gmail.com>

Is it conceivable that Julia could be ported to use R syntax in a way that
would allow the vastly larger numbers of R programmers to seamlessly
switch? Or equivalently, could an iteration of R itself do this?

On Fri, Aug 5, 2016, 9:00 AM Hadley Wickham <h.wickham at gmail.com> wrote:

> When it was being actively worked on, it had the advantage of existing.
>
> Hadley
>
> On Fri, Aug 5, 2016 at 10:48 AM, Kenny Bell <kmbell56 at gmail.com> wrote:
> > Why is the described system preferable to Julia?
> >
> > On Fri, Aug 5, 2016, 4:50 AM peter dalgaard <pdalgd at gmail.com> wrote:
> >
> >>
> >> On 05 Aug 2016, at 06:41 , Andrew Judson <ajskim at gmail.com> wrote:
> >>
> >> > I read this paper
> >> > <https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf>
> and
> >> > haven't been able to find out what happened - I have seen some
> sporadic
> >> > mention in message groups but nothing definitive. Does anyone know?
> >>
> >> Presumably Ross does...
> >>
> >> You get a hint if you go one level up and look for the newest file:
> >>
> >> https://www.stat.auckland.ac.nz/~ihaka/downloads/New-System.pdf
> >>
> >>
> >> --
> >> Peter Dalgaard, Professor,
> >> Center for Statistics, Copenhagen Business School
> >> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> >> Phone: (+45)38153501
> >> Office: A 4.23
> >> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> http://hadley.nz
>

	[[alternative HTML version deleted]]


From winstonchang1 at gmail.com  Fri Aug  5 18:14:40 2016
From: winstonchang1 at gmail.com (Winston Chang)
Date: Fri, 5 Aug 2016 11:14:40 -0500
Subject: [Rd] Extra copies of objects in environments when using $ operator?
Message-ID: <CAFOpNVE1=WeyQ-PN8hsafVwd7kVtkLubfdkxZhMmU7Ss-X++cQ@mail.gmail.com>

My understanding is that R will not make copies of lists if there is
only one reference to the object. However, I've encountered a case
where R does make copies, even though (I think) there should be only
one reference to the object. I hope that someone could shed some light
on why this is happening.

I'll start with a simple example. Below, x is a list with one element,
and changing that element doesn't result in a copy. (We know this
because nothing is printed when we do the assignment after the
tracemem call.) This is as expected.
  x <- list(1)
  tracemem(x)
  # [1] "<0x1149e08f8>"
  x[[1]] <- 2
  # (No output)

Similarly, modifying a list contained in a list doesn't result in a copy:
  e <- list(x = list(1))
  tracemem(e$x)
  # [1] "<0x11b3a4b38>"
  e$x[[1]] <- 2
  # (No output)

However, modifying a list contained in an environment *does* result in
a copy -- tracemem prints out some info when we do the assignment:
  e <- new.env(parent = emptyenv())
  e$x <- list(1)
  tracemem(e$x)
  # [1] "<0x1148c1708>"
  e$x[[1]] <- 2
  # tracemem[0x1148c1708 -> 0x11b2fc1b8]:


This is surprising to me. Why is a copy made in this case? It also
results in slower performance for these situations.

The most that I've been able to figure out is that it probably has
something to do with how the $ operator works with environments (but
not with lists). If you do the same operations without the $ operator,
by evaluating code in environment e, then no copy is made:

  e <- new.env(parent = globalenv())
  eval(quote({
    x <- list(1)
    tracemem(x)
    x[[1]] <- 2
  }), envir = e)
  # (No output)


I'd appreciate it if someone could shed light on this. And if it's a
bug, that would be good to know too.

-Winston


From luke-tierney at uiowa.edu  Fri Aug  5 18:59:40 2016
From: luke-tierney at uiowa.edu (luke-tierney at uiowa.edu)
Date: Fri, 5 Aug 2016 11:59:40 -0500
Subject: [Rd] Extra copies of objects in environments when using $
 operator?
In-Reply-To: <CAFOpNVE1=WeyQ-PN8hsafVwd7kVtkLubfdkxZhMmU7Ss-X++cQ@mail.gmail.com>
References: <CAFOpNVE1=WeyQ-PN8hsafVwd7kVtkLubfdkxZhMmU7Ss-X++cQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.10.1608051127550.2874@luke-Latitude>

On Fri, 5 Aug 2016, Winston Chang wrote:

> My understanding is that R will not make copies of lists if there is
> only one reference to the object. However, I've encountered a case
> where R does make copies, even though (I think) there should be only
> one reference to the object. I hope that someone could shed some light
> on why this is happening.
>
> I'll start with a simple example. Below, x is a list with one element,
> and changing that element doesn't result in a copy. (We know this
> because nothing is printed when we do the assignment after the
> tracemem call.) This is as expected.
>  x <- list(1)
>  tracemem(x)
>  # [1] "<0x1149e08f8>"
>  x[[1]] <- 2
>  # (No output)
>
> Similarly, modifying a list contained in a list doesn't result in a copy:
>  e <- list(x = list(1))
>  tracemem(e$x)
>  # [1] "<0x11b3a4b38>"
>  e$x[[1]] <- 2
>  # (No output)
>
> However, modifying a list contained in an environment *does* result in
> a copy -- tracemem prints out some info when we do the assignment:
>  e <- new.env(parent = emptyenv())
>  e$x <- list(1)
>  tracemem(e$x)
>  # [1] "<0x1148c1708>"
>  e$x[[1]] <- 2
>  # tracemem[0x1148c1708 -> 0x11b2fc1b8]:

Currently e$x marks values as immutable if they have any references by
setting NAMED to 2. You can see this with

> e <- new.env(parent = emptyenv())
> e$x <- list(1)
> .Internal(inspect(e))
@30b2498 04 ENVSXP g0c0 [NAM(1)] <0x30b2498>
ENCLOS:
   @2600e98 04 ENVSXP g0c0 [MARK,NAM(2)] <R_EmptyEnv>
HASHTAB:
   @2e41540 19 VECSXP g0c7 [] (len=29, tl=1)
     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
     @30b3370 02 LISTSXP g0c0 []
       TAG: @2637870 01 SYMSXP g0c0 [MARK,NAM(2)] "x"
       @3569488 19 VECSXP g0c1 [NAM(1)] (len=1, tl=0)   ## <--- NAM = 1
       @35694e8 14 REALSXP g0c1 [NAM(2)] (len=1, tl=0) 1
     ...
> e$x
[[1]]
[1] 1

> .Internal(inspect(e))
@30b2498 04 ENVSXP g0c0 [NAM(1)] <0x30b2498>
ENCLOS:
   @2600e98 04 ENVSXP g0c0 [MARK,NAM(2)] <R_EmptyEnv>
HASHTAB:
   @2e41540 19 VECSXP g0c7 [] (len=29, tl=1)
     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
     @30b3370 02 LISTSXP g0c0 []
       TAG: @2637870 01 SYMSXP g0c0 [MARK,NAM(2)] "x"
       @3569488 19 VECSXP g0c1 [NAM(2)] (len=1, tl=0)   ## <--- NAM = 2
       @35694e8 14 REALSXP g0c1 [NAM(2)] (len=1, tl=0) 1
     ...

It is not clear if this is needed or just done in an abundance of
caution. If R is built to use reference counting for determining
sharing information this does not happen, so this is likely to change
and not force a copy by 3.4.0.

Best,

luke

> This is surprising to me. Why is a copy made in this case? It also
> results in slower performance for these situations.
>
> The most that I've been able to figure out is that it probably has
> something to do with how the $ operator works with environments (but
> not with lists). If you do the same operations without the $ operator,
> by evaluating code in environment e, then no copy is made:
>
>  e <- new.env(parent = globalenv())
>  eval(quote({
>    x <- list(1)
>    tracemem(x)
>    x[[1]] <- 2
>  }), envir = e)
>  # (No output)
>
>
> I'd appreciate it if someone could shed light on this. And if it's a
> bug, that would be good to know too.
>
> -Winston
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From h.wickham at gmail.com  Fri Aug  5 19:24:03 2016
From: h.wickham at gmail.com (Hadley Wickham)
Date: Fri, 5 Aug 2016 12:24:03 -0500
Subject: [Rd] What happened to Ross Ihaka's proposal for a Common Lisp
 based R successor?
In-Reply-To: <CAPekMC=RG1F2Oc4Mza4s+UNjEVyW4kG4OO+=aEV2_jWSkRDqhg@mail.gmail.com>
References: <CAC+g_xGEPD5N-jmjX3dZvrrukFJ8W36YsDmJk_McY2TimMK_SQ@mail.gmail.com>
	<8B14D041-84B7-4BA1-B122-3895ECAC0232@gmail.com>
	<CAPekMCkJ5nC9NmewQ=9PQSQStg6gk1LQxoto2gOOmTLPxW80WA@mail.gmail.com>
	<CABdHhvGbn77VHnN0Y3W_msH7rabEzoPYmCNT21fObx3bn027MA@mail.gmail.com>
	<CAPekMC=RG1F2Oc4Mza4s+UNjEVyW4kG4OO+=aEV2_jWSkRDqhg@mail.gmail.com>
Message-ID: <CABdHhvGz4SBOY7xgLqsvD0zgvRFjxm0ra22TmB2AWq5RHF=P2A@mail.gmail.com>

No.

Hadley

On Fri, Aug 5, 2016 at 11:12 AM, Kenny Bell <kmbell56 at gmail.com> wrote:
> Is it conceivable that Julia could be ported to use R syntax in a way that
> would allow the vastly larger numbers of R programmers to seamlessly switch?
> Or equivalently, could an iteration of R itself do this?
>
>
> On Fri, Aug 5, 2016, 9:00 AM Hadley Wickham <h.wickham at gmail.com> wrote:
>>
>> When it was being actively worked on, it had the advantage of existing.
>>
>> Hadley
>>
>> On Fri, Aug 5, 2016 at 10:48 AM, Kenny Bell <kmbell56 at gmail.com> wrote:
>> > Why is the described system preferable to Julia?
>> >
>> > On Fri, Aug 5, 2016, 4:50 AM peter dalgaard <pdalgd at gmail.com> wrote:
>> >
>> >>
>> >> On 05 Aug 2016, at 06:41 , Andrew Judson <ajskim at gmail.com> wrote:
>> >>
>> >> > I read this paper
>> >> > <https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-2008.pdf>
>> >> > and
>> >> > haven't been able to find out what happened - I have seen some
>> >> > sporadic
>> >> > mention in message groups but nothing definitive. Does anyone know?
>> >>
>> >> Presumably Ross does...
>> >>
>> >> You get a hint if you go one level up and look for the newest file:
>> >>
>> >> https://www.stat.auckland.ac.nz/~ihaka/downloads/New-System.pdf
>> >>
>> >>
>> >> --
>> >> Peter Dalgaard, Professor,
>> >> Center for Statistics, Copenhagen Business School
>> >> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> >> Phone: (+45)38153501
>> >> Office: A 4.23
>> >> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>> >>
>> >> ______________________________________________
>> >> R-devel at r-project.org mailing list
>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> >>
>> >
>> >         [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>>
>> --
>> http://hadley.nz



-- 
http://hadley.nz


From winstonchang1 at gmail.com  Fri Aug  5 19:27:57 2016
From: winstonchang1 at gmail.com (Winston Chang)
Date: Fri, 5 Aug 2016 12:27:57 -0500
Subject: [Rd] Extra copies of objects in environments when using $
	operator?
In-Reply-To: <alpine.DEB.2.10.1608051127550.2874@luke-Latitude>
References: <CAFOpNVE1=WeyQ-PN8hsafVwd7kVtkLubfdkxZhMmU7Ss-X++cQ@mail.gmail.com>
	<alpine.DEB.2.10.1608051127550.2874@luke-Latitude>
Message-ID: <CAFOpNVF7d=785BC9_8p2w2p2XXwqXh27gd7DgRrHYWZOQ-Ke6A@mail.gmail.com>

>
>
>> However, modifying a list contained in an environment *does* result in
>> a copy -- tracemem prints out some info when we do the assignment:
>>  e <- new.env(parent = emptyenv())
>>  e$x <- list(1)
>>  tracemem(e$x)
>>  # [1] "<0x1148c1708>"
>>  e$x[[1]] <- 2
>>  # tracemem[0x1148c1708 -> 0x11b2fc1b8]:
>>
>
> Currently e$x marks values as immutable if they have any references by
> setting NAMED to 2. You can see this with
>
> e <- new.env(parent = emptyenv())
>> e$x <- list(1)
>> .Internal(inspect(e))
>>
> @30b2498 04 ENVSXP g0c0 [NAM(1)] <0x30b2498>
> ENCLOS:
>   @2600e98 04 ENVSXP g0c0 [MARK,NAM(2)] <R_EmptyEnv>
> HASHTAB:
>   @2e41540 19 VECSXP g0c7 [] (len=29, tl=1)
>     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
>     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
>     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
>     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
>     @30b3370 02 LISTSXP g0c0 []
>       TAG: @2637870 01 SYMSXP g0c0 [MARK,NAM(2)] "x"
>       @3569488 19 VECSXP g0c1 [NAM(1)] (len=1, tl=0)   ## <--- NAM = 1
>       @35694e8 14 REALSXP g0c1 [NAM(2)] (len=1, tl=0) 1
>     ...
>
>> e$x
>>
> [[1]]
> [1] 1
>
> .Internal(inspect(e))
>>
> @30b2498 04 ENVSXP g0c0 [NAM(1)] <0x30b2498>
> ENCLOS:
>   @2600e98 04 ENVSXP g0c0 [MARK,NAM(2)] <R_EmptyEnv>
> HASHTAB:
>   @2e41540 19 VECSXP g0c7 [] (len=29, tl=1)
>     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
>     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
>     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
>     @25c9628 00 NILSXP g0c0 [MARK,NAM(2)]
>     @30b3370 02 LISTSXP g0c0 []
>       TAG: @2637870 01 SYMSXP g0c0 [MARK,NAM(2)] "x"
>       @3569488 19 VECSXP g0c1 [NAM(2)] (len=1, tl=0)   ## <--- NAM = 2
>       @35694e8 14 REALSXP g0c1 [NAM(2)] (len=1, tl=0) 1
>     ...
>
> It is not clear if this is needed or just done in an abundance of
> caution. If R is built to use reference counting for determining
> sharing information this does not happen, so this is likely to change
> and not force a copy by 3.4.0.
>

Excellent, that's great to hear!

-Winston

	[[alternative HTML version deleted]]


From istazahn at gmail.com  Fri Aug  5 19:39:54 2016
From: istazahn at gmail.com (Ista Zahn)
Date: Fri, 5 Aug 2016 13:39:54 -0400
Subject: [Rd] What happened to Ross Ihaka's proposal for a Common Lisp
 based R successor?
In-Reply-To: <CABdHhvGz4SBOY7xgLqsvD0zgvRFjxm0ra22TmB2AWq5RHF=P2A@mail.gmail.com>
References: <CAC+g_xGEPD5N-jmjX3dZvrrukFJ8W36YsDmJk_McY2TimMK_SQ@mail.gmail.com>
	<8B14D041-84B7-4BA1-B122-3895ECAC0232@gmail.com>
	<CAPekMCkJ5nC9NmewQ=9PQSQStg6gk1LQxoto2gOOmTLPxW80WA@mail.gmail.com>
	<CABdHhvGbn77VHnN0Y3W_msH7rabEzoPYmCNT21fObx3bn027MA@mail.gmail.com>
	<CAPekMC=RG1F2Oc4Mza4s+UNjEVyW4kG4OO+=aEV2_jWSkRDqhg@mail.gmail.com>
	<CABdHhvGz4SBOY7xgLqsvD0zgvRFjxm0ra22TmB2AWq5RHF=P2A@mail.gmail.com>
Message-ID: <CA+vqiLH0oLJxJaApVAdUadwJLb2ir0WMvfcP+AF1_LgNKKCtjA@mail.gmail.com>

But you can easily fall back to R from within Julia; see
http://juliastats.github.io/RCall.jl/latest/

On Aug 5, 2016 1:27 PM, "Hadley Wickham" <h.wickham at gmail.com> wrote:

> No.
>
> Hadley
>
> On Fri, Aug 5, 2016 at 11:12 AM, Kenny Bell <kmbell56 at gmail.com> wrote:
> > Is it conceivable that Julia could be ported to use R syntax in a way
> that
> > would allow the vastly larger numbers of R programmers to seamlessly
> switch?
> > Or equivalently, could an iteration of R itself do this?
> >
> >
> > On Fri, Aug 5, 2016, 9:00 AM Hadley Wickham <h.wickham at gmail.com> wrote:
> >>
> >> When it was being actively worked on, it had the advantage of existing.
> >>
> >> Hadley
> >>
> >> On Fri, Aug 5, 2016 at 10:48 AM, Kenny Bell <kmbell56 at gmail.com> wrote:
> >> > Why is the described system preferable to Julia?
> >> >
> >> > On Fri, Aug 5, 2016, 4:50 AM peter dalgaard <pdalgd at gmail.com> wrote:
> >> >
> >> >>
> >> >> On 05 Aug 2016, at 06:41 , Andrew Judson <ajskim at gmail.com> wrote:
> >> >>
> >> >> > I read this paper
> >> >> > <https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-
> 2008.pdf>
> >> >> > and
> >> >> > haven't been able to find out what happened - I have seen some
> >> >> > sporadic
> >> >> > mention in message groups but nothing definitive. Does anyone know?
> >> >>
> >> >> Presumably Ross does...
> >> >>
> >> >> You get a hint if you go one level up and look for the newest file:
> >> >>
> >> >> https://www.stat.auckland.ac.nz/~ihaka/downloads/New-System.pdf
> >> >>
> >> >>
> >> >> --
> >> >> Peter Dalgaard, Professor,
> >> >> Center for Statistics, Copenhagen Business School
> >> >> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> >> >> Phone: (+45)38153501
> >> >> Office: A 4.23
> >> >> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> >> >>
> >> >> ______________________________________________
> >> >> R-devel at r-project.org mailing list
> >> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >> >>
> >> >
> >> >         [[alternative HTML version deleted]]
> >> >
> >> > ______________________________________________
> >> > R-devel at r-project.org mailing list
> >> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >>
> >>
> >> --
> >> http://hadley.nz
>
>
>
> --
> http://hadley.nz
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tkeitt at utexas.edu  Fri Aug  5 20:38:13 2016
From: tkeitt at utexas.edu (Tim Keitt)
Date: Fri, 05 Aug 2016 18:38:13 +0000
Subject: [Rd] What happened to Ross Ihaka's proposal for a Common Lisp
 based R successor?
In-Reply-To: <CA+vqiLH0oLJxJaApVAdUadwJLb2ir0WMvfcP+AF1_LgNKKCtjA@mail.gmail.com>
References: <CAC+g_xGEPD5N-jmjX3dZvrrukFJ8W36YsDmJk_McY2TimMK_SQ@mail.gmail.com>
	<8B14D041-84B7-4BA1-B122-3895ECAC0232@gmail.com>
	<CAPekMCkJ5nC9NmewQ=9PQSQStg6gk1LQxoto2gOOmTLPxW80WA@mail.gmail.com>
	<CABdHhvGbn77VHnN0Y3W_msH7rabEzoPYmCNT21fObx3bn027MA@mail.gmail.com>
	<CAPekMC=RG1F2Oc4Mza4s+UNjEVyW4kG4OO+=aEV2_jWSkRDqhg@mail.gmail.com>
	<CABdHhvGz4SBOY7xgLqsvD0zgvRFjxm0ra22TmB2AWq5RHF=P2A@mail.gmail.com>
	<CA+vqiLH0oLJxJaApVAdUadwJLb2ir0WMvfcP+AF1_LgNKKCtjA@mail.gmail.com>
Message-ID: <CANnL8gpy08eT1TvKkxWw-ons3Bf3ouHh1biUSGHU6W6+oSc8ZA@mail.gmail.com>

My latest project in R + Rcpp + RcppParallel + RcppEigen ran so fast when I
tested it, I thought it was a short-circuit. Not as clean as pure Julia but
if you like C++ its a pretty sweet environment.

(Incidentally, several of the ideas in Julia came from a discussion about
rewriting R I had with Viral many years ago. Its nice to see them come to
life.)

THK

On Fri, Aug 5, 2016 at 12:41 PM Ista Zahn <istazahn at gmail.com> wrote:

> But you can easily fall back to R from within Julia; see
> http://juliastats.github.io/RCall.jl/latest/
>
> On Aug 5, 2016 1:27 PM, "Hadley Wickham" <h.wickham at gmail.com> wrote:
>
> > No.
> >
> > Hadley
> >
> > On Fri, Aug 5, 2016 at 11:12 AM, Kenny Bell <kmbell56 at gmail.com> wrote:
> > > Is it conceivable that Julia could be ported to use R syntax in a way
> > that
> > > would allow the vastly larger numbers of R programmers to seamlessly
> > switch?
> > > Or equivalently, could an iteration of R itself do this?
> > >
> > >
> > > On Fri, Aug 5, 2016, 9:00 AM Hadley Wickham <h.wickham at gmail.com>
> wrote:
> > >>
> > >> When it was being actively worked on, it had the advantage of
> existing.
> > >>
> > >> Hadley
> > >>
> > >> On Fri, Aug 5, 2016 at 10:48 AM, Kenny Bell <kmbell56 at gmail.com>
> wrote:
> > >> > Why is the described system preferable to Julia?
> > >> >
> > >> > On Fri, Aug 5, 2016, 4:50 AM peter dalgaard <pdalgd at gmail.com>
> wrote:
> > >> >
> > >> >>
> > >> >> On 05 Aug 2016, at 06:41 , Andrew Judson <ajskim at gmail.com> wrote:
> > >> >>
> > >> >> > I read this paper
> > >> >> > <https://www.stat.auckland.ac.nz/~ihaka/downloads/Compstat-
> > 2008.pdf>
> > >> >> > and
> > >> >> > haven't been able to find out what happened - I have seen some
> > >> >> > sporadic
> > >> >> > mention in message groups but nothing definitive. Does anyone
> know?
> > >> >>
> > >> >> Presumably Ross does...
> > >> >>
> > >> >> You get a hint if you go one level up and look for the newest file:
> > >> >>
> > >> >> https://www.stat.auckland.ac.nz/~ihaka/downloads/New-System.pdf
> > >> >>
> > >> >>
> > >> >> --
> > >> >> Peter Dalgaard, Professor,
> > >> >> Center for Statistics, Copenhagen Business School
> > >> >> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> > >> >> Phone: (+45)38153501
> > >> >> Office: A 4.23
> > >> >> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> > >> >>
> > >> >> ______________________________________________
> > >> >> R-devel at r-project.org mailing list
> > >> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> > >> >>
> > >> >
> > >> >         [[alternative HTML version deleted]]
> > >> >
> > >> > ______________________________________________
> > >> > R-devel at r-project.org mailing list
> > >> > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >>
> > >>
> > >>
> > >> --
> > >> http://hadley.nz
> >
> >
> >
> > --
> > http://hadley.nz
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From smyth at wehi.EDU.AU  Sat Aug  6 01:27:39 2016
From: smyth at wehi.EDU.AU (Gordon K Smyth)
Date: Sat, 6 Aug 2016 09:27:39 +1000 (AUS Eastern Standard Time)
Subject: [Rd] Will there be 2016 issues of The R Journal?
In-Reply-To: <Pine.WNT.4.64.1411142211580.3564@PC975.wehi.edu.au>
References: <mailman.17.1415962806.473.r-devel@r-project.org>
	<Pine.WNT.4.64.1411142211580.3564@PC975.wehi.edu.au>
Message-ID: <Pine.WNT.4.64.1608060908200.8892@PC975.wehi.edu.au>

The R Journal home page doesn't make any promises about how frequently the 
journal will be published.  Historically, though, there have been issues in 
June and December of each year.  The June issue has always appeared by this 
time (6 August) in previous years.

Has there been a change in the publication schedule?  Are there still plans 
for a June 2016 issue?

Thanks
Gordon

---------------------------------------------
Professor Gordon K Smyth,
Head, Bioinformatics Division,
Walter and Eliza Hall Institute of Medical Research,
http://www.statsci.org/smyth
______________________________________________________________________

The information in this email is confidential and intended solely for the addressee.
You must not disclose, forward, print or use it without the permission of the sender.
______________________________________________________________________

From Achim.Zeileis at uibk.ac.at  Sat Aug  6 01:43:30 2016
From: Achim.Zeileis at uibk.ac.at (Achim Zeileis)
Date: Sat, 6 Aug 2016 01:43:30 +0200 (CEST)
Subject: [Rd] Will there be 2016 issues of The R Journal?
In-Reply-To: <Pine.WNT.4.64.1608060908200.8892@PC975.wehi.edu.au>
References: <mailman.17.1415962806.473.r-devel@r-project.org>
	<Pine.WNT.4.64.1411142211580.3564@PC975.wehi.edu.au>
	<Pine.WNT.4.64.1608060908200.8892@PC975.wehi.edu.au>
Message-ID: <alpine.DEB.2.20.1608060141560.3027@paninaro>

On Sat, 6 Aug 2016, Gordon K Smyth wrote:

> The R Journal home page doesn't make any promises about how frequently 
> the journal will be published.  Historically, though, there have been 
> issues in June and December of each year.  The June issue has always 
> appeared by this time (6 August) in previous years.
>
> Has there been a change in the publication schedule?  Are there still 
> plans for a June 2016 issue?

As far as I know there has been no change and the first 2016 issue is 
planned to come out later this month. But for more details it would 
probably be best to contact the editors: 
https://journal.R-project.org/board.html

Best,
Z

> Thanks
> Gordon
>
> ---------------------------------------------
> Professor Gordon K Smyth,
> Head, Bioinformatics Division,
> Walter and Eliza Hall Institute of Medical Research,
> http://www.statsci.org/smyth
> ______________________________________________________________________
>
> The information in this email is confidential and intended solely for the 
> addressee.
> You must not disclose, forward, print or use it without the permission of the 
> sender.
> ______________________________________________________________________
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From frederik at ofb.net  Sat Aug  6 05:23:03 2016
From: frederik at ofb.net (frederik at ofb.net)
Date: Fri, 5 Aug 2016 20:23:03 -0700
Subject: [Rd] vector finalizers
Message-ID: <20160806032303.GF18487@ofb.net>

Dear R Devel,

In a thread this morning Luke Tierney mentioned that R's way of
garbage collecting is going to change soon in 3.4.0. I couldn't find
this info on Google but I wanted to share what I had been discussing
in another forum, in case now is not too late to raise considerations
which could affect the design of planned changes to R's garbage
collection facilities.

I ran into a problem when trying to get R to quickly load some vectors
from disk. R should be able to do this efficiently using memory
mapping. There is a package 'ff' which implements efficient loading of
disk-based vectors using memory mapping. It works pretty well, but the
problem is that it creates a separate data type - the vectors are not
"native" R vectors. There are some wrapper functions in a package
'ffbase' which allow people to use common functions like 'sum' on
these 'ff' vectors. However, a new wrapper has to be written for every
such function, and I guess the 'ffbase' authors do not have time to
write wrappers that are as efficient as the native R functions - in my
testing, there was a 10x slow-down for 'sum'.

The situation is a bit wistful because an 'ff' vector and a native R
vector are basically the same data type, they both store elements
contiguously in memory. Apparently, what prevents 'ffbase' and 'ff'
from creating native R vectors is the fact that it is impossible to
assign a "finalizer" to a native R vector. We need a finalizer so that
R can tell us when a vector is being freed, so we can unmap the
associated memory/file. Ffbase maintainer Edwin de Jonge was even
skeptical that CRAN would accept a package implementing the hack I had
proposed to simulate native R vectors from mmap'ed 'ff' vectors. The
issue is discussed here:

https://github.com/edwindj/ffbase/issues/52

Of course, weak references and external pointers allow finalizers to
be assigned to objects, but as I understand it, such objects are
separate types from vectors - there is no way in R to synthesize a
native vector endowed with a finalizer - something which could be
passed directly to built-in functions like 'sum'.

I think a finalizer facility for vectors would be useful because it
would allow us to take advantage of the memory mapping architecture
present in all modern processors, to do fast copy-free operations on
large disk-based data structures, without having to re-implement
internal functions like 'sum' which are essentially the same algorithm
no matter where the data is stored.

Thank you,

Frederick


From maechler at stat.math.ethz.ch  Sat Aug  6 16:18:45 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Sat, 6 Aug 2016 16:18:45 +0200
Subject: [Rd] ifelse() woes ... can we agree on a  ifelse2() ?
Message-ID: <22437.61893.901739.933100@stat.math.ethz.ch>

Dear R-devel readers,
( = people interested in the improvement and development of R).

This is not the first time that this topic is raised.
and I am in now state to promise that anything will result from
this thread ...

Still, I think the majority among us has agreed that

1) you should never use ifelse(test, yes, no)
   if you know that length(test) == 1, in which case
      	  if(test) yes else no
   is much preferable  (though not equivalent: ifelse(NA, 1, 0) !)   

2) it is potentially inefficient by design since it (almost
   always) evaluates both 'yes' and 'no' independent of 'test'.

3) is a nice syntax in principle, and so is often used, also by
   myself, inspite of '2)'  just because nicely self-explaining
   code is sometimes clearly preferable to more efficient but
   less readable code. 

4) it is too late to change ifelse() fundamentally, because it
   works according to its documentation
   (and I think very much the same as in S and S-PLUS) and has
   done so for ages.

---- and if you don't agree with  1) -- 4)  you may pretend for
     a moment instead of starting to discuss them thoroughly.

Recently, a useR has alerted me to the fact that my Rmpfr's
package arbitrary (high) precision numbers don't work for a
relatively simple function.

As I found the reason was that that simple function used
 ifelse(.,.,.)
and the problem was that the (*simplified*) gist of ifelse(test, yes, no)
is

  test <- as.logical(test)
  ans <- test
  ans[ test] <- yes
  ans[!test] <- no

and in case of Rmpfr, the problem is that

   <logical>[<logical>]  <-  <mpfr>

cannot work correctly

    [[ maybe it could in a future R, if I could define a method

       setReplaceMethod("[", c("logical,"logical","mpfr"),
                        function(x,i,value) .........)

       but that currently fails as the C-low-level dispatch for '[<-'
       does not look at the full signature
     ]]

I vaguely remember having seen proposals for
light weight substitutes for ifelse(),  called
 ifelse1() or
 ifelse2() etc...

and I wonder if we should not try to see if there was a version
that could go into "base R" (maybe the 'utils' package, not
     	      	   	     'base'; that's not so important).

One difference to ifelse() would be that the type/mode/class of the result
is not initialized by logical, by default but rather by the
"common type" of  yes and no ... maybe determined  by  c()'ing
parts of those.
The idea was that this would work for most S3 and S4 objects for
which logical 'length', (logical) indexing '[', and 'rep()' works.

One possibility would also be to consider  a "numbers-only" or
rather "same type"-only {e.g., would also work for characters}
version.

Of course, an ifelse2()  should also be more efficient than
ifelse() in typical "atomic" cases.


Thank you for your ideas and suggestions.
Again, there's no promise of implementation coming along with this e-mail.

Martin Maechler
ETH Zurich


From bob at rud.is  Sat Aug  6 16:43:39 2016
From: bob at rud.is (Bob Rudis)
Date: Sat, 06 Aug 2016 14:43:39 +0000
Subject: [Rd] ifelse() woes ... can we agree on a ifelse2() ?
In-Reply-To: <22437.61893.901739.933100@stat.math.ethz.ch>
References: <22437.61893.901739.933100@stat.math.ethz.ch>
Message-ID: <CAA-FpKUFU4ZkgiZ3QmeLcKOq1m+5Trs5+uPsTKgHk0+x9AHcDw@mail.gmail.com>

have you tried seeing if `dplyr::if_else` behaves more to your liking?

On Sat, Aug 6, 2016 at 10:20 AM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> Dear R-devel readers,
> ( = people interested in the improvement and development of R).
>
> This is not the first time that this topic is raised.
> and I am in now state to promise that anything will result from
> this thread ...
>
> Still, I think the majority among us has agreed that
>
> 1) you should never use ifelse(test, yes, no)
>    if you know that length(test) == 1, in which case
>           if(test) yes else no
>    is much preferable  (though not equivalent: ifelse(NA, 1, 0) !)
>
> 2) it is potentially inefficient by design since it (almost
>    always) evaluates both 'yes' and 'no' independent of 'test'.
>
> 3) is a nice syntax in principle, and so is often used, also by
>    myself, inspite of '2)'  just because nicely self-explaining
>    code is sometimes clearly preferable to more efficient but
>    less readable code.
>
> 4) it is too late to change ifelse() fundamentally, because it
>    works according to its documentation
>    (and I think very much the same as in S and S-PLUS) and has
>    done so for ages.
>
> ---- and if you don't agree with  1) -- 4)  you may pretend for
>      a moment instead of starting to discuss them thoroughly.
>
> Recently, a useR has alerted me to the fact that my Rmpfr's
> package arbitrary (high) precision numbers don't work for a
> relatively simple function.
>
> As I found the reason was that that simple function used
>  ifelse(.,.,.)
> and the problem was that the (*simplified*) gist of ifelse(test, yes, no)
> is
>
>   test <- as.logical(test)
>   ans <- test
>   ans[ test] <- yes
>   ans[!test] <- no
>
> and in case of Rmpfr, the problem is that
>
>    <logical>[<logical>]  <-  <mpfr>
>
> cannot work correctly
>
>     [[ maybe it could in a future R, if I could define a method
>
>        setReplaceMethod("[", c("logical,"logical","mpfr"),
>                         function(x,i,value) .........)
>
>        but that currently fails as the C-low-level dispatch for '[<-'
>        does not look at the full signature
>      ]]
>
> I vaguely remember having seen proposals for
> light weight substitutes for ifelse(),  called
>  ifelse1() or
>  ifelse2() etc...
>
> and I wonder if we should not try to see if there was a version
> that could go into "base R" (maybe the 'utils' package, not
>                              'base'; that's not so important).
>
> One difference to ifelse() would be that the type/mode/class of the result
> is not initialized by logical, by default but rather by the
> "common type" of  yes and no ... maybe determined  by  c()'ing
> parts of those.
> The idea was that this would work for most S3 and S4 objects for
> which logical 'length', (logical) indexing '[', and 'rep()' works.
>
> One possibility would also be to consider  a "numbers-only" or
> rather "same type"-only {e.g., would also work for characters}
> version.
>
> Of course, an ifelse2()  should also be more efficient than
> ifelse() in typical "atomic" cases.
>
>
> Thank you for your ideas and suggestions.
> Again, there's no promise of implementation coming along with this e-mail.
>
> Martin Maechler
> ETH Zurich
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Sat Aug  6 17:30:08 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Sat, 6 Aug 2016 11:30:08 -0400
Subject: [Rd] ifelse() woes ... can we agree on a ifelse2() ?
In-Reply-To: <22437.61893.901739.933100@stat.math.ethz.ch>
References: <22437.61893.901739.933100@stat.math.ethz.ch>
Message-ID: <deb934cc-d781-8011-d29b-f1cbcf60407e@gmail.com>

On 06/08/2016 10:18 AM, Martin Maechler wrote:
> Dear R-devel readers,
> ( = people interested in the improvement and development of R).
>
> This is not the first time that this topic is raised.
> and I am in now state to promise that anything will result from
> this thread ...
>
> Still, I think the majority among us has agreed that
>
> 1) you should never use ifelse(test, yes, no)
>    if you know that length(test) == 1, in which case
>       	  if(test) yes else no
>    is much preferable  (though not equivalent: ifelse(NA, 1, 0) !)
>
> 2) it is potentially inefficient by design since it (almost
>    always) evaluates both 'yes' and 'no' independent of 'test'.
>
> 3) is a nice syntax in principle, and so is often used, also by
>    myself, inspite of '2)'  just because nicely self-explaining
>    code is sometimes clearly preferable to more efficient but
>    less readable code.
>
> 4) it is too late to change ifelse() fundamentally, because it
>    works according to its documentation
>    (and I think very much the same as in S and S-PLUS) and has
>    done so for ages.
>
> ---- and if you don't agree with  1) -- 4)  you may pretend for
>      a moment instead of starting to discuss them thoroughly.
>
> Recently, a useR has alerted me to the fact that my Rmpfr's
> package arbitrary (high) precision numbers don't work for a
> relatively simple function.
>
> As I found the reason was that that simple function used
>  ifelse(.,.,.)
> and the problem was that the (*simplified*) gist of ifelse(test, yes, no)
> is
>
>   test <- as.logical(test)
>   ans <- test
>   ans[ test] <- yes
>   ans[!test] <- no
>
> and in case of Rmpfr, the problem is that
>
>    <logical>[<logical>]  <-  <mpfr>
>
> cannot work correctly
>
>     [[ maybe it could in a future R, if I could define a method
>
>        setReplaceMethod("[", c("logical,"logical","mpfr"),
>                         function(x,i,value) .........)
>
>        but that currently fails as the C-low-level dispatch for '[<-'
>        does not look at the full signature
>      ]]
>
> I vaguely remember having seen proposals for
> light weight substitutes for ifelse(),  called
>  ifelse1() or
>  ifelse2() etc...
>
> and I wonder if we should not try to see if there was a version
> that could go into "base R" (maybe the 'utils' package, not
>      	      	   	     'base'; that's not so important).
>
> One difference to ifelse() would be that the type/mode/class of the result
> is not initialized by logical, by default but rather by the
> "common type" of  yes and no ... maybe determined  by  c()'ing
> parts of those.
> The idea was that this would work for most S3 and S4 objects for
> which logical 'length', (logical) indexing '[', and 'rep()' works.

I think your description is more or less:

    test <- as.logical(test)
    ans <- c(yes, no)[seq_along(test)]
    ans <- ans[seq_along(test)]
    ans[ test] <- yes[test]
    ans[!test] <- no[!test]

(though the implementation details would vary, and recycling rules would 
apply if the lengths of test, yes and no weren't all equal).

You didn't mention what happens with attributes.  Currently we keep the 
attributes from test, which probably doesn't make a lot of sense. In 
particular,

ifelse(c(TRUE, FALSE), factor(2:3), factor(3:4))

returns nonsense, as does my translation of your idea above.

That implementation also drops attributes. I'd say this definition would 
make more sense:

    test <- as.logical(test)
    ans <- yes
    ans[!test] <- no[!test]

(and this is suggested as an alternative in ?ifelse).  It generates an 
error in my test example, which seems reasonable.  It gives the "right" 
thing in

ifelse(c(TRUE, FALSE), factor(2:3), factor(3:2))

because the factors have the same levels.

The lack of symmetry between yes and no is slightly irksome, but I would 
think in most cases you could choose attributes from just one of yes and 
no to be what you want in the result (and use !test to swap the order if 
necessary).

>
> One possibility would also be to consider  a "numbers-only" or
> rather "same type"-only {e.g., would also work for characters}
> version.

I don't know what you mean by these.
>
> Of course, an ifelse2()  should also be more efficient than
> ifelse() in typical "atomic" cases.

I don't think it is obvious how to make it more efficient.  ifelse() 
already skips evaluation of yes or no if not needed.  (An argument could 
be made that it would be better to guarantee evaluation of both, but 
it's usually easy enough to do this explicitly, so I don't see a need.)

Duncan Murdoch

>
>
> Thank you for your ideas and suggestions.
> Again, there's no promise of implementation coming along with this e-mail.
>
> Martin Maechler
> ETH Zurich
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From kyleb at metrumrg.com  Sun Aug  7 06:51:53 2016
From: kyleb at metrumrg.com (Kyle Baron)
Date: Sat, 6 Aug 2016 23:51:53 -0500
Subject: [Rd] Quote symbol names under EXPORTS in tmp.def on Windows
Message-ID: <CAJ2Cw8S1bfQQwMOsPhc9xQ6xNKadGqPmmrXt6tjXsofKT_bqCA@mail.gmail.com>

I originally posted on this topic on a different thread:
https://stat.ethz.ch/pipermail/r-devel/2016-August/072938.html

These sources suggested that a safe practice might be to put double
quotes around symbol names in EXPORTS in case the symbol name is the
same as a linker keyword:
   - https://sourceware.org/binutils/docs/ld/Symbols.html#Symbols
   - https://msdn.microsoft.com/en-us/library/163abkbh.aspx

I wasn't sure how that related specifically to what Rtools is using,
but when I made the following change to winshlib.mk (double quotes
around symbol names in tmp.def), I was able to compile code without
issue and get symbols like BASE (or other keywords) exported.


Kyle




## ${R_HOME}/share/make/winshlib.mk
6a7,8
> ADDQU = 's/[^ ][^ ]*/"&"/g'
>
17c19
<     $(NM) $^ | $(SED) -n $(SYMPAT) $(NM_FILTER) >> tmp.def; \
---
>     $(NM) $^ | $(SED) -n $(SYMPAT) $(NM_FILTER) | $(SED) $(ADDQU) >> tmp.def; \



code <- '

void BASE(int *nin, double *x) {
   int n = nin[0];
   for (int i=0; i<n; i++) x[i] = x[i] * x[i];
}

void rd(int *nin, double *x) {
   int n = nin[0];
   for (int i=0; i<n; i++) x[i] = x[i] * x[i];
}

double EXPORTS = 2.1;
int LIBRARY = 3;
'

writeLines(code, "src1.c")

system("R CMD SHLIB src1.c")
dyn.load("src1.dll")

is.loaded("EXPORTS",PACKAGE="src1")
is.loaded("BASE",PACKAGE="src1")
is.loaded("rd",PACKAGE="src1")

dyn.unload("src1.dll")



-- 
Kyle Baron
Metrum Research Group


From ligges at statistik.tu-dortmund.de  Sun Aug  7 09:51:58 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Sun, 7 Aug 2016 09:51:58 +0200
Subject: [Rd] ifelse() woes ... can we agree on a ifelse2() ?
In-Reply-To: <deb934cc-d781-8011-d29b-f1cbcf60407e@gmail.com>
References: <22437.61893.901739.933100@stat.math.ethz.ch>
	<deb934cc-d781-8011-d29b-f1cbcf60407e@gmail.com>
Message-ID: <674c888f-26b5-7f31-ad33-5972fc90c825@statistik.tu-dortmund.de>



On 06.08.2016 17:30, Duncan Murdoch wrote:
> On 06/08/2016 10:18 AM, Martin Maechler wrote:
>> Dear R-devel readers,
>> ( = people interested in the improvement and development of R).
>>
>> This is not the first time that this topic is raised.
>> and I am in now state to promise that anything will result from
>> this thread ...
>>
>> Still, I think the majority among us has agreed that
>>
>> 1) you should never use ifelse(test, yes, no)
>>    if you know that length(test) == 1, in which case
>>             if(test) yes else no
>>    is much preferable  (though not equivalent: ifelse(NA, 1, 0) !)
>>
>> 2) it is potentially inefficient by design since it (almost
>>    always) evaluates both 'yes' and 'no' independent of 'test'.
>>
>> 3) is a nice syntax in principle, and so is often used, also by
>>    myself, inspite of '2)'  just because nicely self-explaining
>>    code is sometimes clearly preferable to more efficient but
>>    less readable code.
>>
>> 4) it is too late to change ifelse() fundamentally, because it
>>    works according to its documentation
>>    (and I think very much the same as in S and S-PLUS) and has
>>    done so for ages.
>>
>> ---- and if you don't agree with  1) -- 4)  you may pretend for
>>      a moment instead of starting to discuss them thoroughly.
>>
>> Recently, a useR has alerted me to the fact that my Rmpfr's
>> package arbitrary (high) precision numbers don't work for a
>> relatively simple function.
>>
>> As I found the reason was that that simple function used
>>  ifelse(.,.,.)
>> and the problem was that the (*simplified*) gist of ifelse(test, yes, no)
>> is
>>
>>   test <- as.logical(test)
>>   ans <- test
>>   ans[ test] <- yes
>>   ans[!test] <- no
>>
>> and in case of Rmpfr, the problem is that
>>
>>    <logical>[<logical>]  <-  <mpfr>
>>
>> cannot work correctly
>>
>>     [[ maybe it could in a future R, if I could define a method
>>
>>        setReplaceMethod("[", c("logical,"logical","mpfr"),
>>                         function(x,i,value) .........)
>>
>>        but that currently fails as the C-low-level dispatch for '[<-'
>>        does not look at the full signature
>>      ]]
>>
>> I vaguely remember having seen proposals for
>> light weight substitutes for ifelse(),  called
>>  ifelse1() or
>>  ifelse2() etc...
>>
>> and I wonder if we should not try to see if there was a version
>> that could go into "base R" (maybe the 'utils' package, not
>>                                'base'; that's not so important).
>>
>> One difference to ifelse() would be that the type/mode/class of the
>> result
>> is not initialized by logical, by default but rather by the
>> "common type" of  yes and no ... maybe determined  by  c()'ing
>> parts of those.
>> The idea was that this would work for most S3 and S4 objects for
>> which logical 'length', (logical) indexing '[', and 'rep()' works.
>
> I think your description is more or less:
>
>    test <- as.logical(test)
>    ans <- c(yes, no)[seq_along(test)]
>    ans <- ans[seq_along(test)]
>    ans[ test] <- yes[test]
>    ans[!test] <- no[!test]
>
> (though the implementation details would vary, and recycling rules would
> apply if the lengths of test, yes and no weren't all equal).
>
> You didn't mention what happens with attributes.  Currently we keep the
> attributes from test, which probably doesn't make a lot of sense. In
> particular,
>
> ifelse(c(TRUE, FALSE), factor(2:3), factor(3:4))
>
> returns nonsense, as does my translation of your idea above.
>
> That implementation also drops attributes. I'd say this definition would
> make more sense:
>
>    test <- as.logical(test)
>    ans <- yes
>    ans[!test] <- no[!test]
>
> (and this is suggested as an alternative in ?ifelse).  It generates an
> error in my test example, which seems reasonable.  It gives the "right"
> thing in
>
> ifelse(c(TRUE, FALSE), factor(2:3), factor(3:2))
>
> because the factors have the same levels.
>
> The lack of symmetry between yes and no is slightly irksome, but I would
> think in most cases you could choose attributes from just one of yes and
> no to be what you want in the result (and use !test to swap the order if
> necessary).
>
>>
>> One possibility would also be to consider  a "numbers-only" or
>> rather "same type"-only {e.g., would also work for characters}
>> version.
>
> I don't know what you mean by these.
>>
>> Of course, an ifelse2()  should also be more efficient than
>> ifelse() in typical "atomic" cases.
>
> I don't think it is obvious how to make it more efficient.  ifelse()
> already skips evaluation of yes or no if not needed.  (An argument could
> be made that it would be better to guarantee evaluation of both, but
> it's usually easy enough to do this explicitly, so I don't see a need.)

Same from here: I do not see how this can easily be made more efficient, 
since evaluating ony parts causes a lot of copies of objects whichs 
slows stuff down, hence you need some complexity in yes and no to make 
evaluations of parts of them more efficient on R level.


Anyway, to solve the problem, we may want an add argument to ifelse2() 
that allows for specification of the type of the result (as vapply does)?

Best,
Uwe

> Duncan Murdoch
>
>>
>>
>> Thank you for your ideas and suggestions.
>> Again, there's no promise of implementation coming along with this
>> e-mail.
>>
>> Martin Maechler
>> ETH Zurich
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From suharto_anggono at yahoo.com  Sun Aug  7 17:32:19 2016
From: suharto_anggono at yahoo.com (Suharto Anggono Suharto Anggono)
Date: Sun, 7 Aug 2016 15:32:19 +0000 (UTC)
Subject: [Rd] table(exclude = NULL) always includes NA
References: <420793468.10664783.1470583939128.JavaMail.yahoo.ref@mail.yahoo.com>
Message-ID: <420793468.10664783.1470583939128.JavaMail.yahoo@mail.yahoo.com>

This is an example from https://stat.ethz.ch/pipermail/r-help/2007-May/132573.html .

With R 2.7.2:

> a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
> table(a, b, exclude = NULL)
      b
a      1 2
  1    1 1
  2    2 0
  3    1 0
  <NA> 1 0

With R 3.3.1:

> a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
> table(a, b, exclude = NULL)
      b
a      1 2 <NA>
  1    1 1    0
  2    2 0    0
  3    1 0    0
  <NA> 1 0    0
> table(a, b, useNA = "ifany")
      b
a      1 2
  1    1 1
  2    2 0
  3    1 0
  <NA> 1 0
> table(a, b, exclude = NULL, useNA = "ifany")
      b
a      1 2 <NA>
  1    1 1    0
  2    2 0    0
  3    1 0    0
  <NA> 1 0    0

For the example, in R 3.3.1, the result of 'table' with exclude = NULL includes NA even if NA is not present. It is different from R 2.7.2, that comes from factor(exclude = NULL), that includes NA only if NA is present.

>From R 3.3.1 help on 'table', in "Details" section:
'useNA' controls if the table includes counts of 'NA' values: the allowed values correspond to never, only if the count is positive and even for zero counts.  This is overridden by specifying 'exclude = NULL'.

Specifying 'exclude = NULL' overrides 'useNA' to what value? The documentation doesn't say. Looking at the code of function 'table', the value is "always".

For the example, in R 3.3.1, the result like in R 2.7.2 can be obtained with useNA = "ifany" and 'exclude' unspecified.


The result of 'summary' of a logical vector is affected. As mentioned in http://stackoverflow.com/questions/26775501/r-dropping-nas-in-logical-column-levels , in the code of function 'summary.default', for logical, table(object, exclude = NULL) is used.

With R 2.7.2:

> log <- c(NA, logical(4), NA, !logical(2), NA)
> summary(log)
   Mode   FALSE    TRUE    NA's
logical       4       2       3
> summary(log[!is.na(log)])
   Mode   FALSE    TRUE
logical       4       2
> summary(TRUE)
   Mode    TRUE
logical       1

With R 3.3.1:

> log <- c(NA, logical(4), NA, !logical(2), NA)
> summary(log)
   Mode   FALSE    TRUE    NA's
logical       4       2       3
> summary(log[!is.na(log)])
   Mode   FALSE    TRUE    NA's
logical       4       2       0
> summary(TRUE)
   Mode    TRUE    NA's
logical       1       0

In R 3.3.1, "NA's' is always in the result of 'summary' of a logical vector. It is unlike 'summary' of a numeric vector.
On the other hand, in R 3.3.1, FALSE is not in the result of 'summary' of a logical vector that doesn't  contain FALSE.

I prefer the result of 'summary' of a logical vector like in R 2.7.2, or, alternatively, the result that always includes all possible values: FALSE, TRUE, NA.


From spencer.graves at prodsyse.com  Sun Aug  7 21:03:55 2016
From: spencer.graves at prodsyse.com (Spencer Graves)
Date: Sun, 7 Aug 2016 14:03:55 -0500
Subject: [Rd] problem with abine(lm(...)) for plot(y~x, log='xy')
Message-ID: <bf7e9c85-1f1b-84eb-cf53-e0628720d64d@effectivedefense.org>

Hello:


        In the following plot, the fitted line plots 100 percent above 
the points:


tstDat <- data.frame(x=10^(1:3), y=10^(1:3+.1*rnorm(3)))
tstFit <- lm(log(y)~log(x), tstDat)
plot(y~x, tstDat, log='xy')
abline(tstFit)


        I can get the correct line with the following:


tstPredDat <- data.frame(x=10^seq(1, 3, len=2))
tstPred <- predict(tstFit, tstPredDat)
lines(tstPredDat$x, exp(tstPred))


        I tried "abline(tstFit)" hoping it would work.  If the error had 
not been so obvious, I might not have noticed it.


        Thanks for your work to build a better R (and through that a 
better world).


        Spencer Graves


From pdalgd at gmail.com  Sun Aug  7 21:21:22 2016
From: pdalgd at gmail.com (peter dalgaard)
Date: Sun, 7 Aug 2016 21:21:22 +0200
Subject: [Rd] problem with abine(lm(...)) for plot(y~x, log='xy')
In-Reply-To: <bf7e9c85-1f1b-84eb-cf53-e0628720d64d@effectivedefense.org>
References: <bf7e9c85-1f1b-84eb-cf53-e0628720d64d@effectivedefense.org>
Message-ID: <E4EDFE34-12E6-4F1A-9B99-9BF4069CAF54@gmail.com>

Try log10()...

-pd

> On 07 Aug 2016, at 21:03 , Spencer Graves <spencer.graves at prodsyse.com> wrote:
> 
> Hello:
> 
> 
>       In the following plot, the fitted line plots 100 percent above the points:
> 
> 
> tstDat <- data.frame(x=10^(1:3), y=10^(1:3+.1*rnorm(3)))
> tstFit <- lm(log(y)~log(x), tstDat)
> plot(y~x, tstDat, log='xy')
> abline(tstFit)
> 
> 
>       I can get the correct line with the following:
> 
> 
> tstPredDat <- data.frame(x=10^seq(1, 3, len=2))
> tstPred <- predict(tstFit, tstPredDat)
> lines(tstPredDat$x, exp(tstPred))
> 
> 
>       I tried "abline(tstFit)" hoping it would work.  If the error had not been so obvious, I might not have noticed it.
> 
> 
>       Thanks for your work to build a better R (and through that a better world).
> 
> 
>       Spencer Graves
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From maechler at stat.math.ethz.ch  Mon Aug  8 12:20:27 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Mon, 8 Aug 2016 12:20:27 +0200
Subject: [Rd] ifelse() woes ... can we agree on a ifelse2() ?
In-Reply-To: <674c888f-26b5-7f31-ad33-5972fc90c825@statistik.tu-dortmund.de>
References: <22437.61893.901739.933100@stat.math.ethz.ch>
	<deb934cc-d781-8011-d29b-f1cbcf60407e@gmail.com>
	<674c888f-26b5-7f31-ad33-5972fc90c825@statistik.tu-dortmund.de>
Message-ID: <22440.23787.48665.274985@stat.math.ethz.ch>

>>>>> Uwe Ligges <ligges at statistik.tu-dortmund.de>
>>>>>     on Sun, 7 Aug 2016 09:51:58 +0200 writes:

    > On 06.08.2016 17:30, Duncan Murdoch wrote:
    >> On 06/08/2016 10:18 AM, Martin Maechler wrote:

   [.................]

    >>> Of course, an ifelse2()  should also be more efficient than
    >>> ifelse() in typical "atomic" cases.
    >> 
    >> I don't think it is obvious how to make it more efficient.  ifelse()
    >> already skips evaluation of yes or no if not needed.  (An argument could
    >> be made that it would be better to guarantee evaluation of both, but
    >> it's usually easy enough to do this explicitly, so I don't see a need.)

    > Same from here: I do not see how this can easily be made more efficient, 
    > since evaluating ony parts causes a lot of copies of objects whichs 
    > slows stuff down, hence you need some complexity in yes and no to make 
    > evaluations of parts of them more efficient on R level.

Yes, Duncan and Uwe are right, and my comment "wish" above was
mostly misleading.  Some of the many small changes to ifelse()
since its initial [1998, R version 0.63.3] simple

ifelseR0633 <- function (test, yes, no)
{
    ans <- test
    test <- as.logical(test)
    nas <- is.na(test)
    ans[ test] <- rep(yes, length = length(ans))[ test]
    ans[!test] <- rep(no,  length = length(ans))[!test]
    ans[nas] <- NA
    ans
}

were exactly for adding speed in some of these cases.

    > Anyway, to solve the problem, we may want an add argument to ifelse2() 
    > that allows for specification of the type of the result (as vapply does)?

A good idea, probably only needed / desirable if we'd consider a
C based version {as vapply} but for the moment I did not want to
go there.

The current ifelse() is nice with "pre-S3" objects, such as
as atomic (named) vectors and (dimnamed) arrays, including matrices,
by keeping most attributes for those... and does that relatively
efficiently.

What I really meant, not above, but earlier when talking about
ifelse()'s inefficiency should really *not* have been related to
this thread, I'm sorry for that confusion.

I mean the fact that many many usages of ifelse() are of the
form
	ifelse(logiFn(x), f1(x), f2(x))

  {with f1() or f2() often even being constant}

and e.g.,  in the case where logiFn(x) gives few TRUEs and f1(.)
is expensive and f2(.) very cheap (say "constant" NA), it is
much more efficient to use

     ans <- x
     Y <- logiFn(x)
     ans[ Y] <- f1(x[ Y])
     ans[!Y] <- f2(x[!Y])

as the expensive function is only called on a small subset of
the full x.

I'm working at the main topic and *am* thanking Duncan
for his conceptual analysis and the (few) proposals.

Martin

    > Best,
    > Uwe

    >> Duncan Murdoch
    >> 
    >>> 
    >>> 
    >>> Thank you for your ideas and suggestions.
    >>> Again, there's no promise of implementation coming along with this
    >>> e-mail.
    >>> 
    >>> Martin Maechler
    >>> ETH Zurich


From avraham.adler at gmail.com  Mon Aug  8 17:24:55 2016
From: avraham.adler at gmail.com (Avraham Adler)
Date: Mon, 8 Aug 2016 11:24:55 -0400
Subject: [Rd] Is it intentional that the Fortran optimization flags
 changefrom O3 to O2 on Windows?
Message-ID: <CAL6gwnKDFH_HV9aHAJPWOJ7=VAGJz6KyxKdM0Ba1LOiViRqDYw@mail.gmail.com>

When compiling R-devel (2016-08-07) on Windows (64bit) using Rtools
(3.4.0), the C++ optimization flags are manually changed to -O2 from
-O3. This has been the situation for years, and I believe this is to
prevent certain optimizations which may cause downstream problems. In
R_HOME/src/gnuwin32/fixed/etc/Makeconf, this is seen by the -O2
entries in the CXXFLAGS and CXX1XFLAGS variables. The FFLAGS and
FCFLAGS entries in Makeconf still show -O3.

When looking at R_HOME/etc/x64/Makeconf, however, the entries for
FCFLAGS and FFLAGS are -O2. My hunch is that in
R_HOME/src/gnuwin32/fixed/Makefile, line 29 is changing ALL O3 to O2,
and not just those relating to C++:


  ifeq "$(WIN)" "64"
    $(SED) -e 's/WIN = 32/WIN = 64/' \
      -e "s/-O3/-O2/" \
      ...


Is this intentional? If not, is there a way to keep O3 optimization
with FORTRAN outside of quickly editing Makeconf before R's
compilation gets to using it?

Thank you,

Avi


From avraham.adler at gmail.com  Mon Aug  8 17:56:07 2016
From: avraham.adler at gmail.com (Avraham Adler)
Date: Mon, 8 Aug 2016 11:56:07 -0400
Subject: [Rd] Setting Gnu++11 when compiling R-devel on Windows
Message-ID: <CAL6gwnLwGUm9m+TH4yYuf=7-=fDSSPN+8gPq0C1yRAFW4oo0Sg@mail.gmail.com>

Recently, there have been changes to R-devel to make it more
compatible with GCC 6.x, which is great. Unfortunately, Windows still
uses a toolset based on GCC 4.9.3.

When compiling R release or R-patched, one can have GCC called with
-std=gnu++11 by having it in the CXXFLAGS in one's HOME/.R/Makevars as
well as by overwriting CXX1XSTD in
R_HOME/src/gnuwin32/fixed/etc/Makeconf.

When trying the same procedure for R-devel (08-04 and 08-07) I see
that g++ is called without -std=gnu++11. I tried adding the call to
the CXX1YSTD flag as well (although that should be reserved for C++14)
and it did not help.

I can probably force it by adding it to the CXXFLAGS and CXX1XFLAGS in
Makeconf, but that seems to be somewhat overkill and may have
downstream effects of which I am unaware.

Am I correct in my assumption that the new CXXSTD macro as discussed
in the changelogs is automatically setting GCC 4.9.3 to C++98, and if
so, is there a similar way to R-3.3 to have GCC default to gnu++11
outside of forcing it in the general flags? If I am incorrect, I would
appreciate being pointed in the proper direction.

Thank you,

Avi


From maechler at stat.math.ethz.ch  Tue Aug  9 15:35:41 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Tue, 9 Aug 2016 15:35:41 +0200
Subject: [Rd] table(exclude = NULL) always includes NA
In-Reply-To: <420793468.10664783.1470583939128.JavaMail.yahoo@mail.yahoo.com>
References: <420793468.10664783.1470583939128.JavaMail.yahoo.ref@mail.yahoo.com>
	<420793468.10664783.1470583939128.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <22441.56365.45649.907263@stat.math.ethz.ch>

>>>>> Suharto Anggono Suharto Anggono via R-devel <r-devel at r-project.org>
>>>>>     on Sun, 7 Aug 2016 15:32:19 +0000 writes:

> This is an example from https://stat.ethz.ch/pipermail/r-help/2007-May/132573.html .

> With R 2.7.2:

> > a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
> > table(a, b, exclude = NULL)
>       b
> a      1 2
>   1    1 1
>   2    2 0
>   3    1 0
>   <NA> 1 0

> With R 3.3.1:

> > a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
> > table(a, b, exclude = NULL)
>       b
> a      1 2 <NA>
>   1    1 1    0
>   2    2 0    0
>   3    1 0    0
>   <NA> 1 0    0
> > table(a, b, useNA = "ifany")
>       b
> a      1 2
>   1    1 1
>   2    2 0
>   3    1 0
>   <NA> 1 0
> > table(a, b, exclude = NULL, useNA = "ifany")
>       b
> a      1 2 <NA>
>   1    1 1    0
>   2    2 0    0
>   3    1 0    0
>   <NA> 1 0    0

> For the example, in R 3.3.1, the result of 'table' with
> exclude = NULL includes NA even if NA is not present. It is
> different from R 2.7.2, that comes from factor(exclude = NULL), 
> that includes NA only if NA is present.

I agree that this (R 3.3.1 behavior) seems undesirable and looks
wrong, and the old (<= 2.2.7) behavior for  table(a,b,
exclude=NULL) seems desirable to me.


> >From R 3.3.1 help on 'table', in "Details" section:
> 'useNA' controls if the table includes counts of 'NA' values: the allowed values correspond to never, only if the count is positive and even for zero counts.  This is overridden by specifying 'exclude = NULL'.

> Specifying 'exclude = NULL' overrides 'useNA' to what value? The documentation doesn't say. Looking at the code of function 'table', the value is "always".

Yes, it should be documented what happens for this case,
(but read on ...)

> For the example, in R 3.3.1, the result like in R 2.7.2 can be obtained with useNA = "ifany" and 'exclude' unspecified.

Yes.  What should we do?
I currently think that we'd want to change the line

     useNA <- if (!missing(exclude) && is.null(exclude)) "always"

to

     useNA <- if (!missing(exclude) && is.null(exclude)) "ifany" # was "always"


which would not even contradict documentation, as indeed you
mentioned above, the exact action here had not been documented.

The change above at least does not break any of the standard R
tests ('make check-all', i.e., including the recommended
packages), which for me confirms that it may be "what is
best"...

----

Thank you for mentioning the important consequence for summary(<logical>).
They can helping insight what a "probably best" behavior should
be for these cases of table().

Martin Maechler,
ETH Zurich

> The result of 'summary' of a logical vector is affected. As mentioned in http://stackoverflow.com/questions/26775501/r-dropping-nas-in-logical-column-levels , in the code of function 'summary.default', for logical, table(object, exclude = NULL) is used.

> With R 2.7.2:

> > log <- c(NA, logical(4), NA, !logical(2), NA)
> > summary(log)
>    Mode   FALSE    TRUE    NA's
> logical       4       2       3
> > summary(log[!is.na(log)])
>    Mode   FALSE    TRUE
> logical       4       2
> > summary(TRUE)
>    Mode    TRUE
> logical       1

> With R 3.3.1:

> > log <- c(NA, logical(4), NA, !logical(2), NA)
> > summary(log)
>    Mode   FALSE    TRUE    NA's
> logical       4       2       3
> > summary(log[!is.na(log)])
>    Mode   FALSE    TRUE    NA's
> logical       4       2       0
> > summary(TRUE)
>    Mode    TRUE    NA's
> logical       1       0

> In R 3.3.1, "NA's' is always in the result of 'summary' of a logical vector. It is unlike 'summary' of a numeric vector.
> On the other hand, in R 3.3.1, FALSE is not in the result of 'summary' of a logical vector that doesn't  contain FALSE.

> I prefer the result of 'summary' of a logical vector like in R 2.7.2, or, alternatively, the result that always includes all possible values: FALSE, TRUE, NA.

I tend to agree, and strongly prefer the 'R(<=2.7.2)'-behavior
for table() {and hence summary(<logical>)}.


From maechler at stat.math.ethz.ch  Wed Aug 10 19:39:52 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Wed, 10 Aug 2016 19:39:52 +0200
Subject: [Rd] table(exclude = NULL) always includes NA
In-Reply-To: <22441.56365.45649.907263@stat.math.ethz.ch>
References: <420793468.10664783.1470583939128.JavaMail.yahoo.ref@mail.yahoo.com>
	<420793468.10664783.1470583939128.JavaMail.yahoo@mail.yahoo.com>
	<22441.56365.45649.907263@stat.math.ethz.ch>
Message-ID: <22443.26344.991692.494294@stat.math.ethz.ch>

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Tue, 9 Aug 2016 15:35:41 +0200 writes:

>>>>> Suharto Anggono Suharto Anggono via R-devel <r-devel at r-project.org>
>>>>>     on Sun, 7 Aug 2016 15:32:19 +0000 writes:

> > This is an example from https://stat.ethz.ch/pipermail/r-help/2007-May/132573.html .
> 
> > With R 2.7.2:
> 
> > > a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
> > > table(a, b, exclude = NULL)
> >       b
> > a      1 2
> >   1    1 1
> >   2    2 0
> >   3    1 0
> >   <NA> 1 0
> 
> > With R 3.3.1:
> 
> > > a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
> > > table(a, b, exclude = NULL)
> >       b
> > a      1 2 <NA>
> >   1    1 1    0
> >   2    2 0    0
> >   3    1 0    0
> >   <NA> 1 0    0
> > > table(a, b, useNA = "ifany")
> >       b
> > a      1 2
> >   1    1 1
> >   2    2 0
> >   3    1 0
> >   <NA> 1 0
> > > table(a, b, exclude = NULL, useNA = "ifany")
> >       b
> > a      1 2 <NA>
> >   1    1 1    0
> >   2    2 0    0
> >   3    1 0    0
> >   <NA> 1 0    0
> 
> > For the example, in R 3.3.1, the result of 'table' with
> > exclude = NULL includes NA even if NA is not present. It is
> > different from R 2.7.2, that comes from factor(exclude = NULL), 
> > that includes NA only if NA is present.
> 
> I agree that this (R 3.3.1 behavior) seems undesirable and looks
> wrong, and the old (<= 2.2.7) behavior for  table(a,b,
> exclude=NULL) seems desirable to me.
> 
> 
> > >From R 3.3.1 help on 'table', in "Details" section:
> > 'useNA' controls if the table includes counts of 'NA' values: the allowed values correspond to never, only if the count is positive and even for zero counts.  This is overridden by specifying 'exclude = NULL'.
> 
> > Specifying 'exclude = NULL' overrides 'useNA' to what value? The documentation doesn't say. Looking at the code of function 'table', the value is "always".
> 
> Yes, it should be documented what happens for this case,
> (but read on ...)

and it is *not* true that the documentation does not say, since
2013, it has contained

 exclude: levels to remove for all factors in ?...?.  If set to ?NULL?,
          it implies ?useNA = "always"?.  See ?Details? for its
          interpretation for non-factor arguments.


> > For the example, in R 3.3.1, the result like in R 2.7.2 can be obtained with useNA = "ifany" and 'exclude' unspecified.
> 
> Yes.  What should we do?
> I currently think that we'd want to change the line
> 
>      useNA <- if (!missing(exclude) && is.null(exclude)) "always"
> 
> to
> 
>      useNA <- if (!missing(exclude) && is.null(exclude)) "ifany" # was "always"
> 
> 
> which would not even contradict documentation, as indeed you
> mentioned above, the exact action here had not been documented.

The last part ("which ..") above is wrong, as mentioned earlier.

The above change entails behaviour which looks better to me;
however, the change *is* "against the current documentation".
and after experimentation (a "complete factorial design" of
argument settings), I'm not entirely happy with the result.... and one reason
is that   'exclude = NULL'  and  (e.g.)   'exclude = c()'
are (still) handled differently: From a usual interpreation,
both should mean 
  "do not exclude any factor entries (and levels) from tabulation"
but one of the two changes the default of 'useNA' and the other
does not.   If we want a change anyway (and have to update the doc),
it could be "more logical"  to replace the line above by

   useNA <- if (missing(useNA) && !missing(exclude) && !(NA %in% exclude)) "always"

notably, replacing 'useNA' *only* if it has not been specified,
which seems much closer to "typically expected" behavior..



> The change above at least does not break any of the standard R
> tests ('make check-all', i.e., including the recommended
> packages), which for me confirms that it may be "what is
> best"...
> 
> ----
> 
> Thank you for mentioning the important consequence for summary(<logical>).
> They can helping insight what a "probably best" behavior should
> be for these cases of table().
> 
> Martin Maechler,
> ETH Zurich
> 
> > The result of 'summary' of a logical vector is affected. As mentioned in http://stackoverflow.com/questions/26775501/r-dropping-nas-in-logical-column-levels , in the code of function 'summary.default', for logical, table(object, exclude = NULL) is used.
> 
> > With R 2.7.2:
> 
> > > log <- c(NA, logical(4), NA, !logical(2), NA)
> > > summary(log)
> >    Mode   FALSE    TRUE    NA's
> > logical       4       2       3
> > > summary(log[!is.na(log)])
> >    Mode   FALSE    TRUE
> > logical       4       2
> > > summary(TRUE)
> >    Mode    TRUE
> > logical       1
> 
> > With R 3.3.1:
> 
> > > log <- c(NA, logical(4), NA, !logical(2), NA)
> > > summary(log)
> >    Mode   FALSE    TRUE    NA's
> > logical       4       2       3
> > > summary(log[!is.na(log)])
> >    Mode   FALSE    TRUE    NA's
> > logical       4       2       0
> > > summary(TRUE)
> >    Mode    TRUE    NA's
> > logical       1       0
> 
> > In R 3.3.1, "NA's' is always in the result of 'summary' of a logical vector. It is unlike 'summary' of a numeric vector.
> > On the other hand, in R 3.3.1, FALSE is not in the result of 'summary' of a logical vector that doesn't  contain FALSE.
> 
> > I prefer the result of 'summary' of a logical vector like in R 2.7.2, or, alternatively, the result that always includes all possible values: FALSE, TRUE, NA.
> 
> I tend to agree, and strongly prefer the 'R(<=2.7.2)'-behavior
> for table() {and hence summary(<logical>)}.


From luke-tierney at uiowa.edu  Wed Aug 10 22:30:51 2016
From: luke-tierney at uiowa.edu (luke-tierney at uiowa.edu)
Date: Wed, 10 Aug 2016 15:30:51 -0500
Subject: [Rd] vector finalizers
In-Reply-To: <20160806032303.GF18487@ofb.net>
References: <20160806032303.GF18487@ofb.net>
Message-ID: <alpine.DEB.2.10.1608101518190.2618@luke-Latitude>

There is no plan to change R's garbage collector, and I did not say
there was. What I wrote is:

     If R is built to use reference counting for determining sharing
     information this does not happen, so this is likely to change and not
     force a copy by 3.4.0.

So reference counting is to be used for determining sharing, _not_ for
memory management.

There is some work in progress to allow alternate representation for R
vectors that would for the most part behave like standard
vectors. There are however a lot of thorny issues: while it is nice if
passing such things to sum() or mean() behaves in the 'usual' way, it
is probably not so nice if passing to log() or to serialize() behaves
in the 'usual' way. We'll have to see over the next few month whether
these issues can be addressed in a reusable way.

Best,

luke

On Sat, 6 Aug 2016, frederik at ofb.net wrote:

> Dear R Devel,
>
> In a thread this morning Luke Tierney mentioned that R's way of
> garbage collecting is going to change soon in 3.4.0. I couldn't find
> this info on Google but I wanted to share what I had been discussing
> in another forum, in case now is not too late to raise considerations
> which could affect the design of planned changes to R's garbage
> collection facilities.
>
> I ran into a problem when trying to get R to quickly load some vectors
> from disk. R should be able to do this efficiently using memory
> mapping. There is a package 'ff' which implements efficient loading of
> disk-based vectors using memory mapping. It works pretty well, but the
> problem is that it creates a separate data type - the vectors are not
> "native" R vectors. There are some wrapper functions in a package
> 'ffbase' which allow people to use common functions like 'sum' on
> these 'ff' vectors. However, a new wrapper has to be written for every
> such function, and I guess the 'ffbase' authors do not have time to
> write wrappers that are as efficient as the native R functions - in my
> testing, there was a 10x slow-down for 'sum'.
>
> The situation is a bit wistful because an 'ff' vector and a native R
> vector are basically the same data type, they both store elements
> contiguously in memory. Apparently, what prevents 'ffbase' and 'ff'
> from creating native R vectors is the fact that it is impossible to
> assign a "finalizer" to a native R vector. We need a finalizer so that
> R can tell us when a vector is being freed, so we can unmap the
> associated memory/file. Ffbase maintainer Edwin de Jonge was even
> skeptical that CRAN would accept a package implementing the hack I had
> proposed to simulate native R vectors from mmap'ed 'ff' vectors. The
> issue is discussed here:
>
> https://github.com/edwindj/ffbase/issues/52
>
> Of course, weak references and external pointers allow finalizers to
> be assigned to objects, but as I understand it, such objects are
i> separate types from vectors - there is no way in R to synthesize a
> native vector endowed with a finalizer - something which could be
> passed directly to built-in functions like 'sum'.
>
> I think a finalizer facility for vectors would be useful because it
> would allow us to take advantage of the memory mapping architecture
> present in all modern processors, to do fast copy-free operations on
> large disk-based data structures, without having to re-implement
> internal functions like 'sum' which are essentially the same algorithm
> no matter where the data is stored.
>
> Thank you,
>
> Frederick
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From jepusto at gmail.com  Thu Aug 11 16:37:29 2016
From: jepusto at gmail.com (James Pustejovsky)
Date: Thu, 11 Aug 2016 09:37:29 -0500
Subject: [Rd] bug in nlme::getVarCov
Message-ID: <CAFUVuJya1pEzGxGzXR+O_M1kwPrc5BHT8uj6ZX3gBg9VidyH=A@mail.gmail.com>

Greetings,

I noticed a bug in the getVarCov function from nlme. I am posting here
because it is not currently possible to register and file a report through
https://bugs.r-project.org/. (If this is not the appropriate venue for
this, I'd be grateful if someone could point me to the right place.)

The issue can be seen by observing that getVarCov is sensitive to the order
in which the data are sorted, as demonstrated in the following:

library(nlme)
data(Ovary)

gls_raw <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), data = Ovary,
               correlation = corAR1(form = ~ 1 | Mare),
               weights = varPower())
Mares <- levels(gls_raw$groups)
V_raw <- lapply(Mares, function(g) getVarCov(gls_raw, individual = g))

Ovary_sorted <- Ovary[with(Ovary, order(Mare, Time)),]
gls_sorted <- update(gls_raw, data = Ovary_sorted)
V_sorted <- lapply(Mares, function(g) getVarCov(gls_sorted, individual = g))
all.equal(gls_raw$modelStruct, gls_sorted$modelStruct)
all.equal(V_raw, V_sorted)

See here for more details and a simple patch:
http://jepusto.github.io//Bug-in-nlme-getVarCov
Or here for just the R code:
https://gist.github.com/jepusto/5477dbe3efa992a3d42c2073ccb12ce4

James

	[[alternative HTML version deleted]]


From suharto_anggono at yahoo.com  Thu Aug 11 18:19:49 2016
From: suharto_anggono at yahoo.com (Suharto Anggono Suharto Anggono)
Date: Thu, 11 Aug 2016 16:19:49 +0000 (UTC)
Subject: [Rd] table(exclude = NULL) always includes NA
References: <918688361.12806042.1470932389370.JavaMail.yahoo.ref@mail.yahoo.com>
Message-ID: <918688361.12806042.1470932389370.JavaMail.yahoo@mail.yahoo.com>

I stand corrected. The part "If set to 'NULL', it implies 'useNA="always"'." is even in the documentation in R 2.8.0. It was my fault not to check carefully.

I wonder, why "always" was chosen for 'useNA' for exclude = NULL.

Why exclude = NULL is so special? What about another 'exclude' of length zero, like character(0) (not c(), because c() is NULL)? I thought that, too. But then, I have no opinion about making it general.

It fits my expectation to override 'useNA' only if the user doesn't explicitly specify 'useNA'.

Thank you for looking into this.

My points:
Could R 2.7.2 behavior of table(<non-factor>, exclude = NULL) be brought back? But R 3.3.1 behavior is in R since version 2.8.0, rather long.
If not, I suggest changing summary(<logical>).
--------------------------------------------
On Thu, 11/8/16, Martin Maechler <maechler at stat.math.ethz.ch> wrote:

 Subject: Re: [Rd] table(exclude = NULL) always includes NA

@r-project.org
 Cc: "Martin Maechler" <maechler at stat.math.ethz.ch>
 Date: Thursday, 11 August, 2016, 12:39 AM

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Tue, 9 Aug 2016 15:35:41 +0200 writes:

>>>>> Suharto Anggono Suharto Anggono via R-devel <r-devel at r-project.org>
>>>>>     on Sun, 7 Aug 2016 15:32:19 +0000 writes:

> > This is an example from https://stat.ethz.ch/pipermail/r-help/2007-May/132573.html .
> 
> > With R 2.7.2:
> 
> > > a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
> > > table(a, b, exclude = NULL)
> >       b
> > a      1 2
> >   1    1 1
> >   2    2 0
> >   3    1 0
> >   <NA> 1 0
> 
> > With R 3.3.1:
> 
> > > a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
> > > table(a, b, exclude = NULL)
> >       b
> > a      1 2 <NA>
> >   1    1 1    0
> >   2    2 0    0
> >   3    1 0    0
> >   <NA> 1 0    0
> > > table(a, b, useNA = "ifany")
> >       b
> > a      1 2
> >   1    1 1
> >   2    2 0
> >   3    1 0
> >   <NA> 1 0
> > > table(a, b, exclude = NULL, useNA = "ifany")
> >       b
> > a      1 2 <NA>
> >   1    1 1    0
> >   2    2 0    0
> >   3    1 0    0
> >   <NA> 1 0    0
> 
> > For the example, in R 3.3.1, the result of 'table' with
> > exclude = NULL includes NA even if NA is not present. It is
> > different from R 2.7.2, that comes from factor(exclude = NULL), 
> > that includes NA only if NA is present.
> 
> I agree that this (R 3.3.1 behavior) seems undesirable and looks
> wrong, and the old (<= 2.2.7) behavior for  table(a,b,
> exclude=NULL) seems desirable to me.
> 
> 
> > >From R 3.3.1 help on 'table', in "Details" section:
> > 'useNA' controls if the table includes counts of 'NA' values: the allowed values correspond to never, only if the count is positive and even for zero counts.  This is overridden by specifying 'exclude = NULL'.
> 
> > Specifying 'exclude = NULL' overrides 'useNA' to what value? The documentation doesn't say. Looking at the code of function 'table', the value is "always".
> 
> Yes, it should be documented what happens for this case,
> (but read on ...)

and it is *not* true that the documentation does not say, since
2013, it has contained

exclude: levels to remove for all factors in ?...?.  If set to ?NULL?,
          it implies ?useNA = "always"?.  See ?Details? for its
          interpretation for non-factor arguments.


> > For the example, in R 3.3.1, the result like in R 2.7.2 can be obtained with useNA = "ifany" and 'exclude' unspecified.
> 
> Yes.  What should we do?
> I currently think that we'd want to change the line
> 
>      useNA <- if (!missing(exclude) && is.null(exclude)) "always"
> 
> to
> 
>      useNA <- if (!missing(exclude) && is.null(exclude)) "ifany" # was "always"
> 
> 
> which would not even contradict documentation, as indeed you
> mentioned above, the exact action here had not been documented.

The last part ("which ..") above is wrong, as mentioned earlier.

The above change entails behaviour which looks better to me;
however, the change *is* "against the current documentation".
and after experimentation (a "complete factorial design" of
argument settings), I'm not entirely happy with the result.... and one reason
is that   'exclude = NULL'  and  (e.g.)   'exclude = c()'
are (still) handled differently: From a usual interpreation,
both should mean 
  "do not exclude any factor entries (and levels) from tabulation"
but one of the two changes the default of 'useNA' and the other
does not.   If we want a change anyway (and have to update the doc),
it could be "more logical"  to replace the line above by

   useNA <- if (missing(useNA) && !missing(exclude) && !(NA %in% exclude)) "always"

notably, replacing 'useNA' *only* if it has not been specified,
which seems much closer to "typically expected" behavior..




> The change above at least does not break any of the standard R
> tests ('make check-all', i.e., including the recommended
> packages), which for me confirms that it may be "what is
> best"...
> 
> ----
> 
> Thank you for mentioning the important consequence for summary(<logical>).
> They can helping insight what a "probably best" behavior should
> be for these cases of table().
> 
> Martin Maechler,
> ETH Zurich
> 
> > The result of 'summary' of a logical vector is affected. As mentioned in http://stackoverflow.com/questions/26775501/r-dropping-nas-in-logical-column-levels , in the code of function 'summary.default', for logical, table(object, exclude = NULL) is used.
> 
> > With R 2.7.2:
> 
> > > log <- c(NA, logical(4), NA, !logical(2), NA)
> > > summary(log)
> >    Mode   FALSE    TRUE    NA's
> > logical       4       2       3
> > > summary(log[!is.na(log)])
> >    Mode   FALSE    TRUE
> > logical       4       2
> > > summary(TRUE)
> >    Mode    TRUE
> > logical       1
> 
> > With R 3.3.1:
> 
> > > log <- c(NA, logical(4), NA, !logical(2), NA)
> > > summary(log)
> >    Mode   FALSE    TRUE    NA's
> > logical       4       2       3
> > > summary(log[!is.na(log)])
> >    Mode   FALSE    TRUE    NA's
> > logical       4       2       0
> > > summary(TRUE)
> >    Mode    TRUE    NA's
> > logical       1       0
> 
> > In R 3.3.1, "NA's' is always in the result of 'summary' of a logical vector. It is unlike 'summary' of a numeric vector.
> > On the other hand, in R 3.3.1, FALSE is not in the result of 'summary' of a logical vector that doesn't  contain FALSE.
> 
> > I prefer the result of 'summary' of a logical vector like in R 2.7.2, or, alternatively, the result that always includes all possible values: FALSE, TRUE, NA.
> 
> I tend to agree, and strongly prefer the 'R(<=2.7.2)'-behavior
> for table() {and hence summary(<logical>)}.


From xie at yihui.name  Thu Aug 11 22:24:33 2016
From: xie at yihui.name (Yihui Xie)
Date: Thu, 11 Aug 2016 15:24:33 -0500
Subject: [Rd] Suppress LaTeX log during R CMD build
Message-ID: <CANROs4fzOn1y_7CDDdFzAWC1Lb6RORYznKVKVnzUv5=RJzj9hA@mail.gmail.com>

Hi,

When a package's documentation contains \Sexpr{}, R CMD build will
build the manual to PDF. I wonder if the full LaTeX log could be
suppressed in this case. Currently it looks like this:

$ R CMD build foo

* checking for file ?foo/DESCRIPTION? ... OK
* preparing ?foo?:
* checking DESCRIPTION meta-information ... OK
* installing the package to process help pages
* building the PDF package manual
Hmm ... looks like a package
Converting Rd files to LaTeX ......
Creating pdf output from LaTeX ...

This is pdfTeX, Version 3.14159265-2.6-1.40.17 (TeX Live 2016)
(preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode

(/private/var/folders/8r/zh8x49md6vsgskh23jrmy7p80000gn/T/RtmpWxPLW3/Rbuild52f3
1a8c19c2/foo/.Rd2pdf21235/Rd2.tex
LaTeX2e <2016/03/31>
Babel <3.9r> and hyphenation patterns for 22 language(s) loaded.
(/usr/local/texlive/2016basic/texmf-dist/tex/latex/base/book.cls
Document Class: book 2014/09/29 v1.4h Standard LaTeX document class
(/usr/local/texlive/2016basic/texmf-dist/tex/latex/base/bk10.clo))
(/Library/Frameworks/R.framework/Resources/share/texmf/tex/latex/Rd.sty
....

Regards,
Yihui
--
Yihui Xie <xieyihui at gmail.com>
Web: http://yihui.name


From kyleb at metrumrg.com  Fri Aug 12 08:15:33 2016
From: kyleb at metrumrg.com (Kyle Baron)
Date: Fri, 12 Aug 2016 01:15:33 -0500
Subject: [Rd] Quote symbol names under EXPORTS in tmp.def on Windows
In-Reply-To: <CAJ2Cw8S1bfQQwMOsPhc9xQ6xNKadGqPmmrXt6tjXsofKT_bqCA@mail.gmail.com>
References: <CAJ2Cw8S1bfQQwMOsPhc9xQ6xNKadGqPmmrXt6tjXsofKT_bqCA@mail.gmail.com>
Message-ID: <CAJ2Cw8TcNYv7fAbOoMNKPpu+Q-d4VcYhP_DWO=TE9tzp1bTLaA@mail.gmail.com>

Attaching a proper patch for this issue.  I will post a bug report
whenever new registrations are allowed.

Best Regards,
Kyle


On Sat, Aug 6, 2016 at 11:51 PM, Kyle Baron <kyleb at metrumrg.com> wrote:
>
> I originally posted on this topic on a different thread:
> https://stat.ethz.ch/pipermail/r-devel/2016-August/072938.html
>
> These sources suggested that a safe practice might be to put double
> quotes around symbol names in EXPORTS in case the symbol name is the
> same as a linker keyword:
>    - https://sourceware.org/binutils/docs/ld/Symbols.html#Symbols
>    - https://msdn.microsoft.com/en-us/library/163abkbh.aspx
>
> I wasn't sure how that related specifically to what Rtools is using,
> but when I made the following change to winshlib.mk (double quotes
> around symbol names in tmp.def), I was able to compile code without
> issue and get symbols like BASE (or other keywords) exported.
>
>
> Kyle
>
>
>
>
> ## ${R_HOME}/share/make/winshlib.mk
> 6a7,8
> > ADDQU = 's/[^ ][^ ]*/"&"/g'
> >
> 17c19
> <     $(NM) $^ | $(SED) -n $(SYMPAT) $(NM_FILTER) >> tmp.def; \
> ---
> >     $(NM) $^ | $(SED) -n $(SYMPAT) $(NM_FILTER) | $(SED) $(ADDQU) >> tmp.def; \
>
>
>
> code <- '
>
> void BASE(int *nin, double *x) {
>    int n = nin[0];
>    for (int i=0; i<n; i++) x[i] = x[i] * x[i];
> }
>
> void rd(int *nin, double *x) {
>    int n = nin[0];
>    for (int i=0; i<n; i++) x[i] = x[i] * x[i];
> }
>
> double EXPORTS = 2.1;
> int LIBRARY = 3;
> '
>
> writeLines(code, "src1.c")
>
> system("R CMD SHLIB src1.c")
> dyn.load("src1.dll")
>
> is.loaded("EXPORTS",PACKAGE="src1")
> is.loaded("BASE",PACKAGE="src1")
> is.loaded("rd",PACKAGE="src1")
>
> dyn.unload("src1.dll")
>
>
>
> --
> Kyle Baron
> Metrum Research Group




-- 
Kyle Baron
Metrum Research Group
kyleb at metrumrg.com
-------------- next part --------------
Index: winshlib.mk
===================================================================
--- winshlib.mk	(revision 71059)
+++ winshlib.mk	(working copy)
@@ -4,6 +4,8 @@
 
 BASE = $(shell basename $(SHLIB) .dll)
 
+ADDQU = 's/[^ ][^ ]*/"&"/g'
+
 ## do it with explicit rules as packages might add dependencies to this target
 ## (attempts to do this GNUishly failed for parallel makes,
 ## but we do want the link targets echoed)
@@ -14,7 +16,7 @@
 	    $(SHLIB_LD) -shared $(DLLFLAGS) -o $@ $(BASE)-win.def $(OBJECTS) $(ALL_LIBS); \
 	  else \
 	    echo EXPORTS > tmp.def; \
-	    $(NM) $^ | $(SED) -n $(SYMPAT) $(NM_FILTER) >> tmp.def; \
+	    $(NM) $^ | $(SED) -n $(SYMPAT) $(NM_FILTER) | $(SED) $(ADDQU)  >> tmp.def; \
 	    echo $(SHLIB_LD) -shared $(DLLFLAGS) -o $@ tmp.def $(OBJECTS) $(ALL_LIBS); \
 	    $(SHLIB_LD) -shared $(DLLFLAGS) -o $@ tmp.def $(OBJECTS) $(ALL_LIBS); \
 	    $(RM) tmp.def; \

From maechler at stat.math.ethz.ch  Fri Aug 12 10:12:01 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 12 Aug 2016 10:12:01 +0200
Subject: [Rd] table(exclude = NULL) always includes NA
In-Reply-To: <918688361.12806042.1470932389370.JavaMail.yahoo@mail.yahoo.com>
References: <918688361.12806042.1470932389370.JavaMail.yahoo.ref@mail.yahoo.com>
	<918688361.12806042.1470932389370.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <22445.34001.732030.322330@stat.math.ethz.ch>

>>>>> Suharto Anggono Suharto Anggono via R-devel <r-devel at r-project.org>
>>>>>     on Thu, 11 Aug 2016 16:19:49 +0000 writes:

    > I stand corrected. The part "If set to 'NULL', it implies
    > 'useNA="always"'." is even in the documentation in R
    > 2.8.0. It was my fault not to check carefully.  I wonder,
    > why "always" was chosen for 'useNA' for exclude = NULL.

me too.  "ifany" would seem more logical, and I am considering
changing to that as a 2nd step (if the 1st step, below) shows to
be feasible.

    > Why exclude = NULL is so special? What about another
    > 'exclude' of length zero, like character(0) (not c(),
    > because c() is NULL)? I thought that, too. But then, I
    > have no opinion about making it general.

As mentioned, I entirely agree with that {and you are right
about c() !!}.

    > It fits my expectation to override 'useNA' only if the
    > user doesn't explicitly specify 'useNA'.

    > Thank you for looking into this.

you are welcome.
As first step, I plan to commit the change to (*)

 useNA <- if (missing(useNA) && !missing(exclude) && !(NA %in% exclude)) "always"

as proposed yesterday,  and I'll eventually see / be notified
about the effect in CRAN space.

--
(*) slightly more efficiently, I'll be using match() directly instead of %in%

    > My points:
    > Could R 2.7.2 behavior of table(<non-factor>, exclude = NULL) be brought back? But R 3.3.1 behavior is in R since version 2.8.0, rather long.

you are right... but then, the places / cases where the behavior
would change back should be quite rare.

    > If not, I suggest changing summary(<logical>).
    > --------------------------------------------

Thank you for your feedback, Suharto!
Martin

    > On Thu, 11/8/16, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
    > 
    >  Subject: Re: [Rd] table(exclude = NULL) always includes NA
    > 
    > @r-project.org
    >  Cc: "Martin Maechler" <maechler at stat.math.ethz.ch>
    >  Date: Thursday, 11 August, 2016, 12:39 AM
    > 
    > >>>>> Martin Maechler <maechler at stat.math.ethz.ch>
    > >>>>>     on Tue, 9 Aug 2016 15:35:41 +0200 writes:
    > 
    > >>>>> Suharto Anggono Suharto Anggono via R-devel <r-devel at r-project.org>
    > >>>>>     on Sun, 7 Aug 2016 15:32:19 +0000 writes:
    > 
    > > > This is an example from https://stat.ethz.ch/pipermail/r-help/2007-May/132573.html .
    > > 
    > > > With R 2.7.2:
    > > 
    > > > > a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
    > > > > table(a, b, exclude = NULL)
    > > >       b
    > > > a      1 2
    > > >   1    1 1
    > > >   2    2 0
    > > >   3    1 0
    > > >   <NA> 1 0
    > > 
    > > > With R 3.3.1:
    > > 
    > > > > a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
    > > > > table(a, b, exclude = NULL)
    > > >       b
    > > > a      1 2 <NA>
    > > >   1    1 1    0
    > > >   2    2 0    0
    > > >   3    1 0    0
    > > >   <NA> 1 0    0
    > > > > table(a, b, useNA = "ifany")
    > > >       b
    > > > a      1 2
    > > >   1    1 1
    > > >   2    2 0
    > > >   3    1 0
    > > >   <NA> 1 0
    > > > > table(a, b, exclude = NULL, useNA = "ifany")
    > > >       b
    > > > a      1 2 <NA>
    > > >   1    1 1    0
    > > >   2    2 0    0
    > > >   3    1 0    0
    > > >   <NA> 1 0    0
    > > 
    > > > For the example, in R 3.3.1, the result of 'table' with
    > > > exclude = NULL includes NA even if NA is not present. It is
    > > > different from R 2.7.2, that comes from factor(exclude = NULL), 
    > > > that includes NA only if NA is present.
    > > 
    > > I agree that this (R 3.3.1 behavior) seems undesirable and looks
    > > wrong, and the old (<= 2.2.7) behavior for  table(a,b,
    > > exclude=NULL) seems desirable to me.
    > > 
    > > 
    > > > >From R 3.3.1 help on 'table', in "Details" section:
    > > > 'useNA' controls if the table includes counts of 'NA' values: the allowed values correspond to never, only if the count is positive and even for zero counts.  This is overridden by specifying 'exclude = NULL'.
    > > 
    > > > Specifying 'exclude = NULL' overrides 'useNA' to what value? The documentation doesn't say. Looking at the code of function 'table', the value is "always".
    > > 
    > > Yes, it should be documented what happens for this case,
    > > (but read on ...)
    > 
    > and it is *not* true that the documentation does not say, since
    > 2013, it has contained
    > 
    > exclude: levels to remove for all factors in ?...?.  If set to ?NULL?,
    >           it implies ?useNA = "always"?.  See ?Details? for its
    >           interpretation for non-factor arguments.
    > 
    > 
    > > > For the example, in R 3.3.1, the result like in R 2.7.2 can be obtained with useNA = "ifany" and 'exclude' unspecified.
    > > 
    > > Yes.  What should we do?
    > > I currently think that we'd want to change the line
    > > 
    > >      useNA <- if (!missing(exclude) && is.null(exclude)) "always"
    > > 
    > > to
    > > 
    > >      useNA <- if (!missing(exclude) && is.null(exclude)) "ifany" # was "always"
    > > 
    > > 
    > > which would not even contradict documentation, as indeed you
    > > mentioned above, the exact action here had not been documented.
    > 
    > The last part ("which ..") above is wrong, as mentioned earlier.
    > 
    > The above change entails behaviour which looks better to me;
    > however, the change *is* "against the current documentation".
    > and after experimentation (a "complete factorial design" of
    > argument settings), I'm not entirely happy with the result.... and one reason
    > is that   'exclude = NULL'  and  (e.g.)   'exclude = c()'
    > are (still) handled differently: From a usual interpreation,
    > both should mean 
    >   "do not exclude any factor entries (and levels) from tabulation"
    > but one of the two changes the default of 'useNA' and the other
    > does not.   If we want a change anyway (and have to update the doc),
    > it could be "more logical"  to replace the line above by
    > 
    >    useNA <- if (missing(useNA) && !missing(exclude) && !(NA %in% exclude)) "always"
    > 
    > notably, replacing 'useNA' *only* if it has not been specified,
    > which seems much closer to "typically expected" behavior..
    > 
    > 
    > 
    > 
    > > The change above at least does not break any of the standard R
    > > tests ('make check-all', i.e., including the recommended
    > > packages), which for me confirms that it may be "what is
    > > best"...
    > > 
    > > ----
    > > 
    > > Thank you for mentioning the important consequence for summary(<logical>).
    > > They can helping insight what a "probably best" behavior should
    > > be for these cases of table().
    > > 
    > > Martin Maechler,
    > > ETH Zurich
    > > 
    > > > The result of 'summary' of a logical vector is affected. As mentioned in http://stackoverflow.com/questions/26775501/r-dropping-nas-in-logical-column-levels , in the code of function 'summary.default', for logical, table(object, exclude = NULL) is used.
    > > 
    > > > With R 2.7.2:
    > > 
    > > > > log <- c(NA, logical(4), NA, !logical(2), NA)
    > > > > summary(log)
    > > >    Mode   FALSE    TRUE    NA's
    > > > logical       4       2       3
    > > > > summary(log[!is.na(log)])
    > > >    Mode   FALSE    TRUE
    > > > logical       4       2
    > > > > summary(TRUE)
    > > >    Mode    TRUE
    > > > logical       1
    > > 
    > > > With R 3.3.1:
    > > 
    > > > > log <- c(NA, logical(4), NA, !logical(2), NA)
    > > > > summary(log)
    > > >    Mode   FALSE    TRUE    NA's
    > > > logical       4       2       3
    > > > > summary(log[!is.na(log)])
    > > >    Mode   FALSE    TRUE    NA's
    > > > logical       4       2       0
    > > > > summary(TRUE)
    > > >    Mode    TRUE    NA's
    > > > logical       1       0
    > > 
    > > > In R 3.3.1, "NA's' is always in the result of 'summary' of a logical vector. It is unlike 'summary' of a numeric vector.
    > > > On the other hand, in R 3.3.1, FALSE is not in the result of 'summary' of a logical vector that doesn't  contain FALSE.
    > > 
    > > > I prefer the result of 'summary' of a logical vector like in R 2.7.2, or, alternatively, the result that always includes all possible values: FALSE, TRUE, NA.
    > > 
    > > I tend to agree, and strongly prefer the 'R(<=2.7.2)'-behavior
    > > for table() {and hence summary(<logical>)}.
    >


From maechler at stat.math.ethz.ch  Fri Aug 12 13:00:48 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 12 Aug 2016 13:00:48 +0200
Subject: [Rd] ifelse() woes ... can we agree on a ifelse2() ?
In-Reply-To: <deb934cc-d781-8011-d29b-f1cbcf60407e@gmail.com>
References: <22437.61893.901739.933100@stat.math.ethz.ch>
	<deb934cc-d781-8011-d29b-f1cbcf60407e@gmail.com>
Message-ID: <22445.44128.203938.13068@stat.math.ethz.ch>

Excuse for the delay;  I had waited for other / additional
comments and reactions (and been distracted with other urgent issues),
but do want to keep this thread alive  [inline] ..

>>>>> Duncan Murdoch <murdoch.duncan at gmail.com>
>>>>>     on Sat, 6 Aug 2016 11:30:08 -0400 writes:

    > On 06/08/2016 10:18 AM, Martin Maechler wrote:
    >> Dear R-devel readers,
    >> ( = people interested in the improvement and development of R).
    >> 
    >> This is not the first time that this topic is raised.
    >> and I am in now state to promise that anything will result from
    >> this thread ...
    >> 
    >> Still, I think the majority among us has agreed that
    >> 
    >> 1) you should never use ifelse(test, yes, no)
    >> if you know that length(test) == 1, in which case
    >> if(test) yes else no
    >> is much preferable  (though not equivalent: ifelse(NA, 1, 0) !)
    >> 
    >> 2) it is potentially inefficient by design since it (almost
    >> always) evaluates both 'yes' and 'no' independent of 'test'.
    >> 
    >> 3) is a nice syntax in principle, and so is often used, also by
    >> myself, inspite of '2)'  just because nicely self-explaining
    >> code is sometimes clearly preferable to more efficient but
    >> less readable code.
    >> 
    >> 4) it is too late to change ifelse() fundamentally, because it
    >> works according to its documentation
    >> (and I think very much the same as in S and S-PLUS) and has
    >> done so for ages.
    >> 
    >> ---- and if you don't agree with  1) -- 4)  you may pretend for
    >> a moment instead of starting to discuss them thoroughly.
    >> 
    >> Recently, a useR has alerted me to the fact that my Rmpfr's
    >> package arbitrary (high) precision numbers don't work for a
    >> relatively simple function.
    >> 
    >> As I found the reason was that that simple function used
    >> ifelse(.,.,.)
    >> and the problem was that the (*simplified*) gist of ifelse(test, yes, no)
    >> is
    >> 
    >> test <- as.logical(test)
    >> ans <- test
    >> ans[ test] <- yes
    >> ans[!test] <- no
    >> 
    >> and in case of Rmpfr, the problem is that
    >> 
    >> <logical>[<logical>]  <-  <mpfr>
    >> 
    >> cannot work correctly
    >> 
    >> [[ maybe it could in a future R, if I could define a method
    >> 
    >> setReplaceMethod("[", c("logical,"logical","mpfr"),
    >> function(x,i,value) .........)
    >> 
    >> but that currently fails as the C-low-level dispatch for '[<-'
    >> does not look at the full signature
    >> ]]
    >> 
    >> I vaguely remember having seen proposals for
    >> light weight substitutes for ifelse(),  called
    >> ifelse1() or
    >> ifelse2() etc...
    >> 
    >> and I wonder if we should not try to see if there was a version
    >> that could go into "base R" (maybe the 'utils' package, not
    >> 'base'; that's not so important).
    >> 
    >> One difference to ifelse() would be that the type/mode/class of the result
    >> is not initialized by logical, by default but rather by the
    >> "common type" of  yes and no ... maybe determined  by  c()'ing
    >> parts of those.
    >> The idea was that this would work for most S3 and S4 objects for
    >> which logical 'length', (logical) indexing '[', and 'rep()' works.

    > I think your description is more or less:

    > test <- as.logical(test)
    > ans <- c(yes, no)[seq_along(test)]
    > ans <- ans[seq_along(test)]
    > ans[ test] <- yes[test]
    > ans[!test] <- no[!test]

    > (though the implementation details would vary, and recycling rules would 
    > apply if the lengths of test, yes and no weren't all equal).

Yes, more or less,  notably, conceptually a version of  c(yes, no) 
to get a common mode/class.... but as you mention below, c()
cannot be used alone because famously "misbehaves" e.g., for factors.

    > You didn't mention what happens with attributes.  Currently we keep the 
    > attributes from test, which probably doesn't make a lot of sense. In 
    > particular,

    > ifelse(c(TRUE, FALSE), factor(2:3), factor(3:4))

    > returns nonsense, as does my translation of your idea above.

yes.   factor()s  or "Date" or "POSIXt" objects are  'base R'
examples where an alternative  ifelse() would have to work
(ideally automatically with no special-case code!) by "keeping
the class".


    > That implementation also drops attributes. I'd say this definition would 
    > make more sense:

    > test <- as.logical(test)
    > ans <- yes
    > ans[!test] <- no[!test]

    > (and this is suggested as an alternative in ?ifelse).  It generates an 
    > error in my test example, which seems reasonable.  It gives the "right" 
    > thing in

    > ifelse(c(TRUE, FALSE), factor(2:3), factor(3:2))

    > because the factors have the same levels.

    > The lack of symmetry between yes and no is slightly irksome, but I would 
    > think in most cases you could choose attributes from just one of yes and 
    > no to be what you want in the result (and use !test to swap the order if 
    > necessary).

Yes, you are right, that's a good point:
if we don't want to "take everything" from 'test' (which is
symmetric in 'yes' and 'no'), but rather from 'yes' and 'no', we
either must be "very strict" -- as e.g., dplyr::if_else() -- or
then have (border) cases where the first argument takes
precedence over the second as in other cases in R
e.g. how names/dimnames of the result are determined in cbind(),
rbind(), and I think data.frame().


    >> One possibility would also be to consider  a "numbers-only" or
    >> rather "same type"-only {e.g., would also work for characters}
    >> version.

    > I don't know what you mean by these.

In the mean time, Bob Rudis mentioned   dplyr::if_else(),
which is very relevant, thank you Bob!

As I have found, that actually works in such a "same type"-only way:
It does not try to coerce, but gives an error when the classes
differ, even in this somewhat debatable case :

   > dplyr::if_else(c(TRUE, FALSE), 2:3, 0+10:11)
   Error: `false` has type 'double' not 'integer'
   >

As documented, if_else() is clearly stricter than ifelse()
and e.g., also does no recycling (but of length() 1).

I'm dropping the remaining issue of efficiency as I replied to
that (on Aug. 8) in the other branch of this thread.

Hadley's  if_else() is really nice in its clean approach and
does fulfill the main important desideratum, and hence e.g.,
works for "Date" etc.

My goal however would still be considerably closer to
base::ifelse(), namely an alternative would
- *coerce* types/classes as much as sensible,
- (by default at least) recycle  (test, yes, no) to common length

Unfortunately I've been too busy these days, also with a couple
of non-R (and some non-work) matters, so am not yet proposing
concrete alternatives.

More thoughts, ideas and proposals are still very welcome; as
with Duncan, it does make much sense to discuss the theme
already relatively abstractly!

Martin


From h.wickham at gmail.com  Fri Aug 12 18:31:12 2016
From: h.wickham at gmail.com (Hadley Wickham)
Date: Fri, 12 Aug 2016 11:31:12 -0500
Subject: [Rd] ifelse() woes ... can we agree on a ifelse2() ?
In-Reply-To: <22445.44128.203938.13068@stat.math.ethz.ch>
References: <22437.61893.901739.933100@stat.math.ethz.ch>
	<deb934cc-d781-8011-d29b-f1cbcf60407e@gmail.com>
	<22445.44128.203938.13068@stat.math.ethz.ch>
Message-ID: <CABdHhvEtBu5=zPuhXNxtTH_5vBbmqbr-U0j3WH9ftjUeABqEWA@mail.gmail.com>

>     >> One possibility would also be to consider  a "numbers-only" or
>     >> rather "same type"-only {e.g., would also work for characters}
>     >> version.
>
>     > I don't know what you mean by these.
>
> In the mean time, Bob Rudis mentioned   dplyr::if_else(),
> which is very relevant, thank you Bob!
>
> As I have found, that actually works in such a "same type"-only way:
> It does not try to coerce, but gives an error when the classes
> differ, even in this somewhat debatable case :
>
>    > dplyr::if_else(c(TRUE, FALSE), 2:3, 0+10:11)
>    Error: `false` has type 'double' not 'integer'
>    >
>
> As documented, if_else() is clearly stricter than ifelse()
> and e.g., also does no recycling (but of length() 1).

I agree that if_else() is currently too strict - it's particularly
annoying if you want to replace some values with a missing:

x <- sample(10)
if_else(x > 5, NA, x)
#  Error: `false` has type 'integer' not 'logical'

But I would like to make sure that this remains an error:

if_else(x > 5, x, "BLAH")

Because that seems more likely to be a user error (but reasonable
people might certainly believe that it should just work)

dplyr is more accommodating in other places (i.e. in bind_rows(),
collapse() and the joins) but it's surprisingly hard to get all the
details right. For example, what should the result of this call be?

if_else(c(TRUE, FALSE), factor(c("a", "b")), factor(c("c", "b"))

Strictly speaking I think you could argue it's an error, but that's
not very user-friendly. Should it be a factor with the union of the
levels? Should it be a character vector + warning? Should the
behaviour change if one set of levels is a subset of the other set?

There are similar issues for POSIXct (if the time zones are different,
which should win?), and difftimes (similarly for units).  Ideally
you'd like the behaviour to be extensible for new S3 classes, which
suggests it should be a generic (and for the most general case, it
would need to dispatch on both arguments).

Hadley

-- 
http://hadley.nz


From maechler at stat.math.ethz.ch  Fri Aug 12 23:29:51 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 12 Aug 2016 23:29:51 +0200
Subject: [Rd] table(exclude = NULL) always includes NA
In-Reply-To: <22445.34001.732030.322330@stat.math.ethz.ch>
References: <918688361.12806042.1470932389370.JavaMail.yahoo.ref@mail.yahoo.com>
	<918688361.12806042.1470932389370.JavaMail.yahoo@mail.yahoo.com>
	<22445.34001.732030.322330@stat.math.ethz.ch>
Message-ID: <22446.16335.851074.541882@stat.math.ethz.ch>

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Fri, 12 Aug 2016 10:12:01 +0200 writes:

>>>>> Suharto Anggono Suharto Anggono via R-devel <r-devel at r-project.org>
>>>>>     on Thu, 11 Aug 2016 16:19:49 +0000 writes:

    >> I stand corrected. The part "If set to 'NULL', it implies
    >> 'useNA="always"'." is even in the documentation in R
    >> 2.8.0. It was my fault not to check carefully.  I wonder,
    >> why "always" was chosen for 'useNA' for exclude = NULL.

    > me too.  "ifany" would seem more logical, and I am
    > considering changing to that as a 2nd step (if the 1st
    > step, below) shows to be feasible.

    >> Why exclude = NULL is so special? What about another
    >> 'exclude' of length zero, like character(0) (not c(),
    >> because c() is NULL)? I thought that, too. But then, I
    >> have no opinion about making it general.

    > As mentioned, I entirely agree with that {and you are
    > right about c() !!}.

    >> It fits my expectation to override 'useNA' only if the
    >> user doesn't explicitly specify 'useNA'.

    >> Thank you for looking into this.

    > you are welcome.  As first step, I plan to commit the
    > change to (*)

    >  useNA <- if (missing(useNA) && !missing(exclude) && !(NA
    > %in% exclude)) "always"

    > as proposed yesterday, and I'll eventually see / be
    > notified about the effect in CRAN space.

and as I'm finding now,  20 minutes too late,   doing step 1
without doing step 2  is not feasible.
It gives many  0 counts for <NA>  e.g. for  exclude = "foo".


    > --
    > (*) slightly more efficiently, I'll be using match()
    > directly instead of %in%

    >> My points: Could R 2.7.2 behavior of table(<non-factor>,
    >> exclude = NULL) be brought back? But R 3.3.1 behavior is
    >> in R since version 2.8.0, rather long.

    > you are right... but then, the places / cases where the
    > behavior would change back should be quite rare.

    >> If not, I suggest changing summary(<logical>).
    >> --------------------------------------------

    > Thank you for your feedback, Suharto!  Martin

    >> On Thu, 11/8/16, Martin Maechler
    >> <maechler at stat.math.ethz.ch> wrote:
    >> 
    >> Subject: Re: [Rd] table(exclude = NULL) always includes
    >> NA
    >> 
    >> @r-project.org Cc: "Martin Maechler"
    >> <maechler at stat.math.ethz.ch> Date: Thursday, 11 August,
    >> 2016, 12:39 AM
    >> 
    >> >>>>> Martin Maechler <maechler at stat.math.ethz.ch> >>>>>
    >> on Tue, 9 Aug 2016 15:35:41 +0200 writes:
    >> 
    >> >>>>> Suharto Anggono Suharto Anggono via R-devel
    >> <r-devel at r-project.org> >>>>> on Sun, 7 Aug 2016 15:32:19
    >> +0000 writes:
    >> 
    >> > > This is an example from
    >> https://stat.ethz.ch/pipermail/r-help/2007-May/132573.html
    >> .
    >> > 
    >> > > With R 2.7.2:
    >> > 
    >> > > > a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
    >> > > > table(a, b, exclude = NULL) > > b > > a 1 2 > > 1 1
    >> 1 > > 2 2 0 > > 3 1 0 > > <NA> 1 0
    >> > 
    >> > > With R 3.3.1:
    >> > 
    >> > > > a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
    >> > > > table(a, b, exclude = NULL) > > b > > a 1 2 <NA> >
    >> > 1 1 1 0 > > 2 2 0 0 > > 3 1 0 0 > > <NA> 1 0 0 > > >
    >> table(a, b, useNA = "ifany") > > b > > a 1 2 > > 1 1 1 >
    >> > 2 2 0 > > 3 1 0 > > <NA> 1 0 > > > table(a, b, exclude
    >> = NULL, useNA = "ifany") > > b > > a 1 2 <NA> > > 1 1 1 0
    >> > > 2 2 0 0 > > 3 1 0 0 > > <NA> 1 0 0
    >> > 
    >> > > For the example, in R 3.3.1, the result of 'table'
    >> with > > exclude = NULL includes NA even if NA is not
    >> present. It is > > different from R 2.7.2, that comes
    >> from factor(exclude = NULL), > > that includes NA only if
    >> NA is present.
    >> > 
    >> > I agree that this (R 3.3.1 behavior) seems undesirable
    >> and looks > wrong, and the old (<= 2.2.7) behavior for
    >> table(a,b, > exclude=NULL) seems desirable to me.
    >> > 
    >> > 
    >> > > >From R 3.3.1 help on 'table', in "Details" section:
    >> > > 'useNA' controls if the table includes counts of 'NA'
    >> values: the allowed values correspond to never, only if
    >> the count is positive and even for zero counts.  This is
    >> overridden by specifying 'exclude = NULL'.
    >> > 
    >> > > Specifying 'exclude = NULL' overrides 'useNA' to what
    >> value? The documentation doesn't say. Looking at the code
    >> of function 'table', the value is "always".
    >> > 
    >> > Yes, it should be documented what happens for this
    >> case, > (but read on ...)
    >> 
    >> and it is *not* true that the documentation does not say,
    >> since 2013, it has contained
    >> 
    >> exclude: levels to remove for all factors in ?...?.  If
    >> set to ?NULL?, it implies ?useNA = "always"?.  See
    >> ?Details? for its interpretation for non-factor
    >> arguments.
    >> 
    >> 
    >> > > For the example, in R 3.3.1, the result like in R
    >> 2.7.2 can be obtained with useNA = "ifany" and 'exclude'
    >> unspecified.
    >> > 
    >> > Yes.  What should we do?  > I currently think that we'd
    >> want to change the line
    >> > 
    >> > useNA <- if (!missing(exclude) && is.null(exclude))
    >> "always"
    >> > 
    >> > to
    >> > 
    >> > useNA <- if (!missing(exclude) && is.null(exclude))
    >> "ifany" # was "always"
    >> > 
    >> > 
    >> > which would not even contradict documentation, as
    >> indeed you > mentioned above, the exact action here had
    >> not been documented.
    >> 
    >> The last part ("which ..") above is wrong, as mentioned
    >> earlier.
    >> 
    >> The above change entails behaviour which looks better to
    >> me; however, the change *is* "against the current
    >> documentation".  and after experimentation (a "complete
    >> factorial design" of argument settings), I'm not entirely
    >> happy with the result.... and one reason is that 'exclude
    >> = NULL' and (e.g.)  'exclude = c()' are (still) handled
    >> differently: From a usual interpreation, both should mean
    >> "do not exclude any factor entries (and levels) from
    >> tabulation" but one of the two changes the default of
    >> 'useNA' and the other does not.  If we want a change
    >> anyway (and have to update the doc), it could be "more
    >> logical" to replace the line above by
    >> 
    >> useNA <- if (missing(useNA) && !missing(exclude) && !(NA
    >> %in% exclude)) "always"
    >> 
    >> notably, replacing 'useNA' *only* if it has not been
    >> specified, which seems much closer to "typically
    >> expected" behavior..
    >> 
    >> 
    >> 
    >> 
    >> > The change above at least does not break any of the
    >> standard R > tests ('make check-all', i.e., including the
    >> recommended > packages), which for me confirms that it
    >> may be "what is > best"...
    >> > 
    >> > ----
    >> > 
    >> > Thank you for mentioning the important consequence for
    >> summary(<logical>).  > They can helping insight what a
    >> "probably best" behavior should > be for these cases of
    >> table().
    >> > 
    >> > Martin Maechler, > ETH Zurich
    >> > 
    >> > > The result of 'summary' of a logical vector is
    >> affected. As mentioned in
    >> http://stackoverflow.com/questions/26775501/r-dropping-nas-in-logical-column-levels
    >> , in the code of function 'summary.default', for logical,
    >> table(object, exclude = NULL) is used.
    >> > 
    >> > > With R 2.7.2:
    >> > 
    >> > > > log <- c(NA, logical(4), NA, !logical(2), NA) > > >
    >> summary(log) > > Mode FALSE TRUE NA's > > logical 4 2 3 >
    >> > > summary(log[!is.na(log)]) > > Mode FALSE TRUE > >
    >> logical 4 2 > > > summary(TRUE) > > Mode TRUE > > logical
    >> 1
    >> > 
    >> > > With R 3.3.1:
    >> > 
    >> > > > log <- c(NA, logical(4), NA, !logical(2), NA) > > >
    >> summary(log) > > Mode FALSE TRUE NA's > > logical 4 2 3 >
    >> > > summary(log[!is.na(log)]) > > Mode FALSE TRUE NA's >
    >> > logical 4 2 0 > > > summary(TRUE) > > Mode TRUE NA's >
    >> > logical 1 0
    >> > 
    >> > > In R 3.3.1, "NA's' is always in the result of
    >> 'summary' of a logical vector. It is unlike 'summary' of
    >> a numeric vector.  > > On the other hand, in R 3.3.1,
    >> FALSE is not in the result of 'summary' of a logical
    >> vector that doesn't contain FALSE.
    >> > 
    >> > > I prefer the result of 'summary' of a logical vector
    >> like in R 2.7.2, or, alternatively, the result that
    >> always includes all possible values: FALSE, TRUE, NA.
    >> > 
    >> > I tend to agree, and strongly prefer the
    >> 'R(<=2.7.2)'-behavior > for table() {and hence
    >> summary(<logical>)}.
    >> 

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From suharto_anggono at yahoo.com  Sun Aug 14 05:42:08 2016
From: suharto_anggono at yahoo.com (Suharto Anggono Suharto Anggono)
Date: Sun, 14 Aug 2016 03:42:08 +0000 (UTC)
Subject: [Rd] table(exclude = NULL) always includes NA
References: <540967018.14196661.1471146128783.JavaMail.yahoo.ref@mail.yahoo.com>
Message-ID: <540967018.14196661.1471146128783.JavaMail.yahoo@mail.yahoo.com>

useNA <- if (missing(useNA) && !missing(exclude) && !(NA %in% exclude)) "ifany"

An example where it change 'table' result for non-factor input, from https://stat.ethz.ch/pipermail/r-help/2005-April/069053.html :
x <- c(1,2,3,3,NA)
table(as.integer(x), exclude=NaN)

I bring the example up, in case that the change in result is not intended.
--------------------------------------------
On Sat, 13/8/16, Martin Maechler <maechler at stat.math.ethz.ch> wrote:

 Subject: Re: [Rd] table(exclude = NULL) always includes NA
 To: "Martin Maechler" <maechler at stat.math.ethz.ch>

@r-project.org
 Date: Saturday, 13 August, 2016, 4:29 AM

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Fri, 12 Aug 2016 10:12:01 +0200 writes:

>>>>> Suharto Anggono Suharto Anggono via R-devel <r-devel at r-project.org>
>>>>>     on Thu, 11 Aug 2016 16:19:49 +0000 writes:

    >> I stand corrected. The part "If set to 'NULL', it implies
    >> 'useNA="always"'." is even in the documentation in R
    >> 2.8.0. It was my fault not to check carefully.  I wonder,
    >> why "always" was chosen for 'useNA' for exclude = NULL.

    > me too.  "ifany" would seem more logical, and I am
    > considering changing to that as a 2nd step (if the 1st
    > step, below) shows to be feasible.

    >> Why exclude = NULL is so special? What about another
    >> 'exclude' of length zero, like character(0) (not c(),
    >> because c() is NULL)? I thought that, too. But then, I
    >> have no opinion about making it general.

    > As mentioned, I entirely agree with that {and you are
    > right about c() !!}.

    >> It fits my expectation to override 'useNA' only if the
    >> user doesn't explicitly specify 'useNA'.

    >> Thank you for looking into this.

    > you are welcome.  As first step, I plan to commit the
    > change to (*)

    >  useNA <- if (missing(useNA) && !missing(exclude) && !(NA
    > %in% exclude)) "always"

    > as proposed yesterday, and I'll eventually see / be
    > notified about the effect in CRAN space.

and as I'm finding now,  20 minutes too late,   doing step 1
without doing step 2  is not feasible.
It gives many  0 counts for <NA>  e.g. for  exclude = "foo".



    > --
    > (*) slightly more efficiently, I'll be using match()
    > directly instead of %in%

    >> My points: Could R 2.7.2 behavior of table(<non-factor>,
    >> exclude = NULL) be brought back? But R 3.3.1 behavior is
    >> in R since version 2.8.0, rather long.

    > you are right... but then, the places / cases where the
    > behavior would change back should be quite rare.

    >> If not, I suggest changing summary(<logical>).
    >> --------------------------------------------

    > Thank you for your feedback, Suharto!  Martin

    >> On Thu, 11/8/16, Martin Maechler
    >> <maechler at stat.math.ethz.ch> wrote:
    >> 
    >> Subject: Re: [Rd] table(exclude = NULL) always includes
    >> NA
    >> 
    >> @r-project.org Cc: "Martin Maechler"
    >> <maechler at stat.math.ethz.ch> Date: Thursday, 11 August,
    >> 2016, 12:39 AM
    >> 
    >> >>>>> Martin Maechler <maechler at stat.math.ethz.ch> >>>>>
    >> on Tue, 9 Aug 2016 15:35:41 +0200 writes:
    >> 
    >> >>>>> Suharto Anggono Suharto Anggono via R-devel
    >> <r-devel at r-project.org> >>>>> on Sun, 7 Aug 2016 15:32:19
    >> +0000 writes:
    >> 
    >> > > This is an example from
    >> https://stat.ethz.ch/pipermail/r-help/2007-May/132573.html
    >> .
    >> > 
    >> > > With R 2.7.2:
    >> > 
    >> > > > a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
    >> > > > table(a, b, exclude = NULL) > > b > > a 1 2 > > 1 1
    >> 1 > > 2 2 0 > > 3 1 0 > > <NA> 1 0
    >> > 
    >> > > With R 3.3.1:
    >> > 
    >> > > > a <- c(1, 1, 2, 2, NA, 3); b <- c(2, 1, 1, 1, 1, 1)
    >> > > > table(a, b, exclude = NULL) > > b > > a 1 2 <NA> >
    >> > 1 1 1 0 > > 2 2 0 0 > > 3 1 0 0 > > <NA> 1 0 0 > > >
    >> table(a, b, useNA = "ifany") > > b > > a 1 2 > > 1 1 1 >
    >> > 2 2 0 > > 3 1 0 > > <NA> 1 0 > > > table(a, b, exclude
    >> = NULL, useNA = "ifany") > > b > > a 1 2 <NA> > > 1 1 1 0
    >> > > 2 2 0 0 > > 3 1 0 0 > > <NA> 1 0 0
    >> > 
    >> > > For the example, in R 3.3.1, the result of 'table'
    >> with > > exclude = NULL includes NA even if NA is not
    >> present. It is > > different from R 2.7.2, that comes
    >> from factor(exclude = NULL), > > that includes NA only if
    >> NA is present.
    >> > 
    >> > I agree that this (R 3.3.1 behavior) seems undesirable
    >> and looks > wrong, and the old (<= 2.2.7) behavior for
    >> table(a,b, > exclude=NULL) seems desirable to me.
    >> > 
    >> > 
    >> > > >From R 3.3.1 help on 'table', in "Details" section:
    >> > > 'useNA' controls if the table includes counts of 'NA'
    >> values: the allowed values correspond to never, only if
    >> the count is positive and even for zero counts.  This is
    >> overridden by specifying 'exclude = NULL'.
    >> > 
    >> > > Specifying 'exclude = NULL' overrides 'useNA' to what
    >> value? The documentation doesn't say. Looking at the code
    >> of function 'table', the value is "always".
    >> > 
    >> > Yes, it should be documented what happens for this
    >> case, > (but read on ...)
    >> 
    >> and it is *not* true that the documentation does not say,
    >> since 2013, it has contained
    >> 
    >> exclude: levels to remove for all factors in ?...?.  If
    >> set to ?NULL?, it implies ?useNA = "always"?.  See
    >> ?Details? for its interpretation for non-factor
    >> arguments.
    >> 
    >> 
    >> > > For the example, in R 3.3.1, the result like in R
    >> 2.7.2 can be obtained with useNA = "ifany" and 'exclude'
    >> unspecified.
    >> > 
    >> > Yes.  What should we do?  > I currently think that we'd
    >> want to change the line
    >> > 
    >> > useNA <- if (!missing(exclude) && is.null(exclude))
    >> "always"
    >> > 
    >> > to
    >> > 
    >> > useNA <- if (!missing(exclude) && is.null(exclude))
    >> "ifany" # was "always"
    >> > 
    >> > 
    >> > which would not even contradict documentation, as
    >> indeed you > mentioned above, the exact action here had
    >> not been documented.
    >> 
    >> The last part ("which ..") above is wrong, as mentioned
    >> earlier.
    >> 
    >> The above change entails behaviour which looks better to
    >> me; however, the change *is* "against the current
    >> documentation".  and after experimentation (a "complete
    >> factorial design" of argument settings), I'm not entirely
    >> happy with the result.... and one reason is that 'exclude
    >> = NULL' and (e.g.)  'exclude = c()' are (still) handled
    >> differently: From a usual interpreation, both should mean
    >> "do not exclude any factor entries (and levels) from
    >> tabulation" but one of the two changes the default of
    >> 'useNA' and the other does not.  If we want a change
    >> anyway (and have to update the doc), it could be "more
    >> logical" to replace the line above by
    >> 
    >> useNA <- if (missing(useNA) && !missing(exclude) && !(NA
    >> %in% exclude)) "always"
    >> 
    >> notably, replacing 'useNA' *only* if it has not been
    >> specified, which seems much closer to "typically
    >> expected" behavior..
    >> 
    >> 
    >> 
    >> 
    >> > The change above at least does not break any of the
    >> standard R > tests ('make check-all', i.e., including the
    >> recommended > packages), which for me confirms that it
    >> may be "what is > best"...
    >> > 
    >> > ----
    >> > 
    >> > Thank you for mentioning the important consequence for
    >> summary(<logical>).  > They can helping insight what a
    >> "probably best" behavior should > be for these cases of
    >> table().
    >> > 
    >> > Martin Maechler, > ETH Zurich
    >> > 
    >> > > The result of 'summary' of a logical vector is
    >> affected. As mentioned in
    >> http://stackoverflow.com/questions/26775501/r-dropping-nas-in-logical-column-levels
    >> , in the code of function 'summary.default', for logical,
    >> table(object, exclude = NULL) is used.
    >> > 
    >> > > With R 2.7.2:
    >> > 
    >> > > > log <- c(NA, logical(4), NA, !logical(2), NA) > > >
    >> summary(log) > > Mode FALSE TRUE NA's > > logical 4 2 3 >
    >> > > summary(log[!is.na(log)]) > > Mode FALSE TRUE > >
    >> logical 4 2 > > > summary(TRUE) > > Mode TRUE > > logical
    >> 1
    >> > 
    >> > > With R 3.3.1:
    >> > 
    >> > > > log <- c(NA, logical(4), NA, !logical(2), NA) > > >
    >> summary(log) > > Mode FALSE TRUE NA's > > logical 4 2 3 >
    >> > > summary(log[!is.na(log)]) > > Mode FALSE TRUE NA's >
    >> > logical 4 2 0 > > > summary(TRUE) > > Mode TRUE NA's >
    >> > logical 1 0
    >> > 
    >> > > In R 3.3.1, "NA's' is always in the result of
    >> 'summary' of a logical vector. It is unlike 'summary' of
    >> a numeric vector.  > > On the other hand, in R 3.3.1,
    >> FALSE is not in the result of 'summary' of a logical
    >> vector that doesn't contain FALSE.
    >> > 
    >> > > I prefer the result of 'summary' of a logical vector
    >> like in R 2.7.2, or, alternatively, the result that
    >> always includes all possible values: FALSE, TRUE, NA.
    >> > 
    >> > I tend to agree, and strongly prefer the
    >> 'R(<=2.7.2)'-behavior > for table() {and hence
    >> summary(<logical>)}.

    >> 

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From maechler at stat.math.ethz.ch  Mon Aug 15 11:07:43 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Mon, 15 Aug 2016 11:07:43 +0200
Subject: [Rd] table(exclude = NULL) always includes NA
In-Reply-To: <540967018.14196661.1471146128783.JavaMail.yahoo@mail.yahoo.com>
References: <540967018.14196661.1471146128783.JavaMail.yahoo.ref@mail.yahoo.com>
	<540967018.14196661.1471146128783.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <22449.34399.349376.938875@stat.math.ethz.ch>

>>>>> Suharto Anggono Suharto Anggono <suharto_anggono at yahoo.com>
>>>>>     on Sun, 14 Aug 2016 03:42:08 +0000 writes:

    > useNA <- if (missing(useNA) && !missing(exclude) && !(NA %in% exclude)) "ifany"
    > An example where it change 'table' result for non-factor input, from https://stat.ethz.ch/pipermail/r-help/2005-April/069053.html :

    > x <- c(1,2,3,3,NA)
    > table(as.integer(x), exclude=NaN)

    > I bring the example up, in case that the change in result is not intended.

Thanks a lot, Suharto.

To me, the example is convincing that the change (I commited
Friday), svn rev 71087 & 71088,   are a clear improvement:

(As you surely know, but not all the other readers:)
Before the change, the above example gave *different* results
for  'x'  and  'as.integer(x)', the integer case *not* counting the NAs,
whereas with the change in effect, they are the same:

> x <- as.integer(dx <- c(1,2,3,3,NA))
> table(x, exclude=NaN); table(dx, exclude=NaN)
x
   1    2    3 <NA> 
   1    1    2    1 
dx
   1    2    3 <NA> 
   1    1    2    1 
> 

--
But the change has affected 6-8 (of the 8000+) CRAN packages
which I am investigating now and probably will be in contact with the
package maintainers after that.

Martin


From maechler at stat.math.ethz.ch  Mon Aug 15 12:35:41 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Mon, 15 Aug 2016 12:35:41 +0200
Subject: [Rd] table(exclude = NULL) always includes NA
In-Reply-To: <22449.34399.349376.938875@stat.math.ethz.ch>
References: <540967018.14196661.1471146128783.JavaMail.yahoo.ref@mail.yahoo.com>
	<540967018.14196661.1471146128783.JavaMail.yahoo@mail.yahoo.com>
	<22449.34399.349376.938875@stat.math.ethz.ch>
Message-ID: <22449.39677.11989.207005@stat.math.ethz.ch>

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Mon, 15 Aug 2016 11:07:43 +0200 writes:

>>>>> Suharto Anggono Suharto Anggono <suharto_anggono at yahoo.com>
>>>>>     on Sun, 14 Aug 2016 03:42:08 +0000 writes:

    >> useNA <- if (missing(useNA) && !missing(exclude) && !(NA %in% exclude)) "ifany"
    >> An example where it change 'table' result for non-factor input, from https://stat.ethz.ch/pipermail/r-help/2005-April/069053.html :

    >> x <- c(1,2,3,3,NA)
    >> table(as.integer(x), exclude=NaN)

    >> I bring the example up, in case that the change in result is not intended.

    > Thanks a lot, Suharto.

    > To me, the example is convincing that the change (I commited
    > Friday), svn rev 71087 & 71088,   are a clear improvement:

    > (As you surely know, but not all the other readers:)
    > Before the change, the above example gave *different* results
    > for  'x'  and  'as.integer(x)', the integer case *not* counting the NAs,
    > whereas with the change in effect, they are the same:

    >> x <- as.integer(dx <- c(1,2,3,3,NA))
    >> table(x, exclude=NaN); table(dx, exclude=NaN)
    > x
    > 1    2    3 <NA> 
    > 1    1    2    1 
    > dx
    > 1    2    3 <NA> 
    > 1    1    2    1 
    >> 

    > --
    > But the change has affected 6-8 (of the 8000+) CRAN packages
    > which I am investigating now and probably will be in contact with the
    > package maintainers after that.

There has been another bug in table(), since the time  'useNA'
was introduced, which gives (in released R, R-patched, or R-devel):

  > table(1:3, exclude = 1, useNA = "ifany")

     2    3 <NA> 
     1    1    1 
  >

and that bug now (in R-devel, after my changes) triggers in
cases it did not previously, notably in
 
    table(1:3, exclude = 1)

which now does set 'useNA = "ifany"' and so gives the same silly
result as the one above.

The reason for this bug is that   addNA(..)  is called (in all R
versions mentioned) in this case, but it should not.

I'm currently testing yet another amendment..

Martin


From h.wickham at gmail.com  Mon Aug 15 14:51:35 2016
From: h.wickham at gmail.com (Hadley Wickham)
Date: Mon, 15 Aug 2016 07:51:35 -0500
Subject: [Rd] ifelse() woes ... can we agree on a ifelse2() ?
In-Reply-To: <CABdHhvEtBu5=zPuhXNxtTH_5vBbmqbr-U0j3WH9ftjUeABqEWA@mail.gmail.com>
References: <22437.61893.901739.933100@stat.math.ethz.ch>
	<deb934cc-d781-8011-d29b-f1cbcf60407e@gmail.com>
	<22445.44128.203938.13068@stat.math.ethz.ch>
	<CABdHhvEtBu5=zPuhXNxtTH_5vBbmqbr-U0j3WH9ftjUeABqEWA@mail.gmail.com>
Message-ID: <CABdHhvHniPZ1P5SKWJ=trkufv6feFSfsc1Aq4k7v=AAaok32AQ@mail.gmail.com>

On Fri, Aug 12, 2016 at 11:31 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
>>     >> One possibility would also be to consider  a "numbers-only" or
>>     >> rather "same type"-only {e.g., would also work for characters}
>>     >> version.
>>
>>     > I don't know what you mean by these.
>>
>> In the mean time, Bob Rudis mentioned   dplyr::if_else(),
>> which is very relevant, thank you Bob!
>>
>> As I have found, that actually works in such a "same type"-only way:
>> It does not try to coerce, but gives an error when the classes
>> differ, even in this somewhat debatable case :
>>
>>    > dplyr::if_else(c(TRUE, FALSE), 2:3, 0+10:11)
>>    Error: `false` has type 'double' not 'integer'
>>    >
>>
>> As documented, if_else() is clearly stricter than ifelse()
>> and e.g., also does no recycling (but of length() 1).
>
> I agree that if_else() is currently too strict - it's particularly
> annoying if you want to replace some values with a missing:
>
> x <- sample(10)
> if_else(x > 5, NA, x)
> #  Error: `false` has type 'integer' not 'logical'
>
> But I would like to make sure that this remains an error:
>
> if_else(x > 5, x, "BLAH")
>
> Because that seems more likely to be a user error (but reasonable
> people might certainly believe that it should just work)
>
> dplyr is more accommodating in other places (i.e. in bind_rows(),
> collapse() and the joins) but it's surprisingly hard to get all the
> details right. For example, what should the result of this call be?
>
> if_else(c(TRUE, FALSE), factor(c("a", "b")), factor(c("c", "b"))
>
> Strictly speaking I think you could argue it's an error, but that's
> not very user-friendly. Should it be a factor with the union of the
> levels? Should it be a character vector + warning? Should the
> behaviour change if one set of levels is a subset of the other set?
>
> There are similar issues for POSIXct (if the time zones are different,
> which should win?), and difftimes (similarly for units).  Ideally
> you'd like the behaviour to be extensible for new S3 classes, which
> suggests it should be a generic (and for the most general case, it
> would need to dispatch on both arguments).

One possible principle would be to use c() - i.e. construct out as

out <- c(yes[0], no[0]
length(out) <- max(length(yes), length(no))

But of course that wouldn't help with factor responses.

Also, if you're considering an improved ifelse(), I'd strongly urge
you to consider adding an `na` argument, so that you can use ifelse()
to transform all three possible values in a logical vector.

Hadley

-- 
http://hadley.nz


From maechler at stat.math.ethz.ch  Tue Aug 16 12:42:37 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Tue, 16 Aug 2016 12:42:37 +0200
Subject: [Rd] table(exclude = NULL) always includes NA
In-Reply-To: <22449.39677.11989.207005@stat.math.ethz.ch>
References: <540967018.14196661.1471146128783.JavaMail.yahoo.ref@mail.yahoo.com>
	<540967018.14196661.1471146128783.JavaMail.yahoo@mail.yahoo.com>
	<22449.34399.349376.938875@stat.math.ethz.ch>
	<22449.39677.11989.207005@stat.math.ethz.ch>
Message-ID: <22450.60957.882277.256382@stat.math.ethz.ch>

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Mon, 15 Aug 2016 12:35:41 +0200 writes:

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Mon, 15 Aug 2016 11:07:43 +0200 writes:

>>>>> Suharto Anggono Suharto Anggono <suharto_anggono at yahoo.com>
>>>>>     on Sun, 14 Aug 2016 03:42:08 +0000 writes:

    >>> useNA <- if (missing(useNA) && !missing(exclude) && !(NA %in% exclude)) "ifany"
    >>> An example where it change 'table' result for non-factor input, from https://stat.ethz.ch/pipermail/r-help/2005-April/069053.html :

    >>> x <- c(1,2,3,3,NA)
    >>> table(as.integer(x), exclude=NaN)

    >>> I bring the example up, in case that the change in result is not intended.

    >> Thanks a lot, Suharto.

    >> To me, the example is convincing that the change (I commited
    >> Friday), svn rev 71087 & 71088,   are a clear improvement:

    >> (As you surely know, but not all the other readers:)
    >> Before the change, the above example gave *different* results
    >> for  'x'  and  'as.integer(x)', the integer case *not* counting the NAs,
    >> whereas with the change in effect, they are the same:

    >>> x <- as.integer(dx <- c(1,2,3,3,NA))
    >>> table(x, exclude=NaN); table(dx, exclude=NaN)
    >> x
    >> 1    2    3 <NA> 
    >> 1    1    2    1 
    >> dx
    >> 1    2    3 <NA> 
    >> 1    1    2    1 
    >>> 

    >> --
    >> But the change has affected 6-8 (of the 8000+) CRAN packages
    >> which I am investigating now and probably will be in contact with the
    >> package maintainers after that.

    > There has been another bug in table(), since the time  'useNA'
    > was introduced, which gives (in released R, R-patched, or R-devel):

    >> table(1:3, exclude = 1, useNA = "ifany")

    > 2    3 <NA> 
    > 1    1    1 
    >> 

    > and that bug now (in R-devel, after my changes) triggers in
    > cases it did not previously, notably in
 
    > table(1:3, exclude = 1)

    > which now does set 'useNA = "ifany"' and so gives the same silly
    > result as the one above.

    > The reason for this bug is that   addNA(..)  is called (in all R
    > versions mentioned) in this case, but it should not.

    > I'm currently testing yet another amendment..

which was not sufficient... so I had to do *much* more work.

The result is code which functions -- I hope -- uniformly better
than the current code, but unfortunately, code that is much longer.

After all I came to the conclusion that using addNA() was not
good enough [I did not yet consider *changing* addNA() itself,
even though the only place we use it in R's own packages is
inside table()] and so for now have code in table() that does
the equivalent of addNA() *but* does remember if addNA() did add
an NA level or not.
I also have extended the regression tests considerably,
*and*  example(table)  now reverts to give identical output to
R 3.3.1 (which it did no longer in R-devel (r 71088)).

I'm still investigating the CRAN package fallout (from the above
change 4 days ago) but plan to commit my (unfortunately
somewhat extensive) changes.

Also, I think this will become the first in this year's R-devel

SIGNIFICANT USER-VISIBLE CHANGES:

  ? ?table()? has been amended to be more internally consistent
    and become back compatible to R <= 2.7.2 again.
    Consequently, ?table(1:2, exclude=NULL)? no longer contains
    a zero count for ?<NA>?, but ?useNA = "always"? continues to
    do so.

--
Martin


From suharto_anggono at yahoo.com  Wed Aug 17 05:16:52 2016
From: suharto_anggono at yahoo.com (Suharto Anggono Suharto Anggono)
Date: Wed, 17 Aug 2016 03:16:52 +0000 (UTC)
Subject: [Rd] table(exclude = NULL) always includes NA
References: <777508080.15456632.1471403812975.JavaMail.yahoo.ref@mail.yahoo.com>
Message-ID: <777508080.15456632.1471403812975.JavaMail.yahoo@mail.yahoo.com>

The quirk as in table(1:3, exclude = 1, useNA = "ifany") is actually somewhat documented, and still in R devel r71104. In R help on 'table', in "Details" section:
It is best to supply factors rather than rely on coercion.  In particular, ?exclude? will be used in coercion to a factor, and so values (not levels) which appear in ?exclude? before coercion will be mapped to ?NA? rather than be discarded.

Another part, above it:
?useNA? controls if the table includes counts of ?NA? values: .... Note that levels specified in ?exclude? are mapped to ?NA? and so included in ?NA? counts.

The last statement is actually not true for an argument that is already a factor.
--------------------------------------------
On Tue, 16/8/16, Martin Maechler <maechler at stat.math.ethz.ch> wrote:

 Subject: Re: [Rd] table(exclude = NULL) always includes NA

 Cc: "Martin Maechler" <maechler at stat.math.ethz.ch>
 Date: Tuesday, 16 August, 2016, 5:42 PM

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Mon, 15 Aug 2016 12:35:41 +0200 writes:

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Mon, 15 Aug 2016 11:07:43 +0200 writes:


>>>>>     on Sun, 14 Aug 2016 03:42:08 +0000 writes:

    >>> useNA <- if (missing(useNA) && !missing(exclude) && !(NA %in% exclude)) "ifany"
    >>> An example where it change 'table' result for non-factor input, from https://stat.ethz.ch/pipermail/r-help/2005-April/069053.html :

    >>> x <- c(1,2,3,3,NA)
    >>> table(as.integer(x), exclude=NaN)

    >>> I bring the example up, in case that the change in result is not intended.

    >> Thanks a lot, Suharto.

    >> To me, the example is convincing that the change (I commited
    >> Friday), svn rev 71087 & 71088,   are a clear improvement:

    >> (As you surely know, but not all the other readers:)
    >> Before the change, the above example gave *different* results
    >> for  'x'  and  'as.integer(x)', the integer case *not* counting the NAs,
    >> whereas with the change in effect, they are the same:

    >>> x <- as.integer(dx <- c(1,2,3,3,NA))
    >>> table(x, exclude=NaN); table(dx, exclude=NaN)
    >> x
    >> 1    2    3 <NA> 
    >> 1    1    2    1 
    >> dx
    >> 1    2    3 <NA> 
    >> 1    1    2    1 
    >>> 

    >> --
    >> But the change has affected 6-8 (of the 8000+) CRAN packages
    >> which I am investigating now and probably will be in contact with the
    >> package maintainers after that.

    > There has been another bug in table(), since the time  'useNA'
    > was introduced, which gives (in released R, R-patched, or R-devel):

    >> table(1:3, exclude = 1, useNA = "ifany")

    > 2    3 <NA> 
    > 1    1    1 
    >> 

    > and that bug now (in R-devel, after my changes) triggers in
    > cases it did not previously, notably in

    > table(1:3, exclude = 1)

    > which now does set 'useNA = "ifany"' and so gives the same silly
    > result as the one above.

    > The reason for this bug is that   addNA(..)  is called (in all R
    > versions mentioned) in this case, but it should not.

    > I'm currently testing yet another amendment..

which was not sufficient... so I had to do *much* more work.

The result is code which functions -- I hope -- uniformly better
than the current code, but unfortunately, code that is much longer.

After all I came to the conclusion that using addNA() was not
good enough [I did not yet consider *changing* addNA() itself,
even though the only place we use it in R's own packages is
inside table()] and so for now have code in table() that does
the equivalent of addNA() *but* does remember if addNA() did add
an NA level or not.
I also have extended the regression tests considerably,
*and*  example(table)  now reverts to give identical output to
R 3.3.1 (which it did no longer in R-devel (r 71088)).

I'm still investigating the CRAN package fallout (from the above
change 4 days ago) but plan to commit my (unfortunately
somewhat extensive) changes.

Also, I think this will become the first in this year's R-devel

SIGNIFICANT USER-VISIBLE CHANGES:

  ? ?table()? has been amended to be more internally consistent
    and become back compatible to R <= 2.7.2 again.
    Consequently, ?table(1:2, exclude=NULL)? no longer contains
    a zero count for ?<NA>?, but ?useNA = "always"? continues to
    do so.


--
Martin


From maechler at stat.math.ethz.ch  Wed Aug 17 10:28:02 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Wed, 17 Aug 2016 10:28:02 +0200
Subject: [Rd] table(exclude = NULL) always includes NA
In-Reply-To: <777508080.15456632.1471403812975.JavaMail.yahoo@mail.yahoo.com>
References: <777508080.15456632.1471403812975.JavaMail.yahoo.ref@mail.yahoo.com>
	<777508080.15456632.1471403812975.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <22452.8210.480860.83468@stat.math.ethz.ch>

>>>>> Suharto Anggono Suharto Anggono via R-devel <r-devel at r-project.org>
>>>>>     on Wed, 17 Aug 2016 03:16:52 +0000 writes:

    > The quirk as in table(1:3, exclude = 1, useNA = "ifany") is actually somewhat documented, and still in R devel r71104. 

yes, the documentation needs updating, too, thank you.

    > In R help on 'table', in "Details" section:
    > It is best to supply factors rather than rely on coercion.  In particular, ?exclude? will be used in coercion to a factor, and so values (not levels) which appear in ?exclude? before coercion will be mapped to ?NA? rather than be discarded.

    > Another part, above it:

    > ?useNA? controls if the table includes counts of ?NA? values: .... Note that levels specified in ?exclude? are mapped to ?NA? and so included in ?NA? counts.

    > The last statement is actually not true for an argument that is already a factor.

You are right.  I plan to basically drop both these parts.
So, whereas the code got more complicated, at least the
documentation becomes simpler (because the functions behaves
more "logical").

One more thing; I plan to add this paragraph to the 'Examples:'
section :

## "pathological" case:
d.patho <- addNA(c(1,NA,1:2,1:3))[-7]; is.na(d.patho) <- 3:4
d.patho
## just 3 consecutive NA's ? --- well, have *two* kinds of NAs here :
as.integer(d.patho) # 1 4 NA NA 1 2
##
## In R >= 3.4.0, table() allows to differentiate:
table(d.patho)                   # counts the "unusual" NA
table(d.patho, useNA = "ifany")  # counts all three
table(d.patho, exclude = NULL)   #  (ditto)
table(d.patho, exclude = NA)     # counts none

If you read this and try it in R-devel (svn r >= 71101),

  > table(d.patho)                   # counts the "unusual" NA
  d.patho
     1    2    3 <NA> 
     2    1    0    1 
  > table(d.patho, useNA = "ifany")  # counts all three
  d.patho
     1    2    3 <NA> 
     2    1    0    3 
  > table(d.patho, exclude = NULL)   #  (ditto)
  d.patho
     1    2    3 <NA> 
     2    1    0    3 
  > table(d.patho, exclude = NA)     # counts none
  d.patho
  1 2 3 
  2 1 0 
  > 

you may find that indeed, one could desire  "more symmetry" :
Namely, we would want a way to only count the two "value-NA"s,
i.e., return the 4th possible result

  > table(d.patho, ......)
  d.patho
     1    2    3 <NA> 
     2    1    0    2

>From a UI point of view, this should probably be achieved by a
forth 'useNA' option ....
but then, I'm  *not*  jumping to doing that right now
but *will* update the  table  help-page,  soon.

Martin

    > --------------------------------------------
    > On Tue, 16/8/16, Martin Maechler <maechler at stat.math.ethz.ch> wrote:

    > Subject: Re: [Rd] table(exclude = NULL) always includes NA

    > Cc: "Martin Maechler" <maechler at stat.math.ethz.ch>
    > Date: Tuesday, 16 August, 2016, 5:42 PM

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Mon, 15 Aug 2016 12:35:41 +0200 writes:

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Mon, 15 Aug 2016 11:07:43 +0200 writes:


>>>>>     on Sun, 14 Aug 2016 03:42:08 +0000 writes:

    >>>> useNA <- if (missing(useNA) && !missing(exclude) && !(NA %in% exclude)) "ifany"
    >>>> An example where it change 'table' result for non-factor input, from https://stat.ethz.ch/pipermail/r-help/2005-April/069053.html :

    >>>> x <- c(1,2,3,3,NA)
    >>>> table(as.integer(x), exclude=NaN)

    >>>> I bring the example up, in case that the change in result is not intended.

    >>> Thanks a lot, Suharto.

    >>> To me, the example is convincing that the change (I commited
    >>> Friday), svn rev 71087 & 71088,   are a clear improvement:

    >>> (As you surely know, but not all the other readers:)
    >>> Before the change, the above example gave *different* results
    >>> for  'x'  and  'as.integer(x)', the integer case *not* counting the NAs,
    >>> whereas with the change in effect, they are the same:

    >>>> x <- as.integer(dx <- c(1,2,3,3,NA))
    >>>> table(x, exclude=NaN); table(dx, exclude=NaN)
    >>> x
    >>> 1    2    3 <NA> 
    >>> 1    1    2    1 
    >>> dx
    >>> 1    2    3 <NA> 
    >>> 1    1    2    1 
    >>>> 

    >>> --
    >>> But the change has affected 6-8 (of the 8000+) CRAN packages
    >>> which I am investigating now and probably will be in contact with the
    >>> package maintainers after that.

    >> There has been another bug in table(), since the time  'useNA'
    >> was introduced, which gives (in released R, R-patched, or R-devel):

    >>> table(1:3, exclude = 1, useNA = "ifany")

    >> 2    3 <NA> 
    >> 1    1    1 
    >>> 

    >> and that bug now (in R-devel, after my changes) triggers in
    >> cases it did not previously, notably in

    >> table(1:3, exclude = 1)

    >> which now does set 'useNA = "ifany"' and so gives the same silly
    >> result as the one above.

    >> The reason for this bug is that   addNA(..)  is called (in all R
    >> versions mentioned) in this case, but it should not.

    >> I'm currently testing yet another amendment..

    > which was not sufficient... so I had to do *much* more work.

    > The result is code which functions -- I hope -- uniformly better
    > than the current code, but unfortunately, code that is much longer.

    > After all I came to the conclusion that using addNA() was not
    > good enough [I did not yet consider *changing* addNA() itself,
    > even though the only place we use it in R's own packages is
    > inside table()] and so for now have code in table() that does
    > the equivalent of addNA() *but* does remember if addNA() did add
    > an NA level or not.
    > I also have extended the regression tests considerably,
    > *and*  example(table)  now reverts to give identical output to
    > R 3.3.1 (which it did no longer in R-devel (r 71088)).

    > I'm still investigating the CRAN package fallout (from the above
    > change 4 days ago) but plan to commit my (unfortunately
    > somewhat extensive) changes.

    > Also, I think this will become the first in this year's R-devel

    > SIGNIFICANT USER-VISIBLE CHANGES:

    > ? ?table()? has been amended to be more internally consistent
    > and become back compatible to R <= 2.7.2 again.
    > Consequently, ?table(1:2, exclude=NULL)? no longer contains
    > a zero count for ?<NA>?, but ?useNA = "always"? continues to
    > do so.


    > --
    > Martin

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From williamcmay at live.com  Fri Aug 19 00:06:36 2016
From: williamcmay at live.com (William May)
Date: Thu, 18 Aug 2016 22:06:36 +0000
Subject: [Rd] axis.POSIXct and axis.Date fail for reversed axes
Message-ID: <BY2PR13MB0823EB805DDF97D6EB8F7AE4CE150@BY2PR13MB0823.namprd13.prod.outlook.com>

When plotting a reversed time axis with the base graphics system, R 
fails to label the axes.

Example:

times <- c(Sys.time() - 100, Sys.time())
plot(times, 1:2, xlim = times) # correctly labels the x-axis
plot(times, 1:2, xlim = rev(times)) # fails to label the x-axis
axis.POSIXct(1, times) # still fails to add labels

dates <- c(Sys.Date() - 10, Sys.Date())
plot(dates, 1:2, xlim = dates) # correctly labels the x-axis
plot(dates, 1:2, xlim = rev(dates)) # fails to label the x-axis
axis.Date(1, dates) # still fails to add labels

This is clearly due to the variable keep in both axis functions.

keep <- z >= range[1L] & z <= range[2L]

But if the axis is reversed that should be:

keep <- z <= range[1L] & z >= range[2L]


From j.hadfield at ed.ac.uk  Fri Aug 19 05:43:35 2016
From: j.hadfield at ed.ac.uk (Jarrod Hadfield)
Date: Fri, 19 Aug 2016 04:43:35 +0100
Subject: [Rd] can't build from source: error: template with C linkage
Message-ID: <90f718c0-1299-6da3-b95c-9152ed565609@ed.ac.uk>

Hi All,

Users have contacted me because they can not build MCMCglmm from source. All are using R 3.3.0 on various machines with different compilers

gcc (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0
g++ (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Mac OS X El Capitan (version/compiler unspecified)

The issue seems to be with mixing C/C++ with the repeated error:

/usr/include/c++/5/bits/cpp_type_traits.h:118:3: error: template with C linkage
    template<typename _Tp>

I see a bug report has been filed for the CRAN package tgp that was experiencing similar problems, but it is not clear whether it has been resolved.

Any help would be greatly appreciated.

Cheers,

Jarrod


-- 
The University of Edinburgh is a charitable body, registered in
Scotland, with registration number SC005336.


From maechler at stat.math.ethz.ch  Fri Aug 19 09:58:45 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 19 Aug 2016 09:58:45 +0200
Subject: [Rd] axis.POSIXct and axis.Date fail for reversed axes
In-Reply-To: <BY2PR13MB0823EB805DDF97D6EB8F7AE4CE150@BY2PR13MB0823.namprd13.prod.outlook.com>
References: <BY2PR13MB0823EB805DDF97D6EB8F7AE4CE150@BY2PR13MB0823.namprd13.prod.outlook.com>
Message-ID: <22454.48181.328072.46359@stat.math.ethz.ch>

>>>>> William May <williamcmay at live.com>
>>>>>     on Thu, 18 Aug 2016 22:06:36 +0000 writes:

    > When plotting a reversed time axis with the base graphics system, R 
    > fails to label the axes.

    > Example:

    > times <- c(Sys.time() - 100, Sys.time())
    > plot(times, 1:2, xlim = times) # correctly labels the x-axis
    > plot(times, 1:2, xlim = rev(times)) # fails to label the x-axis
    > axis.POSIXct(1, times) # still fails to add labels

    > dates <- c(Sys.Date() - 10, Sys.Date())
    > plot(dates, 1:2, xlim = dates) # correctly labels the x-axis
    > plot(dates, 1:2, xlim = rev(dates)) # fails to label the x-axis
    > axis.Date(1, dates) # still fails to add labels

    > This is clearly due to the variable keep in both axis functions.

    >   keep <- z >= range[1L] & z <= range[2L]

    > But if the axis is reversed that should be:

    >   keep <- z <= range[1L] & z >= range[2L]

yes,  something like that, you are right.

Thank you very much, William, for the succinct report and diagnosis!

I'm going to fix this.
Martin


From spinuvit at gmail.com  Fri Aug 19 11:39:31 2016
From: spinuvit at gmail.com (Vitalie Spinu)
Date: Fri, 19 Aug 2016 11:39:31 +0200
Subject: [Rd] POSIX <> character comparison is locale dependent
Message-ID: <87a8g9umgc.fsf@gmail.com>


Hi Devs,

In my UTC+1 timezone the following code returns TRUE

     t <- as.POSIXct("1999-12-31 23:50:00", tz = "UTC")
     t > "2000-01-01"
     ## TRUE

For a person in US it would return FALSE.

The reason for this is that timezone of the "t" object is ignored in
base:::Ops.POSIXt.

Could this please be fixed? I am attaching a simple patch in case there is
interest.

Thanks,

 Vitalie



-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: text/x-diff
Size: 804 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20160819/16c566e3/attachment.bin>

From edd at debian.org  Fri Aug 19 13:25:45 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Fri, 19 Aug 2016 06:25:45 -0500
Subject: [Rd] can't build from source: error: template with C linkage
In-Reply-To: <90f718c0-1299-6da3-b95c-9152ed565609@ed.ac.uk>
References: <90f718c0-1299-6da3-b95c-9152ed565609@ed.ac.uk>
Message-ID: <22454.60601.117571.733489@max.nulle.part>


Jarrod,

On 19 August 2016 at 04:43, Jarrod Hadfield wrote:
| Hi All,
| 
| Users have contacted me because they can not build MCMCglmm from source. All are using R 3.3.0 on various machines with different compilers
| 
| gcc (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0
| g++ (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
| Mac OS X El Capitan (version/compiler unspecified)
| 
| The issue seems to be with mixing C/C++ with the repeated error:
| 
| /usr/include/c++/5/bits/cpp_type_traits.h:118:3: error: template with C linkage
|     template<typename _Tp>
| 
| I see a bug report has been filed for the CRAN package tgp that was experiencing similar problems, but it is not clear whether it has been resolved.
| 
| Any help would be greatly appreciated.

I am on Ubuntu 16.04 with gcc/g++ 5.4.0 and I _cannot_ reproduce this.

Your package installs fine [1].

Dirk


[1] For some definition of 'fine' which overlooks pages of compiler _warnings_.
Still no errors. A log is below. Note that I a) had to turn off '-Wall
-pedantic' which I normally use, and add two explicit 'do not warn'
switches. The rest is stock Ubuntu behaviour.

edd at max:/tmp/mcmcglmm$ R_LIBS_USER=/tmp/RcppDepends/lib R CMD INSTALL MCMCglmm_2.22.1.tar.gz 
R_LIBS_USER=/tmp/RcppDepends/lib R CMD INSTALL MCMCglmm_2.22.1.tar.gz 
* installing to library ?/tmp/RcppDepends/lib?
* installing *source* package ?MCMCglmm? ...
** package ?MCMCglmm? successfully unpacked and MD5 sums checked
** libs
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_add.c -o cs_add.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_addR.c -o cs_addR.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_cbind.c -o cs_cbind.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_chol.c -o cs_chol.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_cholsol.c -o cs_cholsol.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_amd.c -o cs_amd.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_compress.c -o cs_compress.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_cov2cor.c -o cs_cov2cor.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_counts.c -o cs_counts.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_cumsum.c -o cs_cumsum.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_dfs.c -o cs_dfs.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_dcmvnorm.c -o cs_dcmvnorm.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_directsum.c -o cs_directsum.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_directsumupdate.c -o cs_directsumupdate.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_dmvnorm.c -o cs_dmvnorm.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_droptol.c -o cs_droptol.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_dropzeros.c -o cs_dropzeros.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_dmperm.c -o cs_dmperm.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_entry.c -o cs_entry.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_dupl.c -o cs_dupl.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_ereach.c -o cs_ereach.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_etree.c -o cs_etree.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_gaxpy.c -o cs_gaxpy.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_fkeep.c -o cs_fkeep.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_happly.c -o cs_happly.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_house.c -o cs_house.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_invR.c -o cs_invR.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_inv.c -o cs_inv.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_ipvec.c -o cs_ipvec.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_kroneckerA.c -o cs_kroneckerA.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_kroneckerAupdate.c -o cs_kroneckerAupdate.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_kroneckerDA.c -o cs_kroneckerDA.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_kroneckerDI.c -o cs_kroneckerDI.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_kroneckerIadd.c -o cs_kroneckerIadd.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_kroneckerI.c -o cs_kroneckerI.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_kroneckerIupdate.c -o cs_kroneckerIupdate.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_kroneckerSI.c -o cs_kroneckerSI.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_kroneckerSIupdate.c -o cs_kroneckerSIupdate.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_leaf.c -o cs_leaf.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_load.c -o cs_load.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_lsolve.c -o cs_lsolve.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_ltsolve.c -o cs_ltsolve.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_lu.c -o cs_lu.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_lusol.c -o cs_lusol.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_malloc.c -o cs_malloc.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_multiply.c -o cs_multiply.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_maxtrans.c -o cs_maxtrans.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_norm.c -o cs_norm.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_omegaupdate.c -o cs_omegaupdate.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_omega.c -o cs_omega.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_permute.c -o cs_permute.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_pinv.c -o cs_pinv.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_post.c -o cs_post.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_print.c -o cs_print.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_pvec.c -o cs_pvec.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_qrsol.c -o cs_qrsol.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_qr.c -o cs_qr.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_rCinvwishart.c -o cs_rCinvwishart.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_rAnte.c -o cs_rAnte.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_rR.c -o cs_rR.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_rRsubinvwishart.c -o cs_rRsubinvwishart.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_randperm.c -o cs_randperm.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_rSinvwishart.c -o cs_rSinvwishart.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_reach.c -o cs_reach.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_rinvwishart.c -o cs_rinvwishart.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_rwishart.c -o cs_rwishart.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_scatter.c -o cs_scatter.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_schol.c -o cs_schol.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_scc.c -o cs_scc.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_sortdv.c -o cs_sortdv.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_schur.c -o cs_schur.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_spsolve.c -o cs_spsolve.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_sqr.c -o cs_sqr.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_symperm.c -o cs_symperm.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_tdfs.c -o cs_tdfs.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_transpose.c -o cs_transpose.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_usolve.c -o cs_usolve.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_updown.c -o cs_updown.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_util.c -o cs_util.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c cs_utsolve.c -o cs_utsolve.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c dcutpoints.c -o dcutpoints.o
g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c dcmvnormR.cc -o dcmvnormR.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c pcmvnorm.c -o pcmvnorm.o
g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c inverseA.cc -o inverseA.o
g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c rIW.cc -o rIW.o
g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c rante.cc -o rante.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c rtcmvnorm.c -o rtcmvnorm.o
g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c rbv.cc -o rbv.o
gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3 -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c rtnorm.c -o rtnorm.o
g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c rtcmvnormR.cc -o rtcmvnormR.o
g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c rtnormR.cc -o rtnormR.o
g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-maybe-uninitialized -Wno-unused-but-set-variable -c MCMCglmm.cc -o MCMCglmm.o
g++ -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o MCMCglmm.so MCMCglmm.o cs_add.o cs_addR.o cs_amd.o cs_cbind.o cs_chol.o cs_cholsol.o cs_compress.o cs_counts.o cs_cov2cor.o cs_cumsum.o cs_dcmvnorm.o cs_dfs.o cs_directsum.o cs_directsumupdate.o cs_dmperm.o cs_dmvnorm.o cs_droptol.o cs_dropzeros.o cs_dupl.o cs_entry.o cs_ereach.o cs_etree.o cs_fkeep.o cs_gaxpy.o cs_happly.o cs_house.o cs_inv.o cs_invR.o cs_ipvec.o cs_kroneckerA.o cs_kroneckerAupdate.o cs_kroneckerDA.o cs_kroneckerDI.o cs_kroneckerI.o cs_kroneckerIadd.o cs_kroneckerIupdate.o cs_kroneckerSI.o cs_kroneckerSIupdate.o cs_leaf.o cs_load.o cs_lsolve.o cs_ltsolve.o cs_lu.o cs_lusol.o cs_malloc.o cs_maxtrans.o cs_multiply.o cs_norm.o cs_omega.o cs_omegaupdate.o cs_permute.o cs_pinv.o cs_post.o cs_print.o cs_pvec.o cs_qr.o cs_qrsol.o cs_rAnte.o cs_rCinvwishart.o cs_rR.o cs_rRsubinvwishart.o cs_rSinvwishart.o cs_randperm.o cs_reach.o cs_rinvwishart.o cs_rwishart.o cs_scatter.o cs_scc.o cs_schol.o cs_schur.o cs_sortdv.o cs_spsolve.o cs_sqr.o cs_symperm.o cs_tdfs.o cs_transpose.o cs_updown.o cs_usolve.o cs_util.o cs_utsolve.o dcmvnormR.o dcutpoints.o inverseA.o pcmvnorm.o rIW.o rante.o rbv.o rtcmvnorm.o rtcmvnormR.o rtnorm.o rtnormR.o -L/usr/lib/R/lib -lR
installing to /tmp/RcppDepends/lib/MCMCglmm/libs
** R
** data
** inst
** preparing package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded
* DONE (MCMCglmm)
edd at max:/tmp/mcmcglmm$ 

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org

From plummerm at iarc.fr  Fri Aug 19 16:51:40 2016
From: plummerm at iarc.fr (Martyn Plummer)
Date: Fri, 19 Aug 2016 14:51:40 +0000
Subject: [Rd] can't build from source: error: template with C linkage
In-Reply-To: <22454.60601.117571.733489@max.nulle.part>
References: <90f718c0-1299-6da3-b95c-9152ed565609@ed.ac.uk>
	<22454.60601.117571.733489@max.nulle.part>
Message-ID: <1471618252.2630.72.camel@iarc.fr>

This looks like the result of including a C++ system header inside an
extern "C" block. There is no evidence of this happening in the current
version 2.22.1. However, it did happen in the previous version 2.22 via
the chain of inclusions:

MCMCglmmcc.h -> cs.h -> R.h -> various C++ system headers

See Writing R Extensions P 108.

I would check that the people reporting this bug are using the latest
version. If not then you have already fixed this.

Martyn

On Fri, 2016-08-19 at 06:25 -0500, Dirk Eddelbuettel wrote:
> Jarrod,
> 
> On 19 August 2016 at 04:43, Jarrod Hadfield wrote:
> > 
> > Hi All,
> > 
> > Users have contacted me because they can not build MCMCglmm from
> > source. All are using R 3.3.0 on various machines with different
> > compilers
> > 
> > gcc (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0
> > g++ (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
> > Mac OS X El Capitan (version/compiler unspecified)
> > 
> > The issue seems to be with mixing C/C++ with the repeated error:
> > 
> > /usr/include/c++/5/bits/cpp_type_traits.h:118:3: error: template
> > with C linkage
> > ????template<typename _Tp>
> > 
> > I see a bug report has been filed for the CRAN package tgp that was
> > experiencing similar problems, but it is not clear whether it has
> > been resolved.
> > 
> > Any help would be greatly appreciated.
> 
> I am on Ubuntu 16.04 with gcc/g++ 5.4.0 and I _cannot_ reproduce
> this.
> 
> Your package installs fine [1].
> 
> Dirk
> 
> 
> [1] For some definition of 'fine' which overlooks pages of compiler
> _warnings_.
> Still no errors. A log is below. Note that I a) had to turn off '-
> Wall
> -pedantic' which I normally use, and add two explicit 'do not warn'
> switches. The rest is stock Ubuntu behaviour.
> 
> edd at max:/tmp/mcmcglmm$ R_LIBS_USER=/tmp/RcppDepends/lib R CMD INSTALL
> MCMCglmm_2.22.1.tar.gz?
> R_LIBS_USER=/tmp/RcppDepends/lib R CMD INSTALL
> MCMCglmm_2.22.1.tar.gz?
> * installing to library ?/tmp/RcppDepends/lib?
> * installing *source* package ?MCMCglmm? ...
> ** package ?MCMCglmm? successfully unpacked and MD5 sums checked
> ** libs
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_add.c -o cs_add.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_addR.c -o cs_addR.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_cbind.c -o cs_cbind.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_chol.c -o cs_chol.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_cholsol.c -o cs_cholsol.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_amd.c -o cs_amd.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_compress.c -o cs_compress.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_cov2cor.c -o cs_cov2cor.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_counts.c -o cs_counts.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_cumsum.c -o cs_cumsum.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_dfs.c -o cs_dfs.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_dcmvnorm.c -o cs_dcmvnorm.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_directsum.c -o cs_directsum.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_directsumupdate.c -o cs_directsumupdate.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_dmvnorm.c -o cs_dmvnorm.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_droptol.c -o cs_droptol.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_dropzeros.c -o cs_dropzeros.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_dmperm.c -o cs_dmperm.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_entry.c -o cs_entry.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_dupl.c -o cs_dupl.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_ereach.c -o cs_ereach.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_etree.c -o cs_etree.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_gaxpy.c -o cs_gaxpy.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_fkeep.c -o cs_fkeep.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_happly.c -o cs_happly.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_house.c -o cs_house.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_invR.c -o cs_invR.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_inv.c -o cs_inv.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_ipvec.c -o cs_ipvec.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_kroneckerA.c -o cs_kroneckerA.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_kroneckerAupdate.c -o cs_kroneckerAupdate.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_kroneckerDA.c -o cs_kroneckerDA.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_kroneckerDI.c -o cs_kroneckerDI.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_kroneckerIadd.c -o cs_kroneckerIadd.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_kroneckerI.c -o cs_kroneckerI.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_kroneckerIupdate.c -o cs_kroneckerIupdate.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_kroneckerSI.c -o cs_kroneckerSI.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_kroneckerSIupdate.c -o cs_kroneckerSIupdate.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_leaf.c -o cs_leaf.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_load.c -o cs_load.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_lsolve.c -o cs_lsolve.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_ltsolve.c -o cs_ltsolve.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_lu.c -o cs_lu.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_lusol.c -o cs_lusol.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_malloc.c -o cs_malloc.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_multiply.c -o cs_multiply.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_maxtrans.c -o cs_maxtrans.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_norm.c -o cs_norm.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_omegaupdate.c -o cs_omegaupdate.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_omega.c -o cs_omega.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_permute.c -o cs_permute.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_pinv.c -o cs_pinv.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_post.c -o cs_post.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_print.c -o cs_print.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_pvec.c -o cs_pvec.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_qrsol.c -o cs_qrsol.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_qr.c -o cs_qr.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_rCinvwishart.c -o cs_rCinvwishart.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_rAnte.c -o cs_rAnte.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_rR.c -o cs_rR.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_rRsubinvwishart.c -o cs_rRsubinvwishart.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_randperm.c -o cs_randperm.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_rSinvwishart.c -o cs_rSinvwishart.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_reach.c -o cs_reach.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_rinvwishart.c -o cs_rinvwishart.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_rwishart.c -o cs_rwishart.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_scatter.c -o cs_scatter.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_schol.c -o cs_schol.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_scc.c -o cs_scc.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_sortdv.c -o cs_sortdv.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_schur.c -o cs_schur.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_spsolve.c -o cs_spsolve.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_sqr.c -o cs_sqr.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_symperm.c -o cs_symperm.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_tdfs.c -o cs_tdfs.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_transpose.c -o cs_transpose.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_usolve.c -o cs_usolve.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_updown.c -o cs_updown.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_util.c -o cs_util.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c cs_utsolve.c -o cs_utsolve.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c dcutpoints.c -o dcutpoints.o
> g++ -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -Wno-unused??-O3 -pipe -Wno-
> maybe-uninitialized -Wno-unused-but-set-variable -c dcmvnormR.cc -o
> dcmvnormR.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c pcmvnorm.c -o pcmvnorm.o
> g++ -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -Wno-unused??-O3 -pipe -Wno-
> maybe-uninitialized -Wno-unused-but-set-variable -c inverseA.cc -o
> inverseA.o
> g++ -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -Wno-unused??-O3 -pipe -Wno-
> maybe-uninitialized -Wno-unused-but-set-variable -c rIW.cc -o rIW.o
> g++ -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -Wno-unused??-O3 -pipe -Wno-
> maybe-uninitialized -Wno-unused-but-set-variable -c rante.cc -o
> rante.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c rtcmvnorm.c -o rtcmvnorm.o
> g++ -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -Wno-unused??-O3 -pipe -Wno-
> maybe-uninitialized -Wno-unused-but-set-variable -c rbv.cc -o rbv.o
> gcc -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -pedantic -std=gnu99??-O3
> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
> variable -c rtnorm.c -o rtnorm.o
> g++ -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -Wno-unused??-O3 -pipe -Wno-
> maybe-uninitialized -Wno-unused-but-set-variable -c rtcmvnormR.cc -o
> rtcmvnormR.o
> g++ -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -Wno-unused??-O3 -pipe -Wno-
> maybe-uninitialized -Wno-unused-but-set-variable -c rtnormR.cc -o
> rtnormR.o
> g++ -I/usr/share/R/include -DNDEBUG??????-fpic??-g -O2 -fstack-
> protector-strong -Wformat -Werror=format-security -Wdate-time
> -D_FORTIFY_SOURCE=2 -g??-O3 -Wall -pipe -Wno-unused??-O3 -pipe -Wno-
> maybe-uninitialized -Wno-unused-but-set-variable -c MCMCglmm.cc -o
> MCMCglmm.o
> g++ -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o
> MCMCglmm.so MCMCglmm.o cs_add.o cs_addR.o cs_amd.o cs_cbind.o
> cs_chol.o cs_cholsol.o cs_compress.o cs_counts.o cs_cov2cor.o
> cs_cumsum.o cs_dcmvnorm.o cs_dfs.o cs_directsum.o
> cs_directsumupdate.o cs_dmperm.o cs_dmvnorm.o cs_droptol.o
> cs_dropzeros.o cs_dupl.o cs_entry.o cs_ereach.o cs_etree.o cs_fkeep.o
> cs_gaxpy.o cs_happly.o cs_house.o cs_inv.o cs_invR.o cs_ipvec.o
> cs_kroneckerA.o cs_kroneckerAupdate.o cs_kroneckerDA.o
> cs_kroneckerDI.o cs_kroneckerI.o cs_kroneckerIadd.o
> cs_kroneckerIupdate.o cs_kroneckerSI.o cs_kroneckerSIupdate.o
> cs_leaf.o cs_load.o cs_lsolve.o cs_ltsolve.o cs_lu.o cs_lusol.o
> cs_malloc.o cs_maxtrans.o cs_multiply.o cs_norm.o cs_omega.o
> cs_omegaupdate.o cs_permute.o cs_pinv.o cs_post.o cs_print.o
> cs_pvec.o cs_qr.o cs_qrsol.o cs_rAnte.o cs_rCinvwishart.o cs_rR.o
> cs_rRsubinvwishart.o cs_rSinvwishart.o cs_randperm.o cs_reach.o
> cs_rinvwishart.o cs_rwishart.o cs_scatter.o cs_scc.o cs_schol.o
> cs_schur.o cs_sortdv.o cs_spsolve.o cs_sqr.o cs_symperm.o cs_tdfs.o
> cs_transpose.o cs_updown.o cs_usolve.o cs_util.o cs_utsolve.o
> dcmvnormR.o dcutpoints.o inverseA.o pcmvnorm.o rIW.o rante.o rbv.o
> rtcmvnorm.o rtcmvnormR.o rtnorm.o rtnormR.o -L/usr/lib/R/lib -lR
> installing to /tmp/RcppDepends/lib/MCMCglmm/libs
> ** R
> ** data
> ** inst
> ** preparing package for lazy loading
> ** help
> *** installing help indices
> ** building package indices
> ** installing vignettes
> ** testing if installed package can be loaded
> * DONE (MCMCglmm)
> edd at max:/tmp/mcmcglmm$?
> 
> --?
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

From j.hadfield at ed.ac.uk  Fri Aug 19 16:53:58 2016
From: j.hadfield at ed.ac.uk (Jarrod Hadfield)
Date: Fri, 19 Aug 2016 15:53:58 +0100
Subject: [Rd] can't build from source: error: template with C linkage
In-Reply-To: <1471618252.2630.72.camel@iarc.fr>
References: <90f718c0-1299-6da3-b95c-9152ed565609@ed.ac.uk>
	<22454.60601.117571.733489@max.nulle.part>
	<1471618252.2630.72.camel@iarc.fr>
Message-ID: <4e3db613-50b1-b599-3d23-8423d44c97ce@ed.ac.uk>

Hi Martyn,

Thanks for the help. This is now ringing very vague bells and I will 
check it out.

Cheers,

Jarrod



On 19/08/16 15:51, Martyn Plummer wrote:
> This looks like the result of including a C++ system header inside an
> extern "C" block. There is no evidence of this happening in the current
> version 2.22.1. However, it did happen in the previous version 2.22 via
> the chain of inclusions:
>
> MCMCglmmcc.h -> cs.h -> R.h -> various C++ system headers
>
> See Writing R Extensions P 108.
>
> I would check that the people reporting this bug are using the latest
> version. If not then you have already fixed this.
>
> Martyn
>
> On Fri, 2016-08-19 at 06:25 -0500, Dirk Eddelbuettel wrote:
>> Jarrod,
>>
>> On 19 August 2016 at 04:43, Jarrod Hadfield wrote:
>>> Hi All,
>>>
>>> Users have contacted me because they can not build MCMCglmm from
>>> source. All are using R 3.3.0 on various machines with different
>>> compilers
>>>
>>> gcc (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0
>>> g++ (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
>>> Mac OS X El Capitan (version/compiler unspecified)
>>>
>>> The issue seems to be with mixing C/C++ with the repeated error:
>>>
>>> /usr/include/c++/5/bits/cpp_type_traits.h:118:3: error: template
>>> with C linkage
>>>      template<typename _Tp>
>>>
>>> I see a bug report has been filed for the CRAN package tgp that was
>>> experiencing similar problems, but it is not clear whether it has
>>> been resolved.
>>>
>>> Any help would be greatly appreciated.
>> I am on Ubuntu 16.04 with gcc/g++ 5.4.0 and I _cannot_ reproduce
>> this.
>>
>> Your package installs fine [1].
>>
>> Dirk
>>
>>
>> [1] For some definition of 'fine' which overlooks pages of compiler
>> _warnings_.
>> Still no errors. A log is below. Note that I a) had to turn off '-
>> Wall
>> -pedantic' which I normally use, and add two explicit 'do not warn'
>> switches. The rest is stock Ubuntu behaviour.
>>
>> edd at max:/tmp/mcmcglmm$ R_LIBS_USER=/tmp/RcppDepends/lib R CMD INSTALL
>> MCMCglmm_2.22.1.tar.gz
>> R_LIBS_USER=/tmp/RcppDepends/lib R CMD INSTALL
>> MCMCglmm_2.22.1.tar.gz
>> * installing to library ?/tmp/RcppDepends/lib?
>> * installing *source* package ?MCMCglmm? ...
>> ** package ?MCMCglmm? successfully unpacked and MD5 sums checked
>> ** libs
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_add.c -o cs_add.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_addR.c -o cs_addR.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_cbind.c -o cs_cbind.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_chol.c -o cs_chol.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_cholsol.c -o cs_cholsol.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_amd.c -o cs_amd.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_compress.c -o cs_compress.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_cov2cor.c -o cs_cov2cor.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_counts.c -o cs_counts.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_cumsum.c -o cs_cumsum.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_dfs.c -o cs_dfs.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_dcmvnorm.c -o cs_dcmvnorm.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_directsum.c -o cs_directsum.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_directsumupdate.c -o cs_directsumupdate.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_dmvnorm.c -o cs_dmvnorm.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_droptol.c -o cs_droptol.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_dropzeros.c -o cs_dropzeros.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_dmperm.c -o cs_dmperm.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_entry.c -o cs_entry.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_dupl.c -o cs_dupl.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_ereach.c -o cs_ereach.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_etree.c -o cs_etree.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_gaxpy.c -o cs_gaxpy.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_fkeep.c -o cs_fkeep.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_happly.c -o cs_happly.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_house.c -o cs_house.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_invR.c -o cs_invR.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_inv.c -o cs_inv.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_ipvec.c -o cs_ipvec.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_kroneckerA.c -o cs_kroneckerA.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_kroneckerAupdate.c -o cs_kroneckerAupdate.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_kroneckerDA.c -o cs_kroneckerDA.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_kroneckerDI.c -o cs_kroneckerDI.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_kroneckerIadd.c -o cs_kroneckerIadd.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_kroneckerI.c -o cs_kroneckerI.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_kroneckerIupdate.c -o cs_kroneckerIupdate.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_kroneckerSI.c -o cs_kroneckerSI.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_kroneckerSIupdate.c -o cs_kroneckerSIupdate.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_leaf.c -o cs_leaf.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_load.c -o cs_load.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_lsolve.c -o cs_lsolve.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_ltsolve.c -o cs_ltsolve.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_lu.c -o cs_lu.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_lusol.c -o cs_lusol.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_malloc.c -o cs_malloc.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_multiply.c -o cs_multiply.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_maxtrans.c -o cs_maxtrans.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_norm.c -o cs_norm.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_omegaupdate.c -o cs_omegaupdate.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_omega.c -o cs_omega.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_permute.c -o cs_permute.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_pinv.c -o cs_pinv.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_post.c -o cs_post.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_print.c -o cs_print.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_pvec.c -o cs_pvec.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_qrsol.c -o cs_qrsol.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_qr.c -o cs_qr.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_rCinvwishart.c -o cs_rCinvwishart.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_rAnte.c -o cs_rAnte.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_rR.c -o cs_rR.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_rRsubinvwishart.c -o cs_rRsubinvwishart.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_randperm.c -o cs_randperm.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_rSinvwishart.c -o cs_rSinvwishart.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_reach.c -o cs_reach.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_rinvwishart.c -o cs_rinvwishart.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_rwishart.c -o cs_rwishart.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_scatter.c -o cs_scatter.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_schol.c -o cs_schol.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_scc.c -o cs_scc.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_sortdv.c -o cs_sortdv.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_schur.c -o cs_schur.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_spsolve.c -o cs_spsolve.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_sqr.c -o cs_sqr.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_symperm.c -o cs_symperm.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_tdfs.c -o cs_tdfs.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_transpose.c -o cs_transpose.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_usolve.c -o cs_usolve.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_updown.c -o cs_updown.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_util.c -o cs_util.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c cs_utsolve.c -o cs_utsolve.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c dcutpoints.c -o dcutpoints.o
>> g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-
>> maybe-uninitialized -Wno-unused-but-set-variable -c dcmvnormR.cc -o
>> dcmvnormR.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c pcmvnorm.c -o pcmvnorm.o
>> g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-
>> maybe-uninitialized -Wno-unused-but-set-variable -c inverseA.cc -o
>> inverseA.o
>> g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-
>> maybe-uninitialized -Wno-unused-but-set-variable -c rIW.cc -o rIW.o
>> g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-
>> maybe-uninitialized -Wno-unused-but-set-variable -c rante.cc -o
>> rante.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c rtcmvnorm.c -o rtcmvnorm.o
>> g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-
>> maybe-uninitialized -Wno-unused-but-set-variable -c rbv.cc -o rbv.o
>> gcc -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -pedantic -std=gnu99  -O3
>> -pipe -std=gnu99 -Wno-maybe-uninitialized -Wno-unused-but-set-
>> variable -c rtnorm.c -o rtnorm.o
>> g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-
>> maybe-uninitialized -Wno-unused-but-set-variable -c rtcmvnormR.cc -o
>> rtcmvnormR.o
>> g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-
>> maybe-uninitialized -Wno-unused-but-set-variable -c rtnormR.cc -o
>> rtnormR.o
>> g++ -I/usr/share/R/include -DNDEBUG      -fpic  -g -O2 -fstack-
>> protector-strong -Wformat -Werror=format-security -Wdate-time
>> -D_FORTIFY_SOURCE=2 -g  -O3 -Wall -pipe -Wno-unused  -O3 -pipe -Wno-
>> maybe-uninitialized -Wno-unused-but-set-variable -c MCMCglmm.cc -o
>> MCMCglmm.o
>> g++ -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -Wl,-z,relro -o
>> MCMCglmm.so MCMCglmm.o cs_add.o cs_addR.o cs_amd.o cs_cbind.o
>> cs_chol.o cs_cholsol.o cs_compress.o cs_counts.o cs_cov2cor.o
>> cs_cumsum.o cs_dcmvnorm.o cs_dfs.o cs_directsum.o
>> cs_directsumupdate.o cs_dmperm.o cs_dmvnorm.o cs_droptol.o
>> cs_dropzeros.o cs_dupl.o cs_entry.o cs_ereach.o cs_etree.o cs_fkeep.o
>> cs_gaxpy.o cs_happly.o cs_house.o cs_inv.o cs_invR.o cs_ipvec.o
>> cs_kroneckerA.o cs_kroneckerAupdate.o cs_kroneckerDA.o
>> cs_kroneckerDI.o cs_kroneckerI.o cs_kroneckerIadd.o
>> cs_kroneckerIupdate.o cs_kroneckerSI.o cs_kroneckerSIupdate.o
>> cs_leaf.o cs_load.o cs_lsolve.o cs_ltsolve.o cs_lu.o cs_lusol.o
>> cs_malloc.o cs_maxtrans.o cs_multiply.o cs_norm.o cs_omega.o
>> cs_omegaupdate.o cs_permute.o cs_pinv.o cs_post.o cs_print.o
>> cs_pvec.o cs_qr.o cs_qrsol.o cs_rAnte.o cs_rCinvwishart.o cs_rR.o
>> cs_rRsubinvwishart.o cs_rSinvwishart.o cs_randperm.o cs_reach.o
>> cs_rinvwishart.o cs_rwishart.o cs_scatter.o cs_scc.o cs_schol.o
>> cs_schur.o cs_sortdv.o cs_spsolve.o cs_sqr.o cs_symperm.o cs_tdfs.o
>> cs_transpose.o cs_updown.o cs_usolve.o cs_util.o cs_utsolve.o
>> dcmvnormR.o dcutpoints.o inverseA.o pcmvnorm.o rIW.o rante.o rbv.o
>> rtcmvnorm.o rtcmvnormR.o rtnorm.o rtnormR.o -L/usr/lib/R/lib -lR
>> installing to /tmp/RcppDepends/lib/MCMCglmm/libs
>> ** R
>> ** data
>> ** inst
>> ** preparing package for lazy loading
>> ** help
>> *** installing help indices
>> ** building package indices
>> ** installing vignettes
>> ** testing if installed package can be loaded
>> * DONE (MCMCglmm)
>> edd at max:/tmp/mcmcglmm$
>>
>> -- 
>> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


-- 
The University of Edinburgh is a charitable body, registered in
Scotland, with registration number SC005336.


From jmount at win-vector.com  Fri Aug 19 17:04:55 2016
From: jmount at win-vector.com (John Mount)
Date: Fri, 19 Aug 2016 08:04:55 -0700
Subject: [Rd] summary.default rounding on numeric seems inconsistent with
	other R behaviors
Message-ID: <944E96FB-9C3B-46A3-9C57-8AF8EAA5284A@win-vector.com>

I was wondering if it would make sense to change the default behavior of the following:

summary(15555L)
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   15560   15560   15560   15560   15560   15560 

summary.default on numeric values rounds values (not just presentation) to getOption("digits")-3L (or four) digits by default, making those values surprising and less suitable for further calculation.  Summary on matrix and data.frame do not do so.

It seems it would be nice to have x=15555L; summary(x)[['Min.']] == min(x) evaluate to TRUE.  I know one can alter behavior by changing the global ?digits? option, but I don?t know what other impacts that might have.  Ideally I would think summary.default would not round its values at all, but use digits to control presentation (by overriding print and such).  Even in presentation the rounding without switching to scientific notation (such as 1.556e+4) is a bit surprising (I understand rounding and scientific notation are two different presentation issues, but new users are very confused that something that appears to be an integer has been rounded).

Example:

summary(data.frame(x=15555))
##        x        
##  Min.   :15555  
##  1st Qu.:15555  
##  Median :15555  
##  Mean   :15555  
##  3rd Qu.:15555  
##  Max.   :15555  
summary(15555)
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   15560   15560   15560   15560   15560   15560 

I have a (bit whiny) polemic trying to explain the pain point here http://www.win-vector.com/blog/2016/08/my-criticism-of-r-numeric-summary/ <http://www.win-vector.com/blog/2016/08/my-criticism-of-r-numeric-summary/> (I am not trying to be rude, more I am trying to emphasize why this can be confusing to new users).



---------------
John Mount
http://www.win-vector.com/ <http://www.win-vector.com/> 
Our book: Practical Data Science with R http://www.manning.com/zumel/ <http://www.manning.com/zumel/>




	[[alternative HTML version deleted]]


From jporzak at gmail.com  Fri Aug 19 17:23:54 2016
From: jporzak at gmail.com (Jim Porzak)
Date: Fri, 19 Aug 2016 08:23:54 -0700
Subject: [Rd] summary.default rounding on numeric seems inconsistent
 with other R behaviors
In-Reply-To: <944E96FB-9C3B-46A3-9C57-8AF8EAA5284A@win-vector.com>
References: <944E96FB-9C3B-46A3-9C57-8AF8EAA5284A@win-vector.com>
Message-ID: <CAOo3SQgdpQtcDC7WTfJxxrf2oP0keVSVUEoOHG7sLKeSn-iW=Q@mail.gmail.com>

Concur.
I would argue the issue is more critical when sharing results (say
summary() in a RMarkdown) with our business partners.



On Fri, Aug 19, 2016 at 8:04 AM, John Mount <jmount at win-vector.com> wrote:

> I was wondering if it would make sense to change the default behavior of
> the following:
>
> summary(15555L)
> ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
> ##   15560   15560   15560   15560   15560   15560
>
> summary.default on numeric values rounds values (not just presentation) to
> getOption("digits")-3L (or four) digits by default, making those values
> surprising and less suitable for further calculation.  Summary on matrix
> and data.frame do not do so.
>
> It seems it would be nice to have x=15555L; summary(x)[['Min.']] == min(x)
> evaluate to TRUE.  I know one can alter behavior by changing the global
> ?digits? option, but I don?t know what other impacts that might have.
> Ideally I would think summary.default would not round its values at all,
> but use digits to control presentation (by overriding print and such).
> Even in presentation the rounding without switching to scientific notation
> (such as 1.556e+4) is a bit surprising (I understand rounding and
> scientific notation are two different presentation issues, but new users
> are very confused that something that appears to be an integer has been
> rounded).
>
> Example:
>
> summary(data.frame(x=15555))
> ##        x
> ##  Min.   :15555
> ##  1st Qu.:15555
> ##  Median :15555
> ##  Mean   :15555
> ##  3rd Qu.:15555
> ##  Max.   :15555
> summary(15555)
> ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
> ##   15560   15560   15560   15560   15560   15560
>
> I have a (bit whiny) polemic trying to explain the pain point here
> http://www.win-vector.com/blog/2016/08/my-criticism-of-r-numeric-summary/
> <http://www.win-vector.com/blog/2016/08/my-criticism-of-r-numeric-summary/>
> (I am not trying to be rude, more I am trying to emphasize why this can be
> confusing to new users).
>
>
>
> ---------------
> John Mount
> http://www.win-vector.com/ <http://www.win-vector.com/>
> Our book: Practical Data Science with R http://www.manning.com/zumel/ <
> http://www.manning.com/zumel/>
>
>
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel




-- 

Best,
Jim Porzak
DS4CI.org  <http://www.ds4ci.org/>
LinkedIn.com/in/JimPorzak <http://www.linkedin.com/in/jimporzak>
use R! Group SF: meetup.com/R-Users/ <http://www.meetup.com/R-Users/>
R Beginners, Berkeley: meetup.com/r-enthusiasts/
<http://www.meetup.com/r-enthusiasts/>

	[[alternative HTML version deleted]]


From sgiannerini at gmail.com  Fri Aug 19 18:24:07 2016
From: sgiannerini at gmail.com (Simone Giannerini)
Date: Fri, 19 Aug 2016 18:24:07 +0200
Subject: [Rd] summary.default rounding on numeric seems inconsistent
 with other R behaviors
In-Reply-To: <944E96FB-9C3B-46A3-9C57-8AF8EAA5284A@win-vector.com>
References: <944E96FB-9C3B-46A3-9C57-8AF8EAA5284A@win-vector.com>
Message-ID: <CANcXGiyBrz6d13POfJBLwgtLMUyYe40BwFMfVg0jzGVxY2aUXA@mail.gmail.com>

John,

I had raised the matter ten years ago, and I was told that the topic was
already very^3 old

https://stat.ethz.ch/pipermail/r-devel/2006-September/042684.html

there is some discussion on its origin and also a declaration of intents to
change the default behaviour, which, unfortunately, remained a declaration.
I agree that R could do better here, let's hope in less than ten years
though. ;-)

Kind regards,

Simone

On Fri, Aug 19, 2016 at 5:04 PM, John Mount <jmount at win-vector.com> wrote:

> I was wondering if it would make sense to change the default behavior of
> the following:
>
> summary(15555L)
> ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
> ##   15560   15560   15560   15560   15560   15560
>
> summary.default on numeric values rounds values (not just presentation) to
> getOption("digits")-3L (or four) digits by default, making those values
> surprising and less suitable for further calculation.  Summary on matrix
> and data.frame do not do so.
>
> It seems it would be nice to have x=15555L; summary(x)[['Min.']] == min(x)
> evaluate to TRUE.  I know one can alter behavior by changing the global
> ?digits? option, but I don?t know what other impacts that might have.
> Ideally I would think summary.default would not round its values at all,
> but use digits to control presentation (by overriding print and such).
> Even in presentation the rounding without switching to scientific notation
> (such as 1.556e+4) is a bit surprising (I understand rounding and
> scientific notation are two different presentation issues, but new users
> are very confused that something that appears to be an integer has been
> rounded).
>
> Example:
>
> summary(data.frame(x=15555))
> ##        x
> ##  Min.   :15555
> ##  1st Qu.:15555
> ##  Median :15555
> ##  Mean   :15555
> ##  3rd Qu.:15555
> ##  Max.   :15555
> summary(15555)
> ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
> ##   15560   15560   15560   15560   15560   15560
>
> I have a (bit whiny) polemic trying to explain the pain point here
> http://www.win-vector.com/blog/2016/08/my-criticism-of-r-numeric-summary/
> <http://www.win-vector.com/blog/2016/08/my-criticism-of-r-numeric-summary/>
> (I am not trying to be rude, more I am trying to emphasize why this can be
> confusing to new users).
>
>
>
> ---------------
> John Mount
> http://www.win-vector.com/ <http://www.win-vector.com/>
> Our book: Practical Data Science with R http://www.manning.com/zumel/ <
> http://www.manning.com/zumel/>
>
>
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel




-- 
___________________________________________________

Simone Giannerini
Dipartimento di Scienze Statistiche "Paolo Fortunati"
Universita' di Bologna
Via delle belle arti 41 - 40126  Bologna,  ITALY
Tel: +39 051 2098262  Fax: +39 051 232153
http://www2.stat.unibo.it/giannerini/
___________________________________________________

	[[alternative HTML version deleted]]


From edd at debian.org  Fri Aug 19 18:40:05 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Fri, 19 Aug 2016 11:40:05 -0500
Subject: [Rd] summary.default rounding on numeric seems inconsistent
 with other R behaviors
In-Reply-To: <CANcXGiyBrz6d13POfJBLwgtLMUyYe40BwFMfVg0jzGVxY2aUXA@mail.gmail.com>
References: <944E96FB-9C3B-46A3-9C57-8AF8EAA5284A@win-vector.com>
	<CANcXGiyBrz6d13POfJBLwgtLMUyYe40BwFMfVg0jzGVxY2aUXA@mail.gmail.com>
Message-ID: <22455.13925.282926.46662@max.nulle.part>


It is the old story of defined behaviour and expected outcomes. Hard to
change now.

So I would suggest you do something like this in your ~/.Rprofile:

R> smry <- function(...) summary(..., digits=6)
R> smry(155555L)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
 155555  155555  155555  155555  155555  155555
R>

Maybe call it Summary() instead.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From suharto_anggono at yahoo.com  Sun Aug 21 12:44:18 2016
From: suharto_anggono at yahoo.com (Suharto Anggono Suharto Anggono)
Date: Sun, 21 Aug 2016 10:44:18 +0000 (UTC)
Subject: [Rd] 'droplevels' inappropriate change
References: <561464115.479511.1471776258565.ref@mail.yahoo.com>
Message-ID: <561464115.479511.1471776258565@mail.yahoo.com>

In R devel r71124, if 'x' is a factor, droplevels(x) gives
factor(x, exclude = NULL) .
In R 3.3.1, it gives
factor(x) .

If a factor 'x' has NA and levels of 'x' doesn't contain NA, factor(x) gives the expected result for droplevels(x) , but factor(x, exclude = NULL) doesn't. As I said in https://stat.ethz.ch/pipermail/r-devel/2016-May/072796.html , factor(x, exclude = NULL) adds NA as a level.

Using
factor(x, exclude = if(anyNA(levels(x))) NULL else NA ) ,
like in the code of function `[.factor` (in the same file, factor.R, as 'droplevels'), is better.
It is possible just to use
x[, drop = TRUE] .

For a factor 'x' that has NA level and also NA value, factor(x, exclude = NULL) is not perfect, though. It change NA to be associated with NA factor level.


From henrik.bengtsson at gmail.com  Mon Aug 22 11:16:50 2016
From: henrik.bengtsson at gmail.com (Henrik Bengtsson)
Date: Mon, 22 Aug 2016 11:16:50 +0200
Subject: [Rd] Milestone: 9000 packages on CRAN
Message-ID: <CAFDcVCQu+5tybguAPqaC_T3qeP4c_5sMEq9NZ_ewnHzYzOPg8g@mail.gmail.com>

An additional 1000 packages have been added to CRAN.  This time, it
took less than 6 months. Today (August 22, 2016), the Comprehensive R
Archive Network (CRAN) [1] reports:

?Currently, the CRAN package repository features 9004 available packages.?

The rate with which new packages are added to CRAN is increasing.
During 2007-2009 we went from 1000 to 2000 packages in 906 days (1.1
per day) and in 2014-2015 we went from 6000 to 7000 packages in 287
days (3.4 per day). The next 1000 packages took 201 days (5.0 per day)
and these most recent 1000 packages took only 175 days (5.7 per day).
With this speedup, we should hit 10000 packages on CRAN early 2017.

Since the start of CRAN on April 23, 1997 [2], there has been on
average one new package appearing on CRAN every 18.8 hours - actually
even more than that because dropped/archived packages are not
accounted for. The 9000 packages on CRAN are maintained by 5289 people
[3].

A big thank you to the R core, the CRAN team (!), to all package
developers, to our friendly community, to everyone out there helping
others, and to various online services that simplify package
development. We can all give back by carefully reporting bugs to the
maintainers, properly citing any packages you use in your publications
(see citation("pkg name")), and help new comers to use R.

Milestones:

2016-08-22: 9000 packages [this post]
2016-02-29: 8000 packages [12]
2015-08-12: 7000 packages [11]
2014-10-29: 6000 packages [10]
2013-11-08: 5000 packages [9]
2012-08-23: 4000 packages [8]
2011-05-12: 3000 packages [7]
2009-10-04: 2000 packages [6]
2007-04-12: 1000 packages [5]
2004-10-01: 500 packages [4]
2003-04-01: 250 packages [4]

These data are for CRAN only. There are many more packages elsewhere,
e.g. R-Forge, Bioconductor, Github etc.

[1] http://cran.r-project.org/web/packages/
[2] https://en.wikipedia.org/wiki/R_(programming_language)#Milestones
[3] http://www.r-pkg.org/
[4] Private data
[5] https://stat.ethz.ch/pipermail/r-devel/2007-April/045359.html
[6] https://stat.ethz.ch/pipermail/r-devel/2009-October/055049.html
[7] https://stat.ethz.ch/pipermail/r-devel/2011-May/061002.html
[8] https://stat.ethz.ch/pipermail/r-devel/2012-August/064675.html
[9] https://stat.ethz.ch/pipermail/r-devel/2013-November/067935.html
[10] https://stat.ethz.ch/pipermail/r-devel/2014-October/069997.html
[11] https://stat.ethz.ch/pipermail/r-package-devel/2015q3/000393.html
[12] https://stat.ethz.ch/pipermail/r-devel/2016-February/072388.html

All the best,

Henrik


From maechler at stat.math.ethz.ch  Mon Aug 22 12:30:28 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Mon, 22 Aug 2016 12:30:28 +0200
Subject: [Rd] 'droplevels' inappropriate change
In-Reply-To: <561464115.479511.1471776258565@mail.yahoo.com>
References: <561464115.479511.1471776258565.ref@mail.yahoo.com>
	<561464115.479511.1471776258565@mail.yahoo.com>
Message-ID: <22458.54340.826512.356597@stat.math.ethz.ch>

>>>>> Suharto Anggono Suharto Anggono via R-devel <r-devel at r-project.org>
>>>>>     on Sun, 21 Aug 2016 10:44:18 +0000 writes:

    > In R devel r71124, if 'x' is a factor, droplevels(x) gives
    > factor(x, exclude = NULL) .  In R 3.3.1, it gives
    > factor(x) .

    > If a factor 'x' has NA and levels of 'x' doesn't contain
    > NA, factor(x) gives the expected result for droplevels(x)
    > , but factor(x, exclude = NULL) doesn't. As I said in
    > https://stat.ethz.ch/pipermail/r-devel/2016-May/072796.html
    > , factor(x, exclude = NULL) adds NA as a level.

    > Using factor(x, exclude = if(anyNA(levels(x))) NULL else NA ) , 
    > like in the code of function `[.factor` (in the
    > same file, factor.R, as 'droplevels'), is better.  It is
    > possible just to use x[, drop = TRUE] .

You are right.  The change to droplevels() [in svn rev 71113 ]
was not thorough enough, and I will commit a change that uses

    factor(x, exclude = if(anyNA(levels(x))) NULL else NA )

------

    > For a factor 'x' that has NA level and also NA value,

i.e., one like this ?

x <- factor(c(1, 2, NA, NA), exclude = NULL) ; is.na(x)[2] <- TRUE
x # << two "different" NA's (in codes | w/ level) looking the same in print()
stopifnot(identical(x, structure(as.integer(c(1, NA, 3, 3)),
				 .Label = c("1", "2", NA), class = "factor")))


    > factor(x, exclude = NULL) is not perfect, though. It
    > change NA to be associated with NA factor level.

yes, it does, but why is that not good?
The result of calling factor() on a factor 'f' should either be 'f'
*or* a more regular version of 'f'.

Now, for the above 'x' --- which I call "pathological", as it
has two kinds of NA's but the user does not easily see that ---
I am happy that both

  factor(x)               # and
  factor(x, exlude = NULL)

produce a "regularized" version of x:

  > dput(x)
  structure(c(1L, NA, 3L, 3L), .Label = c("1", "2", NA), class = "factor")
  > dput(factor(x))
  structure(c(1L, NA, NA, NA), .Label = "1", class = "factor")
  > dput(factor(x, exclude=NULL))
  structure(c(1L, 2L, 2L, 2L), .Label = c("1", NA), class = "factor")
  >


From bob at rud.is  Mon Aug 22 14:33:09 2016
From: bob at rud.is (Bob Rudis)
Date: Mon, 22 Aug 2016 08:33:09 -0400
Subject: [Rd] Milestone: 9000 packages on CRAN
In-Reply-To: <CAFDcVCQu+5tybguAPqaC_T3qeP4c_5sMEq9NZ_ewnHzYzOPg8g@mail.gmail.com>
References: <CAFDcVCQu+5tybguAPqaC_T3qeP4c_5sMEq9NZ_ewnHzYzOPg8g@mail.gmail.com>
Message-ID: <CAA-FpKX=4ap-THY=wrzXOoW7x8wxnW3m+sbdpzybtvNEXdV=Lg@mail.gmail.com>

Hear! Hear! +100 for the shout out to the CRAN volunteers. Some of the most
unsung heroes of the R universe.

On Mon, Aug 22, 2016 at 5:16 AM, Henrik Bengtsson <
henrik.bengtsson at gmail.com> wrote:

> An additional 1000 packages have been added to CRAN.  This time, it
> took less than 6 months. Today (August 22, 2016), the Comprehensive R
> Archive Network (CRAN) [1] reports:
>
> ?Currently, the CRAN package repository features 9004 available packages.?
>
> The rate with which new packages are added to CRAN is increasing.
> During 2007-2009 we went from 1000 to 2000 packages in 906 days (1.1
> per day) and in 2014-2015 we went from 6000 to 7000 packages in 287
> days (3.4 per day). The next 1000 packages took 201 days (5.0 per day)
> and these most recent 1000 packages took only 175 days (5.7 per day).
> With this speedup, we should hit 10000 packages on CRAN early 2017.
>
> Since the start of CRAN on April 23, 1997 [2], there has been on
> average one new package appearing on CRAN every 18.8 hours - actually
> even more than that because dropped/archived packages are not
> accounted for. The 9000 packages on CRAN are maintained by 5289 people
> [3].
>
> A big thank you to the R core, the CRAN team (!), to all package
> developers, to our friendly community, to everyone out there helping
> others, and to various online services that simplify package
> development. We can all give back by carefully reporting bugs to the
> maintainers, properly citing any packages you use in your publications
> (see citation("pkg name")), and help new comers to use R.
>
> Milestones:
>
> 2016-08-22: 9000 packages [this post]
> 2016-02-29: 8000 packages [12]
> 2015-08-12: 7000 packages [11]
> 2014-10-29: 6000 packages [10]
> 2013-11-08: 5000 packages [9]
> 2012-08-23: 4000 packages [8]
> 2011-05-12: 3000 packages [7]
> 2009-10-04: 2000 packages [6]
> 2007-04-12: 1000 packages [5]
> 2004-10-01: 500 packages [4]
> 2003-04-01: 250 packages [4]
>
> These data are for CRAN only. There are many more packages elsewhere,
> e.g. R-Forge, Bioconductor, Github etc.
>
> [1] http://cran.r-project.org/web/packages/
> [2] https://en.wikipedia.org/wiki/R_(programming_language)#Milestones
> [3] http://www.r-pkg.org/
> [4] Private data
> [5] https://stat.ethz.ch/pipermail/r-devel/2007-April/045359.html
> [6] https://stat.ethz.ch/pipermail/r-devel/2009-October/055049.html
> [7] https://stat.ethz.ch/pipermail/r-devel/2011-May/061002.html
> [8] https://stat.ethz.ch/pipermail/r-devel/2012-August/064675.html
> [9] https://stat.ethz.ch/pipermail/r-devel/2013-November/067935.html
> [10] https://stat.ethz.ch/pipermail/r-devel/2014-October/069997.html
> [11] https://stat.ethz.ch/pipermail/r-package-devel/2015q3/000393.html
> [12] https://stat.ethz.ch/pipermail/r-devel/2016-February/072388.html
>
> All the best,
>
> Henrik
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From spencer.graves at prodsyse.com  Mon Aug 22 14:59:54 2016
From: spencer.graves at prodsyse.com (Spencer Graves)
Date: Mon, 22 Aug 2016 07:59:54 -0500
Subject: [Rd] Milestone: 9000 packages on CRAN
In-Reply-To: <CAA-FpKX=4ap-THY=wrzXOoW7x8wxnW3m+sbdpzybtvNEXdV=Lg@mail.gmail.com>
References: <CAFDcVCQu+5tybguAPqaC_T3qeP4c_5sMEq9NZ_ewnHzYzOPg8g@mail.gmail.com>
	<CAA-FpKX=4ap-THY=wrzXOoW7x8wxnW3m+sbdpzybtvNEXdV=Lg@mail.gmail.com>
Message-ID: <199347d4-f976-66fc-d71c-ad4aba5ec324@prodsyse.com>

       The entirety of humanity lives a little better today, because of 
problems solved using CRAN software.  Some of those problems would still 
await solution, because some of the people involved in developing and 
disseminating those solutions would not have been as effective or 
efficient without CRAN and R.


       We're not just laying brick:  We're building a cathedral.


       Spencer Graves


On 8/22/2016 7:33 AM, Bob Rudis wrote:
> Hear! Hear! +100 for the shout out to the CRAN volunteers. Some of the most
> unsung heroes of the R universe.
>
> On Mon, Aug 22, 2016 at 5:16 AM, Henrik Bengtsson <
> henrik.bengtsson at gmail.com> wrote:
>
>> An additional 1000 packages have been added to CRAN.  This time, it
>> took less than 6 months. Today (August 22, 2016), the Comprehensive R
>> Archive Network (CRAN) [1] reports:
>>
>> ?Currently, the CRAN package repository features 9004 available packages.?
>>
>> The rate with which new packages are added to CRAN is increasing.
>> During 2007-2009 we went from 1000 to 2000 packages in 906 days (1.1
>> per day) and in 2014-2015 we went from 6000 to 7000 packages in 287
>> days (3.4 per day). The next 1000 packages took 201 days (5.0 per day)
>> and these most recent 1000 packages took only 175 days (5.7 per day).
>> With this speedup, we should hit 10000 packages on CRAN early 2017.
>>
>> Since the start of CRAN on April 23, 1997 [2], there has been on
>> average one new package appearing on CRAN every 18.8 hours - actually
>> even more than that because dropped/archived packages are not
>> accounted for. The 9000 packages on CRAN are maintained by 5289 people
>> [3].
>>
>> A big thank you to the R core, the CRAN team (!), to all package
>> developers, to our friendly community, to everyone out there helping
>> others, and to various online services that simplify package
>> development. We can all give back by carefully reporting bugs to the
>> maintainers, properly citing any packages you use in your publications
>> (see citation("pkg name")), and help new comers to use R.
>>
>> Milestones:
>>
>> 2016-08-22: 9000 packages [this post]
>> 2016-02-29: 8000 packages [12]
>> 2015-08-12: 7000 packages [11]
>> 2014-10-29: 6000 packages [10]
>> 2013-11-08: 5000 packages [9]
>> 2012-08-23: 4000 packages [8]
>> 2011-05-12: 3000 packages [7]
>> 2009-10-04: 2000 packages [6]
>> 2007-04-12: 1000 packages [5]
>> 2004-10-01: 500 packages [4]
>> 2003-04-01: 250 packages [4]
>>
>> These data are for CRAN only. There are many more packages elsewhere,
>> e.g. R-Forge, Bioconductor, Github etc.
>>
>> [1] http://cran.r-project.org/web/packages/
>> [2] https://en.wikipedia.org/wiki/R_(programming_language)#Milestones
>> [3] http://www.r-pkg.org/
>> [4] Private data
>> [5] https://stat.ethz.ch/pipermail/r-devel/2007-April/045359.html
>> [6] https://stat.ethz.ch/pipermail/r-devel/2009-October/055049.html
>> [7] https://stat.ethz.ch/pipermail/r-devel/2011-May/061002.html
>> [8] https://stat.ethz.ch/pipermail/r-devel/2012-August/064675.html
>> [9] https://stat.ethz.ch/pipermail/r-devel/2013-November/067935.html
>> [10] https://stat.ethz.ch/pipermail/r-devel/2014-October/069997.html
>> [11] https://stat.ethz.ch/pipermail/r-package-devel/2015q3/000393.html
>> [12] https://stat.ethz.ch/pipermail/r-devel/2016-February/072388.html
>>
>> All the best,
>>
>> Henrik
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ravi.varadhan at jhu.edu  Mon Aug 22 17:09:18 2016
From: ravi.varadhan at jhu.edu (Ravi Varadhan)
Date: Mon, 22 Aug 2016 15:09:18 +0000
Subject: [Rd] Milestone: 9000 packages on CRAN
In-Reply-To: <199347d4-f976-66fc-d71c-ad4aba5ec324@prodsyse.com>
References: <CAFDcVCQu+5tybguAPqaC_T3qeP4c_5sMEq9NZ_ewnHzYzOPg8g@mail.gmail.com>
	<CAA-FpKX=4ap-THY=wrzXOoW7x8wxnW3m+sbdpzybtvNEXdV=Lg@mail.gmail.com>,
	<199347d4-f976-66fc-d71c-ad4aba5ec324@prodsyse.com>
Message-ID: <1471878538432.6579@jhu.edu>

Indeed!  

Ravi
________________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of Spencer Graves <spencer.graves at prodsyse.com>
Sent: Monday, August 22, 2016 8:59 AM
To: r-devel at r-project.org
Subject: Re: [Rd] Milestone: 9000 packages on CRAN

       The entirety of humanity lives a little better today, because of
problems solved using CRAN software.  Some of those problems would still
await solution, because some of the people involved in developing and
disseminating those solutions would not have been as effective or
efficient without CRAN and R.


       We're not just laying brick:  We're building a cathedral.


       Spencer Graves


On 8/22/2016 7:33 AM, Bob Rudis wrote:
> Hear! Hear! +100 for the shout out to the CRAN volunteers. Some of the most
> unsung heroes of the R universe.
>
> On Mon, Aug 22, 2016 at 5:16 AM, Henrik Bengtsson <
> henrik.bengtsson at gmail.com> wrote:
>
>> An additional 1000 packages have been added to CRAN.  This time, it
>> took less than 6 months. Today (August 22, 2016), the Comprehensive R
>> Archive Network (CRAN) [1] reports:
>>
>> ?Currently, the CRAN package repository features 9004 available packages.?
>>
>> The rate with which new packages are added to CRAN is increasing.
>> During 2007-2009 we went from 1000 to 2000 packages in 906 days (1.1
>> per day) and in 2014-2015 we went from 6000 to 7000 packages in 287
>> days (3.4 per day). The next 1000 packages took 201 days (5.0 per day)
>> and these most recent 1000 packages took only 175 days (5.7 per day).
>> With this speedup, we should hit 10000 packages on CRAN early 2017.
>>
>> Since the start of CRAN on April 23, 1997 [2], there has been on
>> average one new package appearing on CRAN every 18.8 hours - actually
>> even more than that because dropped/archived packages are not
>> accounted for. The 9000 packages on CRAN are maintained by 5289 people
>> [3].
>>
>> A big thank you to the R core, the CRAN team (!), to all package
>> developers, to our friendly community, to everyone out there helping
>> others, and to various online services that simplify package
>> development. We can all give back by carefully reporting bugs to the
>> maintainers, properly citing any packages you use in your publications
>> (see citation("pkg name")), and help new comers to use R.
>>
>> Milestones:
>>
>> 2016-08-22: 9000 packages [this post]
>> 2016-02-29: 8000 packages [12]
>> 2015-08-12: 7000 packages [11]
>> 2014-10-29: 6000 packages [10]
>> 2013-11-08: 5000 packages [9]
>> 2012-08-23: 4000 packages [8]
>> 2011-05-12: 3000 packages [7]
>> 2009-10-04: 2000 packages [6]
>> 2007-04-12: 1000 packages [5]
>> 2004-10-01: 500 packages [4]
>> 2003-04-01: 250 packages [4]
>>
>> These data are for CRAN only. There are many more packages elsewhere,
>> e.g. R-Forge, Bioconductor, Github etc.
>>
>> [1] http://cran.r-project.org/web/packages/
>> [2] https://en.wikipedia.org/wiki/R_(programming_language)#Milestones
>> [3] http://www.r-pkg.org/
>> [4] Private data
>> [5] https://stat.ethz.ch/pipermail/r-devel/2007-April/045359.html
>> [6] https://stat.ethz.ch/pipermail/r-devel/2009-October/055049.html
>> [7] https://stat.ethz.ch/pipermail/r-devel/2011-May/061002.html
>> [8] https://stat.ethz.ch/pipermail/r-devel/2012-August/064675.html
>> [9] https://stat.ethz.ch/pipermail/r-devel/2013-November/067935.html
>> [10] https://stat.ethz.ch/pipermail/r-devel/2014-October/069997.html
>> [11] https://stat.ethz.ch/pipermail/r-package-devel/2015q3/000393.html
>> [12] https://stat.ethz.ch/pipermail/r-devel/2016-February/072388.html
>>
>> All the best,
>>
>> Henrik
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>       [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From hiebert at uvic.ca  Mon Aug 22 23:30:21 2016
From: hiebert at uvic.ca (James Hiebert)
Date: Mon, 22 Aug 2016 14:30:21 -0700
Subject: [Rd] CC on Bug 16932?
Message-ID: <6cab931b-8ebc-74d6-1474-a2326efdd1ff@uvic.ca>

Hi,

I'm being affected by Bug 16932 
(https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16932), and would 
like to comment on it and/or be CC'ed on it.

Unfortunately I can't create a Bugzilla account... when I try, it tells 
me "The e-mail address you entered (hiebert at uvic.ca) didn't pass our 
syntax checking for a legal email address. New accounts are disabled. 
Please post bug reports to R-devel at r-project.org; if they are 
reasonable, we will whitelist you. It also must not contain any illegal 
characters."

Could I please be whitelisted? Many thanks.

~James Hiebert


From murdoch.duncan at gmail.com  Tue Aug 23 00:00:42 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Mon, 22 Aug 2016 18:00:42 -0400
Subject: [Rd] CC on Bug 16932?
In-Reply-To: <6cab931b-8ebc-74d6-1474-a2326efdd1ff@uvic.ca>
References: <6cab931b-8ebc-74d6-1474-a2326efdd1ff@uvic.ca>
Message-ID: <41819d06-d185-f8b0-ad7c-9352c0eef1b2@gmail.com>

On 22/08/2016 5:30 PM, James Hiebert wrote:
> Hi,
>
> I'm being affected by Bug 16932
> (https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16932), and would
> like to comment on it and/or be CC'ed on it.
>
> Unfortunately I can't create a Bugzilla account... when I try, it tells
> me "The e-mail address you entered (hiebert at uvic.ca) didn't pass our
> syntax checking for a legal email address. New accounts are disabled.
> Please post bug reports to R-devel at r-project.org; if they are
> reasonable, we will whitelist you. It also must not contain any illegal
> characters."
>
> Could I please be whitelisted? Many thanks.

Sure, I'll whitelist hiebert at uvic.ca.

Duncan Murdoch


From maechler at stat.math.ethz.ch  Tue Aug 23 14:33:58 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Tue, 23 Aug 2016 14:33:58 +0200
Subject: [Rd] summary.default rounding on numeric seems inconsistent
 with other R behaviors
In-Reply-To: <22455.13925.282926.46662@max.nulle.part>
References: <944E96FB-9C3B-46A3-9C57-8AF8EAA5284A@win-vector.com>
	<CANcXGiyBrz6d13POfJBLwgtLMUyYe40BwFMfVg0jzGVxY2aUXA@mail.gmail.com>
	<22455.13925.282926.46662@max.nulle.part>
Message-ID: <22460.17078.724292.456732@stat.math.ethz.ch>

>>>>> Dirk Eddelbuettel <edd at debian.org>
>>>>>     on Fri, 19 Aug 2016 11:40:05 -0500 writes:

    > It is the old story of defined behaviour and expected outcomes. Hard to
    > change now.

yes...  not impossible though... see below

    > So I would suggest you do something like this in your ~/.Rprofile:

    R> smry <- function(...) summary(..., digits=6)
    R> smry(155555L)
    > Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
    > 155555  155555  155555  155555  155555  155555
    R> 

    > Maybe call it Summary() instead.

yes, do use a different name.   There other such functions, 'summarize()'.

Simone wrote

> I had raised the matter ten years ago, and I was told that the topic was
> already very^3 old
> 
> https://stat.ethz.ch/pipermail/r-devel/2006-September/042684.html
> 
> there is some discussion on its origin and also a declaration of intents to
> change the default behaviour, which, unfortunately, remained a declaration.
> I agree that R could do better here, let's hope in less than ten years
> though. ;-)

and the 2006 thread he mentions is basically a similar question
and a reply by me that I agreed to some extent that a change was
desirable ... originally we had adhered to the S "standard"
which became the S+ one and at that time I did still have access
to a running instance of S-PLUS 6.2 where I had seen that
Insightful (the company selling curating and selling S-PLUS)
also had decided to change the ~15 year old S "standard"... and
indeed I was implicitly *asking* for proposals of such a change,
but I think I never saw a (careful) proposal.

In the spirit of probably 99% of other "base R" code, a change
should really *not* round __at all__ in the summary() methods,
but *only* in the print() methods of such summary() results.

OTOH, for back compatibility, if a user does use  summary(.., digits=.)
explicitly, these digits should be 'obeyed' of course.

I think summary(<1-variable>)  could easily, and relatively "back-compatibly"
be changed in the above vain.

One "real problem" is the wrong decision (also from S and S-PLUS
times IIRC) to return a "character" matrix for
   summary(<data.frame>, ..)
or summary(<matrix>, ..)
(For a data frame, I think it should return a list() of
 single-variable summary()es, or then a numeric matrix .. in
 both cases have a good print() method)

because when you return a character matrix, all the numbers are
already rounded, ... and if we follow the above approach they 
would have to be rounded further... ``the horror''

I wonder how much code out there is relying on the internal
structure of  summary(<data.frame>).. because that is the one
part I'd definitely want to change, too.


Martin


From maechler at stat.math.ethz.ch  Wed Aug 24 11:36:38 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Wed, 24 Aug 2016 11:36:38 +0200
Subject: [Rd] summary.default rounding on numeric seems inconsistent
 with other R behaviors
In-Reply-To: <22460.17078.724292.456732@stat.math.ethz.ch>
References: <944E96FB-9C3B-46A3-9C57-8AF8EAA5284A@win-vector.com>
	<CANcXGiyBrz6d13POfJBLwgtLMUyYe40BwFMfVg0jzGVxY2aUXA@mail.gmail.com>
	<22455.13925.282926.46662@max.nulle.part>
	<22460.17078.724292.456732@stat.math.ethz.ch>
Message-ID: <22461.27302.298978.16937@stat.math.ethz.ch>

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Tue, 23 Aug 2016 14:33:58 +0200 writes:

>>>>> Dirk Eddelbuettel <edd at debian.org>
>>>>>     on Fri, 19 Aug 2016 11:40:05 -0500 writes:

    >> It is the old story of defined behaviour and expected outcomes. Hard to
    >> change now.

    > yes...  not impossible though... see below

    >> So I would suggest you do something like this in your ~/.Rprofile:

    R> smry <- function(...) summary(..., digits=6)
    R> smry(155555L)
    >> Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
    >> 155555  155555  155555  155555  155555  155555
    R> 

    >> Maybe call it Summary() instead.

    > yes, do use a different name.   There other such functions, 'summarize()'.

    > Simone wrote

    >> I had raised the matter ten years ago, and I was told that the topic was
    >> already very^3 old
    >> 
    >> https://stat.ethz.ch/pipermail/r-devel/2006-September/042684.html
    >> 
    >> there is some discussion on its origin and also a declaration of intents to
    >> change the default behaviour, which, unfortunately, remained a declaration.
    >> I agree that R could do better here, let's hope in less than ten years
    >> though. ;-)

    > and the 2006 thread he mentions is basically a similar question
    > and a reply by me that I agreed to some extent that a change was
    > desirable ... originally we had adhered to the S "standard"
    > which became the S+ one and at that time I did still have access
    > to a running instance of S-PLUS 6.2 where I had seen that
    > Insightful (the company selling curating and selling S-PLUS)
    > also had decided to change the ~15 year old S "standard"... and
    > indeed I was implicitly *asking* for proposals of such a change,
    > but I think I never saw a (careful) proposal.

    > In the spirit of probably 99% of other "base R" code, a change
    > should really *not* round __at all__ in the summary() methods,
    > but *only* in the print() methods of such summary() results.

    > OTOH, for back compatibility, if a user does use  summary(.., digits=.)
    > explicitly, these digits should be 'obeyed' of course.

    > I think summary(<1-variable>)  could easily, and relatively "back-compatibly"
    > be changed in the above vain.

    > One "real problem" is the wrong decision (also from S and S-PLUS
    > times IIRC) to return a "character" matrix for
    > summary(<data.frame>, ..)
    > or summary(<matrix>, ..)
    > (For a data frame, I think it should return a list() of
    > single-variable summary()es, or then a numeric matrix .. in
    > both cases have a good print() method)

    > because when you return a character matrix, all the numbers are
    > already rounded, ... and if we follow the above approach they 
    > would have to be rounded further... ``the horror''

    > I wonder how much code out there is relying on the internal
    > structure of  summary(<data.frame>).. because that is the one
    > part I'd definitely want to change, too.

[Talking to myself .. ;-)]
Yes, but that's the tough part to change.

This thread's topic is really only about changing summary.default(),
and I have started testing such a change now, and that does seem
very sensible:

- No rounding in summary.default(),  but
- (almost) back-compatible rounding in its print() method.

My current plan is to commit this to R-devel in a day or so,
unless unforeseen issues emerge.

Martin


From patrick.brown at utoronto.ca  Wed Aug 24 14:09:46 2016
From: patrick.brown at utoronto.ca (Patrick Brown)
Date: Wed, 24 Aug 2016 08:09:46 -0400
Subject: [Rd] feature request for non-sweave vignettes
Message-ID: <CA+j2mtUy8966Mt9ZRKzAzYATFxuk4bk7mjJJidmem0=B=5rc5A@mail.gmail.com>

Currently Makefiles for vignettes are only supported for .tex files.  Could
the tools package be modified to allow file extensions to be specified for
a vignette engine?  Having the pandoc pdf conversion in a Makefile rather
than through R would be tidier in some cases.

If I specify my vignette engine as

```
tools::vignetteEngine(
  'myengine',
  pattern = '\\.[Rr](md|nw)$',
  output = c('md', 'tex'),
  ...
)
```

the `tools:::find_vignette_product` function could have

`if (final) c("pdf", "html") else unique(c("pdf", "html", "tex",
engine$output))`

that's probably the only line that would need changing.

p

Patrick Brown
Department of Statistical Sciences, University of Toronto
Analytics and Informatics, Cancer Care Ontario
pbrown.ca

	[[alternative HTML version deleted]]


From jmount at win-vector.com  Wed Aug 24 16:25:50 2016
From: jmount at win-vector.com (John Mount)
Date: Wed, 24 Aug 2016 07:25:50 -0700
Subject: [Rd] summary.default rounding on numeric seems inconsistent
	with other R behaviors
In-Reply-To: <22461.27302.298978.16937@stat.math.ethz.ch>
References: <944E96FB-9C3B-46A3-9C57-8AF8EAA5284A@win-vector.com>
	<CANcXGiyBrz6d13POfJBLwgtLMUyYe40BwFMfVg0jzGVxY2aUXA@mail.gmail.com>
	<22455.13925.282926.46662@max.nulle.part>
	<22460.17078.724292.456732@stat.math.ethz.ch>
	<22461.27302.298978.16937@stat.math.ethz.ch>
Message-ID: <A82891FC-7568-4D4C-8702-11D528BF7C40@win-vector.com>


> On Aug 24, 2016, at 2:36 AM, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
>>>>>> 
> 
> [Talking to myself .. ;-)]
> Yes, but that's the tough part to change.
> 
> This thread's topic is really only about changing summary.default(),
> and I have started testing such a change now, and that does seem
> very sensible:
> 
> - No rounding in summary.default(),  but
> - (almost) back-compatible rounding in its print() method.
> 
> My current plan is to commit this to R-devel in a day or so,
> unless unforeseen issues emerge.
> 
> Martin
> 


That is potentially a very good outcome.  Thank you so much for producing and testing a patch.

---------------
John Mount
http://www.win-vector.com/ <http://www.win-vector.com/> 
Our book: Practical Data Science with R http://www.manning.com/zumel/ <http://www.manning.com/zumel/>




	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Wed Aug 24 21:23:06 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Wed, 24 Aug 2016 15:23:06 -0400
Subject: [Rd] feature request for non-sweave vignettes
In-Reply-To: <CA+j2mtUy8966Mt9ZRKzAzYATFxuk4bk7mjJJidmem0=B=5rc5A@mail.gmail.com>
References: <CA+j2mtUy8966Mt9ZRKzAzYATFxuk4bk7mjJJidmem0=B=5rc5A@mail.gmail.com>
Message-ID: <9cf10ad5-df38-f272-afaf-fed122218972@gmail.com>

On 24/08/2016 8:09 AM, Patrick Brown wrote:
> Currently Makefiles for vignettes are only supported for .tex files.  Could
> the tools package be modified to allow file extensions to be specified for
> a vignette engine?  Having the pandoc pdf conversion in a Makefile rather
> than through R would be tidier in some cases.
>
> If I specify my vignette engine as
>
> ```
> tools::vignetteEngine(
>   'myengine',
>   pattern = '\\.[Rr](md|nw)$',
>   output = c('md', 'tex'),
>   ...
> )
> ```
>
> the `tools:::find_vignette_product` function could have
>
> `if (final) c("pdf", "html") else unique(c("pdf", "html", "tex",
> engine$output))`
>
> that's probably the only line that would need changing.

Sounds reasonable.  Try it out in R-devel, and submit a patch.

Note that there is at least one other request for vignette improvements, 
i.e.
https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16333, with a 
promise to submit a patch.  It hasn't arrived in 16 months.  So please 
don't promise a patch unless you intend to deliver.

Duncan Murdoch


From greg.werbin at libertymail.net  Thu Aug 25 02:59:55 2016
From: greg.werbin at libertymail.net (Gregory Werbin)
Date: Wed, 24 Aug 2016 20:59:55 -0400
Subject: [Rd] "plot.ts" doesn't respect the value of "pch" (+ blocked from
 Bugzilla signups)
Message-ID: <76d55e22eb66c1138165946af6c6579f@libertymail.net>

I did a search on Bugzilla for "plot.ts" and didn't find anything on 
this issue. I tried to sign up for Bugzilla to report it, but my e-mail 
address didn't pass your "syntax checking" for a legal e-mail address.

The bug is easily reproducible on my machine as follows:

## start

# generate some data
y <- arima.sim(list(), 150)

# this will definitely dispatch to a ".ts" method
class(y)[1] == 'ts'

# compare and note that `cex = 0.5` has no effect
plot(y, type = 'b', pch = 16)
plot(y, type = 'b', pch = 16, cex = 0.5)

# it works if `y` is coerced back to a regular vector
plot(as.numeric(y), type = 'b', pch = 16, cex = 0.5)

# another way to see the issue
plot.ts(y, type = 'b', pch = 16, cex = 0.5)
plot.default(y, type = 'b', pch = 16, cex = 0.5)

## end

Skimming through source code for `plot.ts`, it seems like the `cex` 
argument is being "eaten" by a `...` somewhere without being properly 
passed to `plot.default`.

The output of `R.version` is:
platform       x86_64-apple-darwin15.5.0
arch           x86_64
os             darwin15.5.0
system         x86_64, darwin15.5.0
status
major          3
minor          3.1
year           2016
month          06
day            21
svn rev        70800
language       R
version.string R version 3.3.1 (2016-06-21)
nickname       Bug in Your Hair

Greg


From dwinsemius at comcast.net  Thu Aug 25 09:00:04 2016
From: dwinsemius at comcast.net (David Winsemius)
Date: Thu, 25 Aug 2016 00:00:04 -0700
Subject: [Rd] "plot.ts" doesn't respect the value of "pch" (+ blocked
	from Bugzilla signups)
In-Reply-To: <76d55e22eb66c1138165946af6c6579f@libertymail.net>
References: <76d55e22eb66c1138165946af6c6579f@libertymail.net>
Message-ID: <188C9075-2462-4D84-A76A-51257F78CA7B@comcast.net>


> On Aug 24, 2016, at 5:59 PM, Gregory Werbin <greg.werbin at libertymail.net> wrote:
> 
> I did a search on Bugzilla for "plot.ts" and didn't find anything on this issue. I tried to sign up for Bugzilla to report it, but my e-mail address didn't pass your "syntax checking" for a legal e-mail address.
> 
> The bug is easily reproducible on my machine as follows:
> 
> ## start
> 
> # generate some data
> y <- arima.sim(list(), 150)
> 
> # this will definitely dispatch to a ".ts" method
> class(y)[1] == 'ts'
> 
> # compare and note that `cex = 0.5` has no effect
> plot(y, type = 'b', pch = 16)
> plot(y, type = 'b', pch = 16, cex = 0.5)
> 
> # it works if `y` is coerced back to a regular vector
> plot(as.numeric(y), type = 'b', pch = 16, cex = 0.5)
> 
> # another way to see the issue
> plot.ts(y, type = 'b', pch = 16, cex = 0.5)
> plot.default(y, type = 'b', pch = 16, cex = 0.5)
> 
> ## end
> 
> Skimming through source code for `plot.ts`, it seems like the `cex` argument is being "eaten" by a `...` somewhere without being properly passed to `plot.default`.

'...' does not "eat" parameters, it passes them on.

Looking at the very top of the body we see this in the definition of the internal `plotts` function:

        cex = par("cex"), lty = par("lty"), lwd = par("lwd"), 
        axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"), 
        col.lab = par("col.lab"), font.lab = par("font.lab"), 
        cex.axis = par("cex.axis"), col.axis = par("col.axis"), 

And at the end of the body we se the call to plotts (including the "dots")

So I would suggest using par-settings.


par(cex=0.5)
plot(y, type = 'b', pch = 16)


(Question seems more appropriate for r-help.)

-- 
David.
> 
> The output of `R.version` is:
> platform       x86_64-apple-darwin15.5.0
> arch           x86_64
> os             darwin15.5.0
> system         x86_64, darwin15.5.0
> status
> major          3
> minor          3.1
> year           2016
> month          06
> day            21
> svn rev        70800
> language       R
> version.string R version 3.3.1 (2016-06-21)
> nickname       Bug in Your Hair
> 
> Greg
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

David Winsemius
Alameda, CA, USA


From maechler at stat.math.ethz.ch  Thu Aug 25 11:34:37 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Thu, 25 Aug 2016 11:34:37 +0200
Subject: [Rd] "plot.ts" doesn't respect the value of "pch" (+ blocked
	from Bugzilla signups)
In-Reply-To: <188C9075-2462-4D84-A76A-51257F78CA7B@comcast.net>
References: <76d55e22eb66c1138165946af6c6579f@libertymail.net>
	<188C9075-2462-4D84-A76A-51257F78CA7B@comcast.net>
Message-ID: <22462.48045.764981.166932@stat.math.ethz.ch>

>>>>> David Winsemius <dwinsemius at comcast.net>
>>>>>     on Thu, 25 Aug 2016 00:00:04 -0700 writes:

    >> On Aug 24, 2016, at 5:59 PM, Gregory Werbin <greg.werbin at libertymail.net> wrote:
    >> 
    >> I did a search on Bugzilla for "plot.ts" and didn't find anything on this issue. I tried to sign up for Bugzilla to report it, but my e-mail address didn't pass your "syntax checking" for a legal e-mail address.

If you read (and you should :-)
   https://www.r-project.org/bugs.html
you will see the reason for the "syntax checking".
We currently need manual white listing (of e-mail addresses),
because we had months of "spam" bug reports and then complete
spam explosion aka "bug site devastation" action.

I have added your e-mail (above) to be valid / legal...
Please "subscribe", because we will not keep that changed string for so long.

[ Actually, I'd tend to say that for short term, we are now
  looking for volunteers for "bugzilla moderation".... ]


    >> 
    >> The bug is easily reproducible on my machine as follows:
    >> 
    >> ## start
    >> 
    >> # generate some data
    >> y <- arima.sim(list(), 150)
    >> 
    >> # this will definitely dispatch to a ".ts" method
    >> class(y)[1] == 'ts'
    >> 
    >> # compare and note that `cex = 0.5` has no effect
    >> plot(y, type = 'b', pch = 16)
    >> plot(y, type = 'b', pch = 16, cex = 0.5)
    >> 
    >> # it works if `y` is coerced back to a regular vector
    >> plot(as.numeric(y), type = 'b', pch = 16, cex = 0.5)
    >> 
    >> # another way to see the issue
    >> plot.ts(y, type = 'b', pch = 16, cex = 0.5)
    >> plot.default(y, type = 'b', pch = 16, cex = 0.5)
    >> 
    >> ## end
    >> 
    >> Skimming through source code for `plot.ts`, it seems like the `cex` argument is being "eaten" by a `...` somewhere without being properly passed to `plot.default`.

    > '...' does not "eat" parameters, it passes them on.

    > Looking at the very top of the body we see this in the definition of the internal `plotts` function:

    > cex = par("cex"), lty = par("lty"), lwd = par("lwd"), 
    > axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"), 
    > col.lab = par("col.lab"), font.lab = par("font.lab"), 
    > cex.axis = par("cex.axis"), col.axis = par("col.axis"), 

    > And at the end of the body we se the call to plotts (including the "dots")

    > So I would suggest using par-settings.

    > par(cex=0.5)
    > plot(y, type = 'b', pch = 16)

as a workaround, yes, thank you David!

    > (Question seems more appropriate for r-help.)

Still, I would tend to think that it was reasonable feature
request to ask for  plot.ts() to be improved there,  and then
R-devel or the R-bugzilla would be ok, too.

Martin Maechler, ETH Zurich


    > -- 
    > David.
    >> 
    >> The output of `R.version` is:
    >> platform       x86_64-apple-darwin15.5.0
    >> arch           x86_64
    >> os             darwin15.5.0
    >> system         x86_64, darwin15.5.0
    >> status
    >> major          3
    >> minor          3.1
    >> year           2016
    >> month          06
    >> day            21
    >> svn rev        70800
    >> language       R
    >> version.string R version 3.3.1 (2016-06-21)
    >> nickname       Bug in Your Hair
    >> 
    >> Greg
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > David Winsemius
    > Alameda, CA, USA

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From greg.werbin at libertymail.net  Thu Aug 25 21:21:05 2016
From: greg.werbin at libertymail.net (Gregory Werbin)
Date: Thu, 25 Aug 2016 15:21:05 -0400
Subject: [Rd] "plot.ts" doesn't respect the value of "pch" (+ blocked
 from Bugzilla signups)
In-Reply-To: <188C9075-2462-4D84-A76A-51257F78CA7B@comcast.net>
References: <76d55e22eb66c1138165946af6c6579f@libertymail.net>
	<188C9075-2462-4D84-A76A-51257F78CA7B@comcast.net>
Message-ID: <22b035f3f5a41547a9a9b6caaa5a5c5d@libertymail.net>

I've had a chance to read the source more thoroughly. The chain of 
events is as follows:

1. Local function `plotts()` is defined with argument `cex` that 
defaults to `par("cex")`
2. `...` is passed to `plotts()`. If "cex" is an element in `...`, 
inside `plotts()` the variable `cex` is assigned thereby (overriding the 
default arg). Importantly, this means that the element "cex" is captured 
and _removed_ from `...`. `...` is eventually passed to `plot.window()`.
3.
   - In the univariate case (NCOL(x) == 1): When `lines.default()` is 
called to actually plot the data 
(https://github.com/wch/r-source/blob/trunk/src/library/stats/R/ts.R#L588 
and 
https://github.com/wch/r-source/blob/trunk/src/library/stats/R/ts.R#L597 
for reference), `cex` is not included in the call.
   - In the bivariate case (NCOL(x) > 1): Because "cex" was captured and 
removed from `...`, it is not passed to `plot.default` when it is called 
(https://github.com/wch/r-source/blob/trunk/src/library/stats/R/ts.R#L548).

It turns out that the "eating" is not being done by `...` but by the 
signature of `plotts`.

The documentation currently reads:

> ...: additional graphical arguments, see 'plot', 'plot.default' and 
> 'par'.

This, to me, suggests parity with the 'plot' function in how the 
arguments in '...' are handled. Therefore either the code is wrong or 
the documentation is incomplete and misleading.

I filed this is as a bug because it's undocumented, and inconsistent 
with how other arguments typically passed through `plot.default` are 
handled.

I'll be happy to do the patch myself -- I just need to know which thing 
to patch (the source or the docs).


Greg


On 2016-08-25 03:00, David Winsemius wrote:

>> On Aug 24, 2016, at 5:59 PM, Gregory Werbin 
>> <greg.werbin at libertymail.net> wrote:
>> 
>> I did a search on Bugzilla for "plot.ts" and didn't find anything on 
>> this issue. I tried to sign up for Bugzilla to report it, but my 
>> e-mail address didn't pass your "syntax checking" for a legal e-mail 
>> address.
>> 
>> The bug is easily reproducible on my machine as follows:
>> 
>> ## start
>> 
>> # generate some data
>> y <- arima.sim(list(), 150)
>> 
>> # this will definitely dispatch to a ".ts" method
>> class(y)[1] == 'ts'
>> 
>> # compare and note that `cex = 0.5` has no effect
>> plot(y, type = 'b', pch = 16)
>> plot(y, type = 'b', pch = 16, cex = 0.5)
>> 
>> # it works if `y` is coerced back to a regular vector
>> plot(as.numeric(y), type = 'b', pch = 16, cex = 0.5)
>> 
>> # another way to see the issue
>> plot.ts(y, type = 'b', pch = 16, cex = 0.5)
>> plot.default(y, type = 'b', pch = 16, cex = 0.5)
>> 
>> ## end
>> 
>> Skimming through source code for `plot.ts`, it seems like the `cex` 
>> argument is being "eaten" by a `...` somewhere without being properly 
>> passed to `plot.default`.
> 
> '...' does not "eat" parameters, it passes them on.
> 
> Looking at the very top of the body we see this in the definition of 
> the internal `plotts` function:
> 
> cex = par("cex"), lty = par("lty"), lwd = par("lwd"),
> axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = 
> par("cex.lab"),
> col.lab = par("col.lab"), font.lab = par("font.lab"),
> cex.axis = par("cex.axis"), col.axis = par("col.axis"),
> 
> And at the end of the body we se the call to plotts (including the 
> "dots")
> 
> So I would suggest using par-settings.
> 
> par(cex=0.5)
> plot(y, type = 'b', pch = 16)
> 
> (Question seems more appropriate for r-help.)
> 
> --
> David.
> 
>> The output of `R.version` is:
>> platform       x86_64-apple-darwin15.5.0
>> arch           x86_64
>> os             darwin15.5.0
>> system         x86_64, darwin15.5.0
>> status
>> major          3
>> minor          3.1
>> year           2016
>> month          06
>> day            21
>> svn rev        70800
>> language       R
>> version.string R version 3.3.1 (2016-06-21)
>> nickname       Bug in Your Hair
>> 
>> Greg
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> David Winsemius
> Alameda, CA, USA


From maechler at stat.math.ethz.ch  Thu Aug 25 22:11:42 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Thu, 25 Aug 2016 22:11:42 +0200
Subject: [Rd] summary.default rounding on numeric seems inconsistent
	with other R behaviors
In-Reply-To: <A82891FC-7568-4D4C-8702-11D528BF7C40@win-vector.com>
References: <944E96FB-9C3B-46A3-9C57-8AF8EAA5284A@win-vector.com>
	<CANcXGiyBrz6d13POfJBLwgtLMUyYe40BwFMfVg0jzGVxY2aUXA@mail.gmail.com>
	<22455.13925.282926.46662@max.nulle.part>
	<22460.17078.724292.456732@stat.math.ethz.ch>
	<22461.27302.298978.16937@stat.math.ethz.ch>
	<A82891FC-7568-4D4C-8702-11D528BF7C40@win-vector.com>
Message-ID: <22463.20734.119370.752388@stat.math.ethz.ch>

>>>>> John Mount <jmount at win-vector.com>
>>>>>     on Wed, 24 Aug 2016 07:25:50 -0700 writes:

    >> On Aug 24, 2016, at 2:36 AM, Martin Maechler
    >> <maechler at stat.math.ethz.ch> wrote:
    >> 
    >>>>>>> 
    >> 
    >> [Talking to myself .. ;-)] Yes, but that's the tough part
    >> to change.
    >> 
    >> This thread's topic is really only about changing
    >> summary.default(), and I have started testing such a
    >> change now, and that does seem very sensible:
    >> 
    >> - No rounding in summary.default(), but - (almost)
    >> back-compatible rounding in its print() method.
    >> 
    >> My current plan is to commit this to R-devel in a day or
    >> so, unless unforeseen issues emerge.
    >> 
    >> Martin
    >> 

    > That is potentially a very good outcome.  Thank you so
    > much for producing and testing a patch.

I have now committed such a change to R-devel:

------------------------------------------------------------------------
r71150 | maechler | 2016-08-25 21:57:19 +0200 (Thu, 25 Aug 2016) | 1 line
Changed paths:
   M /trunk/doc/NEWS.Rd
   M /trunk/src/library/base/R/summary.R
   M /trunk/src/library/base/man/summary.Rd
   M /trunk/src/library/stats/R/ecdf.R
   M /trunk/tests/Examples/stats-Ex.Rout.save
   M /trunk/tests/reg-tests-2.Rout.save

summary.default() no longer rounds by default; just *prints* rounded
------------------------------------------------------------------------


I do expect quite a few packages giving slightly changed output,
typically uniformly not-worse one,  but just "typically".

Note that I did also have to patch   stats:::print.summary.ecdf()
because that had relied on the fact that summary(<numeric>) did
round itself already.
Other useR's code may need similar changes... and so this *is* a
user visible change, listed accordingly in NEWS (the above doc/NEWS.Rd in
the sources).

I hope very much that the overall and longer term benefit will
vastly outweigh the nuisance (to people publishing, e.g.) that
quite a few "basic" outputs will slightly change.

The benefit for maintainers and old timers like me will be that
we will not need to answer this (non-official) FAQ nor excuse a
peculiar behavior in the future .....
But yes, I expect a flurry of questions starting in April 2017,
and hope that the smart readers of this list will share the load
answering them .. ;-)


Martin Maechler
ETH Zurich


From henrik.bengtsson at gmail.com  Fri Aug 26 01:39:35 2016
From: henrik.bengtsson at gmail.com (Henrik Bengtsson)
Date: Thu, 25 Aug 2016 16:39:35 -0700
Subject: [Rd] sort.int(c(2, NA, 4), index.return=TRUE, na.last=NA,
 method)$ix differ for method="radix" and "shell"/"quick" (+ new
 default in R-devel)
Message-ID: <CAFDcVCQS+-BiuF9KUPsbByLPCDrUPg9VfR+LOctXr=ZLcc2MGQ@mail.gmail.com>

Does sort.int(c(2,NA,4), index.return=TRUE, na.last=NA,
method="radix")$ix give the intended result, because I get:

> sort.int(c(2,NA,4), index.return=TRUE, na.last=NA, method="radix")
$x
[1] 2 4

$ix
[1] 1 3

With method="shell" and method="quick" in R devel, I get:

> sort.int(c(2,NA,4), index.return=TRUE, na.last=NA, method="shell")
$x
[1] 2 4

$ix
[1] 1 2

> sort.int(c(2,NA,4), index.return=TRUE, na.last=NA, method="quick")
$x
[1] 2 4

$ix
[1] 1 2

Is this correct?  Should we expect sort.int(c(2,NA,4),
index.return=TRUE, na.last=NA)$ix to be the same regardless of
'method'?



BACKGROUND:

I recently discovered that some of my package tests on functions using
sort(x, index.return=TRUE) where double 'x' may contain missing values
fails.  I traced it down to the update in R-devel (2016-08-2? r70856)
where method="radix" became the new default;

svn log -r 70856
------------------------------------------------------------------------
r70856 | lawrence | 2016-06-29 16:59:30 -0700 (Wed, 29 Jun 2016) | 3 lines

radix is default sort algorithm for doubles (no more rounding),
grouping() puts NAs last.

which I think is why we in R devel now observe:

> sort(c(2,NA,4), index.return=TRUE)
$x
[1] 2 4

$ix
[1] 1 3

whereas prior to this we saw:

> sort(c(2,NA,4), index.return=TRUE)
$x
[1] 2 4

$ix
[1] 1 2

/Henrik


From lawrence.michael at gene.com  Fri Aug 26 02:55:57 2016
From: lawrence.michael at gene.com (Michael Lawrence)
Date: Thu, 25 Aug 2016 17:55:57 -0700
Subject: [Rd] sort.int(c(2, NA, 4), index.return=TRUE, na.last=NA,
 method)$ix differ for method="radix" and "shell"/"quick" (+ new
 default in R-devel)
In-Reply-To: <CAFDcVCQS+-BiuF9KUPsbByLPCDrUPg9VfR+LOctXr=ZLcc2MGQ@mail.gmail.com>
References: <CAFDcVCQS+-BiuF9KUPsbByLPCDrUPg9VfR+LOctXr=ZLcc2MGQ@mail.gmail.com>
Message-ID: <CAOQ5NycE-iZjqqjQp5jGGcqdF7TWyNi2Op5yv+rmDoMryDGeDA@mail.gmail.com>

The radix sort should be consistent with the others, i.e., it should
behave like sort.list(), not order(). I will correct this.

On Thu, Aug 25, 2016 at 4:39 PM, Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
> Does sort.int(c(2,NA,4), index.return=TRUE, na.last=NA,
> method="radix")$ix give the intended result, because I get:
>
>> sort.int(c(2,NA,4), index.return=TRUE, na.last=NA, method="radix")
> $x
> [1] 2 4
>
> $ix
> [1] 1 3
>
> With method="shell" and method="quick" in R devel, I get:
>
>> sort.int(c(2,NA,4), index.return=TRUE, na.last=NA, method="shell")
> $x
> [1] 2 4
>
> $ix
> [1] 1 2
>
>> sort.int(c(2,NA,4), index.return=TRUE, na.last=NA, method="quick")
> $x
> [1] 2 4
>
> $ix
> [1] 1 2
>
> Is this correct?  Should we expect sort.int(c(2,NA,4),
> index.return=TRUE, na.last=NA)$ix to be the same regardless of
> 'method'?
>
>
>
> BACKGROUND:
>
> I recently discovered that some of my package tests on functions using
> sort(x, index.return=TRUE) where double 'x' may contain missing values
> fails.  I traced it down to the update in R-devel (2016-08-2? r70856)
> where method="radix" became the new default;
>
> svn log -r 70856
> ------------------------------------------------------------------------
> r70856 | lawrence | 2016-06-29 16:59:30 -0700 (Wed, 29 Jun 2016) | 3 lines
>
> radix is default sort algorithm for doubles (no more rounding),
> grouping() puts NAs last.
>
> which I think is why we in R devel now observe:
>
>> sort(c(2,NA,4), index.return=TRUE)
> $x
> [1] 2 4
>
> $ix
> [1] 1 3
>
> whereas prior to this we saw:
>
>> sort(c(2,NA,4), index.return=TRUE)
> $x
> [1] 2 4
>
> $ix
> [1] 1 2
>
> /Henrik
>


From maechler at stat.math.ethz.ch  Fri Aug 26 09:31:41 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 26 Aug 2016 09:31:41 +0200
Subject: [Rd] "plot.ts" doesn't respect the value of "pch" (+ blocked
 from Bugzilla signups)
In-Reply-To: <22b035f3f5a41547a9a9b6caaa5a5c5d@libertymail.net>
References: <76d55e22eb66c1138165946af6c6579f@libertymail.net>
	<188C9075-2462-4D84-A76A-51257F78CA7B@comcast.net>
	<22b035f3f5a41547a9a9b6caaa5a5c5d@libertymail.net>
Message-ID: <22463.61533.589863.671988@stat.math.ethz.ch>

>>>>> Gregory Werbin <greg.werbin at libertymail.net>
>>>>>     on Thu, 25 Aug 2016 15:21:05 -0400 writes:

    > I've had a chance to read the source more thoroughly. The chain of 
    > events is as follows:

    > 1. Local function `plotts()` is defined with argument `cex` that 
    > defaults to `par("cex")`
    > 2. `...` is passed to `plotts()`. If "cex" is an element in `...`, 
    > inside `plotts()` the variable `cex` is assigned thereby (overriding the 
    > default arg). Importantly, this means that the element "cex" is captured 
    > and _removed_ from `...`. `...` is eventually passed to `plot.window()`.
    > 3.
    > - In the univariate case (NCOL(x) == 1): When `lines.default()` is 
    > called to actually plot the data 
    > (https://github.com/wch/r-source/blob/trunk/src/library/stats/R/ts.R#L588 
    > and 
    > https://github.com/wch/r-source/blob/trunk/src/library/stats/R/ts.R#L597 
    > for reference), `cex` is not included in the call.
    > - In the bivariate case (NCOL(x) > 1): Because "cex" was captured and 
    > removed from `...`, it is not passed to `plot.default` when it is called 
    > (https://github.com/wch/r-source/blob/trunk/src/library/stats/R/ts.R#L548).

    > It turns out that the "eating" is not being done by `...` but by the 
    > signature of `plotts`.

    > The documentation currently reads:

    >> ...: additional graphical arguments, see 'plot', 'plot.default' and 
    >> 'par'.

    > This, to me, suggests parity with the 'plot' function in how the 
    > arguments in '...' are handled. Therefore either the code is wrong or 
    > the documentation is incomplete and misleading.

the code is not perfect aka "wrong" .. so the bug is there.
Making the minimal reproducible example more concise,

 plot(as.ts((-10:12)^3), type="b", cex=.5)
 plot(     ((-10:12)^3), type="b", cex=.5)

should plot identically ... but currently don't


    > I filed this is as a bug because it's undocumented, and inconsistent 
    > with how other arguments typically passed through `plot.default` are 
    > handled.

    > I'll be happy to do the patch myself -- I just need to know which thing 
    > to patch (the source or the docs).

[yes... and please subscribe to bugzilla which I told you
 yesterday I had explicitly opened for you !]

Martin
 
    > Greg


    > On 2016-08-25 03:00, David Winsemius wrote:

    >>> On Aug 24, 2016, at 5:59 PM, Gregory Werbin 
    >>> <greg.werbin at libertymail.net> wrote:
    >>> 
    >>> I did a search on Bugzilla for "plot.ts" and didn't find anything on 
    >>> this issue. I tried to sign up for Bugzilla to report it, but my 
    >>> e-mail address didn't pass your "syntax checking" for a legal e-mail 
    >>> address.
    >>> 
    >>> The bug is easily reproducible on my machine as follows:
    >>> 
    >>> ## start
    >>> 
    >>> # generate some data
    >>> y <- arima.sim(list(), 150)
    >>> 
    >>> # this will definitely dispatch to a ".ts" method
    >>> class(y)[1] == 'ts'
    >>> 
    >>> # compare and note that `cex = 0.5` has no effect
    >>> plot(y, type = 'b', pch = 16)
    >>> plot(y, type = 'b', pch = 16, cex = 0.5)
    >>> 
    >>> # it works if `y` is coerced back to a regular vector
    >>> plot(as.numeric(y), type = 'b', pch = 16, cex = 0.5)
    >>> 
    >>> # another way to see the issue
    >>> plot.ts(y, type = 'b', pch = 16, cex = 0.5)
    >>> plot.default(y, type = 'b', pch = 16, cex = 0.5)
    >>> 
    >>> ## end
    >>> 
    >>> Skimming through source code for `plot.ts`, it seems like the `cex` 
    >>> argument is being "eaten" by a `...` somewhere without being properly 
    >>> passed to `plot.default`.
    >> 
    >> '...' does not "eat" parameters, it passes them on.
    >> 
    >> Looking at the very top of the body we see this in the definition of 
    >> the internal `plotts` function:
    >> 
    >> cex = par("cex"), lty = par("lty"), lwd = par("lwd"),
    >> axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = 
    >> par("cex.lab"),
    >> col.lab = par("col.lab"), font.lab = par("font.lab"),
    >> cex.axis = par("cex.axis"), col.axis = par("col.axis"),
    >> 
    >> And at the end of the body we se the call to plotts (including the 
    >> "dots")
    >> 
    >> So I would suggest using par-settings.
    >> 
    >> par(cex=0.5)
    >> plot(y, type = 'b', pch = 16)
    >> 
    >> (Question seems more appropriate for r-help.)
    >> 
    >> --
    >> David.
    >> 
    >>> The output of `R.version` is:
    >>> platform       x86_64-apple-darwin15.5.0
    >>> arch           x86_64
    >>> os             darwin15.5.0
    >>> system         x86_64, darwin15.5.0
    >>> status
    >>> major          3
    >>> minor          3.1
    >>> year           2016
    >>> month          06
    >>> day            21
    >>> svn rev        70800
    >>> language       R
    >>> version.string R version 3.3.1 (2016-06-21)
    >>> nickname       Bug in Your Hair
    >>> 
    >>> Greg
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> David Winsemius
    >> Alameda, CA, USA

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From maechler at stat.math.ethz.ch  Fri Aug 26 10:52:51 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 26 Aug 2016 10:52:51 +0200
Subject: [Rd] "plot.ts" doesn't respect the value of "pch" (+ blocked
 from Bugzilla signups)
In-Reply-To: <22463.61533.589863.671988@stat.math.ethz.ch>
References: <76d55e22eb66c1138165946af6c6579f@libertymail.net>
	<188C9075-2462-4D84-A76A-51257F78CA7B@comcast.net>
	<22b035f3f5a41547a9a9b6caaa5a5c5d@libertymail.net>
	<22463.61533.589863.671988@stat.math.ethz.ch>
Message-ID: <22464.867.785962.473709@stat.math.ethz.ch>

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Fri, 26 Aug 2016 09:31:41 +0200 writes:

>>>>> Gregory Werbin <greg.werbin at libertymail.net>
>>>>>     on Thu, 25 Aug 2016 15:21:05 -0400 writes:

    >> I've had a chance to read the source more thoroughly. The chain of 
    >> events is as follows:

    >> 1. Local function `plotts()` is defined with argument `cex` that 
    >> defaults to `par("cex")`
    >> 2. `...` is passed to `plotts()`. If "cex" is an element in `...`, 
    >> inside `plotts()` the variable `cex` is assigned thereby (overriding the 
    >> default arg). Importantly, this means that the element "cex" is captured 
    >> and _removed_ from `...`. `...` is eventually passed to `plot.window()`.
    >> 3.
    >> - In the univariate case (NCOL(x) == 1): When `lines.default()` is 
    >> called to actually plot the data 
    >> (https://github.com/wch/r-source/blob/trunk/src/library/stats/R/ts.R#L588 
    >> and 
    >> https://github.com/wch/r-source/blob/trunk/src/library/stats/R/ts.R#L597 
    >> for reference), `cex` is not included in the call.
    >> - In the bivariate case (NCOL(x) > 1): Because "cex" was captured and 
    >> removed from `...`, it is not passed to `plot.default` when it is called 
    >> (https://github.com/wch/r-source/blob/trunk/src/library/stats/R/ts.R#L548).

    >> It turns out that the "eating" is not being done by `...` but by the 
    >> signature of `plotts`.

    >> The documentation currently reads:

    >>> ...: additional graphical arguments, see 'plot', 'plot.default' and 
    >>> 'par'.

    >> This, to me, suggests parity with the 'plot' function in how the 
    >> arguments in '...' are handled. Therefore either the code is wrong or 
    >> the documentation is incomplete and misleading.

    > the code is not perfect aka "wrong" .. so the bug is there.
    > Making the minimal reproducible example more concise,

    > plot(as.ts((-10:12)^3), type="b", cex=.5)
    > plot(     ((-10:12)^3), type="b", cex=.5)

    > should plot identically ... but currently don't

And there are more (such) problems,
E.g, lty, and lwd are not propagated, in the (x,y) case,

 plot.ts(as.ts(1:300), cumsum(rnorm(300)), type = "b", cex = 0.5, lwd = 2)

and also not in the "multiple" / matrix case.

I will commit a fix to  R-devel in a moment... but would be glad
for a careful review.

Martin


From suharto_anggono at yahoo.com  Sat Aug 27 05:17:32 2016
From: suharto_anggono at yahoo.com (Suharto Anggono Suharto Anggono)
Date: Sat, 27 Aug 2016 03:17:32 +0000 (UTC)
Subject: [Rd] 'droplevels' inappropriate change
References: <817542177.517460.1472267852866.ref@mail.yahoo.com>
Message-ID: <817542177.517460.1472267852866@mail.yahoo.com>

In R devel r71157, 'droplevels' documentation, in "Arguments" section, says this about argument 'exclude'.
passed to factor(); factor levels which should be excluded from the result even if present.  Note that this was implicitly NA in R <= 3.3.1 which did drop NA levels even when present in x, contrary to the documentation.  The current default is compatible with x[ , drop=FALSE].

The part
x[ , drop=FALSE]
should be
x[ , drop=TRUE]

Saying that 'exclude' is factor levels is not quite true for NA element. NA may be not an original level, but NA in 'exclude' affects the result.

For a factor 'x', factor(x, exclude = exclude) doesn't really work for excluding in general. See, for example, https://stat.ethz.ch/pipermail/r-help/2005-September/079336.html .
factor(factor(c("a","b","c")), exclude="c")

However, this excludes "2":
factor(factor(2:3), exclude=2)

Rather unexpectedly, this excludes NA:
factor(factor(c("a",NA), exclude=NULL), exclude="c")

For a factor 'x', factor(x, exclude = exclude) can only exclude integer-like or NA levels. An explanation is in https://stat.ethz.ch/pipermail/r-help/2011-April/276274.html .


From maechler at stat.math.ethz.ch  Sat Aug 27 18:55:37 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Sat, 27 Aug 2016 18:55:37 +0200
Subject: [Rd] 'droplevels' inappropriate change
In-Reply-To: <817542177.517460.1472267852866@mail.yahoo.com>
References: <817542177.517460.1472267852866.ref@mail.yahoo.com>
	<817542177.517460.1472267852866@mail.yahoo.com>
Message-ID: <22465.50697.909911.63214@stat.math.ethz.ch>

>>>>> Suharto Anggono Suharto Anggono via R-devel <r-devel at r-project.org>
>>>>>     on Sat, 27 Aug 2016 03:17:32 +0000 writes:

    > In R devel r71157, 'droplevels' documentation, in "Arguments" section, says this about argument 'exclude'.
    > passed to factor(); factor levels which should be excluded from the result even if present.  Note that this was implicitly NA in R <= 3.3.1 which did drop NA levels even when present in x, contrary to the documentation.  The current default is compatible with x[ , drop=FALSE].

    > The part
    > x[ , drop=FALSE]
    > should be
    > x[ , drop=TRUE]

Yes, definitely, thank you!
a "typo" by me. .. fixed now.

    > Saying that 'exclude' is factor levels is not quite true for NA element. NA may be not an original level, but NA in 'exclude' affects the result.

    > For a factor 'x', factor(x, exclude = exclude) doesn't really work for excluding in general. See, for example, https://stat.ethz.ch/pipermail/r-help/2005-September/079336.html .
    > factor(factor(c("a","b","c")), exclude="c")

    > However, this excludes "2":
    > factor(factor(2:3), exclude=2)

    > Rather unexpectedly, this excludes NA:
    > factor(factor(c("a",NA), exclude=NULL), exclude="c")

    > For a factor 'x', factor(x, exclude = exclude) can only exclude integer-like or NA levels. An explanation is in https://stat.ethz.ch/pipermail/r-help/2011-April/276274.html .

Well, Peter Dalgaard (in that R-devel e-mail, a bit more than 5
years ago) is confirming the problem there,  and suggesting (as
you, right?) that actually   `factor()` is not behaving
correctly here.

And your persistence is finally getting close to convince me
that it is not just droplevels(), but  factor() itself which
needs care here.

Interestingly, the following patch *does* pass 'make check-all'
(after small change in tests/reg-tests-1b.R which is ok),
and leads to behavior which is much closer to the documentation,
notably for your two examples above would give what one would
expect.

(( If the R-Hub would support experiments with branches of R-devel 
   from R-core members,  I could just create such a branch and R Hub
   would run 'R CMD check <pkg>'  for thousands of CRAN packages
   and provide a web page with the *differences* in the package
   check results ... so we could see ... ))

I do agree that we should strongly consider such a change.

Martin


-------------- next part --------------
A non-text attachment was scrubbed...
Name: factor-excl.diff
Type: text/x-diff
Size: 637 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20160827/b62dd60f/attachment.bin>

From rkoenker at illinois.edu  Sun Aug 28 23:48:29 2016
From: rkoenker at illinois.edu (Roger Koenker)
Date: Sun, 28 Aug 2016 16:48:29 -0500
Subject: [Rd] CRAN packages maintained by you
In-Reply-To: <0342d85781d846a6b16013f00907ab18@CHIHT4.ad.uillinois.edu>
References: <0342d85781d846a6b16013f00907ab18@CHIHT4.ad.uillinois.edu>
Message-ID: <678326B1-FEDC-4F37-8AA3-D483C111AE16@illinois.edu>

Hi Kurt,

I have started to look into this, and I need some guidance about how to
prioritize my repairs.  There are basically 4 categories of warnings from
gfortran?s pedantic critique of my packages:

	1.  Some errant tab characters it doesn?t like,
	2.  Too many or too few continue statements
	3.  Horrible (and obsolescent) arithmetic and computed gotos
	4.  undeclared doubles and dubious conversions 

The last category seems relatively easy to fix and is potentially
important, but the others seem more difficult to fix and altogether
less important.  The goto issues are all in code that has been written
long ago by others and imported, e.g. Peyton and Ng?s cholesky.f.
I?m very reluctant to mess with any of those gotos.  The fact that
they were declared obsolete long ago doesn?t mean that gfortran 
has any intention of not supporting these constructs in the future,
does it?  

Before devoting more time and energy, which is in short supply
lately, I like to hear what others are thinking/doing about all this,
so I?ll copy this to r-devel.

All the best,
Roger

url:    www.econ.uiuc.edu/~roger            Roger Koenker
email    rkoenker at uiuc.edu            Department of Economics
vox:     217-333-4558                University of Illinois
fax:       217-244-6678                Urbana, IL 61801


> On Aug 28, 2016, at 2:36 AM, Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:
> 
> 
> Dear maintainers,
> 
> This concerns the CRAN packages

----
> 
> Using gfortran with options -Wall -pedantic to compile your package
> Fortran code finds important problems, see your package check pages for
> more information.  
> 
> Can you please fix these problems as quickly as possible?
> 
> Best
> -k


From michellang at gmail.com  Tue Aug 30 14:43:50 2016
From: michellang at gmail.com (Michel Lang)
Date: Tue, 30 Aug 2016 14:43:50 +0200
Subject: [Rd] mcparallel / mccollect
Message-ID: <CAF6EP_4eDh_eSK_RWysny8gd+5WPRkDwasvwGhUK59vGrdkKzg@mail.gmail.com>

Hi there,

I've tried to implement an asynchronous job scheduler using
parallel::mcparallel() and parallel::mccollect(..., wait=FALSE). My
goal was to send processes to the background, leaving the R session
open for interactive use while all jobs store their results on the
file system. To keep track of the running jobs I've stored the process
ids and written a little helper to not spawn new threads before
already started threads have terminated if the maximum number of CPUs
is reached.

Unfortunately, this turned out to be impossible with the current
implementation in parallel for a number of reasons:

1) The returned results are not named by process id or job name if
wait is set to FALSE.

2) The number of returned results depends on the state of computation:
If all or none jobs are finished, just NULL is returned. Otherwise a
list of so far collected results is returned.

3) Combining (1) and (2) renders mapping the results to the stored
process ids impossible. E.g., if you query mccollect for the results
of 4 jobs and set wait=FALSE, you can get an unnamed list with one
result or a list with four results but in a different order.

4) An obvious workaround would wrap the expression to evaluate in a
function which sticks a unique identifier to the return value. This
way, one would not have to rely on process ids or job names. However,
each job has to be collected twice:  the first time you get the result
(which is fine for the workaround), the second time you just get NULL.
And you have to collect them twice to free used resources -- at least
on unix systems.

Here is a small example to illustrate the current behavior:

library(parallel)
f = function(x) { Sys.sleep(x); sprintf("job with x = %i", x) }
jobs = integer()
jobs = c(jobs, mcparallel(f(10), name = "jobname1")$pid)
jobs = c(jobs, mcparallel(f(3), name = "jobname2")$pid)

for (i in 1:13) {
  message("\ni = ", i)
  print(mccollect(jobs, wait = FALSE, timeout = 0))
  Sys.sleep(1)
}

I've created a small patch
(<https://gist.github.com/mllg/82410d0f564a7a24251e9e747e210b39>)
which applies the same mechanism to name the results for wait=FALSE as
it was already implemented for wait=TRUE. I think the documentation is
already rather describing the behavior after my patch than before my
patch.
A note on the need to collect results twice might prove useful for the
future though.

Thanks,
Michel


From simon.urbanek at r-project.org  Tue Aug 30 23:31:05 2016
From: simon.urbanek at r-project.org (Simon Urbanek)
Date: Tue, 30 Aug 2016 17:31:05 -0400
Subject: [Rd] mcparallel / mccollect
In-Reply-To: <CAF6EP_4eDh_eSK_RWysny8gd+5WPRkDwasvwGhUK59vGrdkKzg@mail.gmail.com>
References: <CAF6EP_4eDh_eSK_RWysny8gd+5WPRkDwasvwGhUK59vGrdkKzg@mail.gmail.com>
Message-ID: <13EAE85A-70D6-4BEC-89FA-E30E0ACD7036@r-project.org>

Michel,

thanks, you're right, that the list should have names. Your patch has the match() part backwards, but is otherwise the right idea. I have committed a variant in R-devel and will back-port later.

Thanks,
Simon



> On Aug 30, 2016, at 8:43 AM, Michel Lang <michellang at gmail.com> wrote:
> 
> Hi there,
> 
> I've tried to implement an asynchronous job scheduler using
> parallel::mcparallel() and parallel::mccollect(..., wait=FALSE). My
> goal was to send processes to the background, leaving the R session
> open for interactive use while all jobs store their results on the
> file system. To keep track of the running jobs I've stored the process
> ids and written a little helper to not spawn new threads before
> already started threads have terminated if the maximum number of CPUs
> is reached.
> 
> Unfortunately, this turned out to be impossible with the current
> implementation in parallel for a number of reasons:
> 
> 1) The returned results are not named by process id or job name if
> wait is set to FALSE.
> 
> 2) The number of returned results depends on the state of computation:
> If all or none jobs are finished, just NULL is returned. Otherwise a
> list of so far collected results is returned.
> 
> 3) Combining (1) and (2) renders mapping the results to the stored
> process ids impossible. E.g., if you query mccollect for the results
> of 4 jobs and set wait=FALSE, you can get an unnamed list with one
> result or a list with four results but in a different order.
> 
> 4) An obvious workaround would wrap the expression to evaluate in a
> function which sticks a unique identifier to the return value. This
> way, one would not have to rely on process ids or job names. However,
> each job has to be collected twice:  the first time you get the result
> (which is fine for the workaround), the second time you just get NULL.
> And you have to collect them twice to free used resources -- at least
> on unix systems.
> 
> Here is a small example to illustrate the current behavior:
> 
> library(parallel)
> f = function(x) { Sys.sleep(x); sprintf("job with x = %i", x) }
> jobs = integer()
> jobs = c(jobs, mcparallel(f(10), name = "jobname1")$pid)
> jobs = c(jobs, mcparallel(f(3), name = "jobname2")$pid)
> 
> for (i in 1:13) {
>  message("\ni = ", i)
>  print(mccollect(jobs, wait = FALSE, timeout = 0))
>  Sys.sleep(1)
> }
> 
> I've created a small patch
> (<https://gist.github.com/mllg/82410d0f564a7a24251e9e747e210b39>)
> which applies the same mechanism to name the results for wait=FALSE as
> it was already implemented for wait=TRUE. I think the documentation is
> already rather describing the behavior after my patch than before my
> patch.
> A note on the need to collect results twice might prove useful for the
> future though.
> 
> Thanks,
> Michel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From ersatz.too at gmail.com  Tue Aug 30 23:45:37 2016
From: ersatz.too at gmail.com (Mark Roberts)
Date: Tue, 30 Aug 2016 14:45:37 -0700
Subject: [Rd] A bug in the R Mersenne Twister (RNG) code?
Message-ID: <61f698e6-c432-0dfe-630b-d6d45a78dc05@gmail.com>

Whomever,

I recently sent the "bug report" below toR-core at r-project.org and have 
just been asked to instead submit it to you.

Although I am basically not an R user, I have installed version 3.3.1 
and am also the author of a statistics program written in Visual Basic 
that contains a component which correctly implements the Mersenne 
Twister (MT) algorithm.  I believe that it is not possible to generate 
the correct stream of pseudorandom numbers using the MT default random 
number generator in R, and am not the first person to notice this.  Here 
is a posted 2013 entry 
(www.r-bloggers.com/reproducibility-and-randomness/) on an R website 
that asserts that the SAS computer program implementation of the MT 
algorithm produces different numbers than R does when using the same 
starting seed number.  The author of this post didn?t get anyone to 
respond to his query about the reason for this SAS vs. R discrepancy.

There are two ways of initializing the original MT computer program 
(written in C) so that an identical stream of numbers can be repeatedly 
generated:  1) with a particular integer seed number, and 2) with a 
particular array of integers.   In the 'compilation and usage' section 
of this webpage (https://github.com/cslarsen/mersenne-twister) there is 
a listing of the first 200 random numbers the MT algorithm should 
produce for seed number = 1.  The inventors of the Mersenne Twister 
random number generator provided two different sets of the first 1000 
numbers produced by a correctly coded 32-bit implementation of the MT 
algorithm when initializing it with a particular array of integers at: 
www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.out. 
[There is a link to this output at: 
www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html.]

My statistics program obtains exactly those 200 numbers from the first 
site mentioned in the previous paragraph and also obtains those same 
numbers from the second website (though I didn't check all 2000 values). 
   Assuming that the MT code within R uses the 32-bit MT algorithm, I 
suspect that the current version of R can't do that.  If you (i.e., 
anyone who might knowledgeably respond to this report) is able to 
duplicate those reference test-values, then please send me the R code to 
initialize the MT code within R to successfully do that, and I apologize 
for having wasted your time. If you (collectively) can't do that, then R 
is very likely using incorrectly implemented MT code.  And if this 
latter possibility is true, it seems to me that this is something that 
should be fixed.

Mark Roberts, Ph.D.

	[[alternative HTML version deleted]]


From wdunlap at tibco.com  Wed Aug 31 00:22:36 2016
From: wdunlap at tibco.com (William Dunlap)
Date: Tue, 30 Aug 2016 15:22:36 -0700
Subject: [Rd] A bug in the R Mersenne Twister (RNG) code?
In-Reply-To: <61f698e6-c432-0dfe-630b-d6d45a78dc05@gmail.com>
References: <61f698e6-c432-0dfe-630b-d6d45a78dc05@gmail.com>
Message-ID: <CAF8bMcZauZnpLVLZKTWXVTamhFO5akjDO1O1TN7Fs45uFjqEGw@mail.gmail.com>

Try comparing the streams for when the 625-integer versions of the seeds
are identical.  (R's seed is 626 integers: omit the first value, which
indicates which random number generator the seed is for.).  I find the the
MKL Mersenne Twister results match R's (with occassional differences in the
last bit) when the 625-integer seeds the same.

I believe R fiddles with the single-integer seed to spread it out a bit.
S's seed was taken modulo 1024 so old users tended not use use single-seeds
bigger than 1023.


Bill Dunlap
TIBCO Software
wdunlap tibco.com

On Tue, Aug 30, 2016 at 2:45 PM, Mark Roberts <ersatz.too at gmail.com> wrote:

> Whomever,
>
> I recently sent the "bug report" below toR-core at r-project.org and have
> just been asked to instead submit it to you.
>
> Although I am basically not an R user, I have installed version 3.3.1
> and am also the author of a statistics program written in Visual Basic
> that contains a component which correctly implements the Mersenne
> Twister (MT) algorithm.  I believe that it is not possible to generate
> the correct stream of pseudorandom numbers using the MT default random
> number generator in R, and am not the first person to notice this.  Here
> is a posted 2013 entry
> (www.r-bloggers.com/reproducibility-and-randomness/) on an R website
> that asserts that the SAS computer program implementation of the MT
> algorithm produces different numbers than R does when using the same
> starting seed number.  The author of this post didn?t get anyone to
> respond to his query about the reason for this SAS vs. R discrepancy.
>
> There are two ways of initializing the original MT computer program
> (written in C) so that an identical stream of numbers can be repeatedly
> generated:  1) with a particular integer seed number, and 2) with a
> particular array of integers.   In the 'compilation and usage' section
> of this webpage (https://github.com/cslarsen/mersenne-twister) there is
> a listing of the first 200 random numbers the MT algorithm should
> produce for seed number = 1.  The inventors of the Mersenne Twister
> random number generator provided two different sets of the first 1000
> numbers produced by a correctly coded 32-bit implementation of the MT
> algorithm when initializing it with a particular array of integers at:
> www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.out.
> [There is a link to this output at:
> www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html.]
>
> My statistics program obtains exactly those 200 numbers from the first
> site mentioned in the previous paragraph and also obtains those same
> numbers from the second website (though I didn't check all 2000 values).
>    Assuming that the MT code within R uses the 32-bit MT algorithm, I
> suspect that the current version of R can't do that.  If you (i.e.,
> anyone who might knowledgeably respond to this report) is able to
> duplicate those reference test-values, then please send me the R code to
> initialize the MT code within R to successfully do that, and I apologize
> for having wasted your time. If you (collectively) can't do that, then R
> is very likely using incorrectly implemented MT code.  And if this
> latter possibility is true, it seems to me that this is something that
> should be fixed.
>
> Mark Roberts, Ph.D.
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Wed Aug 31 00:29:18 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Tue, 30 Aug 2016 18:29:18 -0400
Subject: [Rd] A bug in the R Mersenne Twister (RNG) code?
In-Reply-To: <61f698e6-c432-0dfe-630b-d6d45a78dc05@gmail.com>
References: <61f698e6-c432-0dfe-630b-d6d45a78dc05@gmail.com>
Message-ID: <1955d948-06dd-1c0c-6de1-32b0805152e6@gmail.com>

I don't see evidence of a bug.  There have been several versions of the 
MT; we may be using a different version than you are.  Ours is the 
1999/10/28 version; the web page you cite uses one from 2002.

Perhaps the newer version fixes some problems, and then it would be 
worth considering a change.  But changing the default RNG definitely 
introduces problems in reproducibility, so it's not obvious that we 
would do it.

Duncan Murdoch


On 30/08/2016 5:45 PM, Mark Roberts wrote:
> Whomever,
>
> I recently sent the "bug report" below toR-core at r-project.org and have
> just been asked to instead submit it to you.
>
> Although I am basically not an R user, I have installed version 3.3.1
> and am also the author of a statistics program written in Visual Basic
> that contains a component which correctly implements the Mersenne
> Twister (MT) algorithm.  I believe that it is not possible to generate
> the correct stream of pseudorandom numbers using the MT default random
> number generator in R, and am not the first person to notice this.  Here
> is a posted 2013 entry
> (www.r-bloggers.com/reproducibility-and-randomness/) on an R website
> that asserts that the SAS computer program implementation of the MT
> algorithm produces different numbers than R does when using the same
> starting seed number.  The author of this post didn?t get anyone to
> respond to his query about the reason for this SAS vs. R discrepancy.
>
> There are two ways of initializing the original MT computer program
> (written in C) so that an identical stream of numbers can be repeatedly
> generated:  1) with a particular integer seed number, and 2) with a
> particular array of integers.   In the 'compilation and usage' section
> of this webpage (https://github.com/cslarsen/mersenne-twister) there is
> a listing of the first 200 random numbers the MT algorithm should
> produce for seed number = 1.  The inventors of the Mersenne Twister
> random number generator provided two different sets of the first 1000
> numbers produced by a correctly coded 32-bit implementation of the MT
> algorithm when initializing it with a particular array of integers at:
> www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.out.
> [There is a link to this output at:
> www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html.]
>
> My statistics program obtains exactly those 200 numbers from the first
> site mentioned in the previous paragraph and also obtains those same
> numbers from the second website (though I didn't check all 2000 values).
>    Assuming that the MT code within R uses the 32-bit MT algorithm, I
> suspect that the current version of R can't do that.  If you (i.e.,
> anyone who might knowledgeably respond to this report) is able to
> duplicate those reference test-values, then please send me the R code to
> initialize the MT code within R to successfully do that, and I apologize
> for having wasted your time. If you (collectively) can't do that, then R
> is very likely using incorrectly implemented MT code.  And if this
> latter possibility is true, it seems to me that this is something that
> should be fixed.
>
> Mark Roberts, Ph.D.
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From maechler at stat.math.ethz.ch  Wed Aug 31 09:51:55 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Wed, 31 Aug 2016 09:51:55 +0200
Subject: [Rd] 'droplevels' inappropriate change
In-Reply-To: <22465.50697.909911.63214@stat.math.ethz.ch>
References: <817542177.517460.1472267852866.ref@mail.yahoo.com>
	<817542177.517460.1472267852866@mail.yahoo.com>
	<22465.50697.909911.63214@stat.math.ethz.ch>
Message-ID: <22470.35995.640269.869299@stat.math.ethz.ch>

>>>>> Martin Maechler <maechler at stat.math.ethz.ch>
>>>>>     on Sat, 27 Aug 2016 18:55:37 +0200 writes:

>>>>> Suharto Anggono Suharto Anggono via R-devel <r-devel at r-project.org>
>>>>>     on Sat, 27 Aug 2016 03:17:32 +0000 writes:

    >> In R devel r71157, 'droplevels' documentation, in "Arguments" section, says this about argument 'exclude'.
    >> passed to factor(); factor levels which should be excluded from the result even if present.  Note that this was implicitly NA in R <= 3.3.1 which did drop NA levels even when present in x, contrary to the documentation.  The current default is compatible with x[ , drop=FALSE].

    >> The part
    >> x[ , drop=FALSE]
    >> should be
    >> x[ , drop=TRUE]

    > Yes, definitely, thank you!
    > a "typo" by me. .. fixed now.

    >> Saying that 'exclude' is factor levels is not quite true for NA element. NA may be not an original level, but NA in 'exclude' affects the result.

    >> For a factor 'x', factor(x, exclude = exclude) doesn't really work for excluding in general. See, for example, https://stat.ethz.ch/pipermail/r-help/2005-September/079336.html .
    >> factor(factor(c("a","b","c")), exclude="c")

    >> However, this excludes "2":
    >> factor(factor(2:3), exclude=2)

    >> Rather unexpectedly, this excludes NA:
    >> factor(factor(c("a",NA), exclude=NULL), exclude="c")

    >> For a factor 'x', factor(x, exclude = exclude) can only exclude integer-like or NA levels. An explanation is in https://stat.ethz.ch/pipermail/r-help/2011-April/276274.html .

    > Well, Peter Dalgaard (in that R-devel e-mail, a bit more than 5
    > years ago) is confirming the problem there,  and suggesting (as
    > you, right?) that actually   `factor()` is not behaving
    > correctly here.

    > And your persistence is finally getting close to convince me
    > that it is not just droplevels(), but  factor() itself which
    > needs care here.

    > Interestingly, the following patch *does* pass 'make check-all'
    > (after small change in tests/reg-tests-1b.R which is ok),
    > and leads to behavior which is much closer to the documentation,
    > notably for your two examples above would give what one would
    > expect.

    > (( If the R-Hub would support experiments with branches of R-devel 
    > from R-core members,  I could just create such a branch and R Hub
    > would run 'R CMD check <pkg>'  for thousands of CRAN packages
    > and provide a web page with the *differences* in the package
    > check results ... so we could see ... ))

    > I do agree that we should strongly consider such a change.

as nobody has commented, I've been liberal and have taken these
no comments as consent.

Hence I have committed

------------------------------------------------------------------------
r71178 | maechler | 2016-08-31 09:45:40 +0200 (Wed, 31 Aug 2016) | 1 line
Changed paths:
   M /trunk/doc/NEWS.Rd
   M /trunk/src/library/base/R/factor.R
   M /trunk/src/library/base/man/factor.Rd
   M /trunk/tests/reg-tests-1b.R
   M /trunk/tests/reg-tests-1c.R

factor(x, exclude) more "rational" when x or exclude are character
------------------------------------------------------------------------

which apart from documentation, examples, and regression tests
is just the patch below.

Martin Maechler
ETH Zurich


    > --- factor.R	(revision 71157)
    > +++ factor.R	(working copy)
    > @@ -28,8 +28,12 @@
    > levels <- unique(y[ind])
    > }
    > force(ordered) # check if original x is an ordered factor
    > -    exclude <- as.vector(exclude, typeof(x)) # may result in NA
    > -    x <- as.character(x)
    > +    if(!is.character(x)) {
    > +	if(!is.character(exclude))
    > +	    exclude <- as.vector(exclude, typeof(x)) # may result in NA
    > +	x <- as.character(x)
    > +    } else
    > +	exclude <- as.vector(exclude, typeof(x)) # may result in NA
    > ## levels could be a long vectors, but match will not handle that.
    > levels <- levels[is.na(match(levels, exclude))]
    > f <- match(x, levels)


From michaelchirico4 at gmail.com  Wed Aug 31 16:10:47 2016
From: michaelchirico4 at gmail.com (Michael Chirico)
Date: Wed, 31 Aug 2016 10:10:47 -0400
Subject: [Rd] New strptime conversion specification for ordinal suffixes
Message-ID: <CAPRVBcw3o2mnP-LeSnXx3UFBtgw+fhjHggzjfRN82u8b8fOPMA@mail.gmail.com>

As touched on briefly on SO <http://stackoverflow.com/questions/39237299>,
base R has what appears to me to be a serious deficiency in its inability
to recognize dates formatted as character strings with ordinal suffixes:

ord_dates <- c("September 1st, 2016", "September 2nd, 2016",
               "September 3rd, 2016", "September 4th, 2016")

?strptime lists no conversion specification which could match ord_dates in
one pass (as I discovered, even lubridate only manages to succeed by going
through the vector in several passes).

How difficult would it be to add a new conversion specification which would
handle this, which would seem to me to be a pretty common instance of dates
to be found in the raw data wild?

My suggestion would be %o for ordinal suffixes. These would obviously be
locale-specific, but in English, %o would match to:


   - st
   - nd
   - rd
   - th
   - st
   - nd
   - rd
   - th


Other languages may be covered by this
<https://en.wikipedia.org/wiki/Ordinal_indicator> and/or this
<https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts>
Wikipedia page on ordinal superscripts & Unicode superscripts, respectively.

With this implemented, converting ord_dates to a Date or POSIXct would be
as simple as:

as.Date(ord_dates, format = "%B %d%o, %Y")

Is there something on the C level preventing this from happening?

Michael Chirico

	[[alternative HTML version deleted]]


From edd at debian.org  Wed Aug 31 17:30:07 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 31 Aug 2016 10:30:07 -0500
Subject: [Rd] A bug in the R Mersenne Twister (RNG) code?
In-Reply-To: <1955d948-06dd-1c0c-6de1-32b0805152e6@gmail.com>
References: <61f698e6-c432-0dfe-630b-d6d45a78dc05@gmail.com>
	<1955d948-06dd-1c0c-6de1-32b0805152e6@gmail.com>
Message-ID: <22470.63487.360801.506998@max.nulle.part>


On 30 August 2016 at 18:29, Duncan Murdoch wrote:
| I don't see evidence of a bug.  There have been several versions of the 
| MT; we may be using a different version than you are.  Ours is the 
| 1999/10/28 version; the web page you cite uses one from 2002.
| 
| Perhaps the newer version fixes some problems, and then it would be 
| worth considering a change.  But changing the default RNG definitely 
| introduces problems in reproducibility, so it's not obvious that we 
| would do it.

Yep. FWIW the GNU GSL adopted the 2002 version a while ago too. Quoting from
https://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html

Generator: gsl_rng_mt19937

   The MT19937 generator of Makoto Matsumoto and Takuji Nishimura is a
   variant of the twisted generalized feedback shift-register algorithm, and
   is known as the ?Mersenne Twister? generator. It has a Mersenne prime
   period of 2^19937 - 1 (about 10^6000) and is equi-distributed in 623
   dimensions. It has passed the DIEHARD statistical tests. It uses 624 words
   of state per generator and is comparable in speed to the other
   generators. The original generator used a default seed of 4357 and
   choosing s equal to zero in gsl_rng_set reproduces this. Later versions
   switched to 5489 as the default seed, you can choose this explicitly via
   gsl_rng_set instead if you require it.

   For more information see,

      Makoto Matsumoto and Takuji Nishimura, ?Mersenne Twister: A
      623-dimensionally equidistributed uniform pseudorandom number
      generator?. ACM Transactions on Modeling and Computer Simulation,
      Vol. 8, No. 1 (Jan. 1998), Pages 3?30 The generator gsl_rng_mt19937
      uses the second revision of the seeding procedure published by the two
      authors above in 2002. The original seeding procedures could cause
      spurious artifacts for some seed values. They are still available
      through the alternative generators gsl_rng_mt19937_1999 and
      gsl_rng_mt19937_1998.

Note the last sentence here.

This is all somewhat technical code, so when I noticed the above I could
never figure what exactly R was doing in its implementation.  But "innocent
until proven guilty" -- a sufficient number of people ought to have looked at
this -- so I saw no need to pursue this further.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


