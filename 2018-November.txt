From murdoch@dunc@n @ending from gm@il@com  Thu Nov  1 17:46:14 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Thu, 1 Nov 2018 12:46:14 -0400
Subject: [Rd] Bias in R's random integers?
In-Reply-To: <a590bfc6-f172-b227-00d9-9eacb126fd63@gmail.com>
References: <CAN_1p9wVX=AR8aYtC2LJo0bgN9cRW3XcbYJqnVHdCzA-QA1ceg@mail.gmail.com>
 <ffb74021-8d95-a820-8013-f0e51dc1a9b3@gmail.com>
 <CALEXWq3booRRTSYvYqcjV7qPZGOC1oh5o45b5o=J2ypQi5s-ag@mail.gmail.com>
 <ece52410-ddb2-2198-9291-201475d3f46e@gmail.com>
 <CAA7KnHHEejYVn8NtKrY1KuKcJUq8n4LoJSDx9BZv-LJyC=r9yQ@mail.gmail.com>
 <73c4667d-38ad-f5ef-468c-4c368e0fdc12@gmail.com>
 <CAA7KnHFcY5YJ2kTAfPJJ0PHwcWx7CumE49A4NgJWC2NK5CV=-A@mail.gmail.com>
 <c3590da8-2e92-4e46-3a81-0d0dbfc81845@gmail.com>
 <CAA7KnHE9OSxML3Cp8Y-gd7CbBj-86UP9qAy6yzgvfcb+=Vg86Q@mail.gmail.com>
 <e82cfff0-3a8e-1d7b-de5c-02b69974ae16@gmail.com>
 <4143568b-c67f-2309-f9ec-676f9e791747@gmail.com>
 <CAN_1p9znLss3QKuF3WB5ucM_F2=paNx28eCdJecB8fj0p_w-6Q@mail.gmail.com>
 <5245f770-a010-b976-28c8-13a2ec74a088@daqana.com>
 <a590bfc6-f172-b227-00d9-9eacb126fd63@gmail.com>
Message-ID: <c5126891-889b-51c7-b46f-062e02d6cc11@gmail.com>

An email today reminded me of this issue.  The other bug (fractional 
population sizes) was fixed quite a while ago, but this one still 
exists.  I've posted a bug report about it (PR#17494).

Duncan Murdoch

On 20/09/2018 11:15 AM, Duncan Murdoch wrote:
> On 20/09/2018 6:59 AM, Ralf Stubner wrote:
>> On 9/20/18 1:43 AM, Carl Boettiger wrote:
>>> For a well-tested C algorithm, based on my reading of Lemire, the unbiased
>>> "algorithm 3" in https://arxiv.org/abs/1805.10941 is part already of the C
>>> standard library in OpenBSD and macOS (as arc4random_uniform), and in the
>>> GNU standard library.  Lemire also provides C++ code in the appendix of his
>>> piece for both this and the faster "nearly divisionless" algorithm.
>>>
>>> It would be excellent if any R core members were interested in considering
>>> bindings to these algorithms as a patch, or might express expectations for
>>> how that patch would have to operate (e.g. re Duncan's comment about
>>> non-integer arguments to sample size).  Otherwise, an R package binding
>>> seems like a good starting point, but I'm not the right volunteer.
>> It is difficult to do this in a package, since R does not provide access
>> to the random bits generated by the RNG. Only a float in (0,1) is
>> available via unif_rand().
> 
> I believe it is safe to multiply the unif_rand() value by 2^32, and take
> the whole number part as an unsigned 32 bit integer.  Depending on the
> RNG in use, that will give at least 25 random bits.  (The low order bits
> are the questionable ones.  25 is just a guess, not a guarantee.)
> 
> However, if one is willing to use an external
>> RNG, it is of course possible. After reading about Lemire's work [1], I
>> had planned to integrate such an unbiased sampling scheme into the dqrng
>> package, which I have now started. [2]
>>
>> Using Duncan's example, the results look much better:
>>
>>> library(dqrng)
>>> m <- (2/5)*2^32
>>> y <- dqsample(m, 1000000, replace = TRUE)
>>> table(y %% 2)
>>
>>        0      1
>> 500252 499748
> 
> Another useful diagnostic is
> 
>     plot(density(y[y %% 2 == 0]))
> 
> Obviously that should give a more or less uniform density, but for
> values near m, the default sample() gives some nice pretty pictures of
> quite non-uniform densities.
> 
> By the way, there are actually quite a few examples of very large m
> besides m = (2/5)*2^32 where performance of sample() is noticeably bad.
> You'll see problems in y %% 2 for any integer a > 1 with m = 2/(1 + 2a)
> * 2^32, problems in y %% 3 for m = 3/(1 + 3a)*2^32 or m = 3/(2 +
> 3a)*2^32, etc.
> 
> So perhaps I'm starting to be convinced that the default sample() should
> be fixed.
> 
> Duncan Murdoch
> 
> 
>>
>> Currently I am taking the other interpretation of "truncated":
>>
>>> table(dqsample(2.5, 1000000, replace = TRUE))
>>
>>        0      1
>> 499894 500106
>>
>> I will adjust this to whatever is decided for base R.
>>
>>
>> However, there is currently neither long vector nor weighted sampling
>> support. And the performance without replacement is quite bad compared
>> to R's algorithm with hashing.
>>
>> cheerio
>> ralf
>>
>> [1] via http://www.pcg-random.org/posts/bounded-rands.html
>> [2] https://github.com/daqana/dqrng/tree/feature/sample
>>
>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From iuc@r @ending from fedor@project@org  Fri Nov  2 17:42:09 2018
From: iuc@r @ending from fedor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Fri, 2 Nov 2018 17:42:09 +0100
Subject: [Rd] Suggestion: Make CRAN source URLs immutable
In-Reply-To: <23504.11286.787374.78528@hornik.net>
References: <CAH--+mZTEXEhkhb=_3v2RfkiV=JVr0C9gvib2q4zHvJFxO-WdA@mail.gmail.com>
 <23504.11286.787374.78528@hornik.net>
Message-ID: <CALEXWq2wTkm7Y_Xnadz0J1TSmt5AAkBeQcFe5jvNVfa-LJ2qTQ@mail.gmail.com>

On Wed, 24 Oct 2018 at 11:40, Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:
>
> >>>>> Kurt Wheeler writes:
>
> Try e.g.
>
> https://cran.r-project.org/package=httr&version=1.3.1
> https://cran.r-project.org/package=httr&version=1.3.0

This is a nice feature that I didn't know. I recently proposed
enforcing this scheme in Fedora's packaging guidelines, because in
this way, a SPEC would build correctly even if the package was updated
and the old version was archived (is this guaranteed to continue to
work in future? I assumed so...).

There is an odd thing about this format though, and that is the
absence of a file extension. This is a redirection, yes, but the
spectool can't trust the filename that is sent by the remote server,
and uses only the filename extracted from the URL.

Without extension, RPM doesn't know how to unpack the sources. So we
have to do the following similarly odd trick (note the "#"):

Source0: https://cran.r-project.org/package=%{packname}&version=%{version}#/%{packname}_%{version}.tar.gz

Did you consider this problem? Is there any alternate immutable URL
*with* extension? If not, is there any potential issue with the trick
above?

Regards,
--
I?aki Ucar


From jori@mey@ @ending from gm@il@com  Sat Nov  3 11:53:49 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Sat, 3 Nov 2018 11:53:49 +0100
Subject: [Rd] Suggestion: Make CRAN source URLs immutable
In-Reply-To: <CALEXWq2wTkm7Y_Xnadz0J1TSmt5AAkBeQcFe5jvNVfa-LJ2qTQ@mail.gmail.com>
References: <CAH--+mZTEXEhkhb=_3v2RfkiV=JVr0C9gvib2q4zHvJFxO-WdA@mail.gmail.com>
 <23504.11286.787374.78528@hornik.net>
 <CALEXWq2wTkm7Y_Xnadz0J1TSmt5AAkBeQcFe5jvNVfa-LJ2qTQ@mail.gmail.com>
Message-ID: <CAO1zAVYBrbxxbjeRqp39yQs_hQyNi7yQYW6A0+-tf6f5uWudog@mail.gmail.com>

FWIW, you can get the URL and extract the link with extension from there.
Archived packages are always tarballs, so that makes the following possible:

url <- "https://cran.r-project.org/package=httr&version=1.3.0"

library(RCurl)

pkgurl <- gsub(".*(https://cran.+\\.tar.gz).*",
               "\\1",
               getURL(url))

install.packages(pkgurl, type = "source", repos = NULL)

Cheers
Joris


On Fri, Nov 2, 2018 at 5:42 PM I?aki Ucar <iucar at fedoraproject.org> wrote:

> On Wed, 24 Oct 2018 at 11:40, Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:
> >
> > >>>>> Kurt Wheeler writes:
> >
> > Try e.g.
> >
> > https://cran.r-project.org/package=httr&version=1.3.1
> > https://cran.r-project.org/package=httr&version=1.3.0
>
> This is a nice feature that I didn't know. I recently proposed
> enforcing this scheme in Fedora's packaging guidelines, because in
> this way, a SPEC would build correctly even if the package was updated
> and the old version was archived (is this guaranteed to continue to
> work in future? I assumed so...).
>
> There is an odd thing about this format though, and that is the
> absence of a file extension. This is a redirection, yes, but the
> spectool can't trust the filename that is sent by the remote server,
> and uses only the filename extracted from the URL.
>
> Without extension, RPM doesn't know how to unpack the sources. So we
> have to do the following similarly odd trick (note the "#"):
>
> Source0:
> https://cran.r-project.org/package=%{packname}&version=%{version}#/%{packname}_%{version}.tar.gz
>
> Did you consider this problem? Is there any alternate immutable URL
> *with* extension? If not, is there any potential issue with the trick
> above?
>
> Regards,
> --
> I?aki Ucar
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From iuc@r @ending from fedor@project@org  Sat Nov  3 12:37:37 2018
From: iuc@r @ending from fedor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Sat, 3 Nov 2018 12:37:37 +0100
Subject: [Rd] Suggestion: Make CRAN source URLs immutable
In-Reply-To: <CAO1zAVYBrbxxbjeRqp39yQs_hQyNi7yQYW6A0+-tf6f5uWudog@mail.gmail.com>
References: <CAH--+mZTEXEhkhb=_3v2RfkiV=JVr0C9gvib2q4zHvJFxO-WdA@mail.gmail.com>
 <23504.11286.787374.78528@hornik.net>
 <CALEXWq2wTkm7Y_Xnadz0J1TSmt5AAkBeQcFe5jvNVfa-LJ2qTQ@mail.gmail.com>
 <CAO1zAVYBrbxxbjeRqp39yQs_hQyNi7yQYW6A0+-tf6f5uWudog@mail.gmail.com>
Message-ID: <CALEXWq1teuoN3ddoJ1O7NGWJsF7vp1S+7_C_auhE4Lhdg3Zo_w@mail.gmail.com>

On Sat, 3 Nov 2018 at 11:54, Joris Meys <jorismeys at gmail.com> wrote:
>
> FWIW, you can get the URL and extract the link with extension from there. Archived packages are always tarballs, so that makes the following possible:
>
> url <- "https://cran.r-project.org/package=httr&version=1.3.0"
>
> library(RCurl)
>
> pkgurl <- gsub(".*(https://cran.+\\.tar.gz).*",
>                "\\1",
>                getURL(url))
>
> install.packages(pkgurl, type = "source", repos = NULL)

The proper way to do this would be to fetch just the headers and
extract the location field:

$ URL="https://cran.r-project.org/package=httr&version=1.3.0"
$ curl -sI $URL | awk '/^Location:/{print $2}'
https://cran.r-project.org/src/contrib/Archive/httr/httr_1.3.0.tar.gz

But that's not the point. I'm talking about RPM packaging, and the
point is, as I said, that the tool that expands and downloads sources
from specfiles simply doesn't do that, because it can't trust an
extension sent from a remote server. We need to provide it explicitly
in the URL.

--
I?aki ?car


From r@hijm@n@ @ending from gm@il@com  Sat Nov  3 18:29:35 2018
From: r@hijm@n@ @ending from gm@il@com (Robert J. Hijmans)
Date: Sat, 3 Nov 2018 10:29:35 -0700
Subject: [Rd] odd NOTE in R CMD check of data; Rcpp module related
Message-ID: <CANtt_hzK=ennE6Ro5k2FCgq2GOFxjj27zGPLXimxdtU7LfNqDg@mail.gmail.com>

With the current version of the "raster" package (that I maintain), R CMD
check on packages "soilDB" and "PopGenReport" have this NOTE:

Package: soilDB
Check: data for non-ASCII characters
New result: NOTE
    Error in .requirePackage(package) :
      unable to find required package 'raster'
    Calls: <Anonymous> ... .findInheritedMethods -> getClass -> getClassDef
-> .requirePackage
    Execution halted


In soiDB this is presumably triggered by loading this file:

> f <- system.file("data/gSSURGO.chunk.rda", package="soilDB")
> "raster" %in% .packages()
[1] FALSE
> load(f)
> gSSURGO.chunk
Loading required package: raster
Loading required package: sp
Error: package or namespace load failed for ?raster? in
.doLoadActions(where, attach):
 error in load action .__A__.1 for package raster: loadModule(module =
"spmod", what = TRUE, env = ns, loadNow = TRUE): Unable to load module
"spmod": object of type 'closure' is not subsettable
Error in .requirePackage(package) :
  unable to find required package ?raster?

# but all is OK the second time around

> gSSURGO.chunk
class       : RasterLayer
dimensions  : 106, 137, 14522  (nrow, ncol, ncell)
resolution  : 4, 4  (x, y)

The error message suggests that something goes wrong with the Rcpp module
that raster is using. The module was newly introduced, and coincides with
this new behavior. Do you have any idea about what I could do to avoid this?

This behavior can be simply simulated by creating a new RasterLayer, saving
it, and loading it in a fresh session.

library(raster)
x <- raster(ncol=10, nrow=10, vals=1:100)
saveRDS(x, "x.rds")
--- new R session ---
readRDS("x.rds")
readRDS("x.rds")

This gives

> readRDS("x.rds")
Loading required package: raster
Loading required package: sp
Error: package or namespace load failed for ?raster? in
.doLoadActions(where, attach):
 error in load action .__A__.1 for package raster: loadModule(module =
"spmod", what = TRUE, env = ns, loadNow = TRUE): Unable to load module
"spmod": object of type 'closure' is not subsettable
Error in .requirePackage(package) :
  unable to find required package ?raster?

> readRDS("x.rds")
class       : RasterLayer
dimensions  : 10, 10, 100  (nrow, ncol, ncell)
resolution  : 36, 18  (x, y)
extent      : -180, 180, -90, 90  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0
data source : in memory
names       : layer
values      : 1, 100  (min, max)

Any idea about what I can do to get rid of this?

Thanks,
Robert Hijmans

	[[alternative HTML version deleted]]


From edd @ending from debi@n@org  Sat Nov  3 20:07:28 2018
From: edd @ending from debi@n@org (Dirk Eddelbuettel)
Date: Sat, 3 Nov 2018 14:07:28 -0500
Subject: [Rd] odd NOTE in R CMD check of data; Rcpp module related
In-Reply-To: <CANtt_hzK=ennE6Ro5k2FCgq2GOFxjj27zGPLXimxdtU7LfNqDg@mail.gmail.com>
References: <CANtt_hzK=ennE6Ro5k2FCgq2GOFxjj27zGPLXimxdtU7LfNqDg@mail.gmail.com>
Message-ID: <23517.61936.711679.449180@rob.eddelbuettel.com>


Robert,

On 3 November 2018 at 10:29, Robert J. Hijmans wrote:
| With the current version of the "raster" package (that I maintain), R CMD
| check on packages "soilDB" and "PopGenReport" have this NOTE:
| 
| Package: soilDB
| Check: data for non-ASCII characters
| New result: NOTE
|     Error in .requirePackage(package) :
|       unable to find required package 'raster'
|     Calls: <Anonymous> ... .findInheritedMethods -> getClass -> getClassDef
| -> .requirePackage
|     Execution halted

[...]

| Any idea about what I can do to get rid of this?

Shooting a little from the hip, but based on the error and a glance at 

  https://github.com/ncss-tech/soilDB/blob/master/DESCRIPTION

you may need to import the 'methods' package.  I see that

  https://github.com/green-striped-gecko/PopGenReport/blob/master/DESCRIPTION

has it (and also a corresponding `importFrom(methods,as)`.  I think I usually
deploy a more global 'import(methods)'.  This is needed because Rcpp Modules
does some black magic on the package setup to make everything that needs to
be visible effectively visible.

One way to go about this is to create a minimal package using Rcpp Modules,
and to then make sure you carry each setting of the minimal package over into
your actual package -- that would usually involve imports and declaration.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From jtelleri@@rproject @ending from gm@il@com  Sun Nov  4 22:23:22 2018
From: jtelleri@@rproject @ending from gm@il@com (Juan Telleria Ruiz de Aguirre)
Date: Sun, 4 Nov 2018 22:23:22 +0100
Subject: [Rd] Suggestion: Make CRAN source URLs immutable
In-Reply-To: <CALEXWq1teuoN3ddoJ1O7NGWJsF7vp1S+7_C_auhE4Lhdg3Zo_w@mail.gmail.com>
References: <CAH--+mZTEXEhkhb=_3v2RfkiV=JVr0C9gvib2q4zHvJFxO-WdA@mail.gmail.com>
 <23504.11286.787374.78528@hornik.net>
 <CALEXWq2wTkm7Y_Xnadz0J1TSmt5AAkBeQcFe5jvNVfa-LJ2qTQ@mail.gmail.com>
 <CAO1zAVYBrbxxbjeRqp39yQs_hQyNi7yQYW6A0+-tf6f5uWudog@mail.gmail.com>
 <CALEXWq1teuoN3ddoJ1O7NGWJsF7vp1S+7_C_auhE4Lhdg3Zo_w@mail.gmail.com>
Message-ID: <CAJXDcw2i0FOYkorb5cRG-CMh1+HQd5E+etKUxPmiXZvRWbYwRQ@mail.gmail.com>

It would be nice to see such immutable package version links:

E.g.:

https://cran.r-project.org/package=httr&version=1.3.1
https://cran.r-project.org/package=httr&version=1.3.0


In the CRAN package web pages themselves, and specifically in the "Old
Sources: httr Section":

https://cran.r-project.org/web/packages/httr/index.html

In order that package users become aware of it.

But just as actually is also perfectly fine!

Juan

	[[alternative HTML version deleted]]


From bbolker @ending from gm@il@com  Sun Nov  4 23:22:18 2018
From: bbolker @ending from gm@il@com (Ben Bolker)
Date: Sun, 4 Nov 2018 17:22:18 -0500
Subject: [Rd] trivial typo in src/library/stats/man/ts.Rd
Message-ID: <0fb63168-ac97-4116-c21d-631fe157584a@mcmaster.ca>

 "vector[s]" should be plural in line 54 ...

  cheers
   Ben Bolker

----

Index: ts.Rd
===================================================================
--- ts.Rd	(revision 75540)
+++ ts.Rd	(working copy)
@@ -54,7 +54,7 @@
 }
 \details{
   The function \code{ts} is used to create time-series objects.  These
-  are vector or matrices with class of \code{"ts"} (and additional
+  are vectors or matrices with class of \code{"ts"} (and additional
   attributes) which represent data which has been sampled at equispaced
   points in time.  In the matrix case, each column of the matrix
   \code{data} is assumed to contain a single (univariate) time series.


From Kurt@Hornik @ending from wu@@c@@t  Mon Nov  5 08:48:23 2018
From: Kurt@Hornik @ending from wu@@c@@t (Kurt Hornik)
Date: Mon, 5 Nov 2018 08:48:23 +0100
Subject: [Rd] trivial typo in src/library/stats/man/ts.Rd
In-Reply-To: <0fb63168-ac97-4116-c21d-631fe157584a@mcmaster.ca>
References: <0fb63168-ac97-4116-c21d-631fe157584a@mcmaster.ca>
Message-ID: <23519.62919.615345.133906@hornik.net>

>>>>> Ben Bolker writes:

Thanks, fixed in the trunk now.

Best
-k

>  "vector[s]" should be plural in line 54 ...
>   cheers
>    Ben Bolker

> ----

> Index: ts.Rd
> ===================================================================
> --- ts.Rd	(revision 75540)
> +++ ts.Rd	(working copy)
> @@ -54,7 +54,7 @@
>  }
>  \details{
>    The function \code{ts} is used to create time-series objects.  These
> -  are vector or matrices with class of \code{"ts"} (and additional
> +  are vectors or matrices with class of \code{"ts"} (and additional
>    attributes) which represent data which has been sampled at equispaced
>    points in time.  In the matrix case, each column of the matrix
>    \code{data} is assumed to contain a single (univariate) time series.

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From h@wickh@m @ending from gm@il@com  Tue Nov  6 01:24:45 2018
From: h@wickh@m @ending from gm@il@com (Hadley Wickham)
Date: Mon, 5 Nov 2018 18:24:45 -0600
Subject: [Rd] An update on the vctrs package
Message-ID: <CABdHhvHSNYir2RYAKPA0DEx43MB0Cg8SDfjcoEEjnT6ZvATfLA@mail.gmail.com>

Hi all,

I wanted to give you an update on vctrs (<https://vctrs.r-lib.org/>)
since I last bought it up here in August. The biggest change is that I now
have a much clearer idea of what vctrs is! I?ll summarise that here,
and point you to the documentation if you?re interested in learning
more. I?m planning on submitting vctrs to CRAN in the near future, but
it?s very much a 0.1.0 release and I expect it to continue to evolve as
more people try it out and give me feedback. I?d love to hear your
thoughts\!

vctrs has three main goals:

  - To define and motivate `vec_size()` and `vec_type()` as alternatives
    to `length()` and `class()`.

  - To define type- and size-stability, useful tools for analysing
    function interfaces.

  - To make it easier to create new S3 vector classes.

## Size and prototype

`vec_size()` was motivated by my desire to have a function that captures
the number of ?observations? in a vector. This particularly important
for data frames because it?s useful to have a function such that
`f(data.frame(x))` equals `f(x)`. No base function has this property:
`NROW()` comes closest, but because it?s defined in terms of `length()`
for dimensionless objects, it always returns a number, even for types
that can?t go in a data frame, e.g. `data.frame(mean)` errors even
though `NROW(mean)` is `1`.

``` r
vec_size(1:10)
#> [1] 10
vec_size(as.POSIXlt(Sys.time() + 1:10))
#> [1] 10
vec_size(data.frame(x = 1:10))
#> [1] 10
vec_size(array(dim = c(10, 4, 1)))
#> [1] 10
vec_size(mean)
#> Error: `x` is a not a vector
```

`vec_size()` is paired with `vec_slice()` for subsetting, i.e.
`vec_slice()` is to `vec_size()` as `[` is to `length()`;
`vec_slice(data.frame(x), i)` equals `data.frame(vec_slice(x, i))`
(modulo variable/row names).

(I plan to make `vec_size()` and `vec_slice()` generic in the next
release, providing another point of differentiation from `NROW()`.)

Complementary to the size of a vector is its prototype, a
zero-observation slice of the vector. You can compute this using
`vec_type()`, but because many classes don?t have an informative print
method for a zero-length vector, I also provide `vec_ptype()` which
prints a brief summary. As well as the class, the prototype also
captures important attributes:

``` r
vec_ptype(1:10)
#> Prototype: integer
vec_ptype(array(1:40, dim = c(10, 4, 1)))
#> Prototype: integer[,4,1]
vec_ptype(Sys.time())
#> Prototype: datetime<local>
vec_ptype(data.frame(x = 1:10, y = letters[1:10]))
#> Prototype: data.frame<
#>   x: integer
#>   y: factor<5e105>
#> >
```

`vec_size()` and `vec_type()` are accompanied by functions that either
find or enforce a common size (using modified recycling rules) or common
type (by reducing a double-dispatching `vec_type2()` that determines the
common type from a pair of types).

You can read more about `vec_size()` and `vec_type()` at
<https://vctrs.r-lib.org/articles/type-size.html>.

## Stability

The definitions of size and prototype are motivated by my experiences
doing code review. I find that I can often spot problems by running R
code in my head. Obviously my mental R interpreter is much simpler than
the real interpreter, but it seems to focus on prototypes and sizes, and
I?m suspicious of code where I can?t easily predict the class of every
new variable.

This leads me to two definitions. A function is **type-stable** iif:

  - You can predict the output type knowing only the input types.
  - The order of arguments in ? does not affect the output type.

Similary, a function is **size-stable** iif:

  - You can predict the output size knowing only the input sizes, or
    there is a single numeric input that specifies the output size.

For example, `ifelse()` is type-unstable because the output type can be
different even when the input types are the same:

``` r
vec_ptype(ifelse(NA, 1L, 1L))
#> Prototype: logical
vec_ptype(ifelse(FALSE, 1L, 1L))
#> Prototype: integer
```

Size-stability is generally not a useful for analysing base R functions
because the definition is a bit too far away from base conventions. The
analogously defined length-stability is a bit better, but the definition
of length for non-vectors means that complete length-stability is rare.
For example, while `length(c(x, y))` usually equals `length(x) +
length(y)`, it does not hold for all possible inputs:

``` r
length(globalenv())
#> [1] 0
length(mean)
#> [1] 1
length(c(mean, globalenv()))
#> [1] 2
```

(I don?t mean to pick on base here; the tidyverse also has many
functions that violate these principles, but I wanted to stick to
functions that all readers would be familiar with.)

Type- and size-stable functions are desirable because they make it
possible to reason about code without knowing the precise values
involved. Of course, not all functions should be type- or size-stable: R
would be incredibly limited if you could predict the type or size of
`[[` and `read.csv()` without knowing the specific inputs\! But where
possible, I think using type- and size-stable functions makes code
easier to reason about and hence more likely to be bug free.

You can read more about size- and type-stability at
<https://vctrs.r-lib.org/articles/stability.html>. This vignette
includes a detailed analysis of `c()` and a type- and size-stable
alternative called `vec_c()`.

## New vector types

Finally, vctrs provides `new_vctr()` and `new_rcrd()` to make it easier
to define new classes, following the conventions that I?ve found
helpful, including writing a constructor function that enforces the
types of the underlying vector and its attributes (more details at
<https://adv-r.hadley.nz/s3.html>\>). vctrs also makes life easier by
implementing many base generics in terms of a small set of primitives:

  - At the simplest level, `print()` and `str()` are defined in terms of
    `format()`. `as.data.frame()` is implemented using the standard
    approach used for factor, POSIXct, Date etc.

  - `[[` and `[` use `NextMethod()` dispatch to the underlying base
    function, then restore attributes with `vec_restore()`. I?m not sure
    what the base equivalent of `vec_restore()` is, but it makes
    subclassing easier, as described in
    <https://adv-r.hadley.nz/s3.html#s3-subclassing>.

  - `==`, `!=`, `unique()`, `anyDuplicated()`, and `is.na()` are defined
    in terms of `vec_proxy_equal()`. `<`, `<=`, `>=`, `>`, `min()`,
    `max()`, `median()`, `quantile()`, and `xtfrm()` methods are defined
    in terms of `vec_proxy_compare()`. More details + examples at
    <https://vctrs.r-lib.org/articles/s3-vector.html#equality-and-comparison>

  - `+`, `-`, `/`, `*`, `^`, `%%`, `%/%`, `!`, `&`, and `|` operators
    are defined in terms of a double-dispatch use `vec_arith()`.
    Mathematical functions including the Summary group generics, the
    Math group generics, and a handful of others are defined using
    `vec_math()`. More details at
    <https://vctrs.r-lib.org/articles/s3-vector.html#arithmetic>

These generics make creating a new vector more rewarding more quickly:
you can easily sketch out the big picture before going back and filling
in all the methods that make your class unique. More details at
<https://vctrs.r-lib.org/articles/s3-vector.html>.

Hadley

-- 
http://hadley.nz


From jori@mey@ @ending from gm@il@com  Wed Nov  7 10:30:40 2018
From: jori@mey@ @ending from gm@il@com (Joris Meys)
Date: Wed, 7 Nov 2018 10:30:40 +0100
Subject: [Rd] Checksums of packages change on CRAN without change in version
 number
Message-ID: <CAO1zAVYcA12aUrbTF9MZJXs2rJdQf3M7qEC_n2Gy-_ASwho7Wg@mail.gmail.com>

Dear all,

I report the same problem again, as one of our sysadmins at the university
ran into the same issue again. Every so often they find an in-place update
of an R package which almost always amounts to a small change in the
DESCRIPTION file. This does cause the checksums to change, and we end up
with two packages with the exact same version number but different
checksums.

To date there hasn't been any satisfactory answer on how to avoid having to
update our own configuration builds a week after the initial update due to
these stealthy checksum changes.

It's also an increasing safety concern for our IT department, as they
seriously frown upon software that makes in-place changes. According to
them, there's no way they can know whether it is a legitimate change to the
package, or the result of some kind of hack. They have to rely on trust,
which is a dangerous thing to do in an IT context and which they like to
avoid.

github report on the issue (this time it's mgcv) :
https://github.com/easybuilders/easybuild-easyconfigs/pull/7122#pullrequestreview-172031060

Cheers
Joris

-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>

-----------
Biowiskundedagen 2017-2018
http://www.biowiskundedagen.ugent.be/

-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From wewol@ki @ending from gm@il@com  Wed Nov  7 13:33:25 2018
From: wewol@ki @ending from gm@il@com (Witold E Wolski)
Date: Wed, 7 Nov 2018 13:33:25 +0100
Subject: [Rd] Problem building rmarkdown vignettes with child
Message-ID: <CAAjnpdjq-s2AmvBv8qXHJjp57mR7e+Pz23m1iB21-KoihS1BbQ@mail.gmail.com>

Hello,

This is a problem I posted about already some time ago:
https://stat.ethz.ch/pipermail/r-devel/2018-September/076786.html

Finally, I did had some time to create a minimal package to reproduce
the problem that vignettes with child can not be build.
https://github.com/wolski/RmarkdownVignetteProblem

The problem basically is that while all the vignettes can be build by running

devtools::build_vignettes
or
rmarkdown::render

they will all fail to build when running
devtools::build()
or
R CMD build

except of the
ABVignetteWithLocalChild.Rmd
for which I did apply the workaround suggested by  Duncan in this github issue:
https://github.com/yihui/knitr/issues/1540


Best regards
Witek



-- 
Witold Eryk Wolski


From m@@nnell @ending from tibco@com  Wed Nov  7 23:35:54 2018
From: m@@nnell @ending from tibco@com (Michael Sannella)
Date: Wed, 7 Nov 2018 14:35:54 -0800
Subject: [Rd] error unserializing ascii format (v2 or v3)
Message-ID: <CAHPe-e-QwCV7Q3O4nqtFt0VfSDQbsx8BoSekG8FsigE7-vnqbw@mail.gmail.com>

I ran into an interesting error unserializing a file created with
ascii=TRUE:

R 3.5.1 (Windows or Linux):
    > unserialize(serialize(list(raw=as.raw(c(39,41))), NULL, version=2,
ascii=TRUE))
    Error in unserialize(serialize(list(raw = as.raw(c(39, 41))), NULL,
version = 2,  :
      ReadItem: unknown type 29, perhaps written by later version of R

The same error happens when the serialization is done with version=2
or version=3.  It does not happen if the serialization is done with
ascii=FALSE.

Note that 0x29 == 41.  It looks like unserialize is reading the wrong
line.

I tried this in earlier versions of R on Windows, and the same error
happens in every version from R-2.15.3 (the earliest I have) on up.

  ~~ Michael Sannella

	[[alternative HTML version deleted]]


From pd@lgd @ending from gm@il@com  Thu Nov  8 11:41:51 2018
From: pd@lgd @ending from gm@il@com (peter dalgaard)
Date: Thu, 8 Nov 2018 11:41:51 +0100
Subject: [Rd] error unserializing ascii format (v2 or v3)
In-Reply-To: <CAHPe-e-QwCV7Q3O4nqtFt0VfSDQbsx8BoSekG8FsigE7-vnqbw@mail.gmail.com>
References: <CAHPe-e-QwCV7Q3O4nqtFt0VfSDQbsx8BoSekG8FsigE7-vnqbw@mail.gmail.com>
Message-ID: <D15639B9-06F7-4EE2-A075-5C44FC86FBAA@gmail.com>

I see this on MacOS as well, so likely not platform dependent. 

A little more diddling to try to narrow it down:

> unserialize(serialize(as.raw(1), NULL, version=2, ascii=TRUE))
[1] 30
> unserialize(serialize(list(as.raw(1)), NULL, version=2, ascii=TRUE))
[[1]]
[1] 30

> unserialize(serialize(list(raw=as.raw(1)), NULL, version=2, ascii=TRUE))
Error in unserialize(serialize(list(raw = as.raw(1)), NULL, version = 2,  : 
  'installTrChar' must be called on a CHARSXP, but got 'pairlist'
> unserialize(serialize(list(r=as.raw(1)), NULL, version=2, ascii=TRUE))
Error in unserialize(serialize(list(r = as.raw(1)), NULL, version = 2,  : 
  'installTrChar' must be called on a CHARSXP, but got 'pairlist'
> unserialize(serialize(list(r=1), NULL, version=2, ascii=TRUE))
$r
[1] 1

> unserialize(serialize(list(as.raw(c(1,2))), NULL, version=2, ascii=TRUE))
[[1]]
[1] 30 31


So it looks like there is an issue with reading a named list containing a raw vector. Unnamed lists work and so does non-raw vectors. The length of the vector doesn't seem to matter and neither does the actual name. 

You can vary the error message by varying the entries in the vector, but the gist of it is that something gets misinterpreted and the rest of the data stop making sense.

I also tried going explicitly through a text connection, and that seems exactly equivalent. 

-pd

> On 7 Nov 2018, at 23:35 , Michael Sannella via R-devel <r-devel at r-project.org> wrote:
> 
> I ran into an interesting error unserializing a file created with
> ascii=TRUE:
> 
> R 3.5.1 (Windows or Linux):
>> unserialize(serialize(list(raw=as.raw(c(39,41))), NULL, version=2,
> ascii=TRUE))
>    Error in unserialize(serialize(list(raw = as.raw(c(39, 41))), NULL,
> version = 2,  :
>      ReadItem: unknown type 29, perhaps written by later version of R
> 
> The same error happens when the serialization is done with version=2
> or version=3.  It does not happen if the serialization is done with
> ascii=FALSE.
> 
> Note that 0x29 == 41.  It looks like unserialize is reading the wrong
> line.
> 
> I tried this in earlier versions of R on Windows, and the same error
> happens in every version from R-2.15.3 (the earliest I have) on up.
> 
>  ~~ Michael Sannella
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tom@@@k@liber@ @ending from gm@il@com  Thu Nov  8 18:16:39 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Thu, 8 Nov 2018 18:16:39 +0100
Subject: [Rd] Little memory leak fix
In-Reply-To: <CA+XhMqxdDV2eaS8S3dsVqhWdHn2ce1PE9x5Vhz7kX7xS9PbJ1Q@mail.gmail.com>
References: <CA+XhMqxdDV2eaS8S3dsVqhWdHn2ce1PE9x5Vhz7kX7xS9PbJ1Q@mail.gmail.com>
Message-ID: <b9005d5e-4c33-e8f9-0fbe-be785b83ee55@gmail.com>

Thanks! Fixed in R-devel.

Best
Tomas

On 10/29/18 12:34 AM, David CARLIER wrote:
> Hi dear list,
>
> Here a little memory leak fix proposal.
>
> Kind regards.
> Thanks.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



	[[alternative HTML version deleted]]


From @purdle@@ @ending from gm@il@com  Thu Nov  8 21:38:56 2018
From: @purdle@@ @ending from gm@il@com (Abs Spurdle)
Date: Fri, 9 Nov 2018 09:38:56 +1300
Subject: [Rd] An update on the vctrs package
Message-ID: <CAB8pepw_uO6B-tcbcvihvpUsTBRByffsKfZF6yL2dFByBgk+ww@mail.gmail.com>

Kia Ora

> vec_size(data.frame(x = 1:10))
> #> [1] 10
> vec_size(array(dim = c(10, 4, 1)))
> #> [1] 10

I think that "length" (in the R way) or "size" should incorporate the
number of columns (or other dimension information).

How about:
> vec_npoints (x)
> vec_nrecords (x)
> vec_nobs (x)

Depending on whether you want to promote geometry, databases or statistics.
I like npoints because I like to be Geometry-Friendly :).

This next issue isn't probably the feedback you're looking for.
However, given that you brought it up...

> vec_size(mean)
> #> Error: `x` is a not a vector

This is very interesting.
I'm writing a function where I'm planning to do the complete opposite.

I could return the number of lines of a function or the number of it's
arguments.
However, it would be nice to do something like.

> object.size (mean)
f: Nn -> N1

(Note that I'm using "N" for numeric rather than the more obvious "R" for real).

It's difficult for an R function to determine the input types of
another R function and even more difficult to determine the output
types.

It may be possible to incorporate a comment as a variable (inside a
function) rather than a comment as a comment.

> mymean = function (x)
+ {   #info
+     .map = "f: Nn -> N1"
+
+     mean (x)
+ }


kind regards
Abs


From j@me@@f@he@ter @ending from gm@il@com  Fri Nov  9 17:46:49 2018
From: j@me@@f@he@ter @ending from gm@il@com (Jim Hester)
Date: Fri, 9 Nov 2018 11:46:49 -0500
Subject: [Rd] Change windows installer default to only install 64 bit R
Message-ID: <CAD6tx95qZnmj3c211ePB4+BLj-BoP8rHUFZ_zMkgZXQu9jOx7g@mail.gmail.com>

The R Installer by default installs both the 32 and 64 bit versions of
R. This can cause user confusion as they have multiple versions of R
installed and are then unsure which to use, or mistakenly open the
wrong version.

We can remove much of this ambiguity by changing the default choice in
the installer to only install the 64 bit version in the installer. If
users do need the 32 bit version it is still simple for them to
install it by checking the appropriate box during installation.

The following diff (also attached) simply reorders the options in the
install dialog to make 64 bit only installs the default. If users do
not have 64 bit support in their OS the options fallback to 32 bit
install by default, the same as they do currently in that situation.

There also seemed to be a bug in that 32 bit installs did not include
the message translations, which is also fixed.

Thanks for your consideration,

Jim

Index: src/gnuwin32/installer/types3264.iss
===================================================================
--- src/gnuwin32/installer/types3264.iss (revision 75569)
+++ src/gnuwin32/installer/types3264.iss (working copy)
@@ -1,8 +1,8 @@

 [Types]
+Name: "user64"; Description: "64-bit {cm:user}"; Check: Is64BitInstallMode
 Name: "user"; Description: {cm:user}; Check: Is64BitInstallMode
 Name: "user32"; Description: "32-bit {cm:user}"
-Name: "user64"; Description: "64-bit {cm:user}"; Check: Is64BitInstallMode
 Name: "custom"; Description: {cm:custom}; Flags: iscustom

 [Components]
@@ -9,4 +9,4 @@
 Name: "main"; Description: "Core Files"; Types: user user32 user64  custom
 Name: "i386"; Description: "32-bit Files"; Types: user user32 custom
 Name: "x64"; Description: "64-bit Files"; Types: user user64 custom
-Name: "translations"; Description: "Message translations"; Types:
user user64 custom
+Name: "translations"; Description: "Message translations"; Types:
user user32 user64 custom

From @osp@m m@ili@g off @ltfeld-im@de  Sat Nov 10 10:35:21 2018
From: @osp@m m@ili@g off @ltfeld-im@de (@osp@m m@ili@g off @ltfeld-im@de)
Date: Sat, 10 Nov 2018 10:35:21 +0100
Subject: [Rd] Problem building rmarkdown vignettes with child
In-Reply-To: <CAAjnpdjq-s2AmvBv8qXHJjp57mR7e+Pz23m1iB21-KoihS1BbQ@mail.gmail.com>
References: <CAAjnpdjq-s2AmvBv8qXHJjp57mR7e+Pz23m1iB21-KoihS1BbQ@mail.gmail.com>
Message-ID: <2243c2db21b95cf567d51a966f8e9cfdbf1d093e.camel@altfeld-im.de>

Which R version are you using to produce the problem?

A few first indications:

- The regex in ".install_extras" does not match your file endings: Change "Rmd_tmp$" into "Rmd_t$"

- Try "output: rmarkdown::html_vignette" instead of "output: html_document"
  in the header of the file "ABVignetteWithLocalChild.Rmd" (and possibly other "*.Rmd"s)

- Try to specify the child doc name directly in the chunks via "```{r child = "NoBuildVignette.Rmd_t"}"
  instead of "```{r includChild, child = child_docs}"
  Note the possible typo in the tag "includChild" (-> "includeChild"?) (and possibly other "*.Rmd"s)

PS: You can find a working example of child Rmds for a CRAN package here:

https://github.com/aryoda/tryCatchLog/tree/master/vignettes




On Wed, 2018-11-07 at 13:33 +0100, Witold E Wolski wrote:
> Hello,
> 
> This is a problem I posted about already some time ago:
> https://stat.ethz.ch/pipermail/r-devel/2018-September/076786.html
> 
> Finally, I did had some time to create a minimal package to reproduce
> the problem that vignettes with child can not be build.
> https://github.com/wolski/RmarkdownVignetteProblem
> 
> The problem basically is that while all the vignettes can be build by running
> 
> devtools::build_vignettes
> or
> rmarkdown::render
> 
> they will all fail to build when running
> devtools::build()
> or
> R CMD build
> 
> except of the
> ABVignetteWithLocalChild.Rmd
> for which I did apply the workaround suggested by  Duncan in this github issue:
> https://github.com/yihui/knitr/issues/1540
> 
> 
> Best regards
> Witek
> 
> 
>


From jeroen @ending from berkeley@edu  Sat Nov 10 18:17:21 2018
From: jeroen @ending from berkeley@edu (Jeroen Ooms)
Date: Sat, 10 Nov 2018 18:17:21 +0100
Subject: [Rd] Change windows installer default to only install 64 bit R
In-Reply-To: <CAD6tx95qZnmj3c211ePB4+BLj-BoP8rHUFZ_zMkgZXQu9jOx7g@mail.gmail.com>
References: <CAD6tx95qZnmj3c211ePB4+BLj-BoP8rHUFZ_zMkgZXQu9jOx7g@mail.gmail.com>
Message-ID: <CABFfbXt5PTaFTKAApDns6tPotXLWbv7ufsboUthHxvJyNFUvaA@mail.gmail.com>

On Fri, Nov 9, 2018 at 5:47 PM Jim Hester <james.f.hester at gmail.com> wrote:
> We can remove much of this ambiguity by changing the default choice in
> the installer to only install the 64 bit version in the installer. If
> users do need the 32 bit version it is still simple for them to
> install it by checking the appropriate box during installation.

I tested the patch and confirm that this works as intended. By
default, the R installer will leave the "32-bit Files" unchecked on
Windows 64 machines.

I also think this proposal makes sense. Most users do not need 2
versions of R on their machine, and it is a common source of problems.
I agree with Jim that installing the 32bit version of R on 64bit
Windows would better be opt-in rather than default.


From will@l@nd@u @ending from gm@il@com  Sun Nov 11 23:32:37 2018
From: will@l@nd@u @ending from gm@il@com (Will L)
Date: Sun, 11 Nov 2018 17:32:37 -0500
Subject: [Rd] Patch idea: an environment variable for setting the user ID
Message-ID: <CAC-MUvuBmqs31FX2Hv6w2RD7H7bmwXbV9kdWEEHVmzKLZvK+aA@mail.gmail.com>

To R-devel,


In `R CMD build`, the ID of the user is automatically inserted into the
DESCRIPTION file, e.g.

Packaged: 2018-11-06 14:01:50 UTC; <MY USER ID>


This is problematic for those of us who work in corporate settings. We must
not divulge our user IDs in the packages we develop and release.

Jim Hester pointed out that these two lines in
`add_build_stamp_to_description_file()`
<https://github.com/wch/r-source/blob/521c90a175d67475b9f1b43d7ae68bc48062d8e6/src/library/tools/R/build.R#L170-L171>
are responsible. Could we consider his suggestion of using an optional
environment variable to overwrite the default behavior?

user <- Sys.getenv("R_BUILD_USERNAME")
if (!nzchar(user)) user <- Sys.info()["user"]
if(user == "unknown") user <- Sys.getenv("LOGNAME")

Will Landau
-- 
wlandau.github.io
linkedin.com/in/wlandau
github.com/wlandau

	[[alternative HTML version deleted]]


From Kurt@Hornik @ending from wu@@c@@t  Mon Nov 12 08:46:20 2018
From: Kurt@Hornik @ending from wu@@c@@t (Kurt Hornik)
Date: Mon, 12 Nov 2018 08:46:20 +0100
Subject: [Rd] 
 Patch idea: an environment variable for setting the user ID
In-Reply-To: <CAC-MUvuBmqs31FX2Hv6w2RD7H7bmwXbV9kdWEEHVmzKLZvK+aA@mail.gmail.com>
References: <CAC-MUvuBmqs31FX2Hv6w2RD7H7bmwXbV9kdWEEHVmzKLZvK+aA@mail.gmail.com>
Message-ID: <23529.12236.875063.74972@hornik.net>

>>>>> Will L writes:

> To R-devel,
> In `R CMD build`, the ID of the user is automatically inserted into the
> DESCRIPTION file, e.g.

> Packaged: 2018-11-06 14:01:50 UTC; <MY USER ID>


> This is problematic for those of us who work in corporate settings. We must
> not divulge our user IDs in the packages we develop and release.

> Jim Hester pointed out that these two lines in
> `add_build_stamp_to_description_file()`
> <https://github.com/wch/r-source/blob/521c90a175d67475b9f1b43d7ae68bc48062d8e6/src/library/tools/R/build.R#L170-L171>
> are responsible. Could we consider his suggestion of using an optional
> environment variable to overwrite the default behavior?

> user <- Sys.getenv("R_BUILD_USERNAME")
> if (!nzchar(user)) user <- Sys.info()["user"]
> if(user == "unknown") user <- Sys.getenv("LOGNAME")

Yep, something along these lines should be possible.
R_BUILD_USER or R_BUILD_LOGNAME may seem more natural though ...

Best
-k



> Will Landau
> -- 
> wlandau.github.io
> linkedin.com/in/wlandau
> github.com/wlandau

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@liber@ @ending from gm@il@com  Mon Nov 12 12:17:43 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Mon, 12 Nov 2018 12:17:43 +0100
Subject: [Rd] error unserializing ascii format (v2 or v3)
In-Reply-To: <D15639B9-06F7-4EE2-A075-5C44FC86FBAA@gmail.com>
References: <CAHPe-e-QwCV7Q3O4nqtFt0VfSDQbsx8BoSekG8FsigE7-vnqbw@mail.gmail.com>
 <D15639B9-06F7-4EE2-A075-5C44FC86FBAA@gmail.com>
Message-ID: <434cb6b0-23ff-51b5-2bff-718cd3a16a96@gmail.com>

Thanks, fixed in R-devel and R-patched.

The problem was only in unserializing of raw vectors serialized in 
ASCII, the format is not affected. Old serialized ASCII files created by 
R 3.5 or earlier can be read in R-patched and re-saved in binary format, 
which can in turn be read in R 3.5 and earlier. 
Serialization/unserialization in binary format is not affected by this 
problem.

Best
Tomas

On 11/8/18 11:41 AM, peter dalgaard wrote:
> I see this on MacOS as well, so likely not platform dependent.
>
> A little more diddling to try to narrow it down:
>
>> unserialize(serialize(as.raw(1), NULL, version=2, ascii=TRUE))
> [1] 30
>> unserialize(serialize(list(as.raw(1)), NULL, version=2, ascii=TRUE))
> [[1]]
> [1] 30
>
>> unserialize(serialize(list(raw=as.raw(1)), NULL, version=2, ascii=TRUE))
> Error in unserialize(serialize(list(raw = as.raw(1)), NULL, version = 2,  :
>    'installTrChar' must be called on a CHARSXP, but got 'pairlist'
>> unserialize(serialize(list(r=as.raw(1)), NULL, version=2, ascii=TRUE))
> Error in unserialize(serialize(list(r = as.raw(1)), NULL, version = 2,  :
>    'installTrChar' must be called on a CHARSXP, but got 'pairlist'
>> unserialize(serialize(list(r=1), NULL, version=2, ascii=TRUE))
> $r
> [1] 1
>
>> unserialize(serialize(list(as.raw(c(1,2))), NULL, version=2, ascii=TRUE))
> [[1]]
> [1] 30 31
>
>
> So it looks like there is an issue with reading a named list containing a raw vector. Unnamed lists work and so does non-raw vectors. The length of the vector doesn't seem to matter and neither does the actual name.
>
> You can vary the error message by varying the entries in the vector, but the gist of it is that something gets misinterpreted and the rest of the data stop making sense.
>
> I also tried going explicitly through a text connection, and that seems exactly equivalent.
>
> -pd
>
>> On 7 Nov 2018, at 23:35 , Michael Sannella via R-devel <r-devel at r-project.org> wrote:
>>
>> I ran into an interesting error unserializing a file created with
>> ascii=TRUE:
>>
>> R 3.5.1 (Windows or Linux):
>>> unserialize(serialize(list(raw=as.raw(c(39,41))), NULL, version=2,
>> ascii=TRUE))
>>     Error in unserialize(serialize(list(raw = as.raw(c(39, 41))), NULL,
>> version = 2,  :
>>       ReadItem: unknown type 29, perhaps written by later version of R
>>
>> The same error happens when the serialization is done with version=2
>> or version=3.  It does not happen if the serialization is done with
>> ascii=FALSE.
>>
>> Note that 0x29 == 41.  It looks like unserialize is reading the wrong
>> line.
>>
>> I tried this in earlier versions of R on Windows, and the same error
>> happens in every version from R-2.15.3 (the earliest I have) on up.
>>
>>   ~~ Michael Sannella
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From thom@@p85 @ending from gm@il@com  Mon Nov 12 14:09:32 2018
From: thom@@p85 @ending from gm@il@com (Thomas Lin Pedersen)
Date: Mon, 12 Nov 2018 14:09:32 +0100
Subject: [Rd] Better cleanup of example session during check
Message-ID: <39022329-7000-4081-812E-4A5887A33115@gmail.com>

I have a couple of packages (?fiery? and ?reqres') that uses a mock of a rook request for their examples. The mock is an R6 object containing a rawConnection, along with a finalizer that closes this connection when the object is removed. So far so good. I?ve recently been getting CRAN errors due to the rawConnection not being closed in examples

> cleanEx()
Error: connections left open:
	content (rawConnection)

and the only way to remove this is by removing the objects and calling gc() as part of the example code. While it is possible to hide all that inside a \dontshow{} block, it appears to me that it would be better if cleanEx() did a cleaning of the environment along with a single gc call prior to performing any checks on the end state. Is this something you would consider?

best
Thomas Lin Pedersen
	[[alternative HTML version deleted]]


From murdoch@dunc@n @ending from gm@il@com  Mon Nov 12 14:32:49 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Mon, 12 Nov 2018 08:32:49 -0500
Subject: [Rd] Better cleanup of example session during check
In-Reply-To: <39022329-7000-4081-812E-4A5887A33115@gmail.com>
References: <39022329-7000-4081-812E-4A5887A33115@gmail.com>
Message-ID: <22caaa89-d5dd-17eb-c9e0-001741ca052c@gmail.com>

On 12/11/2018 8:09 AM, Thomas Lin Pedersen wrote:
> I have a couple of packages (?fiery? and ?reqres') that uses a mock of a rook request for their examples. The mock is an R6 object containing a rawConnection, along with a finalizer that closes this connection when the object is removed. So far so good. I?ve recently been getting CRAN errors due to the rawConnection not being closed in examples
> 
>> cleanEx()
> Error: connections left open:
> 	content (rawConnection)
> 
> and the only way to remove this is by removing the objects and calling gc() as part of the example code. While it is possible to hide all that inside a \dontshow{} block, it appears to me that it would be better if cleanEx() did a cleaning of the environment along with a single gc call prior to performing any checks on the end state. Is this something you would consider?

Wouldn't it be possible for you to add a way to explicitly request the 
connection be closed?  Then the finalizer would only need to close it if 
you forgot.


> best
> Thomas Lin Pedersen
> 	[[alternative HTML version deleted]]

This message was fine, but sometimes posting in HTML makes your message 
unreadable.  This list wants plain text.

Duncan Murdoch


From murdoch@dunc@n @ending from gm@il@com  Mon Nov 12 15:56:40 2018
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Mon, 12 Nov 2018 09:56:40 -0500
Subject: [Rd] Better cleanup of example session during check
In-Reply-To: <22caaa89-d5dd-17eb-c9e0-001741ca052c@gmail.com>
References: <39022329-7000-4081-812E-4A5887A33115@gmail.com>
 <22caaa89-d5dd-17eb-c9e0-001741ca052c@gmail.com>
Message-ID: <f91d1160-c70d-9dfe-1269-c963f6a2e138@gmail.com>

On 12/11/2018 8:32 AM, Duncan Murdoch wrote:
> On 12/11/2018 8:09 AM, Thomas Lin Pedersen wrote:
>> I have a couple of packages (?fiery? and ?reqres') that uses a mock of a rook request for their examples. The mock is an R6 object containing a rawConnection, along with a finalizer that closes this connection when the object is removed. So far so good. I?ve recently been getting CRAN errors due to the rawConnection not being closed in examples
>>
>>> cleanEx()
>> Error: connections left open:
>> 	content (rawConnection)
>>
>> and the only way to remove this is by removing the objects and calling gc() as part of the example code. While it is possible to hide all that inside a \dontshow{} block, it appears to me that it would be better if cleanEx() did a cleaning of the environment along with a single gc call prior to performing any checks on the end state. Is this something you would consider?
> 
> Wouldn't it be possible for you to add a way to explicitly request the
> connection be closed?  Then the finalizer would only need to close it if
> you forgot.
> 

After some private messages, it appears that having the example code 
explicitly remove the object is enough to satisfy the check.  Presumably 
this is because a garbage collection is happening before the error is 
issued, and it triggers the finalizer.

Duncan Murdoch


From @zcfweiy@ @ending from gm@il@com  Mon Nov 12 17:35:09 2018
From: @zcfweiy@ @ending from gm@il@com (ya wei)
Date: Tue, 13 Nov 2018 00:35:09 +0800
Subject: [Rd] redundant "`" symbol in the name of list (R version 3.5.0 &
 3.5.1)
Message-ID: <CADFcgG2_BXmP86VaT3V-Uh_7RKbLd1xk+B061iYG58=9kGa_4g@mail.gmail.com>

Dear R devel Team,

There might be a bug in the function "list" for R version 3.5.0 & 3.5.1.
For the toy example

```
> list(c=2, d=3)
```

The output is

```
$`c`
[1] 2

$d
[1] 3
```

The name of the first variable "c" would come with a redundant "`" symbol.
I also have tested it on some older R versions, say 3.4.4, it turns out to
be OK, no redundant "`" symbol.


I am looking forward to your reply.


Best,
Fans of R

	[[alternative HTML version deleted]]


From tom@@@k@liber@ @ending from gm@il@com  Tue Nov 13 11:12:53 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Tue, 13 Nov 2018 11:12:53 +0100
Subject: [Rd] 
 redundant "`" symbol in the name of list (R version 3.5.0 & 3.5.1)
In-Reply-To: <CADFcgG2_BXmP86VaT3V-Uh_7RKbLd1xk+B061iYG58=9kGa_4g@mail.gmail.com>
References: <CADFcgG2_BXmP86VaT3V-Uh_7RKbLd1xk+B061iYG58=9kGa_4g@mail.gmail.com>
Message-ID: <fce82733-121f-238b-1175-950b9161b490@gmail.com>

Thanks for the report, but please note this bug has already been 
reported (PR#17447). It is a Windows/RGui specific bug and has already 
been fixed in R-devel. I will see if it could also be ported to R-patched.

Best,
Tomas

On 11/12/18 5:35 PM, ya wei wrote:
> Dear R devel Team,
>
> There might be a bug in the function "list" for R version 3.5.0 & 3.5.1.
> For the toy example
>
> ```
>> list(c=2, d=3)
> ```
>
> The output is
>
> ```
> $`c`
> [1] 2
>
> $d
> [1] 3
> ```
>
> The name of the first variable "c" would come with a redundant "`" symbol.
> I also have tested it on some older R versions, say 3.4.4, it turns out to
> be OK, no redundant "`" symbol.
>
>
> I am looking forward to your reply.
>
>
> Best,
> Fans of R
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@liber@ @ending from gm@il@com  Tue Nov 13 19:41:16 2018
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Tue, 13 Nov 2018 19:41:16 +0100
Subject: [Rd] 
 redundant "`" symbol in the name of list (R version 3.5.0 & 3.5.1)
In-Reply-To: <fce82733-121f-238b-1175-950b9161b490@gmail.com>
References: <CADFcgG2_BXmP86VaT3V-Uh_7RKbLd1xk+B061iYG58=9kGa_4g@mail.gmail.com>
 <fce82733-121f-238b-1175-950b9161b490@gmail.com>
Message-ID: <ea88d893-426d-2b0b-b6b4-ccec49e706ab@gmail.com>

Now also fixed in R-patched.

Best,
Tomas

On 11/13/18 11:12 AM, Tomas Kalibera wrote:
> Thanks for the report, but please note this bug has already been 
> reported (PR#17447). It is a Windows/RGui specific bug and has already 
> been fixed in R-devel. I will see if it could also be ported to 
> R-patched.
>
> Best,
> Tomas
>
> On 11/12/18 5:35 PM, ya wei wrote:
>> Dear R devel Team,
>>
>> There might be a bug in the function "list" for R version 3.5.0 & 3.5.1.
>> For the toy example
>>
>> ```
>>> list(c=2, d=3)
>> ```
>>
>> The output is
>>
>> ```
>> $`c`
>> [1] 2
>>
>> $d
>> [1] 3
>> ```
>>
>> The name of the first variable "c" would come with a redundant "`" 
>> symbol.
>> I also have tested it on some older R versions, say 3.4.4, it turns 
>> out to
>> be OK, no redundant "`" symbol.
>>
>>
>> I am looking forward to your reply.
>>
>>
>> Best,
>> Fans of R
>>
>> ????[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From m@@nnell @ending from tibco@com  Fri Nov 16 00:13:03 2018
From: m@@nnell @ending from tibco@com (Michael Sannella)
Date: Thu, 15 Nov 2018 15:13:03 -0800
Subject: [Rd] STRING_IS_SORTED claims as.character(1:100) is sorted
Message-ID: <CAHPe-e_81PU8SyN9VNAimsC-PuWx3VYoVrKAyivg_bHe8cLbeg@mail.gmail.com>

If I have loaded the C code:
    SEXP altrep_STRING_IS_SORTED(SEXP x)
    {
        return ScalarInteger(STRING_IS_SORTED(x));
    }
and defined the function:
    issort <- function(x) .Call("altrep_STRING_IS_SORTED",x)

I am seeing the following results in R 3.5.1/Linux:
    > issort(LETTERS)
    [1] NA
    > issort(as.character(1:100))  ## should return NA
    [1] 1
    > issort(as.character(100:1))  ## should return NA
    [1] -1
    > issort(as.character(1:100+1L))
    [1] NA

issort(as.character(1:100)) should return NA, since the string vector
"1","2",..."10",... is not sorted.  I suspect that the problem is that
the Is_sorted method for deferred_string is just calling the Is_sorted
method for the source object 1:100 (which _is_ a sorted integer
vector).  It should probably just return NA for any source object.

  ~~ Michael Sannella

	[[alternative HTML version deleted]]


From luke-tierney @ending from uiow@@edu  Fri Nov 16 15:34:55 2018
From: luke-tierney @ending from uiow@@edu (Tierney, Luke)
Date: Fri, 16 Nov 2018 14:34:55 +0000
Subject: [Rd] STRING_IS_SORTED claims as.character(1:100) is sorted
In-Reply-To: <CAHPe-e_81PU8SyN9VNAimsC-PuWx3VYoVrKAyivg_bHe8cLbeg@mail.gmail.com>
References: <CAHPe-e_81PU8SyN9VNAimsC-PuWx3VYoVrKAyivg_bHe8cLbeg@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1811160833140.3050@luke-Latitude-7480>

Thanks. Fixed in R_devel and R-patched. [STRING_IS_SORTED was not yet
used anywhere so this did not affect any computations.]

Best,

luke

On Thu, 15 Nov 2018, Michael Sannella via R-devel wrote:

> If I have loaded the C code:
>    SEXP altrep_STRING_IS_SORTED(SEXP x)
>    {
>        return ScalarInteger(STRING_IS_SORTED(x));
>    }
> and defined the function:
>    issort <- function(x) .Call("altrep_STRING_IS_SORTED",x)
>
> I am seeing the following results in R 3.5.1/Linux:
>    > issort(LETTERS)
>    [1] NA
>    > issort(as.character(1:100))  ## should return NA
>    [1] 1
>    > issort(as.character(100:1))  ## should return NA
>    [1] -1
>    > issort(as.character(1:100+1L))
>    [1] NA
>
> issort(as.character(1:100)) should return NA, since the string vector
> "1","2",..."10",... is not sorted.  I suspect that the problem is that
> the Is_sorted method for deferred_string is just calling the Is_sorted
> method for the source object 1:100 (which _is_ a sorted integer
> vector).  It should probably just return NA for any source object.
>
>  ~~ Michael Sannella
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From g@bembecker @ending from gm@il@com  Fri Nov 16 02:01:16 2018
From: g@bembecker @ending from gm@il@com (Gabriel Becker)
Date: Thu, 15 Nov 2018 17:01:16 -0800
Subject: [Rd] STRING_IS_SORTED claims as.character(1:100) is sorted
In-Reply-To: <CAHPe-e_81PU8SyN9VNAimsC-PuWx3VYoVrKAyivg_bHe8cLbeg@mail.gmail.com>
References: <CAHPe-e_81PU8SyN9VNAimsC-PuWx3VYoVrKAyivg_bHe8cLbeg@mail.gmail.com>
Message-ID: <CAD4oTHE6jmX1eqNafevKYOAXVknC9R-ZwdujGdnhVSUdA4onpQ@mail.gmail.com>

Thank you for the report. We will look at this and make sure it gets fixed.

~G


On Thu, Nov 15, 2018, 3:13 PM Michael Sannella via R-devel <
r-devel at r-project.org> wrote:

> If I have loaded the C code:
>     SEXP altrep_STRING_IS_SORTED(SEXP x)
>     {
>         return ScalarInteger(STRING_IS_SORTED(x));
>     }
> and defined the function:
>     issort <- function(x) .Call("altrep_STRING_IS_SORTED",x)
>
> I am seeing the following results in R 3.5.1/Linux:
>     > issort(LETTERS)
>     [1] NA
>     > issort(as.character(1:100))  ## should return NA
>     [1] 1
>     > issort(as.character(100:1))  ## should return NA
>     [1] -1
>     > issort(as.character(1:100+1L))
>     [1] NA
>
> issort(as.character(1:100)) should return NA, since the string vector
> "1","2",..."10",... is not sorted.  I suspect that the problem is that
> the Is_sorted method for deferred_string is just calling the Is_sorted
> method for the source object 1:100 (which _is_ a sorted integer
> vector).  It should probably just return NA for any source object.
>
>   ~~ Michael Sannella
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From thierry@onkelinx @ending from inbo@be  Tue Nov 20 14:16:20 2018
From: thierry@onkelinx @ending from inbo@be (Thierry Onkelinx)
Date: Tue, 20 Nov 2018 14:16:20 +0100
Subject: [Rd] problematic dev.off() after running examples without plots
Message-ID: <CAJuCY5yA17yMrYqbcaih5BubeV0dWzR5sgeo=aSgb2z90nTo-w@mail.gmail.com>

Dear all,

When running R CMD check on our package, we get an error on the examples.

Error in grDevices::dev.off() :
     cannot shut down device 1 (the null device)

None of the examples in our package generates plots. grDevices::dev.off()
is code added by R CMD check. A workaround is to have at least one example
which has some plot. Is there a better solution? We are using R 3.5.1

Best regards,

ir. Thierry Onkelinx
Statisticus / Statistician

Vlaamse Overheid / Government of Flanders
INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
FOREST
Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
thierry.onkelinx at inbo.be
Havenlaan 88 bus 73, 1000 Brussel
www.inbo.be

///////////////////////////////////////////////////////////////////////////////////////////
To call in the statistician after the experiment is done may be no more
than asking him to perform a post-mortem examination: he may be able to say
what the experiment died of. ~ Sir Ronald Aylmer Fisher
The plural of anecdote is not data. ~ Roger Brinner
The combination of some data and an aching desire for an answer does not
ensure that a reasonable answer can be extracted from a given body of data.
~ John Tukey
///////////////////////////////////////////////////////////////////////////////////////////

<https://www.inbo.be>

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Wed Nov 21 10:44:47 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 21 Nov 2018 10:44:47 +0100
Subject: [Rd] problematic dev.off() after running examples without plots
In-Reply-To: <CAJuCY5yA17yMrYqbcaih5BubeV0dWzR5sgeo=aSgb2z90nTo-w@mail.gmail.com>
References: <CAJuCY5yA17yMrYqbcaih5BubeV0dWzR5sgeo=aSgb2z90nTo-w@mail.gmail.com>
Message-ID: <23541.10511.509933.39426@stat.math.ethz.ch>

>>>>> Thierry Onkelinx via R-devel 
>>>>>     on Tue, 20 Nov 2018 14:16:20 +0100 writes:

    > Dear all, When running R CMD check on our package, we get
    > an error on the examples.

    > Error in grDevices::dev.off() : 
    >  cannot shut down device 1 (the null device)

    > None of the examples in our package generates
    > plots. grDevices::dev.off() is code added by R CMD
    > check. 

Yes, but there's also code added at the very beginning of the
examples R script ( <pkg>-Ex.R ) which opens a pdf device:

  grDevices::pdf.options(width = 7, height = 7, paper = "special", reset = TRUE)
  grDevices::pdf(paste(pkgname, "-Ex.pdf", sep=""), encoding = "ISOLatin1")

and so things should work and do work well for packages without any plots.

You must be doing something particularly strange in some of *your*
examples such as closing all existing devices -- something you should not do:

As a good citizen you close graphic devices that you open but not others.

    > A workaround is to have at least one example which
    > has some plot. Is there a better solution? 

Yes, find the example in your package which does the above
"strange thing" and modify that.

Best,
Martin Maechler
ETH Zurich and R Core Team


    > We are using R 3.5.1

    > Best regards,

    > ir. Thierry Onkelinx Statisticus / Statistician

    > Vlaamse Overheid / Government of Flanders INSTITUUT VOOR
    > NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE
    > AND FOREST Team Biometrie & Kwaliteitszorg / Team
    > Biometrics & Quality Assurance thierry.onkelinx at inbo.be
    > Havenlaan 88 bus 73, 1000 Brussel www.inbo.be

    > ///////////////////////////////////////////////////////////////////////////////////////////
    > To call in the statistician after the experiment is done
    > may be no more than asking him to perform a post-mortem
    > examination: he may be able to say what the experiment
    > died of. ~ Sir Ronald Aylmer Fisher The plural of anecdote
    > is not data. ~ Roger Brinner The combination of some data
    > and an aching desire for an answer does not ensure that a
    > reasonable answer can be extracted from a given body of
    > data.  ~ John Tukey
    > ///////////////////////////////////////////////////////////////////////////////////////////

    > <https://www.inbo.be>

    > 	[[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From thierry@onkelinx @ending from inbo@be  Wed Nov 21 11:30:29 2018
From: thierry@onkelinx @ending from inbo@be (Thierry Onkelinx)
Date: Wed, 21 Nov 2018 11:30:29 +0100
Subject: [Rd] problematic dev.off() after running examples without plots
In-Reply-To: <23541.10511.509933.39426@stat.math.ethz.ch>
References: <CAJuCY5yA17yMrYqbcaih5BubeV0dWzR5sgeo=aSgb2z90nTo-w@mail.gmail.com>
 <23541.10511.509933.39426@stat.math.ethz.ch>
Message-ID: <CAJuCY5y=v65YOrxob4JZBs6oWJtHFmsDPZuB24dpNhnMRmJOgw@mail.gmail.com>

Dear Martin,

Thanks for the feedback. After some more digging, I found that the problem
was caused by a function which we imported from another package. That
function closes open devices as a side-effect.

Best regards,

ir. Thierry Onkelinx
Statisticus / Statistician

Vlaamse Overheid / Government of Flanders
INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
FOREST
Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
thierry.onkelinx at inbo.be
Havenlaan 88 bus 73, 1000 Brussel
www.inbo.be

///////////////////////////////////////////////////////////////////////////////////////////
To call in the statistician after the experiment is done may be no more
than asking him to perform a post-mortem examination: he may be able to say
what the experiment died of. ~ Sir Ronald Aylmer Fisher
The plural of anecdote is not data. ~ Roger Brinner
The combination of some data and an aching desire for an answer does not
ensure that a reasonable answer can be extracted from a given body of data.
~ John Tukey
///////////////////////////////////////////////////////////////////////////////////////////

<https://www.inbo.be>


Op wo 21 nov. 2018 om 10:47 schreef Martin Maechler <
maechler at stat.math.ethz.ch>:

> >>>>> Thierry Onkelinx via R-devel
> >>>>>     on Tue, 20 Nov 2018 14:16:20 +0100 writes:
>
>     > Dear all, When running R CMD check on our package, we get
>     > an error on the examples.
>
>     > Error in grDevices::dev.off() :
>     >  cannot shut down device 1 (the null device)
>
>     > None of the examples in our package generates
>     > plots. grDevices::dev.off() is code added by R CMD
>     > check.
>
> Yes, but there's also code added at the very beginning of the
> examples R script ( <pkg>-Ex.R ) which opens a pdf device:
>
>   grDevices::pdf.options(width = 7, height = 7, paper = "special", reset =
> TRUE)
>   grDevices::pdf(paste(pkgname, "-Ex.pdf", sep=""), encoding = "ISOLatin1")
>
> and so things should work and do work well for packages without any plots.
>
> You must be doing something particularly strange in some of *your*
> examples such as closing all existing devices -- something you should not
> do:
>
> As a good citizen you close graphic devices that you open but not others.
>
>     > A workaround is to have at least one example which
>     > has some plot. Is there a better solution?
>
> Yes, find the example in your package which does the above
> "strange thing" and modify that.
>
> Best,
> Martin Maechler
> ETH Zurich and R Core Team
>
>
>     > We are using R 3.5.1
>
>     > Best regards,
>
>     > ir. Thierry Onkelinx Statisticus / Statistician
>
>     > Vlaamse Overheid / Government of Flanders INSTITUUT VOOR
>     > NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE
>     > AND FOREST Team Biometrie & Kwaliteitszorg / Team
>     > Biometrics & Quality Assurance thierry.onkelinx at inbo.be
>     > Havenlaan 88 bus 73, 1000 Brussel www.inbo.be
>
>     >
> ///////////////////////////////////////////////////////////////////////////////////////////
>     > To call in the statistician after the experiment is done
>     > may be no more than asking him to perform a post-mortem
>     > examination: he may be able to say what the experiment
>     > died of. ~ Sir Ronald Aylmer Fisher The plural of anecdote
>     > is not data. ~ Roger Brinner The combination of some data
>     > and an aching desire for an answer does not ensure that a
>     > reasonable answer can be extracted from a given body of
>     > data.  ~ John Tukey
>     >
> ///////////////////////////////////////////////////////////////////////////////////////////
>
>     > <https://www.inbo.be>
>
>     >   [[alternative HTML version deleted]]
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @eliv@nov@dmitriy @ending from gm@il@com  Wed Nov 21 17:51:54 2018
From: @eliv@nov@dmitriy @ending from gm@il@com (Dmitriy Selivanov)
Date: Wed, 21 Nov 2018 20:51:54 +0400
Subject: [Rd] Subsetting row in single column matrix drops names in
 resulting vector
Message-ID: <CAJdZCv0qGoOG6a0V1uzg7tgDRQUjkzn4We=tkb_N1770nr+MHg@mail.gmail.com>

Hello here. I'm struggling to understand R's subsetting behavior in couple
of edge cases - subsetting row in a single column matrix and subsetting
column in a single row matrix. I've read R's docs several times and haven't
found answer.

Consider following example:

a = matrix(1:2, nrow = 2, dimnames = list(c("row1", "row2"), c("col1")))
a[1, ]
# 1

It returns *unnamed* vector `1` where I would expect named vector. In fact
it returns named vector when number of columns is > 1.
Same issue applicable to single row matrix. Is it a bug? looks very
counterintuitive.


-- 
Regards
Dmitriy Selivanov

	[[alternative HTML version deleted]]


From ruipb@rr@d@@ @ending from @@po@pt  Wed Nov 21 17:54:07 2018
From: ruipb@rr@d@@ @ending from @@po@pt (Rui Barradas)
Date: Wed, 21 Nov 2018 16:54:07 +0000
Subject: [Rd] Subsetting row in single column matrix drops names in
 resulting vector
In-Reply-To: <CAJdZCv0qGoOG6a0V1uzg7tgDRQUjkzn4We=tkb_N1770nr+MHg@mail.gmail.com>
References: <CAJdZCv0qGoOG6a0V1uzg7tgDRQUjkzn4We=tkb_N1770nr+MHg@mail.gmail.com>
Message-ID: <4e29953f-7542-c4b1-ffd3-fa32d857f715@sapo.pt>

Hello,

Use drop = FALSE.

a[1, , drop = FALSE]
#     col1
#row1    1


Hope this helps,

Rui Barradas

?s 16:51 de 21/11/2018, Dmitriy Selivanov escreveu:
> Hello here. I'm struggling to understand R's subsetting behavior in couple
> of edge cases - subsetting row in a single column matrix and subsetting
> column in a single row matrix. I've read R's docs several times and haven't
> found answer.
> 
> Consider following example:
> 
> a = matrix(1:2, nrow = 2, dimnames = list(c("row1", "row2"), c("col1")))
> a[1, ]
> # 1
> 
> It returns *unnamed* vector `1` where I would expect named vector. In fact
> it returns named vector when number of columns is > 1.
> Same issue applicable to single row matrix. Is it a bug? looks very
> counterintuitive.
> 
>


From @eliv@nov@dmitriy @ending from gm@il@com  Wed Nov 21 17:58:12 2018
From: @eliv@nov@dmitriy @ending from gm@il@com (Dmitriy Selivanov)
Date: Wed, 21 Nov 2018 20:58:12 +0400
Subject: [Rd] Subsetting row in single column matrix drops names in
 resulting vector
In-Reply-To: <4e29953f-7542-c4b1-ffd3-fa32d857f715@sapo.pt>
References: <CAJdZCv0qGoOG6a0V1uzg7tgDRQUjkzn4We=tkb_N1770nr+MHg@mail.gmail.com>
 <4e29953f-7542-c4b1-ffd3-fa32d857f715@sapo.pt>
Message-ID: <CAJdZCv3YC++9uonxm9LjuEx7E-ocAav-bpcwXqL9HMzJoPFyYA@mail.gmail.com>

Hi Rui. Thanks for answer, I'm aware of drop = FALSE option. Unfortunately
it doesn't resolve the issue - I'm expecting to get a vector, not a matrix .

??, 21 ????. 2018 ?. ? 20:54, Rui Barradas <ruipbarradas at sapo.pt>:

> Hello,
>
> Use drop = FALSE.
>
> a[1, , drop = FALSE]
> #     col1
> #row1    1
>
>
> Hope this helps,
>
> Rui Barradas
>
> ?s 16:51 de 21/11/2018, Dmitriy Selivanov escreveu:
> > Hello here. I'm struggling to understand R's subsetting behavior in
> couple
> > of edge cases - subsetting row in a single column matrix and subsetting
> > column in a single row matrix. I've read R's docs several times and
> haven't
> > found answer.
> >
> > Consider following example:
> >
> > a = matrix(1:2, nrow = 2, dimnames = list(c("row1", "row2"), c("col1")))
> > a[1, ]
> > # 1
> >
> > It returns *unnamed* vector `1` where I would expect named vector. In
> fact
> > it returns named vector when number of columns is > 1.
> > Same issue applicable to single row matrix. Is it a bug? looks very
> > counterintuitive.
> >
> >
>


-- 
Regards
Dmitriy Selivanov

	[[alternative HTML version deleted]]


From @purdle@@ @ending from gm@il@com  Thu Nov 22 05:08:10 2018
From: @purdle@@ @ending from gm@il@com (Abs Spurdle)
Date: Thu, 22 Nov 2018 17:08:10 +1300
Subject: [Rd] Rd2pdf ignores tabs but not trailing spaces
Message-ID: <CAB8pepxcaNRH+inoCfY_ZFEqbw8321GFoceUS4YZ3JOEMYe1+Q@mail.gmail.com>

hi all

R CMD Rd2pdf ignores tabs in the usage section.
However, I just discovered that it doesn't ignore trailing spaces (before
lines).
I'm assuming that the same thing happens when the online man pages are
produced.
I didn't check what happens in the examples section.

I think it would be better if tabs were recognized.
However, if not, then I think that R CMD check should generate a note or a
warning if tabs are ignored, encouraging package maintainers to use spaces.

Otherwise, the formatting of the man pages is incorrect.
I've made this mistake which is currently easy to do.


kind regards
Abs

	[[alternative HTML version deleted]]


From emil@bode @ending from d@n@@kn@w@nl  Thu Nov 22 14:47:19 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Thu, 22 Nov 2018 13:47:19 +0000
Subject: [Rd] Subsetting row in single column matrix drops names in
 resulting vector
In-Reply-To: <CAJdZCv3YC++9uonxm9LjuEx7E-ocAav-bpcwXqL9HMzJoPFyYA@mail.gmail.com>
References: <CAJdZCv0qGoOG6a0V1uzg7tgDRQUjkzn4We=tkb_N1770nr+MHg@mail.gmail.com>
 <4e29953f-7542-c4b1-ffd3-fa32d857f715@sapo.pt>
 <CAJdZCv3YC++9uonxm9LjuEx7E-ocAav-bpcwXqL9HMzJoPFyYA@mail.gmail.com>
Message-ID: <84047FFB-19C7-46B7-80B8-6947DE9E1C65@dans.knaw.nl>

The problem is that the drop is only applied (or not) after the subsetting, so what R does is:
- Getting the subset, which means a 1 x 1 matrix.
- Only then It either returns that as is (when drop=FALSE), or removes ALL dimensions of extent 1, regardless of whether these are rows or columns (or higher dimensions).
And it can't keep any names, because what name should be returned? The name 'row1' is just as valid as 'col1'.
I guess if we could design everything anew, a solution would be to be able to specify something like a[1,,drop='row'], or a[1,,drop=1] to drop the rows but keep columns, and get a vector being equal to 'row1' (which in this case just has length-1, and names 'col1')
That not how it's designed, but you could use 'adrop()' from the 'abind' package:
abind:: adrop(a[1,,drop=FALSE], drop=1) first subsets, then drops the row-dimension, so gives what you're looking for.
Hope this solves your problem.

Best regards, 
Emil Bode
 

?On 21/11/2018, 17:58, "R-devel on behalf of Dmitriy Selivanov" <r-devel-bounces at r-project.org on behalf of selivanov.dmitriy at gmail.com> wrote:

    Hi Rui. Thanks for answer, I'm aware of drop = FALSE option. Unfortunately
    it doesn't resolve the issue - I'm expecting to get a vector, not a matrix .
    
    ??, 21 ????. 2018 ?. ? 20:54, Rui Barradas <ruipbarradas at sapo.pt>:
    
    > Hello,
    >
    > Use drop = FALSE.
    >
    > a[1, , drop = FALSE]
    > #     col1
    > #row1    1
    >
    >
    > Hope this helps,
    >
    > Rui Barradas
    >
    > ?s 16:51 de 21/11/2018, Dmitriy Selivanov escreveu:
    > > Hello here. I'm struggling to understand R's subsetting behavior in
    > couple
    > > of edge cases - subsetting row in a single column matrix and subsetting
    > > column in a single row matrix. I've read R's docs several times and
    > haven't
    > > found answer.
    > >
    > > Consider following example:
    > >
    > > a = matrix(1:2, nrow = 2, dimnames = list(c("row1", "row2"), c("col1")))
    > > a[1, ]
    > > # 1
    > >
    > > It returns *unnamed* vector `1` where I would expect named vector. In
    > fact
    > > it returns named vector when number of columns is > 1.
    > > Same issue applicable to single row matrix. Is it a bug? looks very
    > > counterintuitive.
    > >
    > >
    >
    
    
    -- 
    Regards
    Dmitriy Selivanov
    
    	[[alternative HTML version deleted]]
    
    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel
    

From @okol @ending from in@@-toulou@e@fr  Thu Nov 22 15:34:00 2018
From: @okol @ending from in@@-toulou@e@fr (Serguei Sokol)
Date: Thu, 22 Nov 2018 15:34:00 +0100
Subject: [Rd] Subsetting row in single column matrix drops names in
 resulting vector
In-Reply-To: <84047FFB-19C7-46B7-80B8-6947DE9E1C65@dans.knaw.nl>
References: <CAJdZCv0qGoOG6a0V1uzg7tgDRQUjkzn4We=tkb_N1770nr+MHg@mail.gmail.com>
 <4e29953f-7542-c4b1-ffd3-fa32d857f715@sapo.pt>
 <CAJdZCv3YC++9uonxm9LjuEx7E-ocAav-bpcwXqL9HMzJoPFyYA@mail.gmail.com>
 <84047FFB-19C7-46B7-80B8-6947DE9E1C65@dans.knaw.nl>
Message-ID: <4fe1af45-bb02-1b5a-0c5e-6c71c5352bf6@insa-toulouse.fr>

Le 22/11/2018 ? 14:47, Emil Bode a ?crit?:
> The problem is that the drop is only applied (or not) after the subsetting, so what R does is:
> - Getting the subset, which means a 1 x 1 matrix.
> - Only then It either returns that as is (when drop=FALSE), or removes ALL dimensions of extent 1, regardless of whether these are rows or columns (or higher dimensions).
> And it can't keep any names, because what name should be returned? The name 'row1' is just as valid as 'col1'.
If it is the only reason to not return any name in this case, I could 
make a suggestion.
Let return the name corresponding to the index in subsetting request, 
i.e. for a one-column matrix example it would give

names(a[1,])
#"row1"
names(a[2,])
#"row2"

as the indexes 1 and 2 here above corresponds to rows.

Just my 0.02?
Serguei.


> I guess if we could design everything anew, a solution would be to be able to specify something like a[1,,drop='row'], or a[1,,drop=1] to drop the rows but keep columns, and get a vector being equal to 'row1' (which in this case just has length-1, and names 'col1')
> That not how it's designed, but you could use 'adrop()' from the 'abind' package:
> abind:: adrop(a[1,,drop=FALSE], drop=1) first subsets, then drops the row-dimension, so gives what you're looking for.
> Hope this solves your problem.
>
> Best regards,
> Emil Bode
>   
>
> ?On 21/11/2018, 17:58, "R-devel on behalf of Dmitriy Selivanov" <r-devel-bounces at r-project.org on behalf of selivanov.dmitriy at gmail.com> wrote:
>
>      Hi Rui. Thanks for answer, I'm aware of drop = FALSE option. Unfortunately
>      it doesn't resolve the issue - I'm expecting to get a vector, not a matrix .
>      
>      ??, 21 ????. 2018 ?. ? 20:54, Rui Barradas <ruipbarradas at sapo.pt>:
>      
>      > Hello,
>      >
>      > Use drop = FALSE.
>      >
>      > a[1, , drop = FALSE]
>      > #     col1
>      > #row1    1
>      >
>      >
>      > Hope this helps,
>      >
>      > Rui Barradas
>      >
>      > ?s 16:51 de 21/11/2018, Dmitriy Selivanov escreveu:
>      > > Hello here. I'm struggling to understand R's subsetting behavior in
>      > couple
>      > > of edge cases - subsetting row in a single column matrix and subsetting
>      > > column in a single row matrix. I've read R's docs several times and
>      > haven't
>      > > found answer.
>      > >
>      > > Consider following example:
>      > >
>      > > a = matrix(1:2, nrow = 2, dimnames = list(c("row1", "row2"), c("col1")))
>      > > a[1, ]
>      > > # 1
>      > >
>      > > It returns *unnamed* vector `1` where I would expect named vector. In
>      > fact
>      > > it returns named vector when number of columns is > 1.
>      > > Same issue applicable to single row matrix. Is it a bug? looks very
>      > > counterintuitive.
>      > >
>      > >
>      >
>      
>      
>      --
>      Regards
>      Dmitriy Selivanov
>      
>      	[[alternative HTML version deleted]]
>      
>      ______________________________________________
>      R-devel at r-project.org mailing list
>      https://stat.ethz.ch/mailman/listinfo/r-devel
>      
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


-- 
Serguei Sokol
Ingenieur de recherche INRA

Cellule math?matiques
LISBP, INSA/INRA UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 62 25 01 27
email: sokol at insa-toulouse.fr
http://www.lisbp.fr


From @eliv@nov@dmitriy @ending from gm@il@com  Thu Nov 22 20:28:53 2018
From: @eliv@nov@dmitriy @ending from gm@il@com (Dmitriy Selivanov)
Date: Thu, 22 Nov 2018 23:28:53 +0400
Subject: [Rd] Subsetting row in single column matrix drops names in
 resulting vector
In-Reply-To: <84047FFB-19C7-46B7-80B8-6947DE9E1C65@dans.knaw.nl>
References: <CAJdZCv0qGoOG6a0V1uzg7tgDRQUjkzn4We=tkb_N1770nr+MHg@mail.gmail.com>
 <4e29953f-7542-c4b1-ffd3-fa32d857f715@sapo.pt>
 <CAJdZCv3YC++9uonxm9LjuEx7E-ocAav-bpcwXqL9HMzJoPFyYA@mail.gmail.com>
 <84047FFB-19C7-46B7-80B8-6947DE9E1C65@dans.knaw.nl>
Message-ID: <CAJdZCv2E2tYDU1MT4wb5MAfADy7tWn7811HCJxo=+=WAudXDWA@mail.gmail.com>

Emil, thanks for very nice explanation. Wish base drop would have same
behavior as abind::adrop.

??, 22 ????. 2018 ?., 17:47 Emil Bode emil.bode at dans.knaw.nl:

> The problem is that the drop is only applied (or not) after the
> subsetting, so what R does is:
> - Getting the subset, which means a 1 x 1 matrix.
> - Only then It either returns that as is (when drop=FALSE), or removes ALL
> dimensions of extent 1, regardless of whether these are rows or columns (or
> higher dimensions).
> And it can't keep any names, because what name should be returned? The
> name 'row1' is just as valid as 'col1'.
> I guess if we could design everything anew, a solution would be to be able
> to specify something like a[1,,drop='row'], or a[1,,drop=1] to drop the
> rows but keep columns, and get a vector being equal to 'row1' (which in
> this case just has length-1, and names 'col1')
> That not how it's designed, but you could use 'adrop()' from the 'abind'
> package:
> abind:: adrop(a[1,,drop=FALSE], drop=1) first subsets, then drops the
> row-dimension, so gives what you're looking for.
> Hope this solves your problem.
>
> Best regards,
> Emil Bode
>
>
> ?On 21/11/2018, 17:58, "R-devel on behalf of Dmitriy Selivanov" <
> r-devel-bounces at r-project.org on behalf of selivanov.dmitriy at gmail.com>
> wrote:
>
>     Hi Rui. Thanks for answer, I'm aware of drop = FALSE option.
> Unfortunately
>     it doesn't resolve the issue - I'm expecting to get a vector, not a
> matrix .
>
>     ??, 21 ????. 2018 ?. ? 20:54, Rui Barradas <ruipbarradas at sapo.pt>:
>
>     > Hello,
>     >
>     > Use drop = FALSE.
>     >
>     > a[1, , drop = FALSE]
>     > #     col1
>     > #row1    1
>     >
>     >
>     > Hope this helps,
>     >
>     > Rui Barradas
>     >
>     > ?s 16:51 de 21/11/2018, Dmitriy Selivanov escreveu:
>     > > Hello here. I'm struggling to understand R's subsetting behavior in
>     > couple
>     > > of edge cases - subsetting row in a single column matrix and
> subsetting
>     > > column in a single row matrix. I've read R's docs several times and
>     > haven't
>     > > found answer.
>     > >
>     > > Consider following example:
>     > >
>     > > a = matrix(1:2, nrow = 2, dimnames = list(c("row1", "row2"),
> c("col1")))
>     > > a[1, ]
>     > > # 1
>     > >
>     > > It returns *unnamed* vector `1` where I would expect named vector.
> In
>     > fact
>     > > it returns named vector when number of columns is > 1.
>     > > Same issue applicable to single row matrix. Is it a bug? looks very
>     > > counterintuitive.
>     > >
>     > >
>     >
>
>
>     --
>     Regards
>     Dmitriy Selivanov
>
>         [[alternative HTML version deleted]]
>
>     ______________________________________________
>     R-devel at r-project.org mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

	[[alternative HTML version deleted]]


From ebenedito@ @ending from gm@il@com  Thu Nov 22 23:51:31 2018
From: ebenedito@ @ending from gm@il@com (Ernest Benedito)
Date: Thu, 22 Nov 2018 23:51:31 +0100
Subject: [Rd] [tryExcept] New try Function
Message-ID: <ADFC5C3F-9849-4AF3-86B0-017615152298@gmail.com>

Hi everyone,

When dealing with errors, sometimes I want to run a bunch of code when an error occurs.
For now I usually use a structure such as:

res <- tryCatch(expr, error = function(cond) cond) # or try(expr)

if (inherits(res, ?error?)) # or inherits(res, ?try-error?)
  # a bunch of code

I though it would be useful to have a function that does this naturally, so I came up with the attached function.

I would be glad to hear your insights and if you think it would make sense to add this function to R.

Best regards,
Ernest

From emil@bode @ending from d@n@@kn@w@nl  Fri Nov 23 13:17:06 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Fri, 23 Nov 2018 12:17:06 +0000
Subject: [Rd] [tryExcept] New try Function
In-Reply-To: <ADFC5C3F-9849-4AF3-86B0-017615152298@gmail.com>
References: <ADFC5C3F-9849-4AF3-86B0-017615152298@gmail.com>
Message-ID: <97C3B2B2-A8C8-4A6B-B609-1964F16A4A1C@dans.knaw.nl>

Hi Ernest,

To start: I don't see an attachment, I think they're not (always) allowed on this mailing-list. If you want to send something, text is your safest bet.
But regarding the issue of tryCatch: I think you're not fully using what it already can do. In almost all circumstances I've encountered the following works fine:
res <- tryCatch(expr, error = function(cond) {
  # a bunch of code
  # Some value to be stored in res
})
The only difference is that now "#abunchofcode" is run from inside a function, which means you're working in a different environment, and if you want to assign values to other variables you need to use <<- or assign.
For a modified function, I think it would be nice if there's a way to supply an expression instead of a function, so that evaluation (and assignment!) takes place in the same environment as the main code in the tryCatch (in expr). Is that what you made?
And with the current tryCatch, you could use something like this:
res <- tryCatch(expr, error=function(e) evalq({
  # a bunch of code
  # Some value for res
}, envir=parent.frame(4))) # The 4 is because some internal functions are involved, parent.frame(4) is the same environment as used by expr

Although this is cumbersome, and it gets even more cumbersome if you want to access the error-object in #abunchofcode, or use #abunchofcode to return to a higher level, so I get it you're looking for a more elegant solution.

Best regards, 
Emil Bode
 
?On 23/11/2018, 08:49, "R-devel on behalf of Ernest Benedito" <r-devel-bounces at r-project.org on behalf of ebeneditos at gmail.com> wrote:

    Hi everyone,
    
    When dealing with errors, sometimes I want to run a bunch of code when an error occurs.
    For now I usually use a structure such as:
    
    res <- tryCatch(expr, error = function(cond) cond) # or try(expr)
    
    if (inherits(res, ?error?)) # or inherits(res, ?try-error?)
      # a bunch of code
    
    I though it would be useful to have a function that does this naturally, so I came up with the attached function.
    
    I would be glad to hear your insights and if you think it would make sense to add this function to R.
    
    Best regards,
    Ernest
    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel
    

From pd@me@ @ending from cb@@dk  Fri Nov 23 15:27:51 2018
From: pd@me@ @ending from cb@@dk (Peter Dalgaard)
Date: Fri, 23 Nov 2018 14:27:51 +0000
Subject: [Rd] R 3.5.2 scheduled for December 20
Message-ID: <F77674D5-9E76-4052-BE92-567A4B61EB1B@cbs.dk>

Full schedule available on developer.r-project.org

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From ebenedito@ @ending from gm@il@com  Fri Nov 23 15:47:19 2018
From: ebenedito@ @ending from gm@il@com (Ernest Benedito)
Date: Fri, 23 Nov 2018 15:47:19 +0100
Subject: [Rd] [tryExcept] New try Function
In-Reply-To: <97C3B2B2-A8C8-4A6B-B609-1964F16A4A1C@dans.knaw.nl>
References: <ADFC5C3F-9849-4AF3-86B0-017615152298@gmail.com>
 <97C3B2B2-A8C8-4A6B-B609-1964F16A4A1C@dans.knaw.nl>
Message-ID: <CAEEE=psD_zkX8skKhJd_uTu_CXqBi7HjV_FhiKYfUyh2NwF0Hg@mail.gmail.com>

Hi Emil,

First, thanks for the response. As you mentioned, a lot of times tryCatch
does the work, as you can return a value. However, sometimes it is useful
to assign several variables when an error occurs. You could do it with <<-,
but I prefer to reduce it's usage unless completely necessary.

I guess that the attachment was missed in the moderation. Here it is the
function:

tryExcept <- function (expr,
                       except = {})
{
  doTryExcept <- function(expr, parentenv) {
    .Internal(.addCondHands("error", list(NULL), parentenv,
                            environment(), FALSE))
    expr
  }
  parentenv <- parent.frame()
  doTryExcept(return(expr), parentenv)
  invisible(except)
}

As you can see, the tryExcept function uses a simplified version of the
tryCatch architecture, but it allows you to pass by a second expression
that is evaluated in case an error occurs during the evaluation of the
first expression. It could even work as an infix operator:

`%except%` <- tryExcept

# dummy example
{foo <- "foo"} %except% {foo <- "foo bar"}
print(foo) # "foo"

{ foo <- "foo"
  stop()
} %except% {
  foo <- "foo bar"
}
print(foo) # "foo bar"

It's main downside is that you are not able to handle the error occured,
although there is the possibility to add a 'silent' parameter such as in
'try' in order to print the error if desired. All in all, this would be a
function for simple error handling, but I think it would be practical, and
you can always move to tryCatch if you need a more complex error handling.

I will be looking forward to hearing your insights.

Best,
Ernest Benedito

Missatge de Emil Bode <emil.bode at dans.knaw.nl> del dia dv., 23 de nov. 2018
a les 13:17:

> Hi Ernest,
>
> To start: I don't see an attachment, I think they're not (always) allowed
> on this mailing-list. If you want to send something, text is your safest
> bet.
> But regarding the issue of tryCatch: I think you're not fully using what
> it already can do. In almost all circumstances I've encountered the
> following works fine:
> res <- tryCatch(expr, error = function(cond) {
>   # a bunch of code
>   # Some value to be stored in res
> })
> The only difference is that now "#abunchofcode" is run from inside a
> function, which means you're working in a different environment, and if you
> want to assign values to other variables you need to use <<- or assign.
> For a modified function, I think it would be nice if there's a way to
> supply an expression instead of a function, so that evaluation (and
> assignment!) takes place in the same environment as the main code in the
> tryCatch (in expr). Is that what you made?
> And with the current tryCatch, you could use something like this:
> res <- tryCatch(expr, error=function(e) evalq({
>   # a bunch of code
>   # Some value for res
> }, envir=parent.frame(4))) # The 4 is because some internal functions are
> involved, parent.frame(4) is the same environment as used by expr
>
> Although this is cumbersome, and it gets even more cumbersome if you want
> to access the error-object in #abunchofcode, or use #abunchofcode to return
> to a higher level, so I get it you're looking for a more elegant solution.
>
> Best regards,
> Emil Bode
>
> ?On 23/11/2018, 08:49, "R-devel on behalf of Ernest Benedito" <
> r-devel-bounces at r-project.org on behalf of ebeneditos at gmail.com> wrote:
>
>     Hi everyone,
>
>     When dealing with errors, sometimes I want to run a bunch of code when
> an error occurs.
>     For now I usually use a structure such as:
>
>     res <- tryCatch(expr, error = function(cond) cond) # or try(expr)
>
>     if (inherits(res, ?error?)) # or inherits(res, ?try-error?)
>       # a bunch of code
>
>     I though it would be useful to have a function that does this
> naturally, so I came up with the attached function.
>
>     I would be glad to hear your insights and if you think it would make
> sense to add this function to R.
>
>     Best regards,
>     Ernest
>     ______________________________________________
>     R-devel at r-project.org mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

	[[alternative HTML version deleted]]


From @mredd @ending from gm@il@com  Mon Nov 26 16:05:44 2018
From: @mredd @ending from gm@il@com (Andrew Redd)
Date: Mon, 26 Nov 2018 08:05:44 -0700
Subject: [Rd] [tryExcept] New try Function
In-Reply-To: <CAEEE=psD_zkX8skKhJd_uTu_CXqBi7HjV_FhiKYfUyh2NwF0Hg@mail.gmail.com>
References: <ADFC5C3F-9849-4AF3-86B0-017615152298@gmail.com>
 <97C3B2B2-A8C8-4A6B-B609-1964F16A4A1C@dans.knaw.nl>
 <CAEEE=psD_zkX8skKhJd_uTu_CXqBi7HjV_FhiKYfUyh2NwF0Hg@mail.gmail.com>
Message-ID: <CAK_CNyYzrKiu38QZT5FL_gdOVMG8iwnJETQWkodbbdjb167GHQ@mail.gmail.com>

I have two related packages that are already submitted to CRAN but are
awaiting approval.  They are part of the R Documentation Task Force efforts
to improve documentation.  The exact function you are referring to I have
called `catch_condition()` and included it in my `testextra` package.  You
might also want to check out the `pkgcond` package which facilitates
creating informative conditions (errors, warnings, and messages).  These
conditions are automatically classed to tell you where the error is coming
from, the package and function, including class for reference methods.

https://github.com/RDocTaskForce/testextra
https://github.com/RDocTaskForce/pkgcond

On Fri, Nov 23, 2018 at 7:48 AM Ernest Benedito <ebeneditos at gmail.com>
wrote:

> Hi Emil,
>
> First, thanks for the response. As you mentioned, a lot of times tryCatch
> does the work, as you can return a value. However, sometimes it is useful
> to assign several variables when an error occurs. You could do it with <<-,
> but I prefer to reduce it's usage unless completely necessary.
>
> I guess that the attachment was missed in the moderation. Here it is the
> function:
>
> tryExcept <- function (expr,
>                        except = {})
> {
>   doTryExcept <- function(expr, parentenv) {
>     .Internal(.addCondHands("error", list(NULL), parentenv,
>                             environment(), FALSE))
>     expr
>   }
>   parentenv <- parent.frame()
>   doTryExcept(return(expr), parentenv)
>   invisible(except)
> }
>
> As you can see, the tryExcept function uses a simplified version of the
> tryCatch architecture, but it allows you to pass by a second expression
> that is evaluated in case an error occurs during the evaluation of the
> first expression. It could even work as an infix operator:
>
> `%except%` <- tryExcept
>
> # dummy example
> {foo <- "foo"} %except% {foo <- "foo bar"}
> print(foo) # "foo"
>
> { foo <- "foo"
>   stop()
> } %except% {
>   foo <- "foo bar"
> }
> print(foo) # "foo bar"
>
> It's main downside is that you are not able to handle the error occured,
> although there is the possibility to add a 'silent' parameter such as in
> 'try' in order to print the error if desired. All in all, this would be a
> function for simple error handling, but I think it would be practical, and
> you can always move to tryCatch if you need a more complex error handling.
>
> I will be looking forward to hearing your insights.
>
> Best,
> Ernest Benedito
>
> Missatge de Emil Bode <emil.bode at dans.knaw.nl> del dia dv., 23 de nov.
> 2018
> a les 13:17:
>
> > Hi Ernest,
> >
> > To start: I don't see an attachment, I think they're not (always) allowed
> > on this mailing-list. If you want to send something, text is your safest
> > bet.
> > But regarding the issue of tryCatch: I think you're not fully using what
> > it already can do. In almost all circumstances I've encountered the
> > following works fine:
> > res <- tryCatch(expr, error = function(cond) {
> >   # a bunch of code
> >   # Some value to be stored in res
> > })
> > The only difference is that now "#abunchofcode" is run from inside a
> > function, which means you're working in a different environment, and if
> you
> > want to assign values to other variables you need to use <<- or assign.
> > For a modified function, I think it would be nice if there's a way to
> > supply an expression instead of a function, so that evaluation (and
> > assignment!) takes place in the same environment as the main code in the
> > tryCatch (in expr). Is that what you made?
> > And with the current tryCatch, you could use something like this:
> > res <- tryCatch(expr, error=function(e) evalq({
> >   # a bunch of code
> >   # Some value for res
> > }, envir=parent.frame(4))) # The 4 is because some internal functions are
> > involved, parent.frame(4) is the same environment as used by expr
> >
> > Although this is cumbersome, and it gets even more cumbersome if you want
> > to access the error-object in #abunchofcode, or use #abunchofcode to
> return
> > to a higher level, so I get it you're looking for a more elegant
> solution.
> >
> > Best regards,
> > Emil Bode
> >
> > ?On 23/11/2018, 08:49, "R-devel on behalf of Ernest Benedito" <
> > r-devel-bounces at r-project.org on behalf of ebeneditos at gmail.com> wrote:
> >
> >     Hi everyone,
> >
> >     When dealing with errors, sometimes I want to run a bunch of code
> when
> > an error occurs.
> >     For now I usually use a structure such as:
> >
> >     res <- tryCatch(expr, error = function(cond) cond) # or try(expr)
> >
> >     if (inherits(res, ?error?)) # or inherits(res, ?try-error?)
> >       # a bunch of code
> >
> >     I though it would be useful to have a function that does this
> > naturally, so I came up with the attached function.
> >
> >     I would be glad to hear your insights and if you think it would make
> > sense to add this function to R.
> >
> >     Best regards,
> >     Ernest
> >     ______________________________________________
> >     R-devel at r-project.org mailing list
> >     https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @purdle@@ @ending from gm@il@com  Mon Nov 26 20:28:56 2018
From: @purdle@@ @ending from gm@il@com (Abs Spurdle)
Date: Tue, 27 Nov 2018 08:28:56 +1300
Subject: [Rd] R-devel from 1997 Good Read
Message-ID: <CAB8pepz6116-xb_uJTgb_mKokWiYLAid4+jfe4t-MJB4JuokjA@mail.gmail.com>

hi all

This is possibly a bit off topic.
However, the mailing list is quiet at the moment so I thought I would
mention it.

Recently, I had a look at R-devel (R-alpha?) from 1997.
And it's very informative and very cool.

I'm planning to go through it more carefully when I get some more free time.
I encourage other R supporters to do the same.


kind regards
Abs


From therne@u @ending from m@yo@edu  Mon Nov 26 21:42:36 2018
From: therne@u @ending from m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 26 Nov 2018 14:42:36 -0600
Subject: [Rd] issue with testInstalledPackage
Message-ID: <bb6fa2$aha9ur@ironport10.mayo.edu>

Background: I run tools::testInstalledPackage on all packages that dependend on survival 
(605 as of today) before sending a new release to CRAN. It has a few false positives which 
I then follow up on.? (Mostly packages with as-yet-incomplete tests in their inst directory).

 ?Issue: testInstalledPackage("mets")? generates an? "Error in checkVignettes(pkg, 
lib.loc, latex = FALSE, weave = TRUE)" message, which stops my script.? The source code 
for that package passes R CMD check.
I can easily work around this in the short term by adding mets to my do-not-check list.

Footnote: the newer "check_packages_in_dir" routine doesn't work for me.?? The biggest 
reason is that it doesn't have a way to give a list of packages to skip.? My little 
desktop box doesn't have every linux library (cryptography, geospatial, etc.), nor do I 
load up bioconductor; which leads to a boatload of false positives.? I keep adding things 
but the packages add faster.

Terry T.


	[[alternative HTML version deleted]]


From boennecd @ending from gm@il@com  Mon Nov 26 23:08:28 2018
From: boennecd @ending from gm@il@com (Benjamin Christoffersen)
Date: Mon, 26 Nov 2018 23:08:28 +0100
Subject: [Rd] Suggestion for `glm.fit`
Message-ID: <CAHHSL8vKOSRmRkFcW2pgu8iXo=vyXzpiTtv=MbSpBmgjwgkWCw@mail.gmail.com>

Dear sirs,

One gets unexpected `residuals` if one is not aware of the meaning of
weights when a weight is set to zero and the outcome is one in the
`binomial` family in a call to `glm.fit`. The reason is the following
line from `binomial()$initialize`
> y[weights == 0] <- 0

Here is an example:
pval <- seq(.05, .95, length.out = 25)
X <- log(pval / (1 - pval)) - 2
Y <- c(
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE,
  FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE,
  TRUE, TRUE, TRUE, FALSE, TRUE, TRUE)

W <- rep(1, length(Y))
W[length(W)] <- 0
fit <- glm(Y ~ X, binomial(), weights = W)
fit$residuals[25]
#R        25
#R -45.77847

# Maybe it should be the following. Otherwise maybe there should be a
# warning in `binomial()$initialize` when `y`s are set to zero?
with(
  fit, tail((Y - fitted.values) / binomial()$mu.eta(linear.predictors), 1))
#R       25
#R 1.022332

sessionInfo()
#R R version 3.5.1 (2018-07-02)
#R Platform: x86_64-w64-mingw32/x64 (64-bit)
#R Running under: Windows >= 8 x64 (build 9200)
#R
#R Matrix products: default
#R
#R locale:
#R [1] LC_COLLATE=English_United States.1252
#R [2] LC_CTYPE=English_United States.1252
#R [3] LC_MONETARY=English_United States.1252
#R [4] LC_NUMERIC=C
#R [5] LC_TIME=English_United States.1252
#R
#R attached base packages:
#R [1] stats     graphics  grDevices utils     datasets  methods
#R [7] base
#R
#R loaded via a namespace (and not attached):
#R [1] compiler_3.5.1 tools_3.5.1    yaml_2.1.18

Sincerely yours,
Benjamin Christoffersen


From bbolker @ending from gm@il@com  Mon Nov 26 23:26:12 2018
From: bbolker @ending from gm@il@com (Ben Bolker)
Date: Mon, 26 Nov 2018 17:26:12 -0500
Subject: [Rd] Suggestion for `glm.fit`
In-Reply-To: <CAHHSL8vKOSRmRkFcW2pgu8iXo=vyXzpiTtv=MbSpBmgjwgkWCw@mail.gmail.com>
References: <CAHHSL8vKOSRmRkFcW2pgu8iXo=vyXzpiTtv=MbSpBmgjwgkWCw@mail.gmail.com>
Message-ID: <8c30a689-d02e-554a-5bd2-8c7db18e7fbf@gmail.com>


 I don't know whether this helps or not, but using residuals(fit) rather
than fit$residuals returns 0 for the last value.  This is different from
(predict(fit,type="response")[25] - Y[25]) (or the equivalent Pearson
residual) because the *weighted* residuals are returned by definition
(not that I see this being explained super-clearly in the documentation) ...

FWIW, ?residuals says:

     The abbreviated form ?resid? is an alias for ?residuals?.  It is
     intended to encourage users to access object components through an
     accessor function rather than by directly referencing an object
     slot.

 - in other words, if you use fit$residuals you're expected to know
exactly what you're doing and how things might get weird ...



On 2018-11-26 5:08 p.m., Benjamin Christoffersen wrote:
> Dear sirs,
> 
> One gets unexpected `residuals` if one is not aware of the meaning of
> weights when a weight is set to zero and the outcome is one in the
> `binomial` family in a call to `glm.fit`. The reason is the following
> line from `binomial()$initialize`
>> y[weights == 0] <- 0
> 
> Here is an example:
> pval <- seq(.05, .95, length.out = 25)
> X <- log(pval / (1 - pval)) - 2
> Y <- c(
>   FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE,
>   FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE,
>   TRUE, TRUE, TRUE, FALSE, TRUE, TRUE)
> 
> W <- rep(1, length(Y))
> W[length(W)] <- 0
> fit <- glm(Y ~ X, binomial(), weights = W)
> fit$residuals[25]
> #R        25
> #R -45.77847
> 
> # Maybe it should be the following. Otherwise maybe there should be a
> # warning in `binomial()$initialize` when `y`s are set to zero?
> with(
>   fit, tail((Y - fitted.values) / binomial()$mu.eta(linear.predictors), 1))
> #R       25
> #R 1.022332
> 
> sessionInfo()
> #R R version 3.5.1 (2018-07-02)
> #R Platform: x86_64-w64-mingw32/x64 (64-bit)
> #R Running under: Windows >= 8 x64 (build 9200)
> #R
> #R Matrix products: default
> #R
> #R locale:
> #R [1] LC_COLLATE=English_United States.1252
> #R [2] LC_CTYPE=English_United States.1252
> #R [3] LC_MONETARY=English_United States.1252
> #R [4] LC_NUMERIC=C
> #R [5] LC_TIME=English_United States.1252
> #R
> #R attached base packages:
> #R [1] stats     graphics  grDevices utils     datasets  methods
> #R [7] base
> #R
> #R loaded via a namespace (and not attached):
> #R [1] compiler_3.5.1 tools_3.5.1    yaml_2.1.18
> 
> Sincerely yours,
> Benjamin Christoffersen
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From bbolker @ending from gm@il@com  Mon Nov 26 23:42:48 2018
From: bbolker @ending from gm@il@com (Ben Bolker)
Date: Mon, 26 Nov 2018 17:42:48 -0500
Subject: [Rd] issue with testInstalledPackage
In-Reply-To: <bb6fa2$aha9ur@ironport10.mayo.edu>
References: <bb6fa2$aha9ur@ironport10.mayo.edu>
Message-ID: <375cf518-49dd-d19f-e94d-0afa24850115@gmail.com>


  FWIW I've been reasonably happy with the revdepcheck package: it's not
base-R, but it's pretty robust (lme4 'only' has 286 dependencies to
check ...)  I've had much better luck running it on a remote server
(where the sysadmin is responsive so it's not too much trouble to get
extra system dependencies/Debian packages installed as they become
necessary).

On 2018-11-26 3:42 p.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> Background: I run tools::testInstalledPackage on all packages that dependend on survival 
> (605 as of today) before sending a new release to CRAN. It has a few false positives which 
> I then follow up on.? (Mostly packages with as-yet-incomplete tests in their inst directory).
> 
>  ?Issue: testInstalledPackage("mets")? generates an? "Error in checkVignettes(pkg, 
> lib.loc, latex = FALSE, weave = TRUE)" message, which stops my script.? The source code 
> for that package passes R CMD check.
> I can easily work around this in the short term by adding mets to my do-not-check list.
> 
> Footnote: the newer "check_packages_in_dir" routine doesn't work for me.?? The biggest 
> reason is that it doesn't have a way to give a list of packages to skip.? My little 
> desktop box doesn't have every linux library (cryptography, geospatial, etc.), nor do I 
> load up bioconductor; which leads to a boatload of false positives.? I keep adding things 
> but the packages add faster.
> 
> Terry T.
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From r@dford @ending from c@@toronto@edu  Tue Nov 27 01:50:14 2018
From: r@dford @ending from c@@toronto@edu (Radford Neal)
Date: Mon, 26 Nov 2018 19:50:14 -0500
Subject: [Rd] Subsetting row in single column matrix drops names in
 resulting vector
In-Reply-To: <mailman.47920.7.1542884402.17320.r-devel@r-project.org>
References: <mailman.47920.7.1542884402.17320.r-devel@r-project.org>
Message-ID: <20181127005014.GA17318@mail.cs.toronto.edu>

Dmitriy Selivanov (selivanov.dmitriy at gmail.com) wrote:

> Consider following example:
>
> a = matrix(1:2, nrow = 2, dimnames = list(c("row1", "row2"), c("col1")))
> a[1, ]
> # 1
>
> It returns *unnamed* vector `1` where I would expect named vector. In fact
> it returns named vector when number of columns is > 1.
> Same issue applicable to single row matrix. Is it a bug? looks very
> counterintuitive.

This and related issues are addressed in pqR, in the new
release of 2018-11-18.  (See pqR-project.org, and my blog
post at radfordneal.wordpress.com)

The behaviour of a[1,] is unchanged, for backwards compatibility
reasons.  But in pqR one can explicitly mark an argument as
missing using "_".  When an array subscript is missing in this way,
the names will not be dropped in this context even if there is
only one of them.  So a[1,_] will do what you want:

  > a = matrix(1:2, nrow = 2, dimnames = list(c("row1", "row2"), c("col1")))
  > a[1, ]
  [1] 1
  > a[1,_]
  col1
     1

Furthermore, pqR will not drop names when the subscript is a
1D array (ie, has a length-1 dim attribute) even if it is only
one long.  In pqR, sequences that are 1D arrays are easily created
using the .. operator.  So the following works as intended when ..
is used, but not when the old : operator is used:

  > a = matrix(1:4, nrow=2, dimnames=list(c("row1","row2"),c("col1","col2")))
  > n = 2
  > a[1,1:n]
  col1 col2
     1    3
  > a[1,1..n]
  col1 col2
     1    3
  > n = 1
  > a[1,1:n]
  [1] 1
  > a[1,1..n]
  col1
     1

You can read more about this in my blog post at

https://radfordneal.wordpress.com/2016/06/25/fixing-rs-design-flaws-in-a-new-version-of-pqr/

That was written when most of these features where introduced,
though getting your specific example right relies on another
change introduced in the most recent version.

    Radford Neal


From @okol @ending from in@@-toulou@e@fr  Tue Nov 27 10:57:10 2018
From: @okol @ending from in@@-toulou@e@fr (Serguei Sokol)
Date: Tue, 27 Nov 2018 10:57:10 +0100
Subject: [Rd] Subsetting row in single column matrix drops names in
 resulting vector
In-Reply-To: <20181127005014.GA17318@mail.cs.toronto.edu>
References: <mailman.47920.7.1542884402.17320.r-devel@r-project.org>
 <20181127005014.GA17318@mail.cs.toronto.edu>
Message-ID: <2ce24835-d693-96a5-ce0b-f8b4df4f6bfc@insa-toulouse.fr>

Le 27/11/2018 ? 01:50, Radford Neal a ?crit?:
> Dmitriy Selivanov (selivanov.dmitriy at gmail.com) wrote:
>
>> Consider following example:
>>
>> a = matrix(1:2, nrow = 2, dimnames = list(c("row1", "row2"), c("col1")))
>> a[1, ]
>> # 1
>>
>> It returns *unnamed* vector `1` where I would expect named vector. In fact
>> it returns named vector when number of columns is > 1.
>> Same issue applicable to single row matrix. Is it a bug? looks very
>> counterintuitive.
> This and related issues are addressed in pqR, in the new
> release of 2018-11-18.  (See pqR-project.org, and my blog
> post at radfordneal.wordpress.com)
>
> The behaviour of a[1,] is unchanged, for backwards compatibility
> reasons.  But in pqR one can explicitly mark an argument as
> missing using "_".  When an array subscript is missing in this way,
> the names will not be dropped in this context even if there is
> only one of them.  So a[1,_] will do what you want:
>
>    > a = matrix(1:2, nrow = 2, dimnames = list(c("row1", "row2"), c("col1")))
>    > a[1, ]
>    [1] 1
>    > a[1,_]
>    col1
>       1
To my mind, it's rather counterintuitive as

> a[2,_]
col1
    1
so a[1,_] and a[2,_] have the same name. To make it intuitive (at least for me ;) )
it should rather return names "row1" and "row2" respectively.

Best,
Serguei.
  

>
> Furthermore, pqR will not drop names when the subscript is a
> 1D array (ie, has a length-1 dim attribute) even if it is only
> one long.  In pqR, sequences that are 1D arrays are easily created
> using the .. operator.  So the following works as intended when ..
> is used, but not when the old : operator is used:
>
>    > a = matrix(1:4, nrow=2, dimnames=list(c("row1","row2"),c("col1","col2")))
>    > n = 2
>    > a[1,1:n]
>    col1 col2
>       1    3
>    > a[1,1..n]
>    col1 col2
>       1    3
>    > n = 1
>    > a[1,1:n]
>    [1] 1
>    > a[1,1..n]
>    col1
>       1
>
> You can read more about this in my blog post at
>
> https://radfordneal.wordpress.com/2016/06/25/fixing-rs-design-flaws-in-a-new-version-of-pqr/
>
> That was written when most of these features where introduced,
> though getting your specific example right relies on another
> change introduced in the most recent version.
>
>      Radford Neal
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Serguei Sokol
Ingenieur de recherche INRA

Cellule math?matiques
LISBP, INSA/INRA UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 62 25 01 27
email: sokol at insa-toulouse.fr
http://www.lisbp.fr


From r@dford @ending from c@@toronto@edu  Tue Nov 27 15:48:36 2018
From: r@dford @ending from c@@toronto@edu (Radford Neal)
Date: Tue, 27 Nov 2018 09:48:36 -0500
Subject: [Rd] Subsetting row in single column matrix drops names in
 resulting vector
In-Reply-To: <mailman.47935.5.1543316402.731.r-devel@r-project.org>
References: <mailman.47935.5.1543316402.731.r-devel@r-project.org>
Message-ID: <20181127144836.GA16642@mail.cs.toronto.edu>

> > The behaviour of a[1,] is unchanged, for backwards compatibility
> > reasons.  But in pqR one can explicitly mark an argument as
> > missing using "_".  When an array subscript is missing in this way,
> > the names will not be dropped in this context even if there is
> > only one of them.  So a[1,_] will do what you want:
> >
> >    > a = matrix(1:2, nrow = 2, dimnames = list(c("row1", "row2"), c("col1")))
> >    > a[1, ]
> >    [1] 1
> >    > a[1,_]
> >    col1
> >       1

> To my mind, it's rather counterintuitive as
> 
> > a[2,_]
> col1
>     1
> so a[1,_] and a[2,_] have the same name. To make it intuitive (at least 
> for me ;) ) it should rather return names "row1" and "row2" respectively.
> 
> Best,
> Serguei.


The aim in designing these features should be to make it easier to
write reliable software, which doesn't unexpectedly fail in edge
cases.

Here, the fact that a is a matrix presumably means that the program is
designed to work for more than one column - in fact, it's likely that
the programmer was mostly thinking of the case where there is more
than one column, and perhaps only testing that case.  But of course
there is usually no reason why one column (or even zero columns) is
impossible.  We want the program to still work in such cases.

When there is more than one column, a[1,] and a[1,_] both produce a
vector with the _column_ names attached, and this is certainly not
going to change (nor should it, unless one wants to change the whole
semantics of matrices so that rows and columns are treated
non-symmetrically, and even then attaching the same row name to all
the elements would be rather strange...).

After v <- a[1,_], the program may well have an expression like v[nc]
where nc is a column name.  We want this to still work if there
happens to be only one column.  That will happen only if a[1,_]
attaches a column name, not a row name, when a has only one column.

   Radford Neal


From @okol @ending from in@@-toulou@e@fr  Tue Nov 27 16:44:15 2018
From: @okol @ending from in@@-toulou@e@fr (Serguei Sokol)
Date: Tue, 27 Nov 2018 16:44:15 +0100
Subject: [Rd] Subsetting row in single column matrix drops names in
 resulting vector
In-Reply-To: <20181127144836.GA16642@mail.cs.toronto.edu>
References: <mailman.47935.5.1543316402.731.r-devel@r-project.org>
 <20181127144836.GA16642@mail.cs.toronto.edu>
Message-ID: <90e7ca06-ad20-4451-948a-26611838e035@insa-toulouse.fr>

The reason that multi-[column|row] and one-[column|row] matrices should 
be treated in the same way as to names kept in the result sounds good to 
me. I withdraw my remark.

Serguei.

Le 27/11/2018 ? 15:48, Radford Neal a ?crit?:
>>> The behaviour of a[1,] is unchanged, for backwards compatibility
>>> reasons.  But in pqR one can explicitly mark an argument as
>>> missing using "_".  When an array subscript is missing in this way,
>>> the names will not be dropped in this context even if there is
>>> only one of them.  So a[1,_] will do what you want:
>>>
>>>     > a = matrix(1:2, nrow = 2, dimnames = list(c("row1", "row2"), c("col1")))
>>>     > a[1, ]
>>>     [1] 1
>>>     > a[1,_]
>>>     col1
>>>        1
>> To my mind, it's rather counterintuitive as
>>
>>> a[2,_]
>> col1
>>      1
>> so a[1,_] and a[2,_] have the same name. To make it intuitive (at least
>> for me ;) ) it should rather return names "row1" and "row2" respectively.
>>
>> Best,
>> Serguei.
>
> The aim in designing these features should be to make it easier to
> write reliable software, which doesn't unexpectedly fail in edge
> cases.
>
> Here, the fact that a is a matrix presumably means that the program is
> designed to work for more than one column - in fact, it's likely that
> the programmer was mostly thinking of the case where there is more
> than one column, and perhaps only testing that case.  But of course
> there is usually no reason why one column (or even zero columns) is
> impossible.  We want the program to still work in such cases.
>
> When there is more than one column, a[1,] and a[1,_] both produce a
> vector with the _column_ names attached, and this is certainly not
> going to change (nor should it, unless one wants to change the whole
> semantics of matrices so that rows and columns are treated
> non-symmetrically, and even then attaching the same row name to all
> the elements would be rather strange...).
>
> After v <- a[1,_], the program may well have an expression like v[nc]
> where nc is a column name.  We want this to still work if there
> happens to be only one column.  That will happen only if a[1,_]
> attaches a column name, not a row name, when a has only one column.
>
>     Radford Neal
>


-- 
Serguei Sokol
Ingenieur de recherche INRA

Cellule math?matiques
LISBP, INSA/INRA UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 62 25 01 27
email: sokol at insa-toulouse.fr
http://www.lisbp.fr


From henrik@p@rn @ending from ntnu@no  Wed Nov 28 13:57:37 2018
From: henrik@p@rn @ending from ntnu@no (=?iso-8859-1?Q?Henrik_P=E4rn?=)
Date: Wed, 28 Nov 2018 12:57:37 +0000
Subject: [Rd] named arguments discouraged in `[.data.frame` and
 `[<-.data.frame`
Message-ID: <fa0ff7bd9b544890be2ba300d5045473@it-ex11.win.ntnu.no>

tl;dr:

Why are named arguments discouraged in `[.data.frame`, `[<-.data.frame` and `[[.data.frame`?

(because this question is of the kind 'why is R designed like this?', I though R-devel would be more appropriate than R-help)

#############################

Background:

Now and then students presents there fancy functions like this: 

myfancyfun(d,12,0.3,0.2,500,1000,FALSE,TRUE,FALSE,TRUE,FALSE)

Incomprehensible. Thus, I encourage them to use spaces and name arguments, _at least_ when trying to communicate their code with others. Something like:

myfancyfun(data = d, n = 12, gamma = 0.3, prob = 0.2,
                      size = 500, niter = 1000, model = FALSE,
                     scale = TRUE, drop = FALSE, plot = TRUE, save = FALSE)
 

Then some overzealous students started to use named arguments everywhere. E-v-e-r-y-w-h-e-r-e. Even in the most basic situation when indexing vectors (as a subtle protest?), like:

vec <- 1:9

vec[i = 4]
`[`(x = vec, i = 4)

vec[[i = 4]]
`[[`(x = vec, i = 4)

vec[i = 4] <- 10
`[<-`(x = vec, i = 4, value = 10)

...or when indexing matrices:

m <- matrix(vec, ncol = 3)
m[i = 2, j = 2]
`[`(x = m, i = 2, j = 2)
# 5

m[i = 2, j = 2] <- 0
`[<-`(x = m, i = 2, j = 2, value = 0)

######

This practice indeed feels like overkill, but it didn't seem to hurt either. Until they used it on data frames. Then suddenly warnings appeared that named arguments are discouraged:

d <- data.frame(m)

d[[i = "X2"]]
# [1] 4 5 6
# Warning message:
# In `[[.data.frame`(d, i = "X2") :
#  named arguments other than 'exact' are discouraged

d[i = 2, j = 2]
# [1] 0
# Warning message:
# In `[.data.frame`(d, i = 2, j = 2) :
#  named arguments other than 'drop' are discouraged

d[i = 2, j = 2] <- 5
# Warning message:
# In `[<-.data.frame`(`*tmp*`, i = 2, j = 2, value = 5) :
#  named arguments are discouraged


##################################

Of course I could tell them "don't do it, it's overkill and not common practice" or "it's just a warning, don't worry". However, I assume the warnings are there for a good reason.

So how do I explain to the students that named arguments are actively discouraged in `[.data.frame` and `[<-.data.frame`, but not in `[` and `[<-`? When will they get bitten?


From l@wrence@mich@el @ending from gene@com  Wed Nov 28 20:36:20 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Wed, 28 Nov 2018 11:36:20 -0800
Subject: [Rd] named arguments discouraged in `[.data.frame` and
 `[<-.data.frame`
In-Reply-To: <fa0ff7bd9b544890be2ba300d5045473@it-ex11.win.ntnu.no>
References: <fa0ff7bd9b544890be2ba300d5045473@it-ex11.win.ntnu.no>
Message-ID: <CAOQ5NycqnGF+rAsvpLQBMiKPESL6PpfLAb=tM7xd_NFyenRrDw@mail.gmail.com>

Whenever they are calling a primitive, because primitives match
arguments positionally. Of course, you then you need to introduce the
concept of a primitive.

You could also make an argument from the code clarity perspective, as
typically primitives have simple interfaces and/or are used frequently
enough that naming arguments just introduces clutter. That probably
requires experience though.

Michael
On Wed, Nov 28, 2018 at 11:30 AM Henrik P?rn <henrik.parn at ntnu.no> wrote:
>
> tl;dr:
>
> Why are named arguments discouraged in `[.data.frame`, `[<-.data.frame` and `[[.data.frame`?
>
> (because this question is of the kind 'why is R designed like this?', I though R-devel would be more appropriate than R-help)
>
> #############################
>
> Background:
>
> Now and then students presents there fancy functions like this:
>
> myfancyfun(d,12,0.3,0.2,500,1000,FALSE,TRUE,FALSE,TRUE,FALSE)
>
> Incomprehensible. Thus, I encourage them to use spaces and name arguments, _at least_ when trying to communicate their code with others. Something like:
>
> myfancyfun(data = d, n = 12, gamma = 0.3, prob = 0.2,
>                       size = 500, niter = 1000, model = FALSE,
>                      scale = TRUE, drop = FALSE, plot = TRUE, save = FALSE)
>
>
> Then some overzealous students started to use named arguments everywhere. E-v-e-r-y-w-h-e-r-e. Even in the most basic situation when indexing vectors (as a subtle protest?), like:
>
> vec <- 1:9
>
> vec[i = 4]
> `[`(x = vec, i = 4)
>
> vec[[i = 4]]
> `[[`(x = vec, i = 4)
>
> vec[i = 4] <- 10
> `[<-`(x = vec, i = 4, value = 10)
>
> ...or when indexing matrices:
>
> m <- matrix(vec, ncol = 3)
> m[i = 2, j = 2]
> `[`(x = m, i = 2, j = 2)
> # 5
>
> m[i = 2, j = 2] <- 0
> `[<-`(x = m, i = 2, j = 2, value = 0)
>
> ######
>
> This practice indeed feels like overkill, but it didn't seem to hurt either. Until they used it on data frames. Then suddenly warnings appeared that named arguments are discouraged:
>
> d <- data.frame(m)
>
> d[[i = "X2"]]
> # [1] 4 5 6
> # Warning message:
> # In `[[.data.frame`(d, i = "X2") :
> #  named arguments other than 'exact' are discouraged
>
> d[i = 2, j = 2]
> # [1] 0
> # Warning message:
> # In `[.data.frame`(d, i = 2, j = 2) :
> #  named arguments other than 'drop' are discouraged
>
> d[i = 2, j = 2] <- 5
> # Warning message:
> # In `[<-.data.frame`(`*tmp*`, i = 2, j = 2, value = 5) :
> #  named arguments are discouraged
>
>
> ##################################
>
> Of course I could tell them "don't do it, it's overkill and not common practice" or "it's just a warning, don't worry". However, I assume the warnings are there for a good reason.
>
> So how do I explain to the students that named arguments are actively discouraged in `[.data.frame` and `[<-.data.frame`, but not in `[` and `[<-`? When will they get bitten?
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From wdunl@p @ending from tibco@com  Wed Nov 28 21:10:26 2018
From: wdunl@p @ending from tibco@com (William Dunlap)
Date: Wed, 28 Nov 2018 12:10:26 -0800
Subject: [Rd] named arguments discouraged in `[.data.frame` and
 `[<-.data.frame`
In-Reply-To: <fa0ff7bd9b544890be2ba300d5045473@it-ex11.win.ntnu.no>
References: <fa0ff7bd9b544890be2ba300d5045473@it-ex11.win.ntnu.no>
Message-ID: <CAF8bMcZhZJNbY7MYA=e9AQVCkR9v516b1z6-o9bgKOhq_Z9S1w@mail.gmail.com>

They can get bitten in the last two lines of this example, where the 'x'
argument is not first:
> d <- data.frame(C1=c(r1=11,r2=21,r3=31), C2=c(12,22,32))
> d[1,1:2]
   C1 C2
r1 11 12
> `[`(d,j=1:2,i=1)
   C1 C2
r1 11 12
Warning message:
In `[.data.frame`(d, j = 1:2, i = 1) :
  named arguments other than 'drop' are discouraged
> `[`(j=1:2,d,i=1)
Error in (1:2)[d, i = 1] : incorrect number of dimensions
> do.call("[", list(j=1:2, i=1, x=d))
Error in 1:2[i = 1, x = list(C1 = c(11, 21, 31), C2 = c(12, 22, 32))] :
  incorrect number of dimensions

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Wed, Nov 28, 2018 at 11:30 AM Henrik P?rn <henrik.parn at ntnu.no> wrote:

> tl;dr:
>
> Why are named arguments discouraged in `[.data.frame`, `[<-.data.frame`
> and `[[.data.frame`?
>
> (because this question is of the kind 'why is R designed like this?', I
> though R-devel would be more appropriate than R-help)
>
> #############################
>
> Background:
>
> Now and then students presents there fancy functions like this:
>
> myfancyfun(d,12,0.3,0.2,500,1000,FALSE,TRUE,FALSE,TRUE,FALSE)
>
> Incomprehensible. Thus, I encourage them to use spaces and name arguments,
> _at least_ when trying to communicate their code with others. Something
> like:
>
> myfancyfun(data = d, n = 12, gamma = 0.3, prob = 0.2,
>                       size = 500, niter = 1000, model = FALSE,
>                      scale = TRUE, drop = FALSE, plot = TRUE, save = FALSE)
>
>
> Then some overzealous students started to use named arguments everywhere.
> E-v-e-r-y-w-h-e-r-e. Even in the most basic situation when indexing vectors
> (as a subtle protest?), like:
>
> vec <- 1:9
>
> vec[i = 4]
> `[`(x = vec, i = 4)
>
> vec[[i = 4]]
> `[[`(x = vec, i = 4)
>
> vec[i = 4] <- 10
> `[<-`(x = vec, i = 4, value = 10)
>
> ...or when indexing matrices:
>
> m <- matrix(vec, ncol = 3)
> m[i = 2, j = 2]
> `[`(x = m, i = 2, j = 2)
> # 5
>
> m[i = 2, j = 2] <- 0
> `[<-`(x = m, i = 2, j = 2, value = 0)
>
> ######
>
> This practice indeed feels like overkill, but it didn't seem to hurt
> either. Until they used it on data frames. Then suddenly warnings appeared
> that named arguments are discouraged:
>
> d <- data.frame(m)
>
> d[[i = "X2"]]
> # [1] 4 5 6
> # Warning message:
> # In `[[.data.frame`(d, i = "X2") :
> #  named arguments other than 'exact' are discouraged
>
> d[i = 2, j = 2]
> # [1] 0
> # Warning message:
> # In `[.data.frame`(d, i = 2, j = 2) :
> #  named arguments other than 'drop' are discouraged
>
> d[i = 2, j = 2] <- 5
> # Warning message:
> # In `[<-.data.frame`(`*tmp*`, i = 2, j = 2, value = 5) :
> #  named arguments are discouraged
>
>
> ##################################
>
> Of course I could tell them "don't do it, it's overkill and not common
> practice" or "it's just a warning, don't worry". However, I assume the
> warnings are there for a good reason.
>
> So how do I explain to the students that named arguments are actively
> discouraged in `[.data.frame` and `[<-.data.frame`, but not in `[` and
> `[<-`? When will they get bitten?
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From henrik@p@rn @ending from ntnu@no  Thu Nov 29 09:20:12 2018
From: henrik@p@rn @ending from ntnu@no (=?utf-8?B?SGVucmlrIFDDpHJu?=)
Date: Thu, 29 Nov 2018 08:20:12 +0000
Subject: [Rd] named arguments discouraged in `[.data.frame` and
 `[<-.data.frame`
In-Reply-To: <CAF8bMcZhZJNbY7MYA=e9AQVCkR9v516b1z6-o9bgKOhq_Z9S1w@mail.gmail.com>
References: <fa0ff7bd9b544890be2ba300d5045473@it-ex11.win.ntnu.no>
 <CAF8bMcZhZJNbY7MYA=e9AQVCkR9v516b1z6-o9bgKOhq_Z9S1w@mail.gmail.com>
Message-ID: <ed14424f3ce0484cbb2062c8491cbcdb@it-ex11.win.ntnu.no>

Thanks Bill and Michael for taking the time to share your knowledge! 

As a further background to my question, here are two examples that I forgot to include in my original post (reminded by Michael's answer). I swapped the i and j arguments in `[.data.frame` and `[<-.data.frame`. With warnings, but else without (?) problem. Using Bill's data:

`[.data.frame`(x = d, i = 1, j = 2)
# [1] 12

`[.data.frame`(x = d, j = 2, i = 1)
# [1] 12

And similar for `[<-.data.frame` :
`[<-.data.frame`(x = d, i = 1, j = 2, value = 1122)
`[<-.data.frame`(x = d, j = 2, i = 1, value = 12)

Because this seemed to work, I made the hasty conclusion that argument switching _wasn't_ a problem for `[.data frame`, and that we could rely on exact matching on tags. But apparently not: despite that `[.data.frame` and `[<-.data.frame` are _not_ primitive functions, positional matching is done there as well. Sometimes. At least when 'x' argument is not first, as shown in Bill's examples. Obviously my "test" was insufficient...

Cheers,

Henrik



From: William Dunlap <wdunlap at tibco.com> 
Sent: Wednesday, November 28, 2018 9:10 PM
To: Henrik P?rn <henrik.parn at ntnu.no>
Cc: r-devel at r-project.org
Subject: Re: [Rd] named arguments discouraged in `[.data.frame` and `[<-.data.frame`

They can get bitten in the last two lines of this example, where the 'x' argument is not first:
> d <- data.frame(C1=c(r1=11,r2=21,r3=31), C2=c(12,22,32))
> d[1,1:2]
? ?C1 C2
r1 11 12
> `[`(d,j=1:2,i=1)
? ?C1 C2
r1 11 12
Warning message:
In `[.data.frame`(d, j = 1:2, i = 1) :
? named arguments other than 'drop' are discouraged
> `[`(j=1:2,d,i=1)
Error in (1:2)[d, i = 1] : incorrect number of dimensions
> do.call("[", list(j=1:2, i=1, x=d))
Error in 1:2[i = 1, x = list(C1 = c(11, 21, 31), C2 = c(12, 22, 32))] :
? incorrect number of dimensions

Bill Dunlap
TIBCO Software
wdunlap http://tibco.com


On Wed, Nov 28, 2018 at 11:30 AM Henrik P?rn <mailto:henrik.parn at ntnu.no> wrote:
tl;dr:

Why are named arguments discouraged in `[.data.frame`, `[<-.data.frame` and `[[.data.frame`?

(because this question is of the kind 'why is R designed like this?', I though R-devel would be more appropriate than R-help)

#############################

Background:

Now and then students presents there fancy functions like this: 

myfancyfun(d,12,0.3,0.2,500,1000,FALSE,TRUE,FALSE,TRUE,FALSE)

Incomprehensible. Thus, I encourage them to use spaces and name arguments, _at least_ when trying to communicate their code with others. Something like:

myfancyfun(data = d, n = 12, gamma = 0.3, prob = 0.2,
? ? ? ? ? ? ? ? ? ? ? size = 500, niter = 1000, model = FALSE,
? ? ? ? ? ? ? ? ? ? ?scale = TRUE, drop = FALSE, plot = TRUE, save = FALSE)


Then some overzealous students started to use named arguments everywhere. E-v-e-r-y-w-h-e-r-e. Even in the most basic situation when indexing vectors (as a subtle protest?), like:

vec <- 1:9

vec[i = 4]
`[`(x = vec, i = 4)

vec[[i = 4]]
`[[`(x = vec, i = 4)

vec[i = 4] <- 10
`[<-`(x = vec, i = 4, value = 10)

...or when indexing matrices:

m <- matrix(vec, ncol = 3)
m[i = 2, j = 2]
`[`(x = m, i = 2, j = 2)
# 5

m[i = 2, j = 2] <- 0
`[<-`(x = m, i = 2, j = 2, value = 0)

######

This practice indeed feels like overkill, but it didn't seem to hurt either. Until they used it on data frames. Then suddenly warnings appeared that named arguments are discouraged:

d <- data.frame(m)

d[[i = "X2"]]
# [1] 4 5 6
# Warning message:
# In `[[.data.frame`(d, i = "X2") :
#? named arguments other than 'exact' are discouraged

d[i = 2, j = 2]
# [1] 0
# Warning message:
# In `[.data.frame`(d, i = 2, j = 2) :
#? named arguments other than 'drop' are discouraged

d[i = 2, j = 2] <- 5
# Warning message:
# In `[<-.data.frame`(`*tmp*`, i = 2, j = 2, value = 5) :
#? named arguments are discouraged


##################################

Of course I could tell them "don't do it, it's overkill and not common practice" or "it's just a warning, don't worry". However, I assume the warnings are there for a good reason.

So how do I explain to the students that named arguments are actively discouraged in `[.data.frame` and `[<-.data.frame`, but not in `[` and `[<-`? When will they get bitten?

______________________________________________
mailto:R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

From emil@bode @ending from d@n@@kn@w@nl  Thu Nov 29 10:48:21 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Thu, 29 Nov 2018 09:48:21 +0000
Subject: [Rd] named arguments discouraged in `[.data.frame` and
 `[<-.data.frame`
In-Reply-To: <ed14424f3ce0484cbb2062c8491cbcdb@it-ex11.win.ntnu.no>
References: <fa0ff7bd9b544890be2ba300d5045473@it-ex11.win.ntnu.no>
 <CAF8bMcZhZJNbY7MYA=e9AQVCkR9v516b1z6-o9bgKOhq_Z9S1w@mail.gmail.com>
 <ed14424f3ce0484cbb2062c8491cbcdb@it-ex11.win.ntnu.no>
Message-ID: <6FF34AB9-2C1D-46B5-9C5D-D6E604FF16CD@dans.knaw.nl>

Well, the situation with `[.data.frame` (and [<-) is complicated by the fact that the data.frame-method is not a primitive, but the generic IS. 
I'm not sure about dispatch for primitive-generics, but I bet it's done on the first argument (as with S3). Which means `[`(j=1:2,d,i=1) has nothing to do with `[.data.frame`, as some internal code equivalent to something like `[.integer` is called (`[.integer` is not an R-function, but I guess it's implemented in the C-code for `[`)
And note that `[.data.frame`(j=1:2,d,i=1) does work (throws a warning, but returns the right result), because then you're simply calling the direct R-function, and matching by name is done.

But I think the main reason for the warning is forwards compatibility (and maybe backwards?). As of this version, `[.data.frame`(x = d, j = 2, i = 1) works fine, and `[.data.frame` is a regular R-function. But it's used a lot, I wouldn't be surprised if some future R-version would implement it as a primitive.
Without the warning, implementing [.data.frame as a primitive would involve a LOT of issues where older code breaks. With the warning, we can make clear to any users that calls like this one are undefined. They may work for now, but one shouldn't rely on it. Which means only the "right" order may be used, and then naming them is superfluous.

By the way, when trying some things I noticed something else, which I'll send a separate mail about...

Cheers,
Emil 

?On 29/11/2018, 09:20, "R-devel on behalf of Henrik P?rn" <r-devel-bounces at r-project.org on behalf of henrik.parn at ntnu.no> wrote:

    Thanks Bill and Michael for taking the time to share your knowledge! 
    
    As a further background to my question, here are two examples that I forgot to include in my original post (reminded by Michael's answer). I swapped the i and j arguments in `[.data.frame` and `[<-.data.frame`. With warnings, but else without (?) problem. Using Bill's data:
    
    `[.data.frame`(x = d, i = 1, j = 2)
    # [1] 12
    
    `[.data.frame`(x = d, j = 2, i = 1)
    # [1] 12
    
    And similar for `[<-.data.frame` :
    `[<-.data.frame`(x = d, i = 1, j = 2, value = 1122)
    `[<-.data.frame`(x = d, j = 2, i = 1, value = 12)
    
    Because this seemed to work, I made the hasty conclusion that argument switching _wasn't_ a problem for `[.data frame`, and that we could rely on exact matching on tags. But apparently not: despite that `[.data.frame` and `[<-.data.frame` are _not_ primitive functions, positional matching is done there as well. Sometimes. At least when 'x' argument is not first, as shown in Bill's examples. Obviously my "test" was insufficient...
    
    Cheers,
    
    Henrik
    
    
    
    From: William Dunlap <wdunlap at tibco.com> 
    Sent: Wednesday, November 28, 2018 9:10 PM
    To: Henrik P?rn <henrik.parn at ntnu.no>
    Cc: r-devel at r-project.org
    Subject: Re: [Rd] named arguments discouraged in `[.data.frame` and `[<-.data.frame`
    
    They can get bitten in the last two lines of this example, where the 'x' argument is not first:
    > d <- data.frame(C1=c(r1=11,r2=21,r3=31), C2=c(12,22,32))
    > d[1,1:2]
       C1 C2
    r1 11 12
    > `[`(d,j=1:2,i=1)
       C1 C2
    r1 11 12
    Warning message:
    In `[.data.frame`(d, j = 1:2, i = 1) :
      named arguments other than 'drop' are discouraged
    > `[`(j=1:2,d,i=1)
    Error in (1:2)[d, i = 1] : incorrect number of dimensions
    > do.call("[", list(j=1:2, i=1, x=d))
    Error in 1:2[i = 1, x = list(C1 = c(11, 21, 31), C2 = c(12, 22, 32))] :
      incorrect number of dimensions
    
    Bill Dunlap
    TIBCO Software
    wdunlap http://tibco.com
    
    
    On Wed, Nov 28, 2018 at 11:30 AM Henrik P?rn <mailto:henrik.parn at ntnu.no> wrote:
    tl;dr:
    
    Why are named arguments discouraged in `[.data.frame`, `[<-.data.frame` and `[[.data.frame`?
    
    (because this question is of the kind 'why is R designed like this?', I though R-devel would be more appropriate than R-help)
    
    #############################
    
    Background:
    
    Now and then students presents there fancy functions like this: 
    
    myfancyfun(d,12,0.3,0.2,500,1000,FALSE,TRUE,FALSE,TRUE,FALSE)
    
    Incomprehensible. Thus, I encourage them to use spaces and name arguments, _at least_ when trying to communicate their code with others. Something like:
    
    myfancyfun(data = d, n = 12, gamma = 0.3, prob = 0.2,
                          size = 500, niter = 1000, model = FALSE,
                         scale = TRUE, drop = FALSE, plot = TRUE, save = FALSE)
    
    
    Then some overzealous students started to use named arguments everywhere. E-v-e-r-y-w-h-e-r-e. Even in the most basic situation when indexing vectors (as a subtle protest?), like:
    
    vec <- 1:9
    
    vec[i = 4]
    `[`(x = vec, i = 4)
    
    vec[[i = 4]]
    `[[`(x = vec, i = 4)
    
    vec[i = 4] <- 10
    `[<-`(x = vec, i = 4, value = 10)
    
    ...or when indexing matrices:
    
    m <- matrix(vec, ncol = 3)
    m[i = 2, j = 2]
    `[`(x = m, i = 2, j = 2)
    # 5
    
    m[i = 2, j = 2] <- 0
    `[<-`(x = m, i = 2, j = 2, value = 0)
    
    ######
    
    This practice indeed feels like overkill, but it didn't seem to hurt either. Until they used it on data frames. Then suddenly warnings appeared that named arguments are discouraged:
    
    d <- data.frame(m)
    
    d[[i = "X2"]]
    # [1] 4 5 6
    # Warning message:
    # In `[[.data.frame`(d, i = "X2") :
    #  named arguments other than 'exact' are discouraged
    
    d[i = 2, j = 2]
    # [1] 0
    # Warning message:
    # In `[.data.frame`(d, i = 2, j = 2) :
    #  named arguments other than 'drop' are discouraged
    
    d[i = 2, j = 2] <- 5
    # Warning message:
    # In `[<-.data.frame`(`*tmp*`, i = 2, j = 2, value = 5) :
    #  named arguments are discouraged
    
    
    ##################################
    
    Of course I could tell them "don't do it, it's overkill and not common practice" or "it's just a warning, don't worry". However, I assume the warnings are there for a good reason.
    
    So how do I explain to the students that named arguments are actively discouraged in `[.data.frame` and `[<-.data.frame`, but not in `[` and `[<-`? When will they get bitten?
    
    ______________________________________________
    mailto:R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel
    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel
    

From henrik@p@rn @ending from ntnu@no  Thu Nov 29 11:05:17 2018
From: henrik@p@rn @ending from ntnu@no (=?utf-8?B?SGVucmlrIFDDpHJu?=)
Date: Thu, 29 Nov 2018 10:05:17 +0000
Subject: [Rd] named arguments discouraged in `[.data.frame` and
 `[<-.data.frame`
In-Reply-To: <6FF34AB9-2C1D-46B5-9C5D-D6E604FF16CD@dans.knaw.nl>
References: <fa0ff7bd9b544890be2ba300d5045473@it-ex11.win.ntnu.no>
 <CAF8bMcZhZJNbY7MYA=e9AQVCkR9v516b1z6-o9bgKOhq_Z9S1w@mail.gmail.com>
 <ed14424f3ce0484cbb2062c8491cbcdb@it-ex11.win.ntnu.no>
 <6FF34AB9-2C1D-46B5-9C5D-D6E604FF16CD@dans.knaw.nl>
Message-ID: <5d3f2544b8814c2dac6f4baff61f439b@it-ex11.win.ntnu.no>

Thanks Emil for your thorough answer. It really clarified a lot to me. And revealed (even more of) my ignorance.

>-----Original Message-----
>From: Emil Bode <emil.bode at dans.knaw.nl>
>Sent: Thursday, November 29, 2018 10:48 AM
>To: Henrik P?rn <henrik.parn at ntnu.no>; r-devel at r-project.org
>Subject: Re: [Rd] named arguments discouraged in `[.data.frame` and `[<-
>.data.frame`
>
>Well, the situation with `[.data.frame` (and [<-) is complicated by the fact that
>the data.frame-method is not a primitive, but the generic IS.
>I'm not sure about dispatch for primitive-generics, but I bet it's done on the
>first argument (as with S3). Which means `[`(j=1:2,d,i=1) has nothing to do
>with `[.data.frame`, as some internal code equivalent to something like
>`[.integer` is called (`[.integer` is not an R-function, but I guess it's
>implemented in the C-code for `[`)
>And note that `[.data.frame`(j=1:2,d,i=1) does work (throws a warning, but
>returns the right result), because then you're simply calling the direct R-
>function, and matching by name is done.
>
>But I think the main reason for the warning is forwards compatibility (and
>maybe backwards?). As of this version, `[.data.frame`(x = d, j = 2, i = 1) works
>fine, and `[.data.frame` is a regular R-function. But it's used a lot, I wouldn't be
>surprised if some future R-version would implement it as a primitive.
>Without the warning, implementing [.data.frame as a primitive would involve
>a LOT of issues where older code breaks. With the warning, we can make clear
>to any users that calls like this one are undefined. They may work for now, but
>one shouldn't rely on it. Which means only the "right" order may be used, and
>then naming them is superfluous.
>
>By the way, when trying some things I noticed something else, which I'll send
>a separate mail about...
>
>Cheers,
>Emil
>
>?On 29/11/2018, 09:20, "R-devel on behalf of Henrik P?rn" <r-devel-
>bounces at r-project.org on behalf of henrik.parn at ntnu.no> wrote:
>
>    Thanks Bill and Michael for taking the time to share your knowledge!
>
>    As a further background to my question, here are two examples that I
>forgot to include in my original post (reminded by Michael's answer). I
>swapped the i and j arguments in `[.data.frame` and `[<-.data.frame`. With
>warnings, but else without (?) problem. Using Bill's data:
>
>    `[.data.frame`(x = d, i = 1, j = 2)
>    # [1] 12
>
>    `[.data.frame`(x = d, j = 2, i = 1)
>    # [1] 12
>
>    And similar for `[<-.data.frame` :
>    `[<-.data.frame`(x = d, i = 1, j = 2, value = 1122)
>    `[<-.data.frame`(x = d, j = 2, i = 1, value = 12)
>
>    Because this seemed to work, I made the hasty conclusion that argument
>switching _wasn't_ a problem for `[.data frame`, and that we could rely on
>exact matching on tags. But apparently not: despite that `[.data.frame` and
>`[<-.data.frame` are _not_ primitive functions, positional matching is done
>there as well. Sometimes. At least when 'x' argument is not first, as shown in
>Bill's examples. Obviously my "test" was insufficient...
>
>    Cheers,
>
>    Henrik
>
>
>
>    From: William Dunlap <wdunlap at tibco.com>
>    Sent: Wednesday, November 28, 2018 9:10 PM
>    To: Henrik P?rn <henrik.parn at ntnu.no>
>    Cc: r-devel at r-project.org
>    Subject: Re: [Rd] named arguments discouraged in `[.data.frame` and `[<-
>.data.frame`
>
>    They can get bitten in the last two lines of this example, where the 'x'
>argument is not first:
>    > d <- data.frame(C1=c(r1=11,r2=21,r3=31), C2=c(12,22,32))
>    > d[1,1:2]
>       C1 C2
>    r1 11 12
>    > `[`(d,j=1:2,i=1)
>       C1 C2
>    r1 11 12
>    Warning message:
>    In `[.data.frame`(d, j = 1:2, i = 1) :
>      named arguments other than 'drop' are discouraged
>    > `[`(j=1:2,d,i=1)
>    Error in (1:2)[d, i = 1] : incorrect number of dimensions
>    > do.call("[", list(j=1:2, i=1, x=d))
>    Error in 1:2[i = 1, x = list(C1 = c(11, 21, 31), C2 = c(12, 22, 32))] :
>      incorrect number of dimensions
>
>    Bill Dunlap
>    TIBCO Software
>    wdunlap http://tibco.com
>
>
>    On Wed, Nov 28, 2018 at 11:30 AM Henrik P?rn
><mailto:henrik.parn at ntnu.no> wrote:
>    tl;dr:
>
>    Why are named arguments discouraged in `[.data.frame`, `[<-.data.frame`
>and `[[.data.frame`?
>
>    (because this question is of the kind 'why is R designed like this?', I though
>R-devel would be more appropriate than R-help)
>
>    #############################
>
>    Background:
>
>    Now and then students presents there fancy functions like this:
>
>    myfancyfun(d,12,0.3,0.2,500,1000,FALSE,TRUE,FALSE,TRUE,FALSE)
>
>    Incomprehensible. Thus, I encourage them to use spaces and name
>arguments, _at least_ when trying to communicate their code with others.
>Something like:
>
>    myfancyfun(data = d, n = 12, gamma = 0.3, prob = 0.2,
>                          size = 500, niter = 1000, model = FALSE,
>                         scale = TRUE, drop = FALSE, plot = TRUE, save = FALSE)
>
>
>    Then some overzealous students started to use named arguments
>everywhere. E-v-e-r-y-w-h-e-r-e. Even in the most basic situation when
>indexing vectors (as a subtle protest?), like:
>
>    vec <- 1:9
>
>    vec[i = 4]
>    `[`(x = vec, i = 4)
>
>    vec[[i = 4]]
>    `[[`(x = vec, i = 4)
>
>    vec[i = 4] <- 10
>    `[<-`(x = vec, i = 4, value = 10)
>
>    ...or when indexing matrices:
>
>    m <- matrix(vec, ncol = 3)
>    m[i = 2, j = 2]
>    `[`(x = m, i = 2, j = 2)
>    # 5
>
>    m[i = 2, j = 2] <- 0
>    `[<-`(x = m, i = 2, j = 2, value = 0)
>
>    ######
>
>    This practice indeed feels like overkill, but it didn't seem to hurt either. Until
>they used it on data frames. Then suddenly warnings appeared that named
>arguments are discouraged:
>
>    d <- data.frame(m)
>
>    d[[i = "X2"]]
>    # [1] 4 5 6
>    # Warning message:
>    # In `[[.data.frame`(d, i = "X2") :
>    #  named arguments other than 'exact' are discouraged
>
>    d[i = 2, j = 2]
>    # [1] 0
>    # Warning message:
>    # In `[.data.frame`(d, i = 2, j = 2) :
>    #  named arguments other than 'drop' are discouraged
>
>    d[i = 2, j = 2] <- 5
>    # Warning message:
>    # In `[<-.data.frame`(`*tmp*`, i = 2, j = 2, value = 5) :
>    #  named arguments are discouraged
>
>
>    ##################################
>
>    Of course I could tell them "don't do it, it's overkill and not common
>practice" or "it's just a warning, don't worry". However, I assume the warnings
>are there for a good reason.
>
>    So how do I explain to the students that named arguments are actively
>discouraged in `[.data.frame` and `[<-.data.frame`, but not in `[` and `[<-`?
>When will they get bitten?
>
>    ______________________________________________
>    mailto:R-devel at r-project.org mailing list
>    https://stat.ethz.ch/mailman/listinfo/r-devel
>    ______________________________________________
>    R-devel at r-project.org mailing list
>    https://stat.ethz.ch/mailman/listinfo/r-devel
>

From emil@bode @ending from d@n@@kn@w@nl  Thu Nov 29 11:09:23 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Thu, 29 Nov 2018 10:09:23 +0000
Subject: [Rd] Unexpected argument-matching when some are missing
Message-ID: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>

When trying out some variations with `[.data.frame` I noticed some (to me) odd behaviour, which I found out has nothing to do with `[.data.frame`, but rather with the way arguments are matched, when mixing named/unnamed and missing/non-missing arguments. Consider the following example:

 

myfun <- function(x,y,z) {

? print(match.call())

? cat('x=',if(missing(x)) 'missing' else x, '\n')

? cat('y=',if(missing(y)) 'missing' else y, '\n')

? cat('z=',if(missing(z)) 'missing' else z, '\n')

}

myfun(x=, y=, "z's value")

 

gives:

 

# myfun(x = "z's value")

# x= z's value 

# y= missing 

# z= missing

 

This seems very counterintuitive to me, I expect the arguments x and y to be missing, and z to get ?z?s value?. 

When I call myfun(,y=,"z's value"), x is missing, and y gets ?z?s value?.

Are my expectations wrong or is this a bug? And if my expectations are wrong, where can I find more information on argument-matching?

My gut-feeling says to call this a bug, but then I?m surprised no-one else has encountered it before.

 

And I don?t have multiple installations to work from, so could somebody else confirm this (if it?s not my expectations that are wrong) for R-devel/other R-versions/other platforms?

My setup: R 3.5.1, MacOS 10.13.6, both Rstudio 1.1.453 and R --vanilla from Bash

 

Best regards, 

Emil Bode 


From i@t@z@hn @ending from gm@il@com  Thu Nov 29 14:59:07 2018
From: i@t@z@hn @ending from gm@il@com (Ista Zahn)
Date: Thu, 29 Nov 2018 08:59:07 -0500
Subject: [Rd] Unexpected argument-matching when some are missing
In-Reply-To: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
References: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
Message-ID: <CA+vqiLGy1RHN-=zMcxGq8bmjVKE6BgON+r0GbjE4Q-D5t+tuVw@mail.gmail.com>

On Thu, Nov 29, 2018 at 5:09 AM Emil Bode <emil.bode at dans.knaw.nl> wrote:
>
> When trying out some variations with `[.data.frame` I noticed some (to me) odd behaviour, which I found out has nothing to do with `[.data.frame`, but rather with the way arguments are matched, when mixing named/unnamed and missing/non-missing arguments. Consider the following example:
>
>
>
> myfun <- function(x,y,z) {
>
>   print(match.call())
>
>   cat('x=',if(missing(x)) 'missing' else x, '\n')
>
>   cat('y=',if(missing(y)) 'missing' else y, '\n')
>
>   cat('z=',if(missing(z)) 'missing' else z, '\n')
>
> }
>
> myfun(x=, y=, "z's value")
>
>
>
> gives:
>
>
>
> # myfun(x = "z's value")
>
> # x= z's value
>
> # y= missing
>
> # z= missing
>
>
>
> This seems very counterintuitive to me, I expect the arguments x and y to be missing, and z to get ?z?s value?.

Interesting. I would expect it to throw an error, since "x=" is not
syntactically complete. What does "x=" mean anyway? It looks like R
interprets it as "x was not set to anything, i.e., is missing". That
seems reasonable, though I think the example itself is pathological
and would prefer that it produced an error.

--Ista
>
> When I call myfun(,y=,"z's value"), x is missing, and y gets ?z?s value?.
>
> Are my expectations wrong or is this a bug? And if my expectations are wrong, where can I find more information on argument-matching?
>
> My gut-feeling says to call this a bug, but then I?m surprised no-one else has encountered it before.
>
>
>
> And I don?t have multiple installations to work from, so could somebody else confirm this (if it?s not my expectations that are wrong) for R-devel/other R-versions/other platforms?
>
> My setup: R 3.5.1, MacOS 10.13.6, both Rstudio 1.1.453 and R --vanilla from Bash
>
>
>
> Best regards,
>
> Emil Bode
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From gor@n@bro@trom @ending from umu@@e  Thu Nov 29 16:24:12 2018
From: gor@n@bro@trom @ending from umu@@e (=?UTF-8?Q?G=c3=b6ran_Brostr=c3=b6m?=)
Date: Thu, 29 Nov 2018 16:24:12 +0100
Subject: [Rd] Small bug in the documentation of 'cut'
Message-ID: <24539c71-2631-bab1-fbb9-49f078831d63@umu.se>

The documentation of 'base::cut' says:

... the factor level labels are constructed as "(b1, b2]", "(b2, b3]" etc...

In reality, the spaces after the commas are missing. I like the 
documented behavior better than the actual, though.

 > sessionInfo()
R version 3.5.1 (2018-07-02)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.1 LTS

gb


From S@Elli@on @ending from LGCGroup@com  Thu Nov 29 16:48:02 2018
From: S@Elli@on @ending from LGCGroup@com (S Ellison)
Date: Thu, 29 Nov 2018 15:48:02 +0000
Subject: [Rd] Unexpected argument-matching when some are missing
In-Reply-To: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
References: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
Message-ID: <2ffdc3d61fcd4b098fa37a35a5cdffc9@GBDCVPEXC08.corp.lgc-group.com>

> When trying out some variations with `[.data.frame` I noticed some (to me)
> odd behaviour, 

Not just in 'myfun' ...

plot(x=1:10, y=)
plot(x=1:10, y=, 10:1)

In both cases, 'y=' is ignored. In the first, the plot is for y=NULL (so not 'missing' y)
In the second case, 10:1 is positionally matched to y despite the intervening 'missing' 'y='

So it isn't just 'missing'; it's 'not there at all'

Steve E

> -----Original Message-----
> From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Emil
> Bode
> Sent: 29 November 2018 10:09
> To: r-devel at r-project.org
> Subject: [Rd] Unexpected argument-matching when some are missing
> 
> When trying out some variations with `[.data.frame` I noticed some (to me)
> odd behaviour, which I found out has nothing to do with `[.data.frame`, but
> rather with the way arguments are matched, when mixing named/unnamed
> and missing/non-missing arguments. Consider the following example:
> 
> 
> 
> myfun <- function(x,y,z) {
> 
> ? print(match.call())
> 
> ? cat('x=',if(missing(x)) 'missing' else x, '\n')
> 
> ? cat('y=',if(missing(y)) 'missing' else y, '\n')
> 
> ? cat('z=',if(missing(z)) 'missing' else z, '\n')
> 
> }
> 
> myfun(x=, y=, "z's value")
> 
> 
> 
> gives:
> 
> 
> 
> # myfun(x = "z's value")
> 
> # x= z's value
> 
> # y= missing
> 
> # z= missing
> 
> 
> 
> This seems very counterintuitive to me, I expect the arguments x and y to be
> missing, and z to get ?z?s value?.
> 
> When I call myfun(,y=,"z's value"), x is missing, and y gets ?z?s value?.
> 
> Are my expectations wrong or is this a bug? And if my expectations are
> wrong, where can I find more information on argument-matching?
> 
> My gut-feeling says to call this a bug, but then I?m surprised no-one else has
> encountered it before.
> 
> 
> 
> And I don?t have multiple installations to work from, so could somebody else
> confirm this (if it?s not my expectations that are wrong) for R-devel/other R-
> versions/other platforms?
> 
> My setup: R 3.5.1, MacOS 10.13.6, both Rstudio 1.1.453 and R --vanilla from
> Bash
> 
> 
> 
> Best regards,
> 
> Emil Bode



*******************************************************************
This email and any attachments are confidential. Any use, copying or
disclosure other than by the intended recipient is unauthorised. If 
you have received this message in error, please notify the sender 
immediately via +44(0)20 8943 7000 or notify postmaster at lgcgroup.com 
and delete this message and any copies from your computer and network. 
LGC Limited. Registered in England 2991879. 
Registered office: Queens Road, Teddington, Middlesex, TW11 0LY, UK

From i@t@z@hn @ending from gm@il@com  Thu Nov 29 17:18:49 2018
From: i@t@z@hn @ending from gm@il@com (Ista Zahn)
Date: Thu, 29 Nov 2018 11:18:49 -0500
Subject: [Rd] Unexpected argument-matching when some are missing
In-Reply-To: <2ffdc3d61fcd4b098fa37a35a5cdffc9@GBDCVPEXC08.corp.lgc-group.com>
References: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
 <2ffdc3d61fcd4b098fa37a35a5cdffc9@GBDCVPEXC08.corp.lgc-group.com>
Message-ID: <CA+vqiLFUYr5-OzJ7FmrjhT5owEiTJ2Q9x-O5mbv-tx=9c8iCaA@mail.gmail.com>

On Thu, Nov 29, 2018 at 10:51 AM S Ellison <S.Ellison at lgcgroup.com> wrote:
>
> > When trying out some variations with `[.data.frame` I noticed some (to me)
> > odd behaviour,
>
> Not just in 'myfun' ...
>
> plot(x=1:10, y=)
> plot(x=1:10, y=, 10:1)
>
> In both cases, 'y=' is ignored. In the first, the plot is for y=NULL (so not 'missing' y)
> In the second case, 10:1 is positionally matched to y despite the intervening 'missing' 'y='
>
> So it isn't just 'missing'; it's 'not there at all'

What exactly is the difference between "missing" and "not there at all"?

--Ista

>
> Steve E
>
> > -----Original Message-----
> > From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Emil
> > Bode
> > Sent: 29 November 2018 10:09
> > To: r-devel at r-project.org
> > Subject: [Rd] Unexpected argument-matching when some are missing
> >
> > When trying out some variations with `[.data.frame` I noticed some (to me)
> > odd behaviour, which I found out has nothing to do with `[.data.frame`, but
> > rather with the way arguments are matched, when mixing named/unnamed
> > and missing/non-missing arguments. Consider the following example:
> >
> >
> >
> > myfun <- function(x,y,z) {
> >
> >   print(match.call())
> >
> >   cat('x=',if(missing(x)) 'missing' else x, '\n')
> >
> >   cat('y=',if(missing(y)) 'missing' else y, '\n')
> >
> >   cat('z=',if(missing(z)) 'missing' else z, '\n')
> >
> > }
> >
> > myfun(x=, y=, "z's value")
> >
> >
> >
> > gives:
> >
> >
> >
> > # myfun(x = "z's value")
> >
> > # x= z's value
> >
> > # y= missing
> >
> > # z= missing
> >
> >
> >
> > This seems very counterintuitive to me, I expect the arguments x and y to be
> > missing, and z to get ?z?s value?.
> >
> > When I call myfun(,y=,"z's value"), x is missing, and y gets ?z?s value?.
> >
> > Are my expectations wrong or is this a bug? And if my expectations are
> > wrong, where can I find more information on argument-matching?
> >
> > My gut-feeling says to call this a bug, but then I?m surprised no-one else has
> > encountered it before.
> >
> >
> >
> > And I don?t have multiple installations to work from, so could somebody else
> > confirm this (if it?s not my expectations that are wrong) for R-devel/other R-
> > versions/other platforms?
> >
> > My setup: R 3.5.1, MacOS 10.13.6, both Rstudio 1.1.453 and R --vanilla from
> > Bash
> >
> >
> >
> > Best regards,
> >
> > Emil Bode
>
>
>
> *******************************************************************
> This email and any attachments are confidential. Any u...{{dropped:11}}


From emil@bode @ending from d@n@@kn@w@nl  Thu Nov 29 17:47:21 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Thu, 29 Nov 2018 16:47:21 +0000
Subject: [Rd] Unexpected argument-matching when some are missing
In-Reply-To: <CA+vqiLGy1RHN-=zMcxGq8bmjVKE6BgON+r0GbjE4Q-D5t+tuVw@mail.gmail.com>
References: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
 <CA+vqiLGy1RHN-=zMcxGq8bmjVKE6BgON+r0GbjE4Q-D5t+tuVw@mail.gmail.com>
Message-ID: <F0B9D756-18EC-410B-A7FC-6D0AE0D41C12@dans.knaw.nl>

Well, I did mean it as "missing".
To me, it felt just as natural as providing an empty index for subsetting (e.g. some.data.frame[,,drop=FALSE])
I can't think of a whole lot of other uses than subsetting, but I think this issue may be mostly important when you're not entirely sure what a call is going to end up, when passing along arguments, or when calling an unknown function (as in variants of the apply-family, where you provide a function as an argument).
Or what happens if I use do.call(FUN, args=MyNamedList)? I have a bit more extensive example further down where you can more clearly see the unexpected output.

But the problem is that R does NOT treat it as simply "missing". That would have been reasonable, but instead, as in the example in my previous mail, 
myfun(x=, y=, "z's value") means x is assigned "z's value", and y and z are seen as missing. Which is not at all what I was expecting.

And is also not consistent with other behaviour, as myfun(,,"z's value") and myfun(x=, y=, z="z's value") do work as expected (at least what I was expecting)

The extensice example:
Suppose I want to write a function that selects data from some external source. In order to do this, we put the data in its own environment, where we look for variables called "df", "rows", "cols" and "drop", and use these to make a selection. I write this function:

doselect <- function(env) {
  do.call(`[.data.frame`, list(env$df, if(!is.null(env$rows)) env$rows, if(!is.null(env$cols)) env$cols, drop=if(!is.null(env$drop)) env$drop))
}

It works for this code:
myenv <- new.env()
assign('df', data.frame(a=1:2, b=3:4), myenv, inherits=FALSE)
assign('rows', 1, myenv, inherits=FALSE) # Code breaks if we don't have this line
assign('cols', 1, myenv, inherits=FALSE) # Code breaks if we don't have this line
assign('drop', FALSE, myenv, inherits=FALSE)
doselect(myenv)

But if we don't assign "rows" and/or "cols", the variable "drop" is inserted in the place of the first unnamed variable, so the result is the same as if calling
df[FALSE,,]:
[1] a b
<0 rows> (or 0-length row.names)

What I did expect was the same result as df[,,FALSE], i.e. the full data.frame. Of course I can rewrite the function "doselect", but I think my current call is how most people would write it (even though I admit the example in its entirety is far-fetched)


Best regards, 
Emil Bode
 

?On 29/11/2018, 14:58, "Ista Zahn" <istazahn at gmail.com> wrote:

    On Thu, Nov 29, 2018 at 5:09 AM Emil Bode <emil.bode at dans.knaw.nl> wrote:
    >
    > When trying out some variations with `[.data.frame` I noticed some (to me) odd behaviour, which I found out has nothing to do with `[.data.frame`, but rather with the way arguments are matched, when mixing named/unnamed and missing/non-missing arguments. Consider the following example:
    >
    > myfun <- function(x,y,z) {
    >   print(match.call())
    >   cat('x=',if(missing(x)) 'missing' else x, '\n')
    >   cat('y=',if(missing(y)) 'missing' else y, '\n')
    >   cat('z=',if(missing(z)) 'missing' else z, '\n')
    > }
    > myfun(x=, y=, "z's value")
    >
    > gives:
    >
    > # myfun(x = "z's value")
    > # x= z's value
    > # y= missing
    > # z= missing
    >
    > This seems very counterintuitive to me, I expect the arguments x and y to be missing, and z to get ?z?s value?.
    
    Interesting. I would expect it to throw an error, since "x=" is not
    syntactically complete. What does "x=" mean anyway? It looks like R
    interprets it as "x was not set to anything, i.e., is missing". That
    seems reasonable, though I think the example itself is pathological
    and would prefer that it produced an error.
    
    --Ista
    >
    > When I call myfun(,y=,"z's value"), x is missing, and y gets ?z?s value?.
   > Are my expectations wrong or is this a bug? And if my expectations are wrong, where can I find more information on argument-matching?
   > My gut-feeling says to call this a bug, but then I?m surprised no-one else has encountered it before.
   >
    > And I don?t have multiple installations to work from, so could somebody else confirm this (if it?s not my expectations that are wrong) for R-devel/other R-versions/other platforms?
    >
    > My setup: R 3.5.1, MacOS 10.13.6, both Rstudio 1.1.453 and R --vanilla from Bash
    >
    > Best regards,
    >
    > Emil Bode
    >
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel
    

From S@Elli@on @ending from LGCGroup@com  Thu Nov 29 19:10:27 2018
From: S@Elli@on @ending from LGCGroup@com (S Ellison)
Date: Thu, 29 Nov 2018 18:10:27 +0000
Subject: [Rd] Unexpected argument-matching when some are missing
In-Reply-To: <CA+vqiLFUYr5-OzJ7FmrjhT5owEiTJ2Q9x-O5mbv-tx=9c8iCaA@mail.gmail.com>
References: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
 <2ffdc3d61fcd4b098fa37a35a5cdffc9@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLFUYr5-OzJ7FmrjhT5owEiTJ2Q9x-O5mbv-tx=9c8iCaA@mail.gmail.com>
Message-ID: <f29d8c1252094e82a30ef8c92b8808d4@GBDCVPEXC08.corp.lgc-group.com>


> > plot(x=1:10, y=)
> > plot(x=1:10, y=, 10:1)
> >
> > In both cases, 'y=' is ignored. In the first, the plot is for y=NULL (so not
> 'missing' y)
> > In the second case, 10:1 is positionally matched to y despite the intervening
> 'missing' 'y='
> >
> > So it isn't just 'missing'; it's 'not there at all'
> 
> What exactly is the difference between "missing" and "not there at all"?

A "missing argument" in R means that an argument with no default value was omitted from the call, and that is what I meant by "missing".
But that is not what is happening here. I was talking about "y=" apparently being treated as not present in the call, rather than the argument y being treated as a missing argument.  

In these examples, plot.default has a default value for y (NULL) so y can never be "missing" in the sense of the 'missing argument' error (compare what happens with plot(y=1:10), which reports x as 'missing'). 
In the first example, y was (from the plot behaviour) taken as NULL - the default - so was not considered a missing argument. In the second, it was taken as 10:1 - again, non-missing, despite 10:1 being in the normal position for the (character) argument "type".
But neither call did anything at all with "y=". Instead, the behaviour is consistent with what would have happened if 'y=' were "not present at all" when counting position or named argument list, rather than if 'y' were an absent required argument. 
It _looks_ as if the initial call parsing silently ignored the malformed expression "y=" before any argument matching - positional or by name - takes place.

But I'm thinking that it'll take an R-core guru to explain what's going on here, so I was going to wait and see.

Steve Ellison



*******************************************************************
This email and any attachments are confidential. Any use, copying or
disclosure other than by the intended recipient is unauthorised. If 
you have received this message in error, please notify the sender 
immediately via +44(0)20 8943 7000 or notify postmaster at lgcgroup.com 
and delete this message and any copies from your computer and network. 
LGC Limited. Registered in England 2991879. 
Registered office: Queens Road, Teddington, Middlesex, TW11 0LY, UK

From i@t@z@hn @ending from gm@il@com  Thu Nov 29 20:30:10 2018
From: i@t@z@hn @ending from gm@il@com (Ista Zahn)
Date: Thu, 29 Nov 2018 14:30:10 -0500
Subject: [Rd] Unexpected argument-matching when some are missing
In-Reply-To: <f29d8c1252094e82a30ef8c92b8808d4@GBDCVPEXC08.corp.lgc-group.com>
References: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
 <2ffdc3d61fcd4b098fa37a35a5cdffc9@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLFUYr5-OzJ7FmrjhT5owEiTJ2Q9x-O5mbv-tx=9c8iCaA@mail.gmail.com>
 <f29d8c1252094e82a30ef8c92b8808d4@GBDCVPEXC08.corp.lgc-group.com>
Message-ID: <CA+vqiLF8DLiYx8Fp=QiHRtqA9_cNdxGWKe-SxVGq1QatZaCqnQ@mail.gmail.com>

On Thu, Nov 29, 2018 at 1:10 PM S Ellison <S.Ellison at lgcgroup.com> wrote:
>
>
> > > plot(x=1:10, y=)
> > > plot(x=1:10, y=, 10:1)
> > >
> > > In both cases, 'y=' is ignored. In the first, the plot is for y=NULL (so not
> > 'missing' y)
> > > In the second case, 10:1 is positionally matched to y despite the intervening
> > 'missing' 'y='
> > >
> > > So it isn't just 'missing'; it's 'not there at all'
> >
> > What exactly is the difference between "missing" and "not there at all"?
>
> A "missing argument" in R means that an argument with no default value was omitted from the call, and that is what I meant by "missing".
> But that is not what is happening here. I was talking about "y=" apparently being treated as not present in the call, rather than the argument y being treated as a missing argument.
>
> In these examples, plot.default has a default value for y (NULL) so y can never be "missing" in the sense of the 'missing argument' error (compare what happens with plot(y=1:10), which reports x as 'missing').
> In the first example, y was (from the plot behaviour) taken as NULL - the default - so was not considered a missing argument. In the second, it was taken as 10:1 - again, non-missing, despite 10:1 being in the normal position for the (character) argument "type".
> But neither call did anything at all with "y=". Instead, the behaviour is consistent with what would have happened if 'y=' were "not present at all" when counting position or named argument list, rather than if 'y' were an absent required argument.
> It _looks_ as if the initial call parsing silently ignored the malformed expression "y=" before any argument matching - positional or by name - takes place.

Yes, I think all of that is correct. But y _is_ missing in this sense:

> debug(plot)
> plot(1:10, y=)
debugging in: plot(1:10, y = )
debug: UseMethod("plot")
Browse[2]> missing(y)
[1] TRUE

though this does not explain the behavior since

> plot( , , "l")
debugging in: plot(, , "l")
debug: UseMethod("plot")
Browse[2]> missing(y)
[1] TRUE

--Ista
>
> But I'm thinking that it'll take an R-core guru to explain what's going on here, so I was going to wait and see.
>
> Steve Ellison
>
>
>
> *******************************************************************
> This email and any attachments are confidential. Any u...{{dropped:8}}


From emil@bode @ending from d@n@@kn@w@nl  Fri Nov 30 11:47:41 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Fri, 30 Nov 2018 10:47:41 +0000
Subject: [Rd] Unexpected argument-matching when some are missing
In-Reply-To: <f29d8c1252094e82a30ef8c92b8808d4@GBDCVPEXC08.corp.lgc-group.com>
References: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
 <2ffdc3d61fcd4b098fa37a35a5cdffc9@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLFUYr5-OzJ7FmrjhT5owEiTJ2Q9x-O5mbv-tx=9c8iCaA@mail.gmail.com>
 <f29d8c1252094e82a30ef8c92b8808d4@GBDCVPEXC08.corp.lgc-group.com>
Message-ID: <E088A346-19DB-47FC-A3EA-8B458E49B14E@dans.knaw.nl>

It looks like you're right that somewhere in (presumably) match.call, the named, empty arguments are removed, such that the call plot(x=1:10, y=, 10:1) is translated to plot(x=1:10, 10:1).
But I would have expected it to be the same as plot(x=1:10, , 10:1) (note the ", ,"), which gives an error (10:1 is not a valid plot-type). In this case you get an error straightaway, I find this more interesting:
> options(warn=-1)
> plot(x=1, y=, 'p', ylim=c(0,10))
> plot(x=1, , 'p', ylim=c(0,10))
Both valid (no errors), albeit strange calls, but I'd say the first call is better code, it's clearer you intend to not give any value for y. But exactly this one gives unexpected results: it tries to plot at position (1, 'p'), or (1, NA).

And the behaviour as it is gives rise to some strange inconsistencies. I have gathered some examples below (at the very bottom of the thread, as it got quite extensive), where some variations are surprisingly different from each other.
There are also some issues when using data.frame(...)[i=, j=,...], but at least here you are warned about naming i and j.
But basically, it means any function where arguments like fun(,,) are a valid possibility should throw the same warning, e.g. any R-code replacement of [.matrix or [.array, or as in my examples, for data.table (and related structures)

?On 29/11/2018, 19:10, "S Ellison" <S.Ellison at LGCGroup.com> wrote:

    
    > > plot(x=1:10, y=)
    > > plot(x=1:10, y=, 10:1)
    > >
    > > In both cases, 'y=' is ignored. In the first, the plot is for y=NULL (so not
    > 'missing' y)
    > > In the second case, 10:1 is positionally matched to y despite the intervening
    > 'missing' 'y='
    > >
    > > So it isn't just 'missing'; it's 'not there at all'
    > 
    > What exactly is the difference between "missing" and "not there at all"?
    
    A "missing argument" in R means that an argument with no default value was omitted from the call, and that is what I meant by "missing".
    But that is not what is happening here. I was talking about "y=" apparently being treated as not present in the call, rather than the argument y being treated as a missing argument.  
    
    In these examples, plot.default has a default value for y (NULL) so y can never be "missing" in the sense of the 'missing argument' error (compare what happens with plot(y=1:10), which reports x as 'missing'). 
    In the first example, y was (from the plot behaviour) taken as NULL - the default - so was not considered a missing argument. In the second, it was taken as 10:1 - again, non-missing, despite 10:1 being in the normal position for the (character) argument "type".
    But neither call did anything at all with "y=". Instead, the behaviour is consistent with what would have happened if 'y=' were "not present at all" when counting position or named argument list, rather than if 'y' were an absent required argument. 
    It _looks_ as if the initial call parsing silently ignored the malformed expression "y=" before any argument matching - positional or by name - takes place.
    
    But I'm thinking that it'll take an R-core guru to explain what's going on here, so I was going to wait and see.
    
    Steve Ellison
    

Exampled if what I (Emil) found odd:
---------------------------------------------------------------------------------------------------------------------------------------
> library(data.table)
> options(warn=1) # Or 2
> data.table(a=1:2, b=3:4)[1] # As expected
   a b
1: 1 3
> data.table(a=1:2, b=3:4)[, 1] # As expected
   a
1: 1
2: 2
> data.table(a=1:2, b=3:4)[i=, 1] # Huh? We get the first row
   a b
1: 1 3
> data.table(a=1:2, b=3:4)[, 1, 'a'] # As expected
   a V1
1: 1  1
2: 2  1
> data.table(a=1:2, b=3:4)[i=, 1, 'a'] # I would have expected the same result, and definitely more than 1 value
   a
1: 1
> data.table(a=1:2, b=3:4)[i=, 1, by='a'] # And this doesn't work?
Error in `[.data.table`(data.table(a = 1:2, b = 3:4), i = , 1, by = "a") : 
  'by' or 'keyby' is supplied but not j
> myfun <- function(x,y,z) {
+   print(match.call())
+   cat('nargs: ', nargs(), '\n')
+   cat('x=',if(missing(x)) 'missing' else x, '\n')
+   cat('y=',if(missing(y)) 'missing' else y, '\n')
+   cat('z=',if(missing(z)) 'missing' else z, '\n')
+ }
> myfun(x=, y=, , , "z's value") # 5 arguments??
myfun(z = "z's value")
nargs:  5 
x= missing 
y= missing 
z= z's value 
> myfun(x=, y=, , , "z's value", , ) # But any more are not allowed
Error in myfun(x = , y = , , , "z's value", , ) : 
  unused arguments (alist(, ))
> myfun(x2=, y=, "z's value") # And named arguments are ignored, but the names have to be to existing argument-names
Error in myfun(x2 = , y = , "z's value") : unused argument (alist(x2 = ))
> myfun(x=, x=, , "z's value") # And naming it multiple times also gives an error
Error in myfun(x = , x = , , "z's value") : 
  formal argument "x" matched by multiple actual arguments
> myfun(y=, , "z's value", x=3) # Having fun with obfuscation, is this call backwards and forwards compatible?
myfun(x = 3, z = "z's value")
nargs:  4 
x= 3 
y= missing 
z= z's value 
> myfun(y=rlang::missing_arg(), , "z's value", x=3)
Error in myfun(y = rlang::missing_arg(), , "z's value", x = 3) : 
  unused argument ("z's value")
> myfun(y=rlang::missing_arg(), z=, "z's value", x=3) # Now with a named empty argument
myfun(x = 3, y = rlang::missing_arg(), z = "z's value")
nargs:  4 
x= 3 
y=  
z= z's value 
> myfun(y=rlang::missing_arg(), z= "z's value", x=3) # Just a comma removed: same match.call(), different nargs()
myfun(x = 3, y = rlang::missing_arg(), z = "z's value")
nargs:  3 
x= 3 
y=  
z= z's value


From S@Elli@on @ending from LGCGroup@com  Fri Nov 30 15:34:59 2018
From: S@Elli@on @ending from LGCGroup@com (S Ellison)
Date: Fri, 30 Nov 2018 14:34:59 +0000
Subject: [Rd] Unexpected argument-matching when some are missing
In-Reply-To: <CA+vqiLF8DLiYx8Fp=QiHRtqA9_cNdxGWKe-SxVGq1QatZaCqnQ@mail.gmail.com>
References: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
 <2ffdc3d61fcd4b098fa37a35a5cdffc9@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLFUYr5-OzJ7FmrjhT5owEiTJ2Q9x-O5mbv-tx=9c8iCaA@mail.gmail.com>
 <f29d8c1252094e82a30ef8c92b8808d4@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLF8DLiYx8Fp=QiHRtqA9_cNdxGWKe-SxVGq1QatZaCqnQ@mail.gmail.com>
Message-ID: <b42a529f59634ed282821ddd23608e26@GBDCVPEXC08.corp.lgc-group.com>

> Yes, I think all of that is correct. But y _is_ missing in this sense:
> > plot(1:10, y=)
> > ...
> Browse[2]> missing(y)

Although I said what I meant by 'missing' vs 'not present', it wasn't exactly what missing() means. My bad.
missing() returns TRUE if an argument is not specified in the call _whether or not_ it has a default, hence the behaviour of missing(y) in debug(plot).

But we can easily find out whether a default has been assigned:
plot(1:10, y=, type=)
Browse[2]> y
NULL
Browse[2]> type
"p"

... which is consistent with silent omission of 'y=' and 'type=' 


Still waiting for a guru...

Steve E



*******************************************************************
This email and any attachments are confidential. Any use, copying or
disclosure other than by the intended recipient is unauthorised. If 
you have received this message in error, please notify the sender 
immediately via +44(0)20 8943 7000 or notify postmaster at lgcgroup.com 
and delete this message and any copies from your computer and network. 
LGC Limited. Registered in England 2991879. 
Registered office: Queens Road, Teddington, Middlesex, TW11 0LY, UK

From emil@bode @ending from d@n@@kn@w@nl  Fri Nov 30 17:17:48 2018
From: emil@bode @ending from d@n@@kn@w@nl (Emil Bode)
Date: Fri, 30 Nov 2018 16:17:48 +0000
Subject: [Rd] Unexpected argument-matching when some are missing
In-Reply-To: <b42a529f59634ed282821ddd23608e26@GBDCVPEXC08.corp.lgc-group.com>
References: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
 <2ffdc3d61fcd4b098fa37a35a5cdffc9@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLFUYr5-OzJ7FmrjhT5owEiTJ2Q9x-O5mbv-tx=9c8iCaA@mail.gmail.com>
 <f29d8c1252094e82a30ef8c92b8808d4@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLF8DLiYx8Fp=QiHRtqA9_cNdxGWKe-SxVGq1QatZaCqnQ@mail.gmail.com>
 <b42a529f59634ed282821ddd23608e26@GBDCVPEXC08.corp.lgc-group.com>
Message-ID: <F12950C3-65ED-457A-82BF-310F90EF9609@dans.knaw.nl>

But the main point is where arguments are mixed together:

> debugonce(plot.default)
> plot(x=1:10, y=, 'l')
...
Browse[2]> missing(y)
[1] FALSE
Browse[2]> y
[1] "l"
Browse[2]> type
[1] "p"

I think that's what I fall over mostly: that named, empty arguments behave entirely different from omitting them (", ,")

And I definitely agree we need a guru to explain it all to us (

Cheers, Emil Bode


?On 30/11/2018, 15:35, "S Ellison" <S.Ellison at LGCGroup.com> wrote:

    > Yes, I think all of that is correct. But y _is_ missing in this sense:
    > > plot(1:10, y=)
    > > ...
    > Browse[2]> missing(y)
    
    Although I said what I meant by 'missing' vs 'not present', it wasn't exactly what missing() means. My bad.
    missing() returns TRUE if an argument is not specified in the call _whether or not_ it has a default, hence the behaviour of missing(y) in debug(plot).
    
    But we can easily find out whether a default has been assigned:
    plot(1:10, y=, type=)
    Browse[2]> y
    NULL
    Browse[2]> type
    "p"
    
    ... which is consistent with silent omission of 'y=' and 'type=' 
    
    
    Still waiting for a guru...
    
    Steve E
    
    
    
    *******************************************************************
    This email and any attachments are confidential. Any use, copying or
    disclosure other than by the intended recipient is unauthorised. If 
    you have received this message in error, please notify the sender 
    immediately via +44(0)20 8943 7000 or notify postmaster at lgcgroup.com 
    and delete this message and any copies from your computer and network. 
    LGC Limited. Registered in England 2991879. 
    Registered office: Queens Road, Teddington, Middlesex, TW11 0LY, UK
    

From l@wrence@mich@el @ending from gene@com  Fri Nov 30 17:24:31 2018
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Fri, 30 Nov 2018 08:24:31 -0800
Subject: [Rd] Unexpected argument-matching when some are missing
In-Reply-To: <F12950C3-65ED-457A-82BF-310F90EF9609@dans.knaw.nl>
References: <AA681EA4-D0C7-4A2F-A719-01E510635C45@dans.knaw.nl>
 <2ffdc3d61fcd4b098fa37a35a5cdffc9@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLFUYr5-OzJ7FmrjhT5owEiTJ2Q9x-O5mbv-tx=9c8iCaA@mail.gmail.com>
 <f29d8c1252094e82a30ef8c92b8808d4@GBDCVPEXC08.corp.lgc-group.com>
 <CA+vqiLF8DLiYx8Fp=QiHRtqA9_cNdxGWKe-SxVGq1QatZaCqnQ@mail.gmail.com>
 <b42a529f59634ed282821ddd23608e26@GBDCVPEXC08.corp.lgc-group.com>
 <F12950C3-65ED-457A-82BF-310F90EF9609@dans.knaw.nl>
Message-ID: <CAOQ5Nydwa1CqaA2oYmDwcVaWpg8Z6gRqDC2Ze4RG-Jcb-z_uWQ@mail.gmail.com>

Argument matching is by name first, then the still missing arguments
are filled positionally. Unnamed missing arguments are thus left
missing. Does that help?

Michael
On Fri, Nov 30, 2018 at 8:18 AM Emil Bode <emil.bode at dans.knaw.nl> wrote:
>
> But the main point is where arguments are mixed together:
>
> > debugonce(plot.default)
> > plot(x=1:10, y=, 'l')
> ...
> Browse[2]> missing(y)
> [1] FALSE
> Browse[2]> y
> [1] "l"
> Browse[2]> type
> [1] "p"
>
> I think that's what I fall over mostly: that named, empty arguments behave entirely different from omitting them (", ,")
>
> And I definitely agree we need a guru to explain it all to us (
>
> Cheers, Emil Bode
>
>
> ?On 30/11/2018, 15:35, "S Ellison" <S.Ellison at LGCGroup.com> wrote:
>
>     > Yes, I think all of that is correct. But y _is_ missing in this sense:
>     > > plot(1:10, y=)
>     > > ...
>     > Browse[2]> missing(y)
>
>     Although I said what I meant by 'missing' vs 'not present', it wasn't exactly what missing() means. My bad.
>     missing() returns TRUE if an argument is not specified in the call _whether or not_ it has a default, hence the behaviour of missing(y) in debug(plot).
>
>     But we can easily find out whether a default has been assigned:
>     plot(1:10, y=, type=)
>     Browse[2]> y
>     NULL
>     Browse[2]> type
>     "p"
>
>     ... which is consistent with silent omission of 'y=' and 'type='
>
>
>     Still waiting for a guru...
>
>     Steve E
>
>
>
>     *******************************************************************
>     This email and any attachments are confidential. Any use, copying or
>     disclosure other than by the intended recipient is unauthorised. If
>     you have received this message in error, please notify the sender
>     immediately via +44(0)20 8943 7000 or notify postmaster at lgcgroup.com
>     and delete this message and any copies from your computer and network.
>     LGC Limited. Registered in England 2991879.
>     Registered office: Queens Road, Teddington, Middlesex, TW11 0LY, UK
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


