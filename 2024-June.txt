From rub|@n@v|@n@ @end|ng |rom gm@||@com  Mon Jun  3 21:30:25 2024
From: rub|@n@v|@n@ @end|ng |rom gm@||@com (Rubiana Viana)
Date: Mon, 3 Jun 2024 16:30:25 -0300
Subject: [Rd] R for Windows FAQ
Message-ID: <CABz3Tr1qHNdFmL5muFyhQYAjFAEXXu8HZr22-ZzDPXKzHdsjEw@mail.gmail.com>

Hi!

How can I get older versions of R software?

Thank you!

-- 
*Rubiana Viana*
Psic?loga e Mestra em Sociologia Pol?tica
G?nero Ra?a e Direitos Humanos ? Pesquisa ? Projetos ? Cultura e
Diversidade
LinkedIn <https://www.linkedin.com/in/rubiana-viana/>| Portfolio
<https://readymag.website/u2474224357/rubianaviana/> | Lattes
<http://lattes.cnpq.br/1002116427542223>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Jun  3 22:00:34 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 3 Jun 2024 22:00:34 +0200
Subject: [Rd] R for Windows FAQ
In-Reply-To: <CABz3Tr1qHNdFmL5muFyhQYAjFAEXXu8HZr22-ZzDPXKzHdsjEw@mail.gmail.com>
References: <CABz3Tr1qHNdFmL5muFyhQYAjFAEXXu8HZr22-ZzDPXKzHdsjEw@mail.gmail.com>
Message-ID: <a0421657-4a9f-41c3-add3-18d766e14f8d@gmail.com>

https://cran.r-project.org/bin/windows/base/old/

Tomas

On 6/3/24 21:30, Rubiana Viana wrote:
> Hi!
>
> How can I get older versions of R software?
>
> Thank you!
>


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Jun  6 16:47:02 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 6 Jun 2024 09:47:02 -0500 (CDT)
Subject: [Rd] clarifying and adjusting the C API for R
Message-ID: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>

This is an update on some current work on the C API for use in R
extensions.

The internal R implementation makes use of tens of thousands of C
entry points. On Linux and Windows, which support visibility
restrictions, most of these are visible only within the R executble or
shared library. About 1500 are not hidden and are visible to
dynamically loaded shared libraries, such as ones in packages, and to
embedding applications.

There are two main reasons for limiting access to entry points in a
software framework:

- Some entry points are very easy to use in ways that corrupt internal
   data, leading to segfaults or, worse, incorrect computations without
   segfaults.

- Some entry point expose internal structure and other implementation
   details, which makes it hard to make improvements without breaking
   client code that has come to depend on these details.

The API of C entry points that can be used in R extensions, both for
packages and embedding, has evolved organically over many years. The
definition for the current release expressed in the Writing R
Extensions manual (WRE) is roughly:

     An entry point can be used if (1) it is declared in a header file
     in R.home("include"), and (2) if it is documented for use in WRE.

Ideally, (1) would be necessary and sufficient, but for a variety of
reasons that isn't achievable, at least not in the near term. (2) can
be challenging to determine; in particular, it is not amenable to a
computational answer.

An experimental effort is underway to add annotations to the WRE
Texinfo source to allow (2) to be answered unambiguously. The
annotations so far mostly reflect my reading or WRE and may be revised
as they are reviewed by others. The annotated document can be used for
programmatically identifying what is currently considered part of the C
API. The result so far is an experimental function tools:::funAPI():

     > head(tools:::funAPI())
 		     name                    loc apitype
     1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
     2        alloc3DArray                    WRE     api
     3          allocArray                    WRE     api
     4           allocLang                    WRE     api
     5           allocList                    WRE     api
     6         allocMatrix                    WRE     api

The 'apitype' field has three possible levels

     | api  | stable (ideally) API |
     | eapi | experimental API     |
     | emb  | embedding API        |

Entry points in the embedded API would typically only be used in
applications embedding R or providing new front ends, but might be
reasonable to use in packages that support embedding.

The 'loc' field indicates how the entry point is identified as part of
an API: explicit mention in WRE, or declaration in a header file
identified as fully part of an API.

[tools:::funAPI() may not be completely accurate as it relies on
regular expressions for examining header files considered part of the
API rather than proper parsing. But it seems to be pretty close to
what can be achieved with proper parsing.  Proper parsing would add
dependencies on additional tools, which I would like to avoid for
now. One dependency already present is that a C compiler has to be on
the search path and cc -E has to run the C pre-processor.]

Two additional experimental functions are available for analyzing
package compliance: tools:::checkPkgAPI and tools:::checkAllPkgsAPI.
These examine installed packages.

[These may produce some false positives on macOS; they may or may not
work on Windows at this point.]

Using these tools initially showed around 200 non-API entry points
used across packages on CRAN and BIOC. Ideally this number should be
reduced to zero. This will require a combination of additions to the
API and changes in packages.

Some entry points can safely be added to the API. Around 40 have
already been added to WRE with API annotations; another 40 or so can
probably be added after review.

The remainder mostly fall into two groups:

- Entry points that should never be used in packages, such as
   SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for that
   matter) that can create inconsistent or corrupt internal state.

- Entry points that depend on the existence of internal structure that
   might be subject to change, such as the existence of promise objects
   or internal structure of environments.

Many, if not most, of these seem to be used in idioms that can either
be accomplished with existing higher-level functions already in the
API, or by new higher level functions that can be created and
added. Working through these will take some time and coordination
between R-core and maintainers of affected packages.

Once things have gelled a bit more I hope to turn this into a blog
post that will include some examples of moving non-API entry point
uses into compliance.

Best,

luke

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From h@w|ckh@m @end|ng |rom gm@||@com  Fri Jun  7 15:00:44 2024
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Fri, 7 Jun 2024 08:00:44 -0500
Subject: [Rd] clarifying and adjusting the C API for R
In-Reply-To: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
Message-ID: <CABdHhvHJcQdty3KzeCVKMOusokBRKWH=znu1HJM6722ROsY1Mg@mail.gmail.com>

Thanks for working on this Luke! We appreciate your efforts to make it
easier to tell what's in the exported API and we're very happy to work with
you on any changes needed to tidyverse/r-lib packages.

Hadley

On Thu, Jun 6, 2024 at 9:47?AM luke-tierney--- via R-devel <
r-devel at r-project.org> wrote:

> This is an update on some current work on the C API for use in R
> extensions.
>
> The internal R implementation makes use of tens of thousands of C
> entry points. On Linux and Windows, which support visibility
> restrictions, most of these are visible only within the R executble or
> shared library. About 1500 are not hidden and are visible to
> dynamically loaded shared libraries, such as ones in packages, and to
> embedding applications.
>
> There are two main reasons for limiting access to entry points in a
> software framework:
>
> - Some entry points are very easy to use in ways that corrupt internal
>    data, leading to segfaults or, worse, incorrect computations without
>    segfaults.
>
> - Some entry point expose internal structure and other implementation
>    details, which makes it hard to make improvements without breaking
>    client code that has come to depend on these details.
>
> The API of C entry points that can be used in R extensions, both for
> packages and embedding, has evolved organically over many years. The
> definition for the current release expressed in the Writing R
> Extensions manual (WRE) is roughly:
>
>      An entry point can be used if (1) it is declared in a header file
>      in R.home("include"), and (2) if it is documented for use in WRE.
>
> Ideally, (1) would be necessary and sufficient, but for a variety of
> reasons that isn't achievable, at least not in the near term. (2) can
> be challenging to determine; in particular, it is not amenable to a
> computational answer.
>
> An experimental effort is underway to add annotations to the WRE
> Texinfo source to allow (2) to be answered unambiguously. The
> annotations so far mostly reflect my reading or WRE and may be revised
> as they are reviewed by others. The annotated document can be used for
> programmatically identifying what is currently considered part of the C
> API. The result so far is an experimental function tools:::funAPI():
>
>      > head(tools:::funAPI())
>                      name                    loc apitype
>      1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
>      2        alloc3DArray                    WRE     api
>      3          allocArray                    WRE     api
>      4           allocLang                    WRE     api
>      5           allocList                    WRE     api
>      6         allocMatrix                    WRE     api
>
> The 'apitype' field has three possible levels
>
>      | api  | stable (ideally) API |
>      | eapi | experimental API     |
>      | emb  | embedding API        |
>
> Entry points in the embedded API would typically only be used in
> applications embedding R or providing new front ends, but might be
> reasonable to use in packages that support embedding.
>
> The 'loc' field indicates how the entry point is identified as part of
> an API: explicit mention in WRE, or declaration in a header file
> identified as fully part of an API.
>
> [tools:::funAPI() may not be completely accurate as it relies on
> regular expressions for examining header files considered part of the
> API rather than proper parsing. But it seems to be pretty close to
> what can be achieved with proper parsing.  Proper parsing would add
> dependencies on additional tools, which I would like to avoid for
> now. One dependency already present is that a C compiler has to be on
> the search path and cc -E has to run the C pre-processor.]
>
> Two additional experimental functions are available for analyzing
> package compliance: tools:::checkPkgAPI and tools:::checkAllPkgsAPI.
> These examine installed packages.
>
> [These may produce some false positives on macOS; they may or may not
> work on Windows at this point.]
>
> Using these tools initially showed around 200 non-API entry points
> used across packages on CRAN and BIOC. Ideally this number should be
> reduced to zero. This will require a combination of additions to the
> API and changes in packages.
>
> Some entry points can safely be added to the API. Around 40 have
> already been added to WRE with API annotations; another 40 or so can
> probably be added after review.
>
> The remainder mostly fall into two groups:
>
> - Entry points that should never be used in packages, such as
>    SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for that
>    matter) that can create inconsistent or corrupt internal state.
>
> - Entry points that depend on the existence of internal structure that
>    might be subject to change, such as the existence of promise objects
>    or internal structure of environments.
>
> Many, if not most, of these seem to be used in idioms that can either
> be accomplished with existing higher-level functions already in the
> API, or by new higher level functions that can be created and
> added. Working through these will take some time and coordination
> between R-core and maintainers of affected packages.
>
> Once things have gelled a bit more I hope to turn this into a blog
> post that will include some examples of moving non-API entry point
> uses into compliance.
>
> Best,
>
> luke
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From @d|rk@e @end|ng |rom g@m@@com  Fri Jun  7 15:24:57 2024
From: @d|rk@e @end|ng |rom g@m@@com (Steven Dirkse)
Date: Fri, 7 Jun 2024 09:24:57 -0400
Subject: [Rd] clarifying and adjusting the C API for R
In-Reply-To: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
Message-ID: <CAHiA-ZnQK238zu6yXAxCNBASP6LX+74S8LjvOfmC-9ujiAcU+g@mail.gmail.com>

Thanks for sharing this overview of an interesting and much-needed project.

You mention that R exports about 1500 symbols (on platforms supporting
visibility) but this subject isn't mentioned explicitly again in your note,
so I'm wondering how things tie together.  Un-exported symbols cannot be
part of the API - how would people use them in this case?  In a perfect
world the set of exported symbols could define the API or match it exactly,
but I guess that isn't the case at present.  So I conclude that R exports
extra (i.e. non-API) symbols.  Is part of the goal to remove these extra
exports?

-Steve

On Thu, Jun 6, 2024 at 10:47?AM luke-tierney--- via R-devel <
r-devel at r-project.org> wrote:

> This is an update on some current work on the C API for use in R
> extensions.
>
> The internal R implementation makes use of tens of thousands of C
> entry points. On Linux and Windows, which support visibility
> restrictions, most of these are visible only within the R executble or
> shared library. About 1500 are not hidden and are visible to
> dynamically loaded shared libraries, such as ones in packages, and to
> embedding applications.
>
> There are two main reasons for limiting access to entry points in a
> software framework:
>
> - Some entry points are very easy to use in ways that corrupt internal
>    data, leading to segfaults or, worse, incorrect computations without
>    segfaults.
>
> - Some entry point expose internal structure and other implementation
>    details, which makes it hard to make improvements without breaking
>    client code that has come to depend on these details.
>
> The API of C entry points that can be used in R extensions, both for
> packages and embedding, has evolved organically over many years. The
> definition for the current release expressed in the Writing R
> Extensions manual (WRE) is roughly:
>
>      An entry point can be used if (1) it is declared in a header file
>      in R.home("include"), and (2) if it is documented for use in WRE.
>
> Ideally, (1) would be necessary and sufficient, but for a variety of
> reasons that isn't achievable, at least not in the near term. (2) can
> be challenging to determine; in particular, it is not amenable to a
> computational answer.
>
> An experimental effort is underway to add annotations to the WRE
> Texinfo source to allow (2) to be answered unambiguously. The
> annotations so far mostly reflect my reading or WRE and may be revised
> as they are reviewed by others. The annotated document can be used for
> programmatically identifying what is currently considered part of the C
> API. The result so far is an experimental function tools:::funAPI():
>
>      > head(tools:::funAPI())
>                      name                    loc apitype
>      1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
>      2        alloc3DArray                    WRE     api
>      3          allocArray                    WRE     api
>      4           allocLang                    WRE     api
>      5           allocList                    WRE     api
>      6         allocMatrix                    WRE     api
>
> The 'apitype' field has three possible levels
>
>      | api  | stable (ideally) API |
>      | eapi | experimental API     |
>      | emb  | embedding API        |
>
> Entry points in the embedded API would typically only be used in
> applications embedding R or providing new front ends, but might be
> reasonable to use in packages that support embedding.
>
> The 'loc' field indicates how the entry point is identified as part of
> an API: explicit mention in WRE, or declaration in a header file
> identified as fully part of an API.
>
> [tools:::funAPI() may not be completely accurate as it relies on
> regular expressions for examining header files considered part of the
> API rather than proper parsing. But it seems to be pretty close to
> what can be achieved with proper parsing.  Proper parsing would add
> dependencies on additional tools, which I would like to avoid for
> now. One dependency already present is that a C compiler has to be on
> the search path and cc -E has to run the C pre-processor.]
>
> Two additional experimental functions are available for analyzing
> package compliance: tools:::checkPkgAPI and tools:::checkAllPkgsAPI.
> These examine installed packages.
>
> [These may produce some false positives on macOS; they may or may not
> work on Windows at this point.]
>
> Using these tools initially showed around 200 non-API entry points
> used across packages on CRAN and BIOC. Ideally this number should be
> reduced to zero. This will require a combination of additions to the
> API and changes in packages.
>
> Some entry points can safely be added to the API. Around 40 have
> already been added to WRE with API annotations; another 40 or so can
> probably be added after review.
>
> The remainder mostly fall into two groups:
>
> - Entry points that should never be used in packages, such as
>    SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for that
>    matter) that can create inconsistent or corrupt internal state.
>
> - Entry points that depend on the existence of internal structure that
>    might be subject to change, such as the existence of promise objects
>    or internal structure of environments.
>
> Many, if not most, of these seem to be used in idioms that can either
> be accomplished with existing higher-level functions already in the
> API, or by new higher level functions that can be created and
> added. Working through these will take some time and coordination
> between R-core and maintainers of affected packages.
>
> Once things have gelled a bit more I hope to turn this into a blog
> post that will include some examples of moving non-API entry point
> uses into compliance.
>
> Best,
>
> luke
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Jun  7 16:30:24 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 7 Jun 2024 09:30:24 -0500 (CDT)
Subject: [Rd] [External] Re:  clarifying and adjusting the C API for R
In-Reply-To: <CAHiA-ZnQK238zu6yXAxCNBASP6LX+74S8LjvOfmC-9ujiAcU+g@mail.gmail.com>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
 <CAHiA-ZnQK238zu6yXAxCNBASP6LX+74S8LjvOfmC-9ujiAcU+g@mail.gmail.com>
Message-ID: <6ca3dc90-b06d-1678-8faf-4c8d382dd8b3@uiowa.edu>

On Fri, 7 Jun 2024, Steven Dirkse wrote:

> You don't often get email from sdirkse at gams.com. Learn why this is important
> Thanks for sharing this overview of an interesting and much-needed project.
> You mention that R exports about 1500 symbols (on platforms supporting
> visibility) but this subject isn't mentioned explicitly again in your note,
> so I'm wondering how things?tie together.? Un-exported symbols cannot be
> part of the API - how would people use them in this case?? In a perfect
> world the set of exported symbols could define the API or match it exactly,
> but I guess that isn't the case at present.? So I conclude that R exports
> extra (i.e. non-API) symbols.? Is part of the goal to remove these extra
> exports?

No. We'll hide what we can, but base packages for one need access to
some entry points that should not be in the API, so those have to stay
un-hidden.

Best,

luke

> 
> -Steve
> 
> On Thu, Jun 6, 2024 at 10:47?AM luke-tierney--- via R-devel
> <r-devel at r-project.org> wrote:
>       This is an update on some current work on the C API for use in R
>       extensions.
>
>       The internal R implementation makes use of tens of thousands of
>       C
>       entry points. On Linux and Windows, which support visibility
>       restrictions, most of these are visible only within the R
>       executble or
>       shared library. About 1500 are not hidden and are visible to
>       dynamically loaded shared libraries, such as ones in packages,
>       and to
>       embedding applications.
>
>       There are two main reasons for limiting access to entry points
>       in a
>       software framework:
>
>       - Some entry points are very easy to use in ways that corrupt
>       internal
>       ? ?data, leading to segfaults or, worse, incorrect computations
>       without
>       ? ?segfaults.
>
>       - Some entry point expose internal structure and other
>       implementation
>       ? ?details, which makes it hard to make improvements without
>       breaking
>       ? ?client code that has come to depend on these details.
>
>       The API of C entry points that can be used in R extensions, both
>       for
>       packages and embedding, has evolved organically over many years.
>       The
>       definition for the current release expressed in the Writing R
>       Extensions manual (WRE) is roughly:
>
>       ? ? ?An entry point can be used if (1) it is declared in a
>       header file
>       ? ? ?in R.home("include"), and (2) if it is documented for use
>       in WRE.
>
>       Ideally, (1) would be necessary and sufficient, but for a
>       variety of
>       reasons that isn't achievable, at least not in the near term.
>       (2) can
>       be challenging to determine; in particular, it is not amenable
>       to a
>       computational answer.
>
>       An experimental effort is underway to add annotations to the WRE
>       Texinfo source to allow (2) to be answered unambiguously. The
>       annotations so far mostly reflect my reading or WRE and may be
>       revised
>       as they are reviewed by others. The annotated document can be
>       used for
>       programmatically identifying what is currently considered part
>       of the C
>       API. The result so far is an experimental function
>       tools:::funAPI():
>
>       ? ? ?> head(tools:::funAPI())
>       ? ? ? ? ? ? ? ? ? ? ?name? ? ? ? ? ? ? ? ? ? loc apitype
>       ? ? ?1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h? ? eapi
>       ? ? ?2? ? ? ? alloc3DArray? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?3? ? ? ? ? allocArray? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?4? ? ? ? ? ?allocLang? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?5? ? ? ? ? ?allocList? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?6? ? ? ? ?allocMatrix? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>
>       The 'apitype' field has three possible levels
>
>       ? ? ?| api? | stable (ideally) API |
>       ? ? ?| eapi | experimental API? ? ?|
>       ? ? ?| emb? | embedding API? ? ? ? |
>
>       Entry points in the embedded API would typically only be used in
>       applications embedding R or providing new front ends, but might
>       be
>       reasonable to use in packages that support embedding.
>
>       The 'loc' field indicates how the entry point is identified as
>       part of
>       an API: explicit mention in WRE, or declaration in a header file
>       identified as fully part of an API.
>
>       [tools:::funAPI() may not be completely accurate as it relies on
>       regular expressions for examining header files considered part
>       of the
>       API rather than proper parsing. But it seems to be pretty close
>       to
>       what can be achieved with proper parsing.? Proper parsing would
>       add
>       dependencies on additional tools, which I would like to avoid
>       for
>       now. One dependency already present is that a C compiler has to
>       be on
>       the search path and cc -E has to run the C pre-processor.]
>
>       Two additional experimental functions are available for
>       analyzing
>       package compliance: tools:::checkPkgAPI and
>       tools:::checkAllPkgsAPI.
>       These examine installed packages.
>
>       [These may produce some false positives on macOS; they may or
>       may not
>       work on Windows at this point.]
>
>       Using these tools initially showed around 200 non-API entry
>       points
>       used across packages on CRAN and BIOC. Ideally this number
>       should be
>       reduced to zero. This will require a combination of additions to
>       the
>       API and changes in packages.
>
>       Some entry points can safely be added to the API. Around 40 have
>       already been added to WRE with API annotations; another 40 or so
>       can
>       probably be added after review.
>
>       The remainder mostly fall into two groups:
>
>       - Entry points that should never be used in packages, such as
>       ? ?SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for
>       that
>       ? ?matter) that can create inconsistent or corrupt internal
>       state.
>
>       - Entry points that depend on the existence of internal
>       structure that
>       ? ?might be subject to change, such as the existence of promise
>       objects
>       ? ?or internal structure of environments.
>
>       Many, if not most, of these seem to be used in idioms that can
>       either
>       be accomplished with existing higher-level functions already in
>       the
>       API, or by new higher level functions that can be created and
>       added. Working through these will take some time and
>       coordination
>       between R-core and maintainers of affected packages.
>
>       Once things have gelled a bit more I hope to turn this into a
>       blog
>       post that will include some examples of moving non-API entry
>       point
>       uses into compliance.
>
>       Best,
>
>       luke
>
>       --
>       Luke Tierney
>       Ralph E. Wareham Professor of Mathematical Sciences
>       University of Iowa? ? ? ? ? ? ? ? ? Phone:? ? ? ? ? ?
>       ?319-335-3386
>       Department of Statistics and? ? ? ? Fax:? ? ? ? ? ? ?
>       ?319-335-3017
>       ? ? Actuarial Science
>       241 Schaeffer Hall? ? ? ? ? ? ? ? ? email:?
>       ?luke-tierney at uiowa.edu
>       Iowa City, IA 52242? ? ? ? ? ? ? ? ?WWW:?
>       http://www.stat.uiowa.edu
>
>       ______________________________________________
>       R-devel at r-project.org mailing list
>       https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 
> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From iuke-tier@ey m@iii@g oii uiow@@edu  Sat Jun  8 01:58:35 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 7 Jun 2024 18:58:35 -0500 (CDT)
Subject: [Rd] [External] Re:  clarifying and adjusting the C API for R
In-Reply-To: <CABdHhvHJcQdty3KzeCVKMOusokBRKWH=znu1HJM6722ROsY1Mg@mail.gmail.com>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
 <CABdHhvHJcQdty3KzeCVKMOusokBRKWH=znu1HJM6722ROsY1Mg@mail.gmail.com>
Message-ID: <97c70937-941d-7c64-d8d0-a4e94e88dcb7@uiowa.edu>

On Fri, 7 Jun 2024, Hadley Wickham wrote:

> Thanks for working on this Luke! We appreciate your efforts to make it
> easier to tell what's in the exported API and we're very happy to work with
> you on any changes needed to tidyverse/r-lib packages.
> Hadley

Thanks. Glad to hear -- I may be reminding you when we hit some of the
tougher challenges down the road :-)

Best,

luke

> 
> On Thu, Jun 6, 2024 at 9:47?AM luke-tierney--- via R-devel
> <r-devel at r-project.org> wrote:
>       This is an update on some current work on the C API for use in R
>       extensions.
>
>       The internal R implementation makes use of tens of thousands of
>       C
>       entry points. On Linux and Windows, which support visibility
>       restrictions, most of these are visible only within the R
>       executble or
>       shared library. About 1500 are not hidden and are visible to
>       dynamically loaded shared libraries, such as ones in packages,
>       and to
>       embedding applications.
>
>       There are two main reasons for limiting access to entry points
>       in a
>       software framework:
>
>       - Some entry points are very easy to use in ways that corrupt
>       internal
>       ? ?data, leading to segfaults or, worse, incorrect computations
>       without
>       ? ?segfaults.
>
>       - Some entry point expose internal structure and other
>       implementation
>       ? ?details, which makes it hard to make improvements without
>       breaking
>       ? ?client code that has come to depend on these details.
>
>       The API of C entry points that can be used in R extensions, both
>       for
>       packages and embedding, has evolved organically over many years.
>       The
>       definition for the current release expressed in the Writing R
>       Extensions manual (WRE) is roughly:
>
>       ? ? ?An entry point can be used if (1) it is declared in a
>       header file
>       ? ? ?in R.home("include"), and (2) if it is documented for use
>       in WRE.
>
>       Ideally, (1) would be necessary and sufficient, but for a
>       variety of
>       reasons that isn't achievable, at least not in the near term.
>       (2) can
>       be challenging to determine; in particular, it is not amenable
>       to a
>       computational answer.
>
>       An experimental effort is underway to add annotations to the WRE
>       Texinfo source to allow (2) to be answered unambiguously. The
>       annotations so far mostly reflect my reading or WRE and may be
>       revised
>       as they are reviewed by others. The annotated document can be
>       used for
>       programmatically identifying what is currently considered part
>       of the C
>       API. The result so far is an experimental function
>       tools:::funAPI():
>
>       ? ? ?> head(tools:::funAPI())
>       ? ? ? ? ? ? ? ? ? ? ?name? ? ? ? ? ? ? ? ? ? loc apitype
>       ? ? ?1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h? ? eapi
>       ? ? ?2? ? ? ? alloc3DArray? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?3? ? ? ? ? allocArray? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?4? ? ? ? ? ?allocLang? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?5? ? ? ? ? ?allocList? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?6? ? ? ? ?allocMatrix? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>
>       The 'apitype' field has three possible levels
>
>       ? ? ?| api? | stable (ideally) API |
>       ? ? ?| eapi | experimental API? ? ?|
>       ? ? ?| emb? | embedding API? ? ? ? |
>
>       Entry points in the embedded API would typically only be used in
>       applications embedding R or providing new front ends, but might
>       be
>       reasonable to use in packages that support embedding.
>
>       The 'loc' field indicates how the entry point is identified as
>       part of
>       an API: explicit mention in WRE, or declaration in a header file
>       identified as fully part of an API.
>
>       [tools:::funAPI() may not be completely accurate as it relies on
>       regular expressions for examining header files considered part
>       of the
>       API rather than proper parsing. But it seems to be pretty close
>       to
>       what can be achieved with proper parsing.? Proper parsing would
>       add
>       dependencies on additional tools, which I would like to avoid
>       for
>       now. One dependency already present is that a C compiler has to
>       be on
>       the search path and cc -E has to run the C pre-processor.]
>
>       Two additional experimental functions are available for
>       analyzing
>       package compliance: tools:::checkPkgAPI and
>       tools:::checkAllPkgsAPI.
>       These examine installed packages.
>
>       [These may produce some false positives on macOS; they may or
>       may not
>       work on Windows at this point.]
>
>       Using these tools initially showed around 200 non-API entry
>       points
>       used across packages on CRAN and BIOC. Ideally this number
>       should be
>       reduced to zero. This will require a combination of additions to
>       the
>       API and changes in packages.
>
>       Some entry points can safely be added to the API. Around 40 have
>       already been added to WRE with API annotations; another 40 or so
>       can
>       probably be added after review.
>
>       The remainder mostly fall into two groups:
>
>       - Entry points that should never be used in packages, such as
>       ? ?SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for
>       that
>       ? ?matter) that can create inconsistent or corrupt internal
>       state.
>
>       - Entry points that depend on the existence of internal
>       structure that
>       ? ?might be subject to change, such as the existence of promise
>       objects
>       ? ?or internal structure of environments.
>
>       Many, if not most, of these seem to be used in idioms that can
>       either
>       be accomplished with existing higher-level functions already in
>       the
>       API, or by new higher level functions that can be created and
>       added. Working through these will take some time and
>       coordination
>       between R-core and maintainers of affected packages.
>
>       Once things have gelled a bit more I hope to turn this into a
>       blog
>       post that will include some examples of moving non-API entry
>       point
>       uses into compliance.
>
>       Best,
>
>       luke
>
>       --
>       Luke Tierney
>       Ralph E. Wareham Professor of Mathematical Sciences
>       University of Iowa? ? ? ? ? ? ? ? ? Phone:
>       ?319-335-3386
>       Department of Statistics and? ? ? ? Fax:
>       ?319-335-3017
>       ? ? Actuarial Science
>       241 Schaeffer Hall? ? ? ? ? ? ? ? ? email:
>       ?luke-tierney at uiowa.edu
>       Iowa City, IA 52242? ? ? ? ? ? ? ? ?WWW:
>       http://www.stat.uiowa.edu
>
>       ______________________________________________
>       R-devel at r-project.org mailing list
>       https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 
> --
> http://hadley.nz
> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From r@c@rtwr|ght @end|ng |rom gm@||@com  Sat Jun  8 02:06:46 2024
From: r@c@rtwr|ght @end|ng |rom gm@||@com (Reed A. Cartwright)
Date: Fri, 7 Jun 2024 17:06:46 -0700
Subject: [Rd] [External] Re: clarifying and adjusting the C API for R
In-Reply-To: <6ca3dc90-b06d-1678-8faf-4c8d382dd8b3@uiowa.edu>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
 <CAHiA-ZnQK238zu6yXAxCNBASP6LX+74S8LjvOfmC-9ujiAcU+g@mail.gmail.com>
 <6ca3dc90-b06d-1678-8faf-4c8d382dd8b3@uiowa.edu>
Message-ID: <CALOkxuzKfiGTQ8rzZcM9uy0f+acrdXKeSdxz2qSX2_04+=YAgw@mail.gmail.com>

Would it be reasonable to move the non-API stuff that cannot be hidden
into header files inside a "details" directory (or some other specific
naming scheme)?

That's what I use when I need to separate a public API from an internal API.


On Fri, Jun 7, 2024 at 7:30?AM luke-tierney--- via R-devel
<r-devel at r-project.org> wrote:
>
> On Fri, 7 Jun 2024, Steven Dirkse wrote:
>
> > You don't often get email from sdirkse at gams.com. Learn why this is important
> > Thanks for sharing this overview of an interesting and much-needed project.
> > You mention that R exports about 1500 symbols (on platforms supporting
> > visibility) but this subject isn't mentioned explicitly again in your note,
> > so I'm wondering how things tie together.  Un-exported symbols cannot be
> > part of the API - how would people use them in this case?  In a perfect
> > world the set of exported symbols could define the API or match it exactly,
> > but I guess that isn't the case at present.  So I conclude that R exports
> > extra (i.e. non-API) symbols.  Is part of the goal to remove these extra
> > exports?
>
> No. We'll hide what we can, but base packages for one need access to
> some entry points that should not be in the API, so those have to stay
> un-hidden.
>
> Best,
>
> luke
>
> >
> > -Steve
> >
> > On Thu, Jun 6, 2024 at 10:47?AM luke-tierney--- via R-devel
> > <r-devel at r-project.org> wrote:
> >       This is an update on some current work on the C API for use in R
> >       extensions.
> >
> >       The internal R implementation makes use of tens of thousands of
> >       C
> >       entry points. On Linux and Windows, which support visibility
> >       restrictions, most of these are visible only within the R
> >       executble or
> >       shared library. About 1500 are not hidden and are visible to
> >       dynamically loaded shared libraries, such as ones in packages,
> >       and to
> >       embedding applications.
> >
> >       There are two main reasons for limiting access to entry points
> >       in a
> >       software framework:
> >
> >       - Some entry points are very easy to use in ways that corrupt
> >       internal
> >          data, leading to segfaults or, worse, incorrect computations
> >       without
> >          segfaults.
> >
> >       - Some entry point expose internal structure and other
> >       implementation
> >          details, which makes it hard to make improvements without
> >       breaking
> >          client code that has come to depend on these details.
> >
> >       The API of C entry points that can be used in R extensions, both
> >       for
> >       packages and embedding, has evolved organically over many years.
> >       The
> >       definition for the current release expressed in the Writing R
> >       Extensions manual (WRE) is roughly:
> >
> >            An entry point can be used if (1) it is declared in a
> >       header file
> >            in R.home("include"), and (2) if it is documented for use
> >       in WRE.
> >
> >       Ideally, (1) would be necessary and sufficient, but for a
> >       variety of
> >       reasons that isn't achievable, at least not in the near term.
> >       (2) can
> >       be challenging to determine; in particular, it is not amenable
> >       to a
> >       computational answer.
> >
> >       An experimental effort is underway to add annotations to the WRE
> >       Texinfo source to allow (2) to be answered unambiguously. The
> >       annotations so far mostly reflect my reading or WRE and may be
> >       revised
> >       as they are reviewed by others. The annotated document can be
> >       used for
> >       programmatically identifying what is currently considered part
> >       of the C
> >       API. The result so far is an experimental function
> >       tools:::funAPI():
> >
> >            > head(tools:::funAPI())
> >                            name                    loc apitype
> >            1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
> >            2        alloc3DArray                    WRE     api
> >            3          allocArray                    WRE     api
> >            4           allocLang                    WRE     api
> >            5           allocList                    WRE     api
> >            6         allocMatrix                    WRE     api
> >
> >       The 'apitype' field has three possible levels
> >
> >            | api  | stable (ideally) API |
> >            | eapi | experimental API     |
> >            | emb  | embedding API        |
> >
> >       Entry points in the embedded API would typically only be used in
> >       applications embedding R or providing new front ends, but might
> >       be
> >       reasonable to use in packages that support embedding.
> >
> >       The 'loc' field indicates how the entry point is identified as
> >       part of
> >       an API: explicit mention in WRE, or declaration in a header file
> >       identified as fully part of an API.
> >
> >       [tools:::funAPI() may not be completely accurate as it relies on
> >       regular expressions for examining header files considered part
> >       of the
> >       API rather than proper parsing. But it seems to be pretty close
> >       to
> >       what can be achieved with proper parsing.  Proper parsing would
> >       add
> >       dependencies on additional tools, which I would like to avoid
> >       for
> >       now. One dependency already present is that a C compiler has to
> >       be on
> >       the search path and cc -E has to run the C pre-processor.]
> >
> >       Two additional experimental functions are available for
> >       analyzing
> >       package compliance: tools:::checkPkgAPI and
> >       tools:::checkAllPkgsAPI.
> >       These examine installed packages.
> >
> >       [These may produce some false positives on macOS; they may or
> >       may not
> >       work on Windows at this point.]
> >
> >       Using these tools initially showed around 200 non-API entry
> >       points
> >       used across packages on CRAN and BIOC. Ideally this number
> >       should be
> >       reduced to zero. This will require a combination of additions to
> >       the
> >       API and changes in packages.
> >
> >       Some entry points can safely be added to the API. Around 40 have
> >       already been added to WRE with API annotations; another 40 or so
> >       can
> >       probably be added after review.
> >
> >       The remainder mostly fall into two groups:
> >
> >       - Entry points that should never be used in packages, such as
> >          SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for
> >       that
> >          matter) that can create inconsistent or corrupt internal
> >       state.
> >
> >       - Entry points that depend on the existence of internal
> >       structure that
> >          might be subject to change, such as the existence of promise
> >       objects
> >          or internal structure of environments.
> >
> >       Many, if not most, of these seem to be used in idioms that can
> >       either
> >       be accomplished with existing higher-level functions already in
> >       the
> >       API, or by new higher level functions that can be created and
> >       added. Working through these will take some time and
> >       coordination
> >       between R-core and maintainers of affected packages.
> >
> >       Once things have gelled a bit more I hope to turn this into a
> >       blog
> >       post that will include some examples of moving non-API entry
> >       point
> >       uses into compliance.
> >
> >       Best,
> >
> >       luke
> >
> >       --
> >       Luke Tierney
> >       Ralph E. Wareham Professor of Mathematical Sciences
> >       University of Iowa                  Phone:
> >        319-335-3386
> >       Department of Statistics and        Fax:
> >        319-335-3017
> >           Actuarial Science
> >       241 Schaeffer Hall                  email:
> >        luke-tierney at uiowa.edu
> >       Iowa City, IA 52242                 WWW:
> >       https://urldefense.com/v3/__http://www.stat.uiowa.edu__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZBvMvo18$
> >
> >       ______________________________________________
> >       R-devel at r-project.org mailing list
> >       https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZnVX5taE$
> >
> >
> >
> >
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  https://urldefense.com/v3/__http://www.stat.uiowa.edu__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZBvMvo18$
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZnVX5taE$


From iuke-tier@ey m@iii@g oii uiow@@edu  Sat Jun  8 02:52:43 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 7 Jun 2024 19:52:43 -0500 (CDT)
Subject: [Rd] [External] Re: clarifying and adjusting the C API for R
In-Reply-To: <CALOkxuzKfiGTQ8rzZcM9uy0f+acrdXKeSdxz2qSX2_04+=YAgw@mail.gmail.com>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
 <CAHiA-ZnQK238zu6yXAxCNBASP6LX+74S8LjvOfmC-9ujiAcU+g@mail.gmail.com>
 <6ca3dc90-b06d-1678-8faf-4c8d382dd8b3@uiowa.edu>
 <CALOkxuzKfiGTQ8rzZcM9uy0f+acrdXKeSdxz2qSX2_04+=YAgw@mail.gmail.com>
Message-ID: <eb46c07e-ba96-9a09-243c-88ef52b6f787@uiowa.edu>

On Sat, 8 Jun 2024, Reed A. Cartwright wrote:

> [You don't often get email from racartwright at gmail.com. Learn why this is important at https://aka.ms/LearnAboutSenderIdentification ]
>
> Would it be reasonable to move the non-API stuff that cannot be hidden
> into header files inside a "details" directory (or some other specific
> naming scheme)?
>
> That's what I use when I need to separate a public API from an internal API.

As do I, as does everyone else. As I wrote originally: " ... for a
variety of reasons that isn't achievable, at least not in the near
term." Can we leave it at that please?

luke

>
> On Fri, Jun 7, 2024 at 7:30?AM luke-tierney--- via R-devel
> <r-devel at r-project.org> wrote:
>>
>> On Fri, 7 Jun 2024, Steven Dirkse wrote:
>>
>>> You don't often get email from sdirkse at gams.com. Learn why this is important
>>> Thanks for sharing this overview of an interesting and much-needed project.
>>> You mention that R exports about 1500 symbols (on platforms supporting
>>> visibility) but this subject isn't mentioned explicitly again in your note,
>>> so I'm wondering how things tie together.  Un-exported symbols cannot be
>>> part of the API - how would people use them in this case?  In a perfect
>>> world the set of exported symbols could define the API or match it exactly,
>>> but I guess that isn't the case at present.  So I conclude that R exports
>>> extra (i.e. non-API) symbols.  Is part of the goal to remove these extra
>>> exports?
>>
>> No. We'll hide what we can, but base packages for one need access to
>> some entry points that should not be in the API, so those have to stay
>> un-hidden.
>>
>> Best,
>>
>> luke
>>
>>>
>>> -Steve
>>>
>>> On Thu, Jun 6, 2024 at 10:47?AM luke-tierney--- via R-devel
>>> <r-devel at r-project.org> wrote:
>>>       This is an update on some current work on the C API for use in R
>>>       extensions.
>>>
>>>       The internal R implementation makes use of tens of thousands of
>>>       C
>>>       entry points. On Linux and Windows, which support visibility
>>>       restrictions, most of these are visible only within the R
>>>       executble or
>>>       shared library. About 1500 are not hidden and are visible to
>>>       dynamically loaded shared libraries, such as ones in packages,
>>>       and to
>>>       embedding applications.
>>>
>>>       There are two main reasons for limiting access to entry points
>>>       in a
>>>       software framework:
>>>
>>>       - Some entry points are very easy to use in ways that corrupt
>>>       internal
>>>          data, leading to segfaults or, worse, incorrect computations
>>>       without
>>>          segfaults.
>>>
>>>       - Some entry point expose internal structure and other
>>>       implementation
>>>          details, which makes it hard to make improvements without
>>>       breaking
>>>          client code that has come to depend on these details.
>>>
>>>       The API of C entry points that can be used in R extensions, both
>>>       for
>>>       packages and embedding, has evolved organically over many years.
>>>       The
>>>       definition for the current release expressed in the Writing R
>>>       Extensions manual (WRE) is roughly:
>>>
>>>            An entry point can be used if (1) it is declared in a
>>>       header file
>>>            in R.home("include"), and (2) if it is documented for use
>>>       in WRE.
>>>
>>>       Ideally, (1) would be necessary and sufficient, but for a
>>>       variety of
>>>       reasons that isn't achievable, at least not in the near term.
>>>       (2) can
>>>       be challenging to determine; in particular, it is not amenable
>>>       to a
>>>       computational answer.
>>>
>>>       An experimental effort is underway to add annotations to the WRE
>>>       Texinfo source to allow (2) to be answered unambiguously. The
>>>       annotations so far mostly reflect my reading or WRE and may be
>>>       revised
>>>       as they are reviewed by others. The annotated document can be
>>>       used for
>>>       programmatically identifying what is currently considered part
>>>       of the C
>>>       API. The result so far is an experimental function
>>>       tools:::funAPI():
>>>
>>>           > head(tools:::funAPI())
>>>                            name                    loc apitype
>>>            1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
>>>            2        alloc3DArray                    WRE     api
>>>            3          allocArray                    WRE     api
>>>            4           allocLang                    WRE     api
>>>            5           allocList                    WRE     api
>>>            6         allocMatrix                    WRE     api
>>>
>>>       The 'apitype' field has three possible levels
>>>
>>>            | api  | stable (ideally) API |
>>>            | eapi | experimental API     |
>>>            | emb  | embedding API        |
>>>
>>>       Entry points in the embedded API would typically only be used in
>>>       applications embedding R or providing new front ends, but might
>>>       be
>>>       reasonable to use in packages that support embedding.
>>>
>>>       The 'loc' field indicates how the entry point is identified as
>>>       part of
>>>       an API: explicit mention in WRE, or declaration in a header file
>>>       identified as fully part of an API.
>>>
>>>       [tools:::funAPI() may not be completely accurate as it relies on
>>>       regular expressions for examining header files considered part
>>>       of the
>>>       API rather than proper parsing. But it seems to be pretty close
>>>       to
>>>       what can be achieved with proper parsing.  Proper parsing would
>>>       add
>>>       dependencies on additional tools, which I would like to avoid
>>>       for
>>>       now. One dependency already present is that a C compiler has to
>>>       be on
>>>       the search path and cc -E has to run the C pre-processor.]
>>>
>>>       Two additional experimental functions are available for
>>>       analyzing
>>>       package compliance: tools:::checkPkgAPI and
>>>       tools:::checkAllPkgsAPI.
>>>       These examine installed packages.
>>>
>>>       [These may produce some false positives on macOS; they may or
>>>       may not
>>>       work on Windows at this point.]
>>>
>>>       Using these tools initially showed around 200 non-API entry
>>>       points
>>>       used across packages on CRAN and BIOC. Ideally this number
>>>       should be
>>>       reduced to zero. This will require a combination of additions to
>>>       the
>>>       API and changes in packages.
>>>
>>>       Some entry points can safely be added to the API. Around 40 have
>>>       already been added to WRE with API annotations; another 40 or so
>>>       can
>>>       probably be added after review.
>>>
>>>       The remainder mostly fall into two groups:
>>>
>>>       - Entry points that should never be used in packages, such as
>>>          SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for
>>>       that
>>>          matter) that can create inconsistent or corrupt internal
>>>       state.
>>>
>>>       - Entry points that depend on the existence of internal
>>>       structure that
>>>          might be subject to change, such as the existence of promise
>>>       objects
>>>          or internal structure of environments.
>>>
>>>       Many, if not most, of these seem to be used in idioms that can
>>>       either
>>>       be accomplished with existing higher-level functions already in
>>>       the
>>>       API, or by new higher level functions that can be created and
>>>       added. Working through these will take some time and
>>>       coordination
>>>       between R-core and maintainers of affected packages.
>>>
>>>       Once things have gelled a bit more I hope to turn this into a
>>>       blog
>>>       post that will include some examples of moving non-API entry
>>>       point
>>>       uses into compliance.
>>>
>>>       Best,
>>>
>>>       luke
>>>
>>>       --
>>>       Luke Tierney
>>>       Ralph E. Wareham Professor of Mathematical Sciences
>>>       University of Iowa                  Phone:
>>>        319-335-3386
>>>       Department of Statistics and        Fax:
>>>        319-335-3017
>>>           Actuarial Science
>>>       241 Schaeffer Hall                  email:
>>>        luke-tierney at uiowa.edu
>>>       Iowa City, IA 52242                 WWW:
>>>       https://urldefense.com/v3/__http://www.stat.uiowa.edu__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZBvMvo18$
>>>
>>>       ______________________________________________
>>>       R-devel at r-project.org mailing list
>>>       https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZnVX5taE$
>>>
>>>
>>>
>>>
>>>
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>     Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  https://urldefense.com/v3/__http://www.stat.uiowa.edu__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZBvMvo18$
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZnVX5taE$
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/

From bbo|ker @end|ng |rom gm@||@com  Sun Jun  9 00:06:14 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 8 Jun 2024 18:06:14 -0400
Subject: [Rd] changes in R-devel and zero-extent objects in Rcpp
Message-ID: <92af423f-e83b-4b10-899f-0ba22999a44b@gmail.com>


    A change to R-devel (SVN r86629 or 
https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250 
has changed the handling of pointers to zero-length objects, leading to 
ASAN issues with a number of Rcpp-based packages (the commit message 
reads, in part, "Also define STRICT_TYPECHECK when compiling inlined.c.")

   I'm interested in discussion from the community.

   Details/diagnosis for the issues in the lme4 package are here: 
https://github.com/lme4/lme4/issues/794, with a bit more discussion 
about how zero-length objects should be handled.

   The short(ish) version is that r86629 enables the 
CATCH_ZERO_LENGTH_ACCESS definition. This turns on the CHKZLN macro 
<https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104>, 
which returns a trivial pointer (rather than the data pointer that would 
be returned in the normal control flow) if an object has length 0:

/* Attempts to read or write elements of a zero length vector will
    result in a segfault, rather than read and write random memory.
    Returning NULL would be more natural, but Matrix seems to assume
    that even zero-length vectors have non-NULL data pointers, so
    return (void *) 1 instead. Zero-length CHARSXP objects still have a
    trailing zero byte so they are not handled. */

   In the Rcpp context this leads to an inconsistency, where `REAL(x)` 
is a 'real' external pointer and `DATAPTR(x)` is 0x1, which in turn 
leads to ASAN warnings like

runtime error: reference binding to misaligned address 0x000000000001 
for type 'const double', which requires 8 byte alignment
0x000000000001: note: pointer points here

    I'm in over my head and hoping for insight into whether this problem 
should be resolved by changing R, Rcpp, or downstream Rcpp packages ...

   cheers
    Ben Bolker


From kev|nu@hey @end|ng |rom gm@||@com  Sun Jun  9 00:39:50 2024
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Sat, 8 Jun 2024 15:39:50 -0700
Subject: [Rd] changes in R-devel and zero-extent objects in Rcpp
In-Reply-To: <92af423f-e83b-4b10-899f-0ba22999a44b@gmail.com>
References: <92af423f-e83b-4b10-899f-0ba22999a44b@gmail.com>
Message-ID: <CAJXgQP3gAbkW-w4kmc3BfJc9gMd=wGGOs2VLu1bEwpwYKQF+bA@mail.gmail.com>

IMHO, this should be changed in both Rcpp and downstream packages:

1. Rcpp could check for out-of-bounds accesses in cases like these, and
emit an R warning / error when such an access is detected;

2. The downstream packages unintentionally making these out-of-bounds
accesses should be fixed to avoid doing that.

That is, I think this is ultimately a bug in the affected packages, but
Rcpp could do better in detecting and handling this for client packages
(avoiding a segfault).

Best,
Kevin


On Sat, Jun 8, 2024, 3:06?PM Ben Bolker <bbolker at gmail.com> wrote:

>
>     A change to R-devel (SVN r86629 or
>
> https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250
> has changed the handling of pointers to zero-length objects, leading to
> ASAN issues with a number of Rcpp-based packages (the commit message
> reads, in part, "Also define STRICT_TYPECHECK when compiling inlined.c.")
>
>    I'm interested in discussion from the community.
>
>    Details/diagnosis for the issues in the lme4 package are here:
> https://github.com/lme4/lme4/issues/794, with a bit more discussion
> about how zero-length objects should be handled.
>
>    The short(ish) version is that r86629 enables the
> CATCH_ZERO_LENGTH_ACCESS definition. This turns on the CHKZLN macro
> <
> https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104>,
>
> which returns a trivial pointer (rather than the data pointer that would
> be returned in the normal control flow) if an object has length 0:
>
> /* Attempts to read or write elements of a zero length vector will
>     result in a segfault, rather than read and write random memory.
>     Returning NULL would be more natural, but Matrix seems to assume
>     that even zero-length vectors have non-NULL data pointers, so
>     return (void *) 1 instead. Zero-length CHARSXP objects still have a
>     trailing zero byte so they are not handled. */
>
>    In the Rcpp context this leads to an inconsistency, where `REAL(x)`
> is a 'real' external pointer and `DATAPTR(x)` is 0x1, which in turn
> leads to ASAN warnings like
>
> runtime error: reference binding to misaligned address 0x000000000001
> for type 'const double', which requires 8 byte alignment
> 0x000000000001: note: pointer points here
>
>     I'm in over my head and hoping for insight into whether this problem
> should be resolved by changing R, Rcpp, or downstream Rcpp packages ...
>
>    cheers
>     Ben Bolker
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Sun Jun  9 01:16:22 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 8 Jun 2024 19:16:22 -0400
Subject: [Rd] changes in R-devel and zero-extent objects in Rcpp
In-Reply-To: <CAJXgQP3gAbkW-w4kmc3BfJc9gMd=wGGOs2VLu1bEwpwYKQF+bA@mail.gmail.com>
References: <92af423f-e83b-4b10-899f-0ba22999a44b@gmail.com>
 <CAJXgQP3gAbkW-w4kmc3BfJc9gMd=wGGOs2VLu1bEwpwYKQF+bA@mail.gmail.com>
Message-ID: <e61b6315-025a-4e88-8087-2eeba0f4fad2@gmail.com>

   The ASAN errors occur *even if the zero-length object is not actually 
accessed*/is used in a perfectly correct manner, i.e. it's perfectly 
legal in base R to define `m <- numeric(0)` or `m <- matrix(nrow = 0, 
ncol = 0)`, whereas doing the equivalent in Rcpp will (now) lead to an 
ASAN error.

   i.e., these are *not* previously cryptic out-of-bounds accesses that 
are now being revealed, but instead sensible and previously legal 
definitions of zero-length objects that are now causing problems.

    I'm pretty sure I'm right about this, but it's absolutely possible 
that I'm just confused at this point; I don't have a super-simple 
example to show you at the moment. The closest is this example by Mikael 
Jagan: https://github.com/lme4/lme4/issues/794#issuecomment-2155093049

   which shows that if x is a pointer to a zero-length vector (in plain 
C++ for R, no Rcpp is involved), DATAPTR(x) and REAL(x) evaluate to 
different values.

   Mikael further points out that "Rcpp seems to cast a (void *) 
returned by DATAPTR to (double *) when constructing a Vector<REALSXP> 
from a SEXP, rather than using the (double *) returned by REAL." So 
perhaps R-core doesn't want to guarantee that these operations give 
identical answers, in which case Rcpp will have to change the way it 
does things ...

   cheers
    Ben



On 2024-06-08 6:39 p.m., Kevin Ushey wrote:
> IMHO, this should be changed in both Rcpp and downstream packages:
> 
> 1. Rcpp could check for out-of-bounds accesses in cases like these, and 
> emit an R warning / error when such an access is detected;
> 
> 2. The downstream packages unintentionally making these out-of-bounds 
> accesses should be fixed to avoid doing that.
> 
> That is, I think this is ultimately a bug in the affected packages, but 
> Rcpp could do better in detecting and handling this for client packages 
> (avoiding a segfault).
> 
> Best,
> Kevin
> 
> 
> On Sat, Jun 8, 2024, 3:06?PM Ben Bolker <bbolker at gmail.com 
> <mailto:bbolker at gmail.com>> wrote:
> 
> 
>      ? ? A change to R-devel (SVN r86629 or
>     https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250 <https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250>
>     has changed the handling of pointers to zero-length objects, leading to
>     ASAN issues with a number of Rcpp-based packages (the commit message
>     reads, in part, "Also define STRICT_TYPECHECK when compiling
>     inlined.c.")
> 
>      ? ?I'm interested in discussion from the community.
> 
>      ? ?Details/diagnosis for the issues in the lme4 package are here:
>     https://github.com/lme4/lme4/issues/794
>     <https://github.com/lme4/lme4/issues/794>, with a bit more discussion
>     about how zero-length objects should be handled.
> 
>      ? ?The short(ish) version is that r86629 enables the
>     CATCH_ZERO_LENGTH_ACCESS definition. This turns on the CHKZLN macro
>     <https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104 <https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104>>,
>     which returns a trivial pointer (rather than the data pointer that
>     would
>     be returned in the normal control flow) if an object has length 0:
> 
>     /* Attempts to read or write elements of a zero length vector will
>      ? ? result in a segfault, rather than read and write random memory.
>      ? ? Returning NULL would be more natural, but Matrix seems to assume
>      ? ? that even zero-length vectors have non-NULL data pointers, so
>      ? ? return (void *) 1 instead. Zero-length CHARSXP objects still have a
>      ? ? trailing zero byte so they are not handled. */
> 
>      ? ?In the Rcpp context this leads to an inconsistency, where `REAL(x)`
>     is a 'real' external pointer and `DATAPTR(x)` is 0x1, which in turn
>     leads to ASAN warnings like
> 
>     runtime error: reference binding to misaligned address 0x000000000001
>     for type 'const double', which requires 8 byte alignment
>     0x000000000001: note: pointer points here
> 
>      ? ? I'm in over my head and hoping for insight into whether this
>     problem
>     should be resolved by changing R, Rcpp, or downstream Rcpp packages ...
> 
>      ? ?cheers
>      ? ? Ben Bolker
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
> 

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
(Acting) Graduate chair, Mathematics & Statistics
 > E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


