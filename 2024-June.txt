From rub|@n@v|@n@ @end|ng |rom gm@||@com  Mon Jun  3 21:30:25 2024
From: rub|@n@v|@n@ @end|ng |rom gm@||@com (Rubiana Viana)
Date: Mon, 3 Jun 2024 16:30:25 -0300
Subject: [Rd] R for Windows FAQ
Message-ID: <CABz3Tr1qHNdFmL5muFyhQYAjFAEXXu8HZr22-ZzDPXKzHdsjEw@mail.gmail.com>

Hi!

How can I get older versions of R software?

Thank you!

-- 
*Rubiana Viana*
Psic?loga e Mestra em Sociologia Pol?tica
G?nero Ra?a e Direitos Humanos ? Pesquisa ? Projetos ? Cultura e
Diversidade
LinkedIn <https://www.linkedin.com/in/rubiana-viana/>| Portfolio
<https://readymag.website/u2474224357/rubianaviana/> | Lattes
<http://lattes.cnpq.br/1002116427542223>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Jun  3 22:00:34 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 3 Jun 2024 22:00:34 +0200
Subject: [Rd] R for Windows FAQ
In-Reply-To: <CABz3Tr1qHNdFmL5muFyhQYAjFAEXXu8HZr22-ZzDPXKzHdsjEw@mail.gmail.com>
References: <CABz3Tr1qHNdFmL5muFyhQYAjFAEXXu8HZr22-ZzDPXKzHdsjEw@mail.gmail.com>
Message-ID: <a0421657-4a9f-41c3-add3-18d766e14f8d@gmail.com>

https://cran.r-project.org/bin/windows/base/old/

Tomas

On 6/3/24 21:30, Rubiana Viana wrote:
> Hi!
>
> How can I get older versions of R software?
>
> Thank you!
>


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Jun  6 16:47:02 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 6 Jun 2024 09:47:02 -0500 (CDT)
Subject: [Rd] clarifying and adjusting the C API for R
Message-ID: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>

This is an update on some current work on the C API for use in R
extensions.

The internal R implementation makes use of tens of thousands of C
entry points. On Linux and Windows, which support visibility
restrictions, most of these are visible only within the R executble or
shared library. About 1500 are not hidden and are visible to
dynamically loaded shared libraries, such as ones in packages, and to
embedding applications.

There are two main reasons for limiting access to entry points in a
software framework:

- Some entry points are very easy to use in ways that corrupt internal
   data, leading to segfaults or, worse, incorrect computations without
   segfaults.

- Some entry point expose internal structure and other implementation
   details, which makes it hard to make improvements without breaking
   client code that has come to depend on these details.

The API of C entry points that can be used in R extensions, both for
packages and embedding, has evolved organically over many years. The
definition for the current release expressed in the Writing R
Extensions manual (WRE) is roughly:

     An entry point can be used if (1) it is declared in a header file
     in R.home("include"), and (2) if it is documented for use in WRE.

Ideally, (1) would be necessary and sufficient, but for a variety of
reasons that isn't achievable, at least not in the near term. (2) can
be challenging to determine; in particular, it is not amenable to a
computational answer.

An experimental effort is underway to add annotations to the WRE
Texinfo source to allow (2) to be answered unambiguously. The
annotations so far mostly reflect my reading or WRE and may be revised
as they are reviewed by others. The annotated document can be used for
programmatically identifying what is currently considered part of the C
API. The result so far is an experimental function tools:::funAPI():

     > head(tools:::funAPI())
 		     name                    loc apitype
     1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
     2        alloc3DArray                    WRE     api
     3          allocArray                    WRE     api
     4           allocLang                    WRE     api
     5           allocList                    WRE     api
     6         allocMatrix                    WRE     api

The 'apitype' field has three possible levels

     | api  | stable (ideally) API |
     | eapi | experimental API     |
     | emb  | embedding API        |

Entry points in the embedded API would typically only be used in
applications embedding R or providing new front ends, but might be
reasonable to use in packages that support embedding.

The 'loc' field indicates how the entry point is identified as part of
an API: explicit mention in WRE, or declaration in a header file
identified as fully part of an API.

[tools:::funAPI() may not be completely accurate as it relies on
regular expressions for examining header files considered part of the
API rather than proper parsing. But it seems to be pretty close to
what can be achieved with proper parsing.  Proper parsing would add
dependencies on additional tools, which I would like to avoid for
now. One dependency already present is that a C compiler has to be on
the search path and cc -E has to run the C pre-processor.]

Two additional experimental functions are available for analyzing
package compliance: tools:::checkPkgAPI and tools:::checkAllPkgsAPI.
These examine installed packages.

[These may produce some false positives on macOS; they may or may not
work on Windows at this point.]

Using these tools initially showed around 200 non-API entry points
used across packages on CRAN and BIOC. Ideally this number should be
reduced to zero. This will require a combination of additions to the
API and changes in packages.

Some entry points can safely be added to the API. Around 40 have
already been added to WRE with API annotations; another 40 or so can
probably be added after review.

The remainder mostly fall into two groups:

- Entry points that should never be used in packages, such as
   SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for that
   matter) that can create inconsistent or corrupt internal state.

- Entry points that depend on the existence of internal structure that
   might be subject to change, such as the existence of promise objects
   or internal structure of environments.

Many, if not most, of these seem to be used in idioms that can either
be accomplished with existing higher-level functions already in the
API, or by new higher level functions that can be created and
added. Working through these will take some time and coordination
between R-core and maintainers of affected packages.

Once things have gelled a bit more I hope to turn this into a blog
post that will include some examples of moving non-API entry point
uses into compliance.

Best,

luke

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From h@w|ckh@m @end|ng |rom gm@||@com  Fri Jun  7 15:00:44 2024
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Fri, 7 Jun 2024 08:00:44 -0500
Subject: [Rd] clarifying and adjusting the C API for R
In-Reply-To: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
Message-ID: <CABdHhvHJcQdty3KzeCVKMOusokBRKWH=znu1HJM6722ROsY1Mg@mail.gmail.com>

Thanks for working on this Luke! We appreciate your efforts to make it
easier to tell what's in the exported API and we're very happy to work with
you on any changes needed to tidyverse/r-lib packages.

Hadley

On Thu, Jun 6, 2024 at 9:47?AM luke-tierney--- via R-devel <
r-devel at r-project.org> wrote:

> This is an update on some current work on the C API for use in R
> extensions.
>
> The internal R implementation makes use of tens of thousands of C
> entry points. On Linux and Windows, which support visibility
> restrictions, most of these are visible only within the R executble or
> shared library. About 1500 are not hidden and are visible to
> dynamically loaded shared libraries, such as ones in packages, and to
> embedding applications.
>
> There are two main reasons for limiting access to entry points in a
> software framework:
>
> - Some entry points are very easy to use in ways that corrupt internal
>    data, leading to segfaults or, worse, incorrect computations without
>    segfaults.
>
> - Some entry point expose internal structure and other implementation
>    details, which makes it hard to make improvements without breaking
>    client code that has come to depend on these details.
>
> The API of C entry points that can be used in R extensions, both for
> packages and embedding, has evolved organically over many years. The
> definition for the current release expressed in the Writing R
> Extensions manual (WRE) is roughly:
>
>      An entry point can be used if (1) it is declared in a header file
>      in R.home("include"), and (2) if it is documented for use in WRE.
>
> Ideally, (1) would be necessary and sufficient, but for a variety of
> reasons that isn't achievable, at least not in the near term. (2) can
> be challenging to determine; in particular, it is not amenable to a
> computational answer.
>
> An experimental effort is underway to add annotations to the WRE
> Texinfo source to allow (2) to be answered unambiguously. The
> annotations so far mostly reflect my reading or WRE and may be revised
> as they are reviewed by others. The annotated document can be used for
> programmatically identifying what is currently considered part of the C
> API. The result so far is an experimental function tools:::funAPI():
>
>      > head(tools:::funAPI())
>                      name                    loc apitype
>      1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
>      2        alloc3DArray                    WRE     api
>      3          allocArray                    WRE     api
>      4           allocLang                    WRE     api
>      5           allocList                    WRE     api
>      6         allocMatrix                    WRE     api
>
> The 'apitype' field has three possible levels
>
>      | api  | stable (ideally) API |
>      | eapi | experimental API     |
>      | emb  | embedding API        |
>
> Entry points in the embedded API would typically only be used in
> applications embedding R or providing new front ends, but might be
> reasonable to use in packages that support embedding.
>
> The 'loc' field indicates how the entry point is identified as part of
> an API: explicit mention in WRE, or declaration in a header file
> identified as fully part of an API.
>
> [tools:::funAPI() may not be completely accurate as it relies on
> regular expressions for examining header files considered part of the
> API rather than proper parsing. But it seems to be pretty close to
> what can be achieved with proper parsing.  Proper parsing would add
> dependencies on additional tools, which I would like to avoid for
> now. One dependency already present is that a C compiler has to be on
> the search path and cc -E has to run the C pre-processor.]
>
> Two additional experimental functions are available for analyzing
> package compliance: tools:::checkPkgAPI and tools:::checkAllPkgsAPI.
> These examine installed packages.
>
> [These may produce some false positives on macOS; they may or may not
> work on Windows at this point.]
>
> Using these tools initially showed around 200 non-API entry points
> used across packages on CRAN and BIOC. Ideally this number should be
> reduced to zero. This will require a combination of additions to the
> API and changes in packages.
>
> Some entry points can safely be added to the API. Around 40 have
> already been added to WRE with API annotations; another 40 or so can
> probably be added after review.
>
> The remainder mostly fall into two groups:
>
> - Entry points that should never be used in packages, such as
>    SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for that
>    matter) that can create inconsistent or corrupt internal state.
>
> - Entry points that depend on the existence of internal structure that
>    might be subject to change, such as the existence of promise objects
>    or internal structure of environments.
>
> Many, if not most, of these seem to be used in idioms that can either
> be accomplished with existing higher-level functions already in the
> API, or by new higher level functions that can be created and
> added. Working through these will take some time and coordination
> between R-core and maintainers of affected packages.
>
> Once things have gelled a bit more I hope to turn this into a blog
> post that will include some examples of moving non-API entry point
> uses into compliance.
>
> Best,
>
> luke
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From @d|rk@e @end|ng |rom g@m@@com  Fri Jun  7 15:24:57 2024
From: @d|rk@e @end|ng |rom g@m@@com (Steven Dirkse)
Date: Fri, 7 Jun 2024 09:24:57 -0400
Subject: [Rd] clarifying and adjusting the C API for R
In-Reply-To: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
Message-ID: <CAHiA-ZnQK238zu6yXAxCNBASP6LX+74S8LjvOfmC-9ujiAcU+g@mail.gmail.com>

Thanks for sharing this overview of an interesting and much-needed project.

You mention that R exports about 1500 symbols (on platforms supporting
visibility) but this subject isn't mentioned explicitly again in your note,
so I'm wondering how things tie together.  Un-exported symbols cannot be
part of the API - how would people use them in this case?  In a perfect
world the set of exported symbols could define the API or match it exactly,
but I guess that isn't the case at present.  So I conclude that R exports
extra (i.e. non-API) symbols.  Is part of the goal to remove these extra
exports?

-Steve

On Thu, Jun 6, 2024 at 10:47?AM luke-tierney--- via R-devel <
r-devel at r-project.org> wrote:

> This is an update on some current work on the C API for use in R
> extensions.
>
> The internal R implementation makes use of tens of thousands of C
> entry points. On Linux and Windows, which support visibility
> restrictions, most of these are visible only within the R executble or
> shared library. About 1500 are not hidden and are visible to
> dynamically loaded shared libraries, such as ones in packages, and to
> embedding applications.
>
> There are two main reasons for limiting access to entry points in a
> software framework:
>
> - Some entry points are very easy to use in ways that corrupt internal
>    data, leading to segfaults or, worse, incorrect computations without
>    segfaults.
>
> - Some entry point expose internal structure and other implementation
>    details, which makes it hard to make improvements without breaking
>    client code that has come to depend on these details.
>
> The API of C entry points that can be used in R extensions, both for
> packages and embedding, has evolved organically over many years. The
> definition for the current release expressed in the Writing R
> Extensions manual (WRE) is roughly:
>
>      An entry point can be used if (1) it is declared in a header file
>      in R.home("include"), and (2) if it is documented for use in WRE.
>
> Ideally, (1) would be necessary and sufficient, but for a variety of
> reasons that isn't achievable, at least not in the near term. (2) can
> be challenging to determine; in particular, it is not amenable to a
> computational answer.
>
> An experimental effort is underway to add annotations to the WRE
> Texinfo source to allow (2) to be answered unambiguously. The
> annotations so far mostly reflect my reading or WRE and may be revised
> as they are reviewed by others. The annotated document can be used for
> programmatically identifying what is currently considered part of the C
> API. The result so far is an experimental function tools:::funAPI():
>
>      > head(tools:::funAPI())
>                      name                    loc apitype
>      1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
>      2        alloc3DArray                    WRE     api
>      3          allocArray                    WRE     api
>      4           allocLang                    WRE     api
>      5           allocList                    WRE     api
>      6         allocMatrix                    WRE     api
>
> The 'apitype' field has three possible levels
>
>      | api  | stable (ideally) API |
>      | eapi | experimental API     |
>      | emb  | embedding API        |
>
> Entry points in the embedded API would typically only be used in
> applications embedding R or providing new front ends, but might be
> reasonable to use in packages that support embedding.
>
> The 'loc' field indicates how the entry point is identified as part of
> an API: explicit mention in WRE, or declaration in a header file
> identified as fully part of an API.
>
> [tools:::funAPI() may not be completely accurate as it relies on
> regular expressions for examining header files considered part of the
> API rather than proper parsing. But it seems to be pretty close to
> what can be achieved with proper parsing.  Proper parsing would add
> dependencies on additional tools, which I would like to avoid for
> now. One dependency already present is that a C compiler has to be on
> the search path and cc -E has to run the C pre-processor.]
>
> Two additional experimental functions are available for analyzing
> package compliance: tools:::checkPkgAPI and tools:::checkAllPkgsAPI.
> These examine installed packages.
>
> [These may produce some false positives on macOS; they may or may not
> work on Windows at this point.]
>
> Using these tools initially showed around 200 non-API entry points
> used across packages on CRAN and BIOC. Ideally this number should be
> reduced to zero. This will require a combination of additions to the
> API and changes in packages.
>
> Some entry points can safely be added to the API. Around 40 have
> already been added to WRE with API annotations; another 40 or so can
> probably be added after review.
>
> The remainder mostly fall into two groups:
>
> - Entry points that should never be used in packages, such as
>    SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for that
>    matter) that can create inconsistent or corrupt internal state.
>
> - Entry points that depend on the existence of internal structure that
>    might be subject to change, such as the existence of promise objects
>    or internal structure of environments.
>
> Many, if not most, of these seem to be used in idioms that can either
> be accomplished with existing higher-level functions already in the
> API, or by new higher level functions that can be created and
> added. Working through these will take some time and coordination
> between R-core and maintainers of affected packages.
>
> Once things have gelled a bit more I hope to turn this into a blog
> post that will include some examples of moving non-API entry point
> uses into compliance.
>
> Best,
>
> luke
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Jun  7 16:30:24 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 7 Jun 2024 09:30:24 -0500 (CDT)
Subject: [Rd] [External] Re:  clarifying and adjusting the C API for R
In-Reply-To: <CAHiA-ZnQK238zu6yXAxCNBASP6LX+74S8LjvOfmC-9ujiAcU+g@mail.gmail.com>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
 <CAHiA-ZnQK238zu6yXAxCNBASP6LX+74S8LjvOfmC-9ujiAcU+g@mail.gmail.com>
Message-ID: <6ca3dc90-b06d-1678-8faf-4c8d382dd8b3@uiowa.edu>

On Fri, 7 Jun 2024, Steven Dirkse wrote:

> You don't often get email from sdirkse at gams.com. Learn why this is important
> Thanks for sharing this overview of an interesting and much-needed project.
> You mention that R exports about 1500 symbols (on platforms supporting
> visibility) but this subject isn't mentioned explicitly again in your note,
> so I'm wondering how things?tie together.? Un-exported symbols cannot be
> part of the API - how would people use them in this case?? In a perfect
> world the set of exported symbols could define the API or match it exactly,
> but I guess that isn't the case at present.? So I conclude that R exports
> extra (i.e. non-API) symbols.? Is part of the goal to remove these extra
> exports?

No. We'll hide what we can, but base packages for one need access to
some entry points that should not be in the API, so those have to stay
un-hidden.

Best,

luke

> 
> -Steve
> 
> On Thu, Jun 6, 2024 at 10:47?AM luke-tierney--- via R-devel
> <r-devel at r-project.org> wrote:
>       This is an update on some current work on the C API for use in R
>       extensions.
>
>       The internal R implementation makes use of tens of thousands of
>       C
>       entry points. On Linux and Windows, which support visibility
>       restrictions, most of these are visible only within the R
>       executble or
>       shared library. About 1500 are not hidden and are visible to
>       dynamically loaded shared libraries, such as ones in packages,
>       and to
>       embedding applications.
>
>       There are two main reasons for limiting access to entry points
>       in a
>       software framework:
>
>       - Some entry points are very easy to use in ways that corrupt
>       internal
>       ? ?data, leading to segfaults or, worse, incorrect computations
>       without
>       ? ?segfaults.
>
>       - Some entry point expose internal structure and other
>       implementation
>       ? ?details, which makes it hard to make improvements without
>       breaking
>       ? ?client code that has come to depend on these details.
>
>       The API of C entry points that can be used in R extensions, both
>       for
>       packages and embedding, has evolved organically over many years.
>       The
>       definition for the current release expressed in the Writing R
>       Extensions manual (WRE) is roughly:
>
>       ? ? ?An entry point can be used if (1) it is declared in a
>       header file
>       ? ? ?in R.home("include"), and (2) if it is documented for use
>       in WRE.
>
>       Ideally, (1) would be necessary and sufficient, but for a
>       variety of
>       reasons that isn't achievable, at least not in the near term.
>       (2) can
>       be challenging to determine; in particular, it is not amenable
>       to a
>       computational answer.
>
>       An experimental effort is underway to add annotations to the WRE
>       Texinfo source to allow (2) to be answered unambiguously. The
>       annotations so far mostly reflect my reading or WRE and may be
>       revised
>       as they are reviewed by others. The annotated document can be
>       used for
>       programmatically identifying what is currently considered part
>       of the C
>       API. The result so far is an experimental function
>       tools:::funAPI():
>
>       ? ? ?> head(tools:::funAPI())
>       ? ? ? ? ? ? ? ? ? ? ?name? ? ? ? ? ? ? ? ? ? loc apitype
>       ? ? ?1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h? ? eapi
>       ? ? ?2? ? ? ? alloc3DArray? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?3? ? ? ? ? allocArray? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?4? ? ? ? ? ?allocLang? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?5? ? ? ? ? ?allocList? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?6? ? ? ? ?allocMatrix? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>
>       The 'apitype' field has three possible levels
>
>       ? ? ?| api? | stable (ideally) API |
>       ? ? ?| eapi | experimental API? ? ?|
>       ? ? ?| emb? | embedding API? ? ? ? |
>
>       Entry points in the embedded API would typically only be used in
>       applications embedding R or providing new front ends, but might
>       be
>       reasonable to use in packages that support embedding.
>
>       The 'loc' field indicates how the entry point is identified as
>       part of
>       an API: explicit mention in WRE, or declaration in a header file
>       identified as fully part of an API.
>
>       [tools:::funAPI() may not be completely accurate as it relies on
>       regular expressions for examining header files considered part
>       of the
>       API rather than proper parsing. But it seems to be pretty close
>       to
>       what can be achieved with proper parsing.? Proper parsing would
>       add
>       dependencies on additional tools, which I would like to avoid
>       for
>       now. One dependency already present is that a C compiler has to
>       be on
>       the search path and cc -E has to run the C pre-processor.]
>
>       Two additional experimental functions are available for
>       analyzing
>       package compliance: tools:::checkPkgAPI and
>       tools:::checkAllPkgsAPI.
>       These examine installed packages.
>
>       [These may produce some false positives on macOS; they may or
>       may not
>       work on Windows at this point.]
>
>       Using these tools initially showed around 200 non-API entry
>       points
>       used across packages on CRAN and BIOC. Ideally this number
>       should be
>       reduced to zero. This will require a combination of additions to
>       the
>       API and changes in packages.
>
>       Some entry points can safely be added to the API. Around 40 have
>       already been added to WRE with API annotations; another 40 or so
>       can
>       probably be added after review.
>
>       The remainder mostly fall into two groups:
>
>       - Entry points that should never be used in packages, such as
>       ? ?SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for
>       that
>       ? ?matter) that can create inconsistent or corrupt internal
>       state.
>
>       - Entry points that depend on the existence of internal
>       structure that
>       ? ?might be subject to change, such as the existence of promise
>       objects
>       ? ?or internal structure of environments.
>
>       Many, if not most, of these seem to be used in idioms that can
>       either
>       be accomplished with existing higher-level functions already in
>       the
>       API, or by new higher level functions that can be created and
>       added. Working through these will take some time and
>       coordination
>       between R-core and maintainers of affected packages.
>
>       Once things have gelled a bit more I hope to turn this into a
>       blog
>       post that will include some examples of moving non-API entry
>       point
>       uses into compliance.
>
>       Best,
>
>       luke
>
>       --
>       Luke Tierney
>       Ralph E. Wareham Professor of Mathematical Sciences
>       University of Iowa? ? ? ? ? ? ? ? ? Phone:? ? ? ? ? ?
>       ?319-335-3386
>       Department of Statistics and? ? ? ? Fax:? ? ? ? ? ? ?
>       ?319-335-3017
>       ? ? Actuarial Science
>       241 Schaeffer Hall? ? ? ? ? ? ? ? ? email:?
>       ?luke-tierney at uiowa.edu
>       Iowa City, IA 52242? ? ? ? ? ? ? ? ?WWW:?
>       http://www.stat.uiowa.edu
>
>       ______________________________________________
>       R-devel at r-project.org mailing list
>       https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 
> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From iuke-tier@ey m@iii@g oii uiow@@edu  Sat Jun  8 01:58:35 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 7 Jun 2024 18:58:35 -0500 (CDT)
Subject: [Rd] [External] Re:  clarifying and adjusting the C API for R
In-Reply-To: <CABdHhvHJcQdty3KzeCVKMOusokBRKWH=znu1HJM6722ROsY1Mg@mail.gmail.com>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
 <CABdHhvHJcQdty3KzeCVKMOusokBRKWH=znu1HJM6722ROsY1Mg@mail.gmail.com>
Message-ID: <97c70937-941d-7c64-d8d0-a4e94e88dcb7@uiowa.edu>

On Fri, 7 Jun 2024, Hadley Wickham wrote:

> Thanks for working on this Luke! We appreciate your efforts to make it
> easier to tell what's in the exported API and we're very happy to work with
> you on any changes needed to tidyverse/r-lib packages.
> Hadley

Thanks. Glad to hear -- I may be reminding you when we hit some of the
tougher challenges down the road :-)

Best,

luke

> 
> On Thu, Jun 6, 2024 at 9:47?AM luke-tierney--- via R-devel
> <r-devel at r-project.org> wrote:
>       This is an update on some current work on the C API for use in R
>       extensions.
>
>       The internal R implementation makes use of tens of thousands of
>       C
>       entry points. On Linux and Windows, which support visibility
>       restrictions, most of these are visible only within the R
>       executble or
>       shared library. About 1500 are not hidden and are visible to
>       dynamically loaded shared libraries, such as ones in packages,
>       and to
>       embedding applications.
>
>       There are two main reasons for limiting access to entry points
>       in a
>       software framework:
>
>       - Some entry points are very easy to use in ways that corrupt
>       internal
>       ? ?data, leading to segfaults or, worse, incorrect computations
>       without
>       ? ?segfaults.
>
>       - Some entry point expose internal structure and other
>       implementation
>       ? ?details, which makes it hard to make improvements without
>       breaking
>       ? ?client code that has come to depend on these details.
>
>       The API of C entry points that can be used in R extensions, both
>       for
>       packages and embedding, has evolved organically over many years.
>       The
>       definition for the current release expressed in the Writing R
>       Extensions manual (WRE) is roughly:
>
>       ? ? ?An entry point can be used if (1) it is declared in a
>       header file
>       ? ? ?in R.home("include"), and (2) if it is documented for use
>       in WRE.
>
>       Ideally, (1) would be necessary and sufficient, but for a
>       variety of
>       reasons that isn't achievable, at least not in the near term.
>       (2) can
>       be challenging to determine; in particular, it is not amenable
>       to a
>       computational answer.
>
>       An experimental effort is underway to add annotations to the WRE
>       Texinfo source to allow (2) to be answered unambiguously. The
>       annotations so far mostly reflect my reading or WRE and may be
>       revised
>       as they are reviewed by others. The annotated document can be
>       used for
>       programmatically identifying what is currently considered part
>       of the C
>       API. The result so far is an experimental function
>       tools:::funAPI():
>
>       ? ? ?> head(tools:::funAPI())
>       ? ? ? ? ? ? ? ? ? ? ?name? ? ? ? ? ? ? ? ? ? loc apitype
>       ? ? ?1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h? ? eapi
>       ? ? ?2? ? ? ? alloc3DArray? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?3? ? ? ? ? allocArray? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?4? ? ? ? ? ?allocLang? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?5? ? ? ? ? ?allocList? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>       ? ? ?6? ? ? ? ?allocMatrix? ? ? ? ? ? ? ? ? ? WRE? ? ?api
>
>       The 'apitype' field has three possible levels
>
>       ? ? ?| api? | stable (ideally) API |
>       ? ? ?| eapi | experimental API? ? ?|
>       ? ? ?| emb? | embedding API? ? ? ? |
>
>       Entry points in the embedded API would typically only be used in
>       applications embedding R or providing new front ends, but might
>       be
>       reasonable to use in packages that support embedding.
>
>       The 'loc' field indicates how the entry point is identified as
>       part of
>       an API: explicit mention in WRE, or declaration in a header file
>       identified as fully part of an API.
>
>       [tools:::funAPI() may not be completely accurate as it relies on
>       regular expressions for examining header files considered part
>       of the
>       API rather than proper parsing. But it seems to be pretty close
>       to
>       what can be achieved with proper parsing.? Proper parsing would
>       add
>       dependencies on additional tools, which I would like to avoid
>       for
>       now. One dependency already present is that a C compiler has to
>       be on
>       the search path and cc -E has to run the C pre-processor.]
>
>       Two additional experimental functions are available for
>       analyzing
>       package compliance: tools:::checkPkgAPI and
>       tools:::checkAllPkgsAPI.
>       These examine installed packages.
>
>       [These may produce some false positives on macOS; they may or
>       may not
>       work on Windows at this point.]
>
>       Using these tools initially showed around 200 non-API entry
>       points
>       used across packages on CRAN and BIOC. Ideally this number
>       should be
>       reduced to zero. This will require a combination of additions to
>       the
>       API and changes in packages.
>
>       Some entry points can safely be added to the API. Around 40 have
>       already been added to WRE with API annotations; another 40 or so
>       can
>       probably be added after review.
>
>       The remainder mostly fall into two groups:
>
>       - Entry points that should never be used in packages, such as
>       ? ?SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for
>       that
>       ? ?matter) that can create inconsistent or corrupt internal
>       state.
>
>       - Entry points that depend on the existence of internal
>       structure that
>       ? ?might be subject to change, such as the existence of promise
>       objects
>       ? ?or internal structure of environments.
>
>       Many, if not most, of these seem to be used in idioms that can
>       either
>       be accomplished with existing higher-level functions already in
>       the
>       API, or by new higher level functions that can be created and
>       added. Working through these will take some time and
>       coordination
>       between R-core and maintainers of affected packages.
>
>       Once things have gelled a bit more I hope to turn this into a
>       blog
>       post that will include some examples of moving non-API entry
>       point
>       uses into compliance.
>
>       Best,
>
>       luke
>
>       --
>       Luke Tierney
>       Ralph E. Wareham Professor of Mathematical Sciences
>       University of Iowa? ? ? ? ? ? ? ? ? Phone:
>       ?319-335-3386
>       Department of Statistics and? ? ? ? Fax:
>       ?319-335-3017
>       ? ? Actuarial Science
>       241 Schaeffer Hall? ? ? ? ? ? ? ? ? email:
>       ?luke-tierney at uiowa.edu
>       Iowa City, IA 52242? ? ? ? ? ? ? ? ?WWW:
>       http://www.stat.uiowa.edu
>
>       ______________________________________________
>       R-devel at r-project.org mailing list
>       https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 
> --
> http://hadley.nz
> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From r@c@rtwr|ght @end|ng |rom gm@||@com  Sat Jun  8 02:06:46 2024
From: r@c@rtwr|ght @end|ng |rom gm@||@com (Reed A. Cartwright)
Date: Fri, 7 Jun 2024 17:06:46 -0700
Subject: [Rd] [External] Re: clarifying and adjusting the C API for R
In-Reply-To: <6ca3dc90-b06d-1678-8faf-4c8d382dd8b3@uiowa.edu>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
 <CAHiA-ZnQK238zu6yXAxCNBASP6LX+74S8LjvOfmC-9ujiAcU+g@mail.gmail.com>
 <6ca3dc90-b06d-1678-8faf-4c8d382dd8b3@uiowa.edu>
Message-ID: <CALOkxuzKfiGTQ8rzZcM9uy0f+acrdXKeSdxz2qSX2_04+=YAgw@mail.gmail.com>

Would it be reasonable to move the non-API stuff that cannot be hidden
into header files inside a "details" directory (or some other specific
naming scheme)?

That's what I use when I need to separate a public API from an internal API.


On Fri, Jun 7, 2024 at 7:30?AM luke-tierney--- via R-devel
<r-devel at r-project.org> wrote:
>
> On Fri, 7 Jun 2024, Steven Dirkse wrote:
>
> > You don't often get email from sdirkse at gams.com. Learn why this is important
> > Thanks for sharing this overview of an interesting and much-needed project.
> > You mention that R exports about 1500 symbols (on platforms supporting
> > visibility) but this subject isn't mentioned explicitly again in your note,
> > so I'm wondering how things tie together.  Un-exported symbols cannot be
> > part of the API - how would people use them in this case?  In a perfect
> > world the set of exported symbols could define the API or match it exactly,
> > but I guess that isn't the case at present.  So I conclude that R exports
> > extra (i.e. non-API) symbols.  Is part of the goal to remove these extra
> > exports?
>
> No. We'll hide what we can, but base packages for one need access to
> some entry points that should not be in the API, so those have to stay
> un-hidden.
>
> Best,
>
> luke
>
> >
> > -Steve
> >
> > On Thu, Jun 6, 2024 at 10:47?AM luke-tierney--- via R-devel
> > <r-devel at r-project.org> wrote:
> >       This is an update on some current work on the C API for use in R
> >       extensions.
> >
> >       The internal R implementation makes use of tens of thousands of
> >       C
> >       entry points. On Linux and Windows, which support visibility
> >       restrictions, most of these are visible only within the R
> >       executble or
> >       shared library. About 1500 are not hidden and are visible to
> >       dynamically loaded shared libraries, such as ones in packages,
> >       and to
> >       embedding applications.
> >
> >       There are two main reasons for limiting access to entry points
> >       in a
> >       software framework:
> >
> >       - Some entry points are very easy to use in ways that corrupt
> >       internal
> >          data, leading to segfaults or, worse, incorrect computations
> >       without
> >          segfaults.
> >
> >       - Some entry point expose internal structure and other
> >       implementation
> >          details, which makes it hard to make improvements without
> >       breaking
> >          client code that has come to depend on these details.
> >
> >       The API of C entry points that can be used in R extensions, both
> >       for
> >       packages and embedding, has evolved organically over many years.
> >       The
> >       definition for the current release expressed in the Writing R
> >       Extensions manual (WRE) is roughly:
> >
> >            An entry point can be used if (1) it is declared in a
> >       header file
> >            in R.home("include"), and (2) if it is documented for use
> >       in WRE.
> >
> >       Ideally, (1) would be necessary and sufficient, but for a
> >       variety of
> >       reasons that isn't achievable, at least not in the near term.
> >       (2) can
> >       be challenging to determine; in particular, it is not amenable
> >       to a
> >       computational answer.
> >
> >       An experimental effort is underway to add annotations to the WRE
> >       Texinfo source to allow (2) to be answered unambiguously. The
> >       annotations so far mostly reflect my reading or WRE and may be
> >       revised
> >       as they are reviewed by others. The annotated document can be
> >       used for
> >       programmatically identifying what is currently considered part
> >       of the C
> >       API. The result so far is an experimental function
> >       tools:::funAPI():
> >
> >            > head(tools:::funAPI())
> >                            name                    loc apitype
> >            1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
> >            2        alloc3DArray                    WRE     api
> >            3          allocArray                    WRE     api
> >            4           allocLang                    WRE     api
> >            5           allocList                    WRE     api
> >            6         allocMatrix                    WRE     api
> >
> >       The 'apitype' field has three possible levels
> >
> >            | api  | stable (ideally) API |
> >            | eapi | experimental API     |
> >            | emb  | embedding API        |
> >
> >       Entry points in the embedded API would typically only be used in
> >       applications embedding R or providing new front ends, but might
> >       be
> >       reasonable to use in packages that support embedding.
> >
> >       The 'loc' field indicates how the entry point is identified as
> >       part of
> >       an API: explicit mention in WRE, or declaration in a header file
> >       identified as fully part of an API.
> >
> >       [tools:::funAPI() may not be completely accurate as it relies on
> >       regular expressions for examining header files considered part
> >       of the
> >       API rather than proper parsing. But it seems to be pretty close
> >       to
> >       what can be achieved with proper parsing.  Proper parsing would
> >       add
> >       dependencies on additional tools, which I would like to avoid
> >       for
> >       now. One dependency already present is that a C compiler has to
> >       be on
> >       the search path and cc -E has to run the C pre-processor.]
> >
> >       Two additional experimental functions are available for
> >       analyzing
> >       package compliance: tools:::checkPkgAPI and
> >       tools:::checkAllPkgsAPI.
> >       These examine installed packages.
> >
> >       [These may produce some false positives on macOS; they may or
> >       may not
> >       work on Windows at this point.]
> >
> >       Using these tools initially showed around 200 non-API entry
> >       points
> >       used across packages on CRAN and BIOC. Ideally this number
> >       should be
> >       reduced to zero. This will require a combination of additions to
> >       the
> >       API and changes in packages.
> >
> >       Some entry points can safely be added to the API. Around 40 have
> >       already been added to WRE with API annotations; another 40 or so
> >       can
> >       probably be added after review.
> >
> >       The remainder mostly fall into two groups:
> >
> >       - Entry points that should never be used in packages, such as
> >          SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for
> >       that
> >          matter) that can create inconsistent or corrupt internal
> >       state.
> >
> >       - Entry points that depend on the existence of internal
> >       structure that
> >          might be subject to change, such as the existence of promise
> >       objects
> >          or internal structure of environments.
> >
> >       Many, if not most, of these seem to be used in idioms that can
> >       either
> >       be accomplished with existing higher-level functions already in
> >       the
> >       API, or by new higher level functions that can be created and
> >       added. Working through these will take some time and
> >       coordination
> >       between R-core and maintainers of affected packages.
> >
> >       Once things have gelled a bit more I hope to turn this into a
> >       blog
> >       post that will include some examples of moving non-API entry
> >       point
> >       uses into compliance.
> >
> >       Best,
> >
> >       luke
> >
> >       --
> >       Luke Tierney
> >       Ralph E. Wareham Professor of Mathematical Sciences
> >       University of Iowa                  Phone:
> >        319-335-3386
> >       Department of Statistics and        Fax:
> >        319-335-3017
> >           Actuarial Science
> >       241 Schaeffer Hall                  email:
> >        luke-tierney at uiowa.edu
> >       Iowa City, IA 52242                 WWW:
> >       https://urldefense.com/v3/__http://www.stat.uiowa.edu__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZBvMvo18$
> >
> >       ______________________________________________
> >       R-devel at r-project.org mailing list
> >       https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZnVX5taE$
> >
> >
> >
> >
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  https://urldefense.com/v3/__http://www.stat.uiowa.edu__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZBvMvo18$
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZnVX5taE$


From iuke-tier@ey m@iii@g oii uiow@@edu  Sat Jun  8 02:52:43 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 7 Jun 2024 19:52:43 -0500 (CDT)
Subject: [Rd] [External] Re: clarifying and adjusting the C API for R
In-Reply-To: <CALOkxuzKfiGTQ8rzZcM9uy0f+acrdXKeSdxz2qSX2_04+=YAgw@mail.gmail.com>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
 <CAHiA-ZnQK238zu6yXAxCNBASP6LX+74S8LjvOfmC-9ujiAcU+g@mail.gmail.com>
 <6ca3dc90-b06d-1678-8faf-4c8d382dd8b3@uiowa.edu>
 <CALOkxuzKfiGTQ8rzZcM9uy0f+acrdXKeSdxz2qSX2_04+=YAgw@mail.gmail.com>
Message-ID: <eb46c07e-ba96-9a09-243c-88ef52b6f787@uiowa.edu>

On Sat, 8 Jun 2024, Reed A. Cartwright wrote:

> [You don't often get email from racartwright at gmail.com. Learn why this is important at https://aka.ms/LearnAboutSenderIdentification ]
>
> Would it be reasonable to move the non-API stuff that cannot be hidden
> into header files inside a "details" directory (or some other specific
> naming scheme)?
>
> That's what I use when I need to separate a public API from an internal API.

As do I, as does everyone else. As I wrote originally: " ... for a
variety of reasons that isn't achievable, at least not in the near
term." Can we leave it at that please?

luke

>
> On Fri, Jun 7, 2024 at 7:30?AM luke-tierney--- via R-devel
> <r-devel at r-project.org> wrote:
>>
>> On Fri, 7 Jun 2024, Steven Dirkse wrote:
>>
>>> You don't often get email from sdirkse at gams.com. Learn why this is important
>>> Thanks for sharing this overview of an interesting and much-needed project.
>>> You mention that R exports about 1500 symbols (on platforms supporting
>>> visibility) but this subject isn't mentioned explicitly again in your note,
>>> so I'm wondering how things tie together.  Un-exported symbols cannot be
>>> part of the API - how would people use them in this case?  In a perfect
>>> world the set of exported symbols could define the API or match it exactly,
>>> but I guess that isn't the case at present.  So I conclude that R exports
>>> extra (i.e. non-API) symbols.  Is part of the goal to remove these extra
>>> exports?
>>
>> No. We'll hide what we can, but base packages for one need access to
>> some entry points that should not be in the API, so those have to stay
>> un-hidden.
>>
>> Best,
>>
>> luke
>>
>>>
>>> -Steve
>>>
>>> On Thu, Jun 6, 2024 at 10:47?AM luke-tierney--- via R-devel
>>> <r-devel at r-project.org> wrote:
>>>       This is an update on some current work on the C API for use in R
>>>       extensions.
>>>
>>>       The internal R implementation makes use of tens of thousands of
>>>       C
>>>       entry points. On Linux and Windows, which support visibility
>>>       restrictions, most of these are visible only within the R
>>>       executble or
>>>       shared library. About 1500 are not hidden and are visible to
>>>       dynamically loaded shared libraries, such as ones in packages,
>>>       and to
>>>       embedding applications.
>>>
>>>       There are two main reasons for limiting access to entry points
>>>       in a
>>>       software framework:
>>>
>>>       - Some entry points are very easy to use in ways that corrupt
>>>       internal
>>>          data, leading to segfaults or, worse, incorrect computations
>>>       without
>>>          segfaults.
>>>
>>>       - Some entry point expose internal structure and other
>>>       implementation
>>>          details, which makes it hard to make improvements without
>>>       breaking
>>>          client code that has come to depend on these details.
>>>
>>>       The API of C entry points that can be used in R extensions, both
>>>       for
>>>       packages and embedding, has evolved organically over many years.
>>>       The
>>>       definition for the current release expressed in the Writing R
>>>       Extensions manual (WRE) is roughly:
>>>
>>>            An entry point can be used if (1) it is declared in a
>>>       header file
>>>            in R.home("include"), and (2) if it is documented for use
>>>       in WRE.
>>>
>>>       Ideally, (1) would be necessary and sufficient, but for a
>>>       variety of
>>>       reasons that isn't achievable, at least not in the near term.
>>>       (2) can
>>>       be challenging to determine; in particular, it is not amenable
>>>       to a
>>>       computational answer.
>>>
>>>       An experimental effort is underway to add annotations to the WRE
>>>       Texinfo source to allow (2) to be answered unambiguously. The
>>>       annotations so far mostly reflect my reading or WRE and may be
>>>       revised
>>>       as they are reviewed by others. The annotated document can be
>>>       used for
>>>       programmatically identifying what is currently considered part
>>>       of the C
>>>       API. The result so far is an experimental function
>>>       tools:::funAPI():
>>>
>>>           > head(tools:::funAPI())
>>>                            name                    loc apitype
>>>            1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
>>>            2        alloc3DArray                    WRE     api
>>>            3          allocArray                    WRE     api
>>>            4           allocLang                    WRE     api
>>>            5           allocList                    WRE     api
>>>            6         allocMatrix                    WRE     api
>>>
>>>       The 'apitype' field has three possible levels
>>>
>>>            | api  | stable (ideally) API |
>>>            | eapi | experimental API     |
>>>            | emb  | embedding API        |
>>>
>>>       Entry points in the embedded API would typically only be used in
>>>       applications embedding R or providing new front ends, but might
>>>       be
>>>       reasonable to use in packages that support embedding.
>>>
>>>       The 'loc' field indicates how the entry point is identified as
>>>       part of
>>>       an API: explicit mention in WRE, or declaration in a header file
>>>       identified as fully part of an API.
>>>
>>>       [tools:::funAPI() may not be completely accurate as it relies on
>>>       regular expressions for examining header files considered part
>>>       of the
>>>       API rather than proper parsing. But it seems to be pretty close
>>>       to
>>>       what can be achieved with proper parsing.  Proper parsing would
>>>       add
>>>       dependencies on additional tools, which I would like to avoid
>>>       for
>>>       now. One dependency already present is that a C compiler has to
>>>       be on
>>>       the search path and cc -E has to run the C pre-processor.]
>>>
>>>       Two additional experimental functions are available for
>>>       analyzing
>>>       package compliance: tools:::checkPkgAPI and
>>>       tools:::checkAllPkgsAPI.
>>>       These examine installed packages.
>>>
>>>       [These may produce some false positives on macOS; they may or
>>>       may not
>>>       work on Windows at this point.]
>>>
>>>       Using these tools initially showed around 200 non-API entry
>>>       points
>>>       used across packages on CRAN and BIOC. Ideally this number
>>>       should be
>>>       reduced to zero. This will require a combination of additions to
>>>       the
>>>       API and changes in packages.
>>>
>>>       Some entry points can safely be added to the API. Around 40 have
>>>       already been added to WRE with API annotations; another 40 or so
>>>       can
>>>       probably be added after review.
>>>
>>>       The remainder mostly fall into two groups:
>>>
>>>       - Entry points that should never be used in packages, such as
>>>          SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for
>>>       that
>>>          matter) that can create inconsistent or corrupt internal
>>>       state.
>>>
>>>       - Entry points that depend on the existence of internal
>>>       structure that
>>>          might be subject to change, such as the existence of promise
>>>       objects
>>>          or internal structure of environments.
>>>
>>>       Many, if not most, of these seem to be used in idioms that can
>>>       either
>>>       be accomplished with existing higher-level functions already in
>>>       the
>>>       API, or by new higher level functions that can be created and
>>>       added. Working through these will take some time and
>>>       coordination
>>>       between R-core and maintainers of affected packages.
>>>
>>>       Once things have gelled a bit more I hope to turn this into a
>>>       blog
>>>       post that will include some examples of moving non-API entry
>>>       point
>>>       uses into compliance.
>>>
>>>       Best,
>>>
>>>       luke
>>>
>>>       --
>>>       Luke Tierney
>>>       Ralph E. Wareham Professor of Mathematical Sciences
>>>       University of Iowa                  Phone:
>>>        319-335-3386
>>>       Department of Statistics and        Fax:
>>>        319-335-3017
>>>           Actuarial Science
>>>       241 Schaeffer Hall                  email:
>>>        luke-tierney at uiowa.edu
>>>       Iowa City, IA 52242                 WWW:
>>>       https://urldefense.com/v3/__http://www.stat.uiowa.edu__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZBvMvo18$
>>>
>>>       ______________________________________________
>>>       R-devel at r-project.org mailing list
>>>       https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZnVX5taE$
>>>
>>>
>>>
>>>
>>>
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>     Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  https://urldefense.com/v3/__http://www.stat.uiowa.edu__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZBvMvo18$
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!IKRxdwAv5BmarQ!foNGcMBk1Ky20Cgz66006bUDTWTxmZhh2ntk8-PLXUqCy2s6xw68UOo-fy7OsIRpHBwgMtfQyBkcYZUZnVX5taE$
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/

From bbo|ker @end|ng |rom gm@||@com  Sun Jun  9 00:06:14 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 8 Jun 2024 18:06:14 -0400
Subject: [Rd] changes in R-devel and zero-extent objects in Rcpp
Message-ID: <92af423f-e83b-4b10-899f-0ba22999a44b@gmail.com>


    A change to R-devel (SVN r86629 or 
https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250 
has changed the handling of pointers to zero-length objects, leading to 
ASAN issues with a number of Rcpp-based packages (the commit message 
reads, in part, "Also define STRICT_TYPECHECK when compiling inlined.c.")

   I'm interested in discussion from the community.

   Details/diagnosis for the issues in the lme4 package are here: 
https://github.com/lme4/lme4/issues/794, with a bit more discussion 
about how zero-length objects should be handled.

   The short(ish) version is that r86629 enables the 
CATCH_ZERO_LENGTH_ACCESS definition. This turns on the CHKZLN macro 
<https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104>, 
which returns a trivial pointer (rather than the data pointer that would 
be returned in the normal control flow) if an object has length 0:

/* Attempts to read or write elements of a zero length vector will
    result in a segfault, rather than read and write random memory.
    Returning NULL would be more natural, but Matrix seems to assume
    that even zero-length vectors have non-NULL data pointers, so
    return (void *) 1 instead. Zero-length CHARSXP objects still have a
    trailing zero byte so they are not handled. */

   In the Rcpp context this leads to an inconsistency, where `REAL(x)` 
is a 'real' external pointer and `DATAPTR(x)` is 0x1, which in turn 
leads to ASAN warnings like

runtime error: reference binding to misaligned address 0x000000000001 
for type 'const double', which requires 8 byte alignment
0x000000000001: note: pointer points here

    I'm in over my head and hoping for insight into whether this problem 
should be resolved by changing R, Rcpp, or downstream Rcpp packages ...

   cheers
    Ben Bolker


From kev|nu@hey @end|ng |rom gm@||@com  Sun Jun  9 00:39:50 2024
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Sat, 8 Jun 2024 15:39:50 -0700
Subject: [Rd] changes in R-devel and zero-extent objects in Rcpp
In-Reply-To: <92af423f-e83b-4b10-899f-0ba22999a44b@gmail.com>
References: <92af423f-e83b-4b10-899f-0ba22999a44b@gmail.com>
Message-ID: <CAJXgQP3gAbkW-w4kmc3BfJc9gMd=wGGOs2VLu1bEwpwYKQF+bA@mail.gmail.com>

IMHO, this should be changed in both Rcpp and downstream packages:

1. Rcpp could check for out-of-bounds accesses in cases like these, and
emit an R warning / error when such an access is detected;

2. The downstream packages unintentionally making these out-of-bounds
accesses should be fixed to avoid doing that.

That is, I think this is ultimately a bug in the affected packages, but
Rcpp could do better in detecting and handling this for client packages
(avoiding a segfault).

Best,
Kevin


On Sat, Jun 8, 2024, 3:06?PM Ben Bolker <bbolker at gmail.com> wrote:

>
>     A change to R-devel (SVN r86629 or
>
> https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250
> has changed the handling of pointers to zero-length objects, leading to
> ASAN issues with a number of Rcpp-based packages (the commit message
> reads, in part, "Also define STRICT_TYPECHECK when compiling inlined.c.")
>
>    I'm interested in discussion from the community.
>
>    Details/diagnosis for the issues in the lme4 package are here:
> https://github.com/lme4/lme4/issues/794, with a bit more discussion
> about how zero-length objects should be handled.
>
>    The short(ish) version is that r86629 enables the
> CATCH_ZERO_LENGTH_ACCESS definition. This turns on the CHKZLN macro
> <
> https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104>,
>
> which returns a trivial pointer (rather than the data pointer that would
> be returned in the normal control flow) if an object has length 0:
>
> /* Attempts to read or write elements of a zero length vector will
>     result in a segfault, rather than read and write random memory.
>     Returning NULL would be more natural, but Matrix seems to assume
>     that even zero-length vectors have non-NULL data pointers, so
>     return (void *) 1 instead. Zero-length CHARSXP objects still have a
>     trailing zero byte so they are not handled. */
>
>    In the Rcpp context this leads to an inconsistency, where `REAL(x)`
> is a 'real' external pointer and `DATAPTR(x)` is 0x1, which in turn
> leads to ASAN warnings like
>
> runtime error: reference binding to misaligned address 0x000000000001
> for type 'const double', which requires 8 byte alignment
> 0x000000000001: note: pointer points here
>
>     I'm in over my head and hoping for insight into whether this problem
> should be resolved by changing R, Rcpp, or downstream Rcpp packages ...
>
>    cheers
>     Ben Bolker
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Sun Jun  9 01:16:22 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 8 Jun 2024 19:16:22 -0400
Subject: [Rd] changes in R-devel and zero-extent objects in Rcpp
In-Reply-To: <CAJXgQP3gAbkW-w4kmc3BfJc9gMd=wGGOs2VLu1bEwpwYKQF+bA@mail.gmail.com>
References: <92af423f-e83b-4b10-899f-0ba22999a44b@gmail.com>
 <CAJXgQP3gAbkW-w4kmc3BfJc9gMd=wGGOs2VLu1bEwpwYKQF+bA@mail.gmail.com>
Message-ID: <e61b6315-025a-4e88-8087-2eeba0f4fad2@gmail.com>

   The ASAN errors occur *even if the zero-length object is not actually 
accessed*/is used in a perfectly correct manner, i.e. it's perfectly 
legal in base R to define `m <- numeric(0)` or `m <- matrix(nrow = 0, 
ncol = 0)`, whereas doing the equivalent in Rcpp will (now) lead to an 
ASAN error.

   i.e., these are *not* previously cryptic out-of-bounds accesses that 
are now being revealed, but instead sensible and previously legal 
definitions of zero-length objects that are now causing problems.

    I'm pretty sure I'm right about this, but it's absolutely possible 
that I'm just confused at this point; I don't have a super-simple 
example to show you at the moment. The closest is this example by Mikael 
Jagan: https://github.com/lme4/lme4/issues/794#issuecomment-2155093049

   which shows that if x is a pointer to a zero-length vector (in plain 
C++ for R, no Rcpp is involved), DATAPTR(x) and REAL(x) evaluate to 
different values.

   Mikael further points out that "Rcpp seems to cast a (void *) 
returned by DATAPTR to (double *) when constructing a Vector<REALSXP> 
from a SEXP, rather than using the (double *) returned by REAL." So 
perhaps R-core doesn't want to guarantee that these operations give 
identical answers, in which case Rcpp will have to change the way it 
does things ...

   cheers
    Ben



On 2024-06-08 6:39 p.m., Kevin Ushey wrote:
> IMHO, this should be changed in both Rcpp and downstream packages:
> 
> 1. Rcpp could check for out-of-bounds accesses in cases like these, and 
> emit an R warning / error when such an access is detected;
> 
> 2. The downstream packages unintentionally making these out-of-bounds 
> accesses should be fixed to avoid doing that.
> 
> That is, I think this is ultimately a bug in the affected packages, but 
> Rcpp could do better in detecting and handling this for client packages 
> (avoiding a segfault).
> 
> Best,
> Kevin
> 
> 
> On Sat, Jun 8, 2024, 3:06?PM Ben Bolker <bbolker at gmail.com 
> <mailto:bbolker at gmail.com>> wrote:
> 
> 
>      ? ? A change to R-devel (SVN r86629 or
>     https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250 <https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250>
>     has changed the handling of pointers to zero-length objects, leading to
>     ASAN issues with a number of Rcpp-based packages (the commit message
>     reads, in part, "Also define STRICT_TYPECHECK when compiling
>     inlined.c.")
> 
>      ? ?I'm interested in discussion from the community.
> 
>      ? ?Details/diagnosis for the issues in the lme4 package are here:
>     https://github.com/lme4/lme4/issues/794
>     <https://github.com/lme4/lme4/issues/794>, with a bit more discussion
>     about how zero-length objects should be handled.
> 
>      ? ?The short(ish) version is that r86629 enables the
>     CATCH_ZERO_LENGTH_ACCESS definition. This turns on the CHKZLN macro
>     <https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104 <https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104>>,
>     which returns a trivial pointer (rather than the data pointer that
>     would
>     be returned in the normal control flow) if an object has length 0:
> 
>     /* Attempts to read or write elements of a zero length vector will
>      ? ? result in a segfault, rather than read and write random memory.
>      ? ? Returning NULL would be more natural, but Matrix seems to assume
>      ? ? that even zero-length vectors have non-NULL data pointers, so
>      ? ? return (void *) 1 instead. Zero-length CHARSXP objects still have a
>      ? ? trailing zero byte so they are not handled. */
> 
>      ? ?In the Rcpp context this leads to an inconsistency, where `REAL(x)`
>     is a 'real' external pointer and `DATAPTR(x)` is 0x1, which in turn
>     leads to ASAN warnings like
> 
>     runtime error: reference binding to misaligned address 0x000000000001
>     for type 'const double', which requires 8 byte alignment
>     0x000000000001: note: pointer points here
> 
>      ? ? I'm in over my head and hoping for insight into whether this
>     problem
>     should be resolved by changing R, Rcpp, or downstream Rcpp packages ...
> 
>      ? ?cheers
>      ? ? Ben Bolker
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
> 

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
(Acting) Graduate chair, Mathematics & Statistics
 > E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From iuke-tier@ey m@iii@g oii uiow@@edu  Sun Jun  9 03:27:41 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sat, 8 Jun 2024 20:27:41 -0500 (CDT)
Subject: [Rd] 
 [External] Re: changes in R-devel and zero-extent objects in Rcpp
In-Reply-To: <e61b6315-025a-4e88-8087-2eeba0f4fad2@gmail.com>
References: <92af423f-e83b-4b10-899f-0ba22999a44b@gmail.com>
 <CAJXgQP3gAbkW-w4kmc3BfJc9gMd=wGGOs2VLu1bEwpwYKQF+bA@mail.gmail.com>
 <e61b6315-025a-4e88-8087-2eeba0f4fad2@gmail.com>
Message-ID: <9e3e9992-31a6-3f18-d03b-d5bd3f7053f2@uiowa.edu>

On Sat, 8 Jun 2024, Ben Bolker wrote:

>  The ASAN errors occur *even if the zero-length object is not actually 
> accessed*/is used in a perfectly correct manner, i.e. it's perfectly legal in 
> base R to define `m <- numeric(0)` or `m <- matrix(nrow = 0, ncol = 0)`, 
> whereas doing the equivalent in Rcpp will (now) lead to an ASAN error.
>
>  i.e., these are *not* previously cryptic out-of-bounds accesses that are 
> now being revealed, but instead sensible and previously legal definitions of 
> zero-length objects that are now causing problems.
>
>   I'm pretty sure I'm right about this, but it's absolutely possible that 
> I'm just confused at this point; I don't have a super-simple example to show 
> you at the moment. The closest is this example by Mikael Jagan: 
> https://github.com/lme4/lme4/issues/794#issuecomment-2155093049
>
>  which shows that if x is a pointer to a zero-length vector (in plain C++ 
> for R, no Rcpp is involved), DATAPTR(x) and REAL(x) evaluate to different 
> values.
>
>  Mikael further points out that "Rcpp seems to cast a (void *) returned by 
> DATAPTR to (double *) when constructing a Vector<REALSXP> from a SEXP, rather 
> than using the (double *) returned by REAL." So perhaps R-core doesn't want 
> to guarantee that these operations give identical answers, in which case Rcpp 
> will have to change the way it does things ...

It looks like REAL and friends should also get this check, but it's
not high priority at this point, at least to me. DATAPTR has been
using this check for a while in a barrier build, so you might want to
test there as well. I expect we will activate more integrity checks
from the barrier build on the API client side as things are tidied up.

However: DATAPTR is not in the API and can't be at least in this form:
It allows access to a writable pointer to STRSXP and VECSXP data and
that is too dangerous for memory manager integrity. I'm not sure
exactly how this will be resolve, but be prepared for changes.

Best,

luke

>
>  cheers
>   Ben
>
>
>
> On 2024-06-08 6:39 p.m., Kevin Ushey wrote:
>> IMHO, this should be changed in both Rcpp and downstream packages:
>> 
>> 1. Rcpp could check for out-of-bounds accesses in cases like these, and 
>> emit an R warning / error when such an access is detected;
>> 
>> 2. The downstream packages unintentionally making these out-of-bounds 
>> accesses should be fixed to avoid doing that.
>> 
>> That is, I think this is ultimately a bug in the affected packages, but 
>> Rcpp could do better in detecting and handling this for client packages 
>> (avoiding a segfault).
>> 
>> Best,
>> Kevin
>> 
>> 
>> On Sat, Jun 8, 2024, 3:06?PM Ben Bolker <bbolker at gmail.com 
>> <mailto:bbolker at gmail.com>> wrote:
>> 
>>
>>      ? ? A change to R-devel (SVN r86629 or
>>     https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250 
>> <https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250>
>>     has changed the handling of pointers to zero-length objects, leading to
>>     ASAN issues with a number of Rcpp-based packages (the commit message
>>     reads, in part, "Also define STRICT_TYPECHECK when compiling
>>     inlined.c.")
>>
>>      ? ?I'm interested in discussion from the community.
>>
>>      ? ?Details/diagnosis for the issues in the lme4 package are here:
>>     https://github.com/lme4/lme4/issues/794
>>     <https://github.com/lme4/lme4/issues/794>, 
>> with a bit more discussion
>>     about how zero-length objects should be handled.
>>
>>      ? ?The short(ish) version is that r86629 enables the
>>     CATCH_ZERO_LENGTH_ACCESS definition. This turns on the CHKZLN macro
>>     <https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104 
>> <https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104>>,
>>     which returns a trivial pointer (rather than the data pointer that
>>     would
>>     be returned in the normal control flow) if an object has length 0:
>>
>>     /* Attempts to read or write elements of a zero length vector will
>>      ? ? result in a segfault, rather than read and write random memory.
>>      ? ? Returning NULL would be more natural, but Matrix seems to assume
>>      ? ? that even zero-length vectors have non-NULL data pointers, so
>>      ? ? return (void *) 1 instead. Zero-length CHARSXP objects still have 
>> a
>>      ? ? trailing zero byte so they are not handled. */
>>
>>      ? ?In the Rcpp context this leads to an inconsistency, where `REAL(x)`
>>     is a 'real' external pointer and `DATAPTR(x)` is 0x1, which in turn
>>     leads to ASAN warnings like
>>
>>     runtime error: reference binding to misaligned address 0x000000000001
>>     for type 'const double', which requires 8 byte alignment
>>     0x000000000001: note: pointer points here
>>
>>      ? ? I'm in over my head and hoping for insight into whether this
>>     problem
>>     should be resolved by changing R, Rcpp, or downstream Rcpp packages ...
>>
>>      ? ?cheers
>>      ? ? Ben Bolker
>>
>>     ______________________________________________
>>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>>     https://stat.ethz.ch/mailman/listinfo/r-devel
>>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
>> 
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/

From yut@n|@|n| @end|ng |rom gm@||@com  Sun Jun  9 06:29:19 2024
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Sun, 9 Jun 2024 13:29:19 +0900
Subject: [Rd] clarifying and adjusting the C API for R
In-Reply-To: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
Message-ID: <CALyqOb-4YHJ3HOMw9aDz0A9QUfRGSfCtbFFQ50EKZHs7CJ_CFA@mail.gmail.com>

Thanks so much for your wonderful work, Luke!
I didn't expect such a clarification to happen this soon. This is really
great.

For convenience, I created a quick web page to search the result of
tools:::funAPI().

https://yutannihilation.github.io/R-fun-API/

Hope this helps those who are too lazy to install R-devel to check.

Best,
Yutani

2024?6?6?(?) 23:47 luke-tierney--- via R-devel <r-devel at r-project.org>:

> This is an update on some current work on the C API for use in R
> extensions.
>
> The internal R implementation makes use of tens of thousands of C
> entry points. On Linux and Windows, which support visibility
> restrictions, most of these are visible only within the R executble or
> shared library. About 1500 are not hidden and are visible to
> dynamically loaded shared libraries, such as ones in packages, and to
> embedding applications.
>
> There are two main reasons for limiting access to entry points in a
> software framework:
>
> - Some entry points are very easy to use in ways that corrupt internal
>    data, leading to segfaults or, worse, incorrect computations without
>    segfaults.
>
> - Some entry point expose internal structure and other implementation
>    details, which makes it hard to make improvements without breaking
>    client code that has come to depend on these details.
>
> The API of C entry points that can be used in R extensions, both for
> packages and embedding, has evolved organically over many years. The
> definition for the current release expressed in the Writing R
> Extensions manual (WRE) is roughly:
>
>      An entry point can be used if (1) it is declared in a header file
>      in R.home("include"), and (2) if it is documented for use in WRE.
>
> Ideally, (1) would be necessary and sufficient, but for a variety of
> reasons that isn't achievable, at least not in the near term. (2) can
> be challenging to determine; in particular, it is not amenable to a
> computational answer.
>
> An experimental effort is underway to add annotations to the WRE
> Texinfo source to allow (2) to be answered unambiguously. The
> annotations so far mostly reflect my reading or WRE and may be revised
> as they are reviewed by others. The annotated document can be used for
> programmatically identifying what is currently considered part of the C
> API. The result so far is an experimental function tools:::funAPI():
>
>      > head(tools:::funAPI())
>                      name                    loc apitype
>      1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
>      2        alloc3DArray                    WRE     api
>      3          allocArray                    WRE     api
>      4           allocLang                    WRE     api
>      5           allocList                    WRE     api
>      6         allocMatrix                    WRE     api
>
> The 'apitype' field has three possible levels
>
>      | api  | stable (ideally) API |
>      | eapi | experimental API     |
>      | emb  | embedding API        |
>
> Entry points in the embedded API would typically only be used in
> applications embedding R or providing new front ends, but might be
> reasonable to use in packages that support embedding.
>
> The 'loc' field indicates how the entry point is identified as part of
> an API: explicit mention in WRE, or declaration in a header file
> identified as fully part of an API.
>
> [tools:::funAPI() may not be completely accurate as it relies on
> regular expressions for examining header files considered part of the
> API rather than proper parsing. But it seems to be pretty close to
> what can be achieved with proper parsing.  Proper parsing would add
> dependencies on additional tools, which I would like to avoid for
> now. One dependency already present is that a C compiler has to be on
> the search path and cc -E has to run the C pre-processor.]
>
> Two additional experimental functions are available for analyzing
> package compliance: tools:::checkPkgAPI and tools:::checkAllPkgsAPI.
> These examine installed packages.
>
> [These may produce some false positives on macOS; they may or may not
> work on Windows at this point.]
>
> Using these tools initially showed around 200 non-API entry points
> used across packages on CRAN and BIOC. Ideally this number should be
> reduced to zero. This will require a combination of additions to the
> API and changes in packages.
>
> Some entry points can safely be added to the API. Around 40 have
> already been added to WRE with API annotations; another 40 or so can
> probably be added after review.
>
> The remainder mostly fall into two groups:
>
> - Entry points that should never be used in packages, such as
>    SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for that
>    matter) that can create inconsistent or corrupt internal state.
>
> - Entry points that depend on the existence of internal structure that
>    might be subject to change, such as the existence of promise objects
>    or internal structure of environments.
>
> Many, if not most, of these seem to be used in idioms that can either
> be accomplished with existing higher-level functions already in the
> API, or by new higher level functions that can be created and
> added. Working through these will take some time and coordination
> between R-core and maintainers of affected packages.
>
> Once things have gelled a bit more I hope to turn this into a blog
> post that will include some examples of moving non-API entry point
> uses into compliance.
>
> Best,
>
> luke
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From yut@n|@|n| @end|ng |rom gm@||@com  Sun Jun  9 07:13:51 2024
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Sun, 9 Jun 2024 14:13:51 +0900
Subject: [Rd] 
 [External] Re: changes in R-devel and zero-extent objects in Rcpp
In-Reply-To: <9e3e9992-31a6-3f18-d03b-d5bd3f7053f2@uiowa.edu>
References: <92af423f-e83b-4b10-899f-0ba22999a44b@gmail.com>
 <CAJXgQP3gAbkW-w4kmc3BfJc9gMd=wGGOs2VLu1bEwpwYKQF+bA@mail.gmail.com>
 <e61b6315-025a-4e88-8087-2eeba0f4fad2@gmail.com>
 <9e3e9992-31a6-3f18-d03b-d5bd3f7053f2@uiowa.edu>
Message-ID: <CALyqOb-hshOPQ2VSkJTugdcT_nCFaVddH0C179G6M7cpVxokkQ@mail.gmail.com>

Sorry to ask about a bit drifted topic, but will there be an alternative
API to DATAPTR?

> DATAPTR is not in the API and can't be at least in this form

I believe it's vital for ALTREP to return the pointer to the expanded
version of a SEXP just like the implementation in base R does [1].
At least, VECSXP has no other measure to expose the pointer if I understand
correctly.

Best,
Yutani

[1]:
https://github.com/r-devel/r-svn/blob/a3508b75d28164b0e5bcb2c87f816ce5169729a4/src/main/altclasses.c#L186


2024?6?9?(?) 10:43 luke-tierney--- via R-devel <r-devel at r-project.org>:

> On Sat, 8 Jun 2024, Ben Bolker wrote:
>
> >  The ASAN errors occur *even if the zero-length object is not actually
> > accessed*/is used in a perfectly correct manner, i.e. it's perfectly
> legal in
> > base R to define `m <- numeric(0)` or `m <- matrix(nrow = 0, ncol = 0)`,
> > whereas doing the equivalent in Rcpp will (now) lead to an ASAN error.
> >
> >  i.e., these are *not* previously cryptic out-of-bounds accesses that
> are
> > now being revealed, but instead sensible and previously legal
> definitions of
> > zero-length objects that are now causing problems.
> >
> >   I'm pretty sure I'm right about this, but it's absolutely possible
> that
> > I'm just confused at this point; I don't have a super-simple example to
> show
> > you at the moment. The closest is this example by Mikael Jagan:
> > https://github.com/lme4/lme4/issues/794#issuecomment-2155093049
> >
> >  which shows that if x is a pointer to a zero-length vector (in plain
> C++
> > for R, no Rcpp is involved), DATAPTR(x) and REAL(x) evaluate to
> different
> > values.
> >
> >  Mikael further points out that "Rcpp seems to cast a (void *) returned
> by
> > DATAPTR to (double *) when constructing a Vector<REALSXP> from a SEXP,
> rather
> > than using the (double *) returned by REAL." So perhaps R-core doesn't
> want
> > to guarantee that these operations give identical answers, in which case
> Rcpp
> > will have to change the way it does things ...
>
> It looks like REAL and friends should also get this check, but it's
> not high priority at this point, at least to me. DATAPTR has been
> using this check for a while in a barrier build, so you might want to
> test there as well. I expect we will activate more integrity checks
> from the barrier build on the API client side as things are tidied up.
>
> However: DATAPTR is not in the API and can't be at least in this form:
> It allows access to a writable pointer to STRSXP and VECSXP data and
> that is too dangerous for memory manager integrity. I'm not sure
> exactly how this will be resolve, but be prepared for changes.
>
> Best,
>
> luke
>
> >
> >  cheers
> >   Ben
> >
> >
> >
> > On 2024-06-08 6:39 p.m., Kevin Ushey wrote:
> >> IMHO, this should be changed in both Rcpp and downstream packages:
> >>
> >> 1. Rcpp could check for out-of-bounds accesses in cases like these, and
> >> emit an R warning / error when such an access is detected;
> >>
> >> 2. The downstream packages unintentionally making these out-of-bounds
> >> accesses should be fixed to avoid doing that.
> >>
> >> That is, I think this is ultimately a bug in the affected packages, but
> >> Rcpp could do better in detecting and handling this for client packages
> >> (avoiding a segfault).
> >>
> >> Best,
> >> Kevin
> >>
> >>
> >> On Sat, Jun 8, 2024, 3:06?PM Ben Bolker <bbolker at gmail.com
> >> <mailto:bbolker at gmail.com>> wrote:
> >>
> >>
> >>          A change to R-devel (SVN r86629 or
> >>
> https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250
> >> <
> https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250
> >
> >>     has changed the handling of pointers to zero-length objects,
> leading to
> >>     ASAN issues with a number of Rcpp-based packages (the commit message
> >>     reads, in part, "Also define STRICT_TYPECHECK when compiling
> >>     inlined.c.")
> >>
> >>         I'm interested in discussion from the community.
> >>
> >>         Details/diagnosis for the issues in the lme4 package are here:
> >>     https://github.com/lme4/lme4/issues/794
> >>     <https://github.com/lme4/lme4/issues/794>,
> >> with a bit more discussion
> >>     about how zero-length objects should be handled.
> >>
> >>         The short(ish) version is that r86629 enables the
> >>     CATCH_ZERO_LENGTH_ACCESS definition. This turns on the CHKZLN macro
> >>     <
> https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104
> >> <
> https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104
> >>,
> >>     which returns a trivial pointer (rather than the data pointer that
> >>     would
> >>     be returned in the normal control flow) if an object has length 0:
> >>
> >>     /* Attempts to read or write elements of a zero length vector will
> >>          result in a segfault, rather than read and write random memory.
> >>          Returning NULL would be more natural, but Matrix seems to
> assume
> >>          that even zero-length vectors have non-NULL data pointers, so
> >>          return (void *) 1 instead. Zero-length CHARSXP objects still
> have
> >> a
> >>          trailing zero byte so they are not handled. */
> >>
> >>         In the Rcpp context this leads to an inconsistency, where
> `REAL(x)`
> >>     is a 'real' external pointer and `DATAPTR(x)` is 0x1, which in turn
> >>     leads to ASAN warnings like
> >>
> >>     runtime error: reference binding to misaligned address
> 0x000000000001
> >>     for type 'const double', which requires 8 byte alignment
> >>     0x000000000001: note: pointer points here
> >>
> >>          I'm in over my head and hoping for insight into whether this
> >>     problem
> >>     should be resolved by changing R, Rcpp, or downstream Rcpp packages
> ...
> >>
> >>         cheers
> >>          Ben Bolker
> >>
> >>     ______________________________________________
> >>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> >>     https://stat.ethz.ch/mailman/listinfo/r-devel
> >>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
> >>
> >
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From yut@n|@|n| @end|ng |rom gm@||@com  Sun Jun  9 12:10:05 2024
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Sun, 9 Jun 2024 19:10:05 +0900
Subject: [Rd] 
 [External] Re: changes in R-devel and zero-extent objects in Rcpp
In-Reply-To: <CALyqOb-hshOPQ2VSkJTugdcT_nCFaVddH0C179G6M7cpVxokkQ@mail.gmail.com>
References: <92af423f-e83b-4b10-899f-0ba22999a44b@gmail.com>
 <CAJXgQP3gAbkW-w4kmc3BfJc9gMd=wGGOs2VLu1bEwpwYKQF+bA@mail.gmail.com>
 <e61b6315-025a-4e88-8087-2eeba0f4fad2@gmail.com>
 <9e3e9992-31a6-3f18-d03b-d5bd3f7053f2@uiowa.edu>
 <CALyqOb-hshOPQ2VSkJTugdcT_nCFaVddH0C179G6M7cpVxokkQ@mail.gmail.com>
Message-ID: <CALyqOb8k1XcRY1TGgQt-80hA9xPY0ftTOYFso5EEmUkAOmkRyw@mail.gmail.com>

(Mainly reply to self)

I found there's a new API VECTOR_PTR_RO. Thanks for adding this!

https://github.com/r-devel/r-svn/commit/d499fab95b1ba23ee7842293030d4af1e69ae0fe

Best,
Yutani

2024?6?9?(?) 14:13 Hiroaki Yutani <yutani.ini at gmail.com>:

> Sorry to ask about a bit drifted topic, but will there be an alternative
> API to DATAPTR?
>
> > DATAPTR is not in the API and can't be at least in this form
>
> I believe it's vital for ALTREP to return the pointer to the expanded
> version of a SEXP just like the implementation in base R does [1].
> At least, VECSXP has no other measure to expose the pointer if I
> understand correctly.
>
> Best,
> Yutani
>
> [1]:
> https://github.com/r-devel/r-svn/blob/a3508b75d28164b0e5bcb2c87f816ce5169729a4/src/main/altclasses.c#L186
>
>
> 2024?6?9?(?) 10:43 luke-tierney--- via R-devel <r-devel at r-project.org>:
>
>> On Sat, 8 Jun 2024, Ben Bolker wrote:
>>
>> >  The ASAN errors occur *even if the zero-length object is not actually
>> > accessed*/is used in a perfectly correct manner, i.e. it's perfectly
>> legal in
>> > base R to define `m <- numeric(0)` or `m <- matrix(nrow = 0, ncol =
>> 0)`,
>> > whereas doing the equivalent in Rcpp will (now) lead to an ASAN error.
>> >
>> >  i.e., these are *not* previously cryptic out-of-bounds accesses that
>> are
>> > now being revealed, but instead sensible and previously legal
>> definitions of
>> > zero-length objects that are now causing problems.
>> >
>> >   I'm pretty sure I'm right about this, but it's absolutely possible
>> that
>> > I'm just confused at this point; I don't have a super-simple example to
>> show
>> > you at the moment. The closest is this example by Mikael Jagan:
>> > https://github.com/lme4/lme4/issues/794#issuecomment-2155093049
>> >
>> >  which shows that if x is a pointer to a zero-length vector (in plain
>> C++
>> > for R, no Rcpp is involved), DATAPTR(x) and REAL(x) evaluate to
>> different
>> > values.
>> >
>> >  Mikael further points out that "Rcpp seems to cast a (void *) returned
>> by
>> > DATAPTR to (double *) when constructing a Vector<REALSXP> from a SEXP,
>> rather
>> > than using the (double *) returned by REAL." So perhaps R-core doesn't
>> want
>> > to guarantee that these operations give identical answers, in which
>> case Rcpp
>> > will have to change the way it does things ...
>>
>> It looks like REAL and friends should also get this check, but it's
>> not high priority at this point, at least to me. DATAPTR has been
>> using this check for a while in a barrier build, so you might want to
>> test there as well. I expect we will activate more integrity checks
>> from the barrier build on the API client side as things are tidied up.
>>
>> However: DATAPTR is not in the API and can't be at least in this form:
>> It allows access to a writable pointer to STRSXP and VECSXP data and
>> that is too dangerous for memory manager integrity. I'm not sure
>> exactly how this will be resolve, but be prepared for changes.
>>
>> Best,
>>
>> luke
>>
>> >
>> >  cheers
>> >   Ben
>> >
>> >
>> >
>> > On 2024-06-08 6:39 p.m., Kevin Ushey wrote:
>> >> IMHO, this should be changed in both Rcpp and downstream packages:
>> >>
>> >> 1. Rcpp could check for out-of-bounds accesses in cases like these,
>> and
>> >> emit an R warning / error when such an access is detected;
>> >>
>> >> 2. The downstream packages unintentionally making these out-of-bounds
>> >> accesses should be fixed to avoid doing that.
>> >>
>> >> That is, I think this is ultimately a bug in the affected packages,
>> but
>> >> Rcpp could do better in detecting and handling this for client
>> packages
>> >> (avoiding a segfault).
>> >>
>> >> Best,
>> >> Kevin
>> >>
>> >>
>> >> On Sat, Jun 8, 2024, 3:06?PM Ben Bolker <bbolker at gmail.com
>> >> <mailto:bbolker at gmail.com>> wrote:
>> >>
>> >>
>> >>          A change to R-devel (SVN r86629 or
>> >>
>> https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250
>> >> <
>> https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250
>> >
>> >>     has changed the handling of pointers to zero-length objects,
>> leading to
>> >>     ASAN issues with a number of Rcpp-based packages (the commit
>> message
>> >>     reads, in part, "Also define STRICT_TYPECHECK when compiling
>> >>     inlined.c.")
>> >>
>> >>         I'm interested in discussion from the community.
>> >>
>> >>         Details/diagnosis for the issues in the lme4 package are here:
>> >>     https://github.com/lme4/lme4/issues/794
>> >>     <https://github.com/lme4/lme4/issues/794>,
>> >> with a bit more discussion
>> >>     about how zero-length objects should be handled.
>> >>
>> >>         The short(ish) version is that r86629 enables the
>> >>     CATCH_ZERO_LENGTH_ACCESS definition. This turns on the CHKZLN macro
>> >>     <
>> https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104
>> >> <
>> https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104
>> >>,
>> >>     which returns a trivial pointer (rather than the data pointer that
>> >>     would
>> >>     be returned in the normal control flow) if an object has length 0:
>> >>
>> >>     /* Attempts to read or write elements of a zero length vector will
>> >>          result in a segfault, rather than read and write random
>> memory.
>> >>          Returning NULL would be more natural, but Matrix seems to
>> assume
>> >>          that even zero-length vectors have non-NULL data pointers, so
>> >>          return (void *) 1 instead. Zero-length CHARSXP objects still
>> have
>> >> a
>> >>          trailing zero byte so they are not handled. */
>> >>
>> >>         In the Rcpp context this leads to an inconsistency, where
>> `REAL(x)`
>> >>     is a 'real' external pointer and `DATAPTR(x)` is 0x1, which in turn
>> >>     leads to ASAN warnings like
>> >>
>> >>     runtime error: reference binding to misaligned address
>> 0x000000000001
>> >>     for type 'const double', which requires 8 byte alignment
>> >>     0x000000000001: note: pointer points here
>> >>
>> >>          I'm in over my head and hoping for insight into whether this
>> >>     problem
>> >>     should be resolved by changing R, Rcpp, or downstream Rcpp
>> packages ...
>> >>
>> >>         cheers
>> >>          Ben Bolker
>> >>
>> >>     ______________________________________________
>> >>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>> >>     https://stat.ethz.ch/mailman/listinfo/r-devel
>> >>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
>> >>
>> >
>> >
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>     Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From ||u|@@rev|||@ @end|ng |rom gm@||@com  Sun Jun  9 12:58:30 2024
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Sun, 9 Jun 2024 12:58:30 +0200
Subject: [Rd] Fields used by available.packages
Message-ID: <CAN+W6_vcvA4Gr9BUenydQOmt4HQSrTzNuNUyirFkbYN30vM-zA@mail.gmail.com>

Hi all,

I have recently been researching how available.packages and
install.packages filter packages from repositories with additional fields
in their PACKAGES file.

Currently there are some default filters, but users (and R admins) can set
up their own filters by passing a list to the fields argument or adding
them to the "available_packages_filters" option.
But if the fields used by the filters are not read by default, then users
must manually add the required fields to each call to available.packages.

This makes it difficult to use new fields and to control what is installed
in highly regulated systems which want to use more fields to select what is
installed.

Current workarounds considered are:
 1) The filtering function requiring new fields intercepts the call to
available.packages and adds the desired fields via eval in
parent.environment and then adds the filters again.
 2) Import new data (remote or local) when filtering packages, merge them
and filter accordingly.
 3) Suggestions?

The first solution is complicated, while the second doesn't use the R
machinery of tools::write_PACKAGES to set up the repository with all the
fields (although how to add more fields to the repository file is a
different issue).

Would it be possible to add a new option to add fields to be read by
available.packages, similar to filters?
The same approach for fields as for filters would avoid the two workarounds
mentioned. To match it, the new option could be named
"available_packages_fields".

I look forward to hearing from you,

Llu?s

	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Sun Jun  9 18:03:52 2024
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Sun, 9 Jun 2024 11:03:52 -0500
Subject: [Rd] head.ts, tail.ts loses time
Message-ID: <016d5bb8-b0ee-47f0-91b2-7a2b8c51557d@prodsyse.com>

Hello, All:


	  The 'head' and 'tail' functions strip the time from a 'ts' object. 
Example:


 > head(presidents)
[1] NA 87 82 75 63 50


 > window(presidents, 1945, 1946.25)
      Qtr1 Qtr2 Qtr3 Qtr4
1945   NA   87   82   75
1946   63   50


	  Below please find code for 'head.ts' and 'tail.ts' that matches 
'window'.


	  Comments?
	  Spencer Graves

head.ts <- function(x, n=6L, ...){
   tmx <- as.numeric(time(x))
#
   utils:::checkHT(n, d <- dim(x))
   if(is.na(n[1]) || n[1]==0)ts(NULL)
#
   firstn <- head(tmx, n[1])
   if(is.null(d)){
     return(window(x, firstn[1], tail(firstn, 1)))
   } else{
     if(length(n)<2){
       return(window(x, firstn[1], tail(firstn, 1)))
     } else {
       Cols <- head(1:d[2], n[2])
       xn2 <- x[, Cols[1]:tail(Cols, 1)]
       return(window(xn2, firstn[1], tail(firstn, 1)))
     }
   }
}


tail.ts <- function (x, n = 6L, ...)
{
   utils:::checkHT(n, d <- dim(x))
   tmx <- as.numeric(time(x))
#
   if(is.na(n[1]) || n[1]==0)ts(NULL)
#
   lastn <- tail(tmx, n[1])
   if(is.null(d)){
     return(window(x, lastn[1], tail(lastn, 1)))
   } else{
     if(length(n)<2){
       return(window(x, lastn[1], tail(lastn, 1)))
     } else {
       Cols <- head(1:d[2], n[2])
       xn2 <- x[, Cols[1]:tail(Cols, 1)]
       return(window(xn2, lastn[1], tail(lastn, 1)))
     }
   }
}


# examples
head(presidents)

head(presidents, 2)

npresObs <- length(presidents)
head(presidents, 6-npresObs)

try(head(presidents, 1:2)) # 'try-error'

try(head(presidents, 0)) # 'try-error'

# matrix time series
str(pres <- cbind(n=1:length(presidents), presidents))
head(pres, 2)

head(pres, 2-npresObs)

head(pres, 1:2)
head(pres, 2:1)
head(pres, 1:3)

# examples
tail(presidents)

tail(presidents, 2)

npresObs <- length(presidents)
tail(presidents, 6-npresObs)

try(tail(presidents, 1:2)) # 'try-error'

try(tail(presidents, 0)) # 'try-error'

# matrix time series
str(pres <- cbind(n=1:length(presidents), presidents))
tail(pres, 2)

tail(pres, 2-npresObs)

tail(pres, 1:2)
tail(pres, 2:1)
tail(pres, 1:3)

# for unit testing:
headPres <- head(presidents)
pres6 <- ts(presidents[1:6], time(presidents)[1],
             frequency=frequency(presidents))
stopifnot(all.equal(headPres, pres6))

headPres2 <- head(presidents, 2)
pres2 <- ts(presidents[1:2], time(presidents)[1],
             frequency=frequency(presidents))
stopifnot(all.equal(headPres2, pres2))

npresObs <- length(presidents)
headPres. <- head(presidents, 6-npresObs)
stopifnot(all.equal(headPres., pres6))

headPresOops <- try(head(presidents, 1:2))
stopifnot(class(headPresOops) == 'try-error')

headPres0 <- try(head(presidents, 0))
stopifnot(class(headPres0) == 'try-error')

str(pres <- cbind(n=1:length(presidents), presidents))
headP2 <- head(pres, 2)

p2 <- ts(pres[1:2, ], time(presidents)[1],
          frequency=frequency(presidents))
stopifnot(all.equal(headP2, p2))

headP2. <- head(pres, 2-npresObs)
stopifnot(all.equal(headP2., p2))


#############


sessionInfo()
R version 4.4.0 (2024-04-24)
Platform: aarch64-apple-darwin20
Running under: macOS Sonoma 14.5

Matrix products: default
BLAS: 
/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib 

LAPACK: 
/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib; 
  LAPACK version 3.12.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: America/Chicago
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets
[6] methods   base

loaded via a namespace (and not attached):
[1] compiler_4.4.0 tools_4.4.0


From jo@|@h@p@rry @end|ng |rom gm@||@com  Sun Jun  9 18:20:10 2024
From: jo@|@h@p@rry @end|ng |rom gm@||@com (Josiah Parry)
Date: Sun, 9 Jun 2024 12:20:10 -0400
Subject: [Rd] head.ts, tail.ts loses time
In-Reply-To: <016d5bb8-b0ee-47f0-91b2-7a2b8c51557d@prodsyse.com>
References: <016d5bb8-b0ee-47f0-91b2-7a2b8c51557d@prodsyse.com>
Message-ID: <CAL3ufUJ-hJ=frFdTWFc61xqzj-acEDVLwxx42R3px+ghBGFvQw@mail.gmail.com>

It looks like to me the class is being removed explicitly due to the use of
as.numeric()

On Sun, Jun 9, 2024 at 12:04?PM Spencer Graves <spencer.graves at prodsyse.com>
wrote:

> Hello, All:
>
>
>           The 'head' and 'tail' functions strip the time from a 'ts'
> object.
> Example:
>
>
>  > head(presidents)
> [1] NA 87 82 75 63 50
>
>
>  > window(presidents, 1945, 1946.25)
>       Qtr1 Qtr2 Qtr3 Qtr4
> 1945   NA   87   82   75
> 1946   63   50
>
>
>           Below please find code for 'head.ts' and 'tail.ts' that matches
> 'window'.
>
>
>           Comments?
>           Spencer Graves
>
> head.ts <- function(x, n=6L, ...){
>    tmx <- as.numeric(time(x))
> #
>    utils:::checkHT(n, d <- dim(x))
>    if(is.na(n[1]) || n[1]==0)ts(NULL)
> #
>    firstn <- head(tmx, n[1])
>    if(is.null(d)){
>      return(window(x, firstn[1], tail(firstn, 1)))
>    } else{
>      if(length(n)<2){
>        return(window(x, firstn[1], tail(firstn, 1)))
>      } else {
>        Cols <- head(1:d[2], n[2])
>        xn2 <- x[, Cols[1]:tail(Cols, 1)]
>        return(window(xn2, firstn[1], tail(firstn, 1)))
>      }
>    }
> }
>
>
> tail.ts <- function (x, n = 6L, ...)
> {
>    utils:::checkHT(n, d <- dim(x))
>    tmx <- as.numeric(time(x))
> #
>    if(is.na(n[1]) || n[1]==0)ts(NULL)
> #
>    lastn <- tail(tmx, n[1])
>    if(is.null(d)){
>      return(window(x, lastn[1], tail(lastn, 1)))
>    } else{
>      if(length(n)<2){
>        return(window(x, lastn[1], tail(lastn, 1)))
>      } else {
>        Cols <- head(1:d[2], n[2])
>        xn2 <- x[, Cols[1]:tail(Cols, 1)]
>        return(window(xn2, lastn[1], tail(lastn, 1)))
>      }
>    }
> }
>
>
> # examples
> head(presidents)
>
> head(presidents, 2)
>
> npresObs <- length(presidents)
> head(presidents, 6-npresObs)
>
> try(head(presidents, 1:2)) # 'try-error'
>
> try(head(presidents, 0)) # 'try-error'
>
> # matrix time series
> str(pres <- cbind(n=1:length(presidents), presidents))
> head(pres, 2)
>
> head(pres, 2-npresObs)
>
> head(pres, 1:2)
> head(pres, 2:1)
> head(pres, 1:3)
>
> # examples
> tail(presidents)
>
> tail(presidents, 2)
>
> npresObs <- length(presidents)
> tail(presidents, 6-npresObs)
>
> try(tail(presidents, 1:2)) # 'try-error'
>
> try(tail(presidents, 0)) # 'try-error'
>
> # matrix time series
> str(pres <- cbind(n=1:length(presidents), presidents))
> tail(pres, 2)
>
> tail(pres, 2-npresObs)
>
> tail(pres, 1:2)
> tail(pres, 2:1)
> tail(pres, 1:3)
>
> # for unit testing:
> headPres <- head(presidents)
> pres6 <- ts(presidents[1:6], time(presidents)[1],
>              frequency=frequency(presidents))
> stopifnot(all.equal(headPres, pres6))
>
> headPres2 <- head(presidents, 2)
> pres2 <- ts(presidents[1:2], time(presidents)[1],
>              frequency=frequency(presidents))
> stopifnot(all.equal(headPres2, pres2))
>
> npresObs <- length(presidents)
> headPres. <- head(presidents, 6-npresObs)
> stopifnot(all.equal(headPres., pres6))
>
> headPresOops <- try(head(presidents, 1:2))
> stopifnot(class(headPresOops) == 'try-error')
>
> headPres0 <- try(head(presidents, 0))
> stopifnot(class(headPres0) == 'try-error')
>
> str(pres <- cbind(n=1:length(presidents), presidents))
> headP2 <- head(pres, 2)
>
> p2 <- ts(pres[1:2, ], time(presidents)[1],
>           frequency=frequency(presidents))
> stopifnot(all.equal(headP2, p2))
>
> headP2. <- head(pres, 2-npresObs)
> stopifnot(all.equal(headP2., p2))
>
>
> #############
>
>
> sessionInfo()
> R version 4.4.0 (2024-04-24)
> Platform: aarch64-apple-darwin20
> Running under: macOS Sonoma 14.5
>
> Matrix products: default
> BLAS:
> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>
>
> LAPACK:
> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
>
>   LAPACK version 3.12.0
>
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>
> time zone: America/Chicago
> tzcode source: internal
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets
> [6] methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.4.0 tools_4.4.0
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tr@ver@c @end|ng |rom gm@||@com  Sun Jun  9 21:25:46 2024
From: tr@ver@c @end|ng |rom gm@||@com (Travers Ching)
Date: Sun, 9 Jun 2024 12:25:46 -0700
Subject: [Rd] clarifying and adjusting the C API for R
In-Reply-To: <CALyqOb-4YHJ3HOMw9aDz0A9QUfRGSfCtbFFQ50EKZHs7CJ_CFA@mail.gmail.com>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
 <CALyqOb-4YHJ3HOMw9aDz0A9QUfRGSfCtbFFQ50EKZHs7CJ_CFA@mail.gmail.com>
Message-ID: <CAPLMX9HdF8R+UO5WvdzCeoXpcqFM87KgDAigLuByhboqXX2qJQ@mail.gmail.com>

Hi Luke, thanks for all your work on R!

I'd like to ask specifically about R_serialize / R_unserialize (and
associated helper functions). These are used by at least a handful of
packages and I don't see them in the list from Yutani.

Are these API functions considered "stable"?

Best,
Travers

On Sat, Jun 8, 2024 at 9:29?PM Hiroaki Yutani <yutani.ini at gmail.com> wrote:
>
> Thanks so much for your wonderful work, Luke!
> I didn't expect such a clarification to happen this soon. This is really
> great.
>
> For convenience, I created a quick web page to search the result of
> tools:::funAPI().
>
> https://yutannihilation.github.io/R-fun-API/
>
> Hope this helps those who are too lazy to install R-devel to check.
>
> Best,
> Yutani
>
> 2024?6?6?(?) 23:47 luke-tierney--- via R-devel <r-devel at r-project.org>:
>
> > This is an update on some current work on the C API for use in R
> > extensions.
> >
> > The internal R implementation makes use of tens of thousands of C
> > entry points. On Linux and Windows, which support visibility
> > restrictions, most of these are visible only within the R executble or
> > shared library. About 1500 are not hidden and are visible to
> > dynamically loaded shared libraries, such as ones in packages, and to
> > embedding applications.
> >
> > There are two main reasons for limiting access to entry points in a
> > software framework:
> >
> > - Some entry points are very easy to use in ways that corrupt internal
> >    data, leading to segfaults or, worse, incorrect computations without
> >    segfaults.
> >
> > - Some entry point expose internal structure and other implementation
> >    details, which makes it hard to make improvements without breaking
> >    client code that has come to depend on these details.
> >
> > The API of C entry points that can be used in R extensions, both for
> > packages and embedding, has evolved organically over many years. The
> > definition for the current release expressed in the Writing R
> > Extensions manual (WRE) is roughly:
> >
> >      An entry point can be used if (1) it is declared in a header file
> >      in R.home("include"), and (2) if it is documented for use in WRE.
> >
> > Ideally, (1) would be necessary and sufficient, but for a variety of
> > reasons that isn't achievable, at least not in the near term. (2) can
> > be challenging to determine; in particular, it is not amenable to a
> > computational answer.
> >
> > An experimental effort is underway to add annotations to the WRE
> > Texinfo source to allow (2) to be answered unambiguously. The
> > annotations so far mostly reflect my reading or WRE and may be revised
> > as they are reviewed by others. The annotated document can be used for
> > programmatically identifying what is currently considered part of the C
> > API. The result so far is an experimental function tools:::funAPI():
> >
> >      > head(tools:::funAPI())
> >                      name                    loc apitype
> >      1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
> >      2        alloc3DArray                    WRE     api
> >      3          allocArray                    WRE     api
> >      4           allocLang                    WRE     api
> >      5           allocList                    WRE     api
> >      6         allocMatrix                    WRE     api
> >
> > The 'apitype' field has three possible levels
> >
> >      | api  | stable (ideally) API |
> >      | eapi | experimental API     |
> >      | emb  | embedding API        |
> >
> > Entry points in the embedded API would typically only be used in
> > applications embedding R or providing new front ends, but might be
> > reasonable to use in packages that support embedding.
> >
> > The 'loc' field indicates how the entry point is identified as part of
> > an API: explicit mention in WRE, or declaration in a header file
> > identified as fully part of an API.
> >
> > [tools:::funAPI() may not be completely accurate as it relies on
> > regular expressions for examining header files considered part of the
> > API rather than proper parsing. But it seems to be pretty close to
> > what can be achieved with proper parsing.  Proper parsing would add
> > dependencies on additional tools, which I would like to avoid for
> > now. One dependency already present is that a C compiler has to be on
> > the search path and cc -E has to run the C pre-processor.]
> >
> > Two additional experimental functions are available for analyzing
> > package compliance: tools:::checkPkgAPI and tools:::checkAllPkgsAPI.
> > These examine installed packages.
> >
> > [These may produce some false positives on macOS; they may or may not
> > work on Windows at this point.]
> >
> > Using these tools initially showed around 200 non-API entry points
> > used across packages on CRAN and BIOC. Ideally this number should be
> > reduced to zero. This will require a combination of additions to the
> > API and changes in packages.
> >
> > Some entry points can safely be added to the API. Around 40 have
> > already been added to WRE with API annotations; another 40 or so can
> > probably be added after review.
> >
> > The remainder mostly fall into two groups:
> >
> > - Entry points that should never be used in packages, such as
> >    SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for that
> >    matter) that can create inconsistent or corrupt internal state.
> >
> > - Entry points that depend on the existence of internal structure that
> >    might be subject to change, such as the existence of promise objects
> >    or internal structure of environments.
> >
> > Many, if not most, of these seem to be used in idioms that can either
> > be accomplished with existing higher-level functions already in the
> > API, or by new higher level functions that can be created and
> > added. Working through these will take some time and coordination
> > between R-core and maintainers of affected packages.
> >
> > Once things have gelled a bit more I hope to turn this into a blog
> > post that will include some examples of moving non-API entry point
> > uses into compliance.
> >
> > Best,
> >
> > luke
> >
> > --
> > Luke Tierney
> > Ralph E. Wareham Professor of Mathematical Sciences
> > University of Iowa                  Phone:             319-335-3386
> > Department of Statistics and        Fax:               319-335-3017
> >     Actuarial Science
> > 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> > Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ggrothend|eck @end|ng |rom gm@||@com  Mon Jun 10 03:40:12 2024
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sun, 9 Jun 2024 21:40:12 -0400
Subject: [Rd] head.ts, tail.ts loses time
In-Reply-To: <016d5bb8-b0ee-47f0-91b2-7a2b8c51557d@prodsyse.com>
References: <016d5bb8-b0ee-47f0-91b2-7a2b8c51557d@prodsyse.com>
Message-ID: <CAP01uRmdPR_3M5qUnD8+4REw8Fz8sSf1UrrxzJFwQN+f1dx1xQ@mail.gmail.com>

zoo overcomes many of the limitations of ts:

  library(zoo)
  as.ts(head(as.zoo(presidents)))
  ##      Qtr1 Qtr2 Qtr3 Qtr4
  ## 1945   NA   87   82   75
  ## 1946   63   50

xts also works here.

On Sun, Jun 9, 2024 at 12:04?PM Spencer Graves
<spencer.graves at prodsyse.com> wrote:
>
> Hello, All:
>
>
>           The 'head' and 'tail' functions strip the time from a 'ts' object.
> Example:
>
>
>  > head(presidents)
> [1] NA 87 82 75 63 50
>
>
>  > window(presidents, 1945, 1946.25)
>       Qtr1 Qtr2 Qtr3 Qtr4
> 1945   NA   87   82   75
> 1946   63   50
>
>
>           Below please find code for 'head.ts' and 'tail.ts' that matches
> 'window'.
>
>
>           Comments?
>           Spencer Graves
>
> head.ts <- function(x, n=6L, ...){
>    tmx <- as.numeric(time(x))
> #
>    utils:::checkHT(n, d <- dim(x))
>    if(is.na(n[1]) || n[1]==0)ts(NULL)
> #
>    firstn <- head(tmx, n[1])
>    if(is.null(d)){
>      return(window(x, firstn[1], tail(firstn, 1)))
>    } else{
>      if(length(n)<2){
>        return(window(x, firstn[1], tail(firstn, 1)))
>      } else {
>        Cols <- head(1:d[2], n[2])
>        xn2 <- x[, Cols[1]:tail(Cols, 1)]
>        return(window(xn2, firstn[1], tail(firstn, 1)))
>      }
>    }
> }
>
>
> tail.ts <- function (x, n = 6L, ...)
> {
>    utils:::checkHT(n, d <- dim(x))
>    tmx <- as.numeric(time(x))
> #
>    if(is.na(n[1]) || n[1]==0)ts(NULL)
> #
>    lastn <- tail(tmx, n[1])
>    if(is.null(d)){
>      return(window(x, lastn[1], tail(lastn, 1)))
>    } else{
>      if(length(n)<2){
>        return(window(x, lastn[1], tail(lastn, 1)))
>      } else {
>        Cols <- head(1:d[2], n[2])
>        xn2 <- x[, Cols[1]:tail(Cols, 1)]
>        return(window(xn2, lastn[1], tail(lastn, 1)))
>      }
>    }
> }
>
>
> # examples
> head(presidents)
>
> head(presidents, 2)
>
> npresObs <- length(presidents)
> head(presidents, 6-npresObs)
>
> try(head(presidents, 1:2)) # 'try-error'
>
> try(head(presidents, 0)) # 'try-error'
>
> # matrix time series
> str(pres <- cbind(n=1:length(presidents), presidents))
> head(pres, 2)
>
> head(pres, 2-npresObs)
>
> head(pres, 1:2)
> head(pres, 2:1)
> head(pres, 1:3)
>
> # examples
> tail(presidents)
>
> tail(presidents, 2)
>
> npresObs <- length(presidents)
> tail(presidents, 6-npresObs)
>
> try(tail(presidents, 1:2)) # 'try-error'
>
> try(tail(presidents, 0)) # 'try-error'
>
> # matrix time series
> str(pres <- cbind(n=1:length(presidents), presidents))
> tail(pres, 2)
>
> tail(pres, 2-npresObs)
>
> tail(pres, 1:2)
> tail(pres, 2:1)
> tail(pres, 1:3)
>
> # for unit testing:
> headPres <- head(presidents)
> pres6 <- ts(presidents[1:6], time(presidents)[1],
>              frequency=frequency(presidents))
> stopifnot(all.equal(headPres, pres6))
>
> headPres2 <- head(presidents, 2)
> pres2 <- ts(presidents[1:2], time(presidents)[1],
>              frequency=frequency(presidents))
> stopifnot(all.equal(headPres2, pres2))
>
> npresObs <- length(presidents)
> headPres. <- head(presidents, 6-npresObs)
> stopifnot(all.equal(headPres., pres6))
>
> headPresOops <- try(head(presidents, 1:2))
> stopifnot(class(headPresOops) == 'try-error')
>
> headPres0 <- try(head(presidents, 0))
> stopifnot(class(headPres0) == 'try-error')
>
> str(pres <- cbind(n=1:length(presidents), presidents))
> headP2 <- head(pres, 2)
>
> p2 <- ts(pres[1:2, ], time(presidents)[1],
>           frequency=frequency(presidents))
> stopifnot(all.equal(headP2, p2))
>
> headP2. <- head(pres, 2-npresObs)
> stopifnot(all.equal(headP2., p2))
>
>
> #############
>
>
> sessionInfo()
> R version 4.4.0 (2024-04-24)
> Platform: aarch64-apple-darwin20
> Running under: macOS Sonoma 14.5
>
> Matrix products: default
> BLAS:
> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>
> LAPACK:
> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
>   LAPACK version 3.12.0
>
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>
> time zone: America/Chicago
> tzcode source: internal
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets
> [6] methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.4.0 tools_4.4.0
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From they||@n||u @end|ng |rom gm@||@com  Mon Jun 10 11:13:23 2024
From: they||@n||u @end|ng |rom gm@||@com (Yifan Liu)
Date: Mon, 10 Jun 2024 04:13:23 -0500
Subject: [Rd] summary() does not count missing characters
Message-ID: <CADdpgayq--ABABGMc17C3px3BDu3K9mPdbz526pkS_csw76feg@mail.gmail.com>

as.character(NA) |> rep(times = 10) |> summary()
vs.
as.numeric(NA) |> rep(times = 10) |> summary()
This feels inconsistent, doesn't it?

I constantly need to count missing characters in some data.frame columns.
It would be helpful if summary() can do that. Thanks.

Sincerely,

Yifan Liu

	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Mon Jun 10 14:50:13 2024
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Mon, 10 Jun 2024 07:50:13 -0500
Subject: [Rd] head.ts, tail.ts loses time
In-Reply-To: <CAP01uRmdPR_3M5qUnD8+4REw8Fz8sSf1UrrxzJFwQN+f1dx1xQ@mail.gmail.com>
References: <016d5bb8-b0ee-47f0-91b2-7a2b8c51557d@prodsyse.com>
 <CAP01uRmdPR_3M5qUnD8+4REw8Fz8sSf1UrrxzJFwQN+f1dx1xQ@mail.gmail.com>
Message-ID: <da0e13c2-d7d6-4f9e-b22e-c2b7392066e1@prodsyse.com>

Hi, Gabor et al.:


	  Thanks for this. I should change my current application to use either 
zoo or xts, as Gabor suggests.


	  However, I was surprised to learn that "[.ts" does NOT return an 
object of class "ts". I see that "head.default" and "head.matrix" both 
call "[", so "head" cannot return a ts object, because "[" doesn't.


	  Best Wishes,
	  Spencer Graves


On 6/9/24 8:40 PM, Gabor Grothendieck wrote:
> zoo overcomes many of the limitations of ts:
> 
>    library(zoo)
>    as.ts(head(as.zoo(presidents)))
>    ##      Qtr1 Qtr2 Qtr3 Qtr4
>    ## 1945   NA   87   82   75
>    ## 1946   63   50
> 
> xts also works here.
> 
> On Sun, Jun 9, 2024 at 12:04?PM Spencer Graves
> <spencer.graves at prodsyse.com> wrote:
>>
>> Hello, All:
>>
>>
>>            The 'head' and 'tail' functions strip the time from a 'ts' object.
>> Example:
>>
>>
>>   > head(presidents)
>> [1] NA 87 82 75 63 50
>>
>>
>>   > window(presidents, 1945, 1946.25)
>>        Qtr1 Qtr2 Qtr3 Qtr4
>> 1945   NA   87   82   75
>> 1946   63   50
>>
>>
>>            Below please find code for 'head.ts' and 'tail.ts' that matches
>> 'window'.
>>
>>
>>            Comments?
>>            Spencer Graves
>>
>> head.ts <- function(x, n=6L, ...){
>>     tmx <- as.numeric(time(x))
>> #
>>     utils:::checkHT(n, d <- dim(x))
>>     if(is.na(n[1]) || n[1]==0)ts(NULL)
>> #
>>     firstn <- head(tmx, n[1])
>>     if(is.null(d)){
>>       return(window(x, firstn[1], tail(firstn, 1)))
>>     } else{
>>       if(length(n)<2){
>>         return(window(x, firstn[1], tail(firstn, 1)))
>>       } else {
>>         Cols <- head(1:d[2], n[2])
>>         xn2 <- x[, Cols[1]:tail(Cols, 1)]
>>         return(window(xn2, firstn[1], tail(firstn, 1)))
>>       }
>>     }
>> }
>>
>>
>> tail.ts <- function (x, n = 6L, ...)
>> {
>>     utils:::checkHT(n, d <- dim(x))
>>     tmx <- as.numeric(time(x))
>> #
>>     if(is.na(n[1]) || n[1]==0)ts(NULL)
>> #
>>     lastn <- tail(tmx, n[1])
>>     if(is.null(d)){
>>       return(window(x, lastn[1], tail(lastn, 1)))
>>     } else{
>>       if(length(n)<2){
>>         return(window(x, lastn[1], tail(lastn, 1)))
>>       } else {
>>         Cols <- head(1:d[2], n[2])
>>         xn2 <- x[, Cols[1]:tail(Cols, 1)]
>>         return(window(xn2, lastn[1], tail(lastn, 1)))
>>       }
>>     }
>> }
>>
>>
>> # examples
>> head(presidents)
>>
>> head(presidents, 2)
>>
>> npresObs <- length(presidents)
>> head(presidents, 6-npresObs)
>>
>> try(head(presidents, 1:2)) # 'try-error'
>>
>> try(head(presidents, 0)) # 'try-error'
>>
>> # matrix time series
>> str(pres <- cbind(n=1:length(presidents), presidents))
>> head(pres, 2)
>>
>> head(pres, 2-npresObs)
>>
>> head(pres, 1:2)
>> head(pres, 2:1)
>> head(pres, 1:3)
>>
>> # examples
>> tail(presidents)
>>
>> tail(presidents, 2)
>>
>> npresObs <- length(presidents)
>> tail(presidents, 6-npresObs)
>>
>> try(tail(presidents, 1:2)) # 'try-error'
>>
>> try(tail(presidents, 0)) # 'try-error'
>>
>> # matrix time series
>> str(pres <- cbind(n=1:length(presidents), presidents))
>> tail(pres, 2)
>>
>> tail(pres, 2-npresObs)
>>
>> tail(pres, 1:2)
>> tail(pres, 2:1)
>> tail(pres, 1:3)
>>
>> # for unit testing:
>> headPres <- head(presidents)
>> pres6 <- ts(presidents[1:6], time(presidents)[1],
>>               frequency=frequency(presidents))
>> stopifnot(all.equal(headPres, pres6))
>>
>> headPres2 <- head(presidents, 2)
>> pres2 <- ts(presidents[1:2], time(presidents)[1],
>>               frequency=frequency(presidents))
>> stopifnot(all.equal(headPres2, pres2))
>>
>> npresObs <- length(presidents)
>> headPres. <- head(presidents, 6-npresObs)
>> stopifnot(all.equal(headPres., pres6))
>>
>> headPresOops <- try(head(presidents, 1:2))
>> stopifnot(class(headPresOops) == 'try-error')
>>
>> headPres0 <- try(head(presidents, 0))
>> stopifnot(class(headPres0) == 'try-error')
>>
>> str(pres <- cbind(n=1:length(presidents), presidents))
>> headP2 <- head(pres, 2)
>>
>> p2 <- ts(pres[1:2, ], time(presidents)[1],
>>            frequency=frequency(presidents))
>> stopifnot(all.equal(headP2, p2))
>>
>> headP2. <- head(pres, 2-npresObs)
>> stopifnot(all.equal(headP2., p2))
>>
>>
>> #############
>>
>>
>> sessionInfo()
>> R version 4.4.0 (2024-04-24)
>> Platform: aarch64-apple-darwin20
>> Running under: macOS Sonoma 14.5
>>
>> Matrix products: default
>> BLAS:
>> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>>
>> LAPACK:
>> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
>>    LAPACK version 3.12.0
>>
>> locale:
>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>
>> time zone: America/Chicago
>> tzcode source: internal
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets
>> [6] methods   base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_4.4.0 tools_4.4.0
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
>


From j@g@nmn2 @end|ng |rom gm@||@com  Mon Jun 10 16:12:52 2024
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Mon, 10 Jun 2024 10:12:52 -0400
Subject: [Rd] changes in R-devel and zero-extent objects in Rcpp
In-Reply-To: <mailman.54329.3.1717927202.15503.r-devel@r-project.org>
References: <mailman.54329.3.1717927202.15503.r-devel@r-project.org>
Message-ID: <9694a015-e5be-4aa9-a5fe-bb0e6bb530cf@gmail.com>

     > Date: Sat, 8 Jun 2024 19:16:22 -0400
     > From: Ben Bolker <bbolker at gmail.com>
     >
     >     The ASAN errors occur *even if the zero-length object is not actually
     > accessed*/is used in a perfectly correct manner, i.e. it's perfectly
     > legal in base R to define `m <- numeric(0)` or `m <- matrix(nrow = 0,
     > ncol = 0)`, whereas doing the equivalent in Rcpp will (now) lead to an
     > ASAN error.
     >
     >     i.e., these are *not* previously cryptic out-of-bounds accesses that
     > are now being revealed, but instead sensible and previously legal
     > definitions of zero-length objects that are now causing problems.
     >

The ASan output is:

     > reference binding to misaligned address 0x000000000001 for type 'const 
double', which requires 8 byte alignment

That there is a "reference" to 0x1 means that there really _is_ an attempt to
access memory there.  The stack trace provided by ASan tells you exactly where
it happens: line 100 of
RcppEigen/inst/include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h:

     for(Index k2=0; k2<depth; k2+=kc)
     {
       const Index actual_kc = (std::min)(k2+kc,depth)-k2;


       // note that the actual rhs is the transpose/adjoint of mat
       pack_rhs(blockB, rhs.getSubMapper(k2,0), actual_kc, size);
                        ^^^^^^^^^^^^^^^^^^^^^^

where 'rhs' is an object wrapping the pointer with a method getSubMapper(i, j)
for accessing the data like a matrix.  In the first loop iteration, you access
rhs[0]; there is no defensive test for 'rhs' of positive length.

So ASan _is_ revealing an illegal access, complaining only now (since r86629)
because _now_ the address that you access illegally is misaligned.

This really should be avoided in lme4 and ideally reported to Eigen maintainers
if not already fixed there.

Mikael

     >      I'm pretty sure I'm right about this, but it's absolutely possible
     > that I'm just confused at this point; I don't have a super-simple
     > example to show you at the moment. The closest is this example by Mikael
     > Jagan: https://github.com/lme4/lme4/issues/794#issuecomment-2155093049
     >
     >     which shows that if x is a pointer to a zero-length vector (in plain
     > C++ for R, no Rcpp is involved), DATAPTR(x) and REAL(x) evaluate to
     > different values.
     >
     >     Mikael further points out that "Rcpp seems to cast a (void *)
     > returned by DATAPTR to (double *) when constructing a Vector<REALSXP>
     > from a SEXP, rather than using the (double *) returned by REAL." So
     > perhaps R-core doesn't want to guarantee that these operations give
     > identical answers, in which case Rcpp will have to change the way it
     > does things ...
     >
     >     cheers
     >      Ben
     >
     >
     >
     > On 2024-06-08 6:39 p.m., Kevin Ushey wrote:
     >    > IMHO, this should be changed in both Rcpp and downstream packages:
     >    >
     >    > 1. Rcpp could check for out-of-bounds accesses in cases like these, and
     >    > emit an R warning / error when such an access is detected;
     >    >
     >    > 2. The downstream packages unintentionally making these out-of-bounds
     >    > accesses should be fixed to avoid doing that.
     >    >
     >    > That is, I think this is ultimately a bug in the affected packages, but
     >    > Rcpp could do better in detecting and handling this for client packages
     >    > (avoiding a segfault).
     >    >
     >    > Best,
     >    > Kevin
     >    >
     >    >
     >    > On Sat, Jun 8, 2024, 3:06?PM Ben Bolker <bbolker at gmail.com
     >    > <mailto:bbolker at gmail.com>> wrote:
     >    >
     >    >
     >    >       ? ? A change to R-devel (SVN r86629 or
     >    > 
https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250 
<https://github.com/r-devel/r-svn/commit/92c1d5de23c93576f55062e26d446feface07250>
     >    >      has changed the handling of pointers to zero-length objects, 
leading to
     >    >      ASAN issues with a number of Rcpp-based packages (the commit 
message
     >    >      reads, in part, "Also define STRICT_TYPECHECK when compiling
     >    >      inlined.c.")
     >    >
     >    >       ? ?I'm interested in discussion from the community.
     >    >
     >    >       ? ?Details/diagnosis for the issues in the lme4 package are here:
     >    >      https://github.com/lme4/lme4/issues/794
     >    >      <https://github.com/lme4/lme4/issues/794>, with a bit more 
discussion
     >    >      about how zero-length objects should be handled.
     >    >
     >    >       ? ?The short(ish) version is that r86629 enables the
     >    >      CATCH_ZERO_LENGTH_ACCESS definition. This turns on the CHKZLN macro
     >    > 
<https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104 
<https://github.com/r-devel/r-svn/blob/4ef83b9dc3c6874e774195d329cbb6c11a71c414/src/main/memory.c#L4090-L4104>>,
     >    >      which returns a trivial pointer (rather than the data pointer that
     >    >      would
     >    >      be returned in the normal control flow) if an object has length 0:
     >    >
     >    >      /* Attempts to read or write elements of a zero length vector will
     >    >       ? ? result in a segfault, rather than read and write random 
memory.
     >    >       ? ? Returning NULL would be more natural, but Matrix seems to 
assume
     >    >       ? ? that even zero-length vectors have non-NULL data pointers, so
     >    >       ? ? return (void *) 1 instead. Zero-length CHARSXP objects 
still have a
     >    >       ? ? trailing zero byte so they are not handled. */
     >    >
     >    >       ? ?In the Rcpp context this leads to an inconsistency, where 
`REAL(x)`
     >    >      is a 'real' external pointer and `DATAPTR(x)` is 0x1, which in turn
     >    >      leads to ASAN warnings like
     >    >
     >    >      runtime error: reference binding to misaligned address 
0x000000000001
     >    >      for type 'const double', which requires 8 byte alignment
     >    >      0x000000000001: note: pointer points here
     >    >
     >    >       ? ? I'm in over my head and hoping for insight into whether this
     >    >      problem
     >    >      should be resolved by changing R, Rcpp, or downstream Rcpp 
packages ...
     >    >
     >    >       ? ?cheers
     >    >       ? ? Ben Bolker


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jun 10 16:32:17 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 10 Jun 2024 16:32:17 +0200
Subject: [Rd] head.ts, tail.ts loses time
In-Reply-To: <da0e13c2-d7d6-4f9e-b22e-c2b7392066e1@prodsyse.com>
References: <016d5bb8-b0ee-47f0-91b2-7a2b8c51557d@prodsyse.com>
 <CAP01uRmdPR_3M5qUnD8+4REw8Fz8sSf1UrrxzJFwQN+f1dx1xQ@mail.gmail.com>
 <da0e13c2-d7d6-4f9e-b22e-c2b7392066e1@prodsyse.com>
Message-ID: <26215.3697.815212.54251@stat.math.ethz.ch>

>>>>> Spencer Graves 
>>>>>     on Mon, 10 Jun 2024 07:50:13 -0500 writes:

    > Hi, Gabor et al.: Thanks for this. I should change my
    > current application to use either zoo or xts, as Gabor
    > suggests.


    > 	  However, I was surprised to learn that "[.ts" does NOT
    > return an object of class "ts". I see that "head.default"
    > and "head.matrix" both call "[", so "head" cannot return a
    > ts object, because "[" doesn't.

Yes, the default head() and tail() are built on  `[` very much
on purpose.
Note that   `[`  should *not* keep the "ts"  property  in
general, e.g.,  
	 lynx[c(1:3, 7)]
cannot be a regular time series 

I think I'd consider using  windows() for a head.ts() and tail.ts(),
but in any case, I am sympathetic adding such methods to "base R"'s
utils package.


Martin

    > 	  Best Wishes, Spencer Graves


    > On 6/9/24 8:40 PM, Gabor Grothendieck wrote:
    >> zoo overcomes many of the limitations of ts:
    >> 
    >> library(zoo) as.ts(head(as.zoo(presidents))) ## Qtr1 Qtr2
    >> Qtr3 Qtr4 ## 1945 NA 87 82 75 ## 1946 63 50
    >> 
    >> xts also works here.
    >> 
    >> On Sun, Jun 9, 2024 at 12:04?PM Spencer Graves
    >> <spencer.graves at prodsyse.com> wrote:
    >>> 
    >>> Hello, All:
    >>> 
    >>> 
    >>> The 'head' and 'tail' functions strip the time from a
    >>> 'ts' object.  Example:
    >>> 
    >>> 
    >>> > head(presidents) [1] NA 87 82 75 63 50
    >>> 
    >>> 
    >>> > window(presidents, 1945, 1946.25) Qtr1 Qtr2 Qtr3 Qtr4
    >>> 1945 NA 87 82 75 1946 63 50
    >>> 
    >>> 
    >>> Below please find code for 'head.ts' and 'tail.ts' that
    >>> matches 'window'.
    >>> 
    >>> 
    >>> Comments?  Spencer Graves
    >>> 
    >>> head.ts <- function(x, n=6L, ...){ tmx <-
    >>> as.numeric(time(x))
    >>> #
    >>> utils:::checkHT(n, d <- dim(x)) if(is.na(n[1]) ||
    >>> n[1]==0)ts(NULL)
    >>> #
    >>> firstn <- head(tmx, n[1]) if(is.null(d)){
    >>> return(window(x, firstn[1], tail(firstn, 1))) } else{
    >>> if(length(n)<2){ return(window(x, firstn[1],
    >>> tail(firstn, 1))) } else { Cols <- head(1:d[2], n[2])
    >>> xn2 <- x[, Cols[1]:tail(Cols, 1)] return(window(xn2,
    >>> firstn[1], tail(firstn, 1))) } } }
    >>> 
    >>> 
    >>> tail.ts <- function (x, n = 6L, ...)  {
    >>> utils:::checkHT(n, d <- dim(x)) tmx <-
    >>> as.numeric(time(x))
    >>> #
    >>> if(is.na(n[1]) || n[1]==0)ts(NULL)
    >>> #
    >>> lastn <- tail(tmx, n[1]) if(is.null(d)){
    >>> return(window(x, lastn[1], tail(lastn, 1))) } else{
    >>> if(length(n)<2){ return(window(x, lastn[1], tail(lastn,
    >>> 1))) } else { Cols <- head(1:d[2], n[2]) xn2 <- x[,
    >>> Cols[1]:tail(Cols, 1)] return(window(xn2, lastn[1],
    >>> tail(lastn, 1))) } } }
    >>> 
    >>> 
    >>> # examples head(presidents)
    >>> 
    >>> head(presidents, 2)
    >>> 
    >>> npresObs <- length(presidents) head(presidents,
    >>> 6-npresObs)
    >>> 
    >>> try(head(presidents, 1:2)) # 'try-error'
    >>> 
    >>> try(head(presidents, 0)) # 'try-error'
    >>> 
    >>> # matrix time series str(pres <-
    >>> cbind(n=1:length(presidents), presidents)) head(pres, 2)
    >>> 
    >>> head(pres, 2-npresObs)
    >>> 
    >>> head(pres, 1:2) head(pres, 2:1) head(pres, 1:3)
    >>> 
    >>> # examples tail(presidents)
    >>> 
    >>> tail(presidents, 2)
    >>> 
    >>> npresObs <- length(presidents) tail(presidents,
    >>> 6-npresObs)
    >>> 
    >>> try(tail(presidents, 1:2)) # 'try-error'
    >>> 
    >>> try(tail(presidents, 0)) # 'try-error'
    >>> 
    >>> # matrix time series str(pres <-
    >>> cbind(n=1:length(presidents), presidents)) tail(pres, 2)
    >>> 
    >>> tail(pres, 2-npresObs)
    >>> 
    >>> tail(pres, 1:2) tail(pres, 2:1) tail(pres, 1:3)
    >>> 
    >>> # for unit testing: headPres <- head(presidents) pres6
    >>> <- ts(presidents[1:6], time(presidents)[1],
    >>> frequency=frequency(presidents))
    >>> stopifnot(all.equal(headPres, pres6))
    >>> 
    >>> headPres2 <- head(presidents, 2) pres2 <-
    >>> ts(presidents[1:2], time(presidents)[1],
    >>> frequency=frequency(presidents))
    >>> stopifnot(all.equal(headPres2, pres2))
    >>> 
    >>> npresObs <- length(presidents) headPres. <-
    >>> head(presidents, 6-npresObs)
    >>> stopifnot(all.equal(headPres., pres6))
    >>> 
    >>> headPresOops <- try(head(presidents, 1:2))
    >>> stopifnot(class(headPresOops) == 'try-error')
    >>> 
    >>> headPres0 <- try(head(presidents, 0))
    >>> stopifnot(class(headPres0) == 'try-error')
    >>> 
    >>> str(pres <- cbind(n=1:length(presidents), presidents))
    >>> headP2 <- head(pres, 2)
    >>> 
    >>> p2 <- ts(pres[1:2, ], time(presidents)[1],
    >>> frequency=frequency(presidents))
    >>> stopifnot(all.equal(headP2, p2))
    >>> 
    >>> headP2. <- head(pres, 2-npresObs)
    >>> stopifnot(all.equal(headP2., p2))
    >>> 
    >>> 
    >>> #############
    >>> 
    >>> 
    >>> sessionInfo() R version 4.4.0 (2024-04-24) Platform:
    >>> aarch64-apple-darwin20 Running under: macOS Sonoma 14.5
    >>> 
    >>> Matrix products: default BLAS:
    >>> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
    >>> 
    >>> LAPACK:
    >>> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
    >>> LAPACK version 3.12.0
    >>> 
    >>> locale: [1]
    >>> en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
    >>> 
    >>> time zone: America/Chicago tzcode source: internal
    >>> 
    >>> attached base packages: [1] stats graphics grDevices
    >>> utils datasets [6] methods base
    >>> 
    >>> loaded via a namespace (and not attached): [1]
    >>> compiler_4.4.0 tools_4.4.0
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 
    >> 
    >> 

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Mon Jun 10 16:45:46 2024
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Mon, 10 Jun 2024 09:45:46 -0500
Subject: [Rd] head.ts, tail.ts loses time
In-Reply-To: <26215.3697.815212.54251@stat.math.ethz.ch>
References: <016d5bb8-b0ee-47f0-91b2-7a2b8c51557d@prodsyse.com>
 <CAP01uRmdPR_3M5qUnD8+4REw8Fz8sSf1UrrxzJFwQN+f1dx1xQ@mail.gmail.com>
 <da0e13c2-d7d6-4f9e-b22e-c2b7392066e1@prodsyse.com>
 <26215.3697.815212.54251@stat.math.ethz.ch>
Message-ID: <295e6967-6ea6-4334-a43d-58c18ef7fcfd@prodsyse.com>

Hi, Martin et al.:


On 6/10/24 9:32 AM, Martin Maechler wrote:
>>>>>> Spencer Graves
>>>>>>      on Mon, 10 Jun 2024 07:50:13 -0500 writes:
> 
>      > Hi, Gabor et al.: Thanks for this. I should change my
>      > current application to use either zoo or xts, as Gabor
>      > suggests.
> 
> 
>      > 	  However, I was surprised to learn that "[.ts" does NOT
>      > return an object of class "ts". I see that "head.default"
>      > and "head.matrix" both call "[", so "head" cannot return a
>      > ts object, because "[" doesn't.
> 
> Yes, the default head() and tail() are built on  `[` very much
> on purpose.
> Note that   `[`  should *not* keep the "ts"  property  in
> general, e.g.,
> 	 lynx[c(1:3, 7)]
> cannot be a regular time series


	  Agreed.

> 
> I think I'd consider using  windows() for a head.ts() and tail.ts(),
> but in any case, I am sympathetic adding such methods to "base R"'s
> utils package.


	  The code I provided below for head.ts() and tail.ts() does that: I 
took the code for head.default and head.matrix, etc., computed tmx <- 
as.numeric(time(x)), and then used head(tmx) [and tail(tmx)] in "window()".


	  Thanks for your reply.
	  sg
> 
> 
> Martin
> 
>      > 	  Best Wishes, Spencer Graves
> 
> 
>      > On 6/9/24 8:40 PM, Gabor Grothendieck wrote:
>      >> zoo overcomes many of the limitations of ts:
>      >>
>      >> library(zoo) as.ts(head(as.zoo(presidents))) ## Qtr1 Qtr2
>      >> Qtr3 Qtr4 ## 1945 NA 87 82 75 ## 1946 63 50
>      >>
>      >> xts also works here.
>      >>
>      >> On Sun, Jun 9, 2024 at 12:04?PM Spencer Graves
>      >> <spencer.graves at prodsyse.com> wrote:
>      >>>
>      >>> Hello, All:
>      >>>
>      >>>
>      >>> The 'head' and 'tail' functions strip the time from a
>      >>> 'ts' object.  Example:
>      >>>
>      >>>
>      >>> > head(presidents) [1] NA 87 82 75 63 50
>      >>>
>      >>>
>      >>> > window(presidents, 1945, 1946.25) Qtr1 Qtr2 Qtr3 Qtr4
>      >>> 1945 NA 87 82 75 1946 63 50
>      >>>
>      >>>
>      >>> Below please find code for 'head.ts' and 'tail.ts' that
>      >>> matches 'window'.
>      >>>
>      >>>
>      >>> Comments?  Spencer Graves
>      >>>
>      >>> head.ts <- function(x, n=6L, ...){ tmx <-
>      >>> as.numeric(time(x))
>      >>> #
>      >>> utils:::checkHT(n, d <- dim(x)) if(is.na(n[1]) ||
>      >>> n[1]==0)ts(NULL)
>      >>> #
>      >>> firstn <- head(tmx, n[1]) if(is.null(d)){
>      >>> return(window(x, firstn[1], tail(firstn, 1))) } else{
>      >>> if(length(n)<2){ return(window(x, firstn[1],
>      >>> tail(firstn, 1))) } else { Cols <- head(1:d[2], n[2])
>      >>> xn2 <- x[, Cols[1]:tail(Cols, 1)] return(window(xn2,
>      >>> firstn[1], tail(firstn, 1))) } } }
>      >>>
>      >>>
>      >>> tail.ts <- function (x, n = 6L, ...)  {
>      >>> utils:::checkHT(n, d <- dim(x)) tmx <-
>      >>> as.numeric(time(x))
>      >>> #
>      >>> if(is.na(n[1]) || n[1]==0)ts(NULL)
>      >>> #
>      >>> lastn <- tail(tmx, n[1]) if(is.null(d)){
>      >>> return(window(x, lastn[1], tail(lastn, 1))) } else{
>      >>> if(length(n)<2){ return(window(x, lastn[1], tail(lastn,
>      >>> 1))) } else { Cols <- head(1:d[2], n[2]) xn2 <- x[,
>      >>> Cols[1]:tail(Cols, 1)] return(window(xn2, lastn[1],
>      >>> tail(lastn, 1))) } } }
>      >>>
>      >>>
>      >>> # examples head(presidents)
>      >>>
>      >>> head(presidents, 2)
>      >>>
>      >>> npresObs <- length(presidents) head(presidents,
>      >>> 6-npresObs)
>      >>>
>      >>> try(head(presidents, 1:2)) # 'try-error'
>      >>>
>      >>> try(head(presidents, 0)) # 'try-error'
>      >>>
>      >>> # matrix time series str(pres <-
>      >>> cbind(n=1:length(presidents), presidents)) head(pres, 2)
>      >>>
>      >>> head(pres, 2-npresObs)
>      >>>
>      >>> head(pres, 1:2) head(pres, 2:1) head(pres, 1:3)
>      >>>
>      >>> # examples tail(presidents)
>      >>>
>      >>> tail(presidents, 2)
>      >>>
>      >>> npresObs <- length(presidents) tail(presidents,
>      >>> 6-npresObs)
>      >>>
>      >>> try(tail(presidents, 1:2)) # 'try-error'
>      >>>
>      >>> try(tail(presidents, 0)) # 'try-error'
>      >>>
>      >>> # matrix time series str(pres <-
>      >>> cbind(n=1:length(presidents), presidents)) tail(pres, 2)
>      >>>
>      >>> tail(pres, 2-npresObs)
>      >>>
>      >>> tail(pres, 1:2) tail(pres, 2:1) tail(pres, 1:3)
>      >>>
>      >>> # for unit testing: headPres <- head(presidents) pres6
>      >>> <- ts(presidents[1:6], time(presidents)[1],
>      >>> frequency=frequency(presidents))
>      >>> stopifnot(all.equal(headPres, pres6))
>      >>>
>      >>> headPres2 <- head(presidents, 2) pres2 <-
>      >>> ts(presidents[1:2], time(presidents)[1],
>      >>> frequency=frequency(presidents))
>      >>> stopifnot(all.equal(headPres2, pres2))
>      >>>
>      >>> npresObs <- length(presidents) headPres. <-
>      >>> head(presidents, 6-npresObs)
>      >>> stopifnot(all.equal(headPres., pres6))
>      >>>
>      >>> headPresOops <- try(head(presidents, 1:2))
>      >>> stopifnot(class(headPresOops) == 'try-error')
>      >>>
>      >>> headPres0 <- try(head(presidents, 0))
>      >>> stopifnot(class(headPres0) == 'try-error')
>      >>>
>      >>> str(pres <- cbind(n=1:length(presidents), presidents))
>      >>> headP2 <- head(pres, 2)
>      >>>
>      >>> p2 <- ts(pres[1:2, ], time(presidents)[1],
>      >>> frequency=frequency(presidents))
>      >>> stopifnot(all.equal(headP2, p2))
>      >>>
>      >>> headP2. <- head(pres, 2-npresObs)
>      >>> stopifnot(all.equal(headP2., p2))
>      >>>
>      >>>
>      >>> #############
>      >>>
>      >>>
>      >>> sessionInfo() R version 4.4.0 (2024-04-24) Platform:
>      >>> aarch64-apple-darwin20 Running under: macOS Sonoma 14.5
>      >>>
>      >>> Matrix products: default BLAS:
>      >>> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>      >>>
>      >>> LAPACK:
>      >>> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
>      >>> LAPACK version 3.12.0
>      >>>
>      >>> locale: [1]
>      >>> en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>      >>>
>      >>> time zone: America/Chicago tzcode source: internal
>      >>>
>      >>> attached base packages: [1] stats graphics grDevices
>      >>> utils datasets [6] methods base
>      >>>
>      >>> loaded via a namespace (and not attached): [1]
>      >>> compiler_4.4.0 tools_4.4.0
>      >>>
>      >>> ______________________________________________
>      >>> R-devel at r-project.org mailing list
>      >>> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >>
>      >>
>      >>
> 
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Mon Jun 10 17:02:38 2024
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 10 Jun 2024 11:02:38 -0400
Subject: [Rd] changes in R-devel and zero-extent objects in Rcpp
In-Reply-To: <9694a015-e5be-4aa9-a5fe-bb0e6bb530cf@gmail.com>
References: <mailman.54329.3.1717927202.15503.r-devel@r-project.org>
 <9694a015-e5be-4aa9-a5fe-bb0e6bb530cf@gmail.com>
Message-ID: <09e1f687-3973-4673-a393-ad6d0060a46c@gmail.com>

   Thanks, that's very useful.

   AFAICT, in the problematic case we are doing some linear algebra with 
zero-column matrices that are mathematically well-defined (and whose 
base-R equivalents work correctly). It's maybe not surprising that 
Eigen/RcppEigen would do some weird stuff in this edge case.  I'll see 
if I can come up with some pure RcppEigen/Eigen examples to illustrate 
the problem ...

   cheers
    Ben



On 2024-06-10 10:12 a.m., Mikael Jagan wrote:
> 
> The ASan output is:
> 
>  ??? > reference binding to misaligned address 0x000000000001 for type 
> 'const double', which requires 8 byte alignment
> 
> That there is a "reference" to 0x1 means that there really _is_ an 
> attempt to
> access memory there.? The stack trace provided by ASan tells you exactly 
> where
> it happens: line 100 of
> RcppEigen/inst/include/Eigen/src/Core/products/GeneralMatrixMatrixTriangular.h:
> 
>  ??? for(Index k2=0; k2<depth; k2+=kc)
>  ??? {
>  ????? const Index actual_kc = (std::min)(k2+kc,depth)-k2;
> 
> 
>  ????? // note that the actual rhs is the transpose/adjoint of mat
>  ????? pack_rhs(blockB, rhs.getSubMapper(k2,0), actual_kc, size);
>  ?????????????????????? ^^^^^^^^^^^^^^^^^^^^^^
> 
> where 'rhs' is an object wrapping the pointer with a method 
> getSubMapper(i, j)
> for accessing the data like a matrix.? In the first loop iteration, you 
> access
> rhs[0]; there is no defensive test for 'rhs' of positive length.
> 
> So ASan _is_ revealing an illegal access, complaining only now (since 
> r86629)
> because _now_ the address that you access illegally is misaligned.

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
(Acting) Graduate chair, Mathematics & Statistics
 > E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From ggrothend|eck @end|ng |rom gm@||@com  Tue Jun 11 15:13:49 2024
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Tue, 11 Jun 2024 09:13:49 -0400
Subject: [Rd] head.ts, tail.ts loses time
In-Reply-To: <26215.3697.815212.54251@stat.math.ethz.ch>
References: <016d5bb8-b0ee-47f0-91b2-7a2b8c51557d@prodsyse.com>
 <CAP01uRmdPR_3M5qUnD8+4REw8Fz8sSf1UrrxzJFwQN+f1dx1xQ@mail.gmail.com>
 <da0e13c2-d7d6-4f9e-b22e-c2b7392066e1@prodsyse.com>
 <26215.3697.815212.54251@stat.math.ethz.ch>
Message-ID: <CAP01uRkHWsQrELjRDU7MR9XtXgghT5VM0vnQmrE=pOa-mqSBhQ@mail.gmail.com>

It isn't really clear that it can't work.  This does work by inserting NA's.

  library(zoo)
  as.ts(as.zoo(lynx)[ c(1:3, 7) ] )
  ## Time Series:
  ## Start = 1821
  ## End = 1827
  ## Frequency = 1
  ## [1]  269  321  585   NA   NA   NA 3928


On Mon, Jun 10, 2024 at 10:32?AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Spencer Graves
> >>>>>     on Mon, 10 Jun 2024 07:50:13 -0500 writes:
>
>     > Hi, Gabor et al.: Thanks for this. I should change my
>     > current application to use either zoo or xts, as Gabor
>     > suggests.
>
>
>     >     However, I was surprised to learn that "[.ts" does NOT
>     > return an object of class "ts". I see that "head.default"
>     > and "head.matrix" both call "[", so "head" cannot return a
>     > ts object, because "[" doesn't.
>
> Yes, the default head() and tail() are built on  `[` very much
> on purpose.
> Note that   `[`  should *not* keep the "ts"  property  in
> general, e.g.,
>          lynx[c(1:3, 7)]
> cannot be a regular time series
>
> I think I'd consider using  windows() for a head.ts() and tail.ts(),
> but in any case, I am sympathetic adding such methods to "base R"'s
> utils package.
>
>
> Martin
>
>     >     Best Wishes, Spencer Graves
>
>
>     > On 6/9/24 8:40 PM, Gabor Grothendieck wrote:
>     >> zoo overcomes many of the limitations of ts:
>     >>
>     >> library(zoo) as.ts(head(as.zoo(presidents))) ## Qtr1 Qtr2
>     >> Qtr3 Qtr4 ## 1945 NA 87 82 75 ## 1946 63 50
>     >>
>     >> xts also works here.
>     >>
>     >> On Sun, Jun 9, 2024 at 12:04?PM Spencer Graves
>     >> <spencer.graves at prodsyse.com> wrote:
>     >>>
>     >>> Hello, All:
>     >>>
>     >>>
>     >>> The 'head' and 'tail' functions strip the time from a
>     >>> 'ts' object.  Example:
>     >>>
>     >>>
>     >>> > head(presidents) [1] NA 87 82 75 63 50
>     >>>
>     >>>
>     >>> > window(presidents, 1945, 1946.25) Qtr1 Qtr2 Qtr3 Qtr4
>     >>> 1945 NA 87 82 75 1946 63 50
>     >>>
>     >>>
>     >>> Below please find code for 'head.ts' and 'tail.ts' that
>     >>> matches 'window'.
>     >>>
>     >>>
>     >>> Comments?  Spencer Graves
>     >>>
>     >>> head.ts <- function(x, n=6L, ...){ tmx <-
>     >>> as.numeric(time(x))
>     >>> #
>     >>> utils:::checkHT(n, d <- dim(x)) if(is.na(n[1]) ||
>     >>> n[1]==0)ts(NULL)
>     >>> #
>     >>> firstn <- head(tmx, n[1]) if(is.null(d)){
>     >>> return(window(x, firstn[1], tail(firstn, 1))) } else{
>     >>> if(length(n)<2){ return(window(x, firstn[1],
>     >>> tail(firstn, 1))) } else { Cols <- head(1:d[2], n[2])
>     >>> xn2 <- x[, Cols[1]:tail(Cols, 1)] return(window(xn2,
>     >>> firstn[1], tail(firstn, 1))) } } }
>     >>>
>     >>>
>     >>> tail.ts <- function (x, n = 6L, ...)  {
>     >>> utils:::checkHT(n, d <- dim(x)) tmx <-
>     >>> as.numeric(time(x))
>     >>> #
>     >>> if(is.na(n[1]) || n[1]==0)ts(NULL)
>     >>> #
>     >>> lastn <- tail(tmx, n[1]) if(is.null(d)){
>     >>> return(window(x, lastn[1], tail(lastn, 1))) } else{
>     >>> if(length(n)<2){ return(window(x, lastn[1], tail(lastn,
>     >>> 1))) } else { Cols <- head(1:d[2], n[2]) xn2 <- x[,
>     >>> Cols[1]:tail(Cols, 1)] return(window(xn2, lastn[1],
>     >>> tail(lastn, 1))) } } }
>     >>>
>     >>>
>     >>> # examples head(presidents)
>     >>>
>     >>> head(presidents, 2)
>     >>>
>     >>> npresObs <- length(presidents) head(presidents,
>     >>> 6-npresObs)
>     >>>
>     >>> try(head(presidents, 1:2)) # 'try-error'
>     >>>
>     >>> try(head(presidents, 0)) # 'try-error'
>     >>>
>     >>> # matrix time series str(pres <-
>     >>> cbind(n=1:length(presidents), presidents)) head(pres, 2)
>     >>>
>     >>> head(pres, 2-npresObs)
>     >>>
>     >>> head(pres, 1:2) head(pres, 2:1) head(pres, 1:3)
>     >>>
>     >>> # examples tail(presidents)
>     >>>
>     >>> tail(presidents, 2)
>     >>>
>     >>> npresObs <- length(presidents) tail(presidents,
>     >>> 6-npresObs)
>     >>>
>     >>> try(tail(presidents, 1:2)) # 'try-error'
>     >>>
>     >>> try(tail(presidents, 0)) # 'try-error'
>     >>>
>     >>> # matrix time series str(pres <-
>     >>> cbind(n=1:length(presidents), presidents)) tail(pres, 2)
>     >>>
>     >>> tail(pres, 2-npresObs)
>     >>>
>     >>> tail(pres, 1:2) tail(pres, 2:1) tail(pres, 1:3)
>     >>>
>     >>> # for unit testing: headPres <- head(presidents) pres6
>     >>> <- ts(presidents[1:6], time(presidents)[1],
>     >>> frequency=frequency(presidents))
>     >>> stopifnot(all.equal(headPres, pres6))
>     >>>
>     >>> headPres2 <- head(presidents, 2) pres2 <-
>     >>> ts(presidents[1:2], time(presidents)[1],
>     >>> frequency=frequency(presidents))
>     >>> stopifnot(all.equal(headPres2, pres2))
>     >>>
>     >>> npresObs <- length(presidents) headPres. <-
>     >>> head(presidents, 6-npresObs)
>     >>> stopifnot(all.equal(headPres., pres6))
>     >>>
>     >>> headPresOops <- try(head(presidents, 1:2))
>     >>> stopifnot(class(headPresOops) == 'try-error')
>     >>>
>     >>> headPres0 <- try(head(presidents, 0))
>     >>> stopifnot(class(headPres0) == 'try-error')
>     >>>
>     >>> str(pres <- cbind(n=1:length(presidents), presidents))
>     >>> headP2 <- head(pres, 2)
>     >>>
>     >>> p2 <- ts(pres[1:2, ], time(presidents)[1],
>     >>> frequency=frequency(presidents))
>     >>> stopifnot(all.equal(headP2, p2))
>     >>>
>     >>> headP2. <- head(pres, 2-npresObs)
>     >>> stopifnot(all.equal(headP2., p2))
>     >>>
>     >>>
>     >>> #############
>     >>>
>     >>>
>     >>> sessionInfo() R version 4.4.0 (2024-04-24) Platform:
>     >>> aarch64-apple-darwin20 Running under: macOS Sonoma 14.5
>     >>>
>     >>> Matrix products: default BLAS:
>     >>> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>     >>>
>     >>> LAPACK:
>     >>> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
>     >>> LAPACK version 3.12.0
>     >>>
>     >>> locale: [1]
>     >>> en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>     >>>
>     >>> time zone: America/Chicago tzcode source: internal
>     >>>
>     >>> attached base packages: [1] stats graphics grDevices
>     >>> utils datasets [6] methods base
>     >>>
>     >>> loaded via a namespace (and not attached): [1]
>     >>> compiler_4.4.0 tools_4.4.0
>     >>>
>     >>> ______________________________________________
>     >>> R-devel at r-project.org mailing list
>     >>> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >>
>     >>
>     >>
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Wed Jun 12 16:35:31 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Wed, 12 Jun 2024 16:35:31 +0200
Subject: [Rd] Fields used by available.packages
In-Reply-To: <CAN+W6_vcvA4Gr9BUenydQOmt4HQSrTzNuNUyirFkbYN30vM-zA@mail.gmail.com>
References: <CAN+W6_vcvA4Gr9BUenydQOmt4HQSrTzNuNUyirFkbYN30vM-zA@mail.gmail.com>
Message-ID: <26217.45619.441769.623342@hornik.net>

>>>>> Llu?s Revilla writes:

Lluis,

So in available.packages() I could replace

    if (is.null(fields))
	fields <- requiredFields
    else {
	stopifnot(is.character(fields))
	fields <- unique(c(requiredFields, fields))
    }

by someting like

    if(is.null(fields))
        fields <- getOption("available_packages_fields")
    if(is.null(fields))
        fields <- requiredFields
    else {
	stopifnot(is.character(fields))
	fields <- unique(c(requiredFields, fields))
    }

?

Best
-k



> Hi all,
> I have recently been researching how available.packages and
> install.packages filter packages from repositories with additional fields
> in their PACKAGES file.

> Currently there are some default filters, but users (and R admins) can set
> up their own filters by passing a list to the fields argument or adding
> them to the "available_packages_filters" option.
> But if the fields used by the filters are not read by default, then users
> must manually add the required fields to each call to available.packages.

> This makes it difficult to use new fields and to control what is installed
> in highly regulated systems which want to use more fields to select what is
> installed.

> Current workarounds considered are:
>  1) The filtering function requiring new fields intercepts the call to
> available.packages and adds the desired fields via eval in
> parent.environment and then adds the filters again.
>  2) Import new data (remote or local) when filtering packages, merge them
> and filter accordingly.
>  3) Suggestions?

> The first solution is complicated, while the second doesn't use the R
> machinery of tools::write_PACKAGES to set up the repository with all the
> fields (although how to add more fields to the repository file is a
> different issue).

> Would it be possible to add a new option to add fields to be read by
> available.packages, similar to filters?
> The same approach for fields as for filters would avoid the two workarounds
> mentioned. To match it, the new option could be named
> "available_packages_fields".

> I look forward to hearing from you,

> Llu?s

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ||u|@@rev|||@ @end|ng |rom gm@||@com  Wed Jun 12 16:47:31 2024
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Wed, 12 Jun 2024 16:47:31 +0200
Subject: [Rd] Fields used by available.packages
In-Reply-To: <26217.45619.441769.623342@hornik.net>
References: <CAN+W6_vcvA4Gr9BUenydQOmt4HQSrTzNuNUyirFkbYN30vM-zA@mail.gmail.com>
 <26217.45619.441769.623342@hornik.net>
Message-ID: <CAN+W6_um=SYDgRkTrJsVj80=K-4EXf-ckJ=xa2=v24gDrx37qw@mail.gmail.com>

Yes, I think that would be enough.
Thank you, Kurt!

Llu?s

On Wed, 12 Jun 2024 at 16:35, Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:

> >>>>> Llu?s Revilla writes:
>
> Lluis,
>
> So in available.packages() I could replace
>
>     if (is.null(fields))
>         fields <- requiredFields
>     else {
>         stopifnot(is.character(fields))
>         fields <- unique(c(requiredFields, fields))
>     }
>
> by someting like
>
>     if(is.null(fields))
>         fields <- getOption("available_packages_fields")
>     if(is.null(fields))
>         fields <- requiredFields
>     else {
>         stopifnot(is.character(fields))
>         fields <- unique(c(requiredFields, fields))
>     }
>
> ?
>
> Best
> -k
>
>
>
> > Hi all,
> > I have recently been researching how available.packages and
> > install.packages filter packages from repositories with additional fields
> > in their PACKAGES file.
>
> > Currently there are some default filters, but users (and R admins) can
> set
> > up their own filters by passing a list to the fields argument or adding
> > them to the "available_packages_filters" option.
> > But if the fields used by the filters are not read by default, then users
> > must manually add the required fields to each call to available.packages.
>
> > This makes it difficult to use new fields and to control what is
> installed
> > in highly regulated systems which want to use more fields to select what
> is
> > installed.
>
> > Current workarounds considered are:
> >  1) The filtering function requiring new fields intercepts the call to
> > available.packages and adds the desired fields via eval in
> > parent.environment and then adds the filters again.
> >  2) Import new data (remote or local) when filtering packages, merge them
> > and filter accordingly.
> >  3) Suggestions?
>
> > The first solution is complicated, while the second doesn't use the R
> > machinery of tools::write_PACKAGES to set up the repository with all the
> > fields (although how to add more fields to the repository file is a
> > different issue).
>
> > Would it be possible to add a new option to add fields to be read by
> > available.packages, similar to filters?
> > The same approach for fields as for filters would avoid the two
> workarounds
> > mentioned. To match it, the new option could be named
> > "available_packages_fields".
>
> > I look forward to hearing from you,
>
> > Llu?s
>
> >       [[alternative HTML version deleted]]
>
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Wed Jun 12 16:49:33 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Wed, 12 Jun 2024 16:49:33 +0200
Subject: [Rd] Fields used by available.packages
In-Reply-To: <CAN+W6_um=SYDgRkTrJsVj80=K-4EXf-ckJ=xa2=v24gDrx37qw@mail.gmail.com>
References: <CAN+W6_vcvA4Gr9BUenydQOmt4HQSrTzNuNUyirFkbYN30vM-zA@mail.gmail.com>
 <26217.45619.441769.623342@hornik.net>
 <CAN+W6_um=SYDgRkTrJsVj80=K-4EXf-ckJ=xa2=v24gDrx37qw@mail.gmail.com>
Message-ID: <26217.46461.646968.454827@hornik.net>

>>>>> Llu?s Revilla writes:

> Yes, I think that would be enough.?

Thanks.  And of course add documentation ...

Will try to get this in in the next few days.

Best
-k

> Thank you, Kurt!


> Llu?s

> On Wed, 12 Jun 2024 at 16:35, Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:

>>>>>> Llu?s Revilla writes:
   
>     Lluis,
   
>     So in available.packages() I could replace
   
>     ? ? if (is.null(fields))
>     ? ? ? ? fields <- requiredFields
>     ? ? else {
>     ? ? ? ? stopifnot(is.character(fields))
>     ? ? ? ? fields <- unique(c(requiredFields, fields))
>     ? ? }
   
>     by someting like
   
>     ? ? if(is.null(fields))
>     ? ? ? ? fields <- getOption("available_packages_fields")
>     ? ? if(is.null(fields))
>     ? ? ? ? fields <- requiredFields
>     ? ? else {
>     ? ? ? ? stopifnot(is.character(fields))
>     ? ? ? ? fields <- unique(c(requiredFields, fields))
>     ? ? }
   
>     ?
   
>     Best
>     -k

>> Hi all,
>> I have recently been researching how available.packages and
>> install.packages filter packages from repositories with additional
>     fields
>> in their PACKAGES file.
   
>> Currently there are some default filters, but users (and R admins) can
>     set
>> up their own filters by passing a list to the fields argument or adding
>> them to the "available_packages_filters" option.
>> But if the fields used by the filters are not read by default, then
>     users
>> must manually add the required fields to each call to
>     available.packages.
   
>> This makes it difficult to use new fields and to control what is
>     installed
>> in highly regulated systems which want to use more fields to select
>     what is
>> installed.
   
>> Current workarounds considered are:
>> ? 1) The filtering function requiring new fields intercepts the call to
>> available.packages and adds the desired fields via eval in
>> parent.environment and then adds the filters again.
>> ? 2) Import new data (remote or local) when filtering packages, merge
>     them
>> and filter accordingly.
>> ? 3) Suggestions?
   
>> The first solution is complicated, while the second doesn't use the R
>> machinery of tools::write_PACKAGES to set up the repository with all
>     the
>> fields (although how to add more fields to the repository file is a
>> different issue).
   
>> Would it be possible to add a new option to add fields to be read by
>> available.packages, similar to filters?
>> The same approach for fields as for filters would avoid the two
>     workarounds
>> mentioned. To match it, the new option could be named
>> "available_packages_fields".
   
>> I look forward to hearing from you,
   
>> Llu?s
   
>> ? ? ? ?[[alternative HTML version deleted]]
   
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Jun 13 10:40:49 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 13 Jun 2024 10:40:49 +0200
Subject: [Rd] head.ts, tail.ts loses time
In-Reply-To: <295e6967-6ea6-4334-a43d-58c18ef7fcfd@prodsyse.com>
References: <016d5bb8-b0ee-47f0-91b2-7a2b8c51557d@prodsyse.com>
 <CAP01uRmdPR_3M5qUnD8+4REw8Fz8sSf1UrrxzJFwQN+f1dx1xQ@mail.gmail.com>
 <da0e13c2-d7d6-4f9e-b22e-c2b7392066e1@prodsyse.com>
 <26215.3697.815212.54251@stat.math.ethz.ch>
 <295e6967-6ea6-4334-a43d-58c18ef7fcfd@prodsyse.com>
Message-ID: <26218.45201.138876.12305@stat.math.ethz.ch>

>>>>> Spencer Graves 
>>>>>     on Mon, 10 Jun 2024 09:45:46 -0500 writes:

    > Hi, Martin et al.:
    > On 6/10/24 9:32 AM, Martin Maechler wrote:
    >>>>>>> Spencer Graves
    >>>>>>> on Mon, 10 Jun 2024 07:50:13 -0500 writes:
    >> 
    >> > Hi, Gabor et al.: Thanks for this. I should change my
    >> > current application to use either zoo or xts, as Gabor
    >> > suggests.
    >> 
    >> 
    >> > 	  However, I was surprised to learn that "[.ts" does NOT
    >> > return an object of class "ts". I see that "head.default"
    >> > and "head.matrix" both call "[", so "head" cannot return a
    >> > ts object, because "[" doesn't.
    >> 
    >> Yes, the default head() and tail() are built on  `[` very much
    >> on purpose.
    >> Note that   `[`  should *not* keep the "ts"  property  in
    >> general, e.g.,
    >> lynx[c(1:3, 7)]
    >> cannot be a regular time series


    > Agreed.

    >> 
    >> I think I'd consider using  windows() for a head.ts() and tail.ts(),
    >> but in any case, I am sympathetic adding such methods to "base R"'s
    >> utils package.


    > The code I provided below for head.ts() and tail.ts() does that: I 
    > took the code for head.default and head.matrix, etc., computed tmx <- 
    > as.numeric(time(x)), and then used head(tmx) [and tail(tmx)] in "window()".

Indeed.  I've found that the new methods really belong to pkg
'stats' (where "ts" are), and hence renamed and exported  the internal
.checkHT(), and shence the change became somewhat more extensive:

------------------------------------------------------------------------
r86728 | maechler | 2024-06-13 10:36:51 +0200 (Thu, 13 Jun 2024) | 1 line
Changed paths:
   M doc/NEWS.Rd
   M src/library/stats/NAMESPACE
   M src/library/stats/R/ts.R
   M src/library/stats/man/ts.Rd
   M src/library/utils/NAMESPACE
   M src/library/utils/R/head.R
   M src/library/utils/man/head.Rd
   M tests/Examples/stats-Ex.Rout.save

add head() & tail() methods for "ts"(time series) ==> export .checkHT() utility
------------------------------------------------------------------------

With thanks to Spencer Graves,

Martin


    > Thanks for your reply.
    > sg
    >> 
    >> 
    >> Martin
    >> 
    >> > 	  Best Wishes, Spencer Graves
    >> 
    >> 
    >> > On 6/9/24 8:40 PM, Gabor Grothendieck wrote:
    >> >> zoo overcomes many of the limitations of ts:
    >> >>
    >> >> library(zoo) as.ts(head(as.zoo(presidents))) ## Qtr1 Qtr2
    >> >> Qtr3 Qtr4 ## 1945 NA 87 82 75 ## 1946 63 50
    >> >>
    >> >> xts also works here.
    >> >>
    >> >> On Sun, Jun 9, 2024 at 12:04?PM Spencer Graves
    >> >> <spencer.graves at prodsyse.com> wrote:
    >> >>>
    >> >>> Hello, All:
    >> >>>
    >> >>>
    >> >>> The 'head' and 'tail' functions strip the time from a
    >> >>> 'ts' object.  Example:
    >> >>>
    >> >>>
    >> >>> > head(presidents) [1] NA 87 82 75 63 50
    >> >>>
    >> >>>
    >> >>> > window(presidents, 1945, 1946.25) Qtr1 Qtr2 Qtr3 Qtr4
    >> >>> 1945 NA 87 82 75 1946 63 50
    >> >>>
    >> >>>
    >> >>> Below please find code for 'head.ts' and 'tail.ts' that
    >> >>> matches 'window'.
    >> >>>
    >> >>>
    >> >>> Comments?  Spencer Graves
    >> >>>
    >> >>> head.ts <- function(x, n=6L, ...){ tmx <-
    >> >>> as.numeric(time(x))
    >> >>> #
    >> >>> utils:::checkHT(n, d <- dim(x)) if(is.na(n[1]) ||
    >> >>> n[1]==0)ts(NULL)
    >> >>> #
    >> >>> firstn <- head(tmx, n[1]) if(is.null(d)){
    >> >>> return(window(x, firstn[1], tail(firstn, 1))) } else{
    >> >>> if(length(n)<2){ return(window(x, firstn[1],
    >> >>> tail(firstn, 1))) } else { Cols <- head(1:d[2], n[2])
    >> >>> xn2 <- x[, Cols[1]:tail(Cols, 1)] return(window(xn2,
    >> >>> firstn[1], tail(firstn, 1))) } } }
    >> >>>
    >> >>>
    >> >>> tail.ts <- function (x, n = 6L, ...)  {
    >> >>> utils:::checkHT(n, d <- dim(x)) tmx <-
    >> >>> as.numeric(time(x))
    >> >>> #
    >> >>> if(is.na(n[1]) || n[1]==0)ts(NULL)
    >> >>> #
    >> >>> lastn <- tail(tmx, n[1]) if(is.null(d)){
    >> >>> return(window(x, lastn[1], tail(lastn, 1))) } else{
    >> >>> if(length(n)<2){ return(window(x, lastn[1], tail(lastn,
    >> >>> 1))) } else { Cols <- head(1:d[2], n[2]) xn2 <- x[,
    >> >>> Cols[1]:tail(Cols, 1)] return(window(xn2, lastn[1],
    >> >>> tail(lastn, 1))) } } }
    >> >>>
    >> >>>
    >> >>> # examples head(presidents)
    >> >>>
    >> >>> head(presidents, 2)
    >> >>>
    >> >>> npresObs <- length(presidents) head(presidents,
    >> >>> 6-npresObs)
    >> >>>
    >> >>> try(head(presidents, 1:2)) # 'try-error'
    >> >>>
    >> >>> try(head(presidents, 0)) # 'try-error'
    >> >>>
    >> >>> # matrix time series str(pres <-
    >> >>> cbind(n=1:length(presidents), presidents)) head(pres, 2)
    >> >>>
    >> >>> head(pres, 2-npresObs)
    >> >>>
    >> >>> head(pres, 1:2) head(pres, 2:1) head(pres, 1:3)
    >> >>>
    >> >>> # examples tail(presidents)
    >> >>>
    >> >>> tail(presidents, 2)
    >> >>>
    >> >>> npresObs <- length(presidents) tail(presidents,
    >> >>> 6-npresObs)
    >> >>>
    >> >>> try(tail(presidents, 1:2)) # 'try-error'
    >> >>>
    >> >>> try(tail(presidents, 0)) # 'try-error'
    >> >>>
    >> >>> # matrix time series str(pres <-
    >> >>> cbind(n=1:length(presidents), presidents)) tail(pres, 2)
    >> >>>
    >> >>> tail(pres, 2-npresObs)
    >> >>>
    >> >>> tail(pres, 1:2) tail(pres, 2:1) tail(pres, 1:3)
    >> >>>
    >> >>> # for unit testing: headPres <- head(presidents) pres6
    >> >>> <- ts(presidents[1:6], time(presidents)[1],
    >> >>> frequency=frequency(presidents))
    >> >>> stopifnot(all.equal(headPres, pres6))
    >> >>>
    >> >>> headPres2 <- head(presidents, 2) pres2 <-
    >> >>> ts(presidents[1:2], time(presidents)[1],
    >> >>> frequency=frequency(presidents))
    >> >>> stopifnot(all.equal(headPres2, pres2))
    >> >>>
    >> >>> npresObs <- length(presidents) headPres. <-
    >> >>> head(presidents, 6-npresObs)
    >> >>> stopifnot(all.equal(headPres., pres6))
    >> >>>
    >> >>> headPresOops <- try(head(presidents, 1:2))
    >> >>> stopifnot(class(headPresOops) == 'try-error')
    >> >>>
    >> >>> headPres0 <- try(head(presidents, 0))
    >> >>> stopifnot(class(headPres0) == 'try-error')
    >> >>>
    >> >>> str(pres <- cbind(n=1:length(presidents), presidents))
    >> >>> headP2 <- head(pres, 2)
    >> >>>
    >> >>> p2 <- ts(pres[1:2, ], time(presidents)[1],
    >> >>> frequency=frequency(presidents))
    >> >>> stopifnot(all.equal(headP2, p2))
    >> >>>
    >> >>> headP2. <- head(pres, 2-npresObs)
    >> >>> stopifnot(all.equal(headP2., p2))
    >> >>>
    >> >>>
    >> >>> #############
    >> >>>
    >> >>>
    >> >>> sessionInfo() R version 4.4.0 (2024-04-24) Platform:
    >> >>> aarch64-apple-darwin20 Running under: macOS Sonoma 14.5
    >> >>>
    >> >>> Matrix products: default BLAS:
    >> >>> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
    >> >>>
    >> >>> LAPACK:
    >> >>> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
    >> >>> LAPACK version 3.12.0
    >> >>>
    >> >>> locale: [1]
    >> >>> en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
    >> >>>
    >> >>> time zone: America/Chicago tzcode source: internal
    >> >>>
    >> >>> attached base packages: [1] stats graphics grDevices
    >> >>> utils datasets [6] methods base
    >> >>>
    >> >>> loaded via a namespace (and not attached): [1]
    >> >>> compiler_4.4.0 tools_4.4.0
    >> >>>
    >> >>> ______________________________________________
    >> >>> R-devel at r-project.org mailing list
    >> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >>
    >> >>
    >> >>
    >> 
    >> > ______________________________________________
    >> > R-devel at r-project.org mailing list
    >> > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Jun 13 10:47:27 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 13 Jun 2024 10:47:27 +0200
Subject: [Rd] head.ts, tail.ts loses time
In-Reply-To: <CAP01uRkHWsQrELjRDU7MR9XtXgghT5VM0vnQmrE=pOa-mqSBhQ@mail.gmail.com>
References: <016d5bb8-b0ee-47f0-91b2-7a2b8c51557d@prodsyse.com>
 <CAP01uRmdPR_3M5qUnD8+4REw8Fz8sSf1UrrxzJFwQN+f1dx1xQ@mail.gmail.com>
 <da0e13c2-d7d6-4f9e-b22e-c2b7392066e1@prodsyse.com>
 <26215.3697.815212.54251@stat.math.ethz.ch>
 <CAP01uRkHWsQrELjRDU7MR9XtXgghT5VM0vnQmrE=pOa-mqSBhQ@mail.gmail.com>
Message-ID: <26218.45599.975713.139484@stat.math.ethz.ch>

>>>>> Gabor Grothendieck 
>>>>>     on Tue, 11 Jun 2024 09:13:49 -0400 writes:

    > It isn't really clear that it can't work.  This does work by inserting NA's.
    > library(zoo)
    > as.ts(as.zoo(lynx)[ c(1:3, 7) ] )
    > ## Time Series:
    > ## Start = 1821
    > ## End = 1827
    > ## Frequency = 1
    > ## [1]  269  321  585   NA   NA   NA 3928

You are right,  Gabor, such an implementation of  `[.ts`
*would* make sense, too.

But given that head.ts() and tail.ts() -- slightly compactified
from Spencer's proposal,  are now simple and "robust",

I did not want to make such a "strong" change to such a basic class and its `[` operator.
(I'm not *against* it either currently, but I'm not convinced
 it's worth the effort with possible subsequent changes needed
 in code which has relied on the old behavior for > 30 years
 if you count the pre-R  S version, too.)

Best, Martin


    > On Mon, Jun 10, 2024 at 10:32?AM Martin Maechler
    > <maechler at stat.math.ethz.ch> wrote:
    >> 
    >> >>>>> Spencer Graves
    >> >>>>>     on Mon, 10 Jun 2024 07:50:13 -0500 writes:
    >> 
    >> > Hi, Gabor et al.: Thanks for this. I should change my
    >> > current application to use either zoo or xts, as Gabor
    >> > suggests.
    >> 
    >> 
    >> >     However, I was surprised to learn that "[.ts" does NOT
    >> > return an object of class "ts". I see that "head.default"
    >> > and "head.matrix" both call "[", so "head" cannot return a
    >> > ts object, because "[" doesn't.
    >> 
    >> Yes, the default head() and tail() are built on  `[` very much
    >> on purpose.
    >> Note that   `[`  should *not* keep the "ts"  property  in
    >> general, e.g.,
    >> lynx[c(1:3, 7)]
    >> cannot be a regular time series
    >> 
    >> I think I'd consider using  windows() for a head.ts() and tail.ts(),
    >> but in any case, I am sympathetic adding such methods to "base R"'s
    >> utils package.
    >> 
    >> 
    >> Martin
    >> 
    >> >     Best Wishes, Spencer Graves
    >> 
    >> 
    >> > On 6/9/24 8:40 PM, Gabor Grothendieck wrote:
    >> >> zoo overcomes many of the limitations of ts:
    >> >>
    >> >> library(zoo) as.ts(head(as.zoo(presidents))) ## Qtr1 Qtr2
    >> >> Qtr3 Qtr4 ## 1945 NA 87 82 75 ## 1946 63 50
    >> >>
    >> >> xts also works here.
    >> >>
    >> >> On Sun, Jun 9, 2024 at 12:04?PM Spencer Graves
    >> >> <spencer.graves at prodsyse.com> wrote:
    >> >>>
    >> >>> Hello, All:
    >> >>>
    >> >>>
    >> >>> The 'head' and 'tail' functions strip the time from a
    >> >>> 'ts' object.  Example:
    >> >>>
    >> >>>
    >> >>> > head(presidents) [1] NA 87 82 75 63 50
    >> >>>
    >> >>>
    >> >>> > window(presidents, 1945, 1946.25) Qtr1 Qtr2 Qtr3 Qtr4
    >> >>> 1945 NA 87 82 75 1946 63 50
    >> >>>
    >> >>>
    >> >>> Below please find code for 'head.ts' and 'tail.ts' that
    >> >>> matches 'window'.
    >> >>>
    >> >>>
    >> >>> Comments?  Spencer Graves
    >> >>>
    >> >>> head.ts <- function(x, n=6L, ...){ tmx <-
    >> >>> as.numeric(time(x))
    >> >>> #
    >> >>> utils:::checkHT(n, d <- dim(x)) if(is.na(n[1]) ||
    >> >>> n[1]==0)ts(NULL)
    >> >>> #
    >> >>> firstn <- head(tmx, n[1]) if(is.null(d)){
    >> >>> return(window(x, firstn[1], tail(firstn, 1))) } else{
    >> >>> if(length(n)<2){ return(window(x, firstn[1],
    >> >>> tail(firstn, 1))) } else { Cols <- head(1:d[2], n[2])
    >> >>> xn2 <- x[, Cols[1]:tail(Cols, 1)] return(window(xn2,
    >> >>> firstn[1], tail(firstn, 1))) } } }
    >> >>>
    >> >>>
    >> >>> tail.ts <- function (x, n = 6L, ...)  {
    >> >>> utils:::checkHT(n, d <- dim(x)) tmx <-
    >> >>> as.numeric(time(x))
    >> >>> #
    >> >>> if(is.na(n[1]) || n[1]==0)ts(NULL)
    >> >>> #
    >> >>> lastn <- tail(tmx, n[1]) if(is.null(d)){
    >> >>> return(window(x, lastn[1], tail(lastn, 1))) } else{
    >> >>> if(length(n)<2){ return(window(x, lastn[1], tail(lastn,
    >> >>> 1))) } else { Cols <- head(1:d[2], n[2]) xn2 <- x[,
    >> >>> Cols[1]:tail(Cols, 1)] return(window(xn2, lastn[1],
    >> >>> tail(lastn, 1))) } } }
    >> >>>
    >> >>>
    >> >>> # examples head(presidents)
    >> >>>
    >> >>> head(presidents, 2)
    >> >>>
    >> >>> npresObs <- length(presidents) head(presidents,
    >> >>> 6-npresObs)
    >> >>>
    >> >>> try(head(presidents, 1:2)) # 'try-error'
    >> >>>
    >> >>> try(head(presidents, 0)) # 'try-error'
    >> >>>
    >> >>> # matrix time series str(pres <-
    >> >>> cbind(n=1:length(presidents), presidents)) head(pres, 2)
    >> >>>
    >> >>> head(pres, 2-npresObs)
    >> >>>
    >> >>> head(pres, 1:2) head(pres, 2:1) head(pres, 1:3)
    >> >>>
    >> >>> # examples tail(presidents)
    >> >>>
    >> >>> tail(presidents, 2)
    >> >>>
    >> >>> npresObs <- length(presidents) tail(presidents,
    >> >>> 6-npresObs)
    >> >>>
    >> >>> try(tail(presidents, 1:2)) # 'try-error'
    >> >>>
    >> >>> try(tail(presidents, 0)) # 'try-error'
    >> >>>
    >> >>> # matrix time series str(pres <-
    >> >>> cbind(n=1:length(presidents), presidents)) tail(pres, 2)
    >> >>>
    >> >>> tail(pres, 2-npresObs)
    >> >>>
    >> >>> tail(pres, 1:2) tail(pres, 2:1) tail(pres, 1:3)
    >> >>>
    >> >>> # for unit testing: headPres <- head(presidents) pres6
    >> >>> <- ts(presidents[1:6], time(presidents)[1],
    >> >>> frequency=frequency(presidents))
    >> >>> stopifnot(all.equal(headPres, pres6))
    >> >>>
    >> >>> headPres2 <- head(presidents, 2) pres2 <-
    >> >>> ts(presidents[1:2], time(presidents)[1],
    >> >>> frequency=frequency(presidents))
    >> >>> stopifnot(all.equal(headPres2, pres2))
    >> >>>
    >> >>> npresObs <- length(presidents) headPres. <-
    >> >>> head(presidents, 6-npresObs)
    >> >>> stopifnot(all.equal(headPres., pres6))
    >> >>>
    >> >>> headPresOops <- try(head(presidents, 1:2))
    >> >>> stopifnot(class(headPresOops) == 'try-error')
    >> >>>
    >> >>> headPres0 <- try(head(presidents, 0))
    >> >>> stopifnot(class(headPres0) == 'try-error')
    >> >>>
    >> >>> str(pres <- cbind(n=1:length(presidents), presidents))
    >> >>> headP2 <- head(pres, 2)
    >> >>>
    >> >>> p2 <- ts(pres[1:2, ], time(presidents)[1],
    >> >>> frequency=frequency(presidents))
    >> >>> stopifnot(all.equal(headP2, p2))
    >> >>>
    >> >>> headP2. <- head(pres, 2-npresObs)
    >> >>> stopifnot(all.equal(headP2., p2))
    >> >>>
    >> >>>
    >> >>> #############
    >> >>>
    >> >>>
    >> >>> sessionInfo() R version 4.4.0 (2024-04-24) Platform:
    >> >>> aarch64-apple-darwin20 Running under: macOS Sonoma 14.5
    >> >>>
    >> >>> Matrix products: default BLAS:
    >> >>> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
    >> >>>
    >> >>> LAPACK:
    >> >>> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
    >> >>> LAPACK version 3.12.0
    >> >>>
    >> >>> locale: [1]
    >> >>> en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
    >> >>>
    >> >>> time zone: America/Chicago tzcode source: internal
    >> >>>
    >> >>> attached base packages: [1] stats graphics grDevices
    >> >>> utils datasets [6] methods base
    >> >>>
    >> >>> loaded via a namespace (and not attached): [1]
    >> >>> compiler_4.4.0 tools_4.4.0
    >> >>>
    >> >>> ______________________________________________
    >> >>> R-devel at r-project.org mailing list
    >> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >>
    >> >>
    >> >>
    >> 
    >> > ______________________________________________
    >> > R-devel at r-project.org mailing list
    >> > https://stat.ethz.ch/mailman/listinfo/r-devel



    > -- 
    > Statistics & Software Consulting
    > GKX Group, GKX Associates Inc.
    > tel: 1-877-GKX-GROUP
    > email: ggrothendieck at gmail.com


From georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk  Thu Jun 13 11:38:21 2024
From: georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Thu, 13 Jun 2024 09:38:21 +0000
Subject: [Rd] head.ts, tail.ts loses time
In-Reply-To: <mailman.54342.3.1718186401.9590.r-devel@r-project.org>
References: <mailman.54342.3.1718186401.9590.r-devel@r-project.org>
Message-ID: <LO0P265MB6325A77C563D088D0DE7C44BAEC12@LO0P265MB6325.GBRP265.PROD.OUTLOOK.COM>

> It isn't really clear that it can't work.  This does work by inserting NA's...
>
>  library(zoo)
> as.ts(as.zoo(lynx)[ c(1:3, 7) ] )

If by 'this' you mean indexing, it would be very confusing and error prone for expressions like lynx[c(1:3, 7)] (lynx is from class 'ts') to return a ts object with NA's inserted and, even more  so, since this has been unambiguously documented for ages in '?ts'. For 'zoo' objects, the situation is different since they have a time index by definition, so the above index doesn't introduce artificial NA's:

> as.zoo(lynx)[ c(1:3, 7) ]
1821 1822 1823 1827 
 269  321  585 3928 
> coredata(as.zoo(lynx)[ c(1:3, 7) ])
[1]  269  321  585 3928

On the other hand,  'ts' methods for 'head' and 'tail' would be suitable, since the indexing is contiguous by definition there. Also, compatibility problems may not be a big concern for these functions.

Georgi Boshnakov



Date: Tue, 11 Jun 2024 09:13:49 -0400
From: Gabor Grothendieck <ggrothendieck at gmail.com>
To: Martin Maechler <maechler at stat.math.ethz.ch>
Cc: Spencer Graves <spencer.graves at prodsyse.com>, r-devel
        <r-devel at r-project.org>
Subject: Re: [Rd] head.ts, tail.ts loses time
Message-ID:
        <CAP01uRkHWsQrELjRDU7MR9XtXgghT5VM0vnQmrE=pOa-mqSBhQ at mail.gmail.com>
Content-Type: text/plain; charset="utf-8"

It isn't really clear that it can't work.  This does work by inserting NA's...

  library(zoo)
  as.ts(as.zoo(lynx)[ c(1:3, 7) ] )
  ## Time Series:
  ## Start = 1821
  ## End = 1827
  ## Frequency = 1
  ## [1]  269  321  585   NA   NA   NA 3928


On Mon, Jun 10, 2024 at 10:32?AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Spencer Graves
> >>>>>     on Mon, 10 Jun 2024 07:50:13 -0500 writes:
>
>     > Hi, Gabor et al.: Thanks for this. I should change my
>     > current application to use either zoo or xts, as Gabor
>     > suggests.
>
>
>     >     However, I was surprised to learn that "[.ts" does NOT
>     > return an object of class "ts". I see that "head.default"
>     > and "head.matrix" both call "[", so "head" cannot return a
>     > ts object, because "[" doesn't.
>
> Yes, the default head() and tail() are built on  `[` very much
> on purpose.
> Note that   `[`  should *not* keep the "ts"  property  in
> general, e.g.,
>          lynx[c(1:3, 7)]
> cannot be a regular time series
>
> I think I'd consider using  windows() for a head.ts() and tail.ts(),
> but in any case, I am sympathetic adding such methods to "base R"'s
> utils package.
>
>
> Martin
>
>     >     Best Wishes, Spencer Graves
>
>
>     > On 6/9/24 8:40 PM, Gabor Grothendieck wrote:
>     >> zoo overcomes many of the limitations of ts:
>     >>
>     >> library(zoo) as.ts(head(as.zoo(presidents))) ## Qtr1 Qtr2
>     >> Qtr3 Qtr4 ## 1945 NA 87 82 75 ## 1946 63 50
>     >>
>     >> xts also works here.
>     >>
>     >> On Sun, Jun 9, 2024 at 12:04?PM Spencer Graves
>     >> <spencer.graves at prodsyse.com> wrote:
>     >>>
>     >>> Hello, All:
>     >>>
>     >>>
>     >>> The 'head' and 'tail' functions strip the time from a
>     >>> 'ts' object.  Example:
>     >>>
>     >>>
>     >>> > head(presidents) [1] NA 87 82 75 63 50
>     >>>
>     >>>
>     >>> > window(presidents, 1945, 1946.25) Qtr1 Qtr2 Qtr3 Qtr4
>     >>> 1945 NA 87 82 75 1946 63 50
>     >>>
>     >>>
>     >>> Below please find code for 'head.ts' and 'tail.ts' that
>     >>> matches 'window'.
>     >>>
>     >>>
>     >>> Comments?  Spencer Graves
>     >>>
>     >>> head.ts <- function(x, n=6L, ...){ tmx <-
>     >>> as.numeric(time(x))
>     >>> #
>     >>> utils:::checkHT(n, d <- dim(x)) if(is.na(n[1]) ||
>     >>> n[1]==0)ts(NULL)
>     >>> #
>     >>> firstn <- head(tmx, n[1]) if(is.null(d)){
>     >>> return(window(x, firstn[1], tail(firstn, 1))) } else{
>     >>> if(length(n)<2){ return(window(x, firstn[1],
>     >>> tail(firstn, 1))) } else { Cols <- head(1:d[2], n[2])
>     >>> xn2 <- x[, Cols[1]:tail(Cols, 1)] return(window(xn2,
>     >>> firstn[1], tail(firstn, 1))) } } }
>     >>>
>     >>>
>     >>> tail.ts <- function (x, n = 6L, ...)  {
>     >>> utils:::checkHT(n, d <- dim(x)) tmx <-
>     >>> as.numeric(time(x))
>     >>> #
>     >>> if(is.na(n[1]) || n[1]==0)ts(NULL)
>     >>> #
>     >>> lastn <- tail(tmx, n[1]) if(is.null(d)){
>     >>> return(window(x, lastn[1], tail(lastn, 1))) } else{
>     >>> if(length(n)<2){ return(window(x, lastn[1], tail(lastn,
>     >>> 1))) } else { Cols <- head(1:d[2], n[2]) xn2 <- x[,
>     >>> Cols[1]:tail(Cols, 1)] return(window(xn2, lastn[1],
>     >>> tail(lastn, 1))) } } }
>     >>>
>     >>>
>     >>> # examples head(presidents)
>     >>>
>     >>> head(presidents, 2)
>     >>>
>     >>> npresObs <- length(presidents) head(presidents,
>     >>> 6-npresObs)
>     >>>
>     >>> try(head(presidents, 1:2)) # 'try-error'
>     >>>
>     >>> try(head(presidents, 0)) # 'try-error'
>     >>>
>     >>> # matrix time series str(pres <-
>     >>> cbind(n=1:length(presidents), presidents)) head(pres, 2)
>     >>>
>     >>> head(pres, 2-npresObs)
>     >>>
>     >>> head(pres, 1:2) head(pres, 2:1) head(pres, 1:3)
>     >>>
>     >>> # examples tail(presidents)
>     >>>
>     >>> tail(presidents, 2)
>     >>>
>     >>> npresObs <- length(presidents) tail(presidents,
>     >>> 6-npresObs)
>     >>>
>     >>> try(tail(presidents, 1:2)) # 'try-error'
>     >>>
>     >>> try(tail(presidents, 0)) # 'try-error'
>     >>>
>     >>> # matrix time series str(pres <-
>     >>> cbind(n=1:length(presidents), presidents)) tail(pres, 2)
>     >>>
>     >>> tail(pres, 2-npresObs)
>     >>>
>     >>> tail(pres, 1:2) tail(pres, 2:1) tail(pres, 1:3)
>     >>>
>     >>> # for unit testing: headPres <- head(presidents) pres6
>     >>> <- ts(presidents[1:6], time(presidents)[1],
>     >>> frequency=frequency(presidents))
>     >>> stopifnot(all.equal(headPres, pres6))
>     >>>
>     >>> headPres2 <- head(presidents, 2) pres2 <-
>     >>> ts(presidents[1:2], time(presidents)[1],
>     >>> frequency=frequency(presidents))
>     >>> stopifnot(all.equal(headPres2, pres2))
>     >>>
>     >>> npresObs <- length(presidents) headPres. <-
>     >>> head(presidents, 6-npresObs)
>     >>> stopifnot(all.equal(headPres., pres6))
>     >>>
>     >>> headPresOops <- try(head(presidents, 1:2))
>     >>> stopifnot(class(headPresOops) == 'try-error')
>     >>>
>     >>> headPres0 <- try(head(presidents, 0))
>     >>> stopifnot(class(headPres0) == 'try-error')
>     >>>
>     >>> str(pres <- cbind(n=1:length(presidents), presidents))
>     >>> headP2 <- head(pres, 2)
>     >>>
>     >>> p2 <- ts(pres[1:2, ], time(presidents)[1],
>     >>> frequency=frequency(presidents))
>     >>> stopifnot(all.equal(headP2, p2))
>     >>>
>     >>> headP2. <- head(pres, 2-npresObs)
>     >>> stopifnot(all.equal(headP2., p2))
>     >>>
>     >>>
>     >>> #############
>     >>>
>     >>>
>     >>> sessionInfo() R version 4.4.0 (2024-04-24) Platform:
>     >>> aarch64-apple-darwin20 Running under: macOS Sonoma 14.5
>     >>>
>     >>> Matrix products: default BLAS:
>     >>> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>     >>>
>     >>> LAPACK:
>     >>> /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
>     >>> LAPACK version 3.12.0
>     >>>
>     >>> locale: [1]
>     >>> en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>     >>>
>     >>> time zone: America/Chicago tzcode source: internal
>     >>>
>     >>> attached base packages: [1] stats graphics grDevices
>     >>> utils datasets [6] methods base
>     >>>
>     >>> loaded via a namespace (and not attached): [1]
>     >>> compiler_4.4.0 tools_4.4.0
>     >>>
>     >>> ______________________________________________
>     >>> R-devel at r-project.org mailing list
>     >>> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!PDiH4ENfjr2_Jw!BrlX0n74cttdH54fH7zImanZ4AEoUysullXuaB2TLwZnk4MElP8_Wzb1Jb-Qa6hu4N2xsqMoRZOivoiAzEMCMrHpuPa3LvL2StE0whuxSwE$ [stat[.]ethz[.]ch]
>     >>
>     >>
>     >>
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!PDiH4ENfjr2_Jw!BrlX0n74cttdH54fH7zImanZ4AEoUysullXuaB2TLwZnk4MElP8_Wzb1Jb-Qa6hu4N2xsqMoRZOivoiAzEMCMrHpuPa3LvL2StE0whuxSwE$ [stat[.]ethz[.]ch]



--
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com

From edd @end|ng |rom deb|@n@org  Thu Jun 13 14:20:00 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 13 Jun 2024 07:20:00 -0500
Subject: [Rd] R-devel on Windows temporarily broken?
Message-ID: <26218.58352.92640.574440@rob.eddelbuettel.com>


I had a very routine CI job fail twice this morning on r-devel on Windows;
the package (in fine standard form) doesn't even install under win-builder
r-devel. Whereas on Linux with r86731 everything is peachy.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From edd @end|ng |rom deb|@n@org  Thu Jun 13 15:35:24 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 13 Jun 2024 08:35:24 -0500
Subject: [Rd] R-devel on Windows temporarily broken?
In-Reply-To: <26218.62344.708682.22736@stat.math.ethz.ch>
References: <26218.58352.92640.574440@rob.eddelbuettel.com>
 <26218.62344.708682.22736@stat.math.ethz.ch>
Message-ID: <26218.62876.585076.819818@rob.eddelbuettel.com>


On 13 June 2024 at 15:26, Martin Maechler wrote:
| >>>>> Dirk Eddelbuettel 
| >>>>>     on Thu, 13 Jun 2024 07:20:00 -0500 writes:
| 
|     > I had a very routine CI job fail twice this morning on r-devel on Windows;
|     > the package (in fine standard form) doesn't even install under win-builder
|     > r-devel. Whereas on Linux with r86731 everything is peachy.
| 
|     > Dirk
| 
| There was a texinfo typo for a while which Prof Brian Ripley
| fixed in r86729.
| 
| Hence r86731 is fine on Windows, too, at least when I look at
| the R contributor svn dashboard  (provided thanks to Jeroen Ooms):
|     https://contributor.r-project.org/svn-dashboard/

This ran twice, and blew up both times in a spot where it is 'impossible to
blow up where it did' (line 183) 
  https://github.com/TileDB-Inc/TileDB-R/actions/runs/9498253355/job/26179179289
Note that r-release ran fine on the same commit.

Ditto with this win-builder r-devel build _not even installing_
  https://win-builder.r-project.org/SNSy1J8W8H8b

The package now also errors on r-devel-linux-x86_64-debian-gcc and was fine
days ago (as we just uploaded that release last week). 

Neither one of these errors has, as best as I can tell, anything to do with
texinfo, as you brought that up.

Anyway, I just disabled r-devel in the CI matrix for now and will revisit in
a few days.  As I wrote, it works here (as I wrote) under '2024-06-13 r86731'.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Jun 13 15:26:32 2024
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 13 Jun 2024 15:26:32 +0200
Subject: [Rd] R-devel on Windows temporarily broken?
In-Reply-To: <26218.58352.92640.574440@rob.eddelbuettel.com>
References: <26218.58352.92640.574440@rob.eddelbuettel.com>
Message-ID: <26218.62344.708682.22736@stat.math.ethz.ch>

>>>>> Dirk Eddelbuettel 
>>>>>     on Thu, 13 Jun 2024 07:20:00 -0500 writes:

    > I had a very routine CI job fail twice this morning on r-devel on Windows;
    > the package (in fine standard form) doesn't even install under win-builder
    > r-devel. Whereas on Linux with r86731 everything is peachy.

    > Dirk

There was a texinfo typo for a while which Prof Brian Ripley
fixed in r86729.

Hence r86731 is fine on Windows, too, at least when I look at
the R contributor svn dashboard  (provided thanks to Jeroen Ooms):
    https://contributor.r-project.org/svn-dashboard/


From pd@|gd @end|ng |rom gm@||@com  Fri Jun 14 09:58:58 2024
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 14 Jun 2024 09:58:58 +0200
Subject: [Rd] R 4.4.1 is released
Message-ID: <0C27FF17-6635-4898-A480-BFCCAA4AB177@gmail.com>

The build system rolled up R-4.4.1.tar.gz (codename "Race for Your Life") this morning.

===============================================================================
This release is dedicated to the memory of Friedrich (Fritz) Leisch, 1968-2024.
===============================================================================

This is a minor update, with a few bug fixes.

The list below details the changes in this release. 

You can get the source code from

https://cran.r-project.org/src/base/R-4/R-4.4.1.tar.gz
https://cran.r-project.org/src/base/R-4/R-4.4.1.tar.xz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course. 
(The Mac binaries will be delayed for a couple of days because the maintainer is traveling.)



For the R Core Team,

Peter Dalgaard


These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = 0ba932825aefae5566dc44822916b266
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = b3c330c22effc753f0b6fdf3a9612ff5
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = 3b5b817ed476957d84b35984fd1aaa40
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = f8466e418dec6b958b4ce484a13f9a9d
MD5 (NEWS.2) = b38d94569700664205a76a7de836ba83
MD5 (NEWS.3) = 307e75ba323c08b8694f916e45886aa4
MD5 (R-latest.tar.gz) = cfe520ea9fbca4f3c3d8462aaee7af46
MD5 (R-latest.tar.xz) = 7e8bce91f0ed90931cf9b73d6ac64aeb
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = a79b9b338cab09bd665f6b62ac6f455b
MD5 (THANKS) = 45b6d2e88a6ecb5b24fa33a781351cd5
MD5 (VERSION-INFO.dcf) = d52fde03caf726a4339a6079911a80e7
MD5 (R-4/R-4.4.1.tar.gz) = cfe520ea9fbca4f3c3d8462aaee7af46
MD5 (R-4/R-4.4.1.tar.xz) = 7e8bce91f0ed90931cf9b73d6ac64aeb

4cc9dcdfa46a2e2cff45c27df8f3a9f851ec97b44b8647ab8a9fbf844f37937f  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
f7703fe28f81edc79b4201665d69b5b41fda4241e832a03acaf7c2cafdf5f939  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
59232c66854ee8e09f215a71f5a532ab23422a653a90196b5c1af744ce0c6053  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
602f3a40ef759c7b2a6c485a33dc674af34249644ac5fb53b21283d4e12e808d  NEWS.1
cde079b6beab7d700d3d4ecda494e2681ad3b7f8fab13b68be090f949393ec62  NEWS.2
05f3f9fc664b845bb3dcc6492503860df72c63b3f179ab241c095e25bb7628f9  NEWS.3
b4cb675deaaeb7299d3b265d218cde43f192951ce5b89b7bb1a5148a36b2d94d  R-latest.tar.gz
fbd755314a5cc08c57aabff839ff791fb43a9052a2c6524ec3be96075fd34dde  R-latest.tar.xz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
8b7d3856100220f4555d4d57140829f2e81c27eccec5b441f5dce616e9ec9061  RESOURCES
8319c5415de58ee10d4bc058d79c370fd8e6b2ad09e25d7a1e04b74ca5f380a6  THANKS
74f11ad0053b5a7b2a3a8eccebcd58dfce69d61980b937966687710ab0d77dae  VERSION-INFO.dcf
b4cb675deaaeb7299d3b265d218cde43f192951ce5b89b7bb1a5148a36b2d94d  R-4/R-4.4.1.tar.gz
fbd755314a5cc08c57aabff839ff791fb43a9052a2c6524ec3be96075fd34dde  R-4/R-4.4.1.tar.xz


This is the relevant part of the NEWS file

CHANGES IN R 4.4.1:

  C-LEVEL FACILITIES:

    * Functions R_atof and R_strtod declared in header R_ext/Utils.h
      are now documented in 'Writing R Extensions' and so formally part
      of the API.

    * The non-API entry points Rf_setSVector, Rf_StringFalse,
      Rf_StringTrue and Rf_isBlankString have been added to those
      reported by R CMD check.

    * The new function Rf_allocLang is now available. This provides an
      alternative to the idiom of calling Rf_allocList followed by
      SET_TYPEOF.

  UTILITIES:

    * R CMD check now reports as warnings what gfortran calls 'Fortran
      2018 deleted features', all of which have long been marked as
      'obsolescent' and some of which were deleted in Fortran 2008 or
      earlier.  Fortran compilers are no longer required to support
      these.

  BUG FIXES:

    * as.numeric(), scan(), type.convert() and other places which use
      the internal C function R_strtod now require a _non-empty_ digit
      sequence in a decimal or binary exponent.  This aligns with the
      C/POSIX standard for strtod and with ?NumericConstants.

    * as.data.frame(m, make.names=NA) now works correctly for a matrix
      m with NA's in row names.

    * The error message from <POSIXlt>[["hour"]] and similar now
      mentions *[[, "hour"]], as wished for in PR#17409 and proposed by
      Michael Chirico.

    * qbinom() and potentially qpois(), qnbinom(), no longer sometimes
      fail accurate inversion (of pbinom(), etc), thanks to Christopher
      Chang's report and patch in PR#18711.

    * The internal help server on Windows can again serve requests sent
      in quick succession, fixing a regression in R 4.4.0.

    * debugcall(<S3Generic>()) now also works when a corresponding
      S4-generic version is in the methods cache (PR#18143).

    * Package tools' toTitleCase(ch0) now returns character(0) when ch0
      is of zero length; fixing PR#18724, reported by David Hugh Jones.

    * R CMD check is no longer broken (without a check result and no
      explanation in 00check.log) for a package which declares an
      invalid VignetteBuilder in DESCRIPTION but has no vignettes.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From therne@u @end|ng |rom m@yo@edu  Sat Jun 15 04:04:31 2024
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Sat, 15 Jun 2024 02:04:31 +0000
Subject: [Rd] Hard crash of lme4 in R-devel
Message-ID: <f50ddc$mda1i3@ironport10.mayo.edu>

I ran across this by accident when working up an example.    It uses a data set from the survival package, but nothing else from there.  Fails on the Intel machine shown below, and on a virtual linux instance on a newer Mac.

Terry

> library(survival)
> library(lme4)
Loading required package: Matrix
> sessionInfo()
R Under development (unstable) (2024-06-14 r86747)
Platform: aarch64-unknown-linux-gnu
Running under: Ubuntu 22.04.4 LTS

Matrix products: default
BLAS:   /usr/local/src/R-devel/lib/libRblas.so
LAPACK: /usr/lib/aarch64-linux-gnu/lapack/liblapack.so.3.10.0

locale:
[1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8
 [4] LC_COLLATE=C           LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8
 [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C
[10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C

time zone: America/Chicago
tzcode source: system (glibc)

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] lme4_1.1-35.1  Matrix_1.7-0   survival_3.6-6

loaded via a namespace (and not attached):
[1] minqa_1.2.5    MASS_7.3-60.2  compiler_4.5.0 Rcpp_1.0.11    splines_4.5.0
 [6] nlme_3.1-164   grid_4.5.0     nloptr_2.0.3   boot_1.3-30    lattice_0.22-6
>
> # Create a data set of all PBC subjects with 4 or more values
> count <- table(pbcseq$id)
> data4 <- subset(pbcseq, id %in% names(count)[count>3])
> data4$year <- data4$day/365.25
>
> fit <- lmer(log(bili) ~ year + (1+year | id), data4)

-- more lines than I can capture --

= NULL, verbose = 0L,     control = list(optimizer = "nloptwrap", restart_edge = TRUE,         boundary.tol = 1e-05, calc.derivs = TRUE, use.last.params = FALSE,         checkControl = list(check.nobs.vs.rankZ = "ignore", check.nobs.vs.nlev = "stop",             check.nlev.gtreq.5 = "ignore", check.nlev.gtr.1 = "stop",             check.nobs.vs.nRE = "stop", check.rankX = "message+drop.cols",             check.scaleX = "warning", check.formula.LHS = "stop"),         checkConv = list(check.conv.grad = list(action = "warning",             tol = 0.002, relTol = NULL), check.conv.singular = list(            action = "message", tol = 1e-04), check.conv.hess = list(            action = "warning", tol = 1e-06)), optCtrl = list()))
10: do.call(mkLmerDevfun, c(lmod, list(start = start, verbose = verbose,     control = control)))
11: lmer(log(bili) ~ year + (1 + year | id), data4)

Possible actions:
1: abort (with core dump, if enabled)
2: normal R exit
3: exit R without saving workspace
4: exit R saving workspace
Selection:


	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Sat Jun 15 09:06:43 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Sat, 15 Jun 2024 10:06:43 +0300
Subject: [Rd] Hard crash of lme4 in R-devel
In-Reply-To: <f50ddc$mda1i3@ironport10.mayo.edu>
References: <f50ddc$mda1i3@ironport10.mayo.edu>
Message-ID: <20240615100643.7d37ad60@trisector>

? Sat, 15 Jun 2024 02:04:31 +0000
"Therneau, Terry M., Ph.D. via R-devel" <r-devel at r-project.org> ?????:

> other attached packages:
> [1] lme4_1.1-35.1  Matrix_1.7-0 

I see you have a new Matrix (1.7-0 from 2024-04-26 with a new ABI) but
an older lme4 (1.1-35.1 from 2023-11-05).

I reproduced the crash and the giant backtrace by first installing
latest lme4 and then updating Matrix. With the latest version of lme4,
this results in a warning:

library(lme4)
# Loading required package: Matrix
# Warning message:
# In check_dep_version() : ABI version mismatch:
# lme4 was built with Matrix ABI version 1
# Current Matrix ABI version is 2
# Please re-install lme4 from source or restore original 'Matrix'
# package

The version of lme4 that you have installed doesn't have this check
because it only appeared in March 2024:
https://github.com/lme4/lme4/commit/8be641b7a1fd5b6e6ac962552add13e29bb5ff5b

The crash should go away if you update or at least reinstall lme4 from
source.

-- 
Best regards,
Ivan


From therne@u @end|ng |rom m@yo@edu  Sat Jun 15 15:12:51 2024
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Sat, 15 Jun 2024 08:12:51 -0500
Subject: [Rd] [EXTERNAL] Re:  Hard crash of lme4 in R-devel
In-Reply-To: <20240615100643.7d37ad60@trisector>
References: <f50ddc$mda1i3@ironport10.mayo.edu>
 <20240615100643.7d37ad60@trisector>
Message-ID: <f50ddc$mdavq3@ironport10.mayo.edu>

Thank you.? An update of lme4 fixed the issue.? No warning, no crash.

On 6/15/24 2:06 AM, Ivan Krylov wrote:
> ? Sat, 15 Jun 2024 02:04:31 +0000
> "Therneau, Terry M., Ph.D. via R-devel" <r-devel at r-project.org> ?????:
>
>> other attached packages:
>> [1] lme4_1.1-35.1  Matrix_1.7-0
> I see you have a new Matrix (1.7-0 from 2024-04-26 with a new ABI) but
> an older lme4 (1.1-35.1 from 2023-11-05).
>
> I reproduced the crash and the giant backtrace by first installing
> latest lme4 and then updating Matrix. With the latest version of lme4,
> this results in a warning:
>
> library(lme4)
> # Loading required package: Matrix
> # Warning message:
> # In check_dep_version() : ABI version mismatch:
> # lme4 was built with Matrix ABI version 1
> # Current Matrix ABI version is 2
> # Please re-install lme4 from source or restore original 'Matrix'
> # package
>
> The version of lme4 that you have installed doesn't have this check
> because it only appeared in March 2024:
> https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Flme4%2Flme4%2Fcommit%2F8be641b7a1fd5b6e6ac962552add13e29bb5ff5b&data=05%7C02%7Ctherneau%40mayo.edu%7C2a013c76b6014f6962c108dc8d09bfe2%7Ca25fff9c3f634fb29a8ad9bdd0321f9a%7C0%7C0%7C638540320365706612%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C60000%7C%7C%7C&sdata=3OfJDIvrciY0w0uI0W0KT%2BfPfgezqsmOHPD1R2Gynyo%3D&reserved=0
>
> The crash should go away if you update or at least reinstall lme4 from
> source.
>


From edd @end|ng |rom deb|@n@org  Mon Jun 17 00:36:45 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sun, 16 Jun 2024 17:36:45 -0500
Subject: [Rd] R-devel on Windows temporarily broken?
In-Reply-To: <26218.62876.585076.819818@rob.eddelbuettel.com>
References: <26218.58352.92640.574440@rob.eddelbuettel.com>
 <26218.62344.708682.22736@stat.math.ethz.ch>
 <26218.62876.585076.819818@rob.eddelbuettel.com>
Message-ID: <26223.26877.125782.827168@rob.eddelbuettel.com>


To bring closure to this thread, everything is back to normal at both the CRAN
machine that balked as well as at windows r-devel.

Thanks,  Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Jun 18 16:08:40 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 18 Jun 2024 09:08:40 -0500 (CDT)
Subject: [Rd] clarifying and adjusting the C API for R
In-Reply-To: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
References: <5a1ccb59-3e90-31eb-132a-35c3a1839bbf@uiowa.edu>
Message-ID: <9e851ac9-c93e-fd75-f5ae-b117756ab6f@uiowa.edu>

Another quick update:

Over 100 entry points used in packages for which it was safe to do so
have now been marked as part of an API (in some cases after adding
error checking of arguments). These can be used in package C code,
with caveats for ones considered experimental or intended for embedded
use.

The remaining 100 or so non-API entry points used in packages will
require changes in package C code. In some cases the API already
provides safe alternatives to unsafe internal entry points.  In most
other cases it should be possible to develop safer interfaces that
allow packages to accomplish what they need to do in a more robust
way, while giving R maintainers and developers the freedom to make
needed internal changes without disrupting package space.

It will take some time to develop these new interfaces. 'Writing R
extensions' now has a new section 'Moving into C API compliance' that
should help with adapting to these changes.

Best,

luke

On Thu, 6 Jun 2024, luke-tierney at uiowa.edu wrote:

> This is an update on some current work on the C API for use in R
> extensions.
>
> The internal R implementation makes use of tens of thousands of C
> entry points. On Linux and Windows, which support visibility
> restrictions, most of these are visible only within the R executble or
> shared library. About 1500 are not hidden and are visible to
> dynamically loaded shared libraries, such as ones in packages, and to
> embedding applications.
>
> There are two main reasons for limiting access to entry points in a
> software framework:
>
> - Some entry points are very easy to use in ways that corrupt internal
>  data, leading to segfaults or, worse, incorrect computations without
>  segfaults.
>
> - Some entry point expose internal structure and other implementation
>  details, which makes it hard to make improvements without breaking
>  client code that has come to depend on these details.
>
> The API of C entry points that can be used in R extensions, both for
> packages and embedding, has evolved organically over many years. The
> definition for the current release expressed in the Writing R
> Extensions manual (WRE) is roughly:
>
>    An entry point can be used if (1) it is declared in a header file
>    in R.home("include"), and (2) if it is documented for use in WRE.
>
> Ideally, (1) would be necessary and sufficient, but for a variety of
> reasons that isn't achievable, at least not in the near term. (2) can
> be challenging to determine; in particular, it is not amenable to a
> computational answer.
>
> An experimental effort is underway to add annotations to the WRE
> Texinfo source to allow (2) to be answered unambiguously. The
> annotations so far mostly reflect my reading or WRE and may be revised
> as they are reviewed by others. The annotated document can be used for
> programmatically identifying what is currently considered part of the C
> API. The result so far is an experimental function tools:::funAPI():
>
>    > head(tools:::funAPI())
> 		     name                    loc apitype
>    1 Rf_AdobeSymbol2utf8 R_ext/GraphicsDevice.h    eapi
>    2        alloc3DArray                    WRE     api
>    3          allocArray                    WRE     api
>    4           allocLang                    WRE     api
>    5           allocList                    WRE     api
>    6         allocMatrix                    WRE     api
>
> The 'apitype' field has three possible levels
>
>    | api  | stable (ideally) API |
>    | eapi | experimental API     |
>    | emb  | embedding API        |
>
> Entry points in the embedded API would typically only be used in
> applications embedding R or providing new front ends, but might be
> reasonable to use in packages that support embedding.
>
> The 'loc' field indicates how the entry point is identified as part of
> an API: explicit mention in WRE, or declaration in a header file
> identified as fully part of an API.
>
> [tools:::funAPI() may not be completely accurate as it relies on
> regular expressions for examining header files considered part of the
> API rather than proper parsing. But it seems to be pretty close to
> what can be achieved with proper parsing.  Proper parsing would add
> dependencies on additional tools, which I would like to avoid for
> now. One dependency already present is that a C compiler has to be on
> the search path and cc -E has to run the C pre-processor.]
>
> Two additional experimental functions are available for analyzing
> package compliance: tools:::checkPkgAPI and tools:::checkAllPkgsAPI.
> These examine installed packages.
>
> [These may produce some false positives on macOS; they may or may not
> work on Windows at this point.]
>
> Using these tools initially showed around 200 non-API entry points
> used across packages on CRAN and BIOC. Ideally this number should be
> reduced to zero. This will require a combination of additions to the
> API and changes in packages.
>
> Some entry points can safely be added to the API. Around 40 have
> already been added to WRE with API annotations; another 40 or so can
> probably be added after review.
>
> The remainder mostly fall into two groups:
>
> - Entry points that should never be used in packages, such as
>  SET_OBJECT or SETLENGTH (or any non-API SETXYZ functions for that
>  matter) that can create inconsistent or corrupt internal state.
>
> - Entry points that depend on the existence of internal structure that
>  might be subject to change, such as the existence of promise objects
>  or internal structure of environments.
>
> Many, if not most, of these seem to be used in idioms that can either
> be accomplished with existing higher-level functions already in the
> API, or by new higher level functions that can be created and
> added. Working through these will take some time and coordination
> between R-core and maintainers of affected packages.
>
> Once things have gelled a bit more I hope to turn this into a blog
> post that will include some examples of moving non-API entry point
> uses into compliance.
>
> Best,
>
> luke
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From rhe|p @end|ng |rom eoo@@dd@@n|  Wed Jun 19 09:52:20 2024
From: rhe|p @end|ng |rom eoo@@dd@@n| (Jan van der Laan)
Date: Wed, 19 Jun 2024 09:52:20 +0200
Subject: [Rd] Large vector support in data.frames
Message-ID: <b3c5fa5d-1ef0-4c39-a9a9-a86e198059f9@eoos.dds.nl>


What is the status of supporting long vectors in data.frames (e.g. 
data.frames with more than 2^31 records)? Is this something that is 
being worked on? Is there a time line for this? Is this something I can 
contribute to?

I now regularly work with datasets with more than 2^31 records and not 
being able to use data.frames is frustrating sometimes. I tried looking 
for information on this, but I probably looked in the wrong places 
and/or used the wrong search terms, and I could not find any information 
on this.

Best,
Jan


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Jun 19 21:11:36 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 19 Jun 2024 14:11:36 -0500 (CDT)
Subject: [Rd] non-API entry point Rf_findVarInFrame3 will be removed
Message-ID: <b81c241d-e20-34c2-642a-2ea390314db2@uiowa.edu>

The non-API entry point Rf_findVarInFrame3 used by some packages will
be removed as it is not needed in one use case and not working as
intended in the other.

The most common use case, Rf_findVarInFrame3(rho, sym, TRUE), is
equivalent to the simpler Rf_findVarInFrame(rho, sym).

The less common use case is to test for existence of a binding with

     findVarInFrame(rho, sym, FALSE) != R_UnboundValue

The intent is that this have no side effects, but that is not the
case: if the binding exists and is an active binding, then its
function will be called to produce a value. This usage should be
replaced with R_existsVarInFrame(rho, sym).

R_existsVarInFrame has been marked as part of the experimental API.
It is not yet clear whether Rf_findVarInFrame will become part of an
API.  If it does, then its semantics will likely have to change; if it
does not, an alternate interface will be provided.

Best,

luke


-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From er|nm@hodge@@ @end|ng |rom gm@||@com  Thu Jun 20 23:26:11 2024
From: er|nm@hodge@@ @end|ng |rom gm@||@com (Erin Hodgess)
Date: Thu, 20 Jun 2024 15:26:11 -0600
Subject: [Rd] A question about building a package with 2 different types of
 programs
Message-ID: <CACxE24mBNw8ddMcO9Dn1zuDyARkEQ3GHH5U_Kv0b-tMHwfe+-w@mail.gmail.com>

Hello everyone:

Hope you?re having a good week.

I am in the process of building a package for some time series functions.
Ideally, I would like to have a setup that runs a CUDA Fortran program
(which requires an NVIDIA graphics card), and an Open MP version for no
NVIDIA.  Is that possible, please?

I have put together packages that require the NVIDIA but never one that
lets the users select an option.

Thank you for your help.

Sincerely,
Erin

Erin Hodgess, PhD
mailto: erinm.hodgess at gmail.com

	[[alternative HTML version deleted]]


From D@v|d@McArthur@2 @end|ng |rom g|@@gow@@c@uk  Tue Jun 25 11:42:59 2024
From: D@v|d@McArthur@2 @end|ng |rom g|@@gow@@c@uk (David McArthur)
Date: Tue, 25 Jun 2024 09:42:59 +0000
Subject: [Rd] Creating a text-based device/output format
Message-ID: <CWLP302MB034975D5EFA31892D896E1F3CAD52@CWLP302MB0349.GBRP302.PROD.OUTLOOK.COM>

Hi there, I hope I am sending this message to the right list.

This is a ?where should I start?? type question.

I am a JavaScript developer, working on ideas for more accessible Maths and Stats coursework.  I have worked with RMarkdown and knitr extensively to create HTML coursework but I?m by no means an R developer!

I recently came across a project called mermaid.js, which is designed for diagrams but has limited charting syntax:
https://mermaid.js.org/syntax/xyChart.html

This project aims to have plain text representation of graphics in markdown files, which when converted to HTML (either at compile time or at runtime), can turn these ?mermaid? code blocks into a diagram/plot via a JavaScript parser and plotting library.

This has inspired me to attempt to create a proof-of-concept for R along these lines.

For example this R code:

library(ggplot2)
library(palmerpenguins)

ggplot(data, aes(x=body_mass_g,fill = species)) +
  geom _histogram()

Could output something like:

title "The body mass (g) of penguin species"
x-axis "Body mass (g)" 3000 --> 5550
y-axis "Count" 0 --> 2
histogram
  Adelie [3000, 3250, 3400]
  ChinStrap [3250, 3600]
  Gentoo [4300, 5050, 5200, 5300, 5450]

How should I go about this in R?  I feel I should be aiming to create a new ?device? or ?output format?, but I haven?t found any examples on how to do this.

One of my colleagues suggested I hook into ggplot_build, but then of course the project would be limited to ggplot plots.

Any help greatly appreciated ?

Thanks,

David McArthur
School of Mathematics & Statistics
University of Glasgow

	[[alternative HTML version deleted]]


From m@tthew@||d|er @end|ng |rom gm@||@com  Tue Jun 25 11:25:19 2024
From: m@tthew@||d|er @end|ng |rom gm@||@com (Matthew Fidler)
Date: Tue, 25 Jun 2024 11:25:19 +0200
Subject: [Rd] SET_TYPEOF no longer allowed,
 how should I call R from within C?
Message-ID: <CAOmN8O77YVnWF0V4f9xt9u20pgL-him29WrdOkfR0bVE7EZ5vA@mail.gmail.com>

Hi,

I have adapted code to run R from within C from the writing R extensions
here

https://colinfay.me/writing-r-extensions/system-and-foreign-language-interfaces.html

As a more comprehensive example of constructing an R call in C code and
evaluating, consider the following fragment of printAttributes in
src/main/print.c.

    /* Need to construct a call to

       print(CAR(a), digits=digits)

       based on the R_print structure, then eval(call, env).

       See do_docall for the template for this sort of thing.

    */

    SEXP s, t;

    t = s = PROTECT(allocList(3));

    SET_TYPEOF(s, LANGSXP);

    SETCAR(t, install("print")); t = CDR(t);

    SETCAR(t, CAR(a)); t = CDR(t);

    SETCAR(t, ScalarInteger(digits));

    SET_TAG(t, install("digits"));

    eval(s, env);

    UNPROTECT(1);

At this point CAR(a) is the R object to be printed, the current attribute.
There are three steps: the call is constructed as a pairlist of length 3,
the list is filled in, and the expression represented by the pairlist is
evaluated.

A pairlist is quite distinct from a generic vector list, the only
user-visible form of list in R. A pairlist is a linked list (with CDR(t)
computing the next entry), with items (accessed by CAR(t)) and names or
tags (set by SET_TAG). In this call there are to be three items, a symbol
(pointing to the function to be called) and two argument values, the first
unnamed and the second named. Setting the type to LANGSXP makes this a call
which can be evaluated.



New checks  tells me that this is no longer allowed since it was not part
of the public api any longer.


So, how does one call R from C then?

Also should the writing R extensions be updated with the new approved
approach?


Thanks in advance.

Matt

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Jun 25 14:35:38 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 25 Jun 2024 14:35:38 +0200
Subject: [Rd] SET_TYPEOF no longer allowed,
 how should I call R from within C?
In-Reply-To: <CAOmN8O77YVnWF0V4f9xt9u20pgL-him29WrdOkfR0bVE7EZ5vA@mail.gmail.com>
References: <CAOmN8O77YVnWF0V4f9xt9u20pgL-him29WrdOkfR0bVE7EZ5vA@mail.gmail.com>
Message-ID: <c2b8e0c9-916a-4c71-a5d3-3090d682378e@gmail.com>


On 6/25/24 11:25, Matthew Fidler wrote:
> Hi,
>
> I have adapted code to run R from within C from the writing R extensions
> here
>
> https://colinfay.me/writing-r-extensions/system-and-foreign-language-interfaces.html
>
> As a more comprehensive example of constructing an R call in C code and
> evaluating, consider the following fragment of printAttributes in
> src/main/print.c.
>
>      /* Need to construct a call to
>
>         print(CAR(a), digits=digits)
>
>         based on the R_print structure, then eval(call, env).
>
>         See do_docall for the template for this sort of thing.
>
>      */
>
>      SEXP s, t;
>
>      t = s = PROTECT(allocList(3));
>
>      SET_TYPEOF(s, LANGSXP);
>
>      SETCAR(t, install("print")); t = CDR(t);
>
>      SETCAR(t, CAR(a)); t = CDR(t);
>
>      SETCAR(t, ScalarInteger(digits));
>
>      SET_TAG(t, install("digits"));
>
>      eval(s, env);
>
>      UNPROTECT(1);
>
> At this point CAR(a) is the R object to be printed, the current attribute.
> There are three steps: the call is constructed as a pairlist of length 3,
> the list is filled in, and the expression represented by the pairlist is
> evaluated.
>
> A pairlist is quite distinct from a generic vector list, the only
> user-visible form of list in R. A pairlist is a linked list (with CDR(t)
> computing the next entry), with items (accessed by CAR(t)) and names or
> tags (set by SET_TAG). In this call there are to be three items, a symbol
> (pointing to the function to be called) and two argument values, the first
> unnamed and the second named. Setting the type to LANGSXP makes this a call
> which can be evaluated.
>
>
>
> New checks  tells me that this is no longer allowed since it was not part
> of the public api any longer.
>
>
> So, how does one call R from C then?
>
> Also should the writing R extensions be updated with the new approved
> approach?

Please check the current Writing R Extensions from the official 
location. It has an updated version of the example using allocLang.

https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Evaluating-R-expressions-from-C
https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#Evaluating-R-expressions-from-C

Best
Tomas

>
>
> Thanks in advance.
>
> Matt
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From er|cjberger @end|ng |rom gm@||@com  Tue Jun 25 14:42:15 2024
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Tue, 25 Jun 2024 15:42:15 +0300
Subject: [Rd] Creating a text-based device/output format
In-Reply-To: <CWLP302MB034975D5EFA31892D896E1F3CAD52@CWLP302MB0349.GBRP302.PROD.OUTLOOK.COM>
References: <CWLP302MB034975D5EFA31892D896E1F3CAD52@CWLP302MB0349.GBRP302.PROD.OUTLOOK.COM>
Message-ID: <CAGgJW74QK-AgWnCS8+wA4cUxiQODR3rteWhaFqhGFWEV82toBg@mail.gmail.com>

You might get more/additional feedback from the r-help list:

r-help at r-project.org


On Tue, Jun 25, 2024 at 2:18?PM David McArthur <
David.McArthur.2 at glasgow.ac.uk> wrote:

> Hi there, I hope I am sending this message to the right list.
>
> This is a ?where should I start?? type question.
>
> I am a JavaScript developer, working on ideas for more accessible Maths
> and Stats coursework.  I have worked with RMarkdown and knitr extensively
> to create HTML coursework but I?m by no means an R developer!
>
> I recently came across a project called mermaid.js, which is designed for
> diagrams but has limited charting syntax:
> https://mermaid.js.org/syntax/xyChart.html
>
> This project aims to have plain text representation of graphics in
> markdown files, which when converted to HTML (either at compile time or at
> runtime), can turn these ?mermaid? code blocks into a diagram/plot via a
> JavaScript parser and plotting library.
>
> This has inspired me to attempt to create a proof-of-concept for R along
> these lines.
>
> For example this R code:
>
> library(ggplot2)
> library(palmerpenguins)
>
> ggplot(data, aes(x=body_mass_g,fill = species)) +
>   geom _histogram()
>
> Could output something like:
>
> title "The body mass (g) of penguin species"
> x-axis "Body mass (g)" 3000 --> 5550
> y-axis "Count" 0 --> 2
> histogram
>   Adelie [3000, 3250, 3400]
>   ChinStrap [3250, 3600]
>   Gentoo [4300, 5050, 5200, 5300, 5450]
>
> How should I go about this in R?  I feel I should be aiming to create a
> new ?device? or ?output format?, but I haven?t found any examples on how to
> do this.
>
> One of my colleagues suggested I hook into ggplot_build, but then of
> course the project would be limited to ggplot plots.
>
> Any help greatly appreciated ?
>
> Thanks,
>
> David McArthur
> School of Mathematics & Statistics
> University of Glasgow
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Tue Jun 25 15:23:25 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Tue, 25 Jun 2024 16:23:25 +0300
Subject: [Rd] Creating a text-based device/output format
In-Reply-To: <CWLP302MB034975D5EFA31892D896E1F3CAD52@CWLP302MB0349.GBRP302.PROD.OUTLOOK.COM>
References: <CWLP302MB034975D5EFA31892D896E1F3CAD52@CWLP302MB0349.GBRP302.PROD.OUTLOOK.COM>
Message-ID: <20240625162325.0abfa9d9@arachnoid>

? Tue, 25 Jun 2024 09:42:59 +0000
David McArthur <David.McArthur.2 at glasgow.ac.uk> ?????:

> ggplot(data, aes(x=body_mass_g,fill = species)) +
>   geom _histogram()
> 
> Could output something like:
> 
> title "The body mass (g) of penguin species"
> x-axis "Body mass (g)" 3000 --> 5550
> y-axis "Count" 0 --> 2
> histogram
>   Adelie [3000, 3250, 3400]
>   ChinStrap [3250, 3600]
>   Gentoo [4300, 5050, 5200, 5300, 5450]
> 
> How should I go about this in R?

R graphics devices are very low-level:
https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Graphics-devices

Instead of drawing histograms, they are asked to draw points, lines,
polygons, and text. If you're curious what it's like to implement such
a device, packages such as 'devEMF' and 'ragg' will provide examples.

You could instead go the 'txtplot' route and implement your own
functions that would return text in mermaid syntax, unrelated to
existing plotting engines. An alternative would be to carefully
deconstruct 'ggplot2' and 'lattice' objects and translate what you can
into mermaid diagrams, but that will always be limited to the
intersection of the source and target featuresets.

-- 
Best regards,
Ivan


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Tue Jun 25 15:24:05 2024
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Tue, 25 Jun 2024 14:24:05 +0100
Subject: [Rd] Creating a text-based device/output format
In-Reply-To: <CWLP302MB034975D5EFA31892D896E1F3CAD52@CWLP302MB0349.GBRP302.PROD.OUTLOOK.COM>
References: <CWLP302MB034975D5EFA31892D896E1F3CAD52@CWLP302MB0349.GBRP302.PROD.OUTLOOK.COM>
Message-ID: <cdfd6f76-4d50-4de6-bccb-4b2d5f2c10be@stats.ox.ac.uk>

On 25/06/2024 10:42, David McArthur wrote:
> Hi there, I hope I am sending this message to the right list.

This or r-package-devel.

> This is a ?where should I start?? type question.

With the R-Internals manual and the grDevices sources and the examples 
there.

Another possibility is to translate one of the several 'text-based' 
graphics formats already supported, including

postscript
ASCII PDF
svg
xfig
pictex

and others in packages (R2SWF devEMF httpgd tikzDevice ...).

The quality of R graphics depends heavily on the precise positioning of 
(possibly non-ASCII) text, and so font-handling is by far the hardest 
part of writing a graphics device (and I have written several). So it 
makes sense to leverage what is already done, by modifying sources or 
translating output.  This would have been easier if graphics standards 
and R-at-the-time supported UTF-8, and the lack of such support is why 
some of these have been deprecated.


> 
> I am a JavaScript developer, working on ideas for more accessible Maths and Stats coursework.  I have worked with RMarkdown and knitr extensively to create HTML coursework but I?m by no means an R developer!
> 
> I recently came across a project called mermaid.js, which is designed for diagrams but has limited charting syntax:
> https://mermaid.js.org/syntax/xyChart.html
> 
> This project aims to have plain text representation of graphics in markdown files, which when converted to HTML (either at compile time or at runtime), can turn these ?mermaid? code blocks into a diagram/plot via a JavaScript parser and plotting library.
> 
> This has inspired me to attempt to create a proof-of-concept for R along these lines.
> 
> For example this R code:
> 
> library(ggplot2)
> library(palmerpenguins)
> 
> ggplot(data, aes(x=body_mass_g,fill = species)) +
>    geom _histogram()
> 
> Could output something like:
> 
> title "The body mass (g) of penguin species"
> x-axis "Body mass (g)" 3000 --> 5550
> y-axis "Count" 0 --> 2
> histogram
>    Adelie [3000, 3250, 3400]
>    ChinStrap [3250, 3600]
>    Gentoo [4300, 5050, 5200, 5300, 5450]
> 
> How should I go about this in R?  I feel I should be aiming to create a new ?device? or ?output format?, but I haven?t found any examples on how to do this.
> 
> One of my colleagues suggested I hook into ggplot_build, but then of course the project would be limited to ggplot plots.
> 
> Any help greatly appreciated ?
> 
> Thanks,
> 
> David McArthur
> School of Mathematics & Statistics
> University of Glasgow
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From jo@|@h@p@rry @end|ng |rom gm@||@com  Tue Jun 25 15:37:06 2024
From: jo@|@h@p@rry @end|ng |rom gm@||@com (Josiah Parry)
Date: Tue, 25 Jun 2024 09:37:06 -0400
Subject: [Rd] Non-API updates
Message-ID: <CAL3ufUJtix-Qi0DbnJWR-_hVSwb3nuh08qH4rjgzF8KAsUhZcg@mail.gmail.com>

Hey folks,

I'm sure many of you all woke to the same message I did: "Please correct
before 2024-07-09 to safely retain your package on CRAN" caused by Non-API
changes to CRAN.

This is quite unexpected as Luke Tierney's June 6th email writes (emphasis
mine):

 "An *experimental* *effort* is underway to add annotations to the WRE..."

"*Once things have gelled a bit more *I hope to turn this into a blog
post that will include some examples of moving non-API entry point
uses into compliance."

Since then there has not been any indication of stabilization of the
Non-API changes nor has there been a blog post outlining how to migrate. As
things have been coming and going from the Non-API changes for quite some
time now, we (the royal we, here) have been waiting for an official
announcement from CRAN on the stabilizing changes.

*Can we extend this very short notice to handle the Non-API changes before
removal from CRAN? *

In the case of the 3 packages I have to fix within 2 weeks, these are all
using Rust. These changes require upstream changes to the extendr library.
There are other packages that are also affected here. Making these changes
is a delicate act and requires care and focus. All of the extendr
developers work full time and cannot make addressing these changes their
only priority for the next 2 weeks.

Additionally, a blog post with "examples of moving non-API entry point uses
into compliance" would be very helpful in this endeavor.

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Jun 25 15:57:34 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 25 Jun 2024 09:57:34 -0400
Subject: [Rd] SET_TYPEOF no longer allowed,
 how should I call R from within C?
In-Reply-To: <CAOmN8O77YVnWF0V4f9xt9u20pgL-him29WrdOkfR0bVE7EZ5vA@mail.gmail.com>
References: <CAOmN8O77YVnWF0V4f9xt9u20pgL-him29WrdOkfR0bVE7EZ5vA@mail.gmail.com>
Message-ID: <9bf09121-7de1-4b7f-91a6-1784615331b5@gmail.com>

On 2024-06-25 5:25 a.m., Matthew Fidler wrote:
> Hi,
> 
> I have adapted code to run R from within C from the writing R extensions
> here
> 
> https://colinfay.me/writing-r-extensions/system-and-foreign-language-interfaces.html

That was written in 2017.  You should use the one that came with R, or 
even better, the one that comes with the development version of R.

Duncan Murdoch

> 
> As a more comprehensive example of constructing an R call in C code and
> evaluating, consider the following fragment of printAttributes in
> src/main/print.c.
> 
>      /* Need to construct a call to
> 
>         print(CAR(a), digits=digits)
> 
>         based on the R_print structure, then eval(call, env).
> 
>         See do_docall for the template for this sort of thing.
> 
>      */
> 
>      SEXP s, t;
> 
>      t = s = PROTECT(allocList(3));
> 
>      SET_TYPEOF(s, LANGSXP);
> 
>      SETCAR(t, install("print")); t = CDR(t);
> 
>      SETCAR(t, CAR(a)); t = CDR(t);
> 
>      SETCAR(t, ScalarInteger(digits));
> 
>      SET_TAG(t, install("digits"));
> 
>      eval(s, env);
> 
>      UNPROTECT(1);
> 
> At this point CAR(a) is the R object to be printed, the current attribute.
> There are three steps: the call is constructed as a pairlist of length 3,
> the list is filled in, and the expression represented by the pairlist is
> evaluated.
> 
> A pairlist is quite distinct from a generic vector list, the only
> user-visible form of list in R. A pairlist is a linked list (with CDR(t)
> computing the next entry), with items (accessed by CAR(t)) and names or
> tags (set by SET_TAG). In this call there are to be three items, a symbol
> (pointing to the function to be called) and two argument values, the first
> unnamed and the second named. Setting the type to LANGSXP makes this a call
> which can be evaluated.
> 
> 
> 
> New checks  tells me that this is no longer allowed since it was not part
> of the public api any longer.
> 
> 
> So, how does one call R from C then?
> 
> Also should the writing R extensions be updated with the new approved
> approach?
> 
> 
> Thanks in advance.
> 
> Matt
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From D@v|d@McArthur@2 @end|ng |rom g|@@gow@@c@uk  Tue Jun 25 17:42:38 2024
From: D@v|d@McArthur@2 @end|ng |rom g|@@gow@@c@uk (David McArthur)
Date: Tue, 25 Jun 2024 15:42:38 +0000
Subject: [Rd] Creating a text-based device/output format
In-Reply-To: <cdfd6f76-4d50-4de6-bccb-4b2d5f2c10be@stats.ox.ac.uk>
References: <CWLP302MB034975D5EFA31892D896E1F3CAD52@CWLP302MB0349.GBRP302.PROD.OUTLOOK.COM>
 <cdfd6f76-4d50-4de6-bccb-4b2d5f2c10be@stats.ox.ac.uk>
Message-ID: <CWLP302MB034925F497F1989062B4A42ACAD52@CWLP302MB0349.GBRP302.PROD.OUTLOOK.COM>

Many thanks for your reply, Brian.

Ivan has suggested an R device is probably not where I should aim to make this mermaid plain text syntax as by this point I would be dealing with shape primitives instead of, eg. a histogram and its values.  This makes sense to me, but if you have other ideas please let me know.

I?ll aim to write something to output mermaid-like syntax from ggplot2 as an initial experiment, probably in toml format for ease of serialising and parsing.  If this concept works, and I get feedback that it is a helpful addition to accessibility from visually impaired students in my research group, I?ll report back here with some demos.

Thanks again,

David McArthur
School of Mathematics & Statistics
University of Glasgow

From: Prof Brian Ripley <ripley at stats.ox.ac.uk>
Date: Tuesday, 25 June 2024 at 14:24
To: David McArthur <David.McArthur.2 at glasgow.ac.uk>, r-devel at r-project.org <r-devel at r-project.org>
Subject: Re: [Rd] Creating a text-based device/output format
On 25/06/2024 10:42, David McArthur wrote:
> Hi there, I hope I am sending this message to the right list.

This or r-package-devel.

> This is a ?where should I start?? type question.

With the R-Internals manual and the grDevices sources and the examples
there.

Another possibility is to translate one of the several 'text-based'
graphics formats already supported, including

postscript
ASCII PDF
svg
xfig
pictex

and others in packages (R2SWF devEMF httpgd tikzDevice ...).

The quality of R graphics depends heavily on the precise positioning of
(possibly non-ASCII) text, and so font-handling is by far the hardest
part of writing a graphics device (and I have written several). So it
makes sense to leverage what is already done, by modifying sources or
translating output.  This would have been easier if graphics standards
and R-at-the-time supported UTF-8, and the lack of such support is why
some of these have been deprecated.


>
> I am a JavaScript developer, working on ideas for more accessible Maths and Stats coursework.  I have worked with RMarkdown and knitr extensively to create HTML coursework but I?m by no means an R developer!
>
> I recently came across a project called mermaid.js, which is designed for diagrams but has limited charting syntax:
> https://eur03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fmermaid.js.org%2Fsyntax%2FxyChart.html&data=05%7C02%7CDavid.McArthur.2%40glasgow.ac.uk%7Cc73e08abcba743458fd708dc951a1786%7C6e725c29763a4f5081f22e254f0133c8%7C1%7C0%7C638549186500457747%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C0%7C%7C%7C&sdata=oHSSn%2BhGl7TFKT91TWsQB8MtDoSMplY8l8GJmv%2Bd8B4%3D&reserved=0<https://mermaid.js.org/syntax/xyChart.html>
>
> This project aims to have plain text representation of graphics in markdown files, which when converted to HTML (either at compile time or at runtime), can turn these ?mermaid? code blocks into a diagram/plot via a JavaScript parser and plotting library.
>
> This has inspired me to attempt to create a proof-of-concept for R along these lines.
>
> For example this R code:
>
> library(ggplot2)
> library(palmerpenguins)
>
> ggplot(data, aes(x=body_mass_g,fill = species)) +
>    geom _histogram()
>
> Could output something like:
>
> title "The body mass (g) of penguin species"
> x-axis "Body mass (g)" 3000 --> 5550
> y-axis "Count" 0 --> 2
> histogram
>    Adelie [3000, 3250, 3400]
>    ChinStrap [3250, 3600]
>    Gentoo [4300, 5050, 5200, 5300, 5450]
>
> How should I go about this in R?  I feel I should be aiming to create a new ?device? or ?output format?, but I haven?t found any examples on how to do this.
>
> One of my colleagues suggested I hook into ggplot_build, but then of course the project would be limited to ggplot plots.
>
> Any help greatly appreciated ?
>
> Thanks,
>
> David McArthur
> School of Mathematics & Statistics
> University of Glasgow
>
>        [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://eur03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&data=05%7C02%7CDavid.McArthur.2%40glasgow.ac.uk%7Cc73e08abcba743458fd708dc951a1786%7C6e725c29763a4f5081f22e254f0133c8%7C1%7C0%7C638549186500467131%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C0%7C%7C%7C&sdata=Km8OqjoWeDXhBsKild%2Brr4ZgRCId2nmZARzSItxkN7Y%3D&reserved=0<https://stat.ethz.ch/mailman/listinfo/r-devel>

--
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Jun 25 18:10:55 2024
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 25 Jun 2024 11:10:55 -0500 (CDT)
Subject: [Rd] [External]  Non-API updates
In-Reply-To: <CAL3ufUJtix-Qi0DbnJWR-_hVSwb3nuh08qH4rjgzF8KAsUhZcg@mail.gmail.com>
References: <CAL3ufUJtix-Qi0DbnJWR-_hVSwb3nuh08qH4rjgzF8KAsUhZcg@mail.gmail.com>
Message-ID: <ac39a99e-c853-52bb-f0bd-82ea755ddc3@uiowa.edu>

On Tue, 25 Jun 2024, Josiah Parry wrote:

> Hey folks,
>
> I'm sure many of you all woke to the same message I did: "Please correct
> before 2024-07-09 to safely retain your package on CRAN" caused by Non-API
> changes to CRAN.
>
> This is quite unexpected as Luke Tierney's June 6th email writes (emphasis
> mine):
>
> "An *experimental* *effort* is underway to add annotations to the WRE..."
>
> "*Once things have gelled a bit more *I hope to turn this into a blog
> post that will include some examples of moving non-API entry point
> uses into compliance."
>
> Since then there has not been any indication of stabilization of the
> Non-API changes nor has there been a blog post outlining how to migrate. As
> things have been coming and going from the Non-API changes for quite some
> time now, we (the royal we, here) have been waiting for an official
> announcement from CRAN on the stabilizing changes.

I posted an update to this list a few days ago. If you missed it you
can find it in the archive.

> *Can we extend this very short notice to handle the Non-API changes before
> removal from CRAN? *

Timing decisions are up to CRAN.

> In the case of the 3 packages I have to fix within 2 weeks, these are all
> using Rust. These changes require upstream changes to the extendr library.
> There are other packages that are also affected here. Making these changes
> is a delicate act and requires care and focus. All of the extendr
> developers work full time and cannot make addressing these changes their
> only priority for the next 2 weeks.

Using non-API entry points is a choice that comes with risks. The ones
leading to WARNINGs for your packages (PRSEEN and SYMVALUE)have been
receiving NOTEs in check results for several weeks. Using
tools:::checkPkgAPI you can see that your packages are referencing a
lot of non-API entry points. Some of these may be added to the API,
but most will not. This may be a good time to look into that.

To minimize disruption we have been adding entry points to the API as
long as it is safe to do so, in some cases against our better
judgment. But ones that are unsafe to use will not be
added. Eventually their declarations will be removed from public
header files and they will be hidden when that is possible. Packages
that have chosen to use these non-API entry points will have to adapt
if they want to pass R CMD check. For now, we will try to first have
use of these entry points result in NOTEs, and then WARNINGs. Once
their declarations are removed and they are hidden, packages using
them will fail to install.

> Additionally, a blog post with "examples of moving non-API entry point uses
> into compliance" would be very helpful in this endeavor.

WRE now contains a section 'Moving into C API compliance'; that seems
a better option for the moment given that things are still very much
in flux. We will try to add to this section as needed. For the
specific entry points generating WARNINGs for your packages the advice
is simple: stop using them.

Best,

luke

>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/


From jo@|@h@p@rry @end|ng |rom gm@||@com  Tue Jun 25 18:25:21 2024
From: jo@|@h@p@rry @end|ng |rom gm@||@com (Josiah Parry)
Date: Tue, 25 Jun 2024 12:25:21 -0400
Subject: [Rd] [External]  Non-API updates
In-Reply-To: <ac39a99e-c853-52bb-f0bd-82ea755ddc3@uiowa.edu>
References: <CAL3ufUJtix-Qi0DbnJWR-_hVSwb3nuh08qH4rjgzF8KAsUhZcg@mail.gmail.com>
 <ac39a99e-c853-52bb-f0bd-82ea755ddc3@uiowa.edu>
Message-ID: <CAL3ufUKcj00Mo2RDZfeN72aDDsnO4Y_TRyXzA6wrJ7Cp=nco8w@mail.gmail.com>

"Stop using them" is pithy advice but far easier said than done!

With respect to NOTES and WARN on CRAN, these do not result in any
package maintainer notifications. The only notification that the developers
receive is the threatening one that states that the packages will be
removed
from CRAN with a very short timeline.

Is there a link you can provide regarding the "Moving into C compliance?" It
cannot be found at https://cran.r-project.org/doc/manuals/R-exts.html.

Given that there hasn't been a stable release with these changes, how are
we
to know these changes have been stabilized and begin working towards
remedying them? These WARNs come from R-devel which is, as its name
suggests,
a development version which is vacillating daily.




On Tue, Jun 25, 2024 at 12:10?PM <luke-tierney at uiowa.edu> wrote:

> On Tue, 25 Jun 2024, Josiah Parry wrote:
>
> > Hey folks,
> >
> > I'm sure many of you all woke to the same message I did: "Please correct
> > before 2024-07-09 to safely retain your package on CRAN" caused by
> Non-API
> > changes to CRAN.
> >
> > This is quite unexpected as Luke Tierney's June 6th email writes
> (emphasis
> > mine):
> >
> > "An *experimental* *effort* is underway to add annotations to the WRE..."
> >
> > "*Once things have gelled a bit more *I hope to turn this into a blog
> > post that will include some examples of moving non-API entry point
> > uses into compliance."
> >
> > Since then there has not been any indication of stabilization of the
> > Non-API changes nor has there been a blog post outlining how to migrate.
> As
> > things have been coming and going from the Non-API changes for quite some
> > time now, we (the royal we, here) have been waiting for an official
> > announcement from CRAN on the stabilizing changes.
>
> I posted an update to this list a few days ago. If you missed it you
> can find it in the archive.
>
> > *Can we extend this very short notice to handle the Non-API changes
> before
> > removal from CRAN? *
>
> Timing decisions are up to CRAN.
>
> > In the case of the 3 packages I have to fix within 2 weeks, these are all
> > using Rust. These changes require upstream changes to the extendr
> library.
> > There are other packages that are also affected here. Making these
> changes
> > is a delicate act and requires care and focus. All of the extendr
> > developers work full time and cannot make addressing these changes their
> > only priority for the next 2 weeks.
>
> Using non-API entry points is a choice that comes with risks. The ones
> leading to WARNINGs for your packages (PRSEEN and SYMVALUE)have been
> receiving NOTEs in check results for several weeks. Using
> tools:::checkPkgAPI you can see that your packages are referencing a
> lot of non-API entry points. Some of these may be added to the API,
> but most will not. This may be a good time to look into that.
>
> To minimize disruption we have been adding entry points to the API as
> long as it is safe to do so, in some cases against our better
> judgment. But ones that are unsafe to use will not be
> added. Eventually their declarations will be removed from public
> header files and they will be hidden when that is possible. Packages
> that have chosen to use these non-API entry points will have to adapt
> if they want to pass R CMD check. For now, we will try to first have
> use of these entry points result in NOTEs, and then WARNINGs. Once
> their declarations are removed and they are hidden, packages using
> them will fail to install.
>
> > Additionally, a blog post with "examples of moving non-API entry point
> uses
> > into compliance" would be very helpful in this endeavor.
>
> WRE now contains a section 'Moving into C API compliance'; that seems
> a better option for the moment given that things are still very much
> in flux. We will try to add to this section as needed. For the
> specific entry points generating WARNINGs for your packages the advice
> is simple: stop using them.
>
> Best,
>
> luke
>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Jun 25 18:31:35 2024
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 25 Jun 2024 18:31:35 +0200
Subject: [Rd] [External] Non-API updates
In-Reply-To: <CAL3ufUKcj00Mo2RDZfeN72aDDsnO4Y_TRyXzA6wrJ7Cp=nco8w@mail.gmail.com>
References: <CAL3ufUJtix-Qi0DbnJWR-_hVSwb3nuh08qH4rjgzF8KAsUhZcg@mail.gmail.com>
 <ac39a99e-c853-52bb-f0bd-82ea755ddc3@uiowa.edu>
 <CAL3ufUKcj00Mo2RDZfeN72aDDsnO4Y_TRyXzA6wrJ7Cp=nco8w@mail.gmail.com>
Message-ID: <18bd6e57-cdcd-4d23-babd-6892ed0f517c@gmail.com>


On 6/25/24 18:25, Josiah Parry wrote:
> "Stop using them" is pithy advice but far easier said than done!
>
> With respect to NOTES and WARN on CRAN, these do not result in any
> package maintainer notifications. The only notification that the developers
> receive is the threatening one that states that the packages will be
> removed
> from CRAN with a very short timeline.
>
> Is there a link you can provide regarding the "Moving into C compliance?" It
> cannot be found at https://cran.r-project.org/doc/manuals/R-exts.html.

https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#Moving-into-C-API-compliance

Tomas

> Given that there hasn't been a stable release with these changes, how are
> we
> to know these changes have been stabilized and begin working towards
> remedying them? These WARNs come from R-devel which is, as its name
> suggests,
> a development version which is vacillating daily.
>
>
>
>
> On Tue, Jun 25, 2024 at 12:10?PM <luke-tierney at uiowa.edu> wrote:
>
>> On Tue, 25 Jun 2024, Josiah Parry wrote:
>>
>>> Hey folks,
>>>
>>> I'm sure many of you all woke to the same message I did: "Please correct
>>> before 2024-07-09 to safely retain your package on CRAN" caused by
>> Non-API
>>> changes to CRAN.
>>>
>>> This is quite unexpected as Luke Tierney's June 6th email writes
>> (emphasis
>>> mine):
>>>
>>> "An *experimental* *effort* is underway to add annotations to the WRE..."
>>>
>>> "*Once things have gelled a bit more *I hope to turn this into a blog
>>> post that will include some examples of moving non-API entry point
>>> uses into compliance."
>>>
>>> Since then there has not been any indication of stabilization of the
>>> Non-API changes nor has there been a blog post outlining how to migrate.
>> As
>>> things have been coming and going from the Non-API changes for quite some
>>> time now, we (the royal we, here) have been waiting for an official
>>> announcement from CRAN on the stabilizing changes.
>> I posted an update to this list a few days ago. If you missed it you
>> can find it in the archive.
>>
>>> *Can we extend this very short notice to handle the Non-API changes
>> before
>>> removal from CRAN? *
>> Timing decisions are up to CRAN.
>>
>>> In the case of the 3 packages I have to fix within 2 weeks, these are all
>>> using Rust. These changes require upstream changes to the extendr
>> library.
>>> There are other packages that are also affected here. Making these
>> changes
>>> is a delicate act and requires care and focus. All of the extendr
>>> developers work full time and cannot make addressing these changes their
>>> only priority for the next 2 weeks.
>> Using non-API entry points is a choice that comes with risks. The ones
>> leading to WARNINGs for your packages (PRSEEN and SYMVALUE)have been
>> receiving NOTEs in check results for several weeks. Using
>> tools:::checkPkgAPI you can see that your packages are referencing a
>> lot of non-API entry points. Some of these may be added to the API,
>> but most will not. This may be a good time to look into that.
>>
>> To minimize disruption we have been adding entry points to the API as
>> long as it is safe to do so, in some cases against our better
>> judgment. But ones that are unsafe to use will not be
>> added. Eventually their declarations will be removed from public
>> header files and they will be hidden when that is possible. Packages
>> that have chosen to use these non-API entry points will have to adapt
>> if they want to pass R CMD check. For now, we will try to first have
>> use of these entry points result in NOTEs, and then WARNINGs. Once
>> their declarations are removed and they are hidden, packages using
>> them will fail to install.
>>
>>> Additionally, a blog post with "examples of moving non-API entry point
>> uses
>>> into compliance" would be very helpful in this endeavor.
>> WRE now contains a section 'Moving into C API compliance'; that seems
>> a better option for the moment given that things are still very much
>> in flux. We will try to add to this section as needed. For the
>> specific entry points generating WARNINGs for your packages the advice
>> is simple: stop using them.
>>
>> Best,
>>
>> luke
>>
>>>        [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>      Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pro|jcn@@h @end|ng |rom gm@||@com  Tue Jun 25 18:36:11 2024
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Tue, 25 Jun 2024 12:36:11 -0400
Subject: [Rd] [External] Non-API updates
In-Reply-To: <CAL3ufUKcj00Mo2RDZfeN72aDDsnO4Y_TRyXzA6wrJ7Cp=nco8w@mail.gmail.com>
References: <CAL3ufUJtix-Qi0DbnJWR-_hVSwb3nuh08qH4rjgzF8KAsUhZcg@mail.gmail.com>
 <ac39a99e-c853-52bb-f0bd-82ea755ddc3@uiowa.edu>
 <CAL3ufUKcj00Mo2RDZfeN72aDDsnO4Y_TRyXzA6wrJ7Cp=nco8w@mail.gmail.com>
Message-ID: <0c548d50-8af7-4989-9c28-c477dab87783@gmail.com>



On 2024-06-25 12:25, Josiah Parry wrote:
> "Stop using them" is pithy advice but far easier said than done!
> 
> With respect to NOTES and WARN on CRAN, these do not result in any
> package maintainer notifications. The only notification that the developers
> receive is the threatening one that states that the packages will be
> removed
> from CRAN with a very short timeline.
> 
> Is there a link you can provide regarding the "Moving into C compliance?" It
> cannot be found at https://cran.r-project.org/doc/manuals/R-exts.html.
> 
> Given that there hasn't been a stable release with these changes, how are
> we
> to know these changes have been stabilized and begin working towards
> remedying them? These WARNs come from R-devel which is, as its name
> suggests,
> a development version which is vacillating daily.
> 
> 
> 
> 
> On Tue, Jun 25, 2024 at 12:10?PM <luke-tierney at uiowa.edu> wrote:
> 
>> On Tue, 25 Jun 2024, Josiah Parry wrote:
>>
>>> Hey folks,
>>>
>>> I'm sure many of you all woke to the same message I did: "Please correct
>>> before 2024-07-09 to safely retain your package on CRAN" caused by
>> Non-API
>>> changes to CRAN.
>>>
>>> This is quite unexpected as Luke Tierney's June 6th email writes
>> (emphasis
>>> mine):
>>>
>>> "An *experimental* *effort* is underway to add annotations to the WRE..."
>>>
>>> "*Once things have gelled a bit more *I hope to turn this into a blog
>>> post that will include some examples of moving non-API entry point
>>> uses into compliance."
>>>
>>> Since then there has not been any indication of stabilization of the
>>> Non-API changes nor has there been a blog post outlining how to migrate.
>> As
>>> things have been coming and going from the Non-API changes for quite some
>>> time now, we (the royal we, here) have been waiting for an official
>>> announcement from CRAN on the stabilizing changes.
>>
>> I posted an update to this list a few days ago. If you missed it you
>> can find it in the archive.
>>
>>> *Can we extend this very short notice to handle the Non-API changes
>> before
>>> removal from CRAN? *
>>
>> Timing decisions are up to CRAN.
>>
>>> In the case of the 3 packages I have to fix within 2 weeks, these are all
>>> using Rust. These changes require upstream changes to the extendr
>> library.
>>> There are other packages that are also affected here. Making these
>> changes
>>> is a delicate act and requires care and focus. All of the extendr
>>> developers work full time and cannot make addressing these changes their
>>> only priority for the next 2 weeks.
>>
>> Using non-API entry points is a choice that comes with risks. The ones
>> leading to WARNINGs for your packages (PRSEEN and SYMVALUE)have been
>> receiving NOTEs in check results for several weeks. Using
>> tools:::checkPkgAPI you can see that your packages are referencing a
>> lot of non-API entry points. Some of these may be added to the API,
>> but most will not. This may be a good time to look into that.
>>
>> To minimize disruption we have been adding entry points to the API as
>> long as it is safe to do so, in some cases against our better
>> judgment. But ones that are unsafe to use will not be
>> added. Eventually their declarations will be removed from public
>> header files and they will be hidden when that is possible. Packages
>> that have chosen to use these non-API entry points will have to adapt
>> if they want to pass R CMD check. For now, we will try to first have
>> use of these entry points result in NOTEs, and then WARNINGs. Once
>> their declarations are removed and they are hidden, packages using
>> them will fail to install.
>>
>>> Additionally, a blog post with "examples of moving non-API entry point
>> uses
>>> into compliance" would be very helpful in this endeavor.
>>
>> WRE now contains a section 'Moving into C API compliance'; that seems
>> a better option for the moment given that things are still very much
>> in flux. We will try to add to this section as needed. For the
>> specific entry points generating WARNINGs for your packages the advice
>> is simple: stop using them.
>>
>> Best,
>>
>> luke
>>
>>>
>>>        [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>      Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pro|jcn@@h @end|ng |rom gm@||@com  Tue Jun 25 18:37:20 2024
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Tue, 25 Jun 2024 12:37:20 -0400
Subject: [Rd] [External] Non-API updates
In-Reply-To: <ac39a99e-c853-52bb-f0bd-82ea755ddc3@uiowa.edu>
References: <CAL3ufUJtix-Qi0DbnJWR-_hVSwb3nuh08qH4rjgzF8KAsUhZcg@mail.gmail.com>
 <ac39a99e-c853-52bb-f0bd-82ea755ddc3@uiowa.edu>
Message-ID: <e796cea6-b228-4308-9d07-b1dec555264e@gmail.com>

It is probably important to note that the WRE with the new section on C API compliance is
in the R-Devel docs, not the current ones.

JN

On 2024-06-25 12:10, luke-tierney--- via R-devel wrote:
> On Tue, 25 Jun 2024, Josiah Parry wrote:
> 
>> Hey folks,
>>
>> I'm sure many of you all woke to the same message I did: "Please correct
>> before 2024-07-09 to safely retain your package on CRAN" caused by Non-API
>> changes to CRAN.
>>
>> This is quite unexpected as Luke Tierney's June 6th email writes (emphasis
>> mine):
>>
>> "An *experimental* *effort* is underway to add annotations to the WRE..."
>>
>> "*Once things have gelled a bit more *I hope to turn this into a blog
>> post that will include some examples of moving non-API entry point
>> uses into compliance."
>>
>> Since then there has not been any indication of stabilization of the
>> Non-API changes nor has there been a blog post outlining how to migrate. As
>> things have been coming and going from the Non-API changes for quite some
>> time now, we (the royal we, here) have been waiting for an official
>> announcement from CRAN on the stabilizing changes.
> 
> I posted an update to this list a few days ago. If you missed it you
> can find it in the archive.
> 
>> *Can we extend this very short notice to handle the Non-API changes before
>> removal from CRAN? *
> 
> Timing decisions are up to CRAN.
> 
>> In the case of the 3 packages I have to fix within 2 weeks, these are all
>> using Rust. These changes require upstream changes to the extendr library.
>> There are other packages that are also affected here. Making these changes
>> is a delicate act and requires care and focus. All of the extendr
>> developers work full time and cannot make addressing these changes their
>> only priority for the next 2 weeks.
> 
> Using non-API entry points is a choice that comes with risks. The ones
> leading to WARNINGs for your packages (PRSEEN and SYMVALUE)have been
> receiving NOTEs in check results for several weeks. Using
> tools:::checkPkgAPI you can see that your packages are referencing a
> lot of non-API entry points. Some of these may be added to the API,
> but most will not. This may be a good time to look into that.
> 
> To minimize disruption we have been adding entry points to the API as
> long as it is safe to do so, in some cases against our better
> judgment. But ones that are unsafe to use will not be
> added. Eventually their declarations will be removed from public
> header files and they will be hidden when that is possible. Packages
> that have chosen to use these non-API entry points will have to adapt
> if they want to pass R CMD check. For now, we will try to first have
> use of these entry points result in NOTEs, and then WARNINGs. Once
> their declarations are removed and they are hidden, packages using
> them will fail to install.
> 
>> Additionally, a blog post with "examples of moving non-API entry point uses
>> into compliance" would be very helpful in this endeavor.
> 
> WRE now contains a section 'Moving into C API compliance'; that seems
> a better option for the moment given that things are still very much
> in flux. We will try to add to this section as needed. For the
> specific entry points generating WARNINGs for your packages the advice
> is simple: stop using them.
> 
> Best,
> 
> luke
> 
>>
>> ????[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk  Tue Jun 25 18:43:11 2024
From: t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk (Tim Taylor)
Date: Tue, 25 Jun 2024 17:43:11 +0100
Subject: [Rd] [External] Non-API updates
In-Reply-To: <CAL3ufUKcj00Mo2RDZfeN72aDDsnO4Y_TRyXzA6wrJ7Cp=nco8w@mail.gmail.com>
References: <CAL3ufUJtix-Qi0DbnJWR-_hVSwb3nuh08qH4rjgzF8KAsUhZcg@mail.gmail.com>
 <ac39a99e-c853-52bb-f0bd-82ea755ddc3@uiowa.edu>
 <CAL3ufUKcj00Mo2RDZfeN72aDDsnO4Y_TRyXzA6wrJ7Cp=nco8w@mail.gmail.com>
Message-ID: <3a4b91af-88e0-4900-aee4-697143fb5164@hiddenelephants.co.uk>


On 25/06/2024 17:25, Josiah Parry wrote:
> With respect to NOTES and WARN on CRAN, these do not result in any
> package maintainer notifications. The only notification that the developers
> receive is the threatening one that states that the packages will be
> removed
> from CRAN with a very short timeline.

I'd recommend regularly checking 
https://cran.r-project.org/web//checks/check_results_josiah.parry_at_gmail.com.html 
on a regular basis or better still automating said checking. I use 
dang::checkCRANStatus() in my .Rprofile? to stay up to date ...

R> dang::checkCRANStatus("josiah.parry at gmail.com")
 ??????? Package WARN NOTE OK
1??????? arcgis?????????? 13
2 arcgisgeocode???????? 8? 5
3? arcgislayers?????????? 13
4? arcgisplaces???????? 9? 4
5?? arcgisutils??????? 13
6??????? arcpbf??? 2??? 7? 4
7?????????? b64??? 2??? 7? 4
8???????? rsgeo??? 2??? 7? 4
9?????? trendyy?????????? 13


Tim


From edd @end|ng |rom deb|@n@org  Tue Jun 25 18:51:08 2024
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 25 Jun 2024 11:51:08 -0500
Subject: [Rd] [External]  Non-API updates
In-Reply-To: <CAL3ufUKcj00Mo2RDZfeN72aDDsnO4Y_TRyXzA6wrJ7Cp=nco8w@mail.gmail.com>
References: <CAL3ufUJtix-Qi0DbnJWR-_hVSwb3nuh08qH4rjgzF8KAsUhZcg@mail.gmail.com>
 <ac39a99e-c853-52bb-f0bd-82ea755ddc3@uiowa.edu>
 <CAL3ufUKcj00Mo2RDZfeN72aDDsnO4Y_TRyXzA6wrJ7Cp=nco8w@mail.gmail.com>
Message-ID: <26234.62844.466415.124809@rob.eddelbuettel.com>


On 25 June 2024 at 12:25, Josiah Parry wrote:
| Is there a link you can provide regarding the "Moving into C compliance?" It
| cannot be found at https://cran.r-project.org/doc/manuals/R-exts.html.

https://rstudio.github.io/r-manuals/r-exts/The-R-API.html#moving-into-c-api-compliance

That's the prettified quarto rendering, and it uses the dev version, so
Luke's new section is there. Of course, the R Projects also has a site with
the manuals rendered for r-release and r-devel.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@tthew@||d|er @end|ng |rom gm@||@com  Tue Jun 25 19:58:40 2024
From: m@tthew@||d|er @end|ng |rom gm@||@com (Matthew Fidler)
Date: Tue, 25 Jun 2024 19:58:40 +0200
Subject: [Rd] SET_TYPEOF no longer allowed,
 how should I call R from within C?
In-Reply-To: <9bf09121-7de1-4b7f-91a6-1784615331b5@gmail.com>
References: <CAOmN8O77YVnWF0V4f9xt9u20pgL-him29WrdOkfR0bVE7EZ5vA@mail.gmail.com>
 <9bf09121-7de1-4b7f-91a6-1784615331b5@gmail.com>
Message-ID: <CAOmN8O4AJa4k9aZhCJpVAc-ZtBytapL=GtQYBVPznCd6RYB_Tg@mail.gmail.com>

Thank yiou

On Tue, Jun 25, 2024, 3:57?PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 2024-06-25 5:25 a.m., Matthew Fidler wrote:
> > Hi,
> >
> > I have adapted code to run R from within C from the writing R extensions
> > here
> >
> >
> https://colinfay.me/writing-r-extensions/system-and-foreign-language-interfaces.html
>
> That was written in 2017.  You should use the one that came with R, or
> even better, the one that comes with the development version of R.
>
> Duncan Murdoch
>
> >
> > As a more comprehensive example of constructing an R call in C code and
> > evaluating, consider the following fragment of printAttributes in
> > src/main/print.c.
> >
> >      /* Need to construct a call to
> >
> >         print(CAR(a), digits=digits)
> >
> >         based on the R_print structure, then eval(call, env).
> >
> >         See do_docall for the template for this sort of thing.
> >
> >      */
> >
> >      SEXP s, t;
> >
> >      t = s = PROTECT(allocList(3));
> >
> >      SET_TYPEOF(s, LANGSXP);
> >
> >      SETCAR(t, install("print")); t = CDR(t);
> >
> >      SETCAR(t, CAR(a)); t = CDR(t);
> >
> >      SETCAR(t, ScalarInteger(digits));
> >
> >      SET_TAG(t, install("digits"));
> >
> >      eval(s, env);
> >
> >      UNPROTECT(1);
> >
> > At this point CAR(a) is the R object to be printed, the current
> attribute.
> > There are three steps: the call is constructed as a pairlist of length 3,
> > the list is filled in, and the expression represented by the pairlist is
> > evaluated.
> >
> > A pairlist is quite distinct from a generic vector list, the only
> > user-visible form of list in R. A pairlist is a linked list (with CDR(t)
> > computing the next entry), with items (accessed by CAR(t)) and names or
> > tags (set by SET_TAG). In this call there are to be three items, a symbol
> > (pointing to the function to be called) and two argument values, the
> first
> > unnamed and the second named. Setting the type to LANGSXP makes this a
> call
> > which can be evaluated.
> >
> >
> >
> > New checks  tells me that this is no longer allowed since it was not part
> > of the public api any longer.
> >
> >
> > So, how does one call R from C then?
> >
> > Also should the writing R extensions be updated with the new approved
> > approach?
> >
> >
> > Thanks in advance.
> >
> > Matt
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Wed Jun 26 10:43:32 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Wed, 26 Jun 2024 11:43:32 +0300
Subject: [Rd] API documentation for R
In-Reply-To: <CAJXgQP2Lt2tgfZzASxKeodN7a7XNX4fkmihA+FdqdnEdUSpkgw@mail.gmail.com>
References: <CALyqOb8VS+z-1c4r-NAGvg9EfTgSL_1MqbQkSWb+7jQZdJWQ1Q@mail.gmail.com>
 <000a01da9452$c6f8bc70$54ea3550$@gmail.com>
 <CALyqOb-vcs3RfB5SEOnk-f72N9WuAv6fRRUQmvO+Cyuh+x+bWQ@mail.gmail.com>
 <CAD4oTHGp0CmnZV1-T+vOrEP7ekMsRJ8PQA3nn9KxqM7WX7oPdw@mail.gmail.com>
 <7567536C-3B54-4568-996B-108670F55AAC@R-project.org>
 <CABdHhvGiWFjTVMfcjowoO1QKATeTc0jw2EpMC=CYSwY+ZHs36A@mail.gmail.com>
 <C13AAB3A-0189-4959-83E0-3E3B1392717D@R-project.org>
 <CABdHhvFpVJMMQD7CubomzCKC4HDGkbWfD-t6OaRSxZfcKcRZ6g@mail.gmail.com>
 <EBBB96A0-D6CA-4003-BF55-8F5344B18892@R-project.org>
 <CABdHhvHqUZ=HAQyfQVfrUbnKBM6dKagbMCojU6xnwoyXJ0dgqA@mail.gmail.com>
 <dc1e6797-0ec-1061-7ce3-88a384d7ee8c@uiowa.edu>
 <20240425142418.6b78c7ed@arachnoid>
 <CAJXgQP2Lt2tgfZzASxKeodN7a7XNX4fkmihA+FdqdnEdUSpkgw@mail.gmail.com>
Message-ID: <20240626114332.130840b5@Tarkus>

? Thu, 25 Apr 2024 10:10:44 -0700
Kevin Ushey <kevinushey at gmail.com> ?????:

> I'm guessing the most welcome kinds of contributions would be
> documentation? IMHO, "documenting an API" and "describing how an API
> can be used" are somewhat separate endeavors. I believe R-exts does an
> excellent job of the latter, but may not be the right vehicle for the
> former. To that end, I believe it would be helpful to have some
> structured API documentation as a separate R-api document.

Now that we have a machine-readable list of APIs in the form of
system.file('wre.txt', package = 'tools') (which is not yet an API
itself, but I trust we'll be able to adapt to ongoing changes), it's
possible to work on such an R-api document.

I've put a proof of concept that checks its Texinfo indices against the
list of @apifun entries in wre.txt at <https://codeberg.org/aitap/R-api>
with a rendered version at <https://aitap.codeberg.page/R-api/>. I've
tried to address Agner's concerns [*] about R_NO_REMAP by showing the
declarations available with or without this preprocessor symbol
defined.

34 vaguely documented entry points out of 538 lines in wre.txt is
obviously not enough, but I'm curious whether this is the right
direction. Should we keep to a strict structure, like in Rd files, with
a table for every argument and the return value? Can we group functions
together, or should there be a separate @node for every function and
variable? Is Rd (and Henrik's earlier work [**]) a better format than
Texinfo for a searchable C API reference?

-- 
Best regards,
Ivan

[*] https://stat.ethz.ch/pipermail/r-package-devel/2024q2/010913.html

[**] https://github.com/HenrikBengtsson/RNativeAPI


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jun 26 15:30:37 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 26 Jun 2024 09:30:37 -0400
Subject: [Rd] rbind() on zero row matrices is inconsistent
Message-ID: <857ec376-f48d-4fdb-a02e-6500460536dd@gmail.com>

The help for cbind() and rbind() says

"For cbind (rbind), vectors of zero length (including NULL) are ignored 
unless the result would have zero rows (columns), for S compatibility. 
(Zero-extent matrices do not occur in S3 and are not ignored in R.)"

This leads to an inconsistency.


   M <- matrix(NA, 0, 0)  # Make a 0x0 matrix
   N <- matrix(NA, 0, 1)  # Make a 0x1 matrix


   dim(rbind(M, NULL, NULL)) # adds 2 rows to M
   #> [1] 2 0
   dim(rbind(N, NULL, NULL)) # leaves N unchanged
   #> [1] 0 1


You get an extra row on the 0x0 matrix for each NULL value that is bound 
to it, but the 0xn matrix is unchanged for n > 0.

Clearly from the help this is intentional, but is it desirable? 
Wouldn't it make more sense for NULL to be ignored by rbind() and cbind()?

Duncan Murdoch


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Wed Jun 26 15:32:30 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Wed, 26 Jun 2024 15:32:30 +0200
Subject: [Rd] rbind() on zero row matrices is inconsistent
In-Reply-To: <857ec376-f48d-4fdb-a02e-6500460536dd@gmail.com>
References: <857ec376-f48d-4fdb-a02e-6500460536dd@gmail.com>
Message-ID: <26236.6254.890228.351763@hornik.net>

>>>>> Duncan Murdoch writes:

> The help for cbind() and rbind() says
> "For cbind (rbind), vectors of zero length (including NULL) are ignored 
> unless the result would have zero rows (columns), for S compatibility. 
> (Zero-extent matrices do not occur in S3 and are not ignored in R.)"

> This leads to an inconsistency.


>    M <- matrix(NA, 0, 0)  # Make a 0x0 matrix
>    N <- matrix(NA, 0, 1)  # Make a 0x1 matrix


>    dim(rbind(M, NULL, NULL)) # adds 2 rows to M
>    #> [1] 2 0
>    dim(rbind(N, NULL, NULL)) # leaves N unchanged
>    #> [1] 0 1


> You get an extra row on the 0x0 matrix for each NULL value that is bound 
> to it, but the 0xn matrix is unchanged for n > 0.

> Clearly from the help this is intentional, but is it desirable?
> Wouldn't it make more sense for NULL to be ignored by rbind() and
> cbind()?

I would agree :-)

Best
-k

> Duncan Murdoch

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From therne@u @end|ng |rom m@yo@edu  Wed Jun 26 15:42:39 2024
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Wed, 26 Jun 2024 08:42:39 -0500
Subject: [Rd] Fixing a CRAN note
Message-ID: <f50ddc$mfdf69@ironport10.mayo.edu>

I am trying to clear up all the "NOTE"s before a CRAN submission, but am a bit confused 
about this one.?? What is it complaining about -- that it doesn't like my name?

...
* checking for file ?deming/DESCRIPTION? ... OK
* this is package ?deming? version ?1.4-1?
* checking CRAN incoming feasibility ... [7s/18s] NOTE
Maintainer: ?Terry Therneau <therneau.terry at mayo.edu>?

Found the following \keyword or \concept entries
which likely give several index terms:
 ? File ?deming.Rd?:
 ??? \keyword{models, regression}
* checking package namespace information ... OK
* checking package dependencies ... OK
...

-- 
Terry M Therneau, PhD
Department of Quantitative Health Sciences
Mayo Clinic
therneau at mayo.edu

"TERR-ree THUR-noh"

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Wed Jun 26 15:59:10 2024
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Wed, 26 Jun 2024 15:59:10 +0200
Subject: [Rd] Fixing a CRAN note
In-Reply-To: <f50ddc$mfdf69@ironport10.mayo.edu>
References: <f50ddc$mfdf69@ironport10.mayo.edu>
Message-ID: <26236.7854.986327.786747@hornik.net>

>>>>> Therneau, Terry M , Ph D via R-devel writes:

> I am trying to clear up all the "NOTE"s before a CRAN submission, but am a bit confused 
> about this one.?? What is it complaining about -- that it doesn't like my name?

> ...
> * checking for file ?deming/DESCRIPTION? ... OK
> * this is package ?deming? version ?1.4-1?
> * checking CRAN incoming feasibility ... [7s/18s] NOTE
> Maintainer: ?Terry Therneau <therneau.terry at mayo.edu>?

> Found the following \keyword or \concept entries
> which likely give several index terms:
>  ? File ?deming.Rd?:
>  ??? \keyword{models, regression}

Use

  \keyword{models}
  \keyword{regression}

Hth
-k

> * checking package namespace information ... OK
> * checking package dependencies ... OK
> ...

> -- 
> Terry M Therneau, PhD
> Department of Quantitative Health Sciences
> Mayo Clinic
> therneau at mayo.edu

> "TERR-ree THUR-noh"

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |kry|ov @end|ng |rom d|@root@org  Wed Jun 26 16:03:09 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Wed, 26 Jun 2024 17:03:09 +0300
Subject: [Rd] Fixing a CRAN note
In-Reply-To: <f50ddc$mfdf69@ironport10.mayo.edu>
References: <f50ddc$mfdf69@ironport10.mayo.edu>
Message-ID: <C89767EA-8C39-4B71-8B6C-AB2E58D02E1B@disroot.org>

26 ???? 2024 ?. 16:42:39 GMT+03:00, "Therneau, Terry M., Ph.D. via R-devel" <r-devel at r-project.org> ?????:
>What is it complaining about -- that it doesn't like my name?

>* checking CRAN incoming feasibility ... [7s/18s] NOTE
>Maintainer: ?Terry Therneau <therneau.terry at mayo.edu>?
>
>Found the following \keyword or \concept entries
>which likely give several index terms:
> ? File ?deming.Rd?:
> ??? \keyword{models, regression}
I think that the check points out that in order to specify multiple keywords, you need to use \keyword{models} and \keyword{regression} separately, not \keyword{models, regression} in one Rd command.

-- 
Best regards,
Ivan


