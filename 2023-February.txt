From kry|ov@r00t @end|ng |rom gm@||@com  Sun Feb  5 14:04:25 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Sun, 5 Feb 2023 16:04:25 +0300
Subject: [Rd] R2HTML doesn't split paragraphs originating from
 \Sexpr[results=rd]
Message-ID: <20230205160425.1e35a036@Tarkus>

Hello,

Here's an example that renders correctly using Rd2txt / Rd2latex / R
CMD Rd2pdf, but has problems under Rd2HTML:

\name{foo}
\title{foo}
\section{foo}{
  This should be on a separate paragraph

  This should be on a separate paragraph

  This should be on a separate paragraph

  \Sexpr[stage=render,results=rd]{
    paste(
      rep('Sexpr: This should be on a separate paragraph', 3),
      collapse = '\n\n'
    )
  }
}

For the text I've typed manually, there are <p>...</p> tags splitting
the text separated by empty lines into paragraphs. The \Sexpr return
value only has newlines, which joints the paragraphs together:

<p>This should be on a separate paragraph
</p>
<p>This should be on a separate paragraph
</p>
<p>This should be on a separate paragraph
</p>
<p>Sexpr: This should be on a separate paragraph

Sexpr: This should be on a separate paragraph

Sexpr: This should be on a separate paragraph
</p>

addParaBreaks() is prevented from closing the paragraph tag because
tools:::isBlankLineRd() returns FALSE for blank lines produced by a
\Sexpr. This happens because utils:::getSrcByte() not 1 for these blank
lines. That, in turn, is because the source reference for \Sexpr values
is the whole \Sexpr tag:

# blank line from a \Sexpr
Rd[[3]][[2]][[9]][[2]]
# [1] "\n"
# attr(,"Rd_tag")
# [1] "TEXT"
getSrcref(Rd[[3]][[2]][[9]][[2]])
# \Sexpr[stage=render,results=rd]{
#   paste(
#     rep('Sexpr: This should be on a separate paragraph', 3),
#     collapse = '\n\n'
#   )
# }

# artisanal hand-crafted blank line
Rd[[3]][[2]][[7]]
# [1] "\n"
# attr(,"Rd_tag")
# [1] "TEXT"
summary(getSrcref(Rd[[3]][[2]][[7]]))
# <srcref: file "~/foo.Rd" chars 9:1 to 9:1>

I think I understand that tools:::isBlankLineRd requires
utils:::getSrcByte(x) == 1L because it may be called on things like
"\\eqn{0}\n" where the terminal "\n" might otherwise be considered a
"blank line". How to reconcile isBlankLineRd with blank lines not
directly originating from Rd source?

Rd2latex might have a similar problem (its addParaBreaks() checks for
isBlankLineRd()), but then it works anyway because Rd rules for
paragraph breaks on blank lines are the same as in LaTeX.

-- 
Best regards,
Ivan


From @nto|ne@|@br| @end|ng |rom gm@||@com  Mon Feb  6 15:42:51 2023
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Mon, 6 Feb 2023 15:42:51 +0100
Subject: [Rd] Unnecessary note when import only used in arg definition
Message-ID: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>

Dear r-devel,

When a package is only used in an argument definition, e.g :


f <- function(test = testthat::is_testing()) {

  if (test) 1 else 2

}


R CMD CHECK gives us a note: "Namespace in Imports field not imported from:
'testthat'"


This incites me to remove the package from the Imports field but that'll
make my package brittle.


I noted I'm not the first one having the issue (
https://github.com/r-lib/devtools/issues/2456 ) and I've seen some
workarounds too, in particular Hadley Wickham suggests in 'R packages' to
use the following construct :


ignore_unused_imports <- *function*() {

  aaapkg::aaa_fun

}


That's far from obvious though, and not very satisfying.

Are there any downside to removing this note in this scenario? it makes
little sense to me and incites wrong behaviour AFAIU.


Thanks,


Antoine

	[[alternative HTML version deleted]]


From kev|nu@hey @end|ng |rom gm@||@com  Mon Feb  6 19:03:07 2023
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Mon, 6 Feb 2023 10:03:07 -0800
Subject: [Rd] Unnecessary note when import only used in arg definition
In-Reply-To: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
References: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
Message-ID: <CAJXgQP0NhMQYRNqy8SfS4jN-kcVKFinJG4bxfROX_BEbBt5L+Q@mail.gmail.com>

Hi Antoine,

Maybe I'm misunderstanding, but I think the warning is saying that
you've declared the package dependency in the DESCRIPTION file, but
you haven't actually imported the package (or any functions) in your
package NAMESPACE file?

I put together an example package that I think satisfies the point
you're describing, and I don't see any R CMD check warnings (using R
4.2.2).

https://github.com/kevinushey/imports.example

As I understand it, if you declare a package dependency in the
DESCRIPTION file, you need to clarify how you're using the package in
the NAMESPACE file -- e.g. what symbols you want to import, and so on.

Best,
Kevin

On Mon, Feb 6, 2023 at 6:43 AM Antoine Fabri <antoine.fabri at gmail.com> wrote:
>
> Dear r-devel,
>
> When a package is only used in an argument definition, e.g :
>
>
> f <- function(test = testthat::is_testing()) {
>
>   if (test) 1 else 2
>
> }
>
>
> R CMD CHECK gives us a note: "Namespace in Imports field not imported from:
> 'testthat'"
>
>
> This incites me to remove the package from the Imports field but that'll
> make my package brittle.
>
>
> I noted I'm not the first one having the issue (
> https://github.com/r-lib/devtools/issues/2456 ) and I've seen some
> workarounds too, in particular Hadley Wickham suggests in 'R packages' to
> use the following construct :
>
>
> ignore_unused_imports <- *function*() {
>
>   aaapkg::aaa_fun
>
> }
>
>
> That's far from obvious though, and not very satisfying.
>
> Are there any downside to removing this note in this scenario? it makes
> little sense to me and incites wrong behaviour AFAIU.
>
>
> Thanks,
>
>
> Antoine
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb  6 19:59:27 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 6 Feb 2023 13:59:27 -0500
Subject: [Rd] Unnecessary note when import only used in arg definition
In-Reply-To: <CAJXgQP0NhMQYRNqy8SfS4jN-kcVKFinJG4bxfROX_BEbBt5L+Q@mail.gmail.com>
References: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
 <CAJXgQP0NhMQYRNqy8SfS4jN-kcVKFinJG4bxfROX_BEbBt5L+Q@mail.gmail.com>
Message-ID: <e02220d8-9806-09dd-aee3-665479704d6d@gmail.com>

I think the usual rule is that a qualified use of a package is 
sufficient to suppress the warning without any entry in the NAMESPACE 
file.  So if there isn't something else going on, Antoine's example 
illustrates a bug (or at least an inconsistency) in the check code.

Here's a version of your example that doesn't import anything from rlang 
using the NAMESPACE, but uses it in code:

   https://github.com/dmurdoch/imports.example/tree/explicituse

And here's one like Antoine's, where the only use is in a default value:

   https://github.com/dmurdoch/imports.example/tree/defaultvalue

The first one tests clean, the second one gives the note he was talking 
about:

  ? checking dependencies in R code ... NOTE
    Namespace in Imports field not imported from: ?rlang?
      All declared Imports should be used.

Duncan

On 06/02/2023 1:03 p.m., Kevin Ushey wrote:
> Hi Antoine,
> 
> Maybe I'm misunderstanding, but I think the warning is saying that
> you've declared the package dependency in the DESCRIPTION file, but
> you haven't actually imported the package (or any functions) in your
> package NAMESPACE file?
> 
> I put together an example package that I think satisfies the point
> you're describing, and I don't see any R CMD check warnings (using R
> 4.2.2).
> 
> https://github.com/kevinushey/imports.example
> 
> As I understand it, if you declare a package dependency in the
> DESCRIPTION file, you need to clarify how you're using the package in
> the NAMESPACE file -- e.g. what symbols you want to import, and so on.
> 
> Best,
> Kevin
> 
> On Mon, Feb 6, 2023 at 6:43 AM Antoine Fabri <antoine.fabri at gmail.com> wrote:
>>
>> Dear r-devel,
>>
>> When a package is only used in an argument definition, e.g :
>>
>>
>> f <- function(test = testthat::is_testing()) {
>>
>>    if (test) 1 else 2
>>
>> }
>>
>>
>> R CMD CHECK gives us a note: "Namespace in Imports field not imported from:
>> 'testthat'"
>>
>>
>> This incites me to remove the package from the Imports field but that'll
>> make my package brittle.
>>
>>
>> I noted I'm not the first one having the issue (
>> https://github.com/r-lib/devtools/issues/2456 ) and I've seen some
>> workarounds too, in particular Hadley Wickham suggests in 'R packages' to
>> use the following construct :
>>
>>
>> ignore_unused_imports <- *function*() {
>>
>>    aaapkg::aaa_fun
>>
>> }
>>
>>
>> That's far from obvious though, and not very satisfying.
>>
>> Are there any downside to removing this note in this scenario? it makes
>> little sense to me and incites wrong behaviour AFAIU.
>>
>>
>> Thanks,
>>
>>
>> Antoine
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb  6 20:31:31 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 6 Feb 2023 14:31:31 -0500
Subject: [Rd] Unnecessary note when import only used in arg definition
In-Reply-To: <e02220d8-9806-09dd-aee3-665479704d6d@gmail.com>
References: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
 <CAJXgQP0NhMQYRNqy8SfS4jN-kcVKFinJG4bxfROX_BEbBt5L+Q@mail.gmail.com>
 <e02220d8-9806-09dd-aee3-665479704d6d@gmail.com>
Message-ID: <3f099c2c-9b6c-f5f8-5e3e-c7d656be95de@gmail.com>

On 06/02/2023 1:59 p.m., Duncan Murdoch wrote:
> I think the usual rule is that a qualified use of a package is
> sufficient to suppress the warning without any entry in the NAMESPACE
> file.  So if there isn't something else going on, Antoine's example
> illustrates a bug (or at least an inconsistency) in the check code.

Here's where the problem arises:

https://github.com/r-devel/r-svn/blob/7a2207dad15b8eed8c3d1c5cc49f29d431c289bd/src/library/tools/R/QC.R#L2105

with code

   if(is.call(e) || is.expression(e)) {

While examining a function definition, the arguments are stored in a 
pairlist.  The test is looking for a call or an expression, and a 
pairlist isn't any of those, so it skips over it.  I think it would work 
properly if that line was changed to

   if(is.call(e) || is.expression(e) || is.pairlist(e)) {

because then it would iterate over the arguments, and would find the use 
of a package in a default value.

Duncan Murdoch

> 
> Here's a version of your example that doesn't import anything from rlang
> using the NAMESPACE, but uses it in code:
> 
>     https://github.com/dmurdoch/imports.example/tree/explicituse
> 
> And here's one like Antoine's, where the only use is in a default value:
> 
>     https://github.com/dmurdoch/imports.example/tree/defaultvalue
> 
> The first one tests clean, the second one gives the note he was talking
> about:
> 
>    ? checking dependencies in R code ... NOTE
>      Namespace in Imports field not imported from: ?rlang?
>        All declared Imports should be used.
> 
> Duncan
> 
> On 06/02/2023 1:03 p.m., Kevin Ushey wrote:
>> Hi Antoine,
>>
>> Maybe I'm misunderstanding, but I think the warning is saying that
>> you've declared the package dependency in the DESCRIPTION file, but
>> you haven't actually imported the package (or any functions) in your
>> package NAMESPACE file?
>>
>> I put together an example package that I think satisfies the point
>> you're describing, and I don't see any R CMD check warnings (using R
>> 4.2.2).
>>
>> https://github.com/kevinushey/imports.example
>>
>> As I understand it, if you declare a package dependency in the
>> DESCRIPTION file, you need to clarify how you're using the package in
>> the NAMESPACE file -- e.g. what symbols you want to import, and so on.
>>
>> Best,
>> Kevin
>>
>> On Mon, Feb 6, 2023 at 6:43 AM Antoine Fabri <antoine.fabri at gmail.com> wrote:
>>>
>>> Dear r-devel,
>>>
>>> When a package is only used in an argument definition, e.g :
>>>
>>>
>>> f <- function(test = testthat::is_testing()) {
>>>
>>>     if (test) 1 else 2
>>>
>>> }
>>>
>>>
>>> R CMD CHECK gives us a note: "Namespace in Imports field not imported from:
>>> 'testthat'"
>>>
>>>
>>> This incites me to remove the package from the Imports field but that'll
>>> make my package brittle.
>>>
>>>
>>> I noted I'm not the first one having the issue (
>>> https://github.com/r-lib/devtools/issues/2456 ) and I've seen some
>>> workarounds too, in particular Hadley Wickham suggests in 'R packages' to
>>> use the following construct :
>>>
>>>
>>> ignore_unused_imports <- *function*() {
>>>
>>>     aaapkg::aaa_fun
>>>
>>> }
>>>
>>>
>>> That's far from obvious though, and not very satisfying.
>>>
>>> Are there any downside to removing this note in this scenario? it makes
>>> little sense to me and incites wrong behaviour AFAIU.
>>>
>>>
>>> Thanks,
>>>
>>>
>>> Antoine
>>>
>>>           [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb  6 21:47:16 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 6 Feb 2023 15:47:16 -0500
Subject: [Rd] Unnecessary note when import only used in arg definition
In-Reply-To: <3f099c2c-9b6c-f5f8-5e3e-c7d656be95de@gmail.com>
References: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
 <CAJXgQP0NhMQYRNqy8SfS4jN-kcVKFinJG4bxfROX_BEbBt5L+Q@mail.gmail.com>
 <e02220d8-9806-09dd-aee3-665479704d6d@gmail.com>
 <3f099c2c-9b6c-f5f8-5e3e-c7d656be95de@gmail.com>
Message-ID: <62b0a67b-2ce1-5adf-783b-0b462b8f7490@gmail.com>

On 06/02/2023 2:31 p.m., Duncan Murdoch wrote:
> On 06/02/2023 1:59 p.m., Duncan Murdoch wrote:
>> I think the usual rule is that a qualified use of a package is
>> sufficient to suppress the warning without any entry in the NAMESPACE
>> file.  So if there isn't something else going on, Antoine's example
>> illustrates a bug (or at least an inconsistency) in the check code.
> 
> Here's where the problem arises:
> 
> https://github.com/r-devel/r-svn/blob/7a2207dad15b8eed8c3d1c5cc49f29d431c289bd/src/library/tools/R/QC.R#L2105

Whoops, I think that's the wrong location.  I think this is the right one:

 
https://github.com/r-devel/r-svn/blob/7a2207dad15b8eed8c3d1c5cc49f29d431c289bd/src/library/tools/R/QC.R#L5754

There are two similar functions in that big source file.

Duncan Murdoch

> with code
> 
>     if(is.call(e) || is.expression(e)) {
> 
> While examining a function definition, the arguments are stored in a
> pairlist.  The test is looking for a call or an expression, and a
> pairlist isn't any of those, so it skips over it.  I think it would work
> properly if that line was changed to
> 
>     if(is.call(e) || is.expression(e) || is.pairlist(e)) {
> 
> because then it would iterate over the arguments, and would find the use
> of a package in a default value.
> 
> Duncan Murdoch
> 
>>
>> Here's a version of your example that doesn't import anything from rlang
>> using the NAMESPACE, but uses it in code:
>>
>>      https://github.com/dmurdoch/imports.example/tree/explicituse
>>
>> And here's one like Antoine's, where the only use is in a default value:
>>
>>      https://github.com/dmurdoch/imports.example/tree/defaultvalue
>>
>> The first one tests clean, the second one gives the note he was talking
>> about:
>>
>>     ? checking dependencies in R code ... NOTE
>>       Namespace in Imports field not imported from: ?rlang?
>>         All declared Imports should be used.
>>
>> Duncan
>>
>> On 06/02/2023 1:03 p.m., Kevin Ushey wrote:
>>> Hi Antoine,
>>>
>>> Maybe I'm misunderstanding, but I think the warning is saying that
>>> you've declared the package dependency in the DESCRIPTION file, but
>>> you haven't actually imported the package (or any functions) in your
>>> package NAMESPACE file?
>>>
>>> I put together an example package that I think satisfies the point
>>> you're describing, and I don't see any R CMD check warnings (using R
>>> 4.2.2).
>>>
>>> https://github.com/kevinushey/imports.example
>>>
>>> As I understand it, if you declare a package dependency in the
>>> DESCRIPTION file, you need to clarify how you're using the package in
>>> the NAMESPACE file -- e.g. what symbols you want to import, and so on.
>>>
>>> Best,
>>> Kevin
>>>
>>> On Mon, Feb 6, 2023 at 6:43 AM Antoine Fabri <antoine.fabri at gmail.com> wrote:
>>>>
>>>> Dear r-devel,
>>>>
>>>> When a package is only used in an argument definition, e.g :
>>>>
>>>>
>>>> f <- function(test = testthat::is_testing()) {
>>>>
>>>>      if (test) 1 else 2
>>>>
>>>> }
>>>>
>>>>
>>>> R CMD CHECK gives us a note: "Namespace in Imports field not imported from:
>>>> 'testthat'"
>>>>
>>>>
>>>> This incites me to remove the package from the Imports field but that'll
>>>> make my package brittle.
>>>>
>>>>
>>>> I noted I'm not the first one having the issue (
>>>> https://github.com/r-lib/devtools/issues/2456 ) and I've seen some
>>>> workarounds too, in particular Hadley Wickham suggests in 'R packages' to
>>>> use the following construct :
>>>>
>>>>
>>>> ignore_unused_imports <- *function*() {
>>>>
>>>>      aaapkg::aaa_fun
>>>>
>>>> }
>>>>
>>>>
>>>> That's far from obvious though, and not very satisfying.
>>>>
>>>> Are there any downside to removing this note in this scenario? it makes
>>>> little sense to me and incites wrong behaviour AFAIU.
>>>>
>>>>
>>>> Thanks,
>>>>
>>>>
>>>> Antoine
>>>>
>>>>            [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Feb  7 16:22:17 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 7 Feb 2023 10:22:17 -0500
Subject: [Rd] Unnecessary note when import only used in arg definition
In-Reply-To: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
References: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
Message-ID: <c1d26ab3-55ae-b8ba-0a5d-ff7454d94db5@gmail.com>

I've submitted a bug report 
(https://bugs.r-project.org/show_bug.cgi?id=18465) about this, along 
with a patch to fix it.

Duncan Murdoch

On 06/02/2023 9:42 a.m., Antoine Fabri wrote:
> Dear r-devel,
> 
> When a package is only used in an argument definition, e.g :
> 
> 
> f <- function(test = testthat::is_testing()) {
> 
>    if (test) 1 else 2
> 
> }
> 
> 
> R CMD CHECK gives us a note: "Namespace in Imports field not imported from:
> 'testthat'"
> 
> 
> This incites me to remove the package from the Imports field but that'll
> make my package brittle.
> 
> 
> I noted I'm not the first one having the issue (
> https://github.com/r-lib/devtools/issues/2456 ) and I've seen some
> workarounds too, in particular Hadley Wickham suggests in 'R packages' to
> use the following construct :
> 
> 
> ignore_unused_imports <- *function*() {
> 
>    aaapkg::aaa_fun
> 
> }
> 
> 
> That's far from obvious though, and not very satisfying.
> 
> Are there any downside to removing this note in this scenario? it makes
> little sense to me and incites wrong behaviour AFAIU.
> 
> 
> Thanks,
> 
> 
> Antoine
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Feb  8 01:13:54 2023
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 8 Feb 2023 01:13:54 +0100
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
Message-ID: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>

As preparation for the next release, I am trying to compile R devel on
RHEL / CentOS 7, which is still supported by RedHat until 2024 June.
There are two issues.

One is that the libcurl version in CentOS 7 is quite old, 7.29.0, and
R devel now requires 7.32.0, since 83715 about a week ago. This
requirement is here to stay for R 4.3.0, right?

The second is that the recommended packages are now installed with R
CMD INSTALL --use-C17, which fails on CentOS 7 with

begin installing recommended package MASS
* installing *source* package 'MASS' ...
** package 'MASS' successfully unpacked and MD5 sums checked
** using non-staged installation
** libs
Error: C17 standard requested but CC17 is not defined
* removing '/root/R-devel/library/MASS'

CentOS 7 has GCC 4.8.5, which does not have a -std=gnu17 option.
However the commit message of this change in commit 83566 hints that
this requirement might be temporary. Hence my questions.

Is the C17 requirement temporary or it will be a requirement for R 4.3.0?
Should I expect any problems if I remove the --use-C17 flag for
installing the recommended packages?

There are a lot of R users still on RHEL 7, so it would be great to
know what to expect for the next release.

Thank you,
G?bor


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Wed Feb  8 07:05:31 2023
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Wed, 8 Feb 2023 06:05:31 +0000
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
In-Reply-To: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
References: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
Message-ID: <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>

On 08/02/2023 00:13, G?bor Cs?rdi wrote:
> As preparation for the next release, I am trying to compile R devel on
> RHEL / CentOS 7, which is still supported by RedHat until 2024 June.
> There are two issues.
> 
> One is that the libcurl version in CentOS 7 is quite old, 7.29.0, and
> R devel now requires 7.32.0, since 83715 about a week ago. This
> requirement is here to stay for R 4.3.0, right?

Unless we revert it.  The comment in the manual says

@c libcurl 7.32.0 was released in Aug 2013

and Centos 7 was released in 2014-07-07, 11 months later.  Do they 
really never security-patch libcurl?

> The second is that the recommended packages are now installed with R
> CMD INSTALL --use-C17, which fails on CentOS 7 with
> 
> begin installing recommended package MASS
> * installing *source* package 'MASS' ...
> ** package 'MASS' successfully unpacked and MD5 sums checked
> ** using non-staged installation
> ** libs
> Error: C17 standard requested but CC17 is not defined
> * removing '/root/R-devel/library/MASS'
> 
> CentOS 7 has GCC 4.8.5, which does not have a -std=gnu17 option.
> However the commit message of this change in commit 83566 hints that
> this requirement might be temporary. Hence my questions.

It is temporary -- needed for survival (now updated) and mgcv (awaited). 
  However,

1) You should be able to set

CC17="gcc -std=gnu11"

in config.site, as C17 is a bug-fixed C11.

2) Centos 7 has later compilers available, and people are going to need 
them for C++.  The manual says

     ... later compilers are available: for RHEL/Centos 7 look for 
?devtoolset?.

> Is the C17 requirement temporary or it will be a requirement for R 4.3.0?
> Should I expect any problems if I remove the --use-C17 flag for
> installing the recommended packages?

Not with that compiler.

> 
> There are a lot of R users still on RHEL 7, so it would be great to
> know what to expect for the next release.
an D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From yugong @end|ng |rom out|ook@com  Wed Feb  8 10:39:18 2023
From: yugong @end|ng |rom out|ook@com (yu gong)
Date: Wed, 8 Feb 2023 09:39:18 +0000
Subject: [Rd] need help from someone know screen reader and R high DPI GUI
Message-ID: <TYAP286MB02686F8746145024D4467E29D1D89@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

hello , everyone:

 I recheck and retest about the patch about high dpi of windows R GUI ,  IMO it works mostly. Last thing I am not sure is screen reader.

 I download NVDA screen reader, and try it on high dpi R GUI , in NVDA Speech viewer,  it seems it can read R GUI normally, but since I konw so little about screen reader before.   I couldn't confirm NVDA Speech viewer indeed work on high dpi R GUI.

Could anyone who know screen reader , help me  to confirm the high dpi patch not break screen reader.

I put the patch https://github.com/armgong/misc-r-patch/blob/main/dpi-c-code.diff  .

If anyone need the compiled binary on windows x64 , I can upload it on github repo also.

thanks,

Yu Gong


	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Wed Feb  8 11:24:02 2023
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 8 Feb 2023 11:24:02 +0100
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
In-Reply-To: <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>
References: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
 <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>
Message-ID: <CALEXWq3c9Q0yNAzK0q17TBX-yJ9boxW+ZShZmha1XijAjBn=dQ@mail.gmail.com>

On Wed, 8 Feb 2023 at 07:05, Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
>
> On 08/02/2023 00:13, G?bor Cs?rdi wrote:
> > As preparation for the next release, I am trying to compile R devel on
> > RHEL / CentOS 7, which is still supported by RedHat until 2024 June.

True, but with a big asterisk. Full updates ended on 2020-08-06, and
it's been in maintenance mode since then, meaning that only security
and critical fixes are released until EOL to facilitate a transition
to a newer version. So CentOS 7 users shouldn't expect new releases of
software to be available.

> > There are two issues.
> >
> > One is that the libcurl version in CentOS 7 is quite old, 7.29.0, and
> > R devel now requires 7.32.0, since 83715 about a week ago. This
> > requirement is here to stay for R 4.3.0, right?

I suppose that if R-devel doesn't use any API endpoint not available
in 7.29, you could just patch out that requirement. Otherwise, you
would need to build your own.

> Unless we revert it.  The comment in the manual says
>
> @c libcurl 7.32.0 was released in Aug 2013
>
> and Centos 7 was released in 2014-07-07, 11 months later.  Do they
> really never security-patch libcurl?

Oh, they do port all security fixes, but without changing the version,
which is the whole point of LTS. In fact, current version is
7.29.0-59, and there are probably a hundred patches on top of those 59
builds.

> > The second is that the recommended packages are now installed with R
> > CMD INSTALL --use-C17, which fails on CentOS 7 with
> >
> > begin installing recommended package MASS
> > * installing *source* package 'MASS' ...
> > ** package 'MASS' successfully unpacked and MD5 sums checked
> > ** using non-staged installation
> > ** libs
> > Error: C17 standard requested but CC17 is not defined
> > * removing '/root/R-devel/library/MASS'
> >
> > CentOS 7 has GCC 4.8.5, which does not have a -std=gnu17 option.
> > However the commit message of this change in commit 83566 hints that
> > this requirement might be temporary. Hence my questions.
>
> It is temporary -- needed for survival (now updated) and mgcv (awaited).
>   However,
>
> 1) You should be able to set
>
> CC17="gcc -std=gnu11"
>
> in config.site, as C17 is a bug-fixed C11.
>
> 2) Centos 7 has later compilers available, and people are going to need
> them for C++.  The manual says
>
>      ... later compilers are available: for RHEL/Centos 7 look for
> ?devtoolset?.

Exactly, here is the reference:
https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/

R 3.6.0 is the last version we support in EPEL, because EPEL is not
allowed to build on top of SCL. But you can enable SCL and install the
devtoolset available, which contains gcc version 7.3.1.

But anyway, I don't think that staying in an almost 10-year old distro
in maintenance mode and at the same time expecting a cutting-edge
version of R (or any software) is reasonable.

I?aki

> > Is the C17 requirement temporary or it will be a requirement for R 4.3.0?
> > Should I expect any problems if I remove the --use-C17 flag for
> > installing the recommended packages?
>
> Not with that compiler.
>
> >
> > There are a lot of R users still on RHEL 7, so it would be great to
> > know what to expect for the next release.
> an D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
I?aki ?car


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Feb  8 14:03:58 2023
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 8 Feb 2023 14:03:58 +0100
Subject: [Rd] R-devel does not compile on OpenSUSE 15.4
Message-ID: <CABtg=KnTn+QUei+4oxPBL=So2x2i7PEXTPfdrH17AqWv6K5BGg@mail.gmail.com>

More precisely the built-in Lapack module. AFAICT this is because the
f90 files are not compiled with -fpic. My output:

make[4]: Entering directory '/tmp/R-devel/src/modules/lapack'
gfortran -fpic  -g -O2 -msse2 -mfpmath=sse  -c dlamch.f -o dlamch.o
gfortran  -fpic  -g -O2  -c dlapack.f -o dlapack.o
gfortran  -fpic  -g -O2  -c cmplx.f -o cmplx.o
gfortran  -c  la_constants.f90 -o la_constants.o
gfortran  -c  dlartg.f90 -o dlartg.o
gfortran  -c  la_xisnan.f90 -o la_xisnan.o
gfortran  -c  dlassq.f90 -o dlassq.o
gfortran  -c  zlartg.f90 -o zlartg.o
gfortran  -c  zlassq.f90 -o zlassq.o
gcc -shared -fopenmp -L/usr/local/lib64 -o libRlapack.so dlamch.o
dlapack.o cmplx.o dlartg.o dlassq.o la_constants.o la_xisnan.o
zlartg.o zlassq.o   -L"../../../lib" -lRblas -lgfortran -lm -lquadmath
/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld:
zlassq.o: warning: relocation against `__la_xisnan_MOD_disnan' in
read-only section `.text'
/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld:
dlassq.o: relocation R_X86_64_PC32 against symbol
`__la_xisnan_MOD_disnan' can not be used when making a shared object;
recompile with -fPIC
/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld:
final link failed: bad value
collect2: error: ld returned 1 exit status

If I update src/modules/lapack/Makefile.in to add $(FPICFLAGS) to the
.f90 compilation, then all is good. I assume you would also want to
add -g and -O2 here, so probably some other variable is better than
$(FPICFLAGS).

FYI,
Gabor


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Feb  8 18:21:25 2023
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 8 Feb 2023 09:21:25 -0800
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
In-Reply-To: <CALEXWq3c9Q0yNAzK0q17TBX-yJ9boxW+ZShZmha1XijAjBn=dQ@mail.gmail.com>
References: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
 <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>
 <CALEXWq3c9Q0yNAzK0q17TBX-yJ9boxW+ZShZmha1XijAjBn=dQ@mail.gmail.com>
Message-ID: <CAFDcVCTu-snQbYqSde8jhm_7YS=OYfcXKs8=oysiWU2pkUb45Q@mail.gmail.com>

I just want to add a few reasons that I know of for why users are
still on Red Hat/CentOS 7 and learned from being deeply involved with
big academic and research high-performance compute (HPC) environments.
These systems are not like your regular sailing boat, but more like a
giant container ship; much harder to navigate, slower to react, you
cannot just cruise around and pop into any harbor you like to, or when
you like to. It takes much more efforts, more logistics, and more
people to operate them. If you mess up, the damage is much bigger.

Reasons:

* Users don't have many options, but have to use what is available.

* Red Hat/CentOS is designed for long term stability and backward
compatibility. They've only done major upgrades every 3-4 years.

* Red Hat backports security fixes to old versions of common software,
which is why you see, for instance, Python 3.6 still being the
provided version, although Python made that End-of-Life in December
2021.

* HPC environments (aka "compute cluster") often have 100s to 1000s of
users. Imagine the amount of software tools and difference versions
installed in such environments.

* Upgrading an HPC environments is a major disruption for users who
rely on it in their work and research, e.g. some software stacks,
pipelines, and scripts have to reinstalled and re-coded.

* The majority of users and sysadmins prefer stability over the being
able to run the latest tools.

* Over years, stability increases the technical debt, to a point where
it is cheaper to upgrade than to stay behind.

* Even if sysadmins want to upgrade to a newer release, their hands
are often also tied, because of external factors.  For example, the
global parallel file system or the backup system you rely on has not
yet be validated for the next version of OS you want to upgrade too.
There might also be research critical scientific pipelines that does
not yet support the new version, which can be because the maintainers
of those tools don't have access to a new version to test on. GPU
drives much not be available. This is also the case for commercial
tools. Sometimes IT security requirements cannot be met on the new
version, because security scanning tools are not yet up-to-date. There
can also be hardware limitations, e.g. you might even have to replace
some central server for the whole cluster to be able to upgrade.

* Although you might want to tell everyone to just run a new version
via Linux containers, it's not the magic sauce for all of the above.
Savvy users might be able to do it, but not your average users. Also,
this basically puts the common sysadmin burden on the end-user, who
now have to keep their container stacks up-to-date and in sync.  In
contrast to a homogeneous environment, this strategy increases the
support burden on sysadms, because they will get much more questions
and request for troubleshooting on very specific setups.

Specifically to Red Hat/CentOS 7: When sites started to think about
migrating to CentOS 8, Red Hat decided to pull the plug and change
their long-term business plan.  This itself was a disruptive event,
because any plans to do a "regular" distro upgrade had to be flushed
down the toilet.  The community waited to see what would happen and
what the options would be.  A lot of sites now plan on migrating to
Rocky 8, which (AFAIU) tries to stay true to the original CentOS
mission.  This means they are waiting for third-party hardware and
software providers to validate their products for Rocky 8, e.g.
parallel file systems, backup software, software stacks, etc.

What R Core, Gabor, and many others are doing, often silently in the
background, is to make sure R works smoothly for many R users out
there, whatever operating system and version they may be on. This is
so essential to R's success, and, more importantly, for research and
science to be able to move forward.  Those endless hours spend on
trying to support some OS, even obscure ones, to pay off many times,
especially on common OSes such as Red Hat and CentOS.  You spare lots
of users and sysadmins lots of pain when you put those hours in.  So,
thank you for doing all that.

/Henrik

On Wed, Feb 8, 2023 at 2:24 AM I?aki Ucar <iucar at fedoraproject.org> wrote:
>
> On Wed, 8 Feb 2023 at 07:05, Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
> >
> > On 08/02/2023 00:13, G?bor Cs?rdi wrote:
> > > As preparation for the next release, I am trying to compile R devel on
> > > RHEL / CentOS 7, which is still supported by RedHat until 2024 June.
>
> True, but with a big asterisk. Full updates ended on 2020-08-06, and
> it's been in maintenance mode since then, meaning that only security
> and critical fixes are released until EOL to facilitate a transition
> to a newer version. So CentOS 7 users shouldn't expect new releases of
> software to be available.
>
> > > There are two issues.
> > >
> > > One is that the libcurl version in CentOS 7 is quite old, 7.29.0, and
> > > R devel now requires 7.32.0, since 83715 about a week ago. This
> > > requirement is here to stay for R 4.3.0, right?
>
> I suppose that if R-devel doesn't use any API endpoint not available
> in 7.29, you could just patch out that requirement. Otherwise, you
> would need to build your own.
>
> > Unless we revert it.  The comment in the manual says
> >
> > @c libcurl 7.32.0 was released in Aug 2013
> >
> > and Centos 7 was released in 2014-07-07, 11 months later.  Do they
> > really never security-patch libcurl?
>
> Oh, they do port all security fixes, but without changing the version,
> which is the whole point of LTS. In fact, current version is
> 7.29.0-59, and there are probably a hundred patches on top of those 59
> builds.
>
> > > The second is that the recommended packages are now installed with R
> > > CMD INSTALL --use-C17, which fails on CentOS 7 with
> > >
> > > begin installing recommended package MASS
> > > * installing *source* package 'MASS' ...
> > > ** package 'MASS' successfully unpacked and MD5 sums checked
> > > ** using non-staged installation
> > > ** libs
> > > Error: C17 standard requested but CC17 is not defined
> > > * removing '/root/R-devel/library/MASS'
> > >
> > > CentOS 7 has GCC 4.8.5, which does not have a -std=gnu17 option.
> > > However the commit message of this change in commit 83566 hints that
> > > this requirement might be temporary. Hence my questions.
> >
> > It is temporary -- needed for survival (now updated) and mgcv (awaited).
> >   However,
> >
> > 1) You should be able to set
> >
> > CC17="gcc -std=gnu11"
> >
> > in config.site, as C17 is a bug-fixed C11.
> >
> > 2) Centos 7 has later compilers available, and people are going to need
> > them for C++.  The manual says
> >
> >      ... later compilers are available: for RHEL/Centos 7 look for
> > ?devtoolset?.
>
> Exactly, here is the reference:
> https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/
>
> R 3.6.0 is the last version we support in EPEL, because EPEL is not
> allowed to build on top of SCL. But you can enable SCL and install the
> devtoolset available, which contains gcc version 7.3.1.
>
> But anyway, I don't think that staying in an almost 10-year old distro
> in maintenance mode and at the same time expecting a cutting-edge
> version of R (or any software) is reasonable.
>
> I?aki
>
> > > Is the C17 requirement temporary or it will be a requirement for R 4.3.0?
> > > Should I expect any problems if I remove the --use-C17 flag for
> > > installing the recommended packages?
> >
> > Not with that compiler.
> >
> > >
> > > There are a lot of R users still on RHEL 7, so it would be great to
> > > know what to expect for the next release.
> > an D. Ripley,                  ripley at stats.ox.ac.uk
> > Emeritus Professor of Applied Statistics, University of Oxford
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> I?aki ?car
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Feb  8 19:25:31 2023
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 8 Feb 2023 10:25:31 -0800
Subject: [Rd] 
 need help from someone know screen reader and R high DPI GUI
In-Reply-To: <TYAP286MB02686F8746145024D4467E29D1D89@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB02686F8746145024D4467E29D1D89@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <CAFDcVCS9M44S1L=obUFxVKReuTJocc8zRzWvjX_EgdNyXYpxJA@mail.gmail.com>

Thanks for this work. My suggestion would be to provide those
pre-built Windows binaries to maximize the chances to get the feedback
you need. The amount of people ready to, or have the setup to, build R
from source, especially so on MS Windows, is much smaller than those
who are willing to give it a quick try.

/Henrik

On Wed, Feb 8, 2023 at 1:39 AM yu gong <yugong at outlook.com> wrote:
>
> hello , everyone:
>
>  I recheck and retest about the patch about high dpi of windows R GUI ,  IMO it works mostly. Last thing I am not sure is screen reader.
>
>  I download NVDA screen reader, and try it on high dpi R GUI , in NVDA Speech viewer,  it seems it can read R GUI normally, but since I konw so little about screen reader before.   I couldn't confirm NVDA Speech viewer indeed work on high dpi R GUI.
>
> Could anyone who know screen reader , help me  to confirm the high dpi patch not break screen reader.
>
> I put the patch https://github.com/armgong/misc-r-patch/blob/main/dpi-c-code.diff  .
>
> If anyone need the compiled binary on windows x64 , I can upload it on github repo also.
>
> thanks,
>
> Yu Gong
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From er|cjberger @end|ng |rom gm@||@com  Wed Feb  8 20:13:45 2023
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Wed, 8 Feb 2023 21:13:45 +0200
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
In-Reply-To: <CAFDcVCTu-snQbYqSde8jhm_7YS=OYfcXKs8=oysiWU2pkUb45Q@mail.gmail.com>
References: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
 <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>
 <CALEXWq3c9Q0yNAzK0q17TBX-yJ9boxW+ZShZmha1XijAjBn=dQ@mail.gmail.com>
 <CAFDcVCTu-snQbYqSde8jhm_7YS=OYfcXKs8=oysiWU2pkUb45Q@mail.gmail.com>
Message-ID: <CAGgJW75W6XTmjxTHzf__Up3LQFA6RtN9LZpC-srg3zoXUOriYQ@mail.gmail.com>

A different route to get the "latest and greatest version of R" while
sticking with an older distribution of an OS would be via docker.

At work, our linux servers run Ubuntu 18.04 on which I run an Ubuntu 20.04
docker image with (close to) the latest version of R (4.2.2) for a shiny
app I supply across the firm.



On Wed, Feb 8, 2023 at 7:21 PM Henrik Bengtsson <henrik.bengtsson at gmail.com>
wrote:

> I just want to add a few reasons that I know of for why users are
> still on Red Hat/CentOS 7 and learned from being deeply involved with
> big academic and research high-performance compute (HPC) environments.
> These systems are not like your regular sailing boat, but more like a
> giant container ship; much harder to navigate, slower to react, you
> cannot just cruise around and pop into any harbor you like to, or when
> you like to. It takes much more efforts, more logistics, and more
> people to operate them. If you mess up, the damage is much bigger.
>
> Reasons:
>
> * Users don't have many options, but have to use what is available.
>
> * Red Hat/CentOS is designed for long term stability and backward
> compatibility. They've only done major upgrades every 3-4 years.
>
> * Red Hat backports security fixes to old versions of common software,
> which is why you see, for instance, Python 3.6 still being the
> provided version, although Python made that End-of-Life in December
> 2021.
>
> * HPC environments (aka "compute cluster") often have 100s to 1000s of
> users. Imagine the amount of software tools and difference versions
> installed in such environments.
>
> * Upgrading an HPC environments is a major disruption for users who
> rely on it in their work and research, e.g. some software stacks,
> pipelines, and scripts have to reinstalled and re-coded.
>
> * The majority of users and sysadmins prefer stability over the being
> able to run the latest tools.
>
> * Over years, stability increases the technical debt, to a point where
> it is cheaper to upgrade than to stay behind.
>
> * Even if sysadmins want to upgrade to a newer release, their hands
> are often also tied, because of external factors.  For example, the
> global parallel file system or the backup system you rely on has not
> yet be validated for the next version of OS you want to upgrade too.
> There might also be research critical scientific pipelines that does
> not yet support the new version, which can be because the maintainers
> of those tools don't have access to a new version to test on. GPU
> drives much not be available. This is also the case for commercial
> tools. Sometimes IT security requirements cannot be met on the new
> version, because security scanning tools are not yet up-to-date. There
> can also be hardware limitations, e.g. you might even have to replace
> some central server for the whole cluster to be able to upgrade.
>
> * Although you might want to tell everyone to just run a new version
> via Linux containers, it's not the magic sauce for all of the above.
> Savvy users might be able to do it, but not your average users. Also,
> this basically puts the common sysadmin burden on the end-user, who
> now have to keep their container stacks up-to-date and in sync.  In
> contrast to a homogeneous environment, this strategy increases the
> support burden on sysadms, because they will get much more questions
> and request for troubleshooting on very specific setups.
>
> Specifically to Red Hat/CentOS 7: When sites started to think about
> migrating to CentOS 8, Red Hat decided to pull the plug and change
> their long-term business plan.  This itself was a disruptive event,
> because any plans to do a "regular" distro upgrade had to be flushed
> down the toilet.  The community waited to see what would happen and
> what the options would be.  A lot of sites now plan on migrating to
> Rocky 8, which (AFAIU) tries to stay true to the original CentOS
> mission.  This means they are waiting for third-party hardware and
> software providers to validate their products for Rocky 8, e.g.
> parallel file systems, backup software, software stacks, etc.
>
> What R Core, Gabor, and many others are doing, often silently in the
> background, is to make sure R works smoothly for many R users out
> there, whatever operating system and version they may be on. This is
> so essential to R's success, and, more importantly, for research and
> science to be able to move forward.  Those endless hours spend on
> trying to support some OS, even obscure ones, to pay off many times,
> especially on common OSes such as Red Hat and CentOS.  You spare lots
> of users and sysadmins lots of pain when you put those hours in.  So,
> thank you for doing all that.
>
> /Henrik
>
> On Wed, Feb 8, 2023 at 2:24 AM I?aki Ucar <iucar at fedoraproject.org> wrote:
> >
> > On Wed, 8 Feb 2023 at 07:05, Prof Brian Ripley <ripley at stats.ox.ac.uk>
> wrote:
> > >
> > > On 08/02/2023 00:13, G?bor Cs?rdi wrote:
> > > > As preparation for the next release, I am trying to compile R devel
> on
> > > > RHEL / CentOS 7, which is still supported by RedHat until 2024 June.
> >
> > True, but with a big asterisk. Full updates ended on 2020-08-06, and
> > it's been in maintenance mode since then, meaning that only security
> > and critical fixes are released until EOL to facilitate a transition
> > to a newer version. So CentOS 7 users shouldn't expect new releases of
> > software to be available.
> >
> > > > There are two issues.
> > > >
> > > > One is that the libcurl version in CentOS 7 is quite old, 7.29.0, and
> > > > R devel now requires 7.32.0, since 83715 about a week ago. This
> > > > requirement is here to stay for R 4.3.0, right?
> >
> > I suppose that if R-devel doesn't use any API endpoint not available
> > in 7.29, you could just patch out that requirement. Otherwise, you
> > would need to build your own.
> >
> > > Unless we revert it.  The comment in the manual says
> > >
> > > @c libcurl 7.32.0 was released in Aug 2013
> > >
> > > and Centos 7 was released in 2014-07-07, 11 months later.  Do they
> > > really never security-patch libcurl?
> >
> > Oh, they do port all security fixes, but without changing the version,
> > which is the whole point of LTS. In fact, current version is
> > 7.29.0-59, and there are probably a hundred patches on top of those 59
> > builds.
> >
> > > > The second is that the recommended packages are now installed with R
> > > > CMD INSTALL --use-C17, which fails on CentOS 7 with
> > > >
> > > > begin installing recommended package MASS
> > > > * installing *source* package 'MASS' ...
> > > > ** package 'MASS' successfully unpacked and MD5 sums checked
> > > > ** using non-staged installation
> > > > ** libs
> > > > Error: C17 standard requested but CC17 is not defined
> > > > * removing '/root/R-devel/library/MASS'
> > > >
> > > > CentOS 7 has GCC 4.8.5, which does not have a -std=gnu17 option.
> > > > However the commit message of this change in commit 83566 hints that
> > > > this requirement might be temporary. Hence my questions.
> > >
> > > It is temporary -- needed for survival (now updated) and mgcv
> (awaited).
> > >   However,
> > >
> > > 1) You should be able to set
> > >
> > > CC17="gcc -std=gnu11"
> > >
> > > in config.site, as C17 is a bug-fixed C11.
> > >
> > > 2) Centos 7 has later compilers available, and people are going to need
> > > them for C++.  The manual says
> > >
> > >      ... later compilers are available: for RHEL/Centos 7 look for
> > > ?devtoolset?.
> >
> > Exactly, here is the reference:
> > https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/
> >
> > R 3.6.0 is the last version we support in EPEL, because EPEL is not
> > allowed to build on top of SCL. But you can enable SCL and install the
> > devtoolset available, which contains gcc version 7.3.1.
> >
> > But anyway, I don't think that staying in an almost 10-year old distro
> > in maintenance mode and at the same time expecting a cutting-edge
> > version of R (or any software) is reasonable.
> >
> > I?aki
> >
> > > > Is the C17 requirement temporary or it will be a requirement for R
> 4.3.0?
> > > > Should I expect any problems if I remove the --use-C17 flag for
> > > > installing the recommended packages?
> > >
> > > Not with that compiler.
> > >
> > > >
> > > > There are a lot of R users still on RHEL 7, so it would be great to
> > > > know what to expect for the next release.
> > > an D. Ripley,                  ripley at stats.ox.ac.uk
> > > Emeritus Professor of Applied Statistics, University of Oxford
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
> >
> > --
> > I?aki ?car
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @h@rt @end|ng |rom d|m@uch||e@c|  Wed Feb  8 20:24:49 2023
From: @h@rt @end|ng |rom d|m@uch||e@c| (Andrew Hart)
Date: Wed, 8 Feb 2023 16:24:49 -0300
Subject: [Rd] 
 need help from someone know screen reader and R high DPI GUI
In-Reply-To: <TYAP286MB02686F8746145024D4467E29D1D89@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB02686F8746145024D4467E29D1D89@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <4bff932b-ff0a-78de-acc9-cdeab853af31@dim.uchile.cl>

I'd be willing to give it a go if a pre-build binary set-up could be 
provided.

Cheers,
Andrew.

On 8/02/2023 6:39, yu gong wrote:
> hello , everyone:
> 
>   I recheck and retest about the patch about high dpi of windows R GUI ,  IMO it works mostly. Last thing I am not sure is screen reader.
> 
>   I download NVDA screen reader, and try it on high dpi R GUI , in NVDA Speech viewer,  it seems it can read R GUI normally, but since I konw so little about screen reader before.   I couldn't confirm NVDA Speech viewer indeed work on high dpi R GUI.
> 
> Could anyone who know screen reader , help me  to confirm the high dpi patch not break screen reader.
> 
> I put the patch https://github.com/armgong/misc-r-patch/blob/main/dpi-c-code.diff  .
> 
> If anyone need the compiled binary on windows x64 , I can upload it on github repo also.
> 
> thanks,
> 
> Yu Gong
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From |uc@r @end|ng |rom |edor@project@org  Wed Feb  8 21:22:46 2023
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 8 Feb 2023 21:22:46 +0100
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
In-Reply-To: <CAFDcVCTu-snQbYqSde8jhm_7YS=OYfcXKs8=oysiWU2pkUb45Q@mail.gmail.com>
References: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
 <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>
 <CALEXWq3c9Q0yNAzK0q17TBX-yJ9boxW+ZShZmha1XijAjBn=dQ@mail.gmail.com>
 <CAFDcVCTu-snQbYqSde8jhm_7YS=OYfcXKs8=oysiWU2pkUb45Q@mail.gmail.com>
Message-ID: <CALEXWq3Bh8V=zxSYShJOt_32-_2nc5nwQte2qcbnwgLvPOPk5Q@mail.gmail.com>

On Wed, 8 Feb 2023 at 19:59, Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> I just want to add a few reasons that I know of for why users are
> still on Red Hat/CentOS 7 and learned from being deeply involved with
> big academic and research high-performance compute (HPC) environments.
> These systems are not like your regular sailing boat, but more like a
> giant container ship; much harder to navigate, slower to react, you
> cannot just cruise around and pop into any harbor you like to, or when
> you like to. It takes much more efforts, more logistics, and more
> people to operate them. If you mess up, the damage is much bigger.

I'm fully aware of, and I understand, all the technical and
organizational reasons why there are CentOS 7 systems out there. I
only challenge a single point (cherry-picked from your list):

> * The majority of users and sysadmins prefer stability over the being
> able to run the latest tools.

This is simply not true. In general, sysadmins do prefer stability,
but users want the latest tools (otherwise, this very thread would not
exist, QED). And the first thing is hardly compatible with the second
one. That is, without containers, which brings us to the next point.

> * Although you might want to tell everyone to just run a new version
> via Linux containers, it's not the magic sauce for all of the above.
> Savvy users might be able to do it, but not your average users. Also,
> this basically puts the common sysadmin burden on the end-user, who
> now have to keep their container stacks up-to-date and in sync.  In
> contrast to a homogeneous environment, this strategy increases the
> support burden on sysadms, because they will get much more questions
> and request for troubleshooting on very specific setups.

How is that so? Let's say a user wants the latest version of R.
Nothing prevents a sysadmin to set up a script called "R" in the PATH
that runs e.g. the r2u container [1] with the proper mounts. And
that's it: the user runs "R" and receives the latest version (and even
package installations seem to be blazing fast now!) without even
knowing that it's running inside a container.

I know, you are thinking "security", "permissions"...

$ yum install podman

Drop-in replacement for docker, but rootless, daemonless. Also there's
a similar thing called Apptainer [1], formerly Singularity, that was
specifically designed with HPC in mind, now part of the Linux
Foundation.

[1] https://github.com/eddelbuettel/r2u
[2] https://apptainer.org/

> What R Core, Gabor, and many others are doing, often silently in the
> background, is to make sure R works smoothly for many R users out
> there, whatever operating system and version they may be on. This is
> so essential to R's success, and, more importantly, for research and
> science to be able to move forward.

+1000

--
I?aki ?car


From d@v|@ @end|ng |rom po@|t@co  Wed Feb  8 21:33:27 2023
From: d@v|@ @end|ng |rom po@|t@co (Davis Vaughan)
Date: Wed, 8 Feb 2023 15:33:27 -0500
Subject: [Rd] Small typo in Writing R Extensions
Message-ID: <CABzLhzyeHpWmbToTd0OCRSCg_NVvRZ2RkxRxCVzsv03jvWyAuQ@mail.gmail.com>

Hi all,

Writing R Extensions describes `R_NewEnv()` as:

```
At times it may also be useful to create a new environment frame in C
code. R_NewEnv is a C version of the R function new.env:

SEXP R_NewEnv(SEXP enclos, int hash, ins size)
```

There is a typo here where `ins size` should be `int size`.

Thanks!
Davis


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Feb  8 22:23:02 2023
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 8 Feb 2023 13:23:02 -0800
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
In-Reply-To: <CALEXWq3Bh8V=zxSYShJOt_32-_2nc5nwQte2qcbnwgLvPOPk5Q@mail.gmail.com>
References: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
 <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>
 <CALEXWq3c9Q0yNAzK0q17TBX-yJ9boxW+ZShZmha1XijAjBn=dQ@mail.gmail.com>
 <CAFDcVCTu-snQbYqSde8jhm_7YS=OYfcXKs8=oysiWU2pkUb45Q@mail.gmail.com>
 <CALEXWq3Bh8V=zxSYShJOt_32-_2nc5nwQte2qcbnwgLvPOPk5Q@mail.gmail.com>
Message-ID: <CAFDcVCSHww=YpNcrHzpmZGnHXcyFpDDXfRGtDRwZDCq8k=ZArw@mail.gmail.com>

On Wed, Feb 8, 2023 at 12:22 PM I?aki Ucar <iucar at fedoraproject.org> wrote:
>
> On Wed, 8 Feb 2023 at 19:59, Henrik Bengtsson
> <henrik.bengtsson at gmail.com> wrote:
> >
> > I just want to add a few reasons that I know of for why users are
> > still on Red Hat/CentOS 7 and learned from being deeply involved with
> > big academic and research high-performance compute (HPC) environments.
> > These systems are not like your regular sailing boat, but more like a
> > giant container ship; much harder to navigate, slower to react, you
> > cannot just cruise around and pop into any harbor you like to, or when
> > you like to. It takes much more efforts, more logistics, and more
> > people to operate them. If you mess up, the damage is much bigger.
>
> I'm fully aware of, and I understand, all the technical and
> organizational reasons why there are CentOS 7 systems out there. I
> only challenge a single point (cherry-picked from your list):
>
> > * The majority of users and sysadmins prefer stability over the being
> > able to run the latest tools.
>
> This is simply not true. In general, sysadmins do prefer stability,
> but users want the latest tools (otherwise, this very thread would not
> exist, QED). And the first thing is hardly compatible with the second
> one. That is, without containers, which brings us to the next point.

We might operate in different environments, but there are lots of labs
that keep the exact same pipeline for years (5-10 years), because "it
works", and because if they change anything, they might have to
re-analyze all their old data to avoid batch effects purely from
different versions of algorithms. I can agree with this strategy too,
especially if your data are huge and staging them back on the compute
environment from cold storage can be a huge task in itself.  Then
there are reasons such as being less savvy, and bad memories from last
time they tried this (e.g. years ago), everything broke, and it took
them weeks and months to sort it out.  I'm not trying to make fun of
anyone here - it's just that on big clusters with many users, the
skill-level spectrum varies a lot.

>
> > * Although you might want to tell everyone to just run a new version
> > via Linux containers, it's not the magic sauce for all of the above.
> > Savvy users might be able to do it, but not your average users. Also,
> > this basically puts the common sysadmin burden on the end-user, who
> > now have to keep their container stacks up-to-date and in sync.  In
> > contrast to a homogeneous environment, this strategy increases the
> > support burden on sysadms, because they will get much more questions
> > and request for troubleshooting on very specific setups.
>
> How is that so? Let's say a user wants the latest version of R.
> Nothing prevents a sysadmin to set up a script called "R" in the PATH
> that runs e.g. the r2u container [1] with the proper mounts. And
> that's it: the user runs "R" and receives the latest version (and even
> package installations seem to be blazing fast now!) without even
> knowing that it's running inside a container.
>
> I know, you are thinking "security", "permissions"...

I'm actually thinking maintenance and support. When you bring in Linux
containers, you basically introduce a bunch of new compute
environments in addition to your host system. So, instead of the
support team (often same as the sysadm) having to understand and
answer questions for a homogeneous environment, they now have to be
up-to-date with different versions of CentOS/Rocky, Ubuntu, Debian,
... and different container images. In R we often have a hard time to
even get users to report their sessionInfo() - now imagine their
container details.  If admins start providing one-off container
images, that becomes an added maintenance load. But, I agree, Linux
containers are great and makes it possible for a lot of users to run
analyzes that they otherwise would not be able to do on the host
system.

>
> $ yum install podman
>
> Drop-in replacement for docker, but rootless, daemonless. Also there's
> a similar thing called Apptainer [1], formerly Singularity, that was
> specifically designed with HPC in mind, now part of the Linux
> Foundation.
>
> [1] https://github.com/eddelbuettel/r2u
> [2] https://apptainer.org/

Yes, Singularity/Apptainer is awesome, especially since Docker is
mostly considered a no-no in HPC environments. The minimal, or even
zero use of SUID, these days, is great. That it runs as a regular
process as the users itself with good default file mounts is also
neat.  These things get even better with newer Linux kernels, which,
by the way, is another motivation for upgrading the OS.

That said, with Apptainer and likes, the user might run into conflicts
here, similar to what we see when users install software via Conda,
which often generals a parallel software stack to that of the host
system.  Taking R as an example, when a user installs packages, they
end up in R_LIBS_USER=~/R/%p-library/%v (*).  This is the same
directory regardless of running R on the host system, in a Linux
container, and in Linux containers based on different OSes.  So, if
they end up running a little bit here and there, which is not
unreasonable to expect if they work on different projects, then there
will a mishmash of R package binaries that are not compatible with
each other.  This happens a ton when people use Conda.  Of course, a
savvy user will at some point figure this out, and configure their
R_LIBS_USER to be agile to the environment they run, but the majority
won't notice this until it's too late.  And, boom, now you're adding
lots of load on the support team, and troubleshooting and undoing
these conflicts consumes a lot of wasted efforts.  In the worst case,
the user does not reach out for help, but in stead struggle in silence
and might work with something half broken.  From my experience at UCSF
(~2,000 users on two big clusters), this is unfortunately not that
uncommon.

(*) My wish would be if R could to include also the OS name and the OS
version in the default R_LIBS_USER, something like
R_LIBS_USER=~/R/%O-%p-library/%v, where %O would be a new
specification that expands to, say, "centos-7", "ubuntu-22.04".  That
would mitigate lots of these issues automatically.

Thanks for the feedback and questions,

Henrik

> > What R Core, Gabor, and many others are doing, often silently in the
> > background, is to make sure R works smoothly for many R users out
> > there, whatever operating system and version they may be on. This is
> > so essential to R's success, and, more importantly, for research and
> > science to be able to move forward.
>
> +1000
>
> --
> I?aki ?car


From d@v|@ @end|ng |rom po@|t@co  Wed Feb  8 21:51:49 2023
From: d@v|@ @end|ng |rom po@|t@co (Davis Vaughan)
Date: Wed, 8 Feb 2023 15:51:49 -0500
Subject: [Rd] On optimizing `R_NewEnv()`
Message-ID: <CABzLhzxrrV7AGg5nCwCdEzqB1aRcRcHByoAXrjiXgRMi7Q=4-A@mail.gmail.com>

Hi all,

I really like the addition of `R_NewEnv()` back in 4.1.0
https://github.com/wch/r-source/blob/625ab8d45f86f65561e53627e1f0c220bdc5f752/src/main/envir.c#L3619-L3630

I have a use case where I'm likely to call this function a large
number of times to generate many small hashed environments, so I'd
like to optimize it as far as possible.

I noticed that it takes `int size`, converts that to a SEXP for
`R_NewHashedEnv()`, which then simply converts that back to an `int`
here:
https://github.com/wch/r-source/blob/625ab8d45f86f65561e53627e1f0c220bdc5f752/src/main/envir.c#L378

I wonder if we could cut out that intermediate SEXP (along with its
protection) by adjusting `R_NewHashedEnv()` to instead take `int
size`.

I'd be happy to do a patch if that sounds good. I'd update all uses of
`R_NewHashedEnv()` to supply `int`s instead, which actually seems like
it would make every instance of calling that function simpler:
https://github.com/search?q=repo%3Awch%2Fr-source%20R_NewHashedEnv&type=code

So hopefully a win everywhere?

Thanks,
Davis


From yugong @end|ng |rom out|ook@com  Thu Feb  9 02:04:12 2023
From: yugong @end|ng |rom out|ook@com (yu gong)
Date: Thu, 9 Feb 2023 01:04:12 +0000
Subject: [Rd] 
 need help from someone know screen reader and R high DPI GUI
In-Reply-To: <4bff932b-ff0a-78de-acc9-cdeab853af31@dim.uchile.cl>
References: <TYAP286MB02686F8746145024D4467E29D1D89@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <4bff932b-ff0a-78de-acc9-cdeab853af31@dim.uchile.cl>
Message-ID: <TYAP286MB0268BF2279F726318432E1CBD1D99@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

thanks Andrew

I  upload the binary to https://github.com/armgong/misc-r-patch/releases/download/v0.0.1/r-highdpi-x64.zip

thanks,

Yu Gong

________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of Andrew Hart via R-devel <r-devel at r-project.org>
Sent: Thursday, February 9, 2023 3:24
To: r-devel at r-project.org <r-devel at r-project.org>
Subject: Re: [Rd] need help from someone know screen reader and R high DPI GUI

I'd be willing to give it a go if a pre-build binary set-up could be
provided.

Cheers,
Andrew.

On 8/02/2023 6:39, yu gong wrote:
> hello , everyone:
>
>   I recheck and retest about the patch about high dpi of windows R GUI ,  IMO it works mostly. Last thing I am not sure is screen reader.
>
>   I download NVDA screen reader, and try it on high dpi R GUI , in NVDA Speech viewer,  it seems it can read R GUI normally, but since I konw so little about screen reader before.   I couldn't confirm NVDA Speech viewer indeed work on high dpi R GUI.
>
> Could anyone who know screen reader , help me  to confirm the high dpi patch not break screen reader.
>
> I put the patch https://github.com/armgong/misc-r-patch/blob/main/dpi-c-code.diff  .
>
> If anyone need the compiled binary on windows x64 , I can upload it on github repo also.
>
> thanks,
>
> Yu Gong
>
>
>        [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Feb  9 08:54:50 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 9 Feb 2023 08:54:50 +0100
Subject: [Rd] Small typo in Writing R Extensions
In-Reply-To: <CABzLhzyeHpWmbToTd0OCRSCg_NVvRZ2RkxRxCVzsv03jvWyAuQ@mail.gmail.com>
References: <CABzLhzyeHpWmbToTd0OCRSCg_NVvRZ2RkxRxCVzsv03jvWyAuQ@mail.gmail.com>
Message-ID: <eb6dc619-733d-f226-7488-b2417dc2833c@gmail.com>


On 2/8/23 21:33, Davis Vaughan via R-devel wrote:
> Hi all,
>
> Writing R Extensions describes `R_NewEnv()` as:
>
> ```
> At times it may also be useful to create a new environment frame in C
> code. R_NewEnv is a C version of the R function new.env:
>
> SEXP R_NewEnv(SEXP enclos, int hash, ins size)
> ```
>
> There is a typo here where `ins size` should be `int size`.
Thanks, fixed now.
Tomas
>
> Thanks!
> Davis
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Feb 10 15:00:55 2023
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 10 Feb 2023 15:00:55 +0100
Subject: [Rd] R-devel does not compile on OpenSUSE 15.4
In-Reply-To: <CABtg=KnTn+QUei+4oxPBL=So2x2i7PEXTPfdrH17AqWv6K5BGg@mail.gmail.com>
References: <CABtg=KnTn+QUei+4oxPBL=So2x2i7PEXTPfdrH17AqWv6K5BGg@mail.gmail.com>
Message-ID: <CABtg=KkcuxkWOKC8yHHxZsS0sheGx3O0wbE1GiHc9v9Y-t9yCA@mail.gmail.com>

I think this was possibly a typo (ALL_FCLAGS vs ALL_FCFLAGS), plus
those flags were never set for src/modules/lapack. Hence, this seems
like a better fix, that also adds the flags to src/extra/blas.

Best,
Gabor

diff --git a/src/extra/blas/Makefile.in b/src/extra/blas/Makefile.in
index 3661416..c9b53e2 100644
--- a/src/extra/blas/Makefile.in
+++ b/src/extra/blas/Makefile.in
@@ -17,7 +17,7 @@ include $(top_builddir)/Makeconf

 ALL_CFLAGS = $(ALL_CFLAGS_LO)
 ALL_FFLAGS = $(ALL_FFLAGS_LO)
-ALL_FCLAGS = $(ALL_FFLAGS_LO)
+ALL_FCFLAGS = $(ALL_FFLAGS_LO)

 SOURCES = blas00.c blas.f cmplxblas.f blas2.f90 cmplxblas2.f90

diff --git a/src/modules/lapack/Makefile.in b/src/modules/lapack/Makefile.in
index 8e593ea..e35c956 100644
--- a/src/modules/lapack/Makefile.in
+++ b/src/modules/lapack/Makefile.in
@@ -15,6 +15,10 @@ include $(top_builddir)/Makeconf
 .f90.o:
        $(FC) $(ALL_FCFLAGS) -c @FCFLAGS_f90@ $< -o $@

+ALL_CFLAGS = $(ALL_CFLAGS_LO)
+ALL_FFLAGS = $(ALL_FFLAGS_LO)
+ALL_FCFLAGS = $(ALL_FFLAGS_LO)
+
 SOURCES_C = Lapack.c @USE_VECLIB_G95FIX_TRUE@ vecLibg95c.c
 SOURCES_F = @USE_VECLIB_G95FIX_TRUE@ vecLibg95f.f

On Wed, Feb 8, 2023 at 2:03 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> More precisely the built-in Lapack module. AFAICT this is because the
> f90 files are not compiled with -fpic. My output:
>
> make[4]: Entering directory '/tmp/R-devel/src/modules/lapack'
> gfortran -fpic  -g -O2 -msse2 -mfpmath=sse  -c dlamch.f -o dlamch.o
> gfortran  -fpic  -g -O2  -c dlapack.f -o dlapack.o
> gfortran  -fpic  -g -O2  -c cmplx.f -o cmplx.o
> gfortran  -c  la_constants.f90 -o la_constants.o
> gfortran  -c  dlartg.f90 -o dlartg.o
> gfortran  -c  la_xisnan.f90 -o la_xisnan.o
> gfortran  -c  dlassq.f90 -o dlassq.o
> gfortran  -c  zlartg.f90 -o zlartg.o
> gfortran  -c  zlassq.f90 -o zlassq.o
> gcc -shared -fopenmp -L/usr/local/lib64 -o libRlapack.so dlamch.o
> dlapack.o cmplx.o dlartg.o dlassq.o la_constants.o la_xisnan.o
> zlartg.o zlassq.o   -L"../../../lib" -lRblas -lgfortran -lm -lquadmath
> /usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld:
> zlassq.o: warning: relocation against `__la_xisnan_MOD_disnan' in
> read-only section `.text'
> /usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld:
> dlassq.o: relocation R_X86_64_PC32 against symbol
> `__la_xisnan_MOD_disnan' can not be used when making a shared object;
> recompile with -fPIC
> /usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld:
> final link failed: bad value
> collect2: error: ld returned 1 exit status
>
> If I update src/modules/lapack/Makefile.in to add $(FPICFLAGS) to the
> .f90 compilation, then all is good. I assume you would also want to
> add -g and -O2 here, so probably some other variable is better than
> $(FPICFLAGS).
>
> FYI,
> Gabor


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Fri Feb 10 17:00:44 2023
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Fri, 10 Feb 2023 17:00:44 +0100
Subject: [Rd] A delayedAssign() variant for quoted expressions
Message-ID: <DF104F0E-5EF2-4014-976C-2CD9B0AE8EB6@uzh.ch>

It is sometimes useful to create a promise using a constructed expression, but delayedAssign will always substitute the expression argument. I am currently using this pattern to achieve this:

expr <- bquote(?)
eval(call("delayedAssign", x, expr, eval.env = eval_env))

But it would be nice if base R already had a function that takes quoted promise body. It could be named delayedAssign0 or delayedAssignq (similar to evalq). The definition of such function would be trivial (just remove substitute from delayedAssign):

function (x, value, eval.env = parent.frame(1), assign.env = parent.frame(1)) .Internal(delayedAssign(x, substitute(value), eval.env, assign.env))

Maybe R maintainers could consider adding this function? I would be happy to submit a patch. 

Best, 

Taras


	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Sat Feb 11 06:38:55 2023
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Fri, 10 Feb 2023 23:38:55 -0600
Subject: [Rd] scan(..., skip=1e11): infinite loop; cannot interrupt
Message-ID: <acf79875-5042-1db1-5283-836dedd7f8a0@prodsyse.com>

Hello, All:


	  I have a 4.54 GB file that I'm trying to read in chunks using 
"scan(..., skip=__)".  It works as expected for small values of "skip" 
but goes into an infinite loop for "skip=1e11" and similar large values 
of skip:  I cannot even interrupt it;  I must kill R.  Below please find 
sessionInfo() with a toy example.


	  My real problem is a large corrupted Thunderbird email file.  It's 
file type "Mork", which is mostly standard characters with "\n" between 
records of varying length.


	  Is there some other function in R that allows me to read chunks of a 
large file like this?


	  Thanks,
	  Spencer Graves


writeLines(as.character(1:11), 'tstNums.txt')
(Tst2 <- scan('tstNums.txt', n=12, skip=5))
# works: 6 7 8 9 10 11
(Tst13 <- scan('tstNums.txt', n=12, skip=13))
# works: numeric(0)
(tst1e11 <- scan('tst.txt', n=12, skip=1e11))
# Goes into an infinite loop that I cannot even interrupt.
# I must kill R and start over.


sessionInfo()
R version 4.2.2 (2022-10-31)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 11.7.3

Matrix products: default
LAPACK: 
/Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
  [1] compiler_4.2.2  fastmap_1.1.0   cli_3.6.0       htmltools_0.5.4
  [5] tools_4.2.2     rstudioapi_0.14 yaml_2.3.6      rmarkdown_2.20
  [9] knitr_1.41      xfun_0.36       digest_0.6.31   rlang_1.0.6
[13] evaluate_0.20


From kry|ov@r00t @end|ng |rom gm@||@com  Sat Feb 11 09:33:16 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Sat, 11 Feb 2023 11:33:16 +0300
Subject: [Rd] scan(..., skip=1e11): infinite loop; cannot interrupt
In-Reply-To: <acf79875-5042-1db1-5283-836dedd7f8a0@prodsyse.com>
References: <acf79875-5042-1db1-5283-836dedd7f8a0@prodsyse.com>
Message-ID: <20230211113316.44dd813a@Tarkus>


On Fri, 10 Feb 2023 23:38:55 -0600
Spencer Graves <spencer.graves at prodsyse.com> wrote:

> I have a 4.54 GB file that I'm trying to read in chunks using 
> "scan(..., skip=__)".  It works as expected for small values of
> "skip" but goes into an infinite loop for "skip=1e11" and similar
> large values of skip:  I cannot even interrupt it;  I must kill R.

Skipping lines is done by two nested loops. The outer loop counts the
lines to skip; the inner loop reads characters until it encounters a
newline or end of file. The outer loop doesn't check for EOF and keeps
asking for more characters until the inner loop runs at least once for
every line it wants to skip. The following patch should avoid the
wait in such cases:

--- src/main/scan.c	(revision 83797)
+++ src/main/scan.c	(working copy)
@@ -835,7 +835,7 @@
 attribute_hidden SEXP do_scan(SEXP call, SEXP op, SEXP args, SEXP rho)
 {
     SEXP ans, file, sep, what, stripwhite, dec, quotes, comstr;
-    int c, flush, fill, blskip, multiline, escapes, skipNul;
+    int c = 0, flush, fill, blskip, multiline, escapes, skipNul;
     R_xlen_t nmax, nlines, nskip;
     const char *p, *encoding;
     RCNTXT cntxt;
@@ -952,7 +952,7 @@
 	    if(!data.con->canread)
 		error(_("cannot read from this connection"));
 	}
-	for (R_xlen_t i = 0; i < nskip; i++) /* MBCS-safe */
+	for (R_xlen_t i = 0; i < nskip && c != R_EOF; i++) /* MBCS-safe */
 	    while ((c = scanchar(FALSE, &data)) != '\n' && c != R_EOF);
     }
 

Making it interruptible is a bit more work: we need to ensure that a
valid context is set up and check regularly for an interrupt.

--- src/main/scan.c	(revision 83797)
+++ src/main/scan.c	(working copy)
@@ -835,7 +835,7 @@
 attribute_hidden SEXP do_scan(SEXP call, SEXP op, SEXP args, SEXP rho)
 {
     SEXP ans, file, sep, what, stripwhite, dec, quotes, comstr;
-    int c, flush, fill, blskip, multiline, escapes, skipNul;
+    int c = 0, flush, fill, blskip, multiline, escapes, skipNul;
     R_xlen_t nmax, nlines, nskip;
     const char *p, *encoding;
     RCNTXT cntxt;
@@ -952,8 +952,6 @@
 	    if(!data.con->canread)
 		error(_("cannot read from this connection"));
 	}
-	for (R_xlen_t i = 0; i < nskip; i++) /* MBCS-safe */
-	    while ((c = scanchar(FALSE, &data)) != '\n' && c != R_EOF);
     }
 
     ans = R_NilValue;		/* -Wall */
@@ -966,6 +964,10 @@
     cntxt.cend = &scan_cleanup;
     cntxt.cenddata = &data;
 
+    if (ii) for (R_xlen_t i = 0, j = 0; i < nskip && c != R_EOF; i++) /* MBCS-safe */
+	while ((c = scanchar(FALSE, &data)) != '\n' && c != R_EOF)
+	    if (j++ % 10000 == 9999) R_CheckUserInterrupt();
+
     switch (TYPEOF(what)) {
     case LGLSXP:
     case INTSXP:

This way, even if you pour a Decanter of Endless Lines (e.g. mkfifo
LINES; perl -E'print "A"x42 while 1;' > LINES) into scan(), it can
still be interrupted, even if neither newline nor EOF ever arrives.
(We never skip lines when reading from the console? I suppose it makes
sense. I think this needs to be documented and can write a
documentation patch.)

If you actually have 1e11 lines in your file and would like to read it
in chunks, it may help to use

f <- file('...')
chunk1 <- scan(f, n = n1, skip = nskip1)
# the following will continue reading where chunk1 had ended
chunk2 <- scan(f, n = n2, skip = nskip2)

...in order to avoid having to skip over chunks you have already read,
which otherwise makes the algorithm quadratic in number of lines
instead of linear. (I couldn't determine whether you're already doing
this, sorry.)

Skipping a fixed number of lines is hard: since they have variable
length, it's required to read every character in order to determine
whether it starts a new line. With byte ranges, it would have been
possible to use seek(), but not here.

-- 
Best regards,
Ivan


From D@v|d@C@Sterr@tt @end|ng |rom ed@@c@uk  Sat Feb 11 12:12:04 2023
From: D@v|d@C@Sterr@tt @end|ng |rom ed@@c@uk (David Sterratt)
Date: Sat, 11 Feb 2023 11:12:04 +0000
Subject: [Rd] Unable to load Windows NETIO.SYS and WINSPOOL.DRV DLLs
Message-ID: <64d8c5ea00cccbbd6bb7f92a506e97d2e9f5168a.camel@ed.ac.uk>

I am trying to build the RGtk2 package
(https://github.com/lawremi/RGtk2) using R-devel and only the libraries
bundled with RTookl4.3 (currently RGtk2 is bundled with a compiled dll
and requires GTK libraries to be downloaded after installation into R).

I have used the instructions at
https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
to create a Makevars.win file (appended, including description of how
the PKG_LIBS have been set).

The package can be installed, but the shared object created can't be
loaded:

   > library(RGtk2)
   Error in inDL(x, as.logical(local), as.logical(now), ...) :
     unable to load shared object 'C:/Users/David
   Sterratt/AppData/Local/R/win-library/4.3/RGtk2/libs/x
   64/RGtk2.dll':
     LoadLibrary failure:  The specified module could not be found.

WinDbg output reveals errors loading "NETIO.SYS" and "WINSPOOL.DRV"
when running "library(RGtk2)":

   0c64:0640 @ 44312812 - LdrpProcessWork - ERROR: Unable to load DLL:
"NETIO.SYS", Parent Module: "C:\Users\David
Sterratt\AppData\Local\R\win-library\4.3\RGtk2\libs\x64\RGtk2.dll",
Status: 0xc0000135
   ...
   0c64:1e5c @ 44312812 - LdrpProcessWork - ERROR: Unable to load DLL:
"WINSPOOL.DRV", Parent Module: "C:\Users\David
Sterratt\AppData\Local\R\win-library\4.3\RGtk2\libs\x64\RGtk2.dll",
Status: 0xc0000135
   ...
   0c64:00e4 @ 44312828 - LdrpProcessWork - ERROR: Unable to load DLL:
"C:\Users\David Sterratt\AppData\Local\R\win-
library\4.3\RGtk2\libs\x64\RGtk2.dll", Parent Module: "(null)", Status:
0xc0000135

I'm stuck at this point: I'm not a regular Windows User, and I've not
been able to find any trustworthy advice online about how to deal with
missing DLLs. Any help would be appreciated.

There is an issue on Github about this issue with full output from
WinDbg:
https://github.com/lawremi/RGtk2/issues/9

Best wishes,

David

* * *

Contents of Makevars.win:

# Use the linking_order script to determine library order
# Install the latest version of R-devel from
https://cran.r-project.org/
# Install Rtools43 from https://cran.r-project.org/
# Open the Rtools43 Bash shell
## Set Paths to R and various tools
# export PATH="/c/Program Files/R/R-devel/bin":$PATH
# export PATH=/x86_64-w64-mingw32.static.posix/bin/:$PATH
## Install pkg-config and add path
# pacman -Syy pkg-config
# PKG_CONFIG_PATH=/x86_64-w64-
mingw32.static.posix/lib/pkgconfig/:$PKG_CONFIG_PATH

# Install a package in R using install.pacakges(), which will set the
personal library path
# https://cran.r-project.org/bin/windows/base/howto-R-4.2.html
#  ./linking_order/findLinkingOrder RGtk2/RGtk2/ /tmp/RGtk2.libs
/c/rtools42/x86_64-w64-mingw32.static.posix/lib

# pkg-config.exe --static --cflags  gtk+-2.0
# Add these flags: -D_R_=1 -DUSE_R=1 -I. -I../inst/include
PKG_CPPFLAGS = -I/usr/lib/mxe/usr/x86_64-w64-
mingw32.static.posix/include/pango-1.0 -I/usr/lib/mxe/usr/x86_64-w64-
mingw32.static.posix/include/gtk-2.0 -I/usr/lib/mxe/usr/x86_64-w64-
mingw32.static.posix/lib/gtk-2.0/include -I/usr/lib/mxe/usr/x86_64-w64-
mingw32.static.posix/include/atk-1.0 -I/usr/lib/mxe/usr/x86_64-w64-
mingw32.static.posix/include -I/usr/lib/mxe/usr/x86_64-w64-
mingw32.static.posix/include/cairo -I/usr/lib/mxe/usr/x86_64-w64-
mingw32.static.posix/include/gdk-pixbuf-2.0 -DPCRE2_STATIC -
I/usr/lib/mxe/usr/x86_64-w64-mingw32.static.posix/include/libpng16 -
I/usr/lib/mxe/usr/x86_64-w64-mingw32.static.posix/include/harfbuzz -
I/usr/lib/mxe/usr/x86_64-w64-mingw32.static.posix/include/fribidi -
DFRIBIDI_LIB_STATIC -I/usr/lib/mxe/usr/x86_64-w64-
mingw32.static.posix/include/freetype2 -I/usr/lib/mxe/usr/x86_64-w64-
mingw32.static.posix/include/glib-2.0 -I/usr/lib/mxe/usr/x86_64-w64-
mingw32.static.posix/lib/glib-2.0/include -I/usr/lib/mxe/usr/x86_64-
w64-mingw32.static.posix/include/pixman-1 -pthread -mms-bitfields -
D_R_=1 -DUSE_R=1 -I. -I../inst/include

# Use the linking_order script to determine library order by setting
# the PKG_LIBS below, then running (repeatedly)
# ./linking_order/findLinkingOrder RGtk2/RGtk2/ /tmp/RGtk2.libs
# PKG_LIBS = -Wl,--no-demangle $(shell cat /tmp/RGtk2.libs)

# This is the set of PKG_LIBS found by findLinkingOrder
# PKG_LIBS = -lgtk-win32-2.0 -lwinspool -lspoolss -lgdk-win32-2.0 -
lcomdlg32 -lcomctl32 -latk-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -
lpangowin32-1.0 -lpangoft2-1.0 -lcairo -ldwrite -lpango-1.0 -lpixman-1
-lmsimg32 -lfontconfig -lgio-2.0 -lfribidi -lexpat -lnetio -liphlpapi -
lgobject-2.0 -lgmodule-2.0 -ldnsapi -lffi -lharfbuzz_too -lfreetype_too
-lharfbuzz -lglib-2.0 -lfreetype -luuid -lpcre2-8 -lpng16 -lpng -lbz2 -
lole32 -limm32 -lgdi32 -ltiff -lwebpdecoder -lwebp -llzma -ljpeg -
lcfitsio -lzstd -lz -lintl -liconv -lwsock32 -lws2_32 -lshlwapi

# There are duplicated symbols between -lcfitsio and -lz - remove -
lcfitsio
PKG_LIBS = -lgtk-win32-2.0 -lwinspool -lspoolss -lgdk-win32-2.0 -
lcomdlg32 -lcomctl32 -latk-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -
lpangowin32-1.0 -lpangoft2-1.0 -lcairo -ldwrite -lpango-1.0 -lpixman-1
-lmsimg32 -lfontconfig -lgio-2.0 -lfribidi -lexpat -lnetio -liphlpapi -
lgobject-2.0 -lgmodule-2.0 -ldnsapi -lffi -lharfbuzz_too -lfreetype_too
-lharfbuzz -lglib-2.0 -lfreetype -luuid -lpcre2-8 -lpng16 -lpng -lbz2 -
lole32 -limm32 -lgdi32 -ltiff -lwebpdecoder -lwebp -llzma -ljpeg -lzstd
-lz -lintl -liconv -lwsock32 -lws2_32 -lshlwapi


--
David Sterratt, Lecturer https://www.ed.ac.uk/profile/sterratt
Institute for Adaptive and Neural Computation     tel: +44 131 651 1739
School of Informatics, University of Edinburgh
Appleton Tower, 11 Crichton Street, Edinburgh EH8 9LE, Scotland
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
BOOK: Principles of Computational Modelling in Neuroscience
Sterratt, Graham, Gillies & Willshaw (CUP, 2011).
http://www.compneuroprinciples.org



The University of Edinburgh is a charitable body, registered in Scotland, with registration number SC005336. Is e buidheann carthannais a th? ann an Oilthigh Dh?n ?ideann, cl?raichte an Alba, ?ireamh cl?raidh SC005336.

From pdev@|p|ne @end|ng |rom berke|ey@edu  Sat Feb 11 19:01:35 2023
From: pdev@|p|ne @end|ng |rom berke|ey@edu (Perry de Valpine)
Date: Sat, 11 Feb 2023 10:01:35 -0800
Subject: [Rd] inconsistent use of optim's parscale in Hessian vs gradient
Message-ID: <CABeTmqjnREecftHjosBg1X46J=uRmQuZbkzhqaSz3aEdZt3Vfw@mail.gmail.com>

Dear r-devel:

I noticed that optim's finite-element derivative approximations operate on
par/parscale for the gradient (as documented in help(optim)) but on par for
the Hessian. (The same goes for optimHess, which calls the same Hessian
code.)  This seems odd, so I am wondering if it is intended.

Maybe this is all well known, and thanks if all it takes is pointing me to
any existing information on it.

Here is an example (all toy values). When parscale has its default value of
1, the issue doesn't arise.  By printing the input, we can see what grid
points are being used.

foo <- function(x) {print(x); x^4}
.External2(stats:::C_optimhess, 1, foo, NULL, list(fnscale = 1, parscale =
1, ndeps = 0.02))

With parscale = 1 and ndeps = 0.02, the grid points for 2nd derivative at x
= 1 are:
x + 0.02, x - 0.02
and then the grid points for the 1st derivative around each of those are
x + 0.02 + 0.02, x + 0.02 - 0.02 for the first (around x + 0.02), and
x - 0.02 + 0.02, x - 0.02 - 0.02 for the second (around x - 0.02).

This all makes sense. There is no problem yet.  (There is one more function
evaluation than needed, but that's not the point.)

(BTW, I'm evaluating the Hessian at 1 instead of the optimum at 0 for
illustration, but really it is just the grid points that illustrate the
issue.)

But with parscale != 1, we can see that the epsilons are used on different
scales at different steps:

.External2(stats:::C_optimhess, 1, foo, NULL, list(fnscale = 1, parscale =
3, ndeps = 0.02))

The grid points for the 2nd derivative at x = 1 are the same as above, so
they are on the par scale:
x + 0.02, x - 0.02
but the grid points for the 1st derivatives then use par/parscale, giving
x + 0.02 + 0.06, x + 0.02 - 0.06 for the first, and
x - 0.02 + 0.06, x - 0.02 - 0.06 for the second

The 0.06 increments are from 0.02 increments on par/parscale, which is then
multiplied by parscale=3 before calling foo.  Is this intended?

I believe the 2nd derivative increments on the scale of par occur at lines
461-462 of src/library/stats/src/optim.c, in optimhess, and the 1st
derivative increments on the scale of par/parscale occur at lines 138 and
146 of the same file, in fmingr.

A curious consequence in two dimensions is that the Hessian with respect to
x[1] and then x[2] uses a different four grid points than the Hessian with
respect to x[2] and then x[1], if they have different parscales.

foo2 <- function(x) {print(x); sum(x^4)}
.External2(stats:::C_optimhess, c(1,1), foo2,
           NULL, list(fnscale = 1, parscale = c(3,2), ndeps = c(0.02,
0.02)))

This prints the input x values from 16 calls to foo2, comprising 4 calls
for each of the 4 Hessian elements.

The grid points for dx[1] dx[2] are lines 3-4 and 7-8 of the output, which
are
[1] 1.02 1.04
[1] 1.02 0.96
[1] 0.98 1.04
[1] 0.98 0.96
So the dx[1] steps are on par while the dx[2] steps are on par/parscale.

The grid points for dx[2] dx[1] are lines 9-10 and 13-14 of the output,
which are
[1] 1.06 1.02
[1] 0.94 1.02
[1] 1.06 0.98
[1] 0.94 0.98
So the dx[2] steps are on par while the dx[1] steps are on par/parscale.

The code on lines 472-477 of optim.c symmetrizes the two approximations of
the same second derivative (from dx[1] dx[2] and dx[2] dx[1]) by
averaging.  This may be helpful numerically in any case, but was it
intended to be averaging over two potentially different grid schemes?

That these are the grid points being used can be confirmed by direct
computation and comparison to the value returned by optimHess.

Thanks for any insight on this.
Perry

	[[alternative HTML version deleted]]


From ch|r|com @end|ng |rom goog|e@com  Sun Feb 12 06:07:39 2023
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Sat, 11 Feb 2023 21:07:39 -0800
Subject: [Rd] Line-terminal \ in character consants -- missing from ?Quotes ?
Message-ID: <CAD7Bkx91sEPFAwSc_od5UgOZ7tW9=k43hRgWVi8srv2nnLgh9w@mail.gmail.com>

I'm coming across some code that uses the fact the parser ignores a
line-terminal '\', e.g.

identical("\
", "\n")
# [1] TRUE

x = "abc \
def"
y = "abc \ndef"
identical(x, y)
# [1] TRUE

However:
identical("\\n", "\n")
# [1] FALSE

This appears to be undocumented behavior; the closest thing I see in
?Quotes suggests it should be an error:

> Escaping a character not in the following table is an error.

('\n' is in the table, but my understanding is the 'n' is what's being
escaped v-a-v the "error", which seems confirmed by the third, FALSE,
example above)

Is this a bug, is the omission from ?Quotes a bug, or is this just
undocumented behavior?

Mike C


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Feb 12 12:38:28 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 12 Feb 2023 06:38:28 -0500
Subject: [Rd] 
 Line-terminal \ in character consants -- missing from ?Quotes ?
In-Reply-To: <CAD7Bkx91sEPFAwSc_od5UgOZ7tW9=k43hRgWVi8srv2nnLgh9w@mail.gmail.com>
References: <CAD7Bkx91sEPFAwSc_od5UgOZ7tW9=k43hRgWVi8srv2nnLgh9w@mail.gmail.com>
Message-ID: <2461a1f3-4be7-54df-a37c-3e789fb875cb@gmail.com>

On 12/02/2023 12:07 a.m., Michael Chirico via R-devel wrote:
> I'm coming across some code that uses the fact the parser ignores a
> line-terminal '\', e.g.
> 
> identical("\
> ", "\n")
> # [1] TRUE
> 
> x = "abc \
> def"
> y = "abc \ndef"
> identical(x, y)
> # [1] TRUE
> 
> However:
> identical("\\n", "\n")
> # [1] FALSE
> 
> This appears to be undocumented behavior; the closest thing I see in
> ?Quotes suggests it should be an error:
> 
>> Escaping a character not in the following table is an error.
> 
> ('\n' is in the table, but my understanding is the 'n' is what's being
> escaped v-a-v the "error", which seems confirmed by the third, FALSE,
> example above)
> 
> Is this a bug, is the omission from ?Quotes a bug, or is this just
> undocumented behavior?

In your first example, you have a backslash which says to escape the 
next char.  The next char is a newline char.  The result is an escaped 
newline, which apparently is a newline.

The same thing happens in the second example.

The third example is an escaped backslash, i.e. a backslash, followed by 
n.  That's not the same as an escaped n, which gives a newline.

So I think the behaviour might be reasonable.

The thing I'd worry about is whether things are handled properly on 
Windows, where the newline is two characters (CR LF).  It might be that 
the backslash at the end of the line escapes the CR, and you get a \r 
out of it instead of a \n.  But maybe not, the parser knows about CR LF 
and internally converts it to \n, so if that happens early enough, 
things would be fine.

Duncan Murdoch


From ch|r|com @end|ng |rom goog|e@com  Sun Feb 12 19:39:19 2023
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Sun, 12 Feb 2023 10:39:19 -0800
Subject: [Rd] 
 Line-terminal \ in character consants -- missing from ?Quotes ?
In-Reply-To: <2461a1f3-4be7-54df-a37c-3e789fb875cb@gmail.com>
References: <CAD7Bkx91sEPFAwSc_od5UgOZ7tW9=k43hRgWVi8srv2nnLgh9w@mail.gmail.com>
 <2461a1f3-4be7-54df-a37c-3e789fb875cb@gmail.com>
Message-ID: <CAD7Bkx-FxG_3i1Doszd5uYMA2ztfLyFYMWe6XEw4FZuGQ_jc0Q@mail.gmail.com>

I'm still hung up on ?Quotes -- I can't see mention of 'newline' as a
valid escape. It mentions the literal sequence '\' 'n', where 'n' is
being escaped.

Glanced at the parser blame and apparently the terminal '\' is the
older behavior, and what I'm used to, i.e. literal newlines in char
constants to make multi-line strings, is new (though still 20 years
old):

https://github.com/r-devel/r-svn/commit/bc3f20e4e686be556877bb6bd2882ae8029fd17f

The NEWS entry there does say the same thing as you -- "escaping the
newlines with backslashes".

>From the parser, I think ?Quotes is just missing "newline" as being a
valid escaped character, c.f.

https://github.com/r-devel/r-svn/blob/f55b24945d56e824f124638c596b99887441354a/src/main/gram.y#L2823-L2830
('\n' is treated like '\')
https://github.com/r-devel/r-svn/blob/f55b24945d56e824f124638c596b99887441354a/src/main/gram.y#L2978-L3008
('\n' is in the list of valid items after '\')

I don't see any special handling for '\r', so there may be a gap in
the R parser? Or I just don't understand what I'm reading in the
parser :)

Mike C

On Sun, Feb 12, 2023 at 3:38 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 12/02/2023 12:07 a.m., Michael Chirico via R-devel wrote:
> > I'm coming across some code that uses the fact the parser ignores a
> > line-terminal '\', e.g.
> >
> > identical("\
> > ", "\n")
> > # [1] TRUE
> >
> > x = "abc \
> > def"
> > y = "abc \ndef"
> > identical(x, y)
> > # [1] TRUE
> >
> > However:
> > identical("\\n", "\n")
> > # [1] FALSE
> >
> > This appears to be undocumented behavior; the closest thing I see in
> > ?Quotes suggests it should be an error:
> >
> >> Escaping a character not in the following table is an error.
> >
> > ('\n' is in the table, but my understanding is the 'n' is what's being
> > escaped v-a-v the "error", which seems confirmed by the third, FALSE,
> > example above)
> >
> > Is this a bug, is the omission from ?Quotes a bug, or is this just
> > undocumented behavior?
>
> In your first example, you have a backslash which says to escape the
> next char.  The next char is a newline char.  The result is an escaped
> newline, which apparently is a newline.
>
> The same thing happens in the second example.
>
> The third example is an escaped backslash, i.e. a backslash, followed by
> n.  That's not the same as an escaped n, which gives a newline.
>
> So I think the behaviour might be reasonable.
>
> The thing I'd worry about is whether things are handled properly on
> Windows, where the newline is two characters (CR LF).  It might be that
> the backslash at the end of the line escapes the CR, and you get a \r
> out of it instead of a \n.  But maybe not, the parser knows about CR LF
> and internally converts it to \n, so if that happens early enough,
> things would be fine.
>
> Duncan Murdoch
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb 13 14:37:22 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 13 Feb 2023 08:37:22 -0500
Subject: [Rd] An interesting chat with ChatGPT
Message-ID: <3d7bd521-d670-4b90-6be4-a3528d726f5b@gmail.com>

I was wondering which anchor would match in the regular expression 
"(a)|(b)" if both "a" and "b" matches the target string.  What appears 
to happen is that the first match wins, and that's how it is documented 
in Python, but I was looking for docs on this in R.

As far as I can see, the ?regex help page doesn't resolve this. So just 
for fun, I decided to ask ChatGPT, and got an interesting response.  I 
won't show the whole conversation here, but just some extracts:

---------------------------------------
Me:  In a regular expression in R, if both "a" and "b" match, which does 
"(a)|(b)" match?  Please include authoritative references in your answer.

ChatGPT: [long answer about grep]

Me:  In grep(), it doesn't matter which of a or b matches.  It's only in 
sub() or gsub() that it makes a difference.  Do you know an 
authoritative reference that discusses those functions?

ChatGPT:  [long irrelevant answer about sub and gsub, with a reference 
to "R Cookbook" by P. Teetor.]

Me:  Teetor's book is not authoritative, and the other reference doesn't 
discuss ambiguous alternation.

... finally we get to the interesting part ...

ChatGPT: I apologize for the mistake in my previous answer.

A more authoritative reference for the behavior of regular expressions 
in R can be found in the official R documentation.

Regarding the behavior of ambiguous alternation, the regex section of 
the manual "An Introduction to R" explains it as follows:

"When several alternatives are possible, the first alternative is 
chosen, so it is important to specify alternatives in the order in which 
they should be tried."

Here is the reference for the official R documentation:

     "An Introduction to R" manual: 
https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Regular-expression-facilities

I hope this reference provides the information you were looking for.
---------------------------------------


All right, an authoritative answer!  The only problem is that *it 
doesn't exist*.  There's no such anchor in that document.  R-intro isn't 
a very rapidly changing document, so I could look at every change 
recorded in svn, and that section has *never* existed.

I guess ChatGPT is a pattern matching machine, and if such a question 
had an answer, it would probably be in a location like that.  (I would 
have guessed a help page like ?regex instead of R-intro, but I had just 
told it that answer was wrong.)

Duncan Murdoch


From @eb@meyer @end|ng |rom |@u@de  Mon Feb 13 15:44:44 2023
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Mon, 13 Feb 2023 15:44:44 +0100
Subject: [Rd] R2HTML doesn't split paragraphs originating from
 \Sexpr[results=rd]
In-Reply-To: <20230205160425.1e35a036@Tarkus>
References: <20230205160425.1e35a036@Tarkus>
Message-ID: <592b33e5-1bc4-f87b-7ff5-8293545eacbe@fau.de>

I can confirm this is a bug, more specifically, a regression in R >= 
3.6.0. I think a report in R's Bugzilla would be useful.

A possible workaround seems to be to start the Rd-generating \Sexpr in 
column 1 of the Rd file, so to remove the indentation before \Sexpr.

AFAICS, fixing this will require tools:::processRdChunk() to keep two 
types of source references for dynamically generated Rd code: the 
effective "srcref" from parsing the Rd fragment, and the one that refers 
to the source Sexpr block (possibly called "wholeSrcref"), to be used by 
checkRd() in preference to "srcref" when reporting the location of Rd 
problems.

	Sebastian Meyer


Am 05.02.23 um 14:04 schrieb Ivan Krylov:
> Hello,
> 
> Here's an example that renders correctly using Rd2txt / Rd2latex / R
> CMD Rd2pdf, but has problems under Rd2HTML:
> 
> \name{foo}
> \title{foo}
> \section{foo}{
>    This should be on a separate paragraph
> 
>    This should be on a separate paragraph
> 
>    This should be on a separate paragraph
> 
>    \Sexpr[stage=render,results=rd]{
>      paste(
>        rep('Sexpr: This should be on a separate paragraph', 3),
>        collapse = '\n\n'
>      )
>    }
> }
> 
> For the text I've typed manually, there are <p>...</p> tags splitting
> the text separated by empty lines into paragraphs. The \Sexpr return
> value only has newlines, which joints the paragraphs together:
> 
> <p>This should be on a separate paragraph
> </p>
> <p>This should be on a separate paragraph
> </p>
> <p>This should be on a separate paragraph
> </p>
> <p>Sexpr: This should be on a separate paragraph
> 
> Sexpr: This should be on a separate paragraph
> 
> Sexpr: This should be on a separate paragraph
> </p>
> 
> addParaBreaks() is prevented from closing the paragraph tag because
> tools:::isBlankLineRd() returns FALSE for blank lines produced by a
> \Sexpr. This happens because utils:::getSrcByte() not 1 for these blank
> lines. That, in turn, is because the source reference for \Sexpr values
> is the whole \Sexpr tag:
> 
> # blank line from a \Sexpr
> Rd[[3]][[2]][[9]][[2]]
> # [1] "\n"
> # attr(,"Rd_tag")
> # [1] "TEXT"
> getSrcref(Rd[[3]][[2]][[9]][[2]])
> # \Sexpr[stage=render,results=rd]{
> #   paste(
> #     rep('Sexpr: This should be on a separate paragraph', 3),
> #     collapse = '\n\n'
> #   )
> # }
> 
> # artisanal hand-crafted blank line
> Rd[[3]][[2]][[7]]
> # [1] "\n"
> # attr(,"Rd_tag")
> # [1] "TEXT"
> summary(getSrcref(Rd[[3]][[2]][[7]]))
> # <srcref: file "~/foo.Rd" chars 9:1 to 9:1>
> 
> I think I understand that tools:::isBlankLineRd requires
> utils:::getSrcByte(x) == 1L because it may be called on things like
> "\\eqn{0}\n" where the terminal "\n" might otherwise be considered a
> "blank line". How to reconcile isBlankLineRd with blank lines not
> directly originating from Rd source?
> 
> Rd2latex might have a similar problem (its addParaBreaks() checks for
> isBlankLineRd()), but then it works anyway because Rd rules for
> paragraph breaks on blank lines are the same as in LaTeX.
>


From bor|@@@te|pe @end|ng |rom utoronto@c@  Mon Feb 13 16:54:43 2023
From: bor|@@@te|pe @end|ng |rom utoronto@c@ (Boris Steipe)
Date: Mon, 13 Feb 2023 15:54:43 +0000
Subject: [Rd] An interesting chat with ChatGPT
In-Reply-To: <3d7bd521-d670-4b90-6be4-a3528d726f5b@gmail.com>
References: <3d7bd521-d670-4b90-6be4-a3528d726f5b@gmail.com>
Message-ID: <3909C1CD-AC89-465F-81E2-98D46ECE01AA@utoronto.ca>

Duncan -

Indeed, this has now been well documented; I have called these constructions "Schr?dinger Facts", since they arise from a superposition of truths in the training data that collapse into an untruth when observed.

   https://sentientsyllabus.substack.com/p/chatgpts-achilles-heel

Now, the curious question is: why can it program. Why is its production of R-syntax less vulnerable to this effect than a literature quote, or reference? Maybe it has to do with the fact that in producing correct syntax there is a ground truth - errors just will not run. But I'm not sure.

Regardless: it signals that we need a reinvigorated culture of validation. Actually ChatGPT will happily make test data for you. Whisvh. in a way, it judt did  ;-)


Boris




> On 2023-02-13, at 08:37, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> I was wondering which anchor would match in the regular expression "(a)|(b)" if both "a" and "b" matches the target string.  What appears to happen is that the first match wins, and that's how it is documented in Python, but I was looking for docs on this in R.
> 
> As far as I can see, the ?regex help page doesn't resolve this. So just for fun, I decided to ask ChatGPT, and got an interesting response.  I won't show the whole conversation here, but just some extracts:
> 
> ---------------------------------------
> Me:  In a regular expression in R, if both "a" and "b" match, which does "(a)|(b)" match?  Please include authoritative references in your answer.
> 
> ChatGPT: [long answer about grep]
> 
> Me:  In grep(), it doesn't matter which of a or b matches.  It's only in sub() or gsub() that it makes a difference.  Do you know an authoritative reference that discusses those functions?
> 
> ChatGPT:  [long irrelevant answer about sub and gsub, with a reference to "R Cookbook" by P. Teetor.]
> 
> Me:  Teetor's book is not authoritative, and the other reference doesn't discuss ambiguous alternation.
> 
> ... finally we get to the interesting part ...
> 
> ChatGPT: I apologize for the mistake in my previous answer.
> 
> A more authoritative reference for the behavior of regular expressions in R can be found in the official R documentation.
> 
> Regarding the behavior of ambiguous alternation, the regex section of the manual "An Introduction to R" explains it as follows:
> 
> "When several alternatives are possible, the first alternative is chosen, so it is important to specify alternatives in the order in which they should be tried."
> 
> Here is the reference for the official R documentation:
> 
>    "An Introduction to R" manual: https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Regular-expression-facilities
> 
> I hope this reference provides the information you were looking for.
> ---------------------------------------
> 
> 
> All right, an authoritative answer!  The only problem is that *it doesn't exist*.  There's no such anchor in that document.  R-intro isn't a very rapidly changing document, so I could look at every change recorded in svn, and that section has *never* existed.
> 
> I guess ChatGPT is a pattern matching machine, and if such a question had an answer, it would probably be in a location like that.  (I would have guessed a help page like ?regex instead of R-intro, but I had just told it that answer was wrong.)
> 
> Duncan Murdoch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


--
Boris Steipe MD, PhD

Professor em.
Department of Biochemistry 
Temerty Faculty of Medicine
University of Toronto




From kev|n@r@coombe@ @end|ng |rom gm@||@com  Mon Feb 13 18:14:28 2023
From: kev|n@r@coombe@ @end|ng |rom gm@||@com (Kevin Coombes)
Date: Mon, 13 Feb 2023 12:14:28 -0500
Subject: [Rd] An interesting chat with ChatGPT
In-Reply-To: <3909C1CD-AC89-465F-81E2-98D46ECE01AA@utoronto.ca>
References: <3d7bd521-d670-4b90-6be4-a3528d726f5b@gmail.com>
 <3909C1CD-AC89-465F-81E2-98D46ECE01AA@utoronto.ca>
Message-ID: <CAHJ+2V+bqqD5UZ_9yPT4H=bLPvPcDNkhOXtQ-1KCu7u6EiJ1xg@mail.gmail.com>

Chat bots are like politicians, or talking dogs. The fact that they exist
is interesting. But no same person would believe anything they say.

On Mon, Feb 13, 2023, 10:58 AM Boris Steipe <boris.steipe at utoronto.ca>
wrote:

> Duncan -
>
> Indeed, this has now been well documented; I have called these
> constructions "Schr?dinger Facts", since they arise from a superposition of
> truths in the training data that collapse into an untruth when observed.
>
>    https://sentientsyllabus.substack.com/p/chatgpts-achilles-heel
>
> Now, the curious question is: why can it program. Why is its production of
> R-syntax less vulnerable to this effect than a literature quote, or
> reference? Maybe it has to do with the fact that in producing correct
> syntax there is a ground truth - errors just will not run. But I'm not sure.
>
> Regardless: it signals that we need a reinvigorated culture of validation.
> Actually ChatGPT will happily make test data for you. Whisvh. in a way, it
> judt did  ;-)
>
>
> Boris
>
>
>
>
> > On 2023-02-13, at 08:37, Duncan Murdoch <murdoch.duncan at gmail.com>
> wrote:
> >
> > I was wondering which anchor would match in the regular expression
> "(a)|(b)" if both "a" and "b" matches the target string.  What appears to
> happen is that the first match wins, and that's how it is documented in
> Python, but I was looking for docs on this in R.
> >
> > As far as I can see, the ?regex help page doesn't resolve this. So just
> for fun, I decided to ask ChatGPT, and got an interesting response.  I
> won't show the whole conversation here, but just some extracts:
> >
> > ---------------------------------------
> > Me:  In a regular expression in R, if both "a" and "b" match, which does
> "(a)|(b)" match?  Please include authoritative references in your answer.
> >
> > ChatGPT: [long answer about grep]
> >
> > Me:  In grep(), it doesn't matter which of a or b matches.  It's only in
> sub() or gsub() that it makes a difference.  Do you know an authoritative
> reference that discusses those functions?
> >
> > ChatGPT:  [long irrelevant answer about sub and gsub, with a reference
> to "R Cookbook" by P. Teetor.]
> >
> > Me:  Teetor's book is not authoritative, and the other reference doesn't
> discuss ambiguous alternation.
> >
> > ... finally we get to the interesting part ...
> >
> > ChatGPT: I apologize for the mistake in my previous answer.
> >
> > A more authoritative reference for the behavior of regular expressions
> in R can be found in the official R documentation.
> >
> > Regarding the behavior of ambiguous alternation, the regex section of
> the manual "An Introduction to R" explains it as follows:
> >
> > "When several alternatives are possible, the first alternative is
> chosen, so it is important to specify alternatives in the order in which
> they should be tried."
> >
> > Here is the reference for the official R documentation:
> >
> >    "An Introduction to R" manual:
> https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Regular-expression-facilities
> >
> > I hope this reference provides the information you were looking for.
> > ---------------------------------------
> >
> >
> > All right, an authoritative answer!  The only problem is that *it
> doesn't exist*.  There's no such anchor in that document.  R-intro isn't a
> very rapidly changing document, so I could look at every change recorded in
> svn, and that section has *never* existed.
> >
> > I guess ChatGPT is a pattern matching machine, and if such a question
> had an answer, it would probably be in a location like that.  (I would have
> guessed a help page like ?regex instead of R-intro, but I had just told it
> that answer was wrong.)
> >
> > Duncan Murdoch
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
> --
> Boris Steipe MD, PhD
>
> Professor em.
> Department of Biochemistry
> Temerty Faculty of Medicine
> University of Toronto
>
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Tue Feb 14 09:31:02 2023
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Tue, 14 Feb 2023 08:31:02 +0000
Subject: [Rd] Documentation bug?
Message-ID: <4d27638cae924911bcd282d4d0388a93@chu-rouen.fr>

Dead R developers,

In R-devel  2023-02-11 and older R versions, there is a note in the "lm {stats}" help page specifying that:
> Offsets specified by offset will not be included in predictions by predict.lm<http://127.0.0.1:12534/library/stats/help/predict.lm>, whereas those specified by an offset term in the formula will be.

However, the source code as well as basic tests seem to show that both types of offset terms are always used in predictions.
a<-data.frame(off=1:4, outcome=4:1)
mod<-lm(data=a, outcome~1, offset=off)
coef(a) # intercept is zero
predict(mod) # returns 1:4, which uses offset
predict(mod, newdata=data.frame(off=c(3,2,5))) # returns c(3,2,5) which uses the new offset

When looking at the history of R source code, this note seems to exist from R 1.0.0 while the source code of predict.lm already called eval(object$call$offset, newdata)
https://github.com/SurajGupta/r-source/blob/1.0.0/src/library/base/R/lm.R
https://github.com/SurajGupta/r-source/blob/1.0.0/src/library/base/man/lm.Rd

Version 0.99.0 did not contain the note, but already had the call to eval(object$call$offset, newdata)
https://github.com/SurajGupta/r-source/blob/0.99.0/src/library/base/man/lm.Rd
https://github.com/SurajGupta/r-source/blob/0.99.0/src/library/base/R/lm.R

The actual behavior of R seems to be sane to me, but unless I miss something, this looks like a documentation bug.
It seems to have bugged someone before:
https://stackoverflow.com/questions/71264495/why-is-predict-not-ignoring-my-offset-from-a-poisson-model-in-r-no-matter-how-i

Digging deeper in R history, it seems that this note was also found in "glm {stats}" in R 1.0.0 but was removed in R 1.4.1. Maybe somebody forgot to remove it in "lm {stats}" too.

--
Sincerely
Andr? GILLIBERT

	[[alternative HTML version deleted]]


From @eb@meyer @end|ng |rom |@u@de  Tue Feb 14 10:31:38 2023
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Tue, 14 Feb 2023 10:31:38 +0100
Subject: [Rd] Documentation bug?
In-Reply-To: <4d27638cae924911bcd282d4d0388a93@chu-rouen.fr>
References: <4d27638cae924911bcd282d4d0388a93@chu-rouen.fr>
Message-ID: <e67b70ef-dbcc-5598-d85a-5a6383892cdc@fau.de>

Thanks. The note is indeed outdated since at least R 2.9.0 with NEWS

     o	predict.lm() now works correctly when the fit had more than
	one offset (possibly specified both in the formula and as an
	argument).  This function is called by predict.glm(), so the
	same isses are corrected there.

It has now been removed from ?lm in r83832 in the trunk (ported to 
R-patched).

	Sebastian Meyer


Am 14.02.23 um 09:31 schrieb GILLIBERT, Andre via R-devel:
> Dead R developers,
> 
> In R-devel  2023-02-11 and older R versions, there is a note in the "lm {stats}" help page specifying that:
>> Offsets specified by offset will not be included in predictions by predict.lm<http://127.0.0.1:12534/library/stats/help/predict.lm>, whereas those specified by an offset term in the formula will be.
> 
> However, the source code as well as basic tests seem to show that both types of offset terms are always used in predictions.
> a<-data.frame(off=1:4, outcome=4:1)
> mod<-lm(data=a, outcome~1, offset=off)
> coef(a) # intercept is zero
> predict(mod) # returns 1:4, which uses offset
> predict(mod, newdata=data.frame(off=c(3,2,5))) # returns c(3,2,5) which uses the new offset
> 
> When looking at the history of R source code, this note seems to exist from R 1.0.0 while the source code of predict.lm already called eval(object$call$offset, newdata)
> https://github.com/SurajGupta/r-source/blob/1.0.0/src/library/base/R/lm.R
> https://github.com/SurajGupta/r-source/blob/1.0.0/src/library/base/man/lm.Rd
> 
> Version 0.99.0 did not contain the note, but already had the call to eval(object$call$offset, newdata)
> https://github.com/SurajGupta/r-source/blob/0.99.0/src/library/base/man/lm.Rd
> https://github.com/SurajGupta/r-source/blob/0.99.0/src/library/base/R/lm.R
> 
> The actual behavior of R seems to be sane to me, but unless I miss something, this looks like a documentation bug.
> It seems to have bugged someone before:
> https://stackoverflow.com/questions/71264495/why-is-predict-not-ignoring-my-offset-from-a-poisson-model-in-r-no-matter-how-i
> 
> Digging deeper in R history, it seems that this note was also found in "glm {stats}" in R 1.0.0 but was removed in R 1.4.1. Maybe somebody forgot to remove it in "lm {stats}" too.
> 
> --
> Sincerely
> Andr? GILLIBERT
> 
> 	[[alternative HTML version deleted]]
> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From H_R_O @end|ng |rom gmx@de  Tue Feb 14 12:11:33 2023
From: H_R_O @end|ng |rom gmx@de (Roman Hille)
Date: Tue, 14 Feb 2023 12:11:33 +0100
Subject: [Rd] long path names (more than 260 chars) not working under
 Windows OS, longPathAware missing in exe manifests?
References: <f26b4adbcb5b47d6a0b4511147d3515c@steagextern.com>
Message-ID: <trinity-452df670-bcac-49eb-8392-90eb9248cdee-1676373093807@3c-app-gmx-bs60>

Can you help please?

All file und dir funktions and also basename() do not work in R under Windows OS
if the path is longer than?260?characters.
The problem seems to be, that the manifest for all R executables do not have the longPathAware switch in the manifest.
(The registry and or the group policy for the long path name support are enabled)

This is the correct extension for the manifest of the executables.
<ws2:longPathAware>true</ws2:longPathAware>

Is it possible to add this into all manifests for windows executables?
Or is ther an other opportunity?

Snippet from Microsoft:

<application xmlns="urn:schemas-microsoft-com:asm.v3">
<windowsSettings xmlns:ws2="http://schemas.microsoft.com/SMI/2016/WindowsSettings">
<ws2:longPathAware>true</ws2:longPathAware>
</windowsSettings>
</application>

Roman


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Feb 14 15:49:46 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 14 Feb 2023 15:49:46 +0100
Subject: [Rd] long path names (more than 260 chars) not working under
 Windows OS, longPathAware missing in exe manifests?
In-Reply-To: <trinity-452df670-bcac-49eb-8392-90eb9248cdee-1676373093807@3c-app-gmx-bs60>
References: <f26b4adbcb5b47d6a0b4511147d3515c@steagextern.com>
 <trinity-452df670-bcac-49eb-8392-90eb9248cdee-1676373093807@3c-app-gmx-bs60>
Message-ID: <26d849ec-ee03-7ac7-de9a-fee0aca4edd7@gmail.com>

On 2/14/23 12:11, Roman Hille wrote:
> Can you help please?
>
> All file und dir funktions and also basename() do not work in R under Windows OS
> if the path is longer than?260?characters.
> The problem seems to be, that the manifest for all R executables do not have the longPathAware switch in the manifest.
> (The registry and or the group policy for the long path name support are enabled)
>
> This is the correct extension for the manifest of the executables.
> <ws2:longPathAware>true</ws2:longPathAware>
>
> Is it possible to add this into all manifests for windows executables?
> Or is ther an other opportunity?
>
> Snippet from Microsoft:
>
> <application xmlns="urn:schemas-microsoft-com:asm.v3">
> <windowsSettings xmlns:ws2="http://schemas.microsoft.com/SMI/2016/WindowsSettings">
> <ws2:longPathAware>true</ws2:longPathAware>
> </windowsSettings>
> </application>

Declaring that R is long path aware is indeed easy, however, before we 
can do this, we actually have to make it long path aware, which is a lot 
of work. Incidentally it is work in progress, I've been working on that 
in the last few weeks.

Currently, neither R-devel nor any released version of R is long path 
aware. One possible work-around is to use mapped drives to make the 
paths shorter.

Whenever possible, it is better to make the paths short, anyway, because 
a number of other applications as well as some parts of Windows don't 
support long paths. Very likely this will also be the case of 
contributed packages. Indeed, and consequently, a number of users will 
not enable long paths on their systems.

Best
Tomas

>
> Roman
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ggrothend|eck @end|ng |rom gm@||@com  Tue Feb 14 19:45:39 2023
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Tue, 14 Feb 2023 13:45:39 -0500
Subject: [Rd] package.skeleton hello* files
Message-ID: <CAP01uRmCD_1KDZ=qh7TCMjJCtTqra1JM0aw88JpwJ15p+JYSdQ@mail.gmail.com>

Is there some way to avoid the automatic generation of hello* files in
package.skeleton?
I found that the following does it on Windows but then it does not
create an R directory which I still
want and also it gives warnings which I don't want.
package.skeleton(code_files = "NUL")

-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From Ben@Engber@ @end|ng |rom Be-Log|c@|@n|  Wed Feb 15 01:24:26 2023
From: Ben@Engber@ @end|ng |rom Be-Log|c@|@n| (Ben Engbers)
Date: Wed, 15 Feb 2023 01:24:26 +0100
Subject: [Rd] Question on non-blocking socket
Message-ID: <68ce63b0-7e91-6372-6926-59f3fcfffd25@Be-Logical.nl>

Hi,

December 27, 2021 I started a thread asking for help troubleshooting 
non-blocking sockets.
While developing the RBaseX client, I had issues with the authentication 
process. It eventually turned out that a short break had to be inserted 
in this process between sending the credentials to the server and 
requesting the status. Tomas Kalibera put me on the right track by 
drawing my attention to the 'socketSelect' function. I don't know 
exactly the purpose of this function is (the function itself is 
documented, but I can't find any information for which situations this 
function should be called.) but it sufficed to call this function once 
between sending and requesting.

I have two questions.
The first is where I can find R documentation on proper use of 
non-blocking sockets and on the proper use of the socketSelect function?

The second question is more focused on using non-blocking sockets in 
general. Is it allowed to execute a read and a receive command 
immediately after each other or must a short waiting loop be built in.
I'm asking this because I'm running into the same problems in a C++ 
project as I did with RBaseX.

Ben Engbers


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Feb 15 14:38:08 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 15 Feb 2023 14:38:08 +0100
Subject: [Rd] Question on non-blocking socket
In-Reply-To: <68ce63b0-7e91-6372-6926-59f3fcfffd25@Be-Logical.nl>
References: <68ce63b0-7e91-6372-6926-59f3fcfffd25@Be-Logical.nl>
Message-ID: <1ba5f439-c317-816f-ec0c-9bc03f38840b@gmail.com>


On 2/15/23 01:24, Ben Engbers wrote:
> Hi,
>
> December 27, 2021 I started a thread asking for help troubleshooting 
> non-blocking sockets.
> While developing the RBaseX client, I had issues with the 
> authentication process. It eventually turned out that a short break 
> had to be inserted in this process between sending the credentials to 
> the server and requesting the status. Tomas Kalibera put me on the 
> right track by drawing my attention to the 'socketSelect' function. I 
> don't know exactly the purpose of this function is (the function 
> itself is documented, but I can't find any information for which 
> situations this function should be called.) but it sufficed to call 
> this function once between sending and requesting.
>
> I have two questions.
> The first is where I can find R documentation on proper use of 
> non-blocking sockets and on the proper use of the socketSelect function?

In addition to the demos I sent to you in that 2021 thread on 
R-pkg-devel, you could also have a look at how it is used in R itself, 
in the parallel package, in snowSOCK.R, to set up the snow cluster in 
parallel. Some hints may be also found in the blog post 
https://blog.r-project.org/2020/03/17/socket-connections-update/. But, 
in principle, R API is just a thin layer on top of what the OS provides, 
so general literature and tutorials on sockets should help, there should 
be even textbooks used at CS universities in networking classes.

Basically select() can tell you when data is ready (on input), when the 
socket interface is able to accept more data (on output) or when there 
is an incoming connection. In practice, you should not need any delays 
to be inserted in your program to make it work - if that is needed, it 
means that is an error in it (a race condition). If the program is 
polling (checking in a loop whether something has already happened, and 
then sleeping for a short while), the duration of the sleep may indeed 
influence latency, but should not affect correctness - if it does, there 
is an error.

> The second question is more focused on using non-blocking sockets in 
> general. Is it allowed to execute a read and a receive command 
> immediately after each other or must a short waiting loop be built in.
> I'm asking this because I'm running into the same problems in a C++ 
> project as I did with RBaseX.

No, in general there is no need to insert any delays between reads and 
writes, they can actually happen concurrently. But these are general 
networking questions, not the topic of this list.

Best
Tomas

>
> Ben Engbers
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From kry|ov@r00t @end|ng |rom gm@||@com  Wed Feb 15 14:57:19 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Wed, 15 Feb 2023 16:57:19 +0300
Subject: [Rd] Question on non-blocking socket
In-Reply-To: <68ce63b0-7e91-6372-6926-59f3fcfffd25@Be-Logical.nl>
References: <68ce63b0-7e91-6372-6926-59f3fcfffd25@Be-Logical.nl>
Message-ID: <20230215165719.19becef1@arachnoid>

? Wed, 15 Feb 2023 01:24:26 +0100
Ben Engbers <Ben.Engbers at Be-Logical.nl> ?????:

> where I can find R documentation on proper use of non-blocking
> sockets and on the proper use of the socketSelect function?

A useful guide to the Berkeley sockets API can be found at
<https://beej.us/guide/bgnet/>. You'll have to translate between the C
idioms and the R idioms, but it's better than having no guide at all.
In particular, R spares you from having to figure out differently-sized
struct sockaddr objects by converting them to string representations of
the addresses (currently limited to IPv4).

-- 
Best regards,
Ivan


From er|c@bern@rd1 @end|ng |rom m|che||n@com  Wed Feb 15 16:21:26 2023
From: er|c@bern@rd1 @end|ng |rom m|che||n@com (Eric Bernard)
Date: Wed, 15 Feb 2023 15:21:26 +0000
Subject: [Rd] =?windows-1252?q?End_of_Support_Date_of_Version_3_of_=93R?=
 =?windows-1252?q?=94?=
Message-ID: <PA4PR09MB4640DAA912FCA79DF20B27C8DAA39@PA4PR09MB4640.eurprd09.prod.outlook.com>


Hello !

Good day.

I?d like to know what is the End of Support Date of Version 3 of ?R?.

Thanks for your answer.

Have a good day.

Best Regards

Eric Bernard
DCTI/BS/EC

Cordialement.

Eric Bernard
Michelin
DCTI/BS/EC


	[[alternative HTML version deleted]]


From ben@engber@ @end|ng |rom gm@||@com  Wed Feb 15 16:44:05 2023
From: ben@engber@ @end|ng |rom gm@||@com (Ben Engbers)
Date: Wed, 15 Feb 2023 16:44:05 +0100
Subject: [Rd] Question on non-blocking socket
In-Reply-To: <1ba5f439-c317-816f-ec0c-9bc03f38840b@gmail.com>
References: <68ce63b0-7e91-6372-6926-59f3fcfffd25@Be-Logical.nl>
 <1ba5f439-c317-816f-ec0c-9bc03f38840b@gmail.com>
Message-ID: <c7460122-2ee1-4f61-e0b5-b0626d407f6c@Be-Logical.nl>

Hi

Op 15-02-2023 om 14:38 schreef Tomas Kalibera:
> On 2/15/23 01:24, Ben Engbers wrote:
>> Hi,
>>
>> December 27, 2021 I started a thread asking for help troubleshooting 
>> non-blocking sockets.
..

>> I have two questions.
>> The first is where I can find R documentation on proper use of 
>> non-blocking sockets and on the proper use of the socketSelect function?
> 
> In addition to the demos I sent to you in that 2021 thread on 
> R-pkg-devel, you could also have a look at how it is used in R itself, 
> in the parallel package, in snowSOCK.R, to set up the snow cluster in 
> parallel. Some hints may be also found in the blog post 
> https://blog.r-project.org/2020/03/17/socket-connections-update/. But, 
> in principle, R API is just a thin layer on top of what the OS provides, 
> so general literature and tutorials on sockets should help, there should 
> be even textbooks used at CS universities in networking classes.
Thanks for the suggestions!

> Basically select() can tell you when data is ready (on input), when the 
> socket interface is able to accept more data (on output) or when there 
> is an incoming connection. In practice, you should not need any delays 
> to be inserted in your program to make it work - if that is needed, it 
> means that is an error in it (a race condition). If the program is 
> polling (checking in a loop whether something has already happened, and 
> then sleeping for a short while), the duration of the sleep may indeed 
> influence latency, but should not affect correctness - if it does, there 
> is an error.

In RBaseX I first calculate an MD5 hash that is send to the server and 
then I check the status byte that is returned by the server.

writeBin(auth, private$conn)
socketSelect(list(conn))
Accepted <- readBin(conn, what = "raw", n = 1) == 0

Without the second line, 'Accepted' is always FALSE. With this line it 
is TRUE.

BaseX provides example API's in several languages. I've looked at 
several but indeed none uses any form of delay.
All API's follow the same pattern, calculate a MD5, send it to the 
server and check the status byte. So the server is not likely to enforce 
a delay. So there is nothing left but to look for that racing condition ;-(

Ben


From m@rc_@chw@rtz @end|ng |rom me@com  Wed Feb 15 16:55:00 2023
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Wed, 15 Feb 2023 10:55:00 -0500
Subject: [Rd] =?utf-8?q?End_of_Support_Date_of_Version_3_of_=E2=80=9CR?=
 =?utf-8?b?4oCd?=
In-Reply-To: <PA4PR09MB4640DAA912FCA79DF20B27C8DAA39@PA4PR09MB4640.eurprd09.prod.outlook.com>
References: <PA4PR09MB4640DAA912FCA79DF20B27C8DAA39@PA4PR09MB4640.eurprd09.prod.outlook.com>
Message-ID: <etPan.63ed0054.3f129855.3bdb@me.com>

Hi,

R's software development life cycle is documented here:

??https://www.r-project.org/doc/R-SDLC.pdf

This is available via the Certification link, under Documentation, on the main R Project web page:

??https://www.r-project.org

Section 4.4 of the document, on page 10, covers the release cycles, and section 4.6, on page 11, covers maintenance, support and retirement.

Section 4.6 includes the following text at the end of that section on page 12:

"The x.y.0 releases are maintained via a series of x.y.z patch releases. At a new x.y.0 version of R, the prior version is retired from formal support. R Core?s efforts are then focused on the new Release (and the on-going Development) version. No further development, bug fixes or patches are made available for the retired versions. Thus there is always only one current version of R. However, the SVN repository will allow older release branches to be reopened, should the need arise."


Version 4.0.0 of R was released on April 24, 2020, thus ending formal support for version 3.x.x, with the last 3.x.x version being 3.6.3, which was released on February 29, 2020.

Regards,

Marc Schwartz


On February 15, 2023 at 10:21:26 AM, Eric Bernard (eric.bernard1 at michelin.com (mailto:eric.bernard1 at michelin.com)) wrote:

>
> Hello !
>
> Good day.
>
> I'd like to know what is the End of Support Date of Version 3 of R.
>
> Thanks for your answer.
>
> Have a good day.
>
> Best Regards
>
> Eric Bernard
> DCTI/BS/EC
>
> Cordialement.
>
> Eric Bernard
> Michelin
> DCTI/BS/EC
>
>
> [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Feb 15 17:17:24 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 15 Feb 2023 17:17:24 +0100
Subject: [Rd] Question on non-blocking socket
In-Reply-To: <c7460122-2ee1-4f61-e0b5-b0626d407f6c@Be-Logical.nl>
References: <68ce63b0-7e91-6372-6926-59f3fcfffd25@Be-Logical.nl>
 <1ba5f439-c317-816f-ec0c-9bc03f38840b@gmail.com>
 <c7460122-2ee1-4f61-e0b5-b0626d407f6c@Be-Logical.nl>
Message-ID: <d2424a96-d047-4216-a90b-5f49327eaa38@gmail.com>


On 2/15/23 16:44, Ben Engbers wrote:
> Hi
>
> Op 15-02-2023 om 14:38 schreef Tomas Kalibera:
>> On 2/15/23 01:24, Ben Engbers wrote:
>>> Hi,
>>>
>>> December 27, 2021 I started a thread asking for help troubleshooting 
>>> non-blocking sockets.
> ..
>
>>> I have two questions.
>>> The first is where I can find R documentation on proper use of 
>>> non-blocking sockets and on the proper use of the socketSelect 
>>> function?
>>
>> In addition to the demos I sent to you in that 2021 thread on 
>> R-pkg-devel, you could also have a look at how it is used in R 
>> itself, in the parallel package, in snowSOCK.R, to set up the snow 
>> cluster in parallel. Some hints may be also found in the blog post 
>> https://blog.r-project.org/2020/03/17/socket-connections-update/. 
>> But, in principle, R API is just a thin layer on top of what the OS 
>> provides, so general literature and tutorials on sockets should help, 
>> there should be even textbooks used at CS universities in networking 
>> classes.
> Thanks for the suggestions!
>
>> Basically select() can tell you when data is ready (on input), when 
>> the socket interface is able to accept more data (on output) or when 
>> there is an incoming connection. In practice, you should not need any 
>> delays to be inserted in your program to make it work - if that is 
>> needed, it means that is an error in it (a race condition). If the 
>> program is polling (checking in a loop whether something has already 
>> happened, and then sleeping for a short while), the duration of the 
>> sleep may indeed influence latency, but should not affect correctness 
>> - if it does, there is an error.
>
> In RBaseX I first calculate an MD5 hash that is send to the server and 
> then I check the status byte that is returned by the server.
>
> writeBin(auth, private$conn)
> socketSelect(list(conn))
> Accepted <- readBin(conn, what = "raw", n = 1) == 0
>
> Without the second line, 'Accepted' is always FALSE. With this line it 
> is TRUE.
>
> BaseX provides example API's in several languages. I've looked at 
> several but indeed none uses any form of delay.
> All API's follow the same pattern, calculate a MD5, send it to the 
> server and check the status byte. So the server is not likely to 
> enforce a delay. So there is nothing left but to look for that racing 
> condition ;-(

Without knowing more details, this looks ok. If you have a non-blocking 
connection, and the server produces a response based on the client 
request, the client has to take into account that it takes the server 
some time to produce the response. Right, the sockets are full duplex 
and so could be the communication protocol, but in this case it 
apparently isn't, it is request/response.

Without the second line, there would be a race condition between the 
server sending a response and the client receiving it. With the second 
line, the client waits for the server before it starts receiving. In 
theory, one could be waiting for the response actively in a loop 
(polling), but socketSelect() is better. Both ways would resolve the 
race condition. Adding a single fixed-time wait, instead, would not 
remove the race condition, because one can never be sure that the server 
wouldn't take longer (apart from waiting too long most of the time).

In the example you are waiting only for a single byte. But if the 
response may be longer, one needs to take into account in the client 
that not all bytes of the response may be available right away. One 
would keep receiving the data in a loop, as they become available (e.g. 
socketSelect() would tell), keep appending them to a buffer, and keep 
looking for when they are complete.

Tomas

>
> Ben


From m@rk@c|ement@ @end|ng |rom k|@@e  Thu Feb 16 12:58:18 2023
From: m@rk@c|ement@ @end|ng |rom k|@@e (Mark Clements)
Date: Thu, 16 Feb 2023 11:58:18 +0000
Subject: [Rd] User-defined RNG with the standalone Rmath library
Message-ID: <GV3P280MB0001B9D723662634F5650DB1F0A09@GV3P280MB0001.SWEP280.PROD.OUTLOOK.COM>

I have two questions about using a user-defined random number generator (RNG) with the standalone Rmath library. The default RNG with the standalone Rmath library is the Marsaglia-multicarry generator, which has poor properties. The "R Installation and Administration" manual, in the section "The standalone Rmath library", states that:

```
A little care is needed to use the random-number routines. You will need to supply the uniform random number generator

    double unif_rand(void)

or use the one supplied (and with a shared library or DLL you may have to use the one supplied, which is the Marsaglia-multicarry with an entry point

    set_seed(unsigned int, unsigned int)

to set its seeds).
```

I interpret this to mean that we cannot use a user-defined random number generator with "a shared library or DLL", which suggests using static linking.

Question: are there any good examples of re-defining unif_rand() with the standalone Rmath library?

As an example, we could set up a file test.c:

  #define MATHLIB_STANDALONE
  #include <Rmath.h>
  #include <stdio.h>
  double unif_rand(void) { return 0.5; }
  int main() {
    printf("%f\n", unif_rand());
    printf("%f\n", runif(0, 1));
    return 0;
  }

If we compile using -static, then we get the correct result (two values of 0.5):

  gcc -static -o test test.c -lRmath -lm
  ./test
: 0.500000
: 0.500000

Question: does this code work for other users?

Sincerely, Mark.


N?r du skickar e-post till Karolinska Institutet (KI) inneb?r detta att KI kommer att behandla dina personuppgifter. H?r finns information om hur KI behandlar personuppgifter<https://ki.se/medarbetare/integritetsskyddspolicy>.


Sending email to Karolinska Institutet (KI) will result in KI processing your personal data. You can read more about KI?s processing of personal data here<https://ki.se/en/staff/data-protection-policy>.

From kry|ov@r00t @end|ng |rom gm@||@com  Thu Feb 16 15:09:09 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Thu, 16 Feb 2023 17:09:09 +0300
Subject: [Rd] Robustifying R_CleanTempDir a bit more
Message-ID: <20230216170909.42e6894e@arachnoid>

Hello,

This is probably a very minor point, but R_CleanTempDir may still have
a shell injection in it. I couldn't find a way to shoot the user in the
foot in a significant way (by, say, accidentally removing ~), thanks to
R disallowing spaces in the path, but if Sys_TempDir somehow acquires a
value of "/tmp/';echo;'", R_CleanTempDir() will remove /tmp instead of
its aptly-named subdirectory.

While adding the single-quote symbol to the list of special symbols
should suffice (it and the backslash being the only allowed ways to
"un-quote" a single-quoted string), I would like to suggest solving the
problem without the use of quoting:

#include <spawn.h>

char ** argv = { "rm", "-Rf", Sys_TempDir, NULL };
posix_spawnp(NULL, "rm", NULL, NULL, argv, NULL);

Are there Unix-like platforms on which R is intended to work that don't
have posix_spawn()? Circa-2014 versions of both Solaris and OpenBSD
seem to have it. Spawning the process manually by means of [v]fork()
and exec() is probably not worth the maintainer effort required to
perform it correctly.

-- 
Best regards,
Ivan


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Feb 16 15:43:40 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 16 Feb 2023 15:43:40 +0100
Subject: [Rd] Robustifying R_CleanTempDir a bit more
In-Reply-To: <20230216170909.42e6894e@arachnoid>
References: <20230216170909.42e6894e@arachnoid>
Message-ID: <9ec1ac5a-8e06-13f4-3753-283606707e9f@gmail.com>

On 2/16/23 15:09, Ivan Krylov wrote:
> Hello,
>
> This is probably a very minor point, but R_CleanTempDir may still have
> a shell injection in it. I couldn't find a way to shoot the user in the
> foot in a significant way (by, say, accidentally removing ~), thanks to
> R disallowing spaces in the path, but if Sys_TempDir somehow acquires a
> value of "/tmp/';echo;'", R_CleanTempDir() will remove /tmp instead of
> its aptly-named subdirectory.
Please see 83851 from earlier today which does a bit more of 
robustification, and if you find any problem in it, please let me know.
> While adding the single-quote symbol to the list of special symbols
> should suffice (it and the backslash being the only allowed ways to
> "un-quote" a single-quoted string), I would like to suggest solving the
> problem without the use of quoting:
>
> #include <spawn.h>
>
> char ** argv = { "rm", "-Rf", Sys_TempDir, NULL };
> posix_spawnp(NULL, "rm", NULL, NULL, argv, NULL);
>
> Are there Unix-like platforms on which R is intended to work that don't
> have posix_spawn()? Circa-2014 versions of both Solaris and OpenBSD
> seem to have it. Spawning the process manually by means of [v]fork()
> and exec() is probably not worth the maintainer effort required to
> perform it correctly.

Yes, this is a good point and we have been thinking about spawn() as 
well, and we are considering that. Re implementing, I also fear the cost 
may be too high, thinking about the timeout support in system() I 
implemented earlier, so essentially a system() replacement for Unix. The 
details are complicated on Unix as well as on Windows. And re reusing 
existing implementations, we will have to check they do exactly what we 
need about signals, terminal, process groups, termination, input and 
output, etc. It may also be that improving performance of R_unlink() 
would be easier, as it is rather un-optimized now. So I just wanted to 
buy time with (possibly temporary) fix in 83851.

Thanks
Tomas

>


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Feb 16 15:57:26 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 16 Feb 2023 15:57:26 +0100
Subject: [Rd] Robustifying R_CleanTempDir a bit more
In-Reply-To: <9ec1ac5a-8e06-13f4-3753-283606707e9f@gmail.com>
References: <20230216170909.42e6894e@arachnoid>
 <9ec1ac5a-8e06-13f4-3753-283606707e9f@gmail.com>
Message-ID: <ed796689-0ef5-ac40-72e2-14f8898a3a9c@gmail.com>


On 2/16/23 15:43, Tomas Kalibera wrote:
> On 2/16/23 15:09, Ivan Krylov wrote:
>> Hello,
>>
>> This is probably a very minor point, but R_CleanTempDir may still have
>> a shell injection in it. I couldn't find a way to shoot the user in the
>> foot in a significant way (by, say, accidentally removing ~), thanks to
>> R disallowing spaces in the path, but if Sys_TempDir somehow acquires a
>> value of "/tmp/';echo;'", R_CleanTempDir() will remove /tmp instead of
>> its aptly-named subdirectory.
> Please see 83851 from earlier today which does a bit more of 
> robustification, and if you find any problem in it, please let me know.
>> While adding the single-quote symbol to the list of special symbols
>> should suffice (it and the backslash being the only allowed ways to
>> "un-quote" a single-quoted string), 

I've added the single quote now. Thanks for spotting that. This is a 
temporary fix which may be later replaced by spawn or something else.

Best
Tomas

>> I would like to suggest solving the
>> problem without the use of quoting:
>>
>> #include <spawn.h>
>>
>> char ** argv = { "rm", "-Rf", Sys_TempDir, NULL };
>> posix_spawnp(NULL, "rm", NULL, NULL, argv, NULL);
>>
>> Are there Unix-like platforms on which R is intended to work that don't
>> have posix_spawn()? Circa-2014 versions of both Solaris and OpenBSD
>> seem to have it. Spawning the process manually by means of [v]fork()
>> and exec() is probably not worth the maintainer effort required to
>> perform it correctly.
>
> Yes, this is a good point and we have been thinking about spawn() as 
> well, and we are considering that. Re implementing, I also fear the 
> cost may be too high, thinking about the timeout support in system() I 
> implemented earlier, so essentially a system() replacement for Unix. 
> The details are complicated on Unix as well as on Windows. And re 
> reusing existing implementations, we will have to check they do 
> exactly what we need about signals, terminal, process groups, 
> termination, input and output, etc. It may also be that improving 
> performance of R_unlink() would be easier, as it is rather 
> un-optimized now. So I just wanted to buy time with (possibly 
> temporary) fix in 83851.
>
> Thanks
> Tomas
>
>>


From kry|ov@r00t @end|ng |rom gm@||@com  Thu Feb 16 16:03:59 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Thu, 16 Feb 2023 18:03:59 +0300
Subject: [Rd] Robustifying R_CleanTempDir a bit more
In-Reply-To: <9ec1ac5a-8e06-13f4-3753-283606707e9f@gmail.com>
References: <20230216170909.42e6894e@arachnoid>
 <9ec1ac5a-8e06-13f4-3753-283606707e9f@gmail.com>
Message-ID: <20230216180359.56ef978e@arachnoid>

Thanks for the quick reply!

On Thu, 16 Feb 2023 15:43:40 +0100
Tomas Kalibera <tomas.kalibera at gmail.com> wrote:

> Please see 83851 from earlier today which does a bit more of 
> robustification, and if you find any problem in it, please let me
> know.

83851 is an improvement, but it does let single quotes through,
unfortunately, leading to my (contrived) example of "/tmp/';echo;'". 

Given what you say about the temporary nature of the current fix,
adding the single quote to the list of special symbols should be a good
solution for now:

--- src/main/platform.c	(revision 83851)
+++ src/main/platform.c	(working copy)
@@ -1634,7 +1634,7 @@
 	/* On Solaris the working directory must be outside this one */
 	chdir(R_HomeDir());
 #endif
-	char *special = "\\`$\"\n";
+	char *special = "\\`$\"\n'";
 	int hasspecial = 0;
 	for(int i = 0; special[i] != '\0'; i++)
 	    if (strchr(Sys_TempDir, special[i])) {

At least I don't see a way out once you disallow single quotes in the
single-quoted string.

-- 
Best regards,
Ivan


From er|c@bern@rd1 @end|ng |rom m|che||n@com  Thu Feb 16 16:10:41 2023
From: er|c@bern@rd1 @end|ng |rom m|che||n@com (Eric Bernard)
Date: Thu, 16 Feb 2023 15:10:41 +0000
Subject: [Rd] 
 =?utf-8?q?=5BEXT=5D_Re=3A__End_of_Support_Date_of_Version_3?=
 =?utf-8?b?IG9mIOKAnFLigJ0=?=
In-Reply-To: <etPan.63ed0054.3f129855.3bdb@me.com>
References: <PA4PR09MB4640DAA912FCA79DF20B27C8DAA39@PA4PR09MB4640.eurprd09.prod.outlook.com>
 <etPan.63ed0054.3f129855.3bdb@me.com>
Message-ID: <PA4PR09MB464064D4E064C7AC942295CADAA09@PA4PR09MB4640.eurprd09.prod.outlook.com>


Thank you, Marc, for this detailed reply.

De : Marc Schwartz <marc_schwartz at me.com>
Envoy? : mercredi 15 f?vrier 2023 16:55
? : Eric Bernard <eric.bernard1 at michelin.com>; r-devel at r-project.org
Objet : [EXT] Re: [Rd] End of Support Date of Version 3 of ?R?

Attention Exp?diteur externe Ne cliquez sur aucun lien et n?ouvrez aucune pi?ce jointe ? moins de faire confiance ? l?exp?diteur et de savoir que le contenu est s?r.

Hi,

R's software development life cycle is documented here:

  https://www.r-project.org/doc/R-SDLC.pdf<https://www.r-project.org/doc/R-SDLC.pdf>

This is available via the Certification link, under Documentation, on the main R Project web page:

  https://www.r-project.org<https://www.r-project.org>

Section 4.4 of the document, on page 10, covers the release cycles, and section 4.6, on page 11, covers maintenance, support and retirement.

Section 4.6 includes the following text at the end of that section on page 12:

"The x.y.0 releases are maintained via a series of x.y.z patch releases. At a new x.y.0 version of R, the prior version is retired from formal support. R Core?s efforts are then focused on the new Release (and the on-going Development) version. No further development, bug fixes or patches are made available for the retired versions. Thus there is always only one current version of R. However, the SVN repository will allow older release branches to be reopened, should the need arise."


Version 4.0.0 of R was released on April 24, 2020, thus ending formal support for version 3.x.x, with the last 3.x.x version being 3.6.3, which was released on February 29, 2020.

Regards,

Marc Schwartz
This email was screened for spam and malicious content but exercise caution anyway.




On February 15, 2023 at 10:21:26 AM, Eric Bernard (eric.bernard1 at michelin.com<mailto:eric.bernard1 at michelin.com> (mailto:eric.bernard1 at michelin.com)) wrote:

>
> Hello !
>
> Good day.
>
> I'd like to know what is the End of Support Date of Version 3 of R.
>
> Thanks for your answer.
>
> Have a good day.
>
> Best Regards
>
> Eric Bernard
> DCTI/BS/EC
>
> Cordialement.
>
> Eric Bernard
> Michelin
> DCTI/BS/EC
>
>
> [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel<https://stat.ethz.ch/mailman/listinfo/r-devel>

	[[alternative HTML version deleted]]


From ch@riie@g@o m@iii@g oii shikokuchuo@@et  Thu Feb 16 16:15:28 2023
From: ch@riie@g@o m@iii@g oii shikokuchuo@@et (ch@riie@g@o m@iii@g oii shikokuchuo@@et)
Date: Thu, 16 Feb 2023 15:15:28 +0000
Subject: [Rd] Question on non-blocking socket
In-Reply-To: <mailman.53207.7.1676545201.10299.r-devel@r-project.org>
References: <mailman.53207.7.1676545201.10299.r-devel@r-project.org>
Message-ID: <dbc2d2529a7fc161536fbe58b66ad5bb@shikokuchuo.net>

> Date: Wed, 15 Feb 2023 01:24:26 +0100
> From: Ben Engbers <Ben.Engbers at Be-Logical.nl>
> To: r-devel at r-project.org
> Subject: [Rd] Question on non-blocking socket
> Message-ID: <68ce63b0-7e91-6372-6926-59f3fcfffd25 at Be-Logical.nl>
> Content-Type: text/plain; charset="utf-8"; Format="flowed"
> 
> Hi,
> 
> December 27, 2021 I started a thread asking for help troubleshooting 
> non-blocking sockets.
> While developing the RBaseX client, I had issues with the authentication 
> process. It eventually turned out that a short break had to be inserted 
> in this process between sending the credentials to the server and 
> requesting the status. Tomas Kalibera put me on the right track by 
> drawing my attention to the 'socketSelect' function. I don't know 
> exactly the purpose of this function is (the function itself is 
> documented, but I can't find any information for which situations this 
> function should be called.) but it sufficed to call this function once 
> between sending and requesting.
> 
> I have two questions.
> The first is where I can find R documentation on proper use of 
> non-blocking sockets and on the proper use of the socketSelect function?
> 
> The second question is more focused on using non-blocking sockets in 
> general. Is it allowed to execute a read and a receive command 
> immediately after each other or must a short waiting loop be built in.
> I'm asking this because I'm running into the same problems in a C++ 
> project as I did with RBaseX.
> 
> Ben Engbers
> 

Hi Ben,

For an easier experience with sockets, you may wish to have a look at the `nanonext` package. This wraps 'NNG' and is generally used for messaging over its own protocols (req/rep, pub/sub etc.), although you can also use it for HTTP and websockets.

In any case, a low level stream interface allows connecting with arbitrary sockets. Using something like `s <- stream(dial = "tcp://0.0.0.0:5555")` substituting in the actual address. This would allow you greater flexibility in sending and receiving over the bytestream without worrying so much about order and timing as per your current experience.

For example, a common pattern this allows for is doing an async receive `r <- recv_aio(s)`  before sending a request `send(s, "some request")`, and then query the receive result afterwards at `r$data`.

I won't go into too much detail here, but as it is my own package, please feel free to reach out separately via email or github etc.

Thanks,

Charlie


From j@g@nmn2 @end|ng |rom gm@||@com  Thu Feb 16 20:59:30 2023
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Thu, 16 Feb 2023 14:59:30 -0500
Subject: [Rd] Regenerate m4/gettext.m4 with updated AM_GNU_GETTEXT?
Message-ID: <2ff4f618-9dc2-89c3-d3a6-2a21c9cec05b@gmail.com>

Currently, m4/gettext.m4 contains an old version of Autoconf macro
AM_GNU_GETTEXT relying on internal symbols (e.g., _nl_expand_alias)
to detect broken implementations of GNU gettext.  System libraries
are searched for the internal symbols unconditionally, i.e., even
when linking against a static GNU libintl, resulting in the following
false positive in my config.log:


     configure:53900: checking for GNU gettext in libintl
     configure:53937: clang -o conftest  -g -O2 -Wall -pedantic 
-mmacosx-version-min=11.0 -arch arm64 -falign-functions=8 
-Wno-error=implicit-function-declaration -fPIC -DPCRE2_STATIC 
-I/usr/local/include -I/opt/R/arm64/include -I/usr/local/include 
-L/opt/R/arm64/lib -L/usr/local/lib conftest.c -L/usr/local/lib -lpcre2-8 -llzma 
-lbz2 -lz -licucore -ldl -lm -liconv /usr/local/lib/libintl.a 
/usr/local/lib/libiconv.a >&5
     Undefined symbols for architecture arm64:
       "__nl_expand_alias", referenced from:
           _main in conftest-0e23fb.o
     ld: symbol(s) not found for architecture arm64


AM_GNU_GETTEXT was revised in the GNU gettext sources ~6 years ago
to address this:


     $ git log -1 b67399b
     commit b67399b40bc5bf3165b09e6a095ec941d4b30a97
     Author: Daiki Ueno <ueno at gnu.org>
     Date:   Thu May 26 13:38:57 2016 +0900

         m4: Rely less on internal symbols

         * gettext-runtime/m4/gettext.m4 (AM_GNU_GETTEXT): Skip checks for the
         internal symbols _nl_msg_cat_cntr, _nl_domain_bindings, and
         _nl_expand_alias, if __GNU_GETTEXT_SUPPORTED_REVISION is defined.
         Problem reported and fix suggested by Masanori Ogino in:
         https://lists.gnu.org/archive/html/bug-gettext/2016-04/msg00000.html
         The rationale behind this is: (1) those symbol checks are for detecting
         certain broken implementations, namely NetBSD and Solaris 7, and
         (2) __GNU_GETTEXT_SUPPORTED_REVISION is not defined in those
         implementations, while it is defined on compatible implementations, such
         as musl-libc which doesn't have those internal symbols.


Can m4/gettext.m4 be regenerated from a sufficiently newer release
of GNU gettext, without major disruption?

Mikael


From r@v|@v@r@dh@n @end|ng |rom jhu@edu  Fri Feb 17 00:37:26 2023
From: r@v|@v@r@dh@n @end|ng |rom jhu@edu (Ravi Varadhan)
Date: Thu, 16 Feb 2023 23:37:26 +0000
Subject: [Rd] An interesting chat with ChatGPT
In-Reply-To: <3909C1CD-AC89-465F-81E2-98D46ECE01AA@utoronto.ca>
References: <3d7bd521-d670-4b90-6be4-a3528d726f5b@gmail.com>
 <3909C1CD-AC89-465F-81E2-98D46ECE01AA@utoronto.ca>
Message-ID: <SJ0PR01MB640066251848C9A55CD72058F2A09@SJ0PR01MB6400.prod.exchangelabs.com>

ChatGPT provided an R code with error when I asked a question related to prediction of a new data point for linear mixed effects model.  So, it is not immune to coding mistakes!

Ravi

________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of Boris Steipe <boris.steipe at utoronto.ca>
Sent: Monday, February 13, 2023 10:54 AM
To: Duncan Murdoch <murdoch.duncan at gmail.com>
Cc: r-devel <r-devel at r-project.org>
Subject: Re: [Rd] An interesting chat with ChatGPT


      External Email - Use Caution



Duncan -

Indeed, this has now been well documented; I have called these constructions "Schr?dinger Facts", since they arise from a superposition of truths in the training data that collapse into an untruth when observed.

   https://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fsentientsyllabus.substack.com%2Fp%2Fchatgpts-achilles-heel&data=05%7C01%7Cravi.varadhan%40jhu.edu%7C1a6aecbbe3974b52595608db0ddb3271%7C9fa4f438b1e6473b803f86f8aedf0dec%7C0%7C0%7C638119007350695881%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=WM23AlyRohiQh5EqTqkTI2B%2BXTG38k%2BtfaRv7KQwybw%3D&reserved=0

Now, the curious question is: why can it program. Why is its production of R-syntax less vulnerable to this effect than a literature quote, or reference? Maybe it has to do with the fact that in producing correct syntax there is a ground truth - errors just will not run. But I'm not sure.

Regardless: it signals that we need a reinvigorated culture of validation. Actually ChatGPT will happily make test data for you. Whisvh. in a way, it judt did  ;-)


Boris




> On 2023-02-13, at 08:37, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> I was wondering which anchor would match in the regular expression "(a)|(b)" if both "a" and "b" matches the target string.  What appears to happen is that the first match wins, and that's how it is documented in Python, but I was looking for docs on this in R.
>
> As far as I can see, the ?regex help page doesn't resolve this. So just for fun, I decided to ask ChatGPT, and got an interesting response.  I won't show the whole conversation here, but just some extracts:
>
> ---------------------------------------
> Me:  In a regular expression in R, if both "a" and "b" match, which does "(a)|(b)" match?  Please include authoritative references in your answer.
>
> ChatGPT: [long answer about grep]
>
> Me:  In grep(), it doesn't matter which of a or b matches.  It's only in sub() or gsub() that it makes a difference.  Do you know an authoritative reference that discusses those functions?
>
> ChatGPT:  [long irrelevant answer about sub and gsub, with a reference to "R Cookbook" by P. Teetor.]
>
> Me:  Teetor's book is not authoritative, and the other reference doesn't discuss ambiguous alternation.
>
> ... finally we get to the interesting part ...
>
> ChatGPT: I apologize for the mistake in my previous answer.
>
> A more authoritative reference for the behavior of regular expressions in R can be found in the official R documentation.
>
> Regarding the behavior of ambiguous alternation, the regex section of the manual "An Introduction to R" explains it as follows:
>
> "When several alternatives are possible, the first alternative is chosen, so it is important to specify alternatives in the order in which they should be tried."
>
> Here is the reference for the official R documentation:
>
>    "An Introduction to R" manual: https://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fcran.r-project.org%2Fdoc%2Fmanuals%2Fr-release%2FR-intro.html%23Regular-expression-facilities&data=05%7C01%7Cravi.varadhan%40jhu.edu%7C1a6aecbbe3974b52595608db0ddb3271%7C9fa4f438b1e6473b803f86f8aedf0dec%7C0%7C0%7C638119007350695881%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=6MFKiZJ0nyDLmEDLcVxg%2Bm%2BYTe5lQixS2NIdZNCMecE%3D&reserved=0
>
> I hope this reference provides the information you were looking for.
> ---------------------------------------
>
>
> All right, an authoritative answer!  The only problem is that *it doesn't exist*.  There's no such anchor in that document.  R-intro isn't a very rapidly changing document, so I could look at every change recorded in svn, and that section has *never* existed.
>
> I guess ChatGPT is a pattern matching machine, and if such a question had an answer, it would probably be in a location like that.  (I would have guessed a help page like ?regex instead of R-intro, but I had just told it that answer was wrong.)
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&data=05%7C01%7Cravi.varadhan%40jhu.edu%7C1a6aecbbe3974b52595608db0ddb3271%7C9fa4f438b1e6473b803f86f8aedf0dec%7C0%7C0%7C638119007350695881%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=tcAowvYXOiEUYTN0K40pcLcag7YenH1cDa9%2FtLnOn6c%3D&reserved=0


--
Boris Steipe MD, PhD

Professor em.
Department of Biochemistry
Temerty Faculty of Medicine
University of Toronto



______________________________________________
R-devel at r-project.org mailing list
https://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&data=05%7C01%7Cravi.varadhan%40jhu.edu%7C1a6aecbbe3974b52595608db0ddb3271%7C9fa4f438b1e6473b803f86f8aedf0dec%7C0%7C0%7C638119007350695881%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=tcAowvYXOiEUYTN0K40pcLcag7YenH1cDa9%2FtLnOn6c%3D&reserved=0

	[[alternative HTML version deleted]]


From ben@engber@ @end|ng |rom gm@||@com  Fri Feb 17 15:00:34 2023
From: ben@engber@ @end|ng |rom gm@||@com (Ben Engbers)
Date: Fri, 17 Feb 2023 15:00:34 +0100
Subject: [Rd] Question on non-blocking socket
In-Reply-To: <d2424a96-d047-4216-a90b-5f49327eaa38@gmail.com>
References: <68ce63b0-7e91-6372-6926-59f3fcfffd25@Be-Logical.nl>
 <1ba5f439-c317-816f-ec0c-9bc03f38840b@gmail.com>
 <c7460122-2ee1-4f61-e0b5-b0626d407f6c@Be-Logical.nl>
 <d2424a96-d047-4216-a90b-5f49327eaa38@gmail.com>
Message-ID: <f27c5219-634c-8733-385f-1f8f7110cd07@Be-Logical.nl>

Hi Tomas,

Apparently, inserting some kind of socketSelect() is essential when 
using non-blocking sockets and a client/erve architecture. That is at 
least one thing that I have learned ;-).

In C++, between sending and requesting, I inserted a call to this function:
bool wait(int s) {
   fd_set read_set;
   struct timeval timeout {};
   memset(&timeout, 0, sizeof(timeout));
   bool done{};
   while (!done ) {
     FD_ZERO(&read_set);
     FD_SET(s, &read_set);
     int rc = select(s + 1, &read_set, NULL, NULL, &timeout);
     done = (rc == 1) && FD_ISSET(s, &read_set);
   };
   return done;
};

Inserting this call was essential in solving my problem.

Ben

Op 15-02-2023 om 17:17 schreef Tomas Kalibera:
> In the example you are waiting only for a single byte. But if the 
> response may be longer, one needs to take into account in the client 
> that not all bytes of the response may be available right away. One 
> would keep receiving the data in a loop, as they become available (e.g. 
> socketSelect() would tell), keep appending them to a buffer, and keep 
> looking for when they are complete.
> 
> Tomas
>> Ben


From rb@er @end|ng |rom @t@u@edu  Fri Feb 17 16:05:04 2023
From: rb@er @end|ng |rom @t@u@edu (Robert Baer)
Date: Fri, 17 Feb 2023 09:05:04 -0600
Subject: [Rd] An interesting chat with ChatGPT
In-Reply-To: <CAHJ+2V+bqqD5UZ_9yPT4H=bLPvPcDNkhOXtQ-1KCu7u6EiJ1xg@mail.gmail.com>
References: <3d7bd521-d670-4b90-6be4-a3528d726f5b@gmail.com>
 <3909C1CD-AC89-465F-81E2-98D46ECE01AA@utoronto.ca>
 <CAHJ+2V+bqqD5UZ_9yPT4H=bLPvPcDNkhOXtQ-1KCu7u6EiJ1xg@mail.gmail.com>
Message-ID: <30a5d555-4da2-f95e-3e42-4e2ce3aa4025@atsu.edu>

On 2/13/2023 11:14 AM, Kevin Coombes wrote:
> Chat bots are like politicians, or talking dogs. The fact that they exist
> is interesting. But no same person would believe anything they say.

I think it is more appropriate to be a little less harsh, " no same 
person would believe EVERYTHING they say"

 ?What chatGPT (and politicians) say must be run through your own 
personal filters and sanity checks ( just like the things even your 
mother tells you.)? ;-)


>
> On Mon, Feb 13, 2023, 10:58 AM Boris Steipe <boris.steipe at utoronto.ca>
> wrote:
>
>> Duncan -
>>
>> Indeed, this has now been well documented; I have called these
>> constructions "Schr?dinger Facts", since they arise from a superposition of
>> truths in the training data that collapse into an untruth when observed.
>>
>>     https://sentientsyllabus.substack.com/p/chatgpts-achilles-heel
>>
>> Now, the curious question is: why can it program. Why is its production of
>> R-syntax less vulnerable to this effect than a literature quote, or
>> reference? Maybe it has to do with the fact that in producing correct
>> syntax there is a ground truth - errors just will not run. But I'm not sure.
>>
>> Regardless: it signals that we need a reinvigorated culture of validation.
>> Actually ChatGPT will happily make test data for you. Whisvh. in a way, it
>> judt did  ;-)
>>
>>
>> Boris
>>
>>
>>
>>
>>> On 2023-02-13, at 08:37, Duncan Murdoch <murdoch.duncan at gmail.com>
>> wrote:
>>> I was wondering which anchor would match in the regular expression
>> "(a)|(b)" if both "a" and "b" matches the target string.  What appears to
>> happen is that the first match wins, and that's how it is documented in
>> Python, but I was looking for docs on this in R.
>>> As far as I can see, the ?regex help page doesn't resolve this. So just
>> for fun, I decided to ask ChatGPT, and got an interesting response.  I
>> won't show the whole conversation here, but just some extracts:
>>> ---------------------------------------
>>> Me:  In a regular expression in R, if both "a" and "b" match, which does
>> "(a)|(b)" match?  Please include authoritative references in your answer.
>>> ChatGPT: [long answer about grep]
>>>
>>> Me:  In grep(), it doesn't matter which of a or b matches.  It's only in
>> sub() or gsub() that it makes a difference.  Do you know an authoritative
>> reference that discusses those functions?
>>> ChatGPT:  [long irrelevant answer about sub and gsub, with a reference
>> to "R Cookbook" by P. Teetor.]
>>> Me:  Teetor's book is not authoritative, and the other reference doesn't
>> discuss ambiguous alternation.
>>> ... finally we get to the interesting part ...
>>>
>>> ChatGPT: I apologize for the mistake in my previous answer.
>>>
>>> A more authoritative reference for the behavior of regular expressions
>> in R can be found in the official R documentation.
>>> Regarding the behavior of ambiguous alternation, the regex section of
>> the manual "An Introduction to R" explains it as follows:
>>> "When several alternatives are possible, the first alternative is
>> chosen, so it is important to specify alternatives in the order in which
>> they should be tried."
>>> Here is the reference for the official R documentation:
>>>
>>>     "An Introduction to R" manual:
>> https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Regular-expression-facilities
>>> I hope this reference provides the information you were looking for.
>>> ---------------------------------------
>>>
>>>
>>> All right, an authoritative answer!  The only problem is that *it
>> doesn't exist*.  There's no such anchor in that document.  R-intro isn't a
>> very rapidly changing document, so I could look at every change recorded in
>> svn, and that section has *never* existed.
>>> I guess ChatGPT is a pattern matching machine, and if such a question
>> had an answer, it would probably be in a location like that.  (I would have
>> guessed a help page like ?regex instead of R-intro, but I had just told it
>> that answer was wrong.)
>>> Duncan Murdoch
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> --
>> Boris Steipe MD, PhD
>>
>> Professor em.
>> Department of Biochemistry
>> Temerty Faculty of Medicine
>> University of Toronto
>>
>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
__________________________________________________
Robert W. Baer, Ph.D.
Professor of Physiolgy
Kirksville College of Osteopathic Medicine
A.T. Still University of Heallth Sciences
800 W. Jefferson St.
Kirksville, MO 63501
P: 660-626-2322


  

              

The ATSU Mission
A.T. Still University of Health Sciences serves as a learning-centered university dedicated to preparing highly competent professionals through innovative academic programs with a commitment to continue its osteopathic heritage and focus on whole person healthcare, scholarship, community health, interprofessional education, diversity, and underserved populations.

Proud recipient of INSIGHT Into Diversity?s 2017-19 Higher Education Excellence in Diversity Awards.


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Feb 17 21:55:09 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 18 Feb 2023 09:55:09 +1300
Subject: [Rd] Question on non-blocking socket
In-Reply-To: <f27c5219-634c-8733-385f-1f8f7110cd07@Be-Logical.nl>
References: <68ce63b0-7e91-6372-6926-59f3fcfffd25@Be-Logical.nl>
 <1ba5f439-c317-816f-ec0c-9bc03f38840b@gmail.com>
 <c7460122-2ee1-4f61-e0b5-b0626d407f6c@Be-Logical.nl>
 <d2424a96-d047-4216-a90b-5f49327eaa38@gmail.com>
 <f27c5219-634c-8733-385f-1f8f7110cd07@Be-Logical.nl>
Message-ID: <9A9D7965-6123-4160-8AE5-F056E79491A7@R-project.org>

Ben,

yes, by definition - non-blocking means that reads won't block and always return immediately (the point of non-blocking). The loop below is terrible as it will cause 100% CPU usage while it's spinning. It seems that you want to block so why are you using non-blocking mode? select() effectively gets you back to blocking mode, because it does the "block" that read() would normally do in blocking mode. Moreover select() allows you to block for a specified time (the point of the timeout argument) so if you want to wait, you should set the timeout - you should never use a spin loop without timeouts. Also there are many other conditions you should be handling - there may be an error on the socket or EINTR (you should call R's interrupt handler) or EAGAIN (which you do implicitly, but you can't tell it from an actual error).

Sockets and I/O are quite complex matter - it's easy to get it wrong and create hard-to-detect bugs in you code unless you are an expert in it. It's one of the wheels you don't want to be reinventing.

Cheers,
Simon


> On Feb 18, 2023, at 3:00 AM, Ben Engbers <ben.engbers at gmail.com> wrote:
> 
> Hi Tomas,
> 
> Apparently, inserting some kind of socketSelect() is essential when using non-blocking sockets and a client/erve architecture. That is at least one thing that I have learned ;-).
> 
> In C++, between sending and requesting, I inserted a call to this function:
> bool wait(int s) {
>  fd_set read_set;
>  struct timeval timeout {};
>  memset(&timeout, 0, sizeof(timeout));
>  bool done{};
>  while (!done ) {
>    FD_ZERO(&read_set);
>    FD_SET(s, &read_set);
>    int rc = select(s + 1, &read_set, NULL, NULL, &timeout);
>    done = (rc == 1) && FD_ISSET(s, &read_set);
>  };
>  return done;
> };
> 
> Inserting this call was essential in solving my problem.
> 
> Ben
> 
> Op 15-02-2023 om 17:17 schreef Tomas Kalibera:
>> In the example you are waiting only for a single byte. But if the response may be longer, one needs to take into account in the client that not all bytes of the response may be available right away. One would keep receiving the data in a loop, as they become available (e.g. socketSelect() would tell), keep appending them to a buffer, and keep looking for when they are complete.
>> Tomas
>>> Ben
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From k@||now@k|t @end|ng |rom gm@||@com  Fri Feb 17 21:36:14 2023
From: k@||now@k|t @end|ng |rom gm@||@com (Tomasz Kalinowski)
Date: Fri, 17 Feb 2023 15:36:14 -0500
Subject: [Rd] Adding support for S7 to base R
Message-ID: <CALWM=9b2izXXmLOQQOf4Ssg+11E5fdy5DfM4P2NqCPeBpLGSwg@mail.gmail.com>

Dear R-devel,

We are pleased to inform you that the R Consortium OOP Working Group
has been making progress on the S7 (formerly named R7) package and are
preparing to submit it to CRAN. The S7 package is a new OOP system
designed to be a successor to S3 and S4.

As part of that effort, the group has identified a minimal set of
narrow changes to base R that would allow S7 to exist as a CRAN
package. The changes, in general, enable S7 to use R language features
that are presently limited to only S4.

The proposed patches:

-  make `@` an S3 generic.
-  make `%*%` an S3 generic.
-  enable double dispatch for S7.
-  enable `inherits()` to accept `S7_class` objects.

The diffs for the individual patches can be found here:

%*%      - https://github.com/r-devel/r-svn/pull/105.diff
inherits - https://github.com/r-devel/r-svn/pull/106.diff
Ops      - https://github.com/r-devel/r-svn/pull/107.diff
@        - https://github.com/r-devel/r-svn/pull/108.diff

The repository for the S7 package can be found here:
https://github.com/RConsortium/OOP-WG

Your feedback is important to us, and we would be grateful for your
input on these patches. We aim to ensure that S7 is a high-quality
package that benefits the R community, while being mindful of not
disrupting existing projects or introducing breaking changes. If you
have any concerns or objections, please let us know. Your insights and
suggestions will be instrumental in shaping the final version of these
patches, and we appreciate your help in this process.

Thank you for your attention and contributions.

Best regards,
Tomasz
On behalf of the R Consortium OOP Working Group


From ggrothend|eck @end|ng |rom gm@||@com  Sat Feb 18 15:07:15 2023
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sat, 18 Feb 2023 09:07:15 -0500
Subject: [Rd] summary.lm fails for difftime objects
Message-ID: <CAP01uR=B6gNgAfsYVRzeJxVFLU2fjY7kOzGOC6De8sDyhrD1cg@mail.gmail.com>

lm works with difftime objects but then if you try to get the summary
it fails with an error:

  fit <- lm(as.difftime(Time, units = "mins") ~ demand, BOD)
  summary(fit)
  ## Error in Ops.difftime((f - mean(f)), 2) :
  ##  '^' not defined for "difftime" objects

A number of other lm methods also fail, e.g. plot(fit), but others
work, e.g. coef(fit), resid(fit)

--
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Feb 18 15:15:44 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 18 Feb 2023 09:15:44 -0500
Subject: [Rd] Adding support for S7 to base R
In-Reply-To: <CALWM=9b2izXXmLOQQOf4Ssg+11E5fdy5DfM4P2NqCPeBpLGSwg@mail.gmail.com>
References: <CALWM=9b2izXXmLOQQOf4Ssg+11E5fdy5DfM4P2NqCPeBpLGSwg@mail.gmail.com>
Message-ID: <54f67fc4-cbd1-3d87-45ce-a9a86d28fddb@gmail.com>

I hadn't been aware of the S7 project, but I've read some of the online 
docs about it.  It looks like a nice evolution of S3 & S4. I have a few 
questions:

Is the proposal is that these patches be included in the upcoming R 4.3.0?

One minor thing missing from the docs (as far as I could see) is how 
ambiguities in multi-dispatch are resolved.  For example, having class B 
inherit from class A, and having methods defined for arguments of type 
B, A and type A, B but not B, B, then passing a B, B pair to the 
generic. Which method gets called, or does the ambiguity result in an error?

Another (possibly quite major) omission from the documentation is how 
documentation for classes, generics and methods would be handled.  Using 
one of their examples, how would I find help on what this does: 
`speak(dog(), french())`?

Duncan Murdoch

On 17/02/2023 3:36 p.m., Tomasz Kalinowski wrote:
> Dear R-devel,
> 
> We are pleased to inform you that the R Consortium OOP Working Group
> has been making progress on the S7 (formerly named R7) package and are
> preparing to submit it to CRAN. The S7 package is a new OOP system
> designed to be a successor to S3 and S4.
> 
> As part of that effort, the group has identified a minimal set of
> narrow changes to base R that would allow S7 to exist as a CRAN
> package. The changes, in general, enable S7 to use R language features
> that are presently limited to only S4.
> 
> The proposed patches:
> 
> -  make `@` an S3 generic.
> -  make `%*%` an S3 generic.
> -  enable double dispatch for S7.
> -  enable `inherits()` to accept `S7_class` objects.
> 
> The diffs for the individual patches can be found here:
> 
> %*%      - https://github.com/r-devel/r-svn/pull/105.diff
> inherits - https://github.com/r-devel/r-svn/pull/106.diff
> Ops      - https://github.com/r-devel/r-svn/pull/107.diff
> @        - https://github.com/r-devel/r-svn/pull/108.diff
> 
> The repository for the S7 package can be found here:
> https://github.com/RConsortium/OOP-WG
> 
> Your feedback is important to us, and we would be grateful for your
> input on these patches. We aim to ensure that S7 is a high-quality
> package that benefits the R community, while being mindful of not
> disrupting existing projects or introducing breaking changes. If you
> have any concerns or objections, please let us know. Your insights and
> suggestions will be instrumental in shaping the final version of these
> patches, and we appreciate your help in this process.
> 
> Thank you for your attention and contributions.
> 
> Best regards,
> Tomasz
> On behalf of the R Consortium OOP Working Group
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Feb 18 15:51:28 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 18 Feb 2023 09:51:28 -0500
Subject: [Rd] Adding support for S7 to base R
In-Reply-To: <CALWM=9b2izXXmLOQQOf4Ssg+11E5fdy5DfM4P2NqCPeBpLGSwg@mail.gmail.com>
References: <CALWM=9b2izXXmLOQQOf4Ssg+11E5fdy5DfM4P2NqCPeBpLGSwg@mail.gmail.com>
Message-ID: <9d257ea4-d757-f88e-e9d0-383f8cc8b45b@gmail.com>

One more comment:

The utils::setBreakpoint() function should be updated to be able to set 
breakpoints in S7 methods, or a substitute function should be added to 
the S7 package.

RStudio 2022.12.0+353 (not sure if that's the latest) also needs to be 
taught how to do that, since it doesn't seem to use setBreakpoint.

Duncan Murdoch


From bbo|ker @end|ng |rom gm@||@com  Sat Feb 18 18:28:22 2023
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sat, 18 Feb 2023 12:28:22 -0500
Subject: [Rd] uniroot violates bounds?
Message-ID: <c9dde79d-aa1b-f769-9a16-b13ce511400d@gmail.com>

c1 <- 4469.822
c2 <- 572.3413
f <- function(x) { c1/x - c2/(1-x) }; uniroot(f, c(1e-6, 1))
uniroot(f, c(1e-6, 1))


    provides a root at -6.00e-05, which is outside of the specified 
bounds.  The default value of the "extendInt" argument to uniroot() is 
"no", as far as I can see ...

$root
[1] -6.003516e-05

$f.root
[1] -74453981

$iter
[1] 1

$init.it
[1] NA

$estim.prec
[1] 6.103516e-05


   I suspect this fails because f(1) (value at the upper bound) is 
infinite, although setting interval to c(0.01, 1) does work/give a 
sensible answer ...  (works for a lower bound of 1e-4, fails for 1e-5 ...)

   Setting the upper bound < 1 appears to avoid the problem.

  For what it's worth, the result has an "init.it" component, but the 
only thing the documentation says about it is " component ?init.it? was 
added in R 3.1.0".

   And, I think (?) that the 'trace' argument only produces any output 
if the 'extendInt' option is enabled?

   Inspired by 
https://stackoverflow.com/questions/75494696/solving-a-system-of-non-linear-equations-with-only-one-unknown/75494955#75494955

   cheers
    Ben Bolker


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Feb 18 18:29:52 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 18 Feb 2023 12:29:52 -0500
Subject: [Rd] Adding support for S7 to base R
In-Reply-To: <9d257ea4-d757-f88e-e9d0-383f8cc8b45b@gmail.com>
References: <CALWM=9b2izXXmLOQQOf4Ssg+11E5fdy5DfM4P2NqCPeBpLGSwg@mail.gmail.com>
 <9d257ea4-d757-f88e-e9d0-383f8cc8b45b@gmail.com>
Message-ID: <9fea1857-e3fe-e0c4-5d31-702c482f320c@gmail.com>

On 18/02/2023 9:51 a.m., Duncan Murdoch wrote:
> One more comment:
> 
> The utils::setBreakpoint() function should be updated to be able to set
> breakpoints in S7 methods, or a substitute function should be added to
> the S7 package.
> 
> RStudio 2022.12.0+353 (not sure if that's the latest) also needs to be
> taught how to do that, since it doesn't seem to use setBreakpoint.

I took a look at updating setBreakpoint().  I can get findLineNum() to 
work, but setBreakpoint() doesn't work because trace() doesn't work. 
debug() doesn't work either:  it looks as though it is trying to treat 
an S7 method as an S4 method.

Will the already proposed changes help with debugging, or is that a 
completely separate issue?

Duncan Murdoch


From pro|jcn@@h @end|ng |rom gm@||@com  Sat Feb 18 21:44:23 2023
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Sat, 18 Feb 2023 15:44:23 -0500
Subject: [Rd] uniroot violates bounds?
In-Reply-To: <4a1e9fd8-2f39-ecba-9dff-dbac6cb17fdd@gmail.com>
References: <4a1e9fd8-2f39-ecba-9dff-dbac6cb17fdd@gmail.com>
Message-ID: <504a005d-6c7d-7704-ef39-691b028358e0@gmail.com>

I wrote first cut at unirootR for Martin M and he revised and put in
Rmpfr.

The following extends Ben's example, but adds the unirootR with trace
output.

c1 <- 4469.822
c2 <- 572.3413
f <- function(x) { c1/x - c2/(1-x) }; uniroot(f, c(1e-6, 1))
uniroot(f, c(1e-6, 1))
library(Rmpfr)
unirootR(f, c(1e-6, 1), extendInt="no", trace=1)

This gives more detail on the iterations, and it looks like the Inf is the
issue. But certainly we could do more to avoid "gotchas" like this. If
someone is interested in some back and forth, I'd be happy to give it a
try, but I think progress would be better with more than one contributor.

Best,

John Nash

On 2023-02-18 12:28, Ben Bolker wrote:
> c1 <- 4469.822
> c2 <- 572.3413
> f <- function(x) { c1/x - c2/(1-x) }; uniroot(f, c(1e-6, 1))
> uniroot(f, c(1e-6, 1))
> 
> 
>  ?? provides a root at -6.00e-05, which is outside of the specified bounds.? The default value of the "extendInt" 
> argument to uniroot() is "no", as far as I can see ...
> 
> $root
> [1] -6.003516e-05
> 
> $f.root
> [1] -74453981
> 
> $iter
> [1] 1
> 
> $init.it
> [1] NA
> 
> $estim.prec
> [1] 6.103516e-05
> 
> 
>  ? I suspect this fails because f(1) (value at the upper bound) is infinite, although setting interval to c(0.01, 1) 
> does work/give a sensible answer ...? (works for a lower bound of 1e-4, fails for 1e-5 ...)
> 
>  ? Setting the upper bound < 1 appears to avoid the problem.
> 
>  ?For what it's worth, the result has an "init.it" component, but the only thing the documentation says about it is " 
> component ?init.it? was added in R 3.1.0".
> 
>  ? And, I think (?) that the 'trace' argument only produces any output if the 'extendInt' option is enabled?
> 
>  ? Inspired by 
> https://stackoverflow.com/questions/75494696/solving-a-system-of-non-linear-equations-with-only-one-unknown/75494955#75494955
> 
>  ? cheers
>  ?? Ben Bolker
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From me @end|ng |rom n|noh@rdt@com  Sun Feb 19 15:37:33 2023
From: me @end|ng |rom n|noh@rdt@com (Nino Hardt)
Date: Sun, 19 Feb 2023 15:37:33 +0100 (CET)
Subject: [Rd] R: determine if `suppressMessages()` has been invoked
Message-ID: <1288559080.1563727.1676817453276@webmail.strato.de>

Hi all,
 
I would like to create a function that detects if suppressMessages has been invoked upon running that same function. I was looking through {https://cran.r-project.org/doc/manuals/r-release/R-ints.html}, but I haven't found an answer. I do not understand **how** suppressMessages  works.
 
I have not received an answer on SO (https://stackoverflow.com/questions/75036750/r-determine-if-suppressmessages-has-been-invoked), but it has been suggested I ask here.
 
 
Nino
 
 
	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Sun Feb 19 18:01:37 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Sun, 19 Feb 2023 20:01:37 +0300
Subject: [Rd] R: determine if `suppressMessages()` has been invoked
In-Reply-To: <1288559080.1563727.1676817453276@webmail.strato.de>
References: <1288559080.1563727.1676817453276@webmail.strato.de>
Message-ID: <20230219200137.63f19d81@Tarkus>

On Sun, 19 Feb 2023 15:37:33 +0100 (CET)
Nino Hardt <me at ninohardt.com> wrote:

> I would like to create a function that detects if suppressMessages
> has been invoked upon running that same function. 

Would you mind letting us know why? Just curious. Normally, I would
just use message() for everything and let the users decide whether they
want to see it.

> I was looking through [R Internals], but I haven't found an answer. I
> do not understand **how** suppressMessages works.

It works by cooperating with message().

message() itself works by trying to raise a "message" condition and
providing a "muffleMessage" restart that does nothing. If the condition
wasn't handled (the "muffleMessage" restart wasn't called by the
handler), the text of the message is printed.

In turn, suppressMessages() sets up a handler for conditions of class
"message" that invokes the "muffleMessage" restart provided by
message() itself above.

We can use the fact that the availability of the "muffleMessage"
restart is a documented detail and check whether signalling a "message"
condition will call this restart:

are_messages_suppressed <- function() withRestarts(
 {
  signalCondition(simpleMessage(''))
  # we stay here if restart is not invoked
  FALSE
 },
 muffleMessage = function()
  # we jump here if restart is invoked
  TRUE
)
are_messages_suppressed()
# [1] FALSE
suppressMessages(are_messages_suppressed())
# [1] TRUE

I don't think I understand handlers and restarts enough to explain them
well, but the following link seems to be one of the defining documents
for R's condition handling system:
https://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html

Hadley Wickham's Advanced R (first edition only) contains a good
explanation of R's condition system:
http://adv-r.had.co.nz/Exceptions-Debugging.html
http://adv-r.had.co.nz/beyond-exception-handling.html

(In my opinion, this could be a better question for R-help, since we
ought to be using documented R APIs here.)

-- 
Best regards,
Ivan


From me @end|ng |rom n|noh@rdt@com  Sun Feb 19 18:45:55 2023
From: me @end|ng |rom n|noh@rdt@com (Nino Hardt)
Date: Sun, 19 Feb 2023 18:45:55 +0100 (CET)
Subject: [Rd] R: determine if `suppressMessages()` has been invoked
Message-ID: <717647429.1574291.1676828755719@webmail.strato.de>

Awesome, this gets the job done.
 
To answer your question:
When using C or C++ via Rinside or within a package, those functions do not listen to suppressMessages, e.g. `Rprintf` keeps printing to the console. Since it's common to use wrapper functions in R anyway, they can run `are_messages_suppressed` and pass the information on to an explicit `verbose` argument of the C / C++ function.
 
----- Original Mail -----
Von: "Ivan Krylov" <krylov.r00t at gmail.com>
An: "Nino Hardt" <me at ninohardt.com>
CC: r-devel at r-project.org
Gesendet: Sonntag, 19. Februar 2023 12:01:37
Betreff: Re: [Rd] R: determine if `suppressMessages()` has been invoked
On Sun, 19 Feb 2023 15:37:33 +0100 (CET)
Nino Hardt <me at ninohardt.com> wrote:
> I would like to create a function that detects if suppressMessages
> has been invoked upon running that same function.
Would you mind letting us know why? Just curious. Normally, I would
just use message() for everything and let the users decide whether they
want to see it.
> I was looking through [R Internals], but I haven't found an answer. I
> do not understand **how** suppressMessages works.
It works by cooperating with message().
message() itself works by trying to raise a "message" condition and
providing a "muffleMessage" restart that does nothing. If the condition
wasn't handled (the "muffleMessage" restart wasn't called by the
handler), the text of the message is printed.
In turn, suppressMessages() sets up a handler for conditions of class
"message" that invokes the "muffleMessage" restart provided by
message() itself above.
We can use the fact that the availability of the "muffleMessage"
restart is a documented detail and check whether signalling a "message"
condition will call this restart:
are_messages_suppressed <- function() withRestarts(
{
signalCondition(simpleMessage(''))
# we stay here if restart is not invoked
FALSE
},
muffleMessage = function()
# we jump here if restart is invoked
TRUE
)
are_messages_suppressed()
# [1] FALSE
suppressMessages(are_messages_suppressed())
# [1] TRUE
I don't think I understand handlers and restarts enough to explain them
well, but the following link seems to be one of the defining documents
for R's condition handling system:
https://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html
Hadley Wickham's Advanced R (first edition only) contains a good
explanation of R's condition system:
http://adv-r.had.co.nz/Exceptions-Debugging.html
http://adv-r.had.co.nz/beyond-exception-handling.html
(In my opinion, this could be a better question for R-help, since we
ought to be using documented R APIs here.)
-- 
Best regards,
Ivan
	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Sun Feb 19 20:11:15 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Sun, 19 Feb 2023 22:11:15 +0300
Subject: [Rd] R: determine if `suppressMessages()` has been invoked
In-Reply-To: <717647429.1574291.1676828755719@webmail.strato.de>
References: <717647429.1574291.1676828755719@webmail.strato.de>
Message-ID: <20230219221115.5cddcf9e@Tarkus>

On Sun, 19 Feb 2023 18:45:55 +0100 (CET)
Nino Hardt <me at ninohardt.com> wrote:

> When using C or C++ via Rinside or within a package, those functions
> do not listen to suppressMessages, e.g. `Rprintf` keeps printing to
> the console. 

True, Rprintf is really convenient, but it doesn't raise any conditions
and just prints straight to the console. While calling R message() from
C is possible, it doesn't format anything.

There's a wishlist item for a C entry point for message() (I would
argue that a "messagef" taking a format string would be even better),
but it's waiting for someone with free time to implement it:
https://bugs.r-project.org/show_bug.cgi?id=17612

-- 
Best regards,
Ivan


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Feb 19 23:43:46 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 20 Feb 2023 11:43:46 +1300
Subject: [Rd] determine if `suppressMessages()` has been invoked
In-Reply-To: <717647429.1574291.1676828755719@webmail.strato.de>
References: <717647429.1574291.1676828755719@webmail.strato.de>
Message-ID: <EEB32EBB-9405-46B5-8AA6-86BC30D69226@R-project.org>

Nino,

that is the wrong way around as Ivan pointed out. Rprintf() is not the tool for this as explained. If you want messages, use them, it's easy to wrap it to C code:

static void Rmessage(const char *msg) {
    SEXP msg_sym = Rf_install("message");
    SEXP msg_call = PROTECT(lang2(msg_sym, PROTECT(Rf_mkString(msg))));
    Rf_eval(msg_call, R_BaseEnv);
    UNPROTECT(2);
}

or the f version if needed:

static void Rmessagef(const char *format, ...)
{
    char msg[512];
    va_list(ap);
    va_start(ap, format);
    if (vsnprintf(msg, sizeof(msg), format, ap) >= sizeof(msg))
        memcpy(msg + sizeof(msg) - 4, "...", 4);
    Rmessage(msg);
    va_end(ap);
}

Cheers,
Simon


> On 20/02/2023, at 6:45 AM, Nino Hardt <me at ninohardt.com> wrote:
> 
> Awesome, this gets the job done.
> 
> To answer your question:
> When using C or C++ via Rinside or within a package, those functions do not listen to suppressMessages, e.g. `Rprintf` keeps printing to the console. Since it's common to use wrapper functions in R anyway, they can run `are_messages_suppressed` and pass the information on to an explicit `verbose` argument of the C / C++ function.
> 
> ----- Original Mail -----
> Von: "Ivan Krylov" <krylov.r00t at gmail.com>
> An: "Nino Hardt" <me at ninohardt.com>
> CC: r-devel at r-project.org
> Gesendet: Sonntag, 19. Februar 2023 12:01:37
> Betreff: Re: [Rd] R: determine if `suppressMessages()` has been invoked
> On Sun, 19 Feb 2023 15:37:33 +0100 (CET)
> Nino Hardt <me at ninohardt.com> wrote:
>> I would like to create a function that detects if suppressMessages
>> has been invoked upon running that same function.
> Would you mind letting us know why? Just curious. Normally, I would
> just use message() for everything and let the users decide whether they
> want to see it.
>> I was looking through [R Internals], but I haven't found an answer. I
>> do not understand **how** suppressMessages works.
> It works by cooperating with message().
> message() itself works by trying to raise a "message" condition and
> providing a "muffleMessage" restart that does nothing. If the condition
> wasn't handled (the "muffleMessage" restart wasn't called by the
> handler), the text of the message is printed.
> In turn, suppressMessages() sets up a handler for conditions of class
> "message" that invokes the "muffleMessage" restart provided by
> message() itself above.
> We can use the fact that the availability of the "muffleMessage"
> restart is a documented detail and check whether signalling a "message"
> condition will call this restart:
> are_messages_suppressed <- function() withRestarts(
> {
> signalCondition(simpleMessage(''))
> # we stay here if restart is not invoked
> FALSE
> },
> muffleMessage = function()
> # we jump here if restart is invoked
> TRUE
> )
> are_messages_suppressed()
> # [1] FALSE
> suppressMessages(are_messages_suppressed())
> # [1] TRUE
> I don't think I understand handlers and restarts enough to explain them
> well, but the following link seems to be one of the defining documents
> for R's condition handling system:
> https://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html
> Hadley Wickham's Advanced R (first edition only) contains a good
> explanation of R's condition system:
> http://adv-r.had.co.nz/Exceptions-Debugging.html
> http://adv-r.had.co.nz/beyond-exception-handling.html
> (In my opinion, this could be a better question for R-help, since we
> ought to be using documented R APIs here.)
> -- 
> Best regards,
> Ivan
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Mon Feb 20 10:59:22 2023
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Mon, 20 Feb 2023 10:59:22 +0100
Subject: [Rd] uniroot violates bounds?
In-Reply-To: <504a005d-6c7d-7704-ef39-691b028358e0@gmail.com>
References: <4a1e9fd8-2f39-ecba-9dff-dbac6cb17fdd@gmail.com>
 <504a005d-6c7d-7704-ef39-691b028358e0@gmail.com>
Message-ID: <5d51a7d0-c5d4-79c7-9232-689cba374385@insa-toulouse.fr>

Le 18/02/2023 ? 21:44, J C Nash a ?crit?:
> I wrote first cut at unirootR for Martin M and he revised and put in
> Rmpfr.
>
> The following extends Ben's example, but adds the unirootR with trace
> output.
>
> c1 <- 4469.822
> c2 <- 572.3413
> f <- function(x) { c1/x - c2/(1-x) }; uniroot(f, c(1e-6, 1))
> uniroot(f, c(1e-6, 1))
> library(Rmpfr)
> unirootR(f, c(1e-6, 1), extendInt="no", trace=1)
>
> This gives more detail on the iterations, and it looks like the Inf is 
> the
> issue. But certainly we could do more to avoid "gotchas" like this. If
> someone is interested in some back and forth, I'd be happy to give it a
> try, but I think progress would be better with more than one contributor.
For me, the following fix makes the job :

--- nlm.R.old??? 2018-09-25 10:44:49.000000000 +0200
+++ nlm.R??? 2023-02-20 10:46:39.893542531 +0100
@@ -143,14 +143,14 @@

 ???? if(check.conv) {
 ???? val <- tryCatch(.External2(C_zeroin2, function(arg) f(arg, ...),
-??? ??? ??? ??? ?? lower, upper, f.lower, f.upper,
+??? ??? ??? ??? ?? lower, upper, f.low., f.upp.,
 ???? ??? ??? ??? ?? tol, as.integer(maxiter)),
 ???? ??? ??? warning = function(w)w)
 ???? if(inherits(val, "warning"))
 ???? ??? stop("convergence problem in zero finding: ", 
conditionMessage(val))
 ???? } else {
 ???? val <- .External2(C_zeroin2, function(arg) f(arg, ...),
-??? ??? ??? ? lower, upper, f.lower, f.upper,
+??? ??? ??? ? lower, upper, f.low., f.upp.,
 ???? ??? ??? ? tol, as.integer(maxiter))
 ???? }
 ???? iter <- as.integer(val[2L])


Best,
Serguei.

>
> Best,
>
> John Nash
>
> On 2023-02-18 12:28, Ben Bolker wrote:
>> c1 <- 4469.822
>> c2 <- 572.3413
>> f <- function(x) { c1/x - c2/(1-x) }; uniroot(f, c(1e-6, 1))
>> uniroot(f, c(1e-6, 1))
>>
>>
>> ??? provides a root at -6.00e-05, which is outside of the specified 
>> bounds.? The default value of the "extendInt" argument to uniroot() 
>> is "no", as far as I can see ...
>>
>> $root
>> [1] -6.003516e-05
>>
>> $f.root
>> [1] -74453981
>>
>> $iter
>> [1] 1
>>
>> $init.it
>> [1] NA
>>
>> $estim.prec
>> [1] 6.103516e-05
>>
>>
>> ?? I suspect this fails because f(1) (value at the upper bound) is 
>> infinite, although setting interval to c(0.01, 1) does work/give a 
>> sensible answer ...? (works for a lower bound of 1e-4, fails for 1e-5 
>> ...)
>>
>> ?? Setting the upper bound < 1 appears to avoid the problem.
>>
>> ??For what it's worth, the result has an "init.it" component, but the 
>> only thing the documentation says about it is " component ?init.it? 
>> was added in R 3.1.0".
>>
>> ?? And, I think (?) that the 'trace' argument only produces any 
>> output if the 'extendInt' option is enabled?
>>
>> ?? Inspired by 
>> https://stackoverflow.com/questions/75494696/solving-a-system-of-non-linear-equations-with-only-one-unknown/75494955#75494955
>>
>> ?? cheers
>> ??? Ben Bolker
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Feb 20 19:25:02 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 20 Feb 2023 19:25:02 +0100
Subject: [Rd] uniroot violates bounds?
In-Reply-To: <5d51a7d0-c5d4-79c7-9232-689cba374385@insa-toulouse.fr>
References: <4a1e9fd8-2f39-ecba-9dff-dbac6cb17fdd@gmail.com>
 <504a005d-6c7d-7704-ef39-691b028358e0@gmail.com>
 <5d51a7d0-c5d4-79c7-9232-689cba374385@insa-toulouse.fr>
Message-ID: <25587.47870.208722.124282@stat.math.ethz.ch>

>>>>> Serguei Sokol via R-devel 
>>>>>     on Mon, 20 Feb 2023 10:59:22 +0100 writes:

    > Le 18/02/2023 ? 21:44, J C Nash a ?crit?:
    >> I wrote first cut at unirootR for Martin M and he revised and put in
    >> Rmpfr.
    >> 
    >> The following extends Ben's example, but adds the unirootR with trace
    >> output.
    >> 
    >> c1 <- 4469.822
    >> c2 <- 572.3413
    >> f <- function(x) { c1/x - c2/(1-x) }; uniroot(f, c(1e-6, 1))
    >> uniroot(f, c(1e-6, 1))
    >> library(Rmpfr)
    >> unirootR(f, c(1e-6, 1), extendInt="no", trace=1)
    >> 
    >> This gives more detail on the iterations, and it looks like the Inf is 
    >> the
    >> issue. But certainly we could do more to avoid "gotchas" like this. If
    >> someone is interested in some back and forth, I'd be happy to give it a
    >> try, but I think progress would be better with more than one contributor.
    > For me, the following fix makes the job :

    > --- nlm.R.old??? 2018-09-25 10:44:49.000000000 +0200
    > +++ nlm.R    2023-02-20 10:46:39.893542531 +0100
    > @@ -143,14 +143,14 @@

    >      if(check.conv) {
    >      val <- tryCatch(.External2(C_zeroin2, function(arg) f(arg, ...),
    > -                   lower, upper, f.lower, f.upper,
    > +                   lower, upper, f.low., f.upp.,
    >                     tol, as.integer(maxiter)),
    >              warning = function(w)w)
    >      if(inherits(val, "warning"))
    >          stop("convergence problem in zero finding: ", 
    > conditionMessage(val))
    >      } else {
    >      val <- .External2(C_zeroin2, function(arg) f(arg, ...),
    > -              lower, upper, f.lower, f.upper,
    > +              lower, upper, f.low., f.upp.,
    >                tol, as.integer(maxiter))
    >      }
    >      iter <- as.integer(val[2L])


    > Best,
    > Serguei.

Thank you, Ben, John and Serguei !

Serguei's fix shows the way -- even though it is not sufficient in general:
f.low. and f.upp.  may not be current after interval extensions
in the doX case.

But that's easy to amend, too.

I will need to do a few more checks / code reading before I'm
100% convinced that such a change is good to be committed,  but
I'm pretty confident currently that it *is* ..


(and read on:  Ben had some good further questions, below)


    >> 
    >> Best,
    >> 
    >> John Nash


    >> On 2023-02-18 12:28, Ben Bolker wrote:
    >>> c1 <- 4469.822
    >>> c2 <- 572.3413
    >>> f <- function(x) { c1/x - c2/(1-x) }; uniroot(f, c(1e-6, 1))
    >>> uniroot(f, c(1e-6, 1))
    >>> 
    >>> 
    >>>     provides a root at -6.00e-05, which is outside of the specified 
    >>> bounds.  The default value of the "extendInt" argument to uniroot() 
    >>> is "no", as far as I can see ...
    >>> 
    >>> $root
    >>> [1] -6.003516e-05
    >>> 
    >>> $f.root
    >>> [1] -74453981
    >>> 
    >>> $iter
    >>> [1] 1
    >>> 
    >>> $init.it
    >>> [1] NA
    >>> 
    >>> $estim.prec
    >>> [1] 6.103516e-05
    >>> 
    >>>    I suspect this fails because f(1) (value at the upper bound) is 
    >>> infinite, although setting interval to c(0.01, 1) does work/give a 
    >>> sensible answer ...  (works for a lower bound of 1e-4, fails for 1e-5 
    >>> ...)
    >>> 
    >>>    Setting the upper bound < 1 appears to avoid the problem.
    >>> 
    >>>   For what it's worth, the result has an "init.it" component, but the 
    >>> only thing the documentation says about it is " component ?init.it? 
    >>> was added in R 3.1.0".

Yeah.. I had forgotten to document it when I added it, and a
fellow R corer documented it "pro tem" and then we forgot about
it.
Indeed, it gives the number of "initial iterations" which means
those were the search interval is extended, and "hence" it gives
NA when there were no such initial iterations 

    >>> 
    >>>    And, I think (?) that the 'trace' argument only produces any 
    >>> output if the 'extendInt' option is enabled?

yes, that is true for regular uniroot()
For {Rmpfr}'s unirootR(), however,

there's another argument    verbose = as.logical(trace)
so it is TRUE when trace is not 0
and does print more.

{And of course the nice thing about unirootR() is that it is
 both pure R  *and* it works with arbitrary precision "mpfr" numbers}

Martin
 
    >>> 
    >>>    Inspired by 
    >>> https://stackoverflow.com/questions/75494696/solving-a-system-of-non-linear-equations-with-only-one-unknown/75494955#75494955
    >>> 
    >>>    cheers
    >>>     Ben Bolker
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel


From ht @end|ng |rom he@therturner@net  Tue Feb 21 17:56:33 2023
From: ht @end|ng |rom he@therturner@net (Heather Turner)
Date: Tue, 21 Feb 2023 16:56:33 +0000
Subject: [Rd] R Project Sprint 2023, Aug 30 - Sep 1, Coventry, UK
Message-ID: <7a0a197f-ea31-4fd5-9067-22944eab6800@app.fastmail.com>

Dear All,

We are happy to announce R Project Sprint 2023

Dates: Wednesday August 30 to Friday September 1.
Venue: University of Warwick, Coventry, UK

Novice and experienced contributors are encouraged to apply for a place at the residential event, with funding available for travel: **deadline Friday 10 March**.

For further details, please visit the sprint website: https://contributor.r-project.org/r-project-sprint-2023/.

We also welcome additional sponsors to support participant travel, accommodation and/or social events. Please contact r-project-sprint-2023 at gaggle.email if you would like to explore this option!

Best wishes,

Heather Turner
on behalf of the local organizing team


	[[alternative HTML version deleted]]


From m@rk@c|ement@ @end|ng |rom k|@@e  Tue Feb 21 16:47:07 2023
From: m@rk@c|ement@ @end|ng |rom k|@@e (Mark Clements)
Date: Tue, 21 Feb 2023 15:47:07 +0000
Subject: [Rd] User-defined RNG with the standalone Rmath library
Message-ID: <GV3P280MB0001C30A28AC12F816B751ADF0A59@GV3P280MB0001.SWEP280.PROD.OUTLOOK.COM>

As a follow-up: I provide examples using the standalone Rmath library with the Mersenne Twister RNG at https://gist.github.com/mclements/3668c89d73e4504f323ca57a71c65602 and https://github.com/mclements/rmath_mt/

Note that rwilcox() uses R_unif_index(), which needs to be re-defined so that the [dpqr]wilcox functions are available when using a user-defined RNG. The sections in the R manuals describing the standalone Rmath library could note this need.

The code above compiles on Ubuntu 22.04 LTS on x86_64 using both src/nmath/standalone/* and using the r-mathlib package on Debian.

-- Mark


N?r du skickar e-post till Karolinska Institutet (KI) inneb?r detta att KI kommer att behandla dina personuppgifter. H?r finns information om hur KI behandlar personuppgifter<https://ki.se/medarbetare/integritetsskyddspolicy>.


Sending email to Karolinska Institutet (KI) will result in KI processing your personal data. You can read more about KI?s processing of personal data here<https://ki.se/en/staff/data-protection-policy>.

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Feb 22 11:32:25 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 22 Feb 2023 11:32:25 +0100
Subject: [Rd] uniroot violates bounds?
In-Reply-To: <25587.47870.208722.124282@stat.math.ethz.ch>
References: <4a1e9fd8-2f39-ecba-9dff-dbac6cb17fdd@gmail.com>
 <504a005d-6c7d-7704-ef39-691b028358e0@gmail.com>
 <5d51a7d0-c5d4-79c7-9232-689cba374385@insa-toulouse.fr>
 <25587.47870.208722.124282@stat.math.ethz.ch>
Message-ID: <25589.61241.39294.195005@stat.math.ethz.ch>


>>>>> Martin Maechler on Mon, 20 Feb 2023 19:25:02 +0100 writes:

>>>>> Serguei Sokol via R-devel 
>>>>>     on Mon, 20 Feb 2023 10:59:22 +0100 writes:

    >> Le 18/02/2023 ? 21:44, J C Nash a ?crit?:
    >>> I wrote first cut at unirootR for Martin M and he revised and put in
    >>> Rmpfr.
    >>> 
    >>> The following extends Ben's example, but adds the unirootR with trace
    >>> output.
    >>> 
    >>> c1 <- 4469.822
    >>> c2 <- 572.3413
    >>> f <- function(x) { c1/x - c2/(1-x) }; uniroot(f, c(1e-6, 1))
    >>> uniroot(f, c(1e-6, 1))
    >>> library(Rmpfr)
    >>> unirootR(f, c(1e-6, 1), extendInt="no", trace=1)
    >>> 
    >>> This gives more detail on the iterations, and it looks like the Inf is 
    >>> the
    >>> issue. But certainly we could do more to avoid "gotchas" like this. If
    >>> someone is interested in some back and forth, I'd be happy to give it a
    >>> try, but I think progress would be better with more than one contributor.
    >> For me, the following fix makes the job :

    >> --- nlm.R.old??? 2018-09-25 10:44:49.000000000 +0200
    >> +++ nlm.R    2023-02-20 10:46:39.893542531 +0100
    >> @@ -143,14 +143,14 @@

    >>      if(check.conv) {
    >>      val <- tryCatch(.External2(C_zeroin2, function(arg) f(arg, ...),
    >> -                   lower, upper, f.lower, f.upper,
    >> +                   lower, upper, f.low., f.upp.,
    >>                     tol, as.integer(maxiter)),
    >>              warning = function(w)w)
    >>      if(inherits(val, "warning"))
    >>          stop("convergence problem in zero finding: ", 
    >> conditionMessage(val))
    >>      } else {
    >>      val <- .External2(C_zeroin2, function(arg) f(arg, ...),
    >> -              lower, upper, f.lower, f.upper,
    >> +              lower, upper, f.low., f.upp.,
    >>                tol, as.integer(maxiter))
    >>      }
    >>      iter <- as.integer(val[2L])


    >> Best,
    >>  Serguei.

> Thank you, Ben, John and Serguei !

> Serguei's fix shows the way -- even though it is not sufficient in general:
> f.low. and f.upp.  may not be current after interval extensions
> in the doX case.

> But that's easy to amend, too.

> I will need to do a few more checks / code reading before I'm
> 100% convinced that such a change is good to be committed,  but
> I'm pretty confident currently that it *is* ..

I have committed the changes to R-devel now

------------------------------------------------------------------------
r83889 | maechler | 2023-02-22 10:14:19 +0100 
Changed paths:
   M doc/NEWS.Rd
   M src/library/stats/R/nlm.R
   M src/library/stats/man/uniroot.Rd
   M tests/reg-tests-1e.R

uniroot() close to |f()| = Inf staying in interval
------------------------------------------------------------------------

... in the NEWS thanking Ben and Serguei.

There's a small possibility that this did not only fix the bug,
but has also very slightly changed uniroot() results in
situations they were good already (so test code which over zealously
compares previous with current results may trigger ..).
but I think the extra safe guarding against +/- Inf values in
f(.) is well worth it

{The commit also improves the help page saying more about
'init.it' in the result.}

Martin


From v@mch@|e @end|ng |rom gm@||@com  Wed Feb 22 23:05:59 2023
From: v@mch@|e @end|ng |rom gm@||@com (Vanessa McHale)
Date: Wed, 22 Feb 2023 17:05:59 -0500
Subject: [Rd] dyn.load loads libraries/symbols at high addresses.
Message-ID: <3994ce10-2b23-bc0f-e552-9689041543b5@gmail.com>

Hello all,

I am trying to write an interface for BQN 
<https://mlochbaum.github.io/BQN/> and R

However, even
|
dyn.load("/usr/local/lib/libcbqn.so"); .Call("bqn_init")|

immediately fails on the BQN side, viz.

|Failed to allocate memory for JIT 200 times; stopping trying||
||CBQN interpreter entered unexpected state, exiting.

|This is because BQN tries to allocate memory for a JIT near itself and 
also in the lower 32 bits.|

u64 near = (u64)&bqn_exec;
u64 MAX_DIST = 1ULL<<30;
mmap(NULL, sz, PROT_READ|PROT_WRITE|PROT_EXEC, 
MAP_NORESERVE|MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0);

|However, |&bqn_exec| seems to be 0x7...||i.e. libcbqn.so is being 
loaded to a high address. Why is this? Is there some way to request that 
it and its symbols be loaded to lower addresses? I have never had this 
happen when using dlopen and dlsym!|
|
Thanks!
Vanessa McHale|
|

	[[alternative HTML version deleted]]


From yut@n|@|n| @end|ng |rom gm@||@com  Thu Feb 23 03:27:21 2023
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Thu, 23 Feb 2023 11:27:21 +0900
Subject: [Rd] Undocumented change of dirname("C:/") on R-devel on Windows
Message-ID: <CALyqOb8-eihVs9FW2AcH42mOCwZj2gLsq=j1sNUSthnf0k7Zow@mail.gmail.com>

Hi,

I found dirname() behaves differently on R-devel on Windows. Since I'm not
sure which behavior is right, let me ask here before filing this to R's
Bigzilla.

On R 4.2.2., we get

    > dirname("C:/")
    [1] "C:/"

However, on R-devel (r83888), we get

    > dirname("C:/")
    [1] "."

?dirname says 'dirname returns the part of the path up to but excluding the
last path separator, or "." if there is no path separator,' but I don't see
how the root path is supposed to be treated based on this rule (, whether
it's WIndows or UNIX-alike).

What should we expect as the return value of dirname("C:/")? I feel the
current behavior on R 4.2.2 is right, but I'd like to confirm.

Best,
Yutani

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Feb 23 09:15:17 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 23 Feb 2023 09:15:17 +0100
Subject: [Rd] 
 Undocumented change of dirname("C:/") on R-devel on Windows
In-Reply-To: <CALyqOb8-eihVs9FW2AcH42mOCwZj2gLsq=j1sNUSthnf0k7Zow@mail.gmail.com>
References: <CALyqOb8-eihVs9FW2AcH42mOCwZj2gLsq=j1sNUSthnf0k7Zow@mail.gmail.com>
Message-ID: <1db6ce6b-04f0-b890-c320-3e0cbc20a99f@gmail.com>


On 2/23/23 03:27, Hiroaki Yutani wrote:
> Hi,
>
> I found dirname() behaves differently on R-devel on Windows. Since I'm not
> sure which behavior is right, let me ask here before filing this to R's
> Bigzilla.
>
> On R 4.2.2., we get
>
>      > dirname("C:/")
>      [1] "C:/"
>
> However, on R-devel (r83888), we get
>
>      > dirname("C:/")
>      [1] "."
>
> ?dirname says 'dirname returns the part of the path up to but excluding the
> last path separator, or "." if there is no path separator,' but I don't see
> how the root path is supposed to be treated based on this rule (, whether
> it's WIndows or UNIX-alike).
Thanks for spotting the difference, I've reverted to the previous 
behavior, the change was unintentional. If you spot any other suspicious 
changes in behavior in file-system operations, please report.
> What should we expect as the return value of dirname("C:/")? I feel the
> current behavior on R 4.2.2 is right, but I'd like to confirm.

I also think the old behavior is better, even though it could be argued 
whether the "/" in "C:/" is a path separator or not, and whether it is 
trailing or not. But the behavior is in line with Unix where dirname of 
"/" is also "/". Msys2 would return "C:".

If? "/" in "C:/" is a path separator but not a trailing path separator, 
then basename("C:/") should probably be "" and not "C:", and this would 
be in line with what R does on Unix. However, to be in line with Unix, I 
think the basename of "C:/" should be "C:/". Yet, Msys2 returns "C:" 
which is what R does now.

So what these functions should do on Windows is definitely tricky. In 
either case the behavior is now again as in R 4.2.2.

Best
Tomas

>
> Best,
> Yutani
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Feb 23 09:48:21 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 23 Feb 2023 09:48:21 +0100
Subject: [Rd] dyn.load loads libraries/symbols at high addresses.
In-Reply-To: <3994ce10-2b23-bc0f-e552-9689041543b5@gmail.com>
References: <3994ce10-2b23-bc0f-e552-9689041543b5@gmail.com>
Message-ID: <8207ed5e-5ad9-408c-d1c9-6d00e1ba756b@gmail.com>


On 2/22/23 23:05, Vanessa McHale wrote:
> Hello all,
>
> I am trying to write an interface for BQN
> <https://mlochbaum.github.io/BQN/> and R
>
> However, even
> |
> dyn.load("/usr/local/lib/libcbqn.so"); .Call("bqn_init")|
>
> immediately fails on the BQN side, viz.
>
> |Failed to allocate memory for JIT 200 times; stopping trying||
> ||CBQN interpreter entered unexpected state, exiting.
>
> |This is because BQN tries to allocate memory for a JIT near itself and
> also in the lower 32 bits.|
>
> u64 near = (u64)&bqn_exec;
> u64 MAX_DIST = 1ULL<<30;
> mmap(NULL, sz, PROT_READ|PROT_WRITE|PROT_EXEC,
> MAP_NORESERVE|MAP_PRIVATE|MAP_ANONYMOUS|MAP_32BIT, -1, 0);
>
> |However, |&bqn_exec| seems to be 0x7...||i.e. libcbqn.so is being
> loaded to a high address. Why is this? Is there some way to request that
> it and its symbols be loaded to lower addresses? I have never had this
> happen when using dlopen and dlsym!|

R doesn't do anything special here, it uses also dlopen() and dlsym() on 
Unix systems. I am not aware of a portable way to influence where the 
library gets loaded at OS level, and certainly there is no such way in R.

Best
Tomas

> |
> Thanks!
> Vanessa McHale|
> |
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From yut@n|@|n| @end|ng |rom gm@||@com  Thu Feb 23 12:12:53 2023
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Thu, 23 Feb 2023 20:12:53 +0900
Subject: [Rd] 
 Undocumented change of dirname("C:/") on R-devel on Windows
In-Reply-To: <1db6ce6b-04f0-b890-c320-3e0cbc20a99f@gmail.com>
References: <CALyqOb8-eihVs9FW2AcH42mOCwZj2gLsq=j1sNUSthnf0k7Zow@mail.gmail.com>
 <1db6ce6b-04f0-b890-c320-3e0cbc20a99f@gmail.com>
Message-ID: <CALyqOb8fuhNtO3QZVO75Zvb91EbV0ZgLvUPRyC6KkVYBWocUQw@mail.gmail.com>

Thanks for the prompt response, I'll confirm it after the new R-devel
binary is available.
Also, thanks for the detailed explanation. I agree with you in general.

> "/" in "C:/" is a path separator or not, and whether it is trailing or not

It seems a Windows' path basically consists of two components; a drive
specification (e.g., C:) and the directory structure within the drive. What
I learned today is that both "C:/" and "C:" are valid path specifications,
but refer to different locations; "C:" is not the root directory of the
drive, but just a relative path [1]. So, I agree with you that the basename
of "C:/" should be "C:/". However, at the same time, I don't feel this is
worth a breaking change, so I think we can preserve the current (R 4.2.2)
behavior.

[1]:
https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats#apply-the-current-directory

Best,
Yutani

2023?2?23?(?) 17:15 Tomas Kalibera <tomas.kalibera at gmail.com>:

>
> On 2/23/23 03:27, Hiroaki Yutani wrote:
> > Hi,
> >
> > I found dirname() behaves differently on R-devel on Windows. Since I'm
> not
> > sure which behavior is right, let me ask here before filing this to R's
> > Bigzilla.
> >
> > On R 4.2.2., we get
> >
> >      > dirname("C:/")
> >      [1] "C:/"
> >
> > However, on R-devel (r83888), we get
> >
> >      > dirname("C:/")
> >      [1] "."
> >
> > ?dirname says 'dirname returns the part of the path up to but excluding
> the
> > last path separator, or "." if there is no path separator,' but I don't
> see
> > how the root path is supposed to be treated based on this rule (, whether
> > it's WIndows or UNIX-alike).
> Thanks for spotting the difference, I've reverted to the previous
> behavior, the change was unintentional. If you spot any other suspicious
> changes in behavior in file-system operations, please report.
> > What should we expect as the return value of dirname("C:/")? I feel the
> > current behavior on R 4.2.2 is right, but I'd like to confirm.
>
> I also think the old behavior is better, even though it could be argued
> whether the "/" in "C:/" is a path separator or not, and whether it is
> trailing or not. But the behavior is in line with Unix where dirname of
> "/" is also "/". Msys2 would return "C:".
>
> If  "/" in "C:/" is a path separator but not a trailing path separator,
> then basename("C:/") should probably be "" and not "C:", and this would
> be in line with what R does on Unix. However, to be in line with Unix, I
> think the basename of "C:/" should be "C:/". Yet, Msys2 returns "C:"
> which is what R does now.
>
> So what these functions should do on Windows is definitely tricky. In
> either case the behavior is now again as in R 4.2.2.
>
> Best
> Tomas
>
> >
> > Best,
> > Yutani
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From yut@n|@|n| @end|ng |rom gm@||@com  Fri Feb 24 06:44:08 2023
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Fri, 24 Feb 2023 14:44:08 +0900
Subject: [Rd] 
 Undocumented change of dirname("C:/") on R-devel on Windows
In-Reply-To: <CALyqOb8fuhNtO3QZVO75Zvb91EbV0ZgLvUPRyC6KkVYBWocUQw@mail.gmail.com>
References: <CALyqOb8-eihVs9FW2AcH42mOCwZj2gLsq=j1sNUSthnf0k7Zow@mail.gmail.com>
 <1db6ce6b-04f0-b890-c320-3e0cbc20a99f@gmail.com>
 <CALyqOb8fuhNtO3QZVO75Zvb91EbV0ZgLvUPRyC6KkVYBWocUQw@mail.gmail.com>
Message-ID: <CALyqOb8xCA182niry8_OudVw+xVpg=WiPCMsEQZTP=R7Wc2wzw@mail.gmail.com>

I confirmed the revert fixed my failing test. Thanks!

2023?2?23?(?) 20:12 Hiroaki Yutani <yutani.ini at gmail.com>:

> Thanks for the prompt response, I'll confirm it after the new R-devel
> binary is available.
> Also, thanks for the detailed explanation. I agree with you in general.
>
> > "/" in "C:/" is a path separator or not, and whether it is trailing or
> not
>
> It seems a Windows' path basically consists of two components; a drive
> specification (e.g., C:) and the directory structure within the drive. What
> I learned today is that both "C:/" and "C:" are valid path specifications,
> but refer to different locations; "C:" is not the root directory of the
> drive, but just a relative path [1]. So, I agree with you that the basename
> of "C:/" should be "C:/". However, at the same time, I don't feel this is
> worth a breaking change, so I think we can preserve the current (R 4.2.2)
> behavior.
>
> [1]:
> https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats#apply-the-current-directory
>
> Best,
> Yutani
>
> 2023?2?23?(?) 17:15 Tomas Kalibera <tomas.kalibera at gmail.com>:
>
>>
>> On 2/23/23 03:27, Hiroaki Yutani wrote:
>> > Hi,
>> >
>> > I found dirname() behaves differently on R-devel on Windows. Since I'm
>> not
>> > sure which behavior is right, let me ask here before filing this to R's
>> > Bigzilla.
>> >
>> > On R 4.2.2., we get
>> >
>> >      > dirname("C:/")
>> >      [1] "C:/"
>> >
>> > However, on R-devel (r83888), we get
>> >
>> >      > dirname("C:/")
>> >      [1] "."
>> >
>> > ?dirname says 'dirname returns the part of the path up to but excluding
>> the
>> > last path separator, or "." if there is no path separator,' but I don't
>> see
>> > how the root path is supposed to be treated based on this rule (,
>> whether
>> > it's WIndows or UNIX-alike).
>> Thanks for spotting the difference, I've reverted to the previous
>> behavior, the change was unintentional. If you spot any other suspicious
>> changes in behavior in file-system operations, please report.
>> > What should we expect as the return value of dirname("C:/")? I feel the
>> > current behavior on R 4.2.2 is right, but I'd like to confirm.
>>
>> I also think the old behavior is better, even though it could be argued
>> whether the "/" in "C:/" is a path separator or not, and whether it is
>> trailing or not. But the behavior is in line with Unix where dirname of
>> "/" is also "/". Msys2 would return "C:".
>>
>> If  "/" in "C:/" is a path separator but not a trailing path separator,
>> then basename("C:/") should probably be "" and not "C:", and this would
>> be in line with what R does on Unix. However, to be in line with Unix, I
>> think the basename of "C:/" should be "C:/". Yet, Msys2 returns "C:"
>> which is what R does now.
>>
>> So what these functions should do on Windows is definitely tricky. In
>> either case the behavior is now again as in R 4.2.2.
>>
>> Best
>> Tomas
>>
>> >
>> > Best,
>> > Yutani
>> >
>> >       [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From AHL27 @end|ng |rom p|tt@edu  Thu Feb 23 22:52:08 2023
From: AHL27 @end|ng |rom p|tt@edu (Lakshman, Aidan H)
Date: Thu, 23 Feb 2023 21:52:08 +0000
Subject: [Rd] `dendrapply` Enhancements
Message-ID: <BL0PR04MB47068D544F5A49315EF1D042D9AB9@BL0PR04MB4706.namprd04.prod.outlook.com>

Hi everyone,

My apologies if this isn?t the right place to submit this?I?m new to the R-devel community and still figuring out what is where.

If people want to skip my writeup and just look at the code, I?ve made a repository for it here: https://github.com/ahl27/new_dendrapply/tree/master. I?m not quite sure how to integrate it into a fork of R-devel; the package structure is different from what I?m used to.

I had written a slightly improved version of dendrapply for one of my research projects, and my advisor encouraged me to submit it to the R project. It took me longer than I expected, but I?ve finally gotten my implementation to be a drop-in replacement for `stats::dendrapply`. The man page for `stats::dendrapply` says ?The implementation is somewhat experimental and suggestions for enhancements (or nice examples of usage) are very welcome,? so I figured this had the potential to be a worthwhile contribution. I wanted to send it out to R-devel to see if this was something worth pursuing as an enhancement to R.

The implementation I have is based in C, which I understand implies an increased burden of maintenance over pure R code. However, it does come with the following benefits:

- Completely eliminates recursion, so no memory overhead from function calls or possibility of stack overflows (this was a major issue reported on some of the functions in one of our Bioconductor packages that previously used `dendrapply`).
- Modest runtime improvement, around 2x on my computer (2021 MBP, 32GB RAM). I?m relatively confident this could be optimized more.
- Seemingly significant reduction in memory reduction, still working on a robust benchmark. Suggestions for the best way to do that are welcome.
- Support for applying functions with an inorder traversal (as in `stats::dendrapply`) as well as using a postorder traversal.

This implementation was tested manually as well as running all the unit tests in `dendextend`, which comprises a lot of applications of `dendrapply`.

The postorder traversal would be a significant new functionality to dendrapply, as it would allow for functions that use the child nodes to correctly execute. A toy example of this is something like:
```
exFunc <- function(x){
  attr(x, 'newA') <- 'a'
  if(is.null(attr(x, 'leaf'))){
    cat(attr(x[[1]], 'newA'), attr(x[[2]], 'newA'))
    cat('\n')
  }
  x
})

dendrapply(dend, exFunc)
```

With the current version of dendrapply, this prints nothing, but the postorder traversal version will print ?a? twice for each internal branch. If this would be a worthwhile addition, I can refactor the code for brevity and add a `how=c("in.order", "post.order")`, with the default value ?in.order? to maintain backwards compatibility. A preorder traversal version should also be possible, I just haven?t gotten to it yet.

I think the runtime could be optimized more as well.

Thank you in advance for looking at my code and offering feedback; I?m excited at the possibility of helping contribute to the R project! I?m happy to discuss more either here, on GitHub, or on the R Contributors Slack.

Sincerely,
Aidan Lakshman

-----------------------
Aidan Lakshman (he/him)<https://www.ahl27.com/>
Doctoral Candidate, Wright Lab<https://www.wrightlabscience.com/>
University of Pittsburgh School of Medicine
Department of Biomedical Informatics
ahl27 at pitt.edu
(724) 612-9940


	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Fri Feb 24 12:57:00 2023
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Fri, 24 Feb 2023 04:57:00 -0700
Subject: [Rd] `dendrapply` Enhancements
In-Reply-To: <BL0PR04MB47068D544F5A49315EF1D042D9AB9@BL0PR04MB4706.namprd04.prod.outlook.com>
References: <BL0PR04MB47068D544F5A49315EF1D042D9AB9@BL0PR04MB4706.namprd04.prod.outlook.com>
Message-ID: <CALK03d1PWiA4tfbRkxMBU6tckhfB2JRGUmnuqh5ygLcCLHDXNw@mail.gmail.com>

Hi Aidan, I think you are on the right email list.
I'm not R-core, but this looks like an interesting/meaningful/significant
contribution to base R.
I'm not sure what the original dendrapply looks like in terms of code style
(variable names/white space formatting/etc) but in my experience it is
important that your code contribution makes minimal changes in that area.
Did you hear about the R project sprint 2023?
https://contributor.r-project.org/r-project-sprint-2023/ Your work falls
into the "new developments" category so I think you could apply for that
funding to participate.
Toby

On Fri, Feb 24, 2023 at 3:47 AM Lakshman, Aidan H <AHL27 at pitt.edu> wrote:

> Hi everyone,
>
> My apologies if this isn?t the right place to submit this?I?m new to the
> R-devel community and still figuring out what is where.
>
> If people want to skip my writeup and just look at the code, I?ve made a
> repository for it here:
> https://github.com/ahl27/new_dendrapply/tree/master. I?m not quite sure
> how to integrate it into a fork of R-devel; the package structure is
> different from what I?m used to.
>
> I had written a slightly improved version of dendrapply for one of my
> research projects, and my advisor encouraged me to submit it to the R
> project. It took me longer than I expected, but I?ve finally gotten my
> implementation to be a drop-in replacement for `stats::dendrapply`. The man
> page for `stats::dendrapply` says ?The implementation is somewhat
> experimental and suggestions for enhancements (or nice examples of usage)
> are very welcome,? so I figured this had the potential to be a worthwhile
> contribution. I wanted to send it out to R-devel to see if this was
> something worth pursuing as an enhancement to R.
>
> The implementation I have is based in C, which I understand implies an
> increased burden of maintenance over pure R code. However, it does come
> with the following benefits:
>
> - Completely eliminates recursion, so no memory overhead from function
> calls or possibility of stack overflows (this was a major issue reported on
> some of the functions in one of our Bioconductor packages that previously
> used `dendrapply`).
> - Modest runtime improvement, around 2x on my computer (2021 MBP, 32GB
> RAM). I?m relatively confident this could be optimized more.
> - Seemingly significant reduction in memory reduction, still working on a
> robust benchmark. Suggestions for the best way to do that are welcome.
> - Support for applying functions with an inorder traversal (as in
> `stats::dendrapply`) as well as using a postorder traversal.
>
> This implementation was tested manually as well as running all the unit
> tests in `dendextend`, which comprises a lot of applications of
> `dendrapply`.
>
> The postorder traversal would be a significant new functionality to
> dendrapply, as it would allow for functions that use the child nodes to
> correctly execute. A toy example of this is something like:
> ```
> exFunc <- function(x){
>   attr(x, 'newA') <- 'a'
>   if(is.null(attr(x, 'leaf'))){
>     cat(attr(x[[1]], 'newA'), attr(x[[2]], 'newA'))
>     cat('\n')
>   }
>   x
> })
>
> dendrapply(dend, exFunc)
> ```
>
> With the current version of dendrapply, this prints nothing, but the
> postorder traversal version will print ?a? twice for each internal branch.
> If this would be a worthwhile addition, I can refactor the code for brevity
> and add a `how=c("in.order", "post.order")`, with the default value
> ?in.order? to maintain backwards compatibility. A preorder traversal
> version should also be possible, I just haven?t gotten to it yet.
>
> I think the runtime could be optimized more as well.
>
> Thank you in advance for looking at my code and offering feedback; I?m
> excited at the possibility of helping contribute to the R project! I?m
> happy to discuss more either here, on GitHub, or on the R Contributors
> Slack.
>
> Sincerely,
> Aidan Lakshman
>
> -----------------------
> Aidan Lakshman (he/him)<https://www.ahl27.com/>
> Doctoral Candidate, Wright Lab<https://www.wrightlabscience.com/>
> University of Pittsburgh School of Medicine
> Department of Biomedical Informatics
> ahl27 at pitt.edu
> (724) 612-9940
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @|y@oh4 @end|ng |rom uc|@edu  Fri Feb 24 00:33:23 2023
From: @|y@oh4 @end|ng |rom uc|@edu (Jane He)
Date: Thu, 23 Feb 2023 15:33:23 -0800
Subject: [Rd] Compilation Error when DEBUG_approx Toggled on in RISC-V
Message-ID: <CAFKhkaxEmj8n7bLec9Lqs+JemM2ydmuRkrvTVL5gjD+0v4ua1A@mail.gmail.com>

Hi all,

While compiling R to RISC-V64 architecture and debugging in R's C source
codes, I think I have found a small bug. Can anyone please verify whether
it is a real bug?

The possible bug lies in the file `R-4.2.2/src/library/stats/src/approx.c`
in function `R_approxfun` around line 148:

#ifdef DEBUG_approx
    REprintf("R_approxfun(x,y, nxy = %.0f, .., nout = %.0f, method = %d,
...)",
    (double)nxy, (double)nout, Meth->kind);
#endif

However, there is no `Meth` defined in this function, causing a compilation
error when `DEBUG_approx` is toggled on. The real `Meth` is actually
defined in the `approx1` function, and the Meth seen here is probably a
historical artifact that was never erased. To fix the error, I suggest
changing `Meth->kind` to `method` in the `R_approxfun` function as follows:

#ifdef DEBUG_approx
    REprintf("R_approxfun(x,y, nxy = %.0f, .., nout = %.0f, method = %d,
...)",
    (double)nxy, (double)nout, method);
#endif

If this is really an error, I hope this small fix will be helpful to the R
community.

Thank you for your time and consideration.

Best,
Jane He

_________
University of California, Irvine
Student of Master of Software Engineering
2022-2023 cohort

	[[alternative HTML version deleted]]


From @|y@oh4 @end|ng |rom uc|@edu  Fri Feb 24 00:39:08 2023
From: @|y@oh4 @end|ng |rom uc|@edu (Jane He)
Date: Thu, 23 Feb 2023 15:39:08 -0800
Subject: [Rd] Possible NA Propagation Failure in RISC-V64 CPU?
Message-ID: <CAFKhkawZCNVPNhcOLebhQMUFUnC_tqyf_x3j7gD=2YKPn+hYRg@mail.gmail.com>

Hi all,

I am currently compiling R to RISC-V64 CPU and I think I have discovered a
NA propagation failure.

How R implements NA (not available) and NaN (not-a-number) is explained in
detail here:
https://stat.ethz.ch/pipermail/r-devel/2014-February/068380.html.

In short, according to my understanding of R's convention, any calculation
involving NA but no NaN should result in NA (called NA propagation), and
any calculation involving NaN but no NA should result in NaN. Calculations
involving both NA and NaN can result in either value.

While many R functions handle this logic in their source codes, basic
arithmetic operations such as +-/* throw it to the hardware to handle.
However, the RISC-V64 CPU does not behave as expected, at least the CPU I
am using (Starfive JH7100-7110).

Here are the relevant bit patterns. From my understanding, as IEEE only
regulates the bit patterns of NaN, R picks one of the bit patterns (ending
with 07a2) and declares it as NA.

# print_hex is a function to print the bit pattern in hex
> print_hex(0.1)
3fb999999999999a # same for RISC-V
> print_hex(NaN)
7ff8000000000000 # same for RISC-V
> print_hex(NA)
7ff00000000007a2 # same for RISC-V
> print_hex(NA+1)
7ff80000000007a2 # 7ff8000000000000 in RISC-V
> print_hex(NA*1)
7ff80000000007a2 # 7ff8000000000000 in RISC-V
> print_hex(NaN*1)
7ff8000000000000 # same for RISC-V


Therefore, in RISC-V64, all basic arithmetic operations involving NA give
NaN.

> NA+1
[1] NaN

This failure in NA propagation may cause many R packages like mice to not
work properly, and results in the `make check` test in the `stats` package
to fail. Example from the make check test:

xn <- 1:4
yn <- c(1,NA,3:4)
xout <- (1:9)/2
data.frame(approx(xn,yn, xout, na.rm=FALSE, rule = 2)) # failure, some
values should be NA but it turns out NaN

I am reaching out to the R community looking for help in solving this
problem. Does anyone around here have any hints or ideas on how to solve
this issue?

Currently, my hacky implementation is to stop the NA operand before it goes
to the hardware and directly return NA as the output. However, this
solution may penalize performance significantly, so I am looking for any
alternative idea.

Thank you for your time and consideration!

Best regards,
Jane He

_________
University of California, Irvine
Student of Master of Software Engineering
2022-2023 cohort

	[[alternative HTML version deleted]]


From AHL27 @end|ng |rom p|tt@edu  Fri Feb 24 13:42:52 2023
From: AHL27 @end|ng |rom p|tt@edu (Lakshman, Aidan H)
Date: Fri, 24 Feb 2023 12:42:52 +0000
Subject: [Rd] `dendrapply` Enhancements
In-Reply-To: <CALK03d1PWiA4tfbRkxMBU6tckhfB2JRGUmnuqh5ygLcCLHDXNw@mail.gmail.com>
References: <BL0PR04MB47068D544F5A49315EF1D042D9AB9@BL0PR04MB4706.namprd04.prod.outlook.com>
 <CALK03d1PWiA4tfbRkxMBU6tckhfB2JRGUmnuqh5ygLcCLHDXNw@mail.gmail.com>
Message-ID: <BL0PR04MB4706A66884728B9419CEAE00D9A89@BL0PR04MB4706.namprd04.prod.outlook.com>

Hi Toby,

Thanks for your reply! I haven?t heard about the R project sprint, but I?ll definitely check it out. UK is going to be a little hard for me to get to funding-wise, but I?ll try to apply for funding.

I appreciate your other comments. As far as coding style, I did do everything I could think of to make sure it?s a drop-in replacement for the current version with the default settings, so all the user-exposed arguments/variables should be identical. I used the conventions in https://github.com/wch/r-source/wiki/Contributing for commenting and whitespace, so hopefully that all looks okay. I?m realizing there may be some differences in tab widths, but I can fix that later today.

-Aidan

-----------------------
Aidan Lakshman (he/him)<https://www.ahl27.com/>
Doctoral Candidate, Wright Lab<https://www.wrightlabscience.com/>
University of Pittsburgh School of Medicine
Department of Biomedical Informatics
ahl27 at pitt.edu
(724) 612-9940


From: Toby Hocking <tdhock5 at gmail.com>
Date: Friday, February 24, 2023 at 06:57
To: Lakshman, Aidan H <AHL27 at pitt.edu>
Cc: R-devel at r-project.org <R-devel at r-project.org>
Subject: Re: [Rd] `dendrapply` Enhancements
Hi Aidan, I think you are on the right email list.
I'm not R-core, but this looks like an interesting/meaningful/significant contribution to base R.
I'm not sure what the original dendrapply looks like in terms of code style (variable names/white space formatting/etc) but in my experience it is important that your code contribution makes minimal changes in that area.
Did you hear about the R project sprint 2023? https://contributor.r-project.org/r-project-sprint-2023/<https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fcontributor.r-project.org%2Fr-project-sprint-2023%2F&data=05%7C01%7CAHL27%40pitt.edu%7C41b702f139034cd7165608db165e4530%7C9ef9f489e0a04eeb87cc3a526112fd0d%7C1%7C0%7C638128366414606277%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=oB%2BBivUsBjIgBtZNU8mh%2Fz2rujD3bv9MbWdxqNtyUFk%3D&reserved=0> Your work falls into the "new developments" category so I think you could apply for that funding to participate.
Toby

On Fri, Feb 24, 2023 at 3:47 AM Lakshman, Aidan H <AHL27 at pitt.edu<mailto:AHL27 at pitt.edu>> wrote:
Hi everyone,

My apologies if this isn?t the right place to submit this?I?m new to the R-devel community and still figuring out what is where.

If people want to skip my writeup and just look at the code, I?ve made a repository for it here: https://github.com/ahl27/new_dendrapply/tree/master<https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fahl27%2Fnew_dendrapply%2Ftree%2Fmaster&data=05%7C01%7CAHL27%40pitt.edu%7C41b702f139034cd7165608db165e4530%7C9ef9f489e0a04eeb87cc3a526112fd0d%7C1%7C0%7C638128366414606277%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=QI%2B5t1C%2BJB15D8o8noZra4W87fgyITm12nluGN%2BFNoE%3D&reserved=0>. I?m not quite sure how to integrate it into a fork of R-devel; the package structure is different from what I?m used to.

I had written a slightly improved version of dendrapply for one of my research projects, and my advisor encouraged me to submit it to the R project. It took me longer than I expected, but I?ve finally gotten my implementation to be a drop-in replacement for `stats::dendrapply`. The man page for `stats::dendrapply` says ?The implementation is somewhat experimental and suggestions for enhancements (or nice examples of usage) are very welcome,? so I figured this had the potential to be a worthwhile contribution. I wanted to send it out to R-devel to see if this was something worth pursuing as an enhancement to R.

The implementation I have is based in C, which I understand implies an increased burden of maintenance over pure R code. However, it does come with the following benefits:

- Completely eliminates recursion, so no memory overhead from function calls or possibility of stack overflows (this was a major issue reported on some of the functions in one of our Bioconductor packages that previously used `dendrapply`).
- Modest runtime improvement, around 2x on my computer (2021 MBP, 32GB RAM). I?m relatively confident this could be optimized more.
- Seemingly significant reduction in memory reduction, still working on a robust benchmark. Suggestions for the best way to do that are welcome.
- Support for applying functions with an inorder traversal (as in `stats::dendrapply`) as well as using a postorder traversal.

This implementation was tested manually as well as running all the unit tests in `dendextend`, which comprises a lot of applications of `dendrapply`.

The postorder traversal would be a significant new functionality to dendrapply, as it would allow for functions that use the child nodes to correctly execute. A toy example of this is something like:
```
exFunc <- function(x){
  attr(x, 'newA') <- 'a'
  if(is.null(attr(x, 'leaf'))){
    cat(attr(x[[1]], 'newA'), attr(x[[2]], 'newA'))
    cat('\n')
  }
  x
})

dendrapply(dend, exFunc)
```

With the current version of dendrapply, this prints nothing, but the postorder traversal version will print ?a? twice for each internal branch. If this would be a worthwhile addition, I can refactor the code for brevity and add a `how=c("in.order", "post.order")`, with the default value ?in.order? to maintain backwards compatibility. A preorder traversal version should also be possible, I just haven?t gotten to it yet.

I think the runtime could be optimized more as well.

Thank you in advance for looking at my code and offering feedback; I?m excited at the possibility of helping contribute to the R project! I?m happy to discuss more either here, on GitHub, or on the R Contributors Slack.

Sincerely,
Aidan Lakshman

-----------------------
Aidan Lakshman (he/him)<https://www.ahl27.com/<https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.ahl27.com%2F&data=05%7C01%7CAHL27%40pitt.edu%7C41b702f139034cd7165608db165e4530%7C9ef9f489e0a04eeb87cc3a526112fd0d%7C1%7C0%7C638128366414606277%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=7KUpJpdulSIzSXbpDJlyUV8pMJm%2BSVFvDOJTlVs9lhc%3D&reserved=0>>
Doctoral Candidate, Wright Lab<https://www.wrightlabscience.com/<https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.wrightlabscience.com%2F&data=05%7C01%7CAHL27%40pitt.edu%7C41b702f139034cd7165608db165e4530%7C9ef9f489e0a04eeb87cc3a526112fd0d%7C1%7C0%7C638128366414606277%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=JMgw%2BMiQ6xdp3OokToJ2nyyco%2BryiFH%2B9ap5iU3yJH8%3D&reserved=0>>
University of Pittsburgh School of Medicine
Department of Biomedical Informatics
ahl27 at pitt.edu<mailto:ahl27 at pitt.edu>
(724) 612-9940


        [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel<https://nam12.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&data=05%7C01%7CAHL27%40pitt.edu%7C41b702f139034cd7165608db165e4530%7C9ef9f489e0a04eeb87cc3a526112fd0d%7C1%7C0%7C638128366414606277%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=I88%2FQhGHXDRS2yHqvh53k3MSWHSd5z2KBgORUHIxfG0%3D&reserved=0>

	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Fri Feb 24 14:02:02 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Fri, 24 Feb 2023 16:02:02 +0300
Subject: [Rd] Possible NA Propagation Failure in RISC-V64 CPU?
In-Reply-To: <CAFKhkawZCNVPNhcOLebhQMUFUnC_tqyf_x3j7gD=2YKPn+hYRg@mail.gmail.com>
References: <CAFKhkawZCNVPNhcOLebhQMUFUnC_tqyf_x3j7gD=2YKPn+hYRg@mail.gmail.com>
Message-ID: <20230224160202.08f68e11@Tarkus>

On Thu, 23 Feb 2023 15:39:08 -0800
Jane He <siyaoh4 at uci.edu> wrote:

> In short, according to my understanding of R's convention, any
> calculation involving NA but no NaN should result in NA (called NA
> propagation), and any calculation involving NaN but no NA should
> result in NaN. Calculations involving both NA and NaN can result in
> either value.

The ?NA help page already contains a warning that "future CPUs and/or
compilers" may prevent NA from resulting in computations with NA. A
similar problem has been encountered on Apple processors, but a
workaround was found there:
https://blog.r-project.org/2020/11/02/will-r-work-on-apple-silicon/#nanan-payload-propagation

> This failure in NA propagation may cause many R packages like mice to
> not work properly, and results in the `make check` test in the
> `stats` package to fail.

Perhaps the way forward is to update the tests.

Regarding R packages, since is.na() is already documented to return
TRUE for all NaNs, not only the NA value, it should be possible to make
them work even if they currently fail.

-- 
Best regards,
Ivan


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Feb 24 14:09:00 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 24 Feb 2023 14:09:00 +0100
Subject: [Rd] Possible NA Propagation Failure in RISC-V64 CPU?
In-Reply-To: <CAFKhkawZCNVPNhcOLebhQMUFUnC_tqyf_x3j7gD=2YKPn+hYRg@mail.gmail.com>
References: <CAFKhkawZCNVPNhcOLebhQMUFUnC_tqyf_x3j7gD=2YKPn+hYRg@mail.gmail.com>
Message-ID: <b28f57ce-c8b2-67e5-33f8-484dc863da9d@gmail.com>


On 2/24/23 00:39, Jane He wrote:
> Hi all,
>
> I am currently compiling R to RISC-V64 CPU and I think I have discovered a
> NA propagation failure.
>
> How R implements NA (not available) and NaN (not-a-number) is explained in
> detail here:
> https://stat.ethz.ch/pipermail/r-devel/2014-February/068380.html.
>
> In short, according to my understanding of R's convention, any calculation
> involving NA but no NaN should result in NA (called NA propagation), and
> any calculation involving NaN but no NA should result in NaN. Calculations
> involving both NA and NaN can result in either value.
>
> While many R functions handle this logic in their source codes, basic
> arithmetic operations such as +-/* throw it to the hardware to handle.
> However, the RISC-V64 CPU does not behave as expected, at least the CPU I
> am using (Starfive JH7100-7110).
>
> Here are the relevant bit patterns. From my understanding, as IEEE only
> regulates the bit patterns of NaN, R picks one of the bit patterns (ending
> with 07a2) and declares it as NA.
>
> # print_hex is a function to print the bit pattern in hex
>> print_hex(0.1)
> 3fb999999999999a # same for RISC-V
>> print_hex(NaN)
> 7ff8000000000000 # same for RISC-V
>> print_hex(NA)
> 7ff00000000007a2 # same for RISC-V
>> print_hex(NA+1)
> 7ff80000000007a2 # 7ff8000000000000 in RISC-V
>> print_hex(NA*1)
> 7ff80000000007a2 # 7ff8000000000000 in RISC-V
>> print_hex(NaN*1)
> 7ff8000000000000 # same for RISC-V
>
>
> Therefore, in RISC-V64, all basic arithmetic operations involving NA give
> NaN.
>
>> NA+1
> [1] NaN
>
> This failure in NA propagation may cause many R packages like mice to not
> work properly, and results in the `make check` test in the `stats` package
> to fail. Example from the make check test:
>
> xn <- 1:4
> yn <- c(1,NA,3:4)
> xout <- (1:9)/2
> data.frame(approx(xn,yn, xout, na.rm=FALSE, rule = 2)) # failure, some
> values should be NA but it turns out NaN
>
> I am reaching out to the R community looking for help in solving this
> problem. Does anyone around here have any hints or ideas on how to solve
> this issue?
>
> Currently, my hacky implementation is to stop the NA operand before it goes
> to the hardware and directly return NA as the output. However, this
> solution may penalize performance significantly, so I am looking for any
> alternative idea.
>
> Thank you for your time and consideration!

Please see this bug report for a related discussion: 
https://bugs.r-project.org/show_bug.cgi?id=18416

This is a known problem and has been discussed a number of times before 
RISC-V. Still, RISC-V is a bit unique architecture in that it 
deliberately does not propagate NaN payloads at all and it cannot be 
enabled. R's distinction of NA vs NaN however depends on that propagation.

The propagation of NAs through computations in R is not reliable even on 
other current platforms (due to what the hardware does, but also what 
the compilers and libraries do, see e.g. ?NaN) and technically it is not 
guaranteed and R packages are advised not to depend on it, but various 
package checks and existing software adjusted to how the propagation 
happens to work on widely used platforms, now probably mostly x86_64. 
64-bit ARM is even a bit more friendly to R than that (when the CPU is 
switched to such mode, which R does). If RISC-V supported such mode, R 
would enable it as well, but it deliberately does not support it.

Good defensive portable code would not depend on the propagation to 
happen in hardware/compilers but add checks in software, if propagation 
was needed. I doubt that the performance overhead would be too high if 
done well, particularly for vectorized computations, but it will be 
noticeable and in some cases may be high. This would have to include 
special handling of data including NAs when they are passed to external 
numerical libraries, which would be a lot of work to implement and 
maintain, it seems unrealistic. At the same time there is no strong 
incentive to do so: people who want the propagation seem to be 
reasonably happy with how it happens to work on major platforms.

For the current R to work well on RISC-V, really, the platform would 
have to support the propagation, at least optionally, perhaps like 
64-bit ARM. Unless major platforms in the future stop supporting the 
propagation, I am skeptical anything major could change on the R side.

Best
Tomas


>
> Best regards,
> Jane He
>
> _________
> University of California, Irvine
> Student of Master of Software Engineering
> 2022-2023 cohort
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Feb 24 16:03:06 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 24 Feb 2023 16:03:06 +0100
Subject: [Rd] Compilation Error when DEBUG_approx Toggled on in RISC-V
In-Reply-To: <CAFKhkaxEmj8n7bLec9Lqs+JemM2ydmuRkrvTVL5gjD+0v4ua1A@mail.gmail.com>
References: <CAFKhkaxEmj8n7bLec9Lqs+JemM2ydmuRkrvTVL5gjD+0v4ua1A@mail.gmail.com>
Message-ID: <25592.53674.205050.596134@stat.math.ethz.ch>

>>>>> Jane He 
>>>>>     on Thu, 23 Feb 2023 15:33:23 -0800 writes:

    > Hi all,

    > While compiling R to RISC-V64 architecture and debugging in R's C source
    > codes, I think I have found a small bug. Can anyone please verify whether
    > it is a real bug?

    > The possible bug lies in the file `R-4.2.2/src/library/stats/src/approx.c`
    > in function `R_approxfun` around line 148:

    > #ifdef DEBUG_approx
    >    REprintf("R_approxfun(x,y, nxy = %.0f, .., nout = %.0f, method = %d, ...)",
    >             (double)nxy, (double)nout, Meth->kind);
    > #endif

    > However, there is no `Meth` defined in this function, causing a compilation
    > error when `DEBUG_approx` is toggled on. The real `Meth` is actually
    > defined in the `approx1` function, and the Meth seen here is probably a
    > historical artifact that was never erased. To fix the error, I suggest
    > changing `Meth->kind` to `method` in the `R_approxfun` function as follows:

    > #ifdef DEBUG_approx
    > REprintf("R_approxfun(x,y, nxy = %.0f, .., nout = %.0f, method = %d,
    > ...)",
    > (double)nxy, (double)nout, method);
    > #endif

    > If this is really an error, I hope this small fix will be helpful to the R
    > community.

well,  you are right this has been a cut'n'paste thinko (almost
surely by me) that has probably never shown but to the 0, 1, or
2 people in the world who may have manually compiled *and*
defined DEBUG_approx ..

    > Thank you for your time and consideration.

and to you, too!
The fixed is part of the source now.


Best,
Martin

    > Best,
    > Jane He

    > _________
    > University of California, Irvine
    > Student of Master of Software Engineering
    > 2022-2023 cohort

    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Sun Feb 26 22:40:30 2023
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sun, 26 Feb 2023 13:40:30 -0800
Subject: [Rd] nightly r-devel.pkg builds failing since Jan 15
Message-ID: <CAD4oTHFS6bTMgf9FR_XbeCarh7jcHY-6MASGw1djgXmpUfUYUQ@mail.gmail.com>

Hi all,

It looks like for intel macs (ie high sierra) the nightly build of R-devel
has been failing continuously since Jan 16th:

https://mac.r-project.org/high-sierra/last-success/

Is this a known issue? I didn't see any way to get at the relevant logs (of
the .pkg creation step), as the .tar.gz step succeeded.

Also, the framework (at least the non-pkg'ed one thats in the .tar.gz file)
is unsigned, meaning the OS gives you grief about opening it.

Finally, it seems now that even the 4.2 branch is failing in the make stage.

Best,
~G

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Mon Feb 27 01:50:06 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 27 Feb 2023 13:50:06 +1300
Subject: [Rd] nightly r-devel.pkg builds failing since Jan 15
In-Reply-To: <CAD4oTHFS6bTMgf9FR_XbeCarh7jcHY-6MASGw1djgXmpUfUYUQ@mail.gmail.com>
References: <CAD4oTHFS6bTMgf9FR_XbeCarh7jcHY-6MASGw1djgXmpUfUYUQ@mail.gmail.com>
Message-ID: <F856EC3E-9E53-4721-B9E4-256FD9DBA798@R-project.org>

Gabe,

thanks, this was a fall-out from a power outage due to the cyclone. Although all systems were back up, svn lock files have led to an early abort in the update step. It should be fixed now.

Cheers,
Simon


> On 27/02/2023, at 10:40 AM, Gabriel Becker <gabembecker at gmail.com> wrote:
> 
> Hi all,
> 
> It looks like for intel macs (ie high sierra) the nightly build of R-devel
> has been failing continuously since Jan 16th:
> 
> https://mac.r-project.org/high-sierra/last-success/
> 
> Is this a known issue? I didn't see any way to get at the relevant logs (of
> the .pkg creation step), as the .tar.gz step succeeded.
> 
> Also, the framework (at least the non-pkg'ed one thats in the .tar.gz file)
> is unsigned, meaning the OS gives you grief about opening it.
> 
> Finally, it seems now that even the 4.2 branch is failing in the make stage.
> 
> Best,
> ~G
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From x|e @end|ng |rom y|hu|@n@me  Mon Feb 27 17:02:50 2023
From: x|e @end|ng |rom y|hu|@n@me (Yihui Xie)
Date: Mon, 27 Feb 2023 10:02:50 -0600
Subject: [Rd] 
 Undocumented change of dirname("C:/") on R-devel on Windows
In-Reply-To: <CALyqOb8xCA182niry8_OudVw+xVpg=WiPCMsEQZTP=R7Wc2wzw@mail.gmail.com>
References: <CALyqOb8-eihVs9FW2AcH42mOCwZj2gLsq=j1sNUSthnf0k7Zow@mail.gmail.com>
 <1db6ce6b-04f0-b890-c320-3e0cbc20a99f@gmail.com>
 <CALyqOb8fuhNtO3QZVO75Zvb91EbV0ZgLvUPRyC6KkVYBWocUQw@mail.gmail.com>
 <CALyqOb8xCA182niry8_OudVw+xVpg=WiPCMsEQZTP=R7Wc2wzw@mail.gmail.com>
Message-ID: <CANROs4cp5K5ZC3F8UcZa8Togd4EyuRmBiMxQrq4Du2=Asc5pUQ@mail.gmail.com>

Hi Tomas,

There has been an R CMD check error with xfun and r-devel on Windows for a
while:
https://www.r-project.org/nosvn/R.check/r-devel-windows-x86_64/xfun-00check.html
Basically it means that the following would return TRUE before:

  normalizePath('a/b', mustWork = FALSE) == normalizePath('./a/b', mustWork
= FALSE)

but it became FALSE at some point in r-devel. I think 'a/b' and './a/b`
should be treated as the same path. Does that make sense? Thanks!

Regards,
Yihui
--
https://yihui.org


On Thu, Feb 23, 2023 at 11:44 PM Hiroaki Yutani <yutani.ini at gmail.com>
wrote:

> I confirmed the revert fixed my failing test. Thanks!
>
> 2023?2?23?(?) 20:12 Hiroaki Yutani <yutani.ini at gmail.com>:
>
> > Thanks for the prompt response, I'll confirm it after the new R-devel
> > binary is available.
> > Also, thanks for the detailed explanation. I agree with you in general.
> >
> > > "/" in "C:/" is a path separator or not, and whether it is trailing or
> > not
> >
> > It seems a Windows' path basically consists of two components; a drive
> > specification (e.g., C:) and the directory structure within the drive.
> What
> > I learned today is that both "C:/" and "C:" are valid path
> specifications,
> > but refer to different locations; "C:" is not the root directory of the
> > drive, but just a relative path [1]. So, I agree with you that the
> basename
> > of "C:/" should be "C:/". However, at the same time, I don't feel this is
> > worth a breaking change, so I think we can preserve the current (R 4.2.2)
> > behavior.
> >
> > [1]:
> >
> https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats#apply-the-current-directory
> >
> > Best,
> > Yutani
> >
> > 2023?2?23?(?) 17:15 Tomas Kalibera <tomas.kalibera at gmail.com>:
> >
> >>
> >> On 2/23/23 03:27, Hiroaki Yutani wrote:
> >> > Hi,
> >> >
> >> > I found dirname() behaves differently on R-devel on Windows. Since I'm
> >> not
> >> > sure which behavior is right, let me ask here before filing this to
> R's
> >> > Bigzilla.
> >> >
> >> > On R 4.2.2., we get
> >> >
> >> >      > dirname("C:/")
> >> >      [1] "C:/"
> >> >
> >> > However, on R-devel (r83888), we get
> >> >
> >> >      > dirname("C:/")
> >> >      [1] "."
> >> >
> >> > ?dirname says 'dirname returns the part of the path up to but
> excluding
> >> the
> >> > last path separator, or "." if there is no path separator,' but I
> don't
> >> see
> >> > how the root path is supposed to be treated based on this rule (,
> >> whether
> >> > it's WIndows or UNIX-alike).
> >> Thanks for spotting the difference, I've reverted to the previous
> >> behavior, the change was unintentional. If you spot any other suspicious
> >> changes in behavior in file-system operations, please report.
> >> > What should we expect as the return value of dirname("C:/")? I feel
> the
> >> > current behavior on R 4.2.2 is right, but I'd like to confirm.
> >>
> >> I also think the old behavior is better, even though it could be argued
> >> whether the "/" in "C:/" is a path separator or not, and whether it is
> >> trailing or not. But the behavior is in line with Unix where dirname of
> >> "/" is also "/". Msys2 would return "C:".
> >>
> >> If  "/" in "C:/" is a path separator but not a trailing path separator,
> >> then basename("C:/") should probably be "" and not "C:", and this would
> >> be in line with what R does on Unix. However, to be in line with Unix, I
> >> think the basename of "C:/" should be "C:/". Yet, Msys2 returns "C:"
> >> which is what R does now.
> >>
> >> So what these functions should do on Windows is definitely tricky. In
> >> either case the behavior is now again as in R 4.2.2.
> >>
> >> Best
> >> Tomas
> >>
> >> >
> >> > Best,
> >> > Yutani
> >> >
> >> >       [[alternative HTML version deleted]]
> >> >
> >> > ______________________________________________
> >> > R-devel at r-project.org mailing list
> >> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Feb 27 20:14:32 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 27 Feb 2023 20:14:32 +0100
Subject: [Rd] 
 Undocumented change of dirname("C:/") on R-devel on Windows
In-Reply-To: <CANROs4cp5K5ZC3F8UcZa8Togd4EyuRmBiMxQrq4Du2=Asc5pUQ@mail.gmail.com>
References: <CALyqOb8-eihVs9FW2AcH42mOCwZj2gLsq=j1sNUSthnf0k7Zow@mail.gmail.com>
 <1db6ce6b-04f0-b890-c320-3e0cbc20a99f@gmail.com>
 <CALyqOb8fuhNtO3QZVO75Zvb91EbV0ZgLvUPRyC6KkVYBWocUQw@mail.gmail.com>
 <CALyqOb8xCA182niry8_OudVw+xVpg=WiPCMsEQZTP=R7Wc2wzw@mail.gmail.com>
 <CANROs4cp5K5ZC3F8UcZa8Togd4EyuRmBiMxQrq4Du2=Asc5pUQ@mail.gmail.com>
Message-ID: <a182c76a-02f1-2ede-5ded-0752e7a618bd@gmail.com>


On 2/27/23 17:02, Yihui Xie wrote:
> Hi Tomas,
>
> There has been an R CMD check error with xfun and r-devel on Windows 
> for a while: 
> https://www.r-project.org/nosvn/R.check/r-devel-windows-x86_64/xfun-00check.html 
> Basically it means that the following would?return TRUE before:
>
> ? normalizePath('a/b', mustWork = FALSE) ==?normalizePath('./a/b', 
> mustWork = FALSE)
>
> but it became FALSE at some point in r-devel. I think 'a/b' and 
> './a/b` should be treated as the same path. Does?that make sense? Thanks!

Thanks a lot for spotting and reporting this, fixed in R-devel. 
Normalization of non-existent paths was broken.

Best
Tomas

>
> Regards,
> Yihui
> --
> https://yihui.org
>
>
> On Thu, Feb 23, 2023 at 11:44 PM Hiroaki Yutani <yutani.ini at gmail.com> 
> wrote:
>
>     I confirmed the revert fixed my failing test. Thanks!
>
>     2023?2?23?(?) 20:12 Hiroaki Yutani <yutani.ini at gmail.com>:
>
>     > Thanks for the prompt response, I'll confirm it after the new
>     R-devel
>     > binary is available.
>     > Also, thanks for the detailed explanation. I agree with you in
>     general.
>     >
>     > > "/" in "C:/" is a path separator or not, and whether it is
>     trailing or
>     > not
>     >
>     > It seems a Windows' path basically consists of two components; a
>     drive
>     > specification (e.g., C:) and the directory structure within the
>     drive. What
>     > I learned today is that both "C:/" and "C:" are valid path
>     specifications,
>     > but refer to different locations; "C:" is not the root directory
>     of the
>     > drive, but just a relative path [1]. So, I agree with you that
>     the basename
>     > of "C:/" should be "C:/". However, at the same time, I don't
>     feel this is
>     > worth a breaking change, so I think we can preserve the current
>     (R 4.2.2)
>     > behavior.
>     >
>     > [1]:
>     >
>     https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats#apply-the-current-directory
>     >
>     > Best,
>     > Yutani
>     >
>     > 2023?2?23?(?) 17:15 Tomas Kalibera <tomas.kalibera at gmail.com>:
>     >
>     >>
>     >> On 2/23/23 03:27, Hiroaki Yutani wrote:
>     >> > Hi,
>     >> >
>     >> > I found dirname() behaves differently on R-devel on Windows.
>     Since I'm
>     >> not
>     >> > sure which behavior is right, let me ask here before filing
>     this to R's
>     >> > Bigzilla.
>     >> >
>     >> > On R 4.2.2., we get
>     >> >
>     >> >? ? ? > dirname("C:/")
>     >> >? ? ? [1] "C:/"
>     >> >
>     >> > However, on R-devel (r83888), we get
>     >> >
>     >> >? ? ? > dirname("C:/")
>     >> >? ? ? [1] "."
>     >> >
>     >> > ?dirname says 'dirname returns the part of the path up to but
>     excluding
>     >> the
>     >> > last path separator, or "." if there is no path separator,'
>     but I don't
>     >> see
>     >> > how the root path is supposed to be treated based on this rule (,
>     >> whether
>     >> > it's WIndows or UNIX-alike).
>     >> Thanks for spotting the difference, I've reverted to the previous
>     >> behavior, the change was unintentional. If you spot any other
>     suspicious
>     >> changes in behavior in file-system operations, please report.
>     >> > What should we expect as the return value of dirname("C:/")?
>     I feel the
>     >> > current behavior on R 4.2.2 is right, but I'd like to confirm.
>     >>
>     >> I also think the old behavior is better, even though it could
>     be argued
>     >> whether the "/" in "C:/" is a path separator or not, and
>     whether it is
>     >> trailing or not. But the behavior is in line with Unix where
>     dirname of
>     >> "/" is also "/". Msys2 would return "C:".
>     >>
>     >> If? "/" in "C:/" is a path separator but not a trailing path
>     separator,
>     >> then basename("C:/") should probably be "" and not "C:", and
>     this would
>     >> be in line with what R does on Unix. However, to be in line
>     with Unix, I
>     >> think the basename of "C:/" should be "C:/". Yet, Msys2 returns
>     "C:"
>     >> which is what R does now.
>     >>
>     >> So what these functions should do on Windows is definitely
>     tricky. In
>     >> either case the behavior is now again as in R 4.2.2.
>     >>
>     >> Best
>     >> Tomas
>     >>
>     >> >
>     >> > Best,
>     >> > Yutani
>     >> >
>     >> >? ? ? ?[[alternative HTML version deleted]]
>     >> >
>     >> > ______________________________________________
>     >> > R-devel at r-project.org mailing list
>     >> > https://stat.ethz.ch/mailman/listinfo/r-devel
>     >>
>     >
>
>     ? ? ? ? [[alternative HTML version deleted]]
>
>     ______________________________________________
>     R-devel at r-project.org mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>
	[[alternative HTML version deleted]]


From ch|r|com @end|ng |rom goog|e@com  Tue Feb 28 19:51:30 2023
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Tue, 28 Feb 2023 10:51:30 -0800
Subject: [Rd] FR: names= argument for load()
Message-ID: <CAD7Bkx_bXTo4x_MvjwN8BDZ1mQjsv0SpMuAOXCdMPtWGM3Qatw@mail.gmail.com>

I have three use cases in mind for an argument to load specifying
which variables to load from the input 'file':

1. Avoid overwriting existing variables. ?load recommends using envir=
or attach() to avoid overwrites. An argument like names= would allow
even finer control to avoid collisions.
2. Avoid loading too many (in quantity or in memory size) variables
from a large file. We might save dozens or hundreds of models to the
same file and then load them more lazily.
3. Helping static analysis. Currently, when load() is used in a
script, it becomes impossible to distinguish truly undefined variables
from those defined implicitly by load(). With a names= argument, it
can be possible to know statically precisely which names were
introduced by load, and which might be a bug. (of course there's
nothing stopping authors from having non-literal entries to names=,
but that's a more general issue of static analysis).

Michael Chirico


