From kry|ov@r00t @end|ng |rom gm@||@com  Sun Feb  5 14:04:25 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Sun, 5 Feb 2023 16:04:25 +0300
Subject: [Rd] R2HTML doesn't split paragraphs originating from
 \Sexpr[results=rd]
Message-ID: <20230205160425.1e35a036@Tarkus>

Hello,

Here's an example that renders correctly using Rd2txt / Rd2latex / R
CMD Rd2pdf, but has problems under Rd2HTML:

\name{foo}
\title{foo}
\section{foo}{
  This should be on a separate paragraph

  This should be on a separate paragraph

  This should be on a separate paragraph

  \Sexpr[stage=render,results=rd]{
    paste(
      rep('Sexpr: This should be on a separate paragraph', 3),
      collapse = '\n\n'
    )
  }
}

For the text I've typed manually, there are <p>...</p> tags splitting
the text separated by empty lines into paragraphs. The \Sexpr return
value only has newlines, which joints the paragraphs together:

<p>This should be on a separate paragraph
</p>
<p>This should be on a separate paragraph
</p>
<p>This should be on a separate paragraph
</p>
<p>Sexpr: This should be on a separate paragraph

Sexpr: This should be on a separate paragraph

Sexpr: This should be on a separate paragraph
</p>

addParaBreaks() is prevented from closing the paragraph tag because
tools:::isBlankLineRd() returns FALSE for blank lines produced by a
\Sexpr. This happens because utils:::getSrcByte() not 1 for these blank
lines. That, in turn, is because the source reference for \Sexpr values
is the whole \Sexpr tag:

# blank line from a \Sexpr
Rd[[3]][[2]][[9]][[2]]
# [1] "\n"
# attr(,"Rd_tag")
# [1] "TEXT"
getSrcref(Rd[[3]][[2]][[9]][[2]])
# \Sexpr[stage=render,results=rd]{
#   paste(
#     rep('Sexpr: This should be on a separate paragraph', 3),
#     collapse = '\n\n'
#   )
# }

# artisanal hand-crafted blank line
Rd[[3]][[2]][[7]]
# [1] "\n"
# attr(,"Rd_tag")
# [1] "TEXT"
summary(getSrcref(Rd[[3]][[2]][[7]]))
# <srcref: file "~/foo.Rd" chars 9:1 to 9:1>

I think I understand that tools:::isBlankLineRd requires
utils:::getSrcByte(x) == 1L because it may be called on things like
"\\eqn{0}\n" where the terminal "\n" might otherwise be considered a
"blank line". How to reconcile isBlankLineRd with blank lines not
directly originating from Rd source?

Rd2latex might have a similar problem (its addParaBreaks() checks for
isBlankLineRd()), but then it works anyway because Rd rules for
paragraph breaks on blank lines are the same as in LaTeX.

-- 
Best regards,
Ivan


From @nto|ne@|@br| @end|ng |rom gm@||@com  Mon Feb  6 15:42:51 2023
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Mon, 6 Feb 2023 15:42:51 +0100
Subject: [Rd] Unnecessary note when import only used in arg definition
Message-ID: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>

Dear r-devel,

When a package is only used in an argument definition, e.g :


f <- function(test = testthat::is_testing()) {

  if (test) 1 else 2

}


R CMD CHECK gives us a note: "Namespace in Imports field not imported from:
'testthat'"


This incites me to remove the package from the Imports field but that'll
make my package brittle.


I noted I'm not the first one having the issue (
https://github.com/r-lib/devtools/issues/2456 ) and I've seen some
workarounds too, in particular Hadley Wickham suggests in 'R packages' to
use the following construct :


ignore_unused_imports <- *function*() {

  aaapkg::aaa_fun

}


That's far from obvious though, and not very satisfying.

Are there any downside to removing this note in this scenario? it makes
little sense to me and incites wrong behaviour AFAIU.


Thanks,


Antoine

	[[alternative HTML version deleted]]


From kev|nu@hey @end|ng |rom gm@||@com  Mon Feb  6 19:03:07 2023
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Mon, 6 Feb 2023 10:03:07 -0800
Subject: [Rd] Unnecessary note when import only used in arg definition
In-Reply-To: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
References: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
Message-ID: <CAJXgQP0NhMQYRNqy8SfS4jN-kcVKFinJG4bxfROX_BEbBt5L+Q@mail.gmail.com>

Hi Antoine,

Maybe I'm misunderstanding, but I think the warning is saying that
you've declared the package dependency in the DESCRIPTION file, but
you haven't actually imported the package (or any functions) in your
package NAMESPACE file?

I put together an example package that I think satisfies the point
you're describing, and I don't see any R CMD check warnings (using R
4.2.2).

https://github.com/kevinushey/imports.example

As I understand it, if you declare a package dependency in the
DESCRIPTION file, you need to clarify how you're using the package in
the NAMESPACE file -- e.g. what symbols you want to import, and so on.

Best,
Kevin

On Mon, Feb 6, 2023 at 6:43 AM Antoine Fabri <antoine.fabri at gmail.com> wrote:
>
> Dear r-devel,
>
> When a package is only used in an argument definition, e.g :
>
>
> f <- function(test = testthat::is_testing()) {
>
>   if (test) 1 else 2
>
> }
>
>
> R CMD CHECK gives us a note: "Namespace in Imports field not imported from:
> 'testthat'"
>
>
> This incites me to remove the package from the Imports field but that'll
> make my package brittle.
>
>
> I noted I'm not the first one having the issue (
> https://github.com/r-lib/devtools/issues/2456 ) and I've seen some
> workarounds too, in particular Hadley Wickham suggests in 'R packages' to
> use the following construct :
>
>
> ignore_unused_imports <- *function*() {
>
>   aaapkg::aaa_fun
>
> }
>
>
> That's far from obvious though, and not very satisfying.
>
> Are there any downside to removing this note in this scenario? it makes
> little sense to me and incites wrong behaviour AFAIU.
>
>
> Thanks,
>
>
> Antoine
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb  6 19:59:27 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 6 Feb 2023 13:59:27 -0500
Subject: [Rd] Unnecessary note when import only used in arg definition
In-Reply-To: <CAJXgQP0NhMQYRNqy8SfS4jN-kcVKFinJG4bxfROX_BEbBt5L+Q@mail.gmail.com>
References: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
 <CAJXgQP0NhMQYRNqy8SfS4jN-kcVKFinJG4bxfROX_BEbBt5L+Q@mail.gmail.com>
Message-ID: <e02220d8-9806-09dd-aee3-665479704d6d@gmail.com>

I think the usual rule is that a qualified use of a package is 
sufficient to suppress the warning without any entry in the NAMESPACE 
file.  So if there isn't something else going on, Antoine's example 
illustrates a bug (or at least an inconsistency) in the check code.

Here's a version of your example that doesn't import anything from rlang 
using the NAMESPACE, but uses it in code:

   https://github.com/dmurdoch/imports.example/tree/explicituse

And here's one like Antoine's, where the only use is in a default value:

   https://github.com/dmurdoch/imports.example/tree/defaultvalue

The first one tests clean, the second one gives the note he was talking 
about:

  ? checking dependencies in R code ... NOTE
    Namespace in Imports field not imported from: ?rlang?
      All declared Imports should be used.

Duncan

On 06/02/2023 1:03 p.m., Kevin Ushey wrote:
> Hi Antoine,
> 
> Maybe I'm misunderstanding, but I think the warning is saying that
> you've declared the package dependency in the DESCRIPTION file, but
> you haven't actually imported the package (or any functions) in your
> package NAMESPACE file?
> 
> I put together an example package that I think satisfies the point
> you're describing, and I don't see any R CMD check warnings (using R
> 4.2.2).
> 
> https://github.com/kevinushey/imports.example
> 
> As I understand it, if you declare a package dependency in the
> DESCRIPTION file, you need to clarify how you're using the package in
> the NAMESPACE file -- e.g. what symbols you want to import, and so on.
> 
> Best,
> Kevin
> 
> On Mon, Feb 6, 2023 at 6:43 AM Antoine Fabri <antoine.fabri at gmail.com> wrote:
>>
>> Dear r-devel,
>>
>> When a package is only used in an argument definition, e.g :
>>
>>
>> f <- function(test = testthat::is_testing()) {
>>
>>    if (test) 1 else 2
>>
>> }
>>
>>
>> R CMD CHECK gives us a note: "Namespace in Imports field not imported from:
>> 'testthat'"
>>
>>
>> This incites me to remove the package from the Imports field but that'll
>> make my package brittle.
>>
>>
>> I noted I'm not the first one having the issue (
>> https://github.com/r-lib/devtools/issues/2456 ) and I've seen some
>> workarounds too, in particular Hadley Wickham suggests in 'R packages' to
>> use the following construct :
>>
>>
>> ignore_unused_imports <- *function*() {
>>
>>    aaapkg::aaa_fun
>>
>> }
>>
>>
>> That's far from obvious though, and not very satisfying.
>>
>> Are there any downside to removing this note in this scenario? it makes
>> little sense to me and incites wrong behaviour AFAIU.
>>
>>
>> Thanks,
>>
>>
>> Antoine
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb  6 20:31:31 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 6 Feb 2023 14:31:31 -0500
Subject: [Rd] Unnecessary note when import only used in arg definition
In-Reply-To: <e02220d8-9806-09dd-aee3-665479704d6d@gmail.com>
References: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
 <CAJXgQP0NhMQYRNqy8SfS4jN-kcVKFinJG4bxfROX_BEbBt5L+Q@mail.gmail.com>
 <e02220d8-9806-09dd-aee3-665479704d6d@gmail.com>
Message-ID: <3f099c2c-9b6c-f5f8-5e3e-c7d656be95de@gmail.com>

On 06/02/2023 1:59 p.m., Duncan Murdoch wrote:
> I think the usual rule is that a qualified use of a package is
> sufficient to suppress the warning without any entry in the NAMESPACE
> file.  So if there isn't something else going on, Antoine's example
> illustrates a bug (or at least an inconsistency) in the check code.

Here's where the problem arises:

https://github.com/r-devel/r-svn/blob/7a2207dad15b8eed8c3d1c5cc49f29d431c289bd/src/library/tools/R/QC.R#L2105

with code

   if(is.call(e) || is.expression(e)) {

While examining a function definition, the arguments are stored in a 
pairlist.  The test is looking for a call or an expression, and a 
pairlist isn't any of those, so it skips over it.  I think it would work 
properly if that line was changed to

   if(is.call(e) || is.expression(e) || is.pairlist(e)) {

because then it would iterate over the arguments, and would find the use 
of a package in a default value.

Duncan Murdoch

> 
> Here's a version of your example that doesn't import anything from rlang
> using the NAMESPACE, but uses it in code:
> 
>     https://github.com/dmurdoch/imports.example/tree/explicituse
> 
> And here's one like Antoine's, where the only use is in a default value:
> 
>     https://github.com/dmurdoch/imports.example/tree/defaultvalue
> 
> The first one tests clean, the second one gives the note he was talking
> about:
> 
>    ? checking dependencies in R code ... NOTE
>      Namespace in Imports field not imported from: ?rlang?
>        All declared Imports should be used.
> 
> Duncan
> 
> On 06/02/2023 1:03 p.m., Kevin Ushey wrote:
>> Hi Antoine,
>>
>> Maybe I'm misunderstanding, but I think the warning is saying that
>> you've declared the package dependency in the DESCRIPTION file, but
>> you haven't actually imported the package (or any functions) in your
>> package NAMESPACE file?
>>
>> I put together an example package that I think satisfies the point
>> you're describing, and I don't see any R CMD check warnings (using R
>> 4.2.2).
>>
>> https://github.com/kevinushey/imports.example
>>
>> As I understand it, if you declare a package dependency in the
>> DESCRIPTION file, you need to clarify how you're using the package in
>> the NAMESPACE file -- e.g. what symbols you want to import, and so on.
>>
>> Best,
>> Kevin
>>
>> On Mon, Feb 6, 2023 at 6:43 AM Antoine Fabri <antoine.fabri at gmail.com> wrote:
>>>
>>> Dear r-devel,
>>>
>>> When a package is only used in an argument definition, e.g :
>>>
>>>
>>> f <- function(test = testthat::is_testing()) {
>>>
>>>     if (test) 1 else 2
>>>
>>> }
>>>
>>>
>>> R CMD CHECK gives us a note: "Namespace in Imports field not imported from:
>>> 'testthat'"
>>>
>>>
>>> This incites me to remove the package from the Imports field but that'll
>>> make my package brittle.
>>>
>>>
>>> I noted I'm not the first one having the issue (
>>> https://github.com/r-lib/devtools/issues/2456 ) and I've seen some
>>> workarounds too, in particular Hadley Wickham suggests in 'R packages' to
>>> use the following construct :
>>>
>>>
>>> ignore_unused_imports <- *function*() {
>>>
>>>     aaapkg::aaa_fun
>>>
>>> }
>>>
>>>
>>> That's far from obvious though, and not very satisfying.
>>>
>>> Are there any downside to removing this note in this scenario? it makes
>>> little sense to me and incites wrong behaviour AFAIU.
>>>
>>>
>>> Thanks,
>>>
>>>
>>> Antoine
>>>
>>>           [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Feb  6 21:47:16 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 6 Feb 2023 15:47:16 -0500
Subject: [Rd] Unnecessary note when import only used in arg definition
In-Reply-To: <3f099c2c-9b6c-f5f8-5e3e-c7d656be95de@gmail.com>
References: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
 <CAJXgQP0NhMQYRNqy8SfS4jN-kcVKFinJG4bxfROX_BEbBt5L+Q@mail.gmail.com>
 <e02220d8-9806-09dd-aee3-665479704d6d@gmail.com>
 <3f099c2c-9b6c-f5f8-5e3e-c7d656be95de@gmail.com>
Message-ID: <62b0a67b-2ce1-5adf-783b-0b462b8f7490@gmail.com>

On 06/02/2023 2:31 p.m., Duncan Murdoch wrote:
> On 06/02/2023 1:59 p.m., Duncan Murdoch wrote:
>> I think the usual rule is that a qualified use of a package is
>> sufficient to suppress the warning without any entry in the NAMESPACE
>> file.  So if there isn't something else going on, Antoine's example
>> illustrates a bug (or at least an inconsistency) in the check code.
> 
> Here's where the problem arises:
> 
> https://github.com/r-devel/r-svn/blob/7a2207dad15b8eed8c3d1c5cc49f29d431c289bd/src/library/tools/R/QC.R#L2105

Whoops, I think that's the wrong location.  I think this is the right one:

 
https://github.com/r-devel/r-svn/blob/7a2207dad15b8eed8c3d1c5cc49f29d431c289bd/src/library/tools/R/QC.R#L5754

There are two similar functions in that big source file.

Duncan Murdoch

> with code
> 
>     if(is.call(e) || is.expression(e)) {
> 
> While examining a function definition, the arguments are stored in a
> pairlist.  The test is looking for a call or an expression, and a
> pairlist isn't any of those, so it skips over it.  I think it would work
> properly if that line was changed to
> 
>     if(is.call(e) || is.expression(e) || is.pairlist(e)) {
> 
> because then it would iterate over the arguments, and would find the use
> of a package in a default value.
> 
> Duncan Murdoch
> 
>>
>> Here's a version of your example that doesn't import anything from rlang
>> using the NAMESPACE, but uses it in code:
>>
>>      https://github.com/dmurdoch/imports.example/tree/explicituse
>>
>> And here's one like Antoine's, where the only use is in a default value:
>>
>>      https://github.com/dmurdoch/imports.example/tree/defaultvalue
>>
>> The first one tests clean, the second one gives the note he was talking
>> about:
>>
>>     ? checking dependencies in R code ... NOTE
>>       Namespace in Imports field not imported from: ?rlang?
>>         All declared Imports should be used.
>>
>> Duncan
>>
>> On 06/02/2023 1:03 p.m., Kevin Ushey wrote:
>>> Hi Antoine,
>>>
>>> Maybe I'm misunderstanding, but I think the warning is saying that
>>> you've declared the package dependency in the DESCRIPTION file, but
>>> you haven't actually imported the package (or any functions) in your
>>> package NAMESPACE file?
>>>
>>> I put together an example package that I think satisfies the point
>>> you're describing, and I don't see any R CMD check warnings (using R
>>> 4.2.2).
>>>
>>> https://github.com/kevinushey/imports.example
>>>
>>> As I understand it, if you declare a package dependency in the
>>> DESCRIPTION file, you need to clarify how you're using the package in
>>> the NAMESPACE file -- e.g. what symbols you want to import, and so on.
>>>
>>> Best,
>>> Kevin
>>>
>>> On Mon, Feb 6, 2023 at 6:43 AM Antoine Fabri <antoine.fabri at gmail.com> wrote:
>>>>
>>>> Dear r-devel,
>>>>
>>>> When a package is only used in an argument definition, e.g :
>>>>
>>>>
>>>> f <- function(test = testthat::is_testing()) {
>>>>
>>>>      if (test) 1 else 2
>>>>
>>>> }
>>>>
>>>>
>>>> R CMD CHECK gives us a note: "Namespace in Imports field not imported from:
>>>> 'testthat'"
>>>>
>>>>
>>>> This incites me to remove the package from the Imports field but that'll
>>>> make my package brittle.
>>>>
>>>>
>>>> I noted I'm not the first one having the issue (
>>>> https://github.com/r-lib/devtools/issues/2456 ) and I've seen some
>>>> workarounds too, in particular Hadley Wickham suggests in 'R packages' to
>>>> use the following construct :
>>>>
>>>>
>>>> ignore_unused_imports <- *function*() {
>>>>
>>>>      aaapkg::aaa_fun
>>>>
>>>> }
>>>>
>>>>
>>>> That's far from obvious though, and not very satisfying.
>>>>
>>>> Are there any downside to removing this note in this scenario? it makes
>>>> little sense to me and incites wrong behaviour AFAIU.
>>>>
>>>>
>>>> Thanks,
>>>>
>>>>
>>>> Antoine
>>>>
>>>>            [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Feb  7 16:22:17 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 7 Feb 2023 10:22:17 -0500
Subject: [Rd] Unnecessary note when import only used in arg definition
In-Reply-To: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
References: <CAEKh8ujzyH=Lhd49yc58=1Q4MxiGbjFpfQ13Rp+dEUQFA0Yr8g@mail.gmail.com>
Message-ID: <c1d26ab3-55ae-b8ba-0a5d-ff7454d94db5@gmail.com>

I've submitted a bug report 
(https://bugs.r-project.org/show_bug.cgi?id=18465) about this, along 
with a patch to fix it.

Duncan Murdoch

On 06/02/2023 9:42 a.m., Antoine Fabri wrote:
> Dear r-devel,
> 
> When a package is only used in an argument definition, e.g :
> 
> 
> f <- function(test = testthat::is_testing()) {
> 
>    if (test) 1 else 2
> 
> }
> 
> 
> R CMD CHECK gives us a note: "Namespace in Imports field not imported from:
> 'testthat'"
> 
> 
> This incites me to remove the package from the Imports field but that'll
> make my package brittle.
> 
> 
> I noted I'm not the first one having the issue (
> https://github.com/r-lib/devtools/issues/2456 ) and I've seen some
> workarounds too, in particular Hadley Wickham suggests in 'R packages' to
> use the following construct :
> 
> 
> ignore_unused_imports <- *function*() {
> 
>    aaapkg::aaa_fun
> 
> }
> 
> 
> That's far from obvious though, and not very satisfying.
> 
> Are there any downside to removing this note in this scenario? it makes
> little sense to me and incites wrong behaviour AFAIU.
> 
> 
> Thanks,
> 
> 
> Antoine
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Feb  8 01:13:54 2023
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 8 Feb 2023 01:13:54 +0100
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
Message-ID: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>

As preparation for the next release, I am trying to compile R devel on
RHEL / CentOS 7, which is still supported by RedHat until 2024 June.
There are two issues.

One is that the libcurl version in CentOS 7 is quite old, 7.29.0, and
R devel now requires 7.32.0, since 83715 about a week ago. This
requirement is here to stay for R 4.3.0, right?

The second is that the recommended packages are now installed with R
CMD INSTALL --use-C17, which fails on CentOS 7 with

begin installing recommended package MASS
* installing *source* package 'MASS' ...
** package 'MASS' successfully unpacked and MD5 sums checked
** using non-staged installation
** libs
Error: C17 standard requested but CC17 is not defined
* removing '/root/R-devel/library/MASS'

CentOS 7 has GCC 4.8.5, which does not have a -std=gnu17 option.
However the commit message of this change in commit 83566 hints that
this requirement might be temporary. Hence my questions.

Is the C17 requirement temporary or it will be a requirement for R 4.3.0?
Should I expect any problems if I remove the --use-C17 flag for
installing the recommended packages?

There are a lot of R users still on RHEL 7, so it would be great to
know what to expect for the next release.

Thank you,
G?bor


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Wed Feb  8 07:05:31 2023
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Wed, 8 Feb 2023 06:05:31 +0000
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
In-Reply-To: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
References: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
Message-ID: <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>

On 08/02/2023 00:13, G?bor Cs?rdi wrote:
> As preparation for the next release, I am trying to compile R devel on
> RHEL / CentOS 7, which is still supported by RedHat until 2024 June.
> There are two issues.
> 
> One is that the libcurl version in CentOS 7 is quite old, 7.29.0, and
> R devel now requires 7.32.0, since 83715 about a week ago. This
> requirement is here to stay for R 4.3.0, right?

Unless we revert it.  The comment in the manual says

@c libcurl 7.32.0 was released in Aug 2013

and Centos 7 was released in 2014-07-07, 11 months later.  Do they 
really never security-patch libcurl?

> The second is that the recommended packages are now installed with R
> CMD INSTALL --use-C17, which fails on CentOS 7 with
> 
> begin installing recommended package MASS
> * installing *source* package 'MASS' ...
> ** package 'MASS' successfully unpacked and MD5 sums checked
> ** using non-staged installation
> ** libs
> Error: C17 standard requested but CC17 is not defined
> * removing '/root/R-devel/library/MASS'
> 
> CentOS 7 has GCC 4.8.5, which does not have a -std=gnu17 option.
> However the commit message of this change in commit 83566 hints that
> this requirement might be temporary. Hence my questions.

It is temporary -- needed for survival (now updated) and mgcv (awaited). 
  However,

1) You should be able to set

CC17="gcc -std=gnu11"

in config.site, as C17 is a bug-fixed C11.

2) Centos 7 has later compilers available, and people are going to need 
them for C++.  The manual says

     ... later compilers are available: for RHEL/Centos 7 look for 
?devtoolset?.

> Is the C17 requirement temporary or it will be a requirement for R 4.3.0?
> Should I expect any problems if I remove the --use-C17 flag for
> installing the recommended packages?

Not with that compiler.

> 
> There are a lot of R users still on RHEL 7, so it would be great to
> know what to expect for the next release.
an D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From yugong @end|ng |rom out|ook@com  Wed Feb  8 10:39:18 2023
From: yugong @end|ng |rom out|ook@com (yu gong)
Date: Wed, 8 Feb 2023 09:39:18 +0000
Subject: [Rd] need help from someone know screen reader and R high DPI GUI
Message-ID: <TYAP286MB02686F8746145024D4467E29D1D89@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

hello , everyone:

 I recheck and retest about the patch about high dpi of windows R GUI ,  IMO it works mostly. Last thing I am not sure is screen reader.

 I download NVDA screen reader, and try it on high dpi R GUI , in NVDA Speech viewer,  it seems it can read R GUI normally, but since I konw so little about screen reader before.   I couldn't confirm NVDA Speech viewer indeed work on high dpi R GUI.

Could anyone who know screen reader , help me  to confirm the high dpi patch not break screen reader.

I put the patch https://github.com/armgong/misc-r-patch/blob/main/dpi-c-code.diff  .

If anyone need the compiled binary on windows x64 , I can upload it on github repo also.

thanks,

Yu Gong


	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Wed Feb  8 11:24:02 2023
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 8 Feb 2023 11:24:02 +0100
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
In-Reply-To: <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>
References: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
 <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>
Message-ID: <CALEXWq3c9Q0yNAzK0q17TBX-yJ9boxW+ZShZmha1XijAjBn=dQ@mail.gmail.com>

On Wed, 8 Feb 2023 at 07:05, Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
>
> On 08/02/2023 00:13, G?bor Cs?rdi wrote:
> > As preparation for the next release, I am trying to compile R devel on
> > RHEL / CentOS 7, which is still supported by RedHat until 2024 June.

True, but with a big asterisk. Full updates ended on 2020-08-06, and
it's been in maintenance mode since then, meaning that only security
and critical fixes are released until EOL to facilitate a transition
to a newer version. So CentOS 7 users shouldn't expect new releases of
software to be available.

> > There are two issues.
> >
> > One is that the libcurl version in CentOS 7 is quite old, 7.29.0, and
> > R devel now requires 7.32.0, since 83715 about a week ago. This
> > requirement is here to stay for R 4.3.0, right?

I suppose that if R-devel doesn't use any API endpoint not available
in 7.29, you could just patch out that requirement. Otherwise, you
would need to build your own.

> Unless we revert it.  The comment in the manual says
>
> @c libcurl 7.32.0 was released in Aug 2013
>
> and Centos 7 was released in 2014-07-07, 11 months later.  Do they
> really never security-patch libcurl?

Oh, they do port all security fixes, but without changing the version,
which is the whole point of LTS. In fact, current version is
7.29.0-59, and there are probably a hundred patches on top of those 59
builds.

> > The second is that the recommended packages are now installed with R
> > CMD INSTALL --use-C17, which fails on CentOS 7 with
> >
> > begin installing recommended package MASS
> > * installing *source* package 'MASS' ...
> > ** package 'MASS' successfully unpacked and MD5 sums checked
> > ** using non-staged installation
> > ** libs
> > Error: C17 standard requested but CC17 is not defined
> > * removing '/root/R-devel/library/MASS'
> >
> > CentOS 7 has GCC 4.8.5, which does not have a -std=gnu17 option.
> > However the commit message of this change in commit 83566 hints that
> > this requirement might be temporary. Hence my questions.
>
> It is temporary -- needed for survival (now updated) and mgcv (awaited).
>   However,
>
> 1) You should be able to set
>
> CC17="gcc -std=gnu11"
>
> in config.site, as C17 is a bug-fixed C11.
>
> 2) Centos 7 has later compilers available, and people are going to need
> them for C++.  The manual says
>
>      ... later compilers are available: for RHEL/Centos 7 look for
> ?devtoolset?.

Exactly, here is the reference:
https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/

R 3.6.0 is the last version we support in EPEL, because EPEL is not
allowed to build on top of SCL. But you can enable SCL and install the
devtoolset available, which contains gcc version 7.3.1.

But anyway, I don't think that staying in an almost 10-year old distro
in maintenance mode and at the same time expecting a cutting-edge
version of R (or any software) is reasonable.

I?aki

> > Is the C17 requirement temporary or it will be a requirement for R 4.3.0?
> > Should I expect any problems if I remove the --use-C17 flag for
> > installing the recommended packages?
>
> Not with that compiler.
>
> >
> > There are a lot of R users still on RHEL 7, so it would be great to
> > know what to expect for the next release.
> an D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
I?aki ?car


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Feb  8 14:03:58 2023
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 8 Feb 2023 14:03:58 +0100
Subject: [Rd] R-devel does not compile on OpenSUSE 15.4
Message-ID: <CABtg=KnTn+QUei+4oxPBL=So2x2i7PEXTPfdrH17AqWv6K5BGg@mail.gmail.com>

More precisely the built-in Lapack module. AFAICT this is because the
f90 files are not compiled with -fpic. My output:

make[4]: Entering directory '/tmp/R-devel/src/modules/lapack'
gfortran -fpic  -g -O2 -msse2 -mfpmath=sse  -c dlamch.f -o dlamch.o
gfortran  -fpic  -g -O2  -c dlapack.f -o dlapack.o
gfortran  -fpic  -g -O2  -c cmplx.f -o cmplx.o
gfortran  -c  la_constants.f90 -o la_constants.o
gfortran  -c  dlartg.f90 -o dlartg.o
gfortran  -c  la_xisnan.f90 -o la_xisnan.o
gfortran  -c  dlassq.f90 -o dlassq.o
gfortran  -c  zlartg.f90 -o zlartg.o
gfortran  -c  zlassq.f90 -o zlassq.o
gcc -shared -fopenmp -L/usr/local/lib64 -o libRlapack.so dlamch.o
dlapack.o cmplx.o dlartg.o dlassq.o la_constants.o la_xisnan.o
zlartg.o zlassq.o   -L"../../../lib" -lRblas -lgfortran -lm -lquadmath
/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld:
zlassq.o: warning: relocation against `__la_xisnan_MOD_disnan' in
read-only section `.text'
/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld:
dlassq.o: relocation R_X86_64_PC32 against symbol
`__la_xisnan_MOD_disnan' can not be used when making a shared object;
recompile with -fPIC
/usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld:
final link failed: bad value
collect2: error: ld returned 1 exit status

If I update src/modules/lapack/Makefile.in to add $(FPICFLAGS) to the
.f90 compilation, then all is good. I assume you would also want to
add -g and -O2 here, so probably some other variable is better than
$(FPICFLAGS).

FYI,
Gabor


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Feb  8 18:21:25 2023
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 8 Feb 2023 09:21:25 -0800
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
In-Reply-To: <CALEXWq3c9Q0yNAzK0q17TBX-yJ9boxW+ZShZmha1XijAjBn=dQ@mail.gmail.com>
References: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
 <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>
 <CALEXWq3c9Q0yNAzK0q17TBX-yJ9boxW+ZShZmha1XijAjBn=dQ@mail.gmail.com>
Message-ID: <CAFDcVCTu-snQbYqSde8jhm_7YS=OYfcXKs8=oysiWU2pkUb45Q@mail.gmail.com>

I just want to add a few reasons that I know of for why users are
still on Red Hat/CentOS 7 and learned from being deeply involved with
big academic and research high-performance compute (HPC) environments.
These systems are not like your regular sailing boat, but more like a
giant container ship; much harder to navigate, slower to react, you
cannot just cruise around and pop into any harbor you like to, or when
you like to. It takes much more efforts, more logistics, and more
people to operate them. If you mess up, the damage is much bigger.

Reasons:

* Users don't have many options, but have to use what is available.

* Red Hat/CentOS is designed for long term stability and backward
compatibility. They've only done major upgrades every 3-4 years.

* Red Hat backports security fixes to old versions of common software,
which is why you see, for instance, Python 3.6 still being the
provided version, although Python made that End-of-Life in December
2021.

* HPC environments (aka "compute cluster") often have 100s to 1000s of
users. Imagine the amount of software tools and difference versions
installed in such environments.

* Upgrading an HPC environments is a major disruption for users who
rely on it in their work and research, e.g. some software stacks,
pipelines, and scripts have to reinstalled and re-coded.

* The majority of users and sysadmins prefer stability over the being
able to run the latest tools.

* Over years, stability increases the technical debt, to a point where
it is cheaper to upgrade than to stay behind.

* Even if sysadmins want to upgrade to a newer release, their hands
are often also tied, because of external factors.  For example, the
global parallel file system or the backup system you rely on has not
yet be validated for the next version of OS you want to upgrade too.
There might also be research critical scientific pipelines that does
not yet support the new version, which can be because the maintainers
of those tools don't have access to a new version to test on. GPU
drives much not be available. This is also the case for commercial
tools. Sometimes IT security requirements cannot be met on the new
version, because security scanning tools are not yet up-to-date. There
can also be hardware limitations, e.g. you might even have to replace
some central server for the whole cluster to be able to upgrade.

* Although you might want to tell everyone to just run a new version
via Linux containers, it's not the magic sauce for all of the above.
Savvy users might be able to do it, but not your average users. Also,
this basically puts the common sysadmin burden on the end-user, who
now have to keep their container stacks up-to-date and in sync.  In
contrast to a homogeneous environment, this strategy increases the
support burden on sysadms, because they will get much more questions
and request for troubleshooting on very specific setups.

Specifically to Red Hat/CentOS 7: When sites started to think about
migrating to CentOS 8, Red Hat decided to pull the plug and change
their long-term business plan.  This itself was a disruptive event,
because any plans to do a "regular" distro upgrade had to be flushed
down the toilet.  The community waited to see what would happen and
what the options would be.  A lot of sites now plan on migrating to
Rocky 8, which (AFAIU) tries to stay true to the original CentOS
mission.  This means they are waiting for third-party hardware and
software providers to validate their products for Rocky 8, e.g.
parallel file systems, backup software, software stacks, etc.

What R Core, Gabor, and many others are doing, often silently in the
background, is to make sure R works smoothly for many R users out
there, whatever operating system and version they may be on. This is
so essential to R's success, and, more importantly, for research and
science to be able to move forward.  Those endless hours spend on
trying to support some OS, even obscure ones, to pay off many times,
especially on common OSes such as Red Hat and CentOS.  You spare lots
of users and sysadmins lots of pain when you put those hours in.  So,
thank you for doing all that.

/Henrik

On Wed, Feb 8, 2023 at 2:24 AM I?aki Ucar <iucar at fedoraproject.org> wrote:
>
> On Wed, 8 Feb 2023 at 07:05, Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
> >
> > On 08/02/2023 00:13, G?bor Cs?rdi wrote:
> > > As preparation for the next release, I am trying to compile R devel on
> > > RHEL / CentOS 7, which is still supported by RedHat until 2024 June.
>
> True, but with a big asterisk. Full updates ended on 2020-08-06, and
> it's been in maintenance mode since then, meaning that only security
> and critical fixes are released until EOL to facilitate a transition
> to a newer version. So CentOS 7 users shouldn't expect new releases of
> software to be available.
>
> > > There are two issues.
> > >
> > > One is that the libcurl version in CentOS 7 is quite old, 7.29.0, and
> > > R devel now requires 7.32.0, since 83715 about a week ago. This
> > > requirement is here to stay for R 4.3.0, right?
>
> I suppose that if R-devel doesn't use any API endpoint not available
> in 7.29, you could just patch out that requirement. Otherwise, you
> would need to build your own.
>
> > Unless we revert it.  The comment in the manual says
> >
> > @c libcurl 7.32.0 was released in Aug 2013
> >
> > and Centos 7 was released in 2014-07-07, 11 months later.  Do they
> > really never security-patch libcurl?
>
> Oh, they do port all security fixes, but without changing the version,
> which is the whole point of LTS. In fact, current version is
> 7.29.0-59, and there are probably a hundred patches on top of those 59
> builds.
>
> > > The second is that the recommended packages are now installed with R
> > > CMD INSTALL --use-C17, which fails on CentOS 7 with
> > >
> > > begin installing recommended package MASS
> > > * installing *source* package 'MASS' ...
> > > ** package 'MASS' successfully unpacked and MD5 sums checked
> > > ** using non-staged installation
> > > ** libs
> > > Error: C17 standard requested but CC17 is not defined
> > > * removing '/root/R-devel/library/MASS'
> > >
> > > CentOS 7 has GCC 4.8.5, which does not have a -std=gnu17 option.
> > > However the commit message of this change in commit 83566 hints that
> > > this requirement might be temporary. Hence my questions.
> >
> > It is temporary -- needed for survival (now updated) and mgcv (awaited).
> >   However,
> >
> > 1) You should be able to set
> >
> > CC17="gcc -std=gnu11"
> >
> > in config.site, as C17 is a bug-fixed C11.
> >
> > 2) Centos 7 has later compilers available, and people are going to need
> > them for C++.  The manual says
> >
> >      ... later compilers are available: for RHEL/Centos 7 look for
> > ?devtoolset?.
>
> Exactly, here is the reference:
> https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/
>
> R 3.6.0 is the last version we support in EPEL, because EPEL is not
> allowed to build on top of SCL. But you can enable SCL and install the
> devtoolset available, which contains gcc version 7.3.1.
>
> But anyway, I don't think that staying in an almost 10-year old distro
> in maintenance mode and at the same time expecting a cutting-edge
> version of R (or any software) is reasonable.
>
> I?aki
>
> > > Is the C17 requirement temporary or it will be a requirement for R 4.3.0?
> > > Should I expect any problems if I remove the --use-C17 flag for
> > > installing the recommended packages?
> >
> > Not with that compiler.
> >
> > >
> > > There are a lot of R users still on RHEL 7, so it would be great to
> > > know what to expect for the next release.
> > an D. Ripley,                  ripley at stats.ox.ac.uk
> > Emeritus Professor of Applied Statistics, University of Oxford
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> I?aki ?car
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Feb  8 19:25:31 2023
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 8 Feb 2023 10:25:31 -0800
Subject: [Rd] 
 need help from someone know screen reader and R high DPI GUI
In-Reply-To: <TYAP286MB02686F8746145024D4467E29D1D89@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB02686F8746145024D4467E29D1D89@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <CAFDcVCS9M44S1L=obUFxVKReuTJocc8zRzWvjX_EgdNyXYpxJA@mail.gmail.com>

Thanks for this work. My suggestion would be to provide those
pre-built Windows binaries to maximize the chances to get the feedback
you need. The amount of people ready to, or have the setup to, build R
from source, especially so on MS Windows, is much smaller than those
who are willing to give it a quick try.

/Henrik

On Wed, Feb 8, 2023 at 1:39 AM yu gong <yugong at outlook.com> wrote:
>
> hello , everyone:
>
>  I recheck and retest about the patch about high dpi of windows R GUI ,  IMO it works mostly. Last thing I am not sure is screen reader.
>
>  I download NVDA screen reader, and try it on high dpi R GUI , in NVDA Speech viewer,  it seems it can read R GUI normally, but since I konw so little about screen reader before.   I couldn't confirm NVDA Speech viewer indeed work on high dpi R GUI.
>
> Could anyone who know screen reader , help me  to confirm the high dpi patch not break screen reader.
>
> I put the patch https://github.com/armgong/misc-r-patch/blob/main/dpi-c-code.diff  .
>
> If anyone need the compiled binary on windows x64 , I can upload it on github repo also.
>
> thanks,
>
> Yu Gong
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From er|cjberger @end|ng |rom gm@||@com  Wed Feb  8 20:13:45 2023
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Wed, 8 Feb 2023 21:13:45 +0200
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
In-Reply-To: <CAFDcVCTu-snQbYqSde8jhm_7YS=OYfcXKs8=oysiWU2pkUb45Q@mail.gmail.com>
References: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
 <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>
 <CALEXWq3c9Q0yNAzK0q17TBX-yJ9boxW+ZShZmha1XijAjBn=dQ@mail.gmail.com>
 <CAFDcVCTu-snQbYqSde8jhm_7YS=OYfcXKs8=oysiWU2pkUb45Q@mail.gmail.com>
Message-ID: <CAGgJW75W6XTmjxTHzf__Up3LQFA6RtN9LZpC-srg3zoXUOriYQ@mail.gmail.com>

A different route to get the "latest and greatest version of R" while
sticking with an older distribution of an OS would be via docker.

At work, our linux servers run Ubuntu 18.04 on which I run an Ubuntu 20.04
docker image with (close to) the latest version of R (4.2.2) for a shiny
app I supply across the firm.



On Wed, Feb 8, 2023 at 7:21 PM Henrik Bengtsson <henrik.bengtsson at gmail.com>
wrote:

> I just want to add a few reasons that I know of for why users are
> still on Red Hat/CentOS 7 and learned from being deeply involved with
> big academic and research high-performance compute (HPC) environments.
> These systems are not like your regular sailing boat, but more like a
> giant container ship; much harder to navigate, slower to react, you
> cannot just cruise around and pop into any harbor you like to, or when
> you like to. It takes much more efforts, more logistics, and more
> people to operate them. If you mess up, the damage is much bigger.
>
> Reasons:
>
> * Users don't have many options, but have to use what is available.
>
> * Red Hat/CentOS is designed for long term stability and backward
> compatibility. They've only done major upgrades every 3-4 years.
>
> * Red Hat backports security fixes to old versions of common software,
> which is why you see, for instance, Python 3.6 still being the
> provided version, although Python made that End-of-Life in December
> 2021.
>
> * HPC environments (aka "compute cluster") often have 100s to 1000s of
> users. Imagine the amount of software tools and difference versions
> installed in such environments.
>
> * Upgrading an HPC environments is a major disruption for users who
> rely on it in their work and research, e.g. some software stacks,
> pipelines, and scripts have to reinstalled and re-coded.
>
> * The majority of users and sysadmins prefer stability over the being
> able to run the latest tools.
>
> * Over years, stability increases the technical debt, to a point where
> it is cheaper to upgrade than to stay behind.
>
> * Even if sysadmins want to upgrade to a newer release, their hands
> are often also tied, because of external factors.  For example, the
> global parallel file system or the backup system you rely on has not
> yet be validated for the next version of OS you want to upgrade too.
> There might also be research critical scientific pipelines that does
> not yet support the new version, which can be because the maintainers
> of those tools don't have access to a new version to test on. GPU
> drives much not be available. This is also the case for commercial
> tools. Sometimes IT security requirements cannot be met on the new
> version, because security scanning tools are not yet up-to-date. There
> can also be hardware limitations, e.g. you might even have to replace
> some central server for the whole cluster to be able to upgrade.
>
> * Although you might want to tell everyone to just run a new version
> via Linux containers, it's not the magic sauce for all of the above.
> Savvy users might be able to do it, but not your average users. Also,
> this basically puts the common sysadmin burden on the end-user, who
> now have to keep their container stacks up-to-date and in sync.  In
> contrast to a homogeneous environment, this strategy increases the
> support burden on sysadms, because they will get much more questions
> and request for troubleshooting on very specific setups.
>
> Specifically to Red Hat/CentOS 7: When sites started to think about
> migrating to CentOS 8, Red Hat decided to pull the plug and change
> their long-term business plan.  This itself was a disruptive event,
> because any plans to do a "regular" distro upgrade had to be flushed
> down the toilet.  The community waited to see what would happen and
> what the options would be.  A lot of sites now plan on migrating to
> Rocky 8, which (AFAIU) tries to stay true to the original CentOS
> mission.  This means they are waiting for third-party hardware and
> software providers to validate their products for Rocky 8, e.g.
> parallel file systems, backup software, software stacks, etc.
>
> What R Core, Gabor, and many others are doing, often silently in the
> background, is to make sure R works smoothly for many R users out
> there, whatever operating system and version they may be on. This is
> so essential to R's success, and, more importantly, for research and
> science to be able to move forward.  Those endless hours spend on
> trying to support some OS, even obscure ones, to pay off many times,
> especially on common OSes such as Red Hat and CentOS.  You spare lots
> of users and sysadmins lots of pain when you put those hours in.  So,
> thank you for doing all that.
>
> /Henrik
>
> On Wed, Feb 8, 2023 at 2:24 AM I?aki Ucar <iucar at fedoraproject.org> wrote:
> >
> > On Wed, 8 Feb 2023 at 07:05, Prof Brian Ripley <ripley at stats.ox.ac.uk>
> wrote:
> > >
> > > On 08/02/2023 00:13, G?bor Cs?rdi wrote:
> > > > As preparation for the next release, I am trying to compile R devel
> on
> > > > RHEL / CentOS 7, which is still supported by RedHat until 2024 June.
> >
> > True, but with a big asterisk. Full updates ended on 2020-08-06, and
> > it's been in maintenance mode since then, meaning that only security
> > and critical fixes are released until EOL to facilitate a transition
> > to a newer version. So CentOS 7 users shouldn't expect new releases of
> > software to be available.
> >
> > > > There are two issues.
> > > >
> > > > One is that the libcurl version in CentOS 7 is quite old, 7.29.0, and
> > > > R devel now requires 7.32.0, since 83715 about a week ago. This
> > > > requirement is here to stay for R 4.3.0, right?
> >
> > I suppose that if R-devel doesn't use any API endpoint not available
> > in 7.29, you could just patch out that requirement. Otherwise, you
> > would need to build your own.
> >
> > > Unless we revert it.  The comment in the manual says
> > >
> > > @c libcurl 7.32.0 was released in Aug 2013
> > >
> > > and Centos 7 was released in 2014-07-07, 11 months later.  Do they
> > > really never security-patch libcurl?
> >
> > Oh, they do port all security fixes, but without changing the version,
> > which is the whole point of LTS. In fact, current version is
> > 7.29.0-59, and there are probably a hundred patches on top of those 59
> > builds.
> >
> > > > The second is that the recommended packages are now installed with R
> > > > CMD INSTALL --use-C17, which fails on CentOS 7 with
> > > >
> > > > begin installing recommended package MASS
> > > > * installing *source* package 'MASS' ...
> > > > ** package 'MASS' successfully unpacked and MD5 sums checked
> > > > ** using non-staged installation
> > > > ** libs
> > > > Error: C17 standard requested but CC17 is not defined
> > > > * removing '/root/R-devel/library/MASS'
> > > >
> > > > CentOS 7 has GCC 4.8.5, which does not have a -std=gnu17 option.
> > > > However the commit message of this change in commit 83566 hints that
> > > > this requirement might be temporary. Hence my questions.
> > >
> > > It is temporary -- needed for survival (now updated) and mgcv
> (awaited).
> > >   However,
> > >
> > > 1) You should be able to set
> > >
> > > CC17="gcc -std=gnu11"
> > >
> > > in config.site, as C17 is a bug-fixed C11.
> > >
> > > 2) Centos 7 has later compilers available, and people are going to need
> > > them for C++.  The manual says
> > >
> > >      ... later compilers are available: for RHEL/Centos 7 look for
> > > ?devtoolset?.
> >
> > Exactly, here is the reference:
> > https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/
> >
> > R 3.6.0 is the last version we support in EPEL, because EPEL is not
> > allowed to build on top of SCL. But you can enable SCL and install the
> > devtoolset available, which contains gcc version 7.3.1.
> >
> > But anyway, I don't think that staying in an almost 10-year old distro
> > in maintenance mode and at the same time expecting a cutting-edge
> > version of R (or any software) is reasonable.
> >
> > I?aki
> >
> > > > Is the C17 requirement temporary or it will be a requirement for R
> 4.3.0?
> > > > Should I expect any problems if I remove the --use-C17 flag for
> > > > installing the recommended packages?
> > >
> > > Not with that compiler.
> > >
> > > >
> > > > There are a lot of R users still on RHEL 7, so it would be great to
> > > > know what to expect for the next release.
> > > an D. Ripley,                  ripley at stats.ox.ac.uk
> > > Emeritus Professor of Applied Statistics, University of Oxford
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
> >
> > --
> > I?aki ?car
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @h@rt @end|ng |rom d|m@uch||e@c|  Wed Feb  8 20:24:49 2023
From: @h@rt @end|ng |rom d|m@uch||e@c| (Andrew Hart)
Date: Wed, 8 Feb 2023 16:24:49 -0300
Subject: [Rd] 
 need help from someone know screen reader and R high DPI GUI
In-Reply-To: <TYAP286MB02686F8746145024D4467E29D1D89@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
References: <TYAP286MB02686F8746145024D4467E29D1D89@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
Message-ID: <4bff932b-ff0a-78de-acc9-cdeab853af31@dim.uchile.cl>

I'd be willing to give it a go if a pre-build binary set-up could be 
provided.

Cheers,
Andrew.

On 8/02/2023 6:39, yu gong wrote:
> hello , everyone:
> 
>   I recheck and retest about the patch about high dpi of windows R GUI ,  IMO it works mostly. Last thing I am not sure is screen reader.
> 
>   I download NVDA screen reader, and try it on high dpi R GUI , in NVDA Speech viewer,  it seems it can read R GUI normally, but since I konw so little about screen reader before.   I couldn't confirm NVDA Speech viewer indeed work on high dpi R GUI.
> 
> Could anyone who know screen reader , help me  to confirm the high dpi patch not break screen reader.
> 
> I put the patch https://github.com/armgong/misc-r-patch/blob/main/dpi-c-code.diff  .
> 
> If anyone need the compiled binary on windows x64 , I can upload it on github repo also.
> 
> thanks,
> 
> Yu Gong
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From |uc@r @end|ng |rom |edor@project@org  Wed Feb  8 21:22:46 2023
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 8 Feb 2023 21:22:46 +0100
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
In-Reply-To: <CAFDcVCTu-snQbYqSde8jhm_7YS=OYfcXKs8=oysiWU2pkUb45Q@mail.gmail.com>
References: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
 <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>
 <CALEXWq3c9Q0yNAzK0q17TBX-yJ9boxW+ZShZmha1XijAjBn=dQ@mail.gmail.com>
 <CAFDcVCTu-snQbYqSde8jhm_7YS=OYfcXKs8=oysiWU2pkUb45Q@mail.gmail.com>
Message-ID: <CALEXWq3Bh8V=zxSYShJOt_32-_2nc5nwQte2qcbnwgLvPOPk5Q@mail.gmail.com>

On Wed, 8 Feb 2023 at 19:59, Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> I just want to add a few reasons that I know of for why users are
> still on Red Hat/CentOS 7 and learned from being deeply involved with
> big academic and research high-performance compute (HPC) environments.
> These systems are not like your regular sailing boat, but more like a
> giant container ship; much harder to navigate, slower to react, you
> cannot just cruise around and pop into any harbor you like to, or when
> you like to. It takes much more efforts, more logistics, and more
> people to operate them. If you mess up, the damage is much bigger.

I'm fully aware of, and I understand, all the technical and
organizational reasons why there are CentOS 7 systems out there. I
only challenge a single point (cherry-picked from your list):

> * The majority of users and sysadmins prefer stability over the being
> able to run the latest tools.

This is simply not true. In general, sysadmins do prefer stability,
but users want the latest tools (otherwise, this very thread would not
exist, QED). And the first thing is hardly compatible with the second
one. That is, without containers, which brings us to the next point.

> * Although you might want to tell everyone to just run a new version
> via Linux containers, it's not the magic sauce for all of the above.
> Savvy users might be able to do it, but not your average users. Also,
> this basically puts the common sysadmin burden on the end-user, who
> now have to keep their container stacks up-to-date and in sync.  In
> contrast to a homogeneous environment, this strategy increases the
> support burden on sysadms, because they will get much more questions
> and request for troubleshooting on very specific setups.

How is that so? Let's say a user wants the latest version of R.
Nothing prevents a sysadmin to set up a script called "R" in the PATH
that runs e.g. the r2u container [1] with the proper mounts. And
that's it: the user runs "R" and receives the latest version (and even
package installations seem to be blazing fast now!) without even
knowing that it's running inside a container.

I know, you are thinking "security", "permissions"...

$ yum install podman

Drop-in replacement for docker, but rootless, daemonless. Also there's
a similar thing called Apptainer [1], formerly Singularity, that was
specifically designed with HPC in mind, now part of the Linux
Foundation.

[1] https://github.com/eddelbuettel/r2u
[2] https://apptainer.org/

> What R Core, Gabor, and many others are doing, often silently in the
> background, is to make sure R works smoothly for many R users out
> there, whatever operating system and version they may be on. This is
> so essential to R's success, and, more importantly, for research and
> science to be able to move forward.

+1000

--
I?aki ?car


From d@v|@ @end|ng |rom po@|t@co  Wed Feb  8 21:33:27 2023
From: d@v|@ @end|ng |rom po@|t@co (Davis Vaughan)
Date: Wed, 8 Feb 2023 15:33:27 -0500
Subject: [Rd] Small typo in Writing R Extensions
Message-ID: <CABzLhzyeHpWmbToTd0OCRSCg_NVvRZ2RkxRxCVzsv03jvWyAuQ@mail.gmail.com>

Hi all,

Writing R Extensions describes `R_NewEnv()` as:

```
At times it may also be useful to create a new environment frame in C
code. R_NewEnv is a C version of the R function new.env:

SEXP R_NewEnv(SEXP enclos, int hash, ins size)
```

There is a typo here where `ins size` should be `int size`.

Thanks!
Davis


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Feb  8 22:23:02 2023
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 8 Feb 2023 13:23:02 -0800
Subject: [Rd] Compiling R-devel on older Linux distributions,
 e.g. RHEL / CentOS 7
In-Reply-To: <CALEXWq3Bh8V=zxSYShJOt_32-_2nc5nwQte2qcbnwgLvPOPk5Q@mail.gmail.com>
References: <CABtg=KnOdkTL1L3wK=Q7D1vi6ubOz=1vM0r2TY_W498h_HxUqg@mail.gmail.com>
 <920cbd04-cae4-7e8a-2c12-5a9361a459d7@stats.ox.ac.uk>
 <CALEXWq3c9Q0yNAzK0q17TBX-yJ9boxW+ZShZmha1XijAjBn=dQ@mail.gmail.com>
 <CAFDcVCTu-snQbYqSde8jhm_7YS=OYfcXKs8=oysiWU2pkUb45Q@mail.gmail.com>
 <CALEXWq3Bh8V=zxSYShJOt_32-_2nc5nwQte2qcbnwgLvPOPk5Q@mail.gmail.com>
Message-ID: <CAFDcVCSHww=YpNcrHzpmZGnHXcyFpDDXfRGtDRwZDCq8k=ZArw@mail.gmail.com>

On Wed, Feb 8, 2023 at 12:22 PM I?aki Ucar <iucar at fedoraproject.org> wrote:
>
> On Wed, 8 Feb 2023 at 19:59, Henrik Bengtsson
> <henrik.bengtsson at gmail.com> wrote:
> >
> > I just want to add a few reasons that I know of for why users are
> > still on Red Hat/CentOS 7 and learned from being deeply involved with
> > big academic and research high-performance compute (HPC) environments.
> > These systems are not like your regular sailing boat, but more like a
> > giant container ship; much harder to navigate, slower to react, you
> > cannot just cruise around and pop into any harbor you like to, or when
> > you like to. It takes much more efforts, more logistics, and more
> > people to operate them. If you mess up, the damage is much bigger.
>
> I'm fully aware of, and I understand, all the technical and
> organizational reasons why there are CentOS 7 systems out there. I
> only challenge a single point (cherry-picked from your list):
>
> > * The majority of users and sysadmins prefer stability over the being
> > able to run the latest tools.
>
> This is simply not true. In general, sysadmins do prefer stability,
> but users want the latest tools (otherwise, this very thread would not
> exist, QED). And the first thing is hardly compatible with the second
> one. That is, without containers, which brings us to the next point.

We might operate in different environments, but there are lots of labs
that keep the exact same pipeline for years (5-10 years), because "it
works", and because if they change anything, they might have to
re-analyze all their old data to avoid batch effects purely from
different versions of algorithms. I can agree with this strategy too,
especially if your data are huge and staging them back on the compute
environment from cold storage can be a huge task in itself.  Then
there are reasons such as being less savvy, and bad memories from last
time they tried this (e.g. years ago), everything broke, and it took
them weeks and months to sort it out.  I'm not trying to make fun of
anyone here - it's just that on big clusters with many users, the
skill-level spectrum varies a lot.

>
> > * Although you might want to tell everyone to just run a new version
> > via Linux containers, it's not the magic sauce for all of the above.
> > Savvy users might be able to do it, but not your average users. Also,
> > this basically puts the common sysadmin burden on the end-user, who
> > now have to keep their container stacks up-to-date and in sync.  In
> > contrast to a homogeneous environment, this strategy increases the
> > support burden on sysadms, because they will get much more questions
> > and request for troubleshooting on very specific setups.
>
> How is that so? Let's say a user wants the latest version of R.
> Nothing prevents a sysadmin to set up a script called "R" in the PATH
> that runs e.g. the r2u container [1] with the proper mounts. And
> that's it: the user runs "R" and receives the latest version (and even
> package installations seem to be blazing fast now!) without even
> knowing that it's running inside a container.
>
> I know, you are thinking "security", "permissions"...

I'm actually thinking maintenance and support. When you bring in Linux
containers, you basically introduce a bunch of new compute
environments in addition to your host system. So, instead of the
support team (often same as the sysadm) having to understand and
answer questions for a homogeneous environment, they now have to be
up-to-date with different versions of CentOS/Rocky, Ubuntu, Debian,
... and different container images. In R we often have a hard time to
even get users to report their sessionInfo() - now imagine their
container details.  If admins start providing one-off container
images, that becomes an added maintenance load. But, I agree, Linux
containers are great and makes it possible for a lot of users to run
analyzes that they otherwise would not be able to do on the host
system.

>
> $ yum install podman
>
> Drop-in replacement for docker, but rootless, daemonless. Also there's
> a similar thing called Apptainer [1], formerly Singularity, that was
> specifically designed with HPC in mind, now part of the Linux
> Foundation.
>
> [1] https://github.com/eddelbuettel/r2u
> [2] https://apptainer.org/

Yes, Singularity/Apptainer is awesome, especially since Docker is
mostly considered a no-no in HPC environments. The minimal, or even
zero use of SUID, these days, is great. That it runs as a regular
process as the users itself with good default file mounts is also
neat.  These things get even better with newer Linux kernels, which,
by the way, is another motivation for upgrading the OS.

That said, with Apptainer and likes, the user might run into conflicts
here, similar to what we see when users install software via Conda,
which often generals a parallel software stack to that of the host
system.  Taking R as an example, when a user installs packages, they
end up in R_LIBS_USER=~/R/%p-library/%v (*).  This is the same
directory regardless of running R on the host system, in a Linux
container, and in Linux containers based on different OSes.  So, if
they end up running a little bit here and there, which is not
unreasonable to expect if they work on different projects, then there
will a mishmash of R package binaries that are not compatible with
each other.  This happens a ton when people use Conda.  Of course, a
savvy user will at some point figure this out, and configure their
R_LIBS_USER to be agile to the environment they run, but the majority
won't notice this until it's too late.  And, boom, now you're adding
lots of load on the support team, and troubleshooting and undoing
these conflicts consumes a lot of wasted efforts.  In the worst case,
the user does not reach out for help, but in stead struggle in silence
and might work with something half broken.  From my experience at UCSF
(~2,000 users on two big clusters), this is unfortunately not that
uncommon.

(*) My wish would be if R could to include also the OS name and the OS
version in the default R_LIBS_USER, something like
R_LIBS_USER=~/R/%O-%p-library/%v, where %O would be a new
specification that expands to, say, "centos-7", "ubuntu-22.04".  That
would mitigate lots of these issues automatically.

Thanks for the feedback and questions,

Henrik

> > What R Core, Gabor, and many others are doing, often silently in the
> > background, is to make sure R works smoothly for many R users out
> > there, whatever operating system and version they may be on. This is
> > so essential to R's success, and, more importantly, for research and
> > science to be able to move forward.
>
> +1000
>
> --
> I?aki ?car


From d@v|@ @end|ng |rom po@|t@co  Wed Feb  8 21:51:49 2023
From: d@v|@ @end|ng |rom po@|t@co (Davis Vaughan)
Date: Wed, 8 Feb 2023 15:51:49 -0500
Subject: [Rd] On optimizing `R_NewEnv()`
Message-ID: <CABzLhzxrrV7AGg5nCwCdEzqB1aRcRcHByoAXrjiXgRMi7Q=4-A@mail.gmail.com>

Hi all,

I really like the addition of `R_NewEnv()` back in 4.1.0
https://github.com/wch/r-source/blob/625ab8d45f86f65561e53627e1f0c220bdc5f752/src/main/envir.c#L3619-L3630

I have a use case where I'm likely to call this function a large
number of times to generate many small hashed environments, so I'd
like to optimize it as far as possible.

I noticed that it takes `int size`, converts that to a SEXP for
`R_NewHashedEnv()`, which then simply converts that back to an `int`
here:
https://github.com/wch/r-source/blob/625ab8d45f86f65561e53627e1f0c220bdc5f752/src/main/envir.c#L378

I wonder if we could cut out that intermediate SEXP (along with its
protection) by adjusting `R_NewHashedEnv()` to instead take `int
size`.

I'd be happy to do a patch if that sounds good. I'd update all uses of
`R_NewHashedEnv()` to supply `int`s instead, which actually seems like
it would make every instance of calling that function simpler:
https://github.com/search?q=repo%3Awch%2Fr-source%20R_NewHashedEnv&type=code

So hopefully a win everywhere?

Thanks,
Davis


From yugong @end|ng |rom out|ook@com  Thu Feb  9 02:04:12 2023
From: yugong @end|ng |rom out|ook@com (yu gong)
Date: Thu, 9 Feb 2023 01:04:12 +0000
Subject: [Rd] 
 need help from someone know screen reader and R high DPI GUI
In-Reply-To: <4bff932b-ff0a-78de-acc9-cdeab853af31@dim.uchile.cl>
References: <TYAP286MB02686F8746145024D4467E29D1D89@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>
 <4bff932b-ff0a-78de-acc9-cdeab853af31@dim.uchile.cl>
Message-ID: <TYAP286MB0268BF2279F726318432E1CBD1D99@TYAP286MB0268.JPNP286.PROD.OUTLOOK.COM>

thanks Andrew

I  upload the binary to https://github.com/armgong/misc-r-patch/releases/download/v0.0.1/r-highdpi-x64.zip

thanks,

Yu Gong

________________________________
From: R-devel <r-devel-bounces at r-project.org> on behalf of Andrew Hart via R-devel <r-devel at r-project.org>
Sent: Thursday, February 9, 2023 3:24
To: r-devel at r-project.org <r-devel at r-project.org>
Subject: Re: [Rd] need help from someone know screen reader and R high DPI GUI

I'd be willing to give it a go if a pre-build binary set-up could be
provided.

Cheers,
Andrew.

On 8/02/2023 6:39, yu gong wrote:
> hello , everyone:
>
>   I recheck and retest about the patch about high dpi of windows R GUI ,  IMO it works mostly. Last thing I am not sure is screen reader.
>
>   I download NVDA screen reader, and try it on high dpi R GUI , in NVDA Speech viewer,  it seems it can read R GUI normally, but since I konw so little about screen reader before.   I couldn't confirm NVDA Speech viewer indeed work on high dpi R GUI.
>
> Could anyone who know screen reader , help me  to confirm the high dpi patch not break screen reader.
>
> I put the patch https://github.com/armgong/misc-r-patch/blob/main/dpi-c-code.diff  .
>
> If anyone need the compiled binary on windows x64 , I can upload it on github repo also.
>
> thanks,
>
> Yu Gong
>
>
>        [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Feb  9 08:54:50 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 9 Feb 2023 08:54:50 +0100
Subject: [Rd] Small typo in Writing R Extensions
In-Reply-To: <CABzLhzyeHpWmbToTd0OCRSCg_NVvRZ2RkxRxCVzsv03jvWyAuQ@mail.gmail.com>
References: <CABzLhzyeHpWmbToTd0OCRSCg_NVvRZ2RkxRxCVzsv03jvWyAuQ@mail.gmail.com>
Message-ID: <eb6dc619-733d-f226-7488-b2417dc2833c@gmail.com>


On 2/8/23 21:33, Davis Vaughan via R-devel wrote:
> Hi all,
>
> Writing R Extensions describes `R_NewEnv()` as:
>
> ```
> At times it may also be useful to create a new environment frame in C
> code. R_NewEnv is a C version of the R function new.env:
>
> SEXP R_NewEnv(SEXP enclos, int hash, ins size)
> ```
>
> There is a typo here where `ins size` should be `int size`.
Thanks, fixed now.
Tomas
>
> Thanks!
> Davis
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Feb 10 15:00:55 2023
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 10 Feb 2023 15:00:55 +0100
Subject: [Rd] R-devel does not compile on OpenSUSE 15.4
In-Reply-To: <CABtg=KnTn+QUei+4oxPBL=So2x2i7PEXTPfdrH17AqWv6K5BGg@mail.gmail.com>
References: <CABtg=KnTn+QUei+4oxPBL=So2x2i7PEXTPfdrH17AqWv6K5BGg@mail.gmail.com>
Message-ID: <CABtg=KkcuxkWOKC8yHHxZsS0sheGx3O0wbE1GiHc9v9Y-t9yCA@mail.gmail.com>

I think this was possibly a typo (ALL_FCLAGS vs ALL_FCFLAGS), plus
those flags were never set for src/modules/lapack. Hence, this seems
like a better fix, that also adds the flags to src/extra/blas.

Best,
Gabor

diff --git a/src/extra/blas/Makefile.in b/src/extra/blas/Makefile.in
index 3661416..c9b53e2 100644
--- a/src/extra/blas/Makefile.in
+++ b/src/extra/blas/Makefile.in
@@ -17,7 +17,7 @@ include $(top_builddir)/Makeconf

 ALL_CFLAGS = $(ALL_CFLAGS_LO)
 ALL_FFLAGS = $(ALL_FFLAGS_LO)
-ALL_FCLAGS = $(ALL_FFLAGS_LO)
+ALL_FCFLAGS = $(ALL_FFLAGS_LO)

 SOURCES = blas00.c blas.f cmplxblas.f blas2.f90 cmplxblas2.f90

diff --git a/src/modules/lapack/Makefile.in b/src/modules/lapack/Makefile.in
index 8e593ea..e35c956 100644
--- a/src/modules/lapack/Makefile.in
+++ b/src/modules/lapack/Makefile.in
@@ -15,6 +15,10 @@ include $(top_builddir)/Makeconf
 .f90.o:
        $(FC) $(ALL_FCFLAGS) -c @FCFLAGS_f90@ $< -o $@

+ALL_CFLAGS = $(ALL_CFLAGS_LO)
+ALL_FFLAGS = $(ALL_FFLAGS_LO)
+ALL_FCFLAGS = $(ALL_FFLAGS_LO)
+
 SOURCES_C = Lapack.c @USE_VECLIB_G95FIX_TRUE@ vecLibg95c.c
 SOURCES_F = @USE_VECLIB_G95FIX_TRUE@ vecLibg95f.f

On Wed, Feb 8, 2023 at 2:03 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> More precisely the built-in Lapack module. AFAICT this is because the
> f90 files are not compiled with -fpic. My output:
>
> make[4]: Entering directory '/tmp/R-devel/src/modules/lapack'
> gfortran -fpic  -g -O2 -msse2 -mfpmath=sse  -c dlamch.f -o dlamch.o
> gfortran  -fpic  -g -O2  -c dlapack.f -o dlapack.o
> gfortran  -fpic  -g -O2  -c cmplx.f -o cmplx.o
> gfortran  -c  la_constants.f90 -o la_constants.o
> gfortran  -c  dlartg.f90 -o dlartg.o
> gfortran  -c  la_xisnan.f90 -o la_xisnan.o
> gfortran  -c  dlassq.f90 -o dlassq.o
> gfortran  -c  zlartg.f90 -o zlartg.o
> gfortran  -c  zlassq.f90 -o zlassq.o
> gcc -shared -fopenmp -L/usr/local/lib64 -o libRlapack.so dlamch.o
> dlapack.o cmplx.o dlartg.o dlassq.o la_constants.o la_xisnan.o
> zlartg.o zlassq.o   -L"../../../lib" -lRblas -lgfortran -lm -lquadmath
> /usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld:
> zlassq.o: warning: relocation against `__la_xisnan_MOD_disnan' in
> read-only section `.text'
> /usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld:
> dlassq.o: relocation R_X86_64_PC32 against symbol
> `__la_xisnan_MOD_disnan' can not be used when making a shared object;
> recompile with -fPIC
> /usr/lib64/gcc/x86_64-suse-linux/7/../../../../x86_64-suse-linux/bin/ld:
> final link failed: bad value
> collect2: error: ld returned 1 exit status
>
> If I update src/modules/lapack/Makefile.in to add $(FPICFLAGS) to the
> .f90 compilation, then all is good. I assume you would also want to
> add -g and -O2 here, so probably some other variable is better than
> $(FPICFLAGS).
>
> FYI,
> Gabor


From t@r@@@z@kh@rko @end|ng |rom uzh@ch  Fri Feb 10 17:00:44 2023
From: t@r@@@z@kh@rko @end|ng |rom uzh@ch (Taras Zakharko)
Date: Fri, 10 Feb 2023 17:00:44 +0100
Subject: [Rd] A delayedAssign() variant for quoted expressions
Message-ID: <DF104F0E-5EF2-4014-976C-2CD9B0AE8EB6@uzh.ch>

It is sometimes useful to create a promise using a constructed expression, but delayedAssign will always substitute the expression argument. I am currently using this pattern to achieve this:

expr <- bquote(?)
eval(call("delayedAssign", x, expr, eval.env = eval_env))

But it would be nice if base R already had a function that takes quoted promise body. It could be named delayedAssign0 or delayedAssignq (similar to evalq). The definition of such function would be trivial (just remove substitute from delayedAssign):

function (x, value, eval.env = parent.frame(1), assign.env = parent.frame(1)) .Internal(delayedAssign(x, substitute(value), eval.env, assign.env))

Maybe R maintainers could consider adding this function? I would be happy to submit a patch. 

Best, 

Taras


	[[alternative HTML version deleted]]


