From brod|e@g@@|@m @end|ng |rom y@hoo@com  Mon Jun  1 03:13:40 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Mon, 1 Jun 2020 01:13:40 +0000 (UTC)
Subject: [Rd] eval and Calling Frames
References: <1420461985.617634.1590974020657.ref@mail.yahoo.com>
Message-ID: <1420461985.617634.1590974020657@mail.yahoo.com>

 I ran into an interesting issue with `evalq` (and also
`eval(quote(...))`):

???? f <- function() {
?????? list(
???????? sys.parent(1),
???????? evalq(sys.parent(1)),
???????? evalq((function() sys.parent(2))()),? # add an anon fun layer
???????? evalq((function() sys.parent(1))())
?????? )
???? }
???? res <- f()
???? str(res)
???? ## List of 4
???? ##? $ : int 0???????? # sys.parent(1)
???? ##? $ : int 2???????? # evalq(sys.parent(1))
???? ##? $ : int 0???????? # evalq((function() sys.parent(2))())
???? ##? $ : int 1???????? # evalq((function() sys.parent(1))())

In order of least to most surprising:

1. `sys.parent(1)` and `evalq(sys.parent(1))` are not the same
2. `evalq(sys.parent(1))` and `evalq((function() sys.parent(2))())`
?? are not the same
3. `evalq((function() sys.parent(1))())` returns a lower frame number
?? than `evalq(sys.parent(1))`

The root cause of this is that the `evalq` **closure** sets a context,
but then the C-level `do_eval` it invokes sets another one[1] with the
new `evalq` context as the calling frame (`cptr->sysparent`)[2].? This
then interacts with how `sys.parent` resolves parents when a target
frame appears more than once in the context stack.? `sys.parent`
returns the oldest context that matches[3], and in this case `f`'s
frame appears twice because `evalq` adds it via `do_eval`.

One option is to change what `sysparent` of the `evalq` `envir`.
For example, if we set it to be the same as it would be for commands
outside the `evalq` we get:

???? str(res)
???? ## List of 4
???? ##? $ : int 0???????? # sys.parent(1)
???? ##? $ : int 0???????? # evalq(sys.parent(1))
???? ##? $ : int 0???????? # evalq((function() sys.parent(2))())
???? ##? $ : int 1???????? # evalq((function() sys.parent(1))())

There is precedent for doing this in S3 generics and their methods
where method `sysparent` is set to be that of the generic.? Now
`evalq` no longer interferes with the resolution of calling frames.
It seems reasonable to set evaluation environments without affecting
what the calling frame is. Indeed that happens when we do something like
`environment(fun) <- blah` as the calling frame is unaffected when `fun` is
invoked.

I attach a patch that implements this change.? The patch is a
hack-job intended solely for illustrative purposes, though it does
pass `make check-all` on a current version of r-devel.? I also ran the
`rlang` tests as those probably push the envelope in this area.? There
only one failed with 2,613 passing.? The failed one is for a
deprecated function that was specifically checking for the repeated
`evalq` contexts[7].

I also attach a document with additional examples and commentary for
those interested.

Best,

Brodie.

PS: for a loosely related issue see #15531[8].

[1]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/eval.c#L3329
[2]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/context.c#L260
[3]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/context.c#L433
[4]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/eval.c#L1815
[5]: https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Contexts
[6]: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15531
[7]: https://github.com/r-lib/rlang/blob/v0.4.6/tests/testthat/test-retired.R#L437
[8]: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15531



-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: patch.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200601/bd8d8d21/attachment.txt>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: details.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200601/bd8d8d21/attachment-0001.txt>

From ||one| @end|ng |rom r@tud|o@com  Mon Jun  1 12:52:23 2020
From: ||one| @end|ng |rom r@tud|o@com (Lionel Henry)
Date: Mon, 1 Jun 2020 12:52:23 +0200
Subject: [Rd] eval and Calling Frames
In-Reply-To: <1420461985.617634.1590974020657@mail.yahoo.com>
References: <1420461985.617634.1590974020657.ref@mail.yahoo.com>
 <1420461985.617634.1590974020657@mail.yahoo.com>
Message-ID: <CAJf4E3rvGvcaMQ=zAA2W5Uk2-WZZYE+irxwfQy7N_x7DOC3zag@mail.gmail.com>

Hi Brodie,

I wouldn't use the rlang tests as a measure of backward compatibility.
Your patch changes the structure of the `parent.frame()` hierarchy,
which is likely to be disruptive with packages that do weird NSE stuff
(and so, not rlang ;-p). Currently things are set up so that the
parent frame of the evaluated call is the "target" `eval()` context,
which itself has for parent the "closure" `eval()` context.

For example, with:

```
foo <- function() eval(quote(bar()))
bar <- function() EXPR()
```

The current hierarchy (as defined by `parent.frame()`) is:

```
    ?
 1. ??global::foo()
 2.   ??base::eval(quote(bar()))
 3.     ??base::eval(quote(bar()))   <- This is the same frame env as foo()
 4.       ??global::bar()
 5.         ??global::EXPR()
```

With your patch, it becomes:

```
    ?
 1. ??global::foo()
 2.   ??base::eval(quote(bar()))
 3.   ? ??base::eval(quote(bar()))
 4.   ??global::bar()
 5.     ??global::EXPR()
```

I agree the second hierarchy is preferable. See also the documentation
of `filter.callframes` in `?Rprof` which patches up things so that the
`eval()` frames are filtered out from the trailing backtrace
branch. This wouldn't be necessary with the second hierarchy.

Best,
Lionel


On 6/1/20, brodie gaslam via R-devel <r-devel at r-project.org> wrote:
>  I ran into an interesting issue with `evalq` (and also
> `eval(quote(...))`):
>
> ???? f <- function() {
> ?????? list(
> ???????? sys.parent(1),
> ???????? evalq(sys.parent(1)),
> ???????? evalq((function() sys.parent(2))()),? # add an anon fun layer
> ???????? evalq((function() sys.parent(1))())
> ?????? )
> ???? }
> ???? res <- f()
> ???? str(res)
> ???? ## List of 4
> ???? ##? $ : int 0???????? # sys.parent(1)
> ???? ##? $ : int 2???????? # evalq(sys.parent(1))
> ???? ##? $ : int 0???????? # evalq((function() sys.parent(2))())
> ???? ##? $ : int 1???????? # evalq((function() sys.parent(1))())
>
> In order of least to most surprising:
>
> 1. `sys.parent(1)` and `evalq(sys.parent(1))` are not the same
> 2. `evalq(sys.parent(1))` and `evalq((function() sys.parent(2))())`
> ?? are not the same
> 3. `evalq((function() sys.parent(1))())` returns a lower frame number
> ?? than `evalq(sys.parent(1))`
>
> The root cause of this is that the `evalq` **closure** sets a context,
> but then the C-level `do_eval` it invokes sets another one[1] with the
> new `evalq` context as the calling frame (`cptr->sysparent`)[2].? This
> then interacts with how `sys.parent` resolves parents when a target
> frame appears more than once in the context stack.? `sys.parent`
> returns the oldest context that matches[3], and in this case `f`'s
> frame appears twice because `evalq` adds it via `do_eval`.
>
> One option is to change what `sysparent` of the `evalq` `envir`.
> For example, if we set it to be the same as it would be for commands
> outside the `evalq` we get:
>
> ???? str(res)
> ???? ## List of 4
> ???? ##? $ : int 0???????? # sys.parent(1)
> ???? ##? $ : int 0???????? # evalq(sys.parent(1))
> ???? ##? $ : int 0???????? # evalq((function() sys.parent(2))())
> ???? ##? $ : int 1???????? # evalq((function() sys.parent(1))())
>
> There is precedent for doing this in S3 generics and their methods
> where method `sysparent` is set to be that of the generic.? Now
> `evalq` no longer interferes with the resolution of calling frames.
> It seems reasonable to set evaluation environments without affecting
> what the calling frame is. Indeed that happens when we do something like
> `environment(fun) <- blah` as the calling frame is unaffected when `fun` is
> invoked.
>
> I attach a patch that implements this change.? The patch is a
> hack-job intended solely for illustrative purposes, though it does
> pass `make check-all` on a current version of r-devel.? I also ran the
> `rlang` tests as those probably push the envelope in this area.? There
> only one failed with 2,613 passing.? The failed one is for a
> deprecated function that was specifically checking for the repeated
> `evalq` contexts[7].
>
> I also attach a document with additional examples and commentary for
> those interested.
>
> Best,
>
> Brodie.
>
> PS: for a loosely related issue see #15531[8].
>
> [1]:
> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/eval.c#L3329
> [2]:
> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/context.c#L260
> [3]:
> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/context.c#L433
> [4]:
> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/eval.c#L1815
> [5]: https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Contexts
> [6]: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15531
> [7]:
> https://github.com/r-lib/rlang/blob/v0.4.6/tests/testthat/test-retired.R#L437
> [8]: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15531
>
>
>


From @udomeme @end|ng |rom gm@||@com  Mon Jun  1 23:36:03 2020
From: @udomeme @end|ng |rom gm@||@com (Sue McDonald)
Date: Mon, 1 Jun 2020 16:36:03 -0500
Subject: [Rd] Debugging packages with compiled C code on Windows
Message-ID: <CAOkNWZU8c5NG32h-A-7uA-rqPZRB5dGs61U3pYreFEPJk0eaOg@mail.gmail.com>

I have several related questions.

1.  Is it possible to use a GUI: Rstudio/Eclipse/Visual-studio to debug
compiled code on Windows? Things that work on Eclipse for Windows do not
work on Eclipse for Windows.
2.  R CMD INSTALL seems to override default attempts to provide
CFLAGS="-DDEBUG -g3 -O0"
3.  Is it necessary to compile R with debug turned on?   One of the FAQs
mentioned to compile R with make DEBUG=T.
4.  Using Rtools 4.0 and Jeroen's scripts for building R works great (many
thanks). But does not seem to have an impact on optimization, other than
including -gwarf-2.  It adds -DNDEBUG flag.  Is that sufficient for
debugging compiled code in a package?  Obviously, I just need to debug
package code, so does it matter?

I am happy to write-up a FAQ.

Thanks, SM

	[[alternative HTML version deleted]]


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Tue Jun  2 00:37:24 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Mon, 1 Jun 2020 22:37:24 +0000
Subject: [Rd] Debugging packages with compiled C code on Windows
In-Reply-To: <CAOkNWZU8c5NG32h-A-7uA-rqPZRB5dGs61U3pYreFEPJk0eaOg@mail.gmail.com>
References: <CAOkNWZU8c5NG32h-A-7uA-rqPZRB5dGs61U3pYreFEPJk0eaOg@mail.gmail.com>
Message-ID: <CAL6gwnJKx0CF8bZoU9dvTEW8_gY7UvRrt71VRo5Wousyg-PoeA@mail.gmail.com>

Hello, Sue.

1. I work exclusively on Windows have packages with compiled C, C++,
and Fortran (2003+)  and I use RStudio to debug and work with them
using Rtools40, so I guess it's possible. Have I misunderstood and are
you asking about debugging assembler?
2. If you're using Jeroen's scripts, have you tried uncommenting and
adding that to EOPTS in MkRules.local.in? Note that
./src/gnuwin32/fixed/Makefile has a nasty habit of overriding various
optimizations that affect packages.
3. I don't think so
4. The default is that EOPTS is commented out. I talk about it a nit
more at length here [1]. Perhaps that would be of use?

[1] <https://www.avrahamadler.com/2020/05/12/building-r-4-for-windows-with-openblas/>

Good Luck,

Avi


On Mon, Jun 1, 2020 at 9:36 PM Sue McDonald <sudomeme at gmail.com> wrote:
>
> I have several related questions.
>
> 1.  Is it possible to use a GUI: Rstudio/Eclipse/Visual-studio to debug
> compiled code on Windows? Things that work on Eclipse for Windows do not
> work on Eclipse for Windows.
> 2.  R CMD INSTALL seems to override default attempts to provide
> CFLAGS="-DDEBUG -g3 -O0"
> 3.  Is it necessary to compile R with debug turned on?   One of the FAQs
> mentioned to compile R with make DEBUG=T.
> 4.  Using Rtools 4.0 and Jeroen's scripts for building R works great (many
> thanks). But does not seem to have an impact on optimization, other than
> including -gwarf-2.  It adds -DNDEBUG flag.  Is that sufficient for
> debugging compiled code in a package?  Obviously, I just need to debug
> package code, so does it matter?
>
> I am happy to write-up a FAQ.
>
> Thanks, SM
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jeroenoom@ @end|ng |rom gm@||@com  Tue Jun  2 01:14:28 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Tue, 2 Jun 2020 01:14:28 +0200
Subject: [Rd] Debugging packages with compiled C code on Windows
In-Reply-To: <CAOkNWZU8c5NG32h-A-7uA-rqPZRB5dGs61U3pYreFEPJk0eaOg@mail.gmail.com>
References: <CAOkNWZU8c5NG32h-A-7uA-rqPZRB5dGs61U3pYreFEPJk0eaOg@mail.gmail.com>
Message-ID: <CABFfbXuP78e52heZT1a=Y3n08RQsR9h_rV_9SB5F1Fn6BaQwDA@mail.gmail.com>

On Mon, Jun 1, 2020 at 11:36 PM Sue McDonald <sudomeme at gmail.com> wrote:
>
> I have several related questions.
>
> 1.  Is it possible to use a GUI: Rstudio/Eclipse/Visual-studio to debug
> compiled code on Windows? Things that work on Eclipse for Windows do not
> work on Eclipse for Windows.
> 2.  R CMD INSTALL seems to override default attempts to provide
> CFLAGS="-DDEBUG -g3 -O0"
> 3.  Is it necessary to compile R with debug turned on?   One of the FAQs
> mentioned to compile R with make DEBUG=T.
> 4.  Using Rtools 4.0 and Jeroen's scripts for building R works great (many
> thanks). But does not seem to have an impact on optimization, other than
> including -gwarf-2.  It adds -DNDEBUG flag.  Is that sufficient for
> debugging compiled code in a package?  Obviously, I just need to debug
> package code, so does it matter?

If you use the official R-for-Windows installation, you should install
your R package with R CMD INSTALL --debug in order to keep debug
symbols. That is usually sufficient to get a backtrace with e.g
drmingw. See FAQ 8.4 of
https://cran.r-project.org/bin/windows/base/rw-FAQ.html

Coincidentally I am also working on a special debugging build of R,
which uses -g -O0 for all compiled code. It is not final yet, but it
should work. You can test it here:
https://github.com/r-windows/rtools-packages/pull/119


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jun  2 11:34:06 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 2 Jun 2020 11:34:06 +0200
Subject: [Rd] R standalone Rmath library - missing log1pexp(), rnbeta()
In-Reply-To: <11672D34-4B11-44E3-8017-A99A1D6AC3EE@doplganger.com>
References: <11672D34-4B11-44E3-8017-A99A1D6AC3EE@doplganger.com>
Message-ID: <24278.7438.755946.508490@stat.math.ethz.ch>

>>>>> William Birkett 
>>>>>     on Mon, 1 Jun 2020 15:16:07 -0400 writes:

    > I built the the standalone Rmath library,
    > https://cran.r-project.org/doc/manuals/r-release/R-admin.html#The-standalone-Rmath-library
    > <https://cran.r-project.org/doc/manuals/r-release/R-admin.html#The-standalone-Rmath-library>

    > The build process went smoothly.

    > But, there are two functions, log1pexp() and rnbeta(),
    > which appear in the header file, and not in
    > ?libRmath.dylib?.

    > There is a comment in the header, '// <--
    > ../nmath/plogis.c? next to log1pexp(). That file,
    > ?plogis.c? contains a function ?Rf_log1pexp?, which is how
    > the function would be named without '#define
    > MATHLIB_STANDALONE?.

    > The other function, 'rnbeta()? doesn?t appear in any of
    > the source files in the ?nmath? folder. Maybe a file is
    > missing.

Incidentally (not being an Apple costumer), I've seen this; as
I'm the one who had added  log1pexp()  (8 years ago), I've been intrigued.

The problems you are seeing are *not* at all related to R on the
Mac. ==> I'm exceptionally crossposting to R-devel.
=======> Please followup there, *not* on R-SIG-mac.

1) An R core colleague of mine had decided log1pexp() should be
   Rf_log1pexp() but had forgotten to update the documentation.

   This should be fixed one way (= documentation),  or then, as
   it is the *only* function with name Rf_*() in the whole of standalone
   Rmathlib.{so,dynlib} by renaming it back to log1pexp().

2) rnbeta(): This has been in the headers forever, but there has
   not been a corresponding function in R's C code.

   As you, can see, R's  rbeta(*, ncp = v) currently just calls R code,
   and so there was never a need for a C level rnbeta().  OTOH,
   this is a pity/asymmetry, and I had wanted to change this
   (and also add 'rnt' or 'rnf') to the standalone Rmathlib for
   a long time.  The reason this has not happened (yet?):
   Because of vectorization working differently in the current R
   code of the r*(*, ncp=*) functions and the corresponding C
   code, this would lead to different random numbers in this
   case... and so such a change --- to make Rmathlib "complete" ---
   is something to be discussed.

Best regards,
Martin Maechler
ETH Zurich  and  R Core Team


    > William B. Birkett ....
    > .......irkett at doplganger.com

    > 	[[alternative HTML version deleted]]


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Thu Jun  4 06:04:12 2020
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Thu, 4 Jun 2020 12:04:12 +0800
Subject: [Rd] Translations and snprintf on Windows
In-Reply-To: <CAPRVBcx9rZQx7rFQj-a6KK+6LXPi5t_2p0NXte9HAjY9F5tP4g@mail.gmail.com>
References: <CAPRVBcx9rZQx7rFQj-a6KK+6LXPi5t_2p0NXte9HAjY9F5tP4g@mail.gmail.com>
Message-ID: <CAPRVBczmyZJ4y=SF_k6qw2pQ3e=9zP2B1UiE2Py2qy371VvKgw-1294@mail.gmail.com>

Following up on this after Matt D truffled out the issue -- snprintf was a
*bit* of a red herring.

The root of the issue is the use of positional identifiers (like %1$d, see
https://stackoverflow.com/questions/19327441/gcc-dollar-sign-in-printf-format-string)
in the format string for translations.

These identifiers are quite useful for translations since grammar changes
by language mean the inputs should naturally change order when changing
languages -- however, they are a POSIX extension.

snprintf produced the issue since all other messages are ultimately R
functions, and base R handles the issue (AFAICT via trioremap.h).


On Thu, Apr 30, 2020 at 4:16 PM Michael Chirico <michaelchirico4 at gmail.com>
wrote:

> [a bit unsure on if this is maybe better for r-package-devel]
>
> We recently added translations to messages at the R and C level to
> data.table.
>
> At the C level, we did _() wrapping for char arrays supplied to the
> following functions: error, warning, Rprintf, Error, and snprintf.
>
> This seemed OK but the use of snprintf specifically appears to have caused
> a crash on Windows:
>
> https://github.com/Rdatatable/data.table/issues/4402
>
> Is there any guidance against using gettext with snprintf, or perhaps
> guidance on which "outputters" *are* OK for translation?
>
> Michael Chirico
>

	[[alternative HTML version deleted]]


From pd@me@ @end|ng |rom cb@@dk  Sat Jun  6 10:25:36 2020
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Sat, 6 Jun 2020 08:25:36 +0000
Subject: [Rd] R 4.0.1 is released
Message-ID: <E3CC9F48-B248-43DF-82A5-E51EFDD0BFDD@cbs.dk>

The build system rolled up R-4.0.1.tar.gz (codename "See Things Now") this morning.

The list below details the changes in this release.

You can get the source code from

http://cran.r-project.org/src/base/R-4/R-4.0.1.tar.gz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course.


For the R Core Team,

Peter Dalgaard

These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = b9c44f9f78cab3184ad9898bebc854b4
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = 4afa171cd982aaa60f0ba92e2e7bc5d6
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = 425fd186ac71e462e66af7fb33f86ab4
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = eb78c4d053ec9c32b815cf0c2ebea801
MD5 (NEWS.2) = 496062c138e2def06cebccddfb814ac6
MD5 (NEWS.3) = 012e7f4a80cc8ec947bf3f0ff6117ec8
MD5 (R-latest.tar.gz) = 8d199d11865c202cf2bd006e7f32dab7
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = 529223fd3ffef95731d0a87353108435
MD5 (THANKS) = 251d20510bfc3cc93b82c5a99f7efcc6
MD5 (VERSION-INFO.dcf) = 7d8af8c338a1e146f9471744d092078a
MD5 (R-4/R-4.0.1.tar.gz) = 8d199d11865c202cf2bd006e7f32dab7

2cde824a7b18958e5f06b391c801c8288be0f84fa8934b7ddefef23c67e60c09  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
eddf87b12197c7b3b19cbc9b11c1beab95b14e3dcd715bf37d2f6a8b2a72c2a1  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
1dfd76a990f2a1b11ee4ff17284d18c2177179ee7bbaef51b32e1e7a58719596  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
12b30c724117b1b2b11484673906a6dcd48a361f69fc420b36194f9218692d01  NEWS.1
e80de410c77f05ff2012fa70051b89119845f734a7fa5c55857e61e4ed7d5f6e  NEWS.2
7201d139947afa52b5e09d26dc01445edf444506264355b2185122bc1ed3dce0  NEWS.3
95fe24a4d8d8f8f888460c8f5fe4311cec656e7a1722d233218bc03861bc6f32  R-latest.tar.gz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
408737572ecc6e1135fdb2cf7a9dbb1a6cb27967c757f1771b8c39d1fd2f1ab9  RESOURCES
c9c7cb32308b4e560a22c858819ade9de524a602abd4e92d1c328c89f8037d73  THANKS
d3cdccb1b1645fce356d08892baa0587aa2aef2e851ad552d47cce856137d9b3  VERSION-INFO.dcf
95fe24a4d8d8f8f888460c8f5fe4311cec656e7a1722d233218bc03861bc6f32  R-4/R-4.0.1.tar.gz

This is the relevant part of the NEWS file

CHANGES IN R 4.0.1:

  NEW FEATURES:

    * paste() and paste0() gain a new optional argument recycle0.  When
      set to true, zero-length arguments are recycled leading to
      character(0) after the sep-concatenation, i.e., to the empty
      string "" if collapse is a string and to the zero-length value
      character(0) when collapse = NULL.

      A package whose code uses this should depend on R (>= 4.0.1).

    * The summary(<warnings>) method now maps the counts correctly to
      the warning messages.

  BUG FIXES:

    * aov(frml, ...) now also works where the formula deparses to more
      than 500 characters, thanks to a report and patch proposal by Jan
      Hauffa.

    * Fix a dozen places (code, examples) as Sys.setlocale() returns
      the new rather than the previous setting.

    * Fix for adding two complex grid units via sum().  Thanks to Gu
      Zuguang for the report and Thomas Lin Pedersen for the patch.

    * Fix parallel::mclapply(..., mc.preschedule=FALSE) to handle raw
      vector results correctly. PR#17779

    * Computing the base value, i.e., 2, "everywhere", now uses
      FLT_RADIX, as the original machar code looped indefinitely on the
      ppc64 architecture for the longdouble case.

    * In R 4.0.0, sort.list(x) when is.object(x) was true, e.g., for x
      <- I(letters), was accidentally using method = "radix".
      Consequently, e.g., merge(<data.frame>) was much slower than
      previously; reported in PR#17794.

    * plot(y ~ x, ylab = quote(y[i])) now works, as e.g., for xlab;
      related to PR#10525.

    * parallel::detect.cores(all.tests = TRUE) tries a matching OS name
      before the other tests (which were intended only for unknown
      OSes).

    * Parse data for raw strings is now recorded correctly. Reported by
      Gabor Csardi.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Sat Jun  6 09:04:26 2020
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Sat, 06 Jun 2020 09:04:26 +0200
Subject: [Rd] install.packages(): About an option for installing archived
 versions
Message-ID: <8144BB12-0875-463E-8844-EDD216EF6285@gmail.com>

Dear list,

Various helpers exist in the wild to install older archived versions of 
CRAN packages, for example `remotes::install_version() ` or 
`versions::install.version()`.
The former makes use of an ?archive.rds? file stored in the CRAN 
/Meta directory: 
https://github.com/r-lib/remotes/blob/9b5dc29102a486df2f42c88bb19027a7cd54a721/R/install-version.R#L68

Given its existence, I was wondering why there is no official support in 
`install.packages()`?
I was browsing the mailing archives of r-devel but surprisingly could 
not find a previous discussion about it.
`remotes::install_version()` only uses the tarballs and enforces 
installation from source.
If it?s due to dependency issues, i.e. that there is no guarantee that 
older versions work with the current versions of CRAN packages, then the 
availability of downloading and installing the tarballs manually from 
the Archive web page could also be questioned per se.
I think people know that they are on their own in this situation and 
that there is no guarantee for archived versions to function properly, 
especially of one goes back substantially in time.
A simple note in ?install.packages() could further clarify this.

A few questions:

- Does an archive for older binaries exist for CRAN packages?
- How is CRAN creating ?archive.rds??
- Would a PR adding this functionality to `install.packages()` be 
accepted by R-core?

Patrick

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Jun  6 15:39:06 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 6 Jun 2020 09:39:06 -0400
Subject: [Rd] 
 install.packages(): About an option for installing archived versions
In-Reply-To: <8144BB12-0875-463E-8844-EDD216EF6285@gmail.com>
References: <8144BB12-0875-463E-8844-EDD216EF6285@gmail.com>
Message-ID: <0be54bc5-f987-8c93-2376-28ec2ff293d8@gmail.com>

On 06/06/2020 3:04 a.m., Patrick Schratz wrote:
> Dear list,
> 
> Various helpers exist in the wild to install older archived versions of
> CRAN packages, for example `remotes::install_version() ` or
> `versions::install.version()`.
> The former makes use of an ?archive.rds? file stored in the CRAN
> /Meta directory:
> https://github.com/r-lib/remotes/blob/9b5dc29102a486df2f42c88bb19027a7cd54a721/R/install-version.R#L68
> 
> Given its existence, I was wondering why there is no official support in
> `install.packages()`?

Because it's not needed?  Some functions belong in base packages because 
they require access to R internals that aren't available to contributed 
packages.  Other functions support those:  base packages can't depend on 
non-base packages.  And finally, some functions are there because some R 
core member thought they'd be a good idea, and was willing to commit to 
supporting them.

Your suggestion doesn't fit the first two reasons, and I can't see any 
current R core member wanting to take on extra work unnecessarily.

A bit more inline below...


> I was browsing the mailing archives of r-devel but surprisingly could
> not find a previous discussion about it.
> `remotes::install_version()` only uses the tarballs and enforces
> installation from source.
> If it?s due to dependency issues, i.e. that there is no guarantee that
> older versions work with the current versions of CRAN packages, then the
> availability of downloading and installing the tarballs manually from
> the Archive web page could also be questioned per se.
> I think people know that they are on their own in this situation and
> that there is no guarantee for archived versions to function properly,
> especially of one goes back substantially in time.
> A simple note in ?install.packages() could further clarify this.
> 
> A few questions:
> 
> - Does an archive for older binaries exist for CRAN packages?

No, nothing like that is maintained.  CRAN keeps binaries for the 
previous version but not indefinitely.

> - How is CRAN creating ?archive.rds??
> - Would a PR adding this functionality to `install.packages()` be
> accepted by R-core?

R isn't maintained on Github so a PR wouldn't make sense, but I also 
doubt the submission of an svn patch would be acted on unless you come 
up with some strong arguments about why remotes::install_version doesn't 
work properly and can't be fixed by its authors.

Duncan Murdoch

> 
> Patrick
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Sat Jun  6 16:02:00 2020
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Sat, 06 Jun 2020 16:02:00 +0200
Subject: [Rd] 
 install.packages(): About an option for installing archived versions
In-Reply-To: <0be54bc5-f987-8c93-2376-28ec2ff293d8@gmail.com>
References: <8144BB12-0875-463E-8844-EDD216EF6285@gmail.com>
 <0be54bc5-f987-8c93-2376-28ec2ff293d8@gmail.com>
Message-ID: <DCC89A5D-9D0A-4F20-9EC6-A020DA14B2DB@gmail.com>

Duncan,

I am not sure if my arguing was understood given your reply.
First, I was arguing about the existence of the `archive.rds` metadata 
file, maintained by CRAN - not the existence of 
`remotes::install_version()` as a reason for this idea.
Second, `install.packages()` is a function accessing both R core and 
contributed packages, with CRAN being the default repository for the 
latter.
I do not understand the part with the R internals - what does this have 
to do with installing older versions of both core and contributed 
packages?

> I can't see any current R core member wanting to take on extra work 
> unnecessarily.

What kind of work would be unnecessarily here? The existence of such a 
function in a contributed package? (Just to understand your point here)

> R isn't maintained on Github so a PR wouldn't make sense, but I also 
> doubt the submission of an svn patch would be acted on unless you come 
> up with some strong arguments about why remotes::install_version 
> doesn't work properly and can't be fixed by its authors.

I know that R is not maintained on GH. "PR" was just a developer term 
referring to a "patch" as its called by some. Even though a "patch" 
sounds more close to "bugfix" than to a general "contribution" meaning.

Also again, `remotes::install_version()` is fine.
However, in my view, this functionality should be part of 
`install.packages()` with a simple argument `version`.
I am not sure if you mean to argue that due to the existence of 
contributed packages, no additions to base R need to be made (anymore).
Following this thinking, base R packages could be retired since there 
are alternatives (often more user-friendly and robust ones) for almost 
every base R function nowadays.

The main advantage of base R is its stability and the fact that it comes 
with the R installation per se.
It often does not shine in terms of user-friendliness or 
type-safetiness.
IMO it would be great to have one function for installing packages (i.e. 
`install.packages()`) that is somewhat flexible, removing the need for 
multiple contributed functions in other packages to solve this every-day 
task.

Also right now I am feeling a bit more like "sorry for asking" instead 
of "hey thanks for contributing - this is a valid question and here are 
our arguments". I am sure many people have had this thought/idea already 
and weren't self confident enough to ask/discuss this.

Thanks for your reply again, appreciated. Maybe the discussion can go on 
a bit, shining a bit more light on this issue.

Patrick

On 6 Jun 2020, at 15:39, Duncan Murdoch wrote:

> On 06/06/2020 3:04 a.m., Patrick Schratz wrote:
>> Dear list,
>>
>> Various helpers exist in the wild to install older archived versions 
>> of
>> CRAN packages, for example `remotes::install_version() ` or
>> `versions::install.version()`.
>> The former makes use of an ?archive.rds? file stored in the CRAN
>> /Meta directory:
>> https://github.com/r-lib/remotes/blob/9b5dc29102a486df2f42c88bb19027a7cd54a721/R/install-version.R#L68
>>
>> Given its existence, I was wondering why there is no official support 
>> in
>> `install.packages()`?
>
> Because it's not needed?  Some functions belong in base packages 
> because they require access to R internals that aren't available to 
> contributed packages.  Other functions support those:  base packages 
> can't depend on non-base packages.  And finally, some functions are 
> there because some R core member thought they'd be a good idea, and 
> was willing to commit to supporting them.
>
> Your suggestion doesn't fit the first two reasons, and I can't see any 
> current R core member wanting to take on extra work unnecessarily.
>
> A bit more inline below...
>
>
>> I was browsing the mailing archives of r-devel but surprisingly could
>> not find a previous discussion about it.
>> `remotes::install_version()` only uses the tarballs and enforces
>> installation from source.
>> If it?s due to dependency issues, i.e. that there is no guarantee 
>> that
>> older versions work with the current versions of CRAN packages, then 
>> the
>> availability of downloading and installing the tarballs manually from
>> the Archive web page could also be questioned per se.
>> I think people know that they are on their own in this situation and
>> that there is no guarantee for archived versions to function 
>> properly,
>> especially of one goes back substantially in time.
>> A simple note in ?install.packages() could further clarify this.
>>
>> A few questions:
>>
>> - Does an archive for older binaries exist for CRAN packages?
>
> No, nothing like that is maintained.  CRAN keeps binaries for the 
> previous version but not indefinitely.
>
>> - How is CRAN creating ?archive.rds??
>> - Would a PR adding this functionality to `install.packages()` be
>> accepted by R-core?
>
> R isn't maintained on Github so a PR wouldn't make sense, but I also 
> doubt the submission of an svn patch would be acted on unless you come 
> up with some strong arguments about why remotes::install_version 
> doesn't work properly and can't be fixed by its authors.
>
> Duncan Murdoch
>
>>
>> Patrick
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Sat Jun  6 21:06:05 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 6 Jun 2020 14:06:05 -0500
Subject: [Rd] Change in package.skeleton behavior from R 3.6.3 to R 4.0.0 ?
Message-ID: <24283.59677.373606.9673@rob.eddelbuettel.com>


The Rcpp package and some related packages such as RcppArmadillo make use of
(local) wrappers around the utils::package.skeleton() function for creating
(basic yet functional) packages using Rcpp or RcppArmadillo. RStudio also
exposes this under the graphical menu as a nice way to construct a package.

But it seems that something changed quite recently in R. I looked into this a
little yesterday and prepared a workaround for Rcpp; Kevin (CC'ed) was more
diligent and found what changed with R itself. See the discussion under issue
ticket #1087 at the Rcpp repo: https://github.com/RcppCore/Rcpp/issues/1087
The proposed simple PR is at https://github.com/RcppCore/Rcpp/pull/1088

As Kevin mentions in #1087, R itself may have changed, and he even dug up a
possible commit [1]. One can illustrate that quickly with two different R
interpreters, I use Docker here because that's what I often do. I apologise
for the long command-line; that is basically just common Docker arguments.
The keys are r-base:3.6.3 and r-base:4.0.0 for selecting the relevant R
builds, and the command string passed to bash to call Rscript and
package.skeleton() followed by a cat of the NAMESPACE file.

-----------------------------------------------------------------------------
edd at rob:/tmp$ mkdir skeleton
edd at rob:/tmp$ cd skeleton/
edd at rob:/tmp/skeleton$ docker run --rm -ti -u1000:1000 -v ${PWD}:/mnt -w /mnt r-base:3.6.3 bash -c "Rscript -e 'x <-1L; package.skeleton(name=\"p363\")'; cat p363/NAMESPACE"
Creating directories ...
Creating DESCRIPTION ...
Creating NAMESPACE ...
Creating Read-and-delete-me ...
Saving functions and data ...
Making help files ...
Done.
Further steps are described in './p363/Read-and-delete-me'.
exportPattern("^[[:alpha:]]+")
edd at rob:/tmp/skeleton$ docker run --rm -ti -u1000:1000 -v ${PWD}:/mnt -w /mnt r-base:4.0.0 bash -c "Rscript -e 'x <-1L; package.skeleton(name=\"p400\")'; cat p400/NAMESPACE"
Creating directories ...
Creating DESCRIPTION ...
Creating NAMESPACE ...
Creating Read-and-delete-me ...
Saving functions and data ...
Making help files ...
Done.
Further steps are described in './p400/Read-and-delete-me'.
export("x")
edd at rob:/tmp/skeleton$ 
-----------------------------------------------------------------------------

In short, 4.0.0 no longer exports via 'exportPattern("^[[:alpha:]]+")'
rendering the new package created non-functional. 

Was this intentional, or is this a bug we can look into fixing for R 4.0.2 ?

Dirk


[1] This uses the GitHub mirror rather than svn but the underlying code is of
course the same
https://github.com/wch/r-source/commit/36b27d951fb355f268191a25909ab292a273932d#diff-a1b94fcea8b8818d4371aabf04dc2b3c 

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Jun  6 21:44:29 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 6 Jun 2020 15:44:29 -0400
Subject: [Rd] 
 Change in package.skeleton behavior from R 3.6.3 to R 4.0.0 ?
In-Reply-To: <24283.59677.373606.9673@rob.eddelbuettel.com>
References: <24283.59677.373606.9673@rob.eddelbuettel.com>
Message-ID: <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>

On 06/06/2020 3:06 p.m., Dirk Eddelbuettel wrote:
> 
> The Rcpp package and some related packages such as RcppArmadillo make use of
> (local) wrappers around the utils::package.skeleton() function for creating
> (basic yet functional) packages using Rcpp or RcppArmadillo. RStudio also
> exposes this under the graphical menu as a nice way to construct a package.
> 
> But it seems that something changed quite recently in R. I looked into this a
> little yesterday and prepared a workaround for Rcpp; Kevin (CC'ed) was more
> diligent and found what changed with R itself. See the discussion under issue
> ticket #1087 at the Rcpp repo: https://github.com/RcppCore/Rcpp/issues/1087
> The proposed simple PR is at https://github.com/RcppCore/Rcpp/pull/1088
> 
> As Kevin mentions in #1087, R itself may have changed, and he even dug up a
> possible commit [1]. One can illustrate that quickly with two different R
> interpreters, I use Docker here because that's what I often do. I apologise
> for the long command-line; that is basically just common Docker arguments.
> The keys are r-base:3.6.3 and r-base:4.0.0 for selecting the relevant R
> builds, and the command string passed to bash to call Rscript and
> package.skeleton() followed by a cat of the NAMESPACE file.
> 
> -----------------------------------------------------------------------------
> edd at rob:/tmp$ mkdir skeleton
> edd at rob:/tmp$ cd skeleton/
> edd at rob:/tmp/skeleton$ docker run --rm -ti -u1000:1000 -v ${PWD}:/mnt -w /mnt r-base:3.6.3 bash -c "Rscript -e 'x <-1L; package.skeleton(name=\"p363\")'; cat p363/NAMESPACE"
> Creating directories ...
> Creating DESCRIPTION ...
> Creating NAMESPACE ...
> Creating Read-and-delete-me ...
> Saving functions and data ...
> Making help files ...
> Done.
> Further steps are described in './p363/Read-and-delete-me'.
> exportPattern("^[[:alpha:]]+")
> edd at rob:/tmp/skeleton$ docker run --rm -ti -u1000:1000 -v ${PWD}:/mnt -w /mnt r-base:4.0.0 bash -c "Rscript -e 'x <-1L; package.skeleton(name=\"p400\")'; cat p400/NAMESPACE"
> Creating directories ...
> Creating DESCRIPTION ...
> Creating NAMESPACE ...
> Creating Read-and-delete-me ...
> Saving functions and data ...
> Making help files ...
> Done.
> Further steps are described in './p400/Read-and-delete-me'.
> export("x")
> edd at rob:/tmp/skeleton$
> -----------------------------------------------------------------------------
> 
> In short, 4.0.0 no longer exports via 'exportPattern("^[[:alpha:]]+")'
> rendering the new package created non-functional.
> 
> Was this intentional, or is this a bug we can look into fixing for R 4.0.2 ?

It's in the NEWS, so I'd assume it was intentional:

  - package.skeleton() now explicitly lists all exports in the 
?NAMESPACE? file.

An earlier version of that message even showed up in the link you posted.

Duncan Murdoch

> 
> Dirk
> 
> 
> [1] This uses the GitHub mirror rather than svn but the underlying code is of
> course the same
> https://github.com/wch/r-source/commit/36b27d951fb355f268191a25909ab292a273932d#diff-a1b94fcea8b8818d4371aabf04dc2b3c
>


From edd @end|ng |rom deb|@n@org  Sat Jun  6 21:51:48 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 6 Jun 2020 14:51:48 -0500
Subject: [Rd] 
 Change in package.skeleton behavior from R 3.6.3 to R 4.0.0 ?
In-Reply-To: <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>
References: <24283.59677.373606.9673@rob.eddelbuettel.com>
 <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>
Message-ID: <24283.62420.260823.850356@rob.eddelbuettel.com>


On 6 June 2020 at 15:44, Duncan Murdoch wrote:
| On 06/06/2020 3:06 p.m., Dirk Eddelbuettel wrote:
| > 
| > The Rcpp package and some related packages such as RcppArmadillo make use of
| > (local) wrappers around the utils::package.skeleton() function for creating
| > (basic yet functional) packages using Rcpp or RcppArmadillo. RStudio also
| > exposes this under the graphical menu as a nice way to construct a package.
| > 
| > But it seems that something changed quite recently in R. I looked into this a
| > little yesterday and prepared a workaround for Rcpp; Kevin (CC'ed) was more
| > diligent and found what changed with R itself. See the discussion under issue
| > ticket #1087 at the Rcpp repo: https://github.com/RcppCore/Rcpp/issues/1087
| > The proposed simple PR is at https://github.com/RcppCore/Rcpp/pull/1088
| > 
| > As Kevin mentions in #1087, R itself may have changed, and he even dug up a
| > possible commit [1]. One can illustrate that quickly with two different R
| > interpreters, I use Docker here because that's what I often do. I apologise
| > for the long command-line; that is basically just common Docker arguments.
| > The keys are r-base:3.6.3 and r-base:4.0.0 for selecting the relevant R
| > builds, and the command string passed to bash to call Rscript and
| > package.skeleton() followed by a cat of the NAMESPACE file.
| > 
| > -----------------------------------------------------------------------------
| > edd at rob:/tmp$ mkdir skeleton
| > edd at rob:/tmp$ cd skeleton/
| > edd at rob:/tmp/skeleton$ docker run --rm -ti -u1000:1000 -v ${PWD}:/mnt -w /mnt r-base:3.6.3 bash -c "Rscript -e 'x <-1L; package.skeleton(name=\"p363\")'; cat p363/NAMESPACE"
| > Creating directories ...
| > Creating DESCRIPTION ...
| > Creating NAMESPACE ...
| > Creating Read-and-delete-me ...
| > Saving functions and data ...
| > Making help files ...
| > Done.
| > Further steps are described in './p363/Read-and-delete-me'.
| > exportPattern("^[[:alpha:]]+")
| > edd at rob:/tmp/skeleton$ docker run --rm -ti -u1000:1000 -v ${PWD}:/mnt -w /mnt r-base:4.0.0 bash -c "Rscript -e 'x <-1L; package.skeleton(name=\"p400\")'; cat p400/NAMESPACE"
| > Creating directories ...
| > Creating DESCRIPTION ...
| > Creating NAMESPACE ...
| > Creating Read-and-delete-me ...
| > Saving functions and data ...
| > Making help files ...
| > Done.
| > Further steps are described in './p400/Read-and-delete-me'.
| > export("x")
| > edd at rob:/tmp/skeleton$
| > -----------------------------------------------------------------------------
| > 
| > In short, 4.0.0 no longer exports via 'exportPattern("^[[:alpha:]]+")'
| > rendering the new package created non-functional.
| > 
| > Was this intentional, or is this a bug we can look into fixing for R 4.0.2 ?
| 
| It's in the NEWS, so I'd assume it was intentional:
| 
|   - package.skeleton() now explicitly lists all exports in the 
| ?NAMESPACE? file.
| 
| An earlier version of that message even showed up in the link you posted.

My bad. I usually look there first too.

In which case the change is going to stay, so my quick adjustment to Rcpp
should be fine too.

Thanks for the prompt response.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Jun  6 21:53:53 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 6 Jun 2020 15:53:53 -0400
Subject: [Rd] 
 Change in package.skeleton behavior from R 3.6.3 to R 4.0.0 ?
In-Reply-To: <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>
References: <24283.59677.373606.9673@rob.eddelbuettel.com>
 <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>
Message-ID: <2f768fa0-512c-2cbb-7bd2-30dda5b08b39@gmail.com>

On 06/06/2020 3:44 p.m., Duncan Murdoch wrote:
> On 06/06/2020 3:06 p.m., Dirk Eddelbuettel wrote:
  ... [deletions]
>> In short, 4.0.0 no longer exports via 'exportPattern("^[[:alpha:]]+")'
>> rendering the new package created non-functional.
>>
>> Was this intentional, or is this a bug we can look into fixing for R 4.0.2 ?
> 
> It's in the NEWS, so I'd assume it was intentional:
> 
>    - package.skeleton() now explicitly lists all exports in the
> ?NAMESPACE? file.
> 
> An earlier version of that message even showed up in the link you posted.

Something else in that link is presented more obviously in the svn log 
entry:

r76945 | hornik | 2019-08-10 04:13:48 -0400 (Sat, 10 Aug 2019) | 1 line
Changed paths:
    M /trunk/doc/NEWS.Rd
    M /trunk/src/library/utils/R/package.skeleton.R

Have package.skeleton() explicitly list all exports.

This change happened in August, 2019, about 10 months ago.  Perhaps this 
message asking people to test R-devel is relevant:

https://stat.ethz.ch/pipermail/r-devel/2020-May/079484.html

Duncan Murdoch


From edd @end|ng |rom deb|@n@org  Sat Jun  6 22:14:21 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 6 Jun 2020 15:14:21 -0500
Subject: [Rd] 
 Change in package.skeleton behavior from R 3.6.3 to R 4.0.0 ?
In-Reply-To: <2f768fa0-512c-2cbb-7bd2-30dda5b08b39@gmail.com>
References: <24283.59677.373606.9673@rob.eddelbuettel.com>
 <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>
 <2f768fa0-512c-2cbb-7bd2-30dda5b08b39@gmail.com>
Message-ID: <24283.63773.386547.279873@rob.eddelbuettel.com>


On 6 June 2020 at 15:53, Duncan Murdoch wrote:
| This change happened in August, 2019, about 10 months ago.  Perhaps this 
| message asking people to test R-devel is relevant:
| 
| https://stat.ethz.ch/pipermail/r-devel/2020-May/079484.html

Touche :) And fully agree. Rcpp's unit tests covered Rcpp.package.skeleton()
since about 2013. I have been keeping a local 'RD' build of R-devel in
/usr/local/ for much longer to test both r-release and r-devel.  But test
coverage is never full or complete, and what bit me here during a live demo
(now at [1]) was the equivalent functionality tickled with from RStudio with
similar-but-not-identical code.

And that part is certainly NOT contained in the unit tests. Can't win'em
all. Still my bad for not checking NEWS, and bad luck this change did not get
tickled by the many Rcpp tests runs here since the change was made.

Dirk

[1] https://www.youtube.com/watch?v=1Zap6j1uUyw
-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Jun  7 00:05:40 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 6 Jun 2020 18:05:40 -0400
Subject: [Rd] 
 Change in package.skeleton behavior from R 3.6.3 to R 4.0.0 ?
In-Reply-To: <24283.63773.386547.279873@rob.eddelbuettel.com>
References: <24283.59677.373606.9673@rob.eddelbuettel.com>
 <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>
 <2f768fa0-512c-2cbb-7bd2-30dda5b08b39@gmail.com>
 <24283.63773.386547.279873@rob.eddelbuettel.com>
Message-ID: <0e39d97a-e236-e7c4-c28c-4da295f9faf9@gmail.com>

On 06/06/2020 4:14 p.m., Dirk Eddelbuettel wrote:
> 
> On 6 June 2020 at 15:53, Duncan Murdoch wrote:
> | This change happened in August, 2019, about 10 months ago.  Perhaps this
> | message asking people to test R-devel is relevant:
> |
> | https://stat.ethz.ch/pipermail/r-devel/2020-May/079484.html
> 
> Touche :) And fully agree. Rcpp's unit tests covered Rcpp.package.skeleton()
> since about 2013. I have been keeping a local 'RD' build of R-devel in
> /usr/local/ for much longer to test both r-release and r-devel.  But test
> coverage is never full or complete, and what bit me here during a live demo
> (now at [1]) was the equivalent functionality tickled with from RStudio with
> similar-but-not-identical code.
> 
> And that part is certainly NOT contained in the unit tests. Can't win'em
> all. Still my bad for not checking NEWS, and bad luck this change did not get
> tickled by the many Rcpp tests runs here since the change was made.

The trouble with tests is that they make you think you've tested the 
code, and we all know that's impossible.

Duncan


From j|ox @end|ng |rom mcm@@ter@c@  Sun Jun  7 03:13:14 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Sun, 7 Jun 2020 01:13:14 +0000
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
Message-ID: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>

Hi,

The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:

--------------------- snip --------------------
library("tcltk")
tt <- tktoplevel()
label.widget <- tklabel(tt, text = "Hello, World!")
button.widget <- tkbutton(tt, text = "Push", 
	 command = function()cat("OW!\n"))
tkpack(label.widget, button.widget) # geometry manager
--------------------- snip --------------------

Session info (prior to the crash):

--------------------- snip --------------------
> sessionInfo()
R version 4.0.1 (2020-06-06)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18363)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252 
[2] LC_CTYPE=English_United States.1252   
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C                          
[5] LC_TIME=English_United States.1252    

attached base packages:
[1] tcltk     stats     graphics  grDevices utils     datasets  methods  
[8] base     

loaded via a namespace (and not attached):
[1] compiler_4.0.1 tools_4.0.1   
--------------------- snip --------------------

I observe this behaviour both in the Rgui and when I run R in a terminal. I think the problem is general to the use of the tcltk package.

Best,
 John

-----------------------------------------------------------------
John Fox
Professor Emeritus
McMaster University
Hamilton, Ontario, Canada
Web: https://socialsciences.mcmaster.ca/jfox/


From pd@|gd @end|ng |rom gm@||@com  Sun Jun  7 08:27:06 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 7 Jun 2020 08:27:06 +0200
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
Message-ID: <48ABB4AC-8823-4FB3-B730-9E0F2A5EE5DA@gmail.com>

Not happening on Mac, so likely a Windows build issue.

(There's no 4.0.1 CRAN package yet, and no nightly build of 4.0.1 Patched, but the only thing changed in the sources since r78644 is the VERSION file.)

-pd

> On 7 Jun 2020, at 03:13 , Fox, John <jfox at mcmaster.ca> wrote:
> 
> Hi,
> 
> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
> 
> --------------------- snip --------------------
> library("tcltk")
> tt <- tktoplevel()
> label.widget <- tklabel(tt, text = "Hello, World!")
> button.widget <- tkbutton(tt, text = "Push", 
> 	 command = function()cat("OW!\n"))
> tkpack(label.widget, button.widget) # geometry manager
> --------------------- snip --------------------
> 
> Session info (prior to the crash):
> 
> --------------------- snip --------------------
>> sessionInfo()
> R version 4.0.1 (2020-06-06)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18363)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=English_United States.1252 
> [2] LC_CTYPE=English_United States.1252   
> [3] LC_MONETARY=English_United States.1252
> [4] LC_NUMERIC=C                          
> [5] LC_TIME=English_United States.1252    
> 
> attached base packages:
> [1] tcltk     stats     graphics  grDevices utils     datasets  methods  
> [8] base     
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.0.1 tools_4.0.1   
> --------------------- snip --------------------
> 
> I observe this behaviour both in the Rgui and when I run R in a terminal. I think the problem is general to the use of the tcltk package.
> 
> Best,
> John
> 
> -----------------------------------------------------------------
> John Fox
> Professor Emeritus
> McMaster University
> Hamilton, Ontario, Canada
> Web: https://socialsciences.mcmaster.ca/jfox/
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Sun Jun  7 08:33:55 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 7 Jun 2020 08:33:55 +0200
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <48ABB4AC-8823-4FB3-B730-9E0F2A5EE5DA@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <48ABB4AC-8823-4FB3-B730-9E0F2A5EE5DA@gmail.com>
Message-ID: <02AC5B27-E63C-4586-9A56-E7CC897F9DA5@gmail.com>

Just to be clear, I was talking about Mac binary packages. The one available and tested was 

R-4.0-branch
4.0.1 RC
(2020/05/30, r78644)

from mac.r-project.org. (Simon Urbanek out of office for the weekend, I suppose.)

-pd

> On 7 Jun 2020, at 08:27 , peter dalgaard <pdalgd at gmail.com> wrote:
> 
> Not happening on Mac, so likely a Windows build issue.
> 
> (There's no 4.0.1 CRAN package yet, and no nightly build of 4.0.1 Patched, but the only thing changed in the sources since r78644 is the VERSION file.)
> 
> -pd
> 
>> On 7 Jun 2020, at 03:13 , Fox, John <jfox at mcmaster.ca> wrote:
>> 
>> Hi,
>> 
>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>> 
>> --------------------- snip --------------------
>> library("tcltk")
>> tt <- tktoplevel()
>> label.widget <- tklabel(tt, text = "Hello, World!")
>> button.widget <- tkbutton(tt, text = "Push", 
>> 	 command = function()cat("OW!\n"))
>> tkpack(label.widget, button.widget) # geometry manager
>> --------------------- snip --------------------
>> 
>> Session info (prior to the crash):
>> 
>> --------------------- snip --------------------
>>> sessionInfo()
>> R version 4.0.1 (2020-06-06)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18363)
>> 
>> Matrix products: default
>> 
>> locale:
>> [1] LC_COLLATE=English_United States.1252 
>> [2] LC_CTYPE=English_United States.1252   
>> [3] LC_MONETARY=English_United States.1252
>> [4] LC_NUMERIC=C                          
>> [5] LC_TIME=English_United States.1252    
>> 
>> attached base packages:
>> [1] tcltk     stats     graphics  grDevices utils     datasets  methods  
>> [8] base     
>> 
>> loaded via a namespace (and not attached):
>> [1] compiler_4.0.1 tools_4.0.1   
>> --------------------- snip --------------------
>> 
>> I observe this behaviour both in the Rgui and when I run R in a terminal. I think the problem is general to the use of the tcltk package.
>> 
>> Best,
>> John
>> 
>> -----------------------------------------------------------------
>> John Fox
>> Professor Emeritus
>> McMaster University
>> Hamilton, Ontario, Canada
>> Web: https://socialsciences.mcmaster.ca/jfox/
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Sun Jun  7 08:44:02 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 7 Jun 2020 08:44:02 +0200
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <48ABB4AC-8823-4FB3-B730-9E0F2A5EE5DA@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <48ABB4AC-8823-4FB3-B730-9E0F2A5EE5DA@gmail.com>
Message-ID: <64EE38E1-9E92-48F6-A031-5D9345F133F5@gmail.com>

John,

The Windows installation instructions document has the following. So, one obvious question is whether you did select it. (I haven't installed on WIndows for ages, so I don't know whether this was changed recently or even whether the selection is on or off by default).

-pd

Using package tcltk
===================

The package tcltk supports building graphical interfaces with Tcl/Tk.
"Support Files for Package tcltk" needs to be selected from the
installer for this to work; alternatively you can use an existing
installation of Tcl/Tk 8.6.x by following the instructions in the
rw-FAQ.




> On 7 Jun 2020, at 08:27 , peter dalgaard <pdalgd at gmail.com> wrote:
> 
> Not happening on Mac, so likely a Windows build issue.
> 
> (There's no 4.0.1 CRAN package yet, and no nightly build of 4.0.1 Patched, but the only thing changed in the sources since r78644 is the VERSION file.)
> 
> -pd
> 
>> On 7 Jun 2020, at 03:13 , Fox, John <jfox at mcmaster.ca> wrote:
>> 
>> Hi,
>> 
>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>> 
>> --------------------- snip --------------------
>> library("tcltk")
>> tt <- tktoplevel()
>> label.widget <- tklabel(tt, text = "Hello, World!")
>> button.widget <- tkbutton(tt, text = "Push", 
>> 	 command = function()cat("OW!\n"))
>> tkpack(label.widget, button.widget) # geometry manager
>> --------------------- snip --------------------
>> 
>> Session info (prior to the crash):
>> 
>> --------------------- snip --------------------
>>> sessionInfo()
>> R version 4.0.1 (2020-06-06)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18363)
>> 
>> Matrix products: default
>> 
>> locale:
>> [1] LC_COLLATE=English_United States.1252 
>> [2] LC_CTYPE=English_United States.1252   
>> [3] LC_MONETARY=English_United States.1252
>> [4] LC_NUMERIC=C                          
>> [5] LC_TIME=English_United States.1252    
>> 
>> attached base packages:
>> [1] tcltk     stats     graphics  grDevices utils     datasets  methods  
>> [8] base     
>> 
>> loaded via a namespace (and not attached):
>> [1] compiler_4.0.1 tools_4.0.1   
>> --------------------- snip --------------------
>> 
>> I observe this behaviour both in the Rgui and when I run R in a terminal. I think the problem is general to the use of the tcltk package.
>> 
>> Best,
>> John
>> 
>> -----------------------------------------------------------------
>> John Fox
>> Professor Emeritus
>> McMaster University
>> Hamilton, Ontario, Canada
>> Web: https://socialsciences.mcmaster.ca/jfox/
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From j|ox @end|ng |rom mcm@@ter@c@  Sun Jun  7 15:46:12 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Sun, 7 Jun 2020 13:46:12 +0000
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <64EE38E1-9E92-48F6-A031-5D9345F133F5@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <48ABB4AC-8823-4FB3-B730-9E0F2A5EE5DA@gmail.com>
 <64EE38E1-9E92-48F6-A031-5D9345F133F5@gmail.com>
Message-ID: <4091E9FB-BD75-46D2-ADBE-AF30F52D90DD@mcmaster.ca>

Dear Peter,

First, thank you for following up on this problem.

Unless I somehow inexplicably missed it, as I just confirmed, the R 4.0.1 Windows installer *doesn't* ask to install support files for Tcl/Tk.

Nor am I only one to notice this problem. I was made aware of it when several Rcmdr users wrote to me yesterday to say that the package was crashing R when it loads.

Finally, even if Tcl/Tk support is now a non-default option in R for Windows, R shouldn't crash if Tcl/Tk isn't installed.

Best,
 John

> On Jun 7, 2020, at 2:44 AM, peter dalgaard <pdalgd at gmail.com> wrote:
> 
> John,
> 
> The Windows installation instructions document has the following. So, one obvious question is whether you did select it. (I haven't installed on WIndows for ages, so I don't know whether this was changed recently or even whether the selection is on or off by default).
> 
> -pd
> 
> Using package tcltk
> ===================
> 
> The package tcltk supports building graphical interfaces with Tcl/Tk.
> "Support Files for Package tcltk" needs to be selected from the
> installer for this to work; alternatively you can use an existing
> installation of Tcl/Tk 8.6.x by following the instructions in the
> rw-FAQ.
> 
> 
> 
> 
>> On 7 Jun 2020, at 08:27 , peter dalgaard <pdalgd at gmail.com> wrote:
>> 
>> Not happening on Mac, so likely a Windows build issue.
>> 
>> (There's no 4.0.1 CRAN package yet, and no nightly build of 4.0.1 Patched, but the only thing changed in the sources since r78644 is the VERSION file.)
>> 
>> -pd
>> 
>>> On 7 Jun 2020, at 03:13 , Fox, John <jfox at mcmaster.ca> wrote:
>>> 
>>> Hi,
>>> 
>>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>>> 
>>> --------------------- snip --------------------
>>> library("tcltk")
>>> tt <- tktoplevel()
>>> label.widget <- tklabel(tt, text = "Hello, World!")
>>> button.widget <- tkbutton(tt, text = "Push", 
>>> 	 command = function()cat("OW!\n"))
>>> tkpack(label.widget, button.widget) # geometry manager
>>> --------------------- snip --------------------
>>> 
>>> Session info (prior to the crash):
>>> 
>>> --------------------- snip --------------------
>>>> sessionInfo()
>>> R version 4.0.1 (2020-06-06)
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> Running under: Windows 10 x64 (build 18363)
>>> 
>>> Matrix products: default
>>> 
>>> locale:
>>> [1] LC_COLLATE=English_United States.1252 
>>> [2] LC_CTYPE=English_United States.1252   
>>> [3] LC_MONETARY=English_United States.1252
>>> [4] LC_NUMERIC=C                          
>>> [5] LC_TIME=English_United States.1252    
>>> 
>>> attached base packages:
>>> [1] tcltk     stats     graphics  grDevices utils     datasets  methods  
>>> [8] base     
>>> 
>>> loaded via a namespace (and not attached):
>>> [1] compiler_4.0.1 tools_4.0.1   
>>> --------------------- snip --------------------
>>> 
>>> I observe this behaviour both in the Rgui and when I run R in a terminal. I think the problem is general to the use of the tcltk package.
>>> 
>>> Best,
>>> John
>>> 
>>> -----------------------------------------------------------------
>>> John Fox
>>> Professor Emeritus
>>> McMaster University
>>> Hamilton, Ontario, Canada
>>> Web: https://socialsciences.mcmaster.ca/jfox/
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> -- 
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 


From jeroenoom@ @end|ng |rom gm@||@com  Sun Jun  7 16:00:31 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Sun, 7 Jun 2020 16:00:31 +0200
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
Message-ID: <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>

On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>
> Hi,
>
> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>
> --------------------- snip --------------------
> library("tcltk")
> tt <- tktoplevel()
> label.widget <- tklabel(tt, text = "Hello, World!")
> button.widget <- tkbutton(tt, text = "Push",
>          command = function()cat("OW!\n"))
> tkpack(label.widget, button.widget) # geometry manager
> --------------------- snip --------------------


I can reproduce this. The backtrace shows the crash happens in
dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
bug that was introduced by commit 78408/78409 about a month ago. I
think the problem is that this commit changes 'calloc' to 'Calloc'
without changing the corresponding 'free' to 'Free'.

This has nothing to do with the Windows build or installation. Nothing
has changed in the windows build procedure between 4.0.0 and 4.0.1.


From j|ox @end|ng |rom mcm@@ter@c@  Sun Jun  7 16:46:39 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Sun, 7 Jun 2020 14:46:39 +0000
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
Message-ID: <7342C4BD-C5E8-45EC-93E9-4F0E7A02D335@mcmaster.ca>

Dear Jeroen,

Thank you for tracking down the source of the problem.

You probably saw that Peter Dalgaard reported that the tcltk package apparently is working fine in R 4.0.1 on macOS. I haven't confirmed that myself because the Mac binary for R 4.0.1 isn't yet on CRAN.

Best,
 John

> On Jun 7, 2020, at 10:00 AM, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> 
> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>> 
>> Hi,
>> 
>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>> 
>> --------------------- snip --------------------
>> library("tcltk")
>> tt <- tktoplevel()
>> label.widget <- tklabel(tt, text = "Hello, World!")
>> button.widget <- tkbutton(tt, text = "Push",
>>         command = function()cat("OW!\n"))
>> tkpack(label.widget, button.widget) # geometry manager
>> --------------------- snip --------------------
> 
> 
> I can reproduce this. The backtrace shows the crash happens in
> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
> bug that was introduced by commit 78408/78409 about a month ago. I
> think the problem is that this commit changes 'calloc' to 'Calloc'
> without changing the corresponding 'free' to 'Free'.
> 
> This has nothing to do with the Windows build or installation. Nothing
> has changed in the windows build procedure between 4.0.0 and 4.0.1.


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Jun  7 17:12:40 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 7 Jun 2020 11:12:40 -0400
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
Message-ID: <87aeae9b-a770-05d2-2791-03c89ae9d948@gmail.com>

On 07/06/2020 10:00 a.m., Jeroen Ooms wrote:
> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>>
>> Hi,
>>
>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>>
>> --------------------- snip --------------------
>> library("tcltk")
>> tt <- tktoplevel()
>> label.widget <- tklabel(tt, text = "Hello, World!")
>> button.widget <- tkbutton(tt, text = "Push",
>>           command = function()cat("OW!\n"))
>> tkpack(label.widget, button.widget) # geometry manager
>> --------------------- snip --------------------
> 
> 
> I can reproduce this. The backtrace shows the crash happens in
> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
> bug that was introduced by commit 78408/78409 about a month ago. I
> think the problem is that this commit changes 'calloc' to 'Calloc'
> without changing the corresponding 'free' to 'Free'.

The same commit made the same kind of change to unix/sys-std.c as well.

Duncan Murdoch

> 
> This has nothing to do with the Windows build or installation. Nothing
> has changed in the windows build procedure between 4.0.0 and 4.0.1.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From pd@|gd @end|ng |rom gm@||@com  Sun Jun  7 17:28:00 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 7 Jun 2020 17:28:00 +0200
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
Message-ID: <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>

So this wasn't tested for a month?

Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have

   for (objc = i = 0; i < length(avec); i++){
        const char *s;
        char *tmp;
        if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
            //  tmp = calloc(strlen(s)+2, sizeof(char));
            tmp = Calloc(strlen(s)+2, char);
            *tmp = '-';
            strcpy(tmp+1, s);
            objv[objc++] = Tcl_NewStringObj(tmp, -1);
            free(tmp);
        }
        if (!isNull(t = VECTOR_ELT(avec, i)))
            objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
    }

and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop). 

-pd
 

> On 7 Jun 2020, at 16:00 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
> 
> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>> 
>> Hi,
>> 
>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>> 
>> --------------------- snip --------------------
>> library("tcltk")
>> tt <- tktoplevel()
>> label.widget <- tklabel(tt, text = "Hello, World!")
>> button.widget <- tkbutton(tt, text = "Push",
>>         command = function()cat("OW!\n"))
>> tkpack(label.widget, button.widget) # geometry manager
>> --------------------- snip --------------------
> 
> 
> I can reproduce this. The backtrace shows the crash happens in
> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
> bug that was introduced by commit 78408/78409 about a month ago. I
> think the problem is that this commit changes 'calloc' to 'Calloc'
> without changing the corresponding 'free' to 'Free'.
> 
> This has nothing to do with the Windows build or installation. Nothing
> has changed in the windows build procedure between 4.0.0 and 4.0.1.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From iuke-tier@ey m@iii@g oii uiow@@edu  Sun Jun  7 17:53:54 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sun, 7 Jun 2020 10:53:54 -0500 (CDT)
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
Message-ID: <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>

On Sun, 7 Jun 2020, peter dalgaard wrote:

> So this wasn't tested for a month?
>
> Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
>
>   for (objc = i = 0; i < length(avec); i++){
>        const char *s;
>        char *tmp;
>        if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
>            //  tmp = calloc(strlen(s)+2, sizeof(char));
>            tmp = Calloc(strlen(s)+2, char);
>            *tmp = '-';
>            strcpy(tmp+1, s);
>            objv[objc++] = Tcl_NewStringObj(tmp, -1);
>            free(tmp);
>        }
>        if (!isNull(t = VECTOR_ELT(avec, i)))
>            objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
>    }
>
> and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).

Right. And the calloc->Calloc change doesn't look like an issue either
-- just checking for a NULL.

If the crash is happening in free() then that most likely means
corrupted malloc data structures. Unfortunately that could be
happening anywhere.

Best bet to narrow this down is for someone with a good Windows setup
who can reproduce this to bisect the svn commits and see at what
commit this started happening. Unfortunately my office Windows machine
isn't responding and it will probably take some time to get that
fixed.

Best,

luke

>
> -pd
>
>
>> On 7 Jun 2020, at 16:00 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>
>> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>>>
>>> Hi,
>>>
>>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>>>
>>> --------------------- snip --------------------
>>> library("tcltk")
>>> tt <- tktoplevel()
>>> label.widget <- tklabel(tt, text = "Hello, World!")
>>> button.widget <- tkbutton(tt, text = "Push",
>>>         command = function()cat("OW!\n"))
>>> tkpack(label.widget, button.widget) # geometry manager
>>> --------------------- snip --------------------
>>
>>
>> I can reproduce this. The backtrace shows the crash happens in
>> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
>> bug that was introduced by commit 78408/78409 about a month ago. I
>> think the problem is that this commit changes 'calloc' to 'Calloc'
>> without changing the corresponding 'free' to 'Free'.
>>
>> This has nothing to do with the Windows build or installation. Nothing
>> has changed in the windows build procedure between 4.0.0 and 4.0.1.
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From j|ox @end|ng |rom mcm@@ter@c@  Sun Jun  7 18:08:48 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Sun, 7 Jun 2020 16:08:48 +0000
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
Message-ID: <ACD1644AA6C67E4FBD0C350625508EC88CF58511@FHSDB2D11-2.csu.mcmaster.ca>

Hi,

Does it make sense to withdraw the Windows R 4.0.1 binary until the issue is resolved? 

Best,
 John

> -----Original Message-----
> From: luke-tierney at uiowa.edu <luke-tierney at uiowa.edu>
> Sent: Sunday, June 7, 2020 11:54 AM
> To: peter dalgaard <pdalgd at gmail.com>
> Cc: Jeroen Ooms <jeroenooms at gmail.com>; Fox, John <jfox at mcmaster.ca>; r-
> devel at r-project.org
> Subject: Re: [External] Re: [Rd] use of the tcltk package crashes R 4.0.1
> for Windows
> 
> On Sun, 7 Jun 2020, peter dalgaard wrote:
> 
> > So this wasn't tested for a month?
> >
> > Anyways, Free() is just free() with a check that we're not freeing a
> > null pointer, followed by setting the pointer to NULL. At that point
> > of tcltk.c, we have
> >
> >   for (objc = i = 0; i < length(avec); i++){
> >        const char *s;
> >        char *tmp;
> >        if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
> >            //  tmp = calloc(strlen(s)+2, sizeof(char));
> >            tmp = Calloc(strlen(s)+2, char);
> >            *tmp = '-';
> >            strcpy(tmp+1, s);
> >            objv[objc++] = Tcl_NewStringObj(tmp, -1);
> >            free(tmp);
> >        }
> >        if (!isNull(t = VECTOR_ELT(avec, i)))
> >            objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
> >    }
> >
> > and I can't see how tmp can be NULL at the free(), nor can I see it
> mattering if it is not set to NULL (notice that it goes out of scope with
> the for loop).
> 
> Right. And the calloc->Calloc change doesn't look like an issue either
> -- just checking for a NULL.
> 
> If the crash is happening in free() then that most likely means corrupted
> malloc data structures. Unfortunately that could be happening anywhere.
> 
> Best bet to narrow this down is for someone with a good Windows setup who
> can reproduce this to bisect the svn commits and see at what commit this
> started happening. Unfortunately my office Windows machine isn't
> responding and it will probably take some time to get that fixed.
> 
> Best,
> 
> luke
> 
> >
> > -pd
> >
> >
> >> On 7 Jun 2020, at 16:00 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >>
> >> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
> >>>
> >>> Hi,
> >>>
> >>> The following code, from the examples in ?TkWidgets , immediately
> crashes R 4.0.1 for Windows:
> >>>
> >>> --------------------- snip --------------------
> >>> library("tcltk")
> >>> tt <- tktoplevel()
> >>> label.widget <- tklabel(tt, text = "Hello, World!") button.widget <-
> >>> tkbutton(tt, text = "Push",
> >>>         command = function()cat("OW!\n")) tkpack(label.widget,
> >>> button.widget) # geometry manager
> >>> --------------------- snip --------------------
> >>
> >>
> >> I can reproduce this. The backtrace shows the crash happens in
> >> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
> >> bug that was introduced by commit 78408/78409 about a month ago. I
> >> think the problem is that this commit changes 'calloc' to 'Calloc'
> >> without changing the corresponding 'free' to 'Free'.
> >>
> >> This has nothing to do with the Windows build or installation.
> >> Nothing has changed in the windows build procedure between 4.0.0 and
> 4.0.1.
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
> 
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From iuke-tier@ey m@iii@g oii uiow@@edu  Sun Jun  7 18:23:57 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sun, 7 Jun 2020 11:23:57 -0500 (CDT)
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
Message-ID: <alpine.OSX.2.21.2006071118140.4853@macbook-air-5.local>

There is one other possibility:

It may be that the calloc/free pair picked up by the tcltk package DLL
is different from the pair picked up when building base R. (We provide
our own malloc framework, but if the macros aren't quite right it may
be that the system malloc is picked up in some cases). In that case
using Calloc and free would be mismatching the malloc systems and
probably segfault.

If that is indeed happening we should fix it, but using Free with
Calloc should cure the immediate symptom.

Best,

luke

On Sun, 7 Jun 2020, luke-tierney at uiowa.edu wrote:

> On Sun, 7 Jun 2020, peter dalgaard wrote:
>
>> So this wasn't tested for a month?
>> 
>> Anyways, Free() is just free() with a check that we're not freeing a null 
>> pointer, followed by setting the pointer to NULL. At that point of tcltk.c, 
>> we have
>>
>>   for (objc = i = 0; i < length(avec); i++){
>>        const char *s;
>>        char *tmp;
>>        if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
>>            //  tmp = calloc(strlen(s)+2, sizeof(char));
>>            tmp = Calloc(strlen(s)+2, char);
>>            *tmp = '-';
>>            strcpy(tmp+1, s);
>>            objv[objc++] = Tcl_NewStringObj(tmp, -1);
>>            free(tmp);
>>        }
>>        if (!isNull(t = VECTOR_ELT(avec, i)))
>>            objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
>>    }
>> 
>> and I can't see how tmp can be NULL at the free(), nor can I see it 
>> mattering if it is not set to NULL (notice that it goes out of scope with 
>> the for loop).
>
> Right. And the calloc->Calloc change doesn't look like an issue either
> -- just checking for a NULL.
>
> If the crash is happening in free() then that most likely means
> corrupted malloc data structures. Unfortunately that could be
> happening anywhere.
>
> Best bet to narrow this down is for someone with a good Windows setup
> who can reproduce this to bisect the svn commits and see at what
> commit this started happening. Unfortunately my office Windows machine
> isn't responding and it will probably take some time to get that
> fixed.
>
> Best,
>
> luke
>
>> 
>> -pd
>> 
>> 
>>> On 7 Jun 2020, at 16:00 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>> 
>>> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>>>> 
>>>> Hi,
>>>> 
>>>> The following code, from the examples in ?TkWidgets , immediately crashes 
>>>> R 4.0.1 for Windows:
>>>> 
>>>> --------------------- snip --------------------
>>>> library("tcltk")
>>>> tt <- tktoplevel()
>>>> label.widget <- tklabel(tt, text = "Hello, World!")
>>>> button.widget <- tkbutton(tt, text = "Push",
>>>>         command = function()cat("OW!\n"))
>>>> tkpack(label.widget, button.widget) # geometry manager
>>>> --------------------- snip --------------------
>>> 
>>> 
>>> I can reproduce this. The backtrace shows the crash happens in
>>> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
>>> bug that was introduced by commit 78408/78409 about a month ago. I
>>> think the problem is that this commit changes 'calloc' to 'Calloc'
>>> without changing the corresponding 'free' to 'Free'.
>>> 
>>> This has nothing to do with the Windows build or installation. Nothing
>>> has changed in the windows build procedure between 4.0.0 and 4.0.1.
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From jeroenoom@ @end|ng |rom gm@||@com  Sun Jun  7 18:59:53 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Sun, 7 Jun 2020 18:59:53 +0200
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
Message-ID: <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>

On Sun, Jun 7, 2020 at 5:53 PM <luke-tierney at uiowa.edu> wrote:
>
> On Sun, 7 Jun 2020, peter dalgaard wrote:
>
> > So this wasn't tested for a month?
> >
> > Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
> >
> >   for (objc = i = 0; i < length(avec); i++){
> >        const char *s;
> >        char *tmp;
> >        if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
> >            //  tmp = calloc(strlen(s)+2, sizeof(char));
> >            tmp = Calloc(strlen(s)+2, char);
> >            *tmp = '-';
> >            strcpy(tmp+1, s);
> >            objv[objc++] = Tcl_NewStringObj(tmp, -1);
> >            free(tmp);
> >        }
> >        if (!isNull(t = VECTOR_ELT(avec, i)))
> >            objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
> >    }
> >
> > and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).
>
> Right. And the calloc->Calloc change doesn't look like an issue either
> -- just checking for a NULL.
>
> If the crash is happening in free() then that most likely means
> corrupted malloc data structures. Unfortunately that could be
> happening anywhere.

Writing R extensions, section 6.1.2 says: "Do not assume that memory
allocated by Calloc/Realloc comes from the same pool as used by
malloc: in particular do not use free or strdup with it."

I think the reason is that R uses dlmalloc for Calloc on Windows:
https://github.com/wch/r-source/blob/c634fec5214e73747b44d7c0e6f047fefe44667d/src/main/memory.c#L94-L103


From pd@|gd @end|ng |rom gm@||@com  Sun Jun  7 19:07:34 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 7 Jun 2020 19:07:34 +0200
Subject: [Rd] [External] use of the tcltk package crashes R 4.0.1 for
 Windows
In-Reply-To: <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
Message-ID: <BE280C36-1A27-4053-90BE-D903DFD84A85@gmail.com>



> On 7 Jun 2020, at 17:53 , luke-tierney at uiowa.edu wrote:
> 
> On Sun, 7 Jun 2020, peter dalgaard wrote:
> 
>> So this wasn't tested for a month?
>> 
>> Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
>> 
>>  for (objc = i = 0; i < length(avec); i++){
>>       const char *s;
>>       char *tmp;
>>       if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
>>           //  tmp = calloc(strlen(s)+2, sizeof(char));
>>           tmp = Calloc(strlen(s)+2, char);
>>           *tmp = '-';
>>           strcpy(tmp+1, s);
>>           objv[objc++] = Tcl_NewStringObj(tmp, -1);
>>           free(tmp);
>>       }
>>       if (!isNull(t = VECTOR_ELT(avec, i)))
>>           objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
>>   }
>> 
>> and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).
> 
> Right. And the calloc->Calloc change doesn't look like an issue either
> -- just checking for a NULL.
> 
> If the crash is happening in free() then that most likely means
> corrupted malloc data structures. Unfortunately that could be
> happening anywhere.
> 
> Best bet to narrow this down is for someone with a good Windows setup
> who can reproduce this to bisect the svn commits and see at what
> commit this started happening. Unfortunately my office Windows machine
> isn't responding and it will probably take some time to get that
> fixed.

Also, it is possible that the issue is really a line or two earlier, so it would be good to get in with a debugger and see what is actually in *tmp and objv[objc++] at the point of the crash. 

Also, Tcl_NewStringObj(tmp, -1) obviously must allocate, but it would be rather odd if it didn't use the system allocator (Tcl is designed to be embeddable, the only strange thing R does in that respect is the marriage of the two event loops).

-pd


> 
> Best,
> 
> luke
> 
>> 
>> -pd
>> 
>> 
>>> On 7 Jun 2020, at 16:00 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>> 
>>> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>>>> 
>>>> Hi,
>>>> 
>>>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>>>> 
>>>> --------------------- snip --------------------
>>>> library("tcltk")
>>>> tt <- tktoplevel()
>>>> label.widget <- tklabel(tt, text = "Hello, World!")
>>>> button.widget <- tkbutton(tt, text = "Push",
>>>>        command = function()cat("OW!\n"))
>>>> tkpack(label.widget, button.widget) # geometry manager
>>>> --------------------- snip --------------------
>>> 
>>> 
>>> I can reproduce this. The backtrace shows the crash happens in
>>> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
>>> bug that was introduced by commit 78408/78409 about a month ago. I
>>> think the problem is that this commit changes 'calloc' to 'Calloc'
>>> without changing the corresponding 'free' to 'Free'.
>>> 
>>> This has nothing to do with the Windows build or installation. Nothing
>>> has changed in the windows build procedure between 4.0.0 and 4.0.1.
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
> 
> -- 
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>   Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Sun Jun  7 19:34:20 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 7 Jun 2020 19:34:20 +0200
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
Message-ID: <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>



> On 7 Jun 2020, at 18:59 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
> 
> On Sun, Jun 7, 2020 at 5:53 PM <luke-tierney at uiowa.edu> wrote:
>> 
>> On Sun, 7 Jun 2020, peter dalgaard wrote:
>> 
>>> So this wasn't tested for a month?
>>> 
>>> Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
>>> 
>>>  for (objc = i = 0; i < length(avec); i++){
>>>       const char *s;
>>>       char *tmp;
>>>       if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
>>>           //  tmp = calloc(strlen(s)+2, sizeof(char));
>>>           tmp = Calloc(strlen(s)+2, char);
>>>           *tmp = '-';
>>>           strcpy(tmp+1, s);
>>>           objv[objc++] = Tcl_NewStringObj(tmp, -1);
>>>           free(tmp);
>>>       }
>>>       if (!isNull(t = VECTOR_ELT(avec, i)))
>>>           objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
>>>   }
>>> 
>>> and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).
>> 
>> Right. And the calloc->Calloc change doesn't look like an issue either
>> -- just checking for a NULL.
>> 
>> If the crash is happening in free() then that most likely means
>> corrupted malloc data structures. Unfortunately that could be
>> happening anywhere.
> 
> Writing R extensions, section 6.1.2 says: "Do not assume that memory
> allocated by Calloc/Realloc comes from the same pool as used by
> malloc: in particular do not use free or strdup with it."
> 
> I think the reason is that R uses dlmalloc for Calloc on Windows:
> https://github.com/wch/r-source/blob/c634fec5214e73747b44d7c0e6f047fefe44667d/src/main/memory.c#L94-L103

But that section #defines calloc and free to Rm_... counterparts in lockstep? (I assume that is where dlmalloc comes in?)

Anyways, does it actually work to change free() to Free()? If so, then all this post mortem analysis is rather a moot point.

-pd

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sun Jun  7 21:11:38 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sun, 7 Jun 2020 20:11:38 +0100
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
 <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
Message-ID: <CABtg=K=f2OVg-dkR8Hk3GMefXNF+gJU3YPM2eocYDxhpdZ64yA@mail.gmail.com>

FWIW, you can "test" this by using the daily R builds. They are here:
https://ci.appveyor.com/project/jeroen/base/history

This is the build before the change, it does not crash:
https://ci.appveyor.com/project/jeroen/base/builds/32781690

This is the build right after the change, it does crash:
https://ci.appveyor.com/project/jeroen/base/builds/32808414

(To get the installers, click on "Artifacts" in the top right corner,
download the zip file, it has an exe installer.)

There are a handful of commits between the two installers, but only
this change seems to be related to the crash:
https://github.com/wch/r-source/commit/ba76508c8041335c1896df491ac227fdde0cfb0d
https://github.com/wch/r-source/commit/2c047b94bfe0996419f8871ed6b62b1e7d5ec7bd
https://github.com/wch/r-source/commit/59840c37eb20e05241fb9e85228331fa31db9a2b
https://github.com/wch/r-source/commit/161fc3f703e46201299e87bf7717a93d13c23970
https://github.com/wch/r-source/commit/4c267df39d776fa10c4b2d6b3872dbb85b073681
https://github.com/wch/r-source/commit/f3de035e12a8c8920772297405ed25ee6b3ec4a6

Gabor

On Sun, Jun 7, 2020 at 6:40 PM peter dalgaard <pdalgd at gmail.com> wrote:
>
>
>
> > On 7 Jun 2020, at 18:59 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >
> > On Sun, Jun 7, 2020 at 5:53 PM <luke-tierney at uiowa.edu> wrote:
> >>
> >> On Sun, 7 Jun 2020, peter dalgaard wrote:
> >>
> >>> So this wasn't tested for a month?
> >>>
> >>> Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
> >>>
> >>>  for (objc = i = 0; i < length(avec); i++){
> >>>       const char *s;
> >>>       char *tmp;
> >>>       if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
> >>>           //  tmp = calloc(strlen(s)+2, sizeof(char));
> >>>           tmp = Calloc(strlen(s)+2, char);
> >>>           *tmp = '-';
> >>>           strcpy(tmp+1, s);
> >>>           objv[objc++] = Tcl_NewStringObj(tmp, -1);
> >>>           free(tmp);
> >>>       }
> >>>       if (!isNull(t = VECTOR_ELT(avec, i)))
> >>>           objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
> >>>   }
> >>>
> >>> and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).
> >>
> >> Right. And the calloc->Calloc change doesn't look like an issue either
> >> -- just checking for a NULL.
> >>
> >> If the crash is happening in free() then that most likely means
> >> corrupted malloc data structures. Unfortunately that could be
> >> happening anywhere.
> >
> > Writing R extensions, section 6.1.2 says: "Do not assume that memory
> > allocated by Calloc/Realloc comes from the same pool as used by
> > malloc: in particular do not use free or strdup with it."
> >
> > I think the reason is that R uses dlmalloc for Calloc on Windows:
> > https://github.com/wch/r-source/blob/c634fec5214e73747b44d7c0e6f047fefe44667d/src/main/memory.c#L94-L103
>
> But that section #defines calloc and free to Rm_... counterparts in lockstep? (I assume that is where dlmalloc comes in?)
>
> Anyways, does it actually work to change free() to Free()? If so, then all this post mortem analysis is rather a moot point.
>
> -pd
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Mon Jun  8 00:03:44 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sun, 7 Jun 2020 17:03:44 -0500 (CDT)
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
 <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
Message-ID: <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>

I've committed the change to use Free instead of free in tcltk.c and
sys-std.c (r78652 for R-devel, r78653 for R-patched).

We might consider either moving Calloc/Free out of the Windows
remapping or moving the remapping into header files so everything
seeing our header files uses our calloc/free. Either would be less
brittle that the current status.

Best,

luke

On Sun, 7 Jun 2020, peter dalgaard wrote:

>
>
>> On 7 Jun 2020, at 18:59 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>
>> On Sun, Jun 7, 2020 at 5:53 PM <luke-tierney at uiowa.edu> wrote:
>>>
>>> On Sun, 7 Jun 2020, peter dalgaard wrote:
>>>
>>>> So this wasn't tested for a month?
>>>>
>>>> Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
>>>>
>>>>  for (objc = i = 0; i < length(avec); i++){
>>>>       const char *s;
>>>>       char *tmp;
>>>>       if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
>>>>           //  tmp = calloc(strlen(s)+2, sizeof(char));
>>>>           tmp = Calloc(strlen(s)+2, char);
>>>>           *tmp = '-';
>>>>           strcpy(tmp+1, s);
>>>>           objv[objc++] = Tcl_NewStringObj(tmp, -1);
>>>>           free(tmp);
>>>>       }
>>>>       if (!isNull(t = VECTOR_ELT(avec, i)))
>>>>           objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
>>>>   }
>>>>
>>>> and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).
>>>
>>> Right. And the calloc->Calloc change doesn't look like an issue either
>>> -- just checking for a NULL.
>>>
>>> If the crash is happening in free() then that most likely means
>>> corrupted malloc data structures. Unfortunately that could be
>>> happening anywhere.
>>
>> Writing R extensions, section 6.1.2 says: "Do not assume that memory
>> allocated by Calloc/Realloc comes from the same pool as used by
>> malloc: in particular do not use free or strdup with it."
>>
>> I think the reason is that R uses dlmalloc for Calloc on Windows:
>> https://github.com/wch/r-source/blob/c634fec5214e73747b44d7c0e6f047fefe44667d/src/main/memory.c#L94-L103
>
> But that section #defines calloc and free to Rm_... counterparts in lockstep? (I assume that is where dlmalloc comes in?)
>
> Anyways, does it actually work to change free() to Free()? If so, then all this post mortem analysis is rather a moot point.
>
> -pd
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From pd@|gd @end|ng |rom gm@||@com  Mon Jun  8 01:00:47 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 8 Jun 2020 01:00:47 +0200
Subject: [Rd] [External] use of the tcltk package crashes R 4.0.1 for
 Windows
In-Reply-To: <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
 <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
 <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>
Message-ID: <77DB351A-A4BA-4AF5-8845-A5B6C7490D97@gmail.com>

Ah, I see it now: 

The remapping of free() to Rm_free() and calloc() to Rm_calloc() happens in memory.c, but not in tcltk.c; the macro Calloc in R_ext/RS.h maps to a call to R_chk_alloc which is defined in memory.h; RS.h is included in tcltk.c, so tcltk.c winds up calling Rm_calloc() via Calloc(), but then the NON-remapped free(), and the walls come tumbling down. 

If the  "#if defined(Win32)" block had been inside RS.h, the problem wouldn't arise.

-pd

> On 8 Jun 2020, at 00:03 , luke-tierney at uiowa.edu wrote:
> 
> I've committed the change to use Free instead of free in tcltk.c and
> sys-std.c (r78652 for R-devel, r78653 for R-patched).
> 
> We might consider either moving Calloc/Free out of the Windows
> remapping or moving the remapping into header files so everything
> seeing our header files uses our calloc/free. Either would be less
> brittle that the current status.
> 
> Best,
> 
> luke
> 
> On Sun, 7 Jun 2020, peter dalgaard wrote:
> 
>> 
>> 
>>> On 7 Jun 2020, at 18:59 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>> 
>>> On Sun, Jun 7, 2020 at 5:53 PM <luke-tierney at uiowa.edu> wrote:
>>>> 
>>>> On Sun, 7 Jun 2020, peter dalgaard wrote:
>>>> 
>>>>> So this wasn't tested for a month?
>>>>> 
>>>>> Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
>>>>> 
>>>>> for (objc = i = 0; i < length(avec); i++){
>>>>>      const char *s;
>>>>>      char *tmp;
>>>>>      if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
>>>>>          //  tmp = calloc(strlen(s)+2, sizeof(char));
>>>>>          tmp = Calloc(strlen(s)+2, char);
>>>>>          *tmp = '-';
>>>>>          strcpy(tmp+1, s);
>>>>>          objv[objc++] = Tcl_NewStringObj(tmp, -1);
>>>>>          free(tmp);
>>>>>      }
>>>>>      if (!isNull(t = VECTOR_ELT(avec, i)))
>>>>>          objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
>>>>>  }
>>>>> 
>>>>> and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).
>>>> 
>>>> Right. And the calloc->Calloc change doesn't look like an issue either
>>>> -- just checking for a NULL.
>>>> 
>>>> If the crash is happening in free() then that most likely means
>>>> corrupted malloc data structures. Unfortunately that could be
>>>> happening anywhere.
>>> 
>>> Writing R extensions, section 6.1.2 says: "Do not assume that memory
>>> allocated by Calloc/Realloc comes from the same pool as used by
>>> malloc: in particular do not use free or strdup with it."
>>> 
>>> I think the reason is that R uses dlmalloc for Calloc on Windows:
>>> https://github.com/wch/r-source/blob/c634fec5214e73747b44d7c0e6f047fefe44667d/src/main/memory.c#L94-L103
>> 
>> But that section #defines calloc and free to Rm_... counterparts in lockstep? (I assume that is where dlmalloc comes in?)
>> 
>> Anyways, does it actually work to change free() to Free()? If so, then all this post mortem analysis is rather a moot point.
>> 
>> -pd
>> 
>> 
> 
> -- 
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>   Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @purd|e@@ @end|ng |rom gm@||@com  Mon Jun  8 01:17:15 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Mon, 8 Jun 2020 11:17:15 +1200
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <ACD1644AA6C67E4FBD0C350625508EC88CF58511@FHSDB2D11-2.csu.mcmaster.ca>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <ACD1644AA6C67E4FBD0C350625508EC88CF58511@FHSDB2D11-2.csu.mcmaster.ca>
Message-ID: <CAB8pepw4B9EDbbxuqb0Bu9RddjTw1LeeaQK63qw7O36dxwGwSg@mail.gmail.com>

On Mon, Jun 8, 2020 at 4:09 AM Fox, John <jfox at mcmaster.ca> wrote:
> Does it make sense to withdraw the Windows R 4.0.1 binary until the issue is resolved?

Yes, it does.
All the release reversions should be removed.


From @purd|e@@ @end|ng |rom gm@||@com  Mon Jun  8 01:20:21 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Mon, 8 Jun 2020 11:20:21 +1200
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <CAB8pepw4B9EDbbxuqb0Bu9RddjTw1LeeaQK63qw7O36dxwGwSg@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <ACD1644AA6C67E4FBD0C350625508EC88CF58511@FHSDB2D11-2.csu.mcmaster.ca>
 <CAB8pepw4B9EDbbxuqb0Bu9RddjTw1LeeaQK63qw7O36dxwGwSg@mail.gmail.com>
Message-ID: <CAB8pepwjyyfa63KkUKsCGOpoVQjcT10+g1Rc0BSv_zQ8b8NRow@mail.gmail.com>

sorry, release "versions"


On Mon, Jun 8, 2020 at 11:17 AM Abby Spurdle <spurdle.a at gmail.com> wrote:
>
> On Mon, Jun 8, 2020 at 4:09 AM Fox, John <jfox at mcmaster.ca> wrote:
> > Does it make sense to withdraw the Windows R 4.0.1 binary until the issue is resolved?
>
> Yes, it does.
> All the release reversions should be removed.


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Mon Jun  8 01:28:15 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Sun, 7 Jun 2020 23:28:15 +0000
Subject: [Rd] [External] use of the tcltk package crashes R 4.0.1 for
 Windows
In-Reply-To: <77DB351A-A4BA-4AF5-8845-A5B6C7490D97@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
 <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
 <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>
 <77DB351A-A4BA-4AF5-8845-A5B6C7490D97@gmail.com>
Message-ID: <CAL6gwnJXS6XFHx3oPYoaoqZDuKcA57EhN0gNFLwE5iH4ZPdx6Q@mail.gmail.com>

Jeroen, how "reactive" are the rtools40 scripts. Will they pull the latest
version committed by Dr. Tierney or is there something which must be done
manually prior to we end-users rebuilding from source?

Thank you,

Avi

On Sun, Jun 7, 2020 at 11:01 PM peter dalgaard <pdalgd at gmail.com> wrote:

> Ah, I see it now:
>
> The remapping of free() to Rm_free() and calloc() to Rm_calloc() happens
> in memory.c, but not in tcltk.c; the macro Calloc in R_ext/RS.h maps to a
> call to R_chk_alloc which is defined in memory.h; RS.h is included in
> tcltk.c, so tcltk.c winds up calling Rm_calloc() via Calloc(), but then the
> NON-remapped free(), and the walls come tumbling down.
>
> If the  "#if defined(Win32)" block had been inside RS.h, the problem
> wouldn't arise.
>
> -pd
>
> > On 8 Jun 2020, at 00:03 , luke-tierney at uiowa.edu wrote:
> >
> > I've committed the change to use Free instead of free in tcltk.c and
> > sys-std.c (r78652 for R-devel, r78653 for R-patched).
> >
> > We might consider either moving Calloc/Free out of the Windows
> > remapping or moving the remapping into header files so everything
> > seeing our header files uses our calloc/free. Either would be less
> > brittle that the current status.
> >
> > Best,
> >
> > luke
> >
> > On Sun, 7 Jun 2020, peter dalgaard wrote:
> >
> >>
> >>
> >>> On 7 Jun 2020, at 18:59 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >>>
> >>> On Sun, Jun 7, 2020 at 5:53 PM <luke-tierney at uiowa.edu> wrote:
> >>>>
> >>>> On Sun, 7 Jun 2020, peter dalgaard wrote:
> >>>>
> >>>>> So this wasn't tested for a month?
> >>>>>
> >>>>> Anyways, Free() is just free() with a check that we're not freeing a
> null pointer, followed by setting the pointer to NULL. At that point of
> tcltk.c, we have
> >>>>>
> >>>>> for (objc = i = 0; i < length(avec); i++){
> >>>>>      const char *s;
> >>>>>      char *tmp;
> >>>>>      if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm,
> i)))){
> >>>>>          //  tmp = calloc(strlen(s)+2, sizeof(char));
> >>>>>          tmp = Calloc(strlen(s)+2, char);
> >>>>>          *tmp = '-';
> >>>>>          strcpy(tmp+1, s);
> >>>>>          objv[objc++] = Tcl_NewStringObj(tmp, -1);
> >>>>>          free(tmp);
> >>>>>      }
> >>>>>      if (!isNull(t = VECTOR_ELT(avec, i)))
> >>>>>          objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
> >>>>>  }
> >>>>>
> >>>>> and I can't see how tmp can be NULL at the free(), nor can I see it
> mattering if it is not set to NULL (notice that it goes out of scope with
> the for loop).
> >>>>
> >>>> Right. And the calloc->Calloc change doesn't look like an issue either
> >>>> -- just checking for a NULL.
> >>>>
> >>>> If the crash is happening in free() then that most likely means
> >>>> corrupted malloc data structures. Unfortunately that could be
> >>>> happening anywhere.
> >>>
> >>> Writing R extensions, section 6.1.2 says: "Do not assume that memory
> >>> allocated by Calloc/Realloc comes from the same pool as used by
> >>> malloc: in particular do not use free or strdup with it."
> >>>
> >>> I think the reason is that R uses dlmalloc for Calloc on Windows:
> >>>
> https://github.com/wch/r-source/blob/c634fec5214e73747b44d7c0e6f047fefe44667d/src/main/memory.c#L94-L103
> >>
> >> But that section #defines calloc and free to Rm_... counterparts in
> lockstep? (I assume that is where dlmalloc comes in?)
> >>
> >> Anyways, does it actually work to change free() to Free()? If so, then
> all this post mortem analysis is rather a moot point.
> >>
> >> -pd
> >>
> >>
> >
> > --
> > Luke Tierney
> > Ralph E. Wareham Professor of Mathematical Sciences
> > University of Iowa                  Phone:             319-335-3386
> > Department of Statistics and        Fax:               319-335-3017
> >   Actuarial Science
> > 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> > Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Mon Jun  8 09:08:20 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 8 Jun 2020 09:08:20 +0200
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <CAB8pepwjyyfa63KkUKsCGOpoVQjcT10+g1Rc0BSv_zQ8b8NRow@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <ACD1644AA6C67E4FBD0C350625508EC88CF58511@FHSDB2D11-2.csu.mcmaster.ca>
 <CAB8pepw4B9EDbbxuqb0Bu9RddjTw1LeeaQK63qw7O36dxwGwSg@mail.gmail.com>
 <CAB8pepwjyyfa63KkUKsCGOpoVQjcT10+g1Rc0BSv_zQ8b8NRow@mail.gmail.com>
Message-ID: <E91D5B42-F4D1-418D-BB4A-7D1D34E332CD@gmail.com>

Well...

The first rule of release management is not to have the same version number on different releases.

I see three possibilities

(1) Tell users to use 4.0.1-patched if they need tcltk on Windows
(2) A "vendor patch release": Windows maintainer reissues the binary after applying the critical patch. 
(3) 4.0.2 As soon as possible (realistically June 22nd-ish)

Now, (1) requires no intervention, but it has the problem that we are approaching the time for campus-wide installations (insofar as campuses will actually reopen in Fall). It will be messy to have to tell IT not to use the officially released binary, and most likely they just won't.

(2) is possible if we act quickly, although it leaves a "ghost version" of 4.0.1 around (and don't try renaming tricks, it can mess up CRAN scripts - some of us have the scars...). It should work but it is a bit iffy because the actual problem is in fact in the sources and it creates a situation where the binary and the sources are out of sync.

(3) is clean, but it takes a while (minimum 12 days) to go through the release run-in. Also, for a new release, I suspect we want to have a closer look at the issue as we seem to be using multiple allocators on Windows in a, hmmm, "eclectic mix". (E.g. connections.c has both Calloc/Free and malloc/free combinations and AFAICT, the latter uses a different allocator.)  

-pd


> On 8 Jun 2020, at 01:20 , Abby Spurdle <spurdle.a at gmail.com> wrote:
> 
> sorry, release "versions"
> 
> 
> On Mon, Jun 8, 2020 at 11:17 AM Abby Spurdle <spurdle.a at gmail.com> wrote:
>> 
>> On Mon, Jun 8, 2020 at 4:09 AM Fox, John <jfox at mcmaster.ca> wrote:
>>> Does it make sense to withdraw the Windows R 4.0.1 binary until the issue is resolved?
>> 
>> Yes, it does.
>> All the release reversions should be removed.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jeroenoom@ @end|ng |rom gm@||@com  Mon Jun  8 09:36:57 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Mon, 8 Jun 2020 09:36:57 +0200
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
 <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
 <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>
Message-ID: <CABFfbXsYRh9CdQeGy7syLn0oWQhRLgSyoe9OEfJjiFP=pDfamA@mail.gmail.com>

On Mon, Jun 8, 2020 at 12:03 AM <luke-tierney at uiowa.edu> wrote:
>
> I've committed the change to use Free instead of free in tcltk.c and
> sys-std.c (r78652 for R-devel, r78653 for R-patched).

Thank you! I can confirm that the example from above no longer crashes
in R--patched.

John, can you confirm that everything seems to work now in Rcmd with
today's R-patched build from CRAN?
https://cran.r-project.org/bin/windows/base/rpatched.html

Hopefully Peter will be able to tag a 4.0.2 hotfix release based on
4.0.1 + above patch, without going through the full release
procedure...


From j|ox @end|ng |rom mcm@@ter@c@  Mon Jun  8 15:45:43 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Mon, 8 Jun 2020 13:45:43 +0000
Subject: [Rd] [External] use of the tcltk package crashes R 4.0.1 for
 Windows
In-Reply-To: <CABFfbXsYRh9CdQeGy7syLn0oWQhRLgSyoe9OEfJjiFP=pDfamA@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
 <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
 <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>
 <CABFfbXsYRh9CdQeGy7syLn0oWQhRLgSyoe9OEfJjiFP=pDfamA@mail.gmail.com>
Message-ID: <A82C6E81-5B67-40F6-8541-8FCC188019DB@mcmaster.ca>

Dear Jeroen,

With the caveat that I've tested only a few of the Rcmdr dialogs (a full test takes hours and must be done manually), everything seems to be working fine again.

Thank you for addressing this problem so quickly.

John

  -----------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Jun 8, 2020, at 3:36 AM, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> 
> On Mon, Jun 8, 2020 at 12:03 AM <luke-tierney at uiowa.edu> wrote:
>> 
>> I've committed the change to use Free instead of free in tcltk.c and
>> sys-std.c (r78652 for R-devel, r78653 for R-patched).
> 
> Thank you! I can confirm that the example from above no longer crashes
> in R--patched.
> 
> John, can you confirm that everything seems to work now in Rcmd with
> today's R-patched build from CRAN?
> https://cran.r-project.org/bin/windows/base/rpatched.html
> 
> Hopefully Peter will be able to tag a 4.0.2 hotfix release based on
> 4.0.1 + above patch, without going through the full release
> procedure...


From cp@|evert1 @end|ng |rom gm@||@com  Tue Jun  9 00:09:54 2020
From: cp@|evert1 @end|ng |rom gm@||@com (Carson Sievert)
Date: Mon, 8 Jun 2020 17:09:54 -0500
Subject: [Rd] Potential issue with perl-based pattern matching with Unicode
 characters on Windows R 4.0 and above
Message-ID: <CAMYFQhogq7D8oESTwoX3mG3WRobrtV5P_dPbq1MmKwMa4ATpLg@mail.gmail.com>

Hi everyone,

I've noticed new behavior in `regexpr(..., perl = TRUE)` on Windows with
R4.0 and above with Unicode characters. Here's a minimal example where I'd
expect to see a start value of `5` (as R 3.6.2 and below gives), but R
4.0.0 (and R 4.0.1) now returns:

```
> regexpr("b", "foo\U0001F937bar", perl = TRUE)
#> [1] 6
#> attr(,"match.length")
#> [1] 1
```

Perhaps this change in behavior could be explained by R4.0's migration to
PCRE2? Here is some relevant output from my R4.0 session:

```
> pcre_config()
#> UTF-8 Unicode properties     JIT    stack
#>  TRUE               TRUE    TRUE    FALSE
```

```
> extSoftVersion()
#>         zlib                        bzlib            xz
   PCRE
#> "1.2.11"   "1.0.8, 13-Jul-2019"    "5.2.4"   "10.33 2019-04-16"
#> ICU                                       TRE            iconv
 readline   BLAS
#> "58.2" "TRE 0.8.0 R_fixes (BSD)"  "win_iconv"               ""       ""
```

Let me know if there's any more information I can provide to help replicate
and isolate the issue. Also, if this happens to be the expected behavior,
I'd be keen to learn about why that's the case.

Thank you,

-Carson

-- 
Carson Sievert, PhD
Software Engineer at RStudio
Website <https://cpsievert.me> | Twitter <https://twitter.com/cpsievert> |
GitHub <https://github.com/cpsievert>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Jun  9 17:01:06 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 9 Jun 2020 17:01:06 +0200
Subject: [Rd] 
 Potential issue with perl-based pattern matching with Unicode
 characters on Windows R 4.0 and above
In-Reply-To: <CAMYFQhogq7D8oESTwoX3mG3WRobrtV5P_dPbq1MmKwMa4ATpLg@mail.gmail.com>
References: <CAMYFQhogq7D8oESTwoX3mG3WRobrtV5P_dPbq1MmKwMa4ATpLg@mail.gmail.com>
Message-ID: <aa38f41c-6962-442d-6b5b-0a4ded55d7bb@gmail.com>

Hi Carson,

thanks for the report. This is a bug in R, specific to Windows and to 
characters that use surrogate pairs - other characters will work fine, 
other recent operating systems where R runs will work fine (all where a 
single wchar_t holds complete Unicode characters). Now fixed in R-devel.

If handling of surrogate pairs (e.g. Emoji characters) is important for 
you, it would help if you could systematically stress-test R for that. A 
number of related bugs have been fixed, but it is not impossible some 
are still present as these characters are rarely present in test data.

Also, sometimes fixing bugs ironically introduces new problems. This 
regression was caused by a correct fix of a bug related to surrogate 
pairs in R 4.0. That old bug was cancelling out this old bug in 
post-processing PCRE results.

Best
Tomas

On 6/9/20 12:09 AM, Carson Sievert wrote:
> Hi everyone,
>
> I've noticed new behavior in `regexpr(..., perl = TRUE)` on Windows with
> R4.0 and above with Unicode characters. Here's a minimal example where I'd
> expect to see a start value of `5` (as R 3.6.2 and below gives), but R
> 4.0.0 (and R 4.0.1) now returns:
>
> ```
>> regexpr("b", "foo\U0001F937bar", perl = TRUE)
> #> [1] 6
> #> attr(,"match.length")
> #> [1] 1
> ```
>
> Perhaps this change in behavior could be explained by R4.0's migration to
> PCRE2? Here is some relevant output from my R4.0 session:
>
> ```
>> pcre_config()
> #> UTF-8 Unicode properties     JIT    stack
> #>  TRUE               TRUE    TRUE    FALSE
> ```
>
> ```
>> extSoftVersion()
> #>         zlib                        bzlib            xz
>     PCRE
> #> "1.2.11"   "1.0.8, 13-Jul-2019"    "5.2.4"   "10.33 2019-04-16"
> #> ICU                                       TRE            iconv
>   readline   BLAS
> #> "58.2" "TRE 0.8.0 R_fixes (BSD)"  "win_iconv"               ""       ""
> ```
>
> Let me know if there's any more information I can provide to help replicate
> and isolate the issue. Also, if this happens to be the expected behavior,
> I'd be keen to learn about why that's the case.
>
> Thank you,
>
> -Carson
>


From pd@me@ @end|ng |rom cb@@dk  Tue Jun  9 23:28:03 2020
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Tue, 9 Jun 2020 21:28:03 +0000
Subject: [Rd] R 4.0.2 scheduled for June 22
Message-ID: <270EFEE1-89B1-48F7-BBD6-E66B46D1C32C@cbs.dk>

Unfortunatly, a memory allocation bug prevented the R Commander package from working on Windows. This is fixed in R-patched, but we cannot have this not working in the official release when IT departments start installing for the Fall semester, so we need to issue a new release.

Full schedule is available on developer.r-project.org.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From j|ox @end|ng |rom mcm@@ter@c@  Tue Jun  9 23:37:50 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Tue, 9 Jun 2020 21:37:50 +0000
Subject: [Rd] [R]  R 4.0.2 scheduled for June 22
In-Reply-To: <4168_1591738244_059LUFtX007139_270EFEE1-89B1-48F7-BBD6-E66B46D1C32C@cbs.dk>
References: <4168_1591738244_059LUFtX007139_270EFEE1-89B1-48F7-BBD6-E66B46D1C32C@cbs.dk>
Message-ID: <F16DCD72-2D0C-47D4-ABDB-196BB02B63E1@mcmaster.ca>

Dear Peter,

Thank you very much for this.

To clarify slightly, the bug affects not just the Rcmdr package but use of the tcltk package on Windows more generally.

Best,
 John

  -----------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Jun 9, 2020, at 5:28 PM, Peter Dalgaard via R-help <r-help at r-project.org> wrote:
> 
> Unfortunatly, a memory allocation bug prevented the R Commander package from working on Windows. This is fixed in R-patched, but we cannot have this not working in the official release when IT departments start installing for the Fall semester, so we need to issue a new release.
> 
> Full schedule is available on developer.r-project.org.
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> _______________________________________________
> R-announce at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-announce
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Jun 10 00:45:00 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 9 Jun 2020 15:45:00 -0700
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
Message-ID: <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>

Was this resolved upstream or is this something that R should/could
fix? If the latter, could this also go into the "emergency release" R
4.0.2 that is scheduled for 2020-06-22?

My $.02

/Henrik


On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> Btw. it would be also possible to create a macOS R installer that
> embeds a static or dynamic libcurl with Secure Transport, instead of
> the Apple default LibreSSL.
>
> This might be too late for R 4.0.1, I don't know.
>
> Gabor
>
> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >
> > On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> > [...]
> > > Btw. why does this affect openssl? That root cert was published in
> > > 2010, surely openssl should know about it? Maybe libcurl / openssl
> > > only uses the chain provided by the server? Without trying to use an
> > > alternate chain?
> >
> > Yes, indeed it seems that old OpenSSL versions cannot handle
> > alternative certificate chains. This has been fixed in OpenSSL in
> > 2015, so modern Linux systems should be fine. However, macOS uses
> > LibreSSL, and LibreSSL never fixed this issue. E.g.
> > https://github.com/libressl-portable/portable/issues/595
> >
> > r-project.org can be updated to send the new root certificate, which
> > will solve most of our problems, but we'll probably have issues with
> > other web sites that'll update slower or never.
> >
> > FWIW I built macOS binaries for the curl package, using a static
> > libcurl and macOS Secure Transport, so these binaries does not have
> > this issue.
> >
> > They are at https://files.r-hub.io/curl-macos-static and they can be
> > installed with
> > install.packages("curl", repos =
> > "https://files.r-hub.io/curl-macos-static", type = "binary")
> >
> > They support R 3.2 and up, including R 4.1, and should work on all
> > macOS versions that the given R release supports.
> >
> > Gabor
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Jun 10 00:50:18 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 10 Jun 2020 10:50:18 +1200
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
Message-ID: <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>

To be clear, this not an issue in the libraries nor R, the certificates on the server were simply wrong. So, no, this has nothing to do with R.

Cheers,
Simon


> On Jun 10, 2020, at 10:45 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> 
> Was this resolved upstream or is this something that R should/could
> fix? If the latter, could this also go into the "emergency release" R
> 4.0.2 that is scheduled for 2020-06-22?
> 
> My $.02
> 
> /Henrik
> 
> 
> On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>> 
>> Btw. it would be also possible to create a macOS R installer that
>> embeds a static or dynamic libcurl with Secure Transport, instead of
>> the Apple default LibreSSL.
>> 
>> This might be too late for R 4.0.1, I don't know.
>> 
>> Gabor
>> 
>> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>> 
>>> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>> [...]
>>>> Btw. why does this affect openssl? That root cert was published in
>>>> 2010, surely openssl should know about it? Maybe libcurl / openssl
>>>> only uses the chain provided by the server? Without trying to use an
>>>> alternate chain?
>>> 
>>> Yes, indeed it seems that old OpenSSL versions cannot handle
>>> alternative certificate chains. This has been fixed in OpenSSL in
>>> 2015, so modern Linux systems should be fine. However, macOS uses
>>> LibreSSL, and LibreSSL never fixed this issue. E.g.
>>> https://github.com/libressl-portable/portable/issues/595
>>> 
>>> r-project.org can be updated to send the new root certificate, which
>>> will solve most of our problems, but we'll probably have issues with
>>> other web sites that'll update slower or never.
>>> 
>>> FWIW I built macOS binaries for the curl package, using a static
>>> libcurl and macOS Secure Transport, so these binaries does not have
>>> this issue.
>>> 
>>> They are at https://files.r-hub.io/curl-macos-static and they can be
>>> installed with
>>> install.packages("curl", repos =
>>> "https://files.r-hub.io/curl-macos-static", type = "binary")
>>> 
>>> They support R 3.2 and up, including R 4.1, and should work on all
>>> macOS versions that the given R release supports.
>>> 
>>> Gabor
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From tdhock5 @end|ng |rom gm@||@com  Wed Jun 10 01:21:00 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Tue, 9 Jun 2020 16:21:00 -0700
Subject: [Rd] valgrind false positive on R startup?
Message-ID: <CALK03d1zKdgcwhnRfM-kNgVQvXGmzN_WitwuREsbwoJsDZpVkA@mail.gmail.com>

Hi all,

I'm on Ubuntu 18.04, running R-4.0.0 which I compiled from source, and
using valgrind I am always seeing the following message. Does anybody
else see that? Is that a known false positive? Any ideas how to
fix/suppress? Seems related to TRE, do I need to upgrade that?

(base) tdhock at maude-MacBookPro:~/R/binsegRcpp$ R --vanilla -d valgrind
-e 'extSoftVersion()'
==9565== Memcheck, a memory error detector
==9565== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9565== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9565== Command: /home/tdhock/lib/R/bin/exec/R --vanilla -e extSoftVersion()
==9565==
==9565== Conditional jump or move depends on uninitialised value(s)
==9565==    at 0x55AB9E0: __wcsnlen_sse4_1 (strlen.S:147)
==9565==    by 0x5598EC1: wcsrtombs (wcsrtombs.c:104)
==9565==    by 0x551EB20: wcstombs (wcstombs.c:34)
==9565==    by 0x50BAA07: wcstombs (stdlib.h:154)
==9565==    by 0x50BAA07: tre_parse_bracket_items (tre-parse.c:336)
==9565==    by 0x50BAA07: tre_parse_bracket (tre-parse.c:453)
==9565==    by 0x50BAA07: tre_parse (tre-parse.c:1380)
==9565==    by 0x50B2498: tre_compile (tre-compile.c:1920)
==9565==    by 0x50AFBE0: tre_regcompb (regcomp.c:150)
==9565==    by 0x4FA9F42: do_gsub (grep.c:2023)
==9565==    by 0x4F79045: bcEval (eval.c:7090)
==9565==    by 0x4F8572F: Rf_eval (eval.c:723)
==9565==    by 0x4F8754E: R_execClosure (eval.c:1888)
==9565==    by 0x4F88316: Rf_applyClosure (eval.c:1814)
==9565==    by 0x4F85902: Rf_eval (eval.c:846)
==9565==

R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> extSoftVersion()
                                zlib                                bzlib
                            "1.2.11"                 "1.0.6, 6-Sept-2010"
                                  xz                                 PCRE
                             "5.2.2"                   "10.31 2018-02-12"
                                 ICU                                  TRE
                              "60.2"            "TRE 0.8.0 R_fixes (BSD)"
                               iconv                             readline
                        "glibc 2.27"                                "7.0"
                                BLAS
"/home/tdhock/lib/R/lib/libRblas.so"
>
>
==9565==
==9565== HEAP SUMMARY:
==9565==     in use at exit: 40,492,919 bytes in 9,170 blocks
==9565==   total heap usage: 19,784 allocs, 10,614 frees, 62,951,535
bytes allocated
==9565==
==9565== LEAK SUMMARY:
==9565==    definitely lost: 0 bytes in 0 blocks
==9565==    indirectly lost: 0 bytes in 0 blocks
==9565==      possibly lost: 0 bytes in 0 blocks
==9565==    still reachable: 40,492,919 bytes in 9,170 blocks
==9565==                       of which reachable via heuristic:
==9565==                         newarray           : 4,264 bytes in 1 blocks
==9565==         suppressed: 0 bytes in 0 blocks
==9565== Rerun with --leak-check=full to see details of leaked memory
==9565==
==9565== For counts of detected and suppressed errors, rerun with: -v
==9565== Use --track-origins=yes to see where uninitialised values come from
==9565== ERROR SUMMARY: 46 errors from 1 contexts (suppressed: 0 from 0)
(base) tdhock at maude-MacBookPro:~/R/binsegRcpp$


From pd@|gd @end|ng |rom gm@||@com  Wed Jun 10 01:39:48 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 10 Jun 2020 01:39:48 +0200
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
 <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
Message-ID: <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>

Yes and no... At least as I understand it (Disclaimer: There are things I am pretty sure that I don't understand properly, somewhere in the Bermuda triangle beween CA bundles, TLS protocols, and Server-side settings), there are two sided to this: 

One is that various *.r-project.org servers got hit by a fumble where a higher-up certificate in the chain of trust expired before the *.r-project.org one. This was fixed by changing the certificate chain on each server.

The other side is that this situation hit Mac users harder than others, because Apple's LibreSSL doesn't have the same feature that openSSL has to detect a secondary chain of trust when the primary one expired. This was not unique to R - svn also failed from the command line - but it did affect download.file() inside R. 

The upshot is that there might be 3rd party servers with a similar certificate setup which have not been updated like *.r-project.org. This is not too unlikely since web browsers do not have trouble accessing them, and the whole matter may go undetected. For such servers, download.file() would still fail.  

I.e., there is a case to be made that we might want to link openSSL rather than LibreSSL.  On the other hand, I gather that newer versions of LibreSSL contain the relevant protocol upgrade, so maybe one can just wait for Apple to update it. Or maybe we do want to link R against openSSL, but almost certainly not for a hotfix release.

Best
-pd

> On 10 Jun 2020, at 00:50 , Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> To be clear, this not an issue in the libraries nor R, the certificates on the server were simply wrong. So, no, this has nothing to do with R.
> 
> Cheers,
> Simon
> 
> 
>> On Jun 10, 2020, at 10:45 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>> 
>> Was this resolved upstream or is this something that R should/could
>> fix? If the latter, could this also go into the "emergency release" R
>> 4.0.2 that is scheduled for 2020-06-22?
>> 
>> My $.02
>> 
>> /Henrik
>> 
>> 
>> On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>> 
>>> Btw. it would be also possible to create a macOS R installer that
>>> embeds a static or dynamic libcurl with Secure Transport, instead of
>>> the Apple default LibreSSL.
>>> 
>>> This might be too late for R 4.0.1, I don't know.
>>> 
>>> Gabor
>>> 
>>> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>> 
>>>> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>> [...]
>>>>> Btw. why does this affect openssl? That root cert was published in
>>>>> 2010, surely openssl should know about it? Maybe libcurl / openssl
>>>>> only uses the chain provided by the server? Without trying to use an
>>>>> alternate chain?
>>>> 
>>>> Yes, indeed it seems that old OpenSSL versions cannot handle
>>>> alternative certificate chains. This has been fixed in OpenSSL in
>>>> 2015, so modern Linux systems should be fine. However, macOS uses
>>>> LibreSSL, and LibreSSL never fixed this issue. E.g.
>>>> https://github.com/libressl-portable/portable/issues/595
>>>> 
>>>> r-project.org can be updated to send the new root certificate, which
>>>> will solve most of our problems, but we'll probably have issues with
>>>> other web sites that'll update slower or never.
>>>> 
>>>> FWIW I built macOS binaries for the curl package, using a static
>>>> libcurl and macOS Secure Transport, so these binaries does not have
>>>> this issue.
>>>> 
>>>> They are at https://files.r-hub.io/curl-macos-static and they can be
>>>> installed with
>>>> install.packages("curl", repos =
>>>> "https://files.r-hub.io/curl-macos-static", type = "binary")
>>>> 
>>>> They support R 3.2 and up, including R 4.1, and should work on all
>>>> macOS versions that the given R release supports.
>>>> 
>>>> Gabor
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Jun 10 01:53:28 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 10 Jun 2020 11:53:28 +1200
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
 <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
 <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
Message-ID: <F04207CA-9639-4DCB-9719-8B62881320F5@R-project.org>

You are making a very strong assumption that finding an alternative chain of trust is safe. I'd argue it's not - it means that an adversary could manipulate the chain in a way to trust it instead of the declared chain and thus subverting it. In fact switching to OpenSSL would create a serious security hole here - in particular since it installs a separate trust store which it is far more easily attacked and subverted. By your argument we should disable all SSL checks as that produces error with incorrectly configured servers so not performing checks is better. It is true that R is likely not used for sensitive transactions, but I would rather it warned me about situations where the communication may be compromised instead of just silently going along.

Cheers,
Simon



> On Jun 10, 2020, at 11:39 AM, peter dalgaard <pdalgd at gmail.com> wrote:
> 
> Yes and no... At least as I understand it (Disclaimer: There are things I am pretty sure that I don't understand properly, somewhere in the Bermuda triangle beween CA bundles, TLS protocols, and Server-side settings), there are two sided to this: 
> 
> One is that various *.r-project.org servers got hit by a fumble where a higher-up certificate in the chain of trust expired before the *.r-project.org one. This was fixed by changing the certificate chain on each server.
> 
> The other side is that this situation hit Mac users harder than others, because Apple's LibreSSL doesn't have the same feature that openSSL has to detect a secondary chain of trust when the primary one expired. This was not unique to R - svn also failed from the command line - but it did affect download.file() inside R. 
> 
> The upshot is that there might be 3rd party servers with a similar certificate setup which have not been updated like *.r-project.org. This is not too unlikely since web browsers do not have trouble accessing them, and the whole matter may go undetected. For such servers, download.file() would still fail.  
> 
> I.e., there is a case to be made that we might want to link openSSL rather than LibreSSL.  On the other hand, I gather that newer versions of LibreSSL contain the relevant protocol upgrade, so maybe one can just wait for Apple to update it. Or maybe we do want to link R against openSSL, but almost certainly not for a hotfix release.
> 
> Best
> -pd
> 
>> On 10 Jun 2020, at 00:50 , Simon Urbanek <simon.urbanek at R-project.org> wrote:
>> 
>> To be clear, this not an issue in the libraries nor R, the certificates on the server were simply wrong. So, no, this has nothing to do with R.
>> 
>> Cheers,
>> Simon
>> 
>> 
>>> On Jun 10, 2020, at 10:45 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>>> 
>>> Was this resolved upstream or is this something that R should/could
>>> fix? If the latter, could this also go into the "emergency release" R
>>> 4.0.2 that is scheduled for 2020-06-22?
>>> 
>>> My $.02
>>> 
>>> /Henrik
>>> 
>>> 
>>> On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>> 
>>>> Btw. it would be also possible to create a macOS R installer that
>>>> embeds a static or dynamic libcurl with Secure Transport, instead of
>>>> the Apple default LibreSSL.
>>>> 
>>>> This might be too late for R 4.0.1, I don't know.
>>>> 
>>>> Gabor
>>>> 
>>>> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>> 
>>>>> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>> [...]
>>>>>> Btw. why does this affect openssl? That root cert was published in
>>>>>> 2010, surely openssl should know about it? Maybe libcurl / openssl
>>>>>> only uses the chain provided by the server? Without trying to use an
>>>>>> alternate chain?
>>>>> 
>>>>> Yes, indeed it seems that old OpenSSL versions cannot handle
>>>>> alternative certificate chains. This has been fixed in OpenSSL in
>>>>> 2015, so modern Linux systems should be fine. However, macOS uses
>>>>> LibreSSL, and LibreSSL never fixed this issue. E.g.
>>>>> https://github.com/libressl-portable/portable/issues/595
>>>>> 
>>>>> r-project.org can be updated to send the new root certificate, which
>>>>> will solve most of our problems, but we'll probably have issues with
>>>>> other web sites that'll update slower or never.
>>>>> 
>>>>> FWIW I built macOS binaries for the curl package, using a static
>>>>> libcurl and macOS Secure Transport, so these binaries does not have
>>>>> this issue.
>>>>> 
>>>>> They are at https://files.r-hub.io/curl-macos-static and they can be
>>>>> installed with
>>>>> install.packages("curl", repos =
>>>>> "https://files.r-hub.io/curl-macos-static", type = "binary")
>>>>> 
>>>>> They support R 3.2 and up, including R 4.1, and should work on all
>>>>> macOS versions that the given R release supports.
>>>>> 
>>>>> Gabor
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Wed Jun 10 06:12:04 2020
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Wed, 10 Jun 2020 05:12:04 +0100
Subject: [Rd] valgrind false positive on R startup?
In-Reply-To: <CALK03d1zKdgcwhnRfM-kNgVQvXGmzN_WitwuREsbwoJsDZpVkA@mail.gmail.com>
References: <CALK03d1zKdgcwhnRfM-kNgVQvXGmzN_WitwuREsbwoJsDZpVkA@mail.gmail.com>
Message-ID: <47483e13-3582-8998-5be3-3f84fbc02b28@stats.ox.ac.uk>

It is known, with a known workaround, see e.g. 
https://www.stats.ox.ac.uk/pub/bdr/memtests/README.txt .  Set 
suppressions in ~/.valgrindrc, e.g. the CRAN check machine has

--suppressions=/data/blackswan/ripley/wcsrtombs.supp

It is an issue in your OS (glibc), not TRE nor R.

On 10/06/2020 00:21, Toby Hocking wrote:
> Hi all,
> 
> I'm on Ubuntu 18.04, running R-4.0.0 which I compiled from source, and
> using valgrind I am always seeing the following message. Does anybody
> else see that? Is that a known false positive? Any ideas how to
> fix/suppress? Seems related to TRE, do I need to upgrade that?
> 
> (base) tdhock at maude-MacBookPro:~/R/binsegRcpp$ R --vanilla -d valgrind
> -e 'extSoftVersion()'
> ==9565== Memcheck, a memory error detector
> ==9565== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
> ==9565== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
> ==9565== Command: /home/tdhock/lib/R/bin/exec/R --vanilla -e extSoftVersion()
> ==9565==
> ==9565== Conditional jump or move depends on uninitialised value(s)
> ==9565==    at 0x55AB9E0: __wcsnlen_sse4_1 (strlen.S:147)
> ==9565==    by 0x5598EC1: wcsrtombs (wcsrtombs.c:104)
> ==9565==    by 0x551EB20: wcstombs (wcstombs.c:34)
> ==9565==    by 0x50BAA07: wcstombs (stdlib.h:154)
> ==9565==    by 0x50BAA07: tre_parse_bracket_items (tre-parse.c:336)
> ==9565==    by 0x50BAA07: tre_parse_bracket (tre-parse.c:453)
> ==9565==    by 0x50BAA07: tre_parse (tre-parse.c:1380)
> ==9565==    by 0x50B2498: tre_compile (tre-compile.c:1920)
> ==9565==    by 0x50AFBE0: tre_regcompb (regcomp.c:150)
> ==9565==    by 0x4FA9F42: do_gsub (grep.c:2023)
> ==9565==    by 0x4F79045: bcEval (eval.c:7090)
> ==9565==    by 0x4F8572F: Rf_eval (eval.c:723)
> ==9565==    by 0x4F8754E: R_execClosure (eval.c:1888)
> ==9565==    by 0x4F88316: Rf_applyClosure (eval.c:1814)
> ==9565==    by 0x4F85902: Rf_eval (eval.c:846)
> ==9565==
> 
> R version 4.0.0 (2020-04-24) -- "Arbor Day"
> Copyright (C) 2020 The R Foundation for Statistical Computing
> Platform: x86_64-pc-linux-gnu (64-bit)
> 
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
> 
>    Natural language support but running in an English locale
> 
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
> 
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
> 
>> extSoftVersion()
>                                  zlib                                bzlib
>                              "1.2.11"                 "1.0.6, 6-Sept-2010"
>                                    xz                                 PCRE
>                               "5.2.2"                   "10.31 2018-02-12"
>                                   ICU                                  TRE
>                                "60.2"            "TRE 0.8.0 R_fixes (BSD)"
>                                 iconv                             readline
>                          "glibc 2.27"                                "7.0"
>                                  BLAS
> "/home/tdhock/lib/R/lib/libRblas.so"
>>
>>
> ==9565==
> ==9565== HEAP SUMMARY:
> ==9565==     in use at exit: 40,492,919 bytes in 9,170 blocks
> ==9565==   total heap usage: 19,784 allocs, 10,614 frees, 62,951,535
> bytes allocated
> ==9565==
> ==9565== LEAK SUMMARY:
> ==9565==    definitely lost: 0 bytes in 0 blocks
> ==9565==    indirectly lost: 0 bytes in 0 blocks
> ==9565==      possibly lost: 0 bytes in 0 blocks
> ==9565==    still reachable: 40,492,919 bytes in 9,170 blocks
> ==9565==                       of which reachable via heuristic:
> ==9565==                         newarray           : 4,264 bytes in 1 blocks
> ==9565==         suppressed: 0 bytes in 0 blocks
> ==9565== Rerun with --leak-check=full to see details of leaked memory
> ==9565==
> ==9565== For counts of detected and suppressed errors, rerun with: -v
> ==9565== Use --track-origins=yes to see where uninitialised values come from
> ==9565== ERROR SUMMARY: 46 errors from 1 contexts (suppressed: 0 from 0)
> (base) tdhock at maude-MacBookPro:~/R/binsegRcpp$
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Wed Jun 10 06:22:14 2020
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Wed, 10 Jun 2020 05:22:14 +0100
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
 <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
 <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
Message-ID: <be7d021c-c115-f913-d3a4-49c478af6c1c@stats.ox.ac.uk>

On 10/06/2020 00:39, peter dalgaard wrote:
> Yes and no... At least as I understand it (Disclaimer: There are things I am pretty sure that I don't understand properly, somewhere in the Bermuda triangle beween CA bundles, TLS protocols, and Server-side settings), there are two sided to this:
> 
> One is that various *.r-project.org servers got hit by a fumble where a higher-up certificate in the chain of trust expired before the *.r-project.org one. This was fixed by changing the certificate chain on each server.
> 
> The other side is that this situation hit Mac users harder than others, because Apple's LibreSSL doesn't have the same feature that openSSL has to detect a secondary chain of trust when the primary one expired. This was not unique to R - svn also failed from the command line - but it did affect download.file() inside R.
> 
> The upshot is that there might be 3rd party servers with a similar certificate setup which have not been updated like *.r-project.org. This is not too unlikely since web browsers do not have trouble accessing them, and the whole matter may go undetected. For such servers, download.file() would still fail.

A dozen or so packages fail their CRAN checks because of this.  The most 
common problematic site has been reported to its web admins, but not 
resolved.

> I.e., there is a case to be made that we might want to link openSSL rather than LibreSSL.  On the other hand, I gather that newer versions of LibreSSL contain the relevant protocol upgrade, so maybe one can just wait for Apple to update it. Or maybe we do want to link R against openSSL, but almost certainly not for a hotfix release.

This is not just a macOS issue: most CRAN failures are seen on Debian 
and Solaris as well as macOS (but not Fedora).  And a different one (3 
packages by the same author misusing RCurl to set a <= 2014 root 
certificate bundle) is seen only on Fedora.


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From pd@|gd @end|ng |rom gm@||@com  Wed Jun 10 10:55:54 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 10 Jun 2020 10:55:54 +0200
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <F04207CA-9639-4DCB-9719-8B62881320F5@R-project.org>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
 <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
 <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
 <F04207CA-9639-4DCB-9719-8B62881320F5@R-project.org>
Message-ID: <CB833F6F-4D3A-4E2F-9FEB-1D61C22D98F6@gmail.com>

As I said, there is stuff that I don't understand in here.... (including why browsers apparently do trust alternative chains)

-pd

> On 10 Jun 2020, at 01:53 , Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> You are making a very strong assumption that finding an alternative chain of trust is safe. I'd argue it's not - it means that an adversary could manipulate the chain in a way to trust it instead of the declared chain and thus subverting it. In fact switching to OpenSSL would create a serious security hole here - in particular since it installs a separate trust store which it is far more easily attacked and subverted. By your argument we should disable all SSL checks as that produces error with incorrectly configured servers so not performing checks is better. It is true that R is likely not used for sensitive transactions, but I would rather it warned me about situations where the communication may be compromised instead of just silently going along.
> 
> Cheers,
> Simon
> 
> 
> 
>> On Jun 10, 2020, at 11:39 AM, peter dalgaard <pdalgd at gmail.com> wrote:
>> 
>> Yes and no... At least as I understand it (Disclaimer: There are things I am pretty sure that I don't understand properly, somewhere in the Bermuda triangle beween CA bundles, TLS protocols, and Server-side settings), there are two sided to this: 
>> 
>> One is that various *.r-project.org servers got hit by a fumble where a higher-up certificate in the chain of trust expired before the *.r-project.org one. This was fixed by changing the certificate chain on each server.
>> 
>> The other side is that this situation hit Mac users harder than others, because Apple's LibreSSL doesn't have the same feature that openSSL has to detect a secondary chain of trust when the primary one expired. This was not unique to R - svn also failed from the command line - but it did affect download.file() inside R. 
>> 
>> The upshot is that there might be 3rd party servers with a similar certificate setup which have not been updated like *.r-project.org. This is not too unlikely since web browsers do not have trouble accessing them, and the whole matter may go undetected. For such servers, download.file() would still fail.  
>> 
>> I.e., there is a case to be made that we might want to link openSSL rather than LibreSSL.  On the other hand, I gather that newer versions of LibreSSL contain the relevant protocol upgrade, so maybe one can just wait for Apple to update it. Or maybe we do want to link R against openSSL, but almost certainly not for a hotfix release.
>> 
>> Best
>> -pd
>> 
>>> On 10 Jun 2020, at 00:50 , Simon Urbanek <simon.urbanek at R-project.org> wrote:
>>> 
>>> To be clear, this not an issue in the libraries nor R, the certificates on the server were simply wrong. So, no, this has nothing to do with R.
>>> 
>>> Cheers,
>>> Simon
>>> 
>>> 
>>>> On Jun 10, 2020, at 10:45 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>>>> 
>>>> Was this resolved upstream or is this something that R should/could
>>>> fix? If the latter, could this also go into the "emergency release" R
>>>> 4.0.2 that is scheduled for 2020-06-22?
>>>> 
>>>> My $.02
>>>> 
>>>> /Henrik
>>>> 
>>>> 
>>>> On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>> 
>>>>> Btw. it would be also possible to create a macOS R installer that
>>>>> embeds a static or dynamic libcurl with Secure Transport, instead of
>>>>> the Apple default LibreSSL.
>>>>> 
>>>>> This might be too late for R 4.0.1, I don't know.
>>>>> 
>>>>> Gabor
>>>>> 
>>>>> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>>> 
>>>>>> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>>> [...]
>>>>>>> Btw. why does this affect openssl? That root cert was published in
>>>>>>> 2010, surely openssl should know about it? Maybe libcurl / openssl
>>>>>>> only uses the chain provided by the server? Without trying to use an
>>>>>>> alternate chain?
>>>>>> 
>>>>>> Yes, indeed it seems that old OpenSSL versions cannot handle
>>>>>> alternative certificate chains. This has been fixed in OpenSSL in
>>>>>> 2015, so modern Linux systems should be fine. However, macOS uses
>>>>>> LibreSSL, and LibreSSL never fixed this issue. E.g.
>>>>>> https://github.com/libressl-portable/portable/issues/595
>>>>>> 
>>>>>> r-project.org can be updated to send the new root certificate, which
>>>>>> will solve most of our problems, but we'll probably have issues with
>>>>>> other web sites that'll update slower or never.
>>>>>> 
>>>>>> FWIW I built macOS binaries for the curl package, using a static
>>>>>> libcurl and macOS Secure Transport, so these binaries does not have
>>>>>> this issue.
>>>>>> 
>>>>>> They are at https://files.r-hub.io/curl-macos-static and they can be
>>>>>> installed with
>>>>>> install.packages("curl", repos =
>>>>>> "https://files.r-hub.io/curl-macos-static", type = "binary")
>>>>>> 
>>>>>> They support R 3.2 and up, including R 4.1, and should work on all
>>>>>> macOS versions that the given R release supports.
>>>>>> 
>>>>>> Gabor
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> -- 
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Jun 10 11:30:29 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 10 Jun 2020 10:30:29 +0100
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CB833F6F-4D3A-4E2F-9FEB-1D61C22D98F6@gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
 <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
 <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
 <F04207CA-9639-4DCB-9719-8B62881320F5@R-project.org>
 <CB833F6F-4D3A-4E2F-9FEB-1D61C22D98F6@gmail.com>
Message-ID: <CABtg=K=AQ328qD33WObYQ_DbvZWBcQcP5Zf-A8z10o+=yLVR5Q@mail.gmail.com>

My (also not expert) understanding is that there is nothing insecure about
alternative certificate chains at all. All browsers and macOS's built in
SSL library (secure transport) support them properly. OpenSSL and LibreSSL
were/are simply broken. This was not such a big issue so far, but now that
some old long lived certificates are expiring, it is increasingly an issue.

FWIW it is possible to build libcurl on macOS without any external SSL
library, so OpenSSL and LibreSSL are not needed at all. (Unfortunately the
libcurl build that comes with most (all?) macOS versions does use
LibreSSL.) The R installer could link to such a static libcurl library on
macOS, and that would solve the issue for macOS. Whether it should, that's
another question.

Gabor

On Wed, Jun 10, 2020 at 9:56 AM peter dalgaard <pdalgd at gmail.com> wrote:

> As I said, there is stuff that I don't understand in here.... (including
> why browsers apparently do trust alternative chains)
>
> -pd
>
> > On 10 Jun 2020, at 01:53 , Simon Urbanek <simon.urbanek at R-project.org>
> wrote:
> >
> > You are making a very strong assumption that finding an alternative
> chain of trust is safe. I'd argue it's not - it means that an adversary
> could manipulate the chain in a way to trust it instead of the declared
> chain and thus subverting it. In fact switching to OpenSSL would create a
> serious security hole here - in particular since it installs a separate
> trust store which it is far more easily attacked and subverted. By your
> argument we should disable all SSL checks as that produces error with
> incorrectly configured servers so not performing checks is better. It is
> true that R is likely not used for sensitive transactions, but I would
> rather it warned me about situations where the communication may be
> compromised instead of just silently going along.
> >
> > Cheers,
> > Simon
> >
> >
> >
> >> On Jun 10, 2020, at 11:39 AM, peter dalgaard <pdalgd at gmail.com> wrote:
> >>
> >> Yes and no... At least as I understand it (Disclaimer: There are things
> I am pretty sure that I don't understand properly, somewhere in the Bermuda
> triangle beween CA bundles, TLS protocols, and Server-side settings), there
> are two sided to this:
> >>
> >> One is that various *.r-project.org servers got hit by a fumble where
> a higher-up certificate in the chain of trust expired before the *.
> r-project.org one. This was fixed by changing the certificate chain on
> each server.
> >>
> >> The other side is that this situation hit Mac users harder than others,
> because Apple's LibreSSL doesn't have the same feature that openSSL has to
> detect a secondary chain of trust when the primary one expired. This was
> not unique to R - svn also failed from the command line - but it did affect
> download.file() inside R.
> >>
> >> The upshot is that there might be 3rd party servers with a similar
> certificate setup which have not been updated like *.r-project.org. This
> is not too unlikely since web browsers do not have trouble accessing them,
> and the whole matter may go undetected. For such servers, download.file()
> would still fail.
> >>
> >> I.e., there is a case to be made that we might want to link openSSL
> rather than LibreSSL.  On the other hand, I gather that newer versions of
> LibreSSL contain the relevant protocol upgrade, so maybe one can just wait
> for Apple to update it. Or maybe we do want to link R against openSSL, but
> almost certainly not for a hotfix release.
> >>
> >> Best
> >> -pd
> >>
> >>> On 10 Jun 2020, at 00:50 , Simon Urbanek <simon.urbanek at R-project.org>
> wrote:
> >>>
> >>> To be clear, this not an issue in the libraries nor R, the
> certificates on the server were simply wrong. So, no, this has nothing to
> do with R.
> >>>
> >>> Cheers,
> >>> Simon
> >>>
> >>>
> >>>> On Jun 10, 2020, at 10:45 AM, Henrik Bengtsson <
> henrik.bengtsson at gmail.com> wrote:
> >>>>
> >>>> Was this resolved upstream or is this something that R should/could
> >>>> fix? If the latter, could this also go into the "emergency release" R
> >>>> 4.0.2 that is scheduled for 2020-06-22?
> >>>>
> >>>> My $.02
> >>>>
> >>>> /Henrik
> >>>>
> >>>>
> >>>> On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <csardi.gabor at gmail.com>
> wrote:
> >>>>>
> >>>>> Btw. it would be also possible to create a macOS R installer that
> >>>>> embeds a static or dynamic libcurl with Secure Transport, instead of
> >>>>> the Apple default LibreSSL.
> >>>>>
> >>>>> This might be too late for R 4.0.1, I don't know.
> >>>>>
> >>>>> Gabor
> >>>>>
> >>>>> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com>
> wrote:
> >>>>>>
> >>>>>> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <
> csardi.gabor at gmail.com> wrote:
> >>>>>> [...]
> >>>>>>> Btw. why does this affect openssl? That root cert was published in
> >>>>>>> 2010, surely openssl should know about it? Maybe libcurl / openssl
> >>>>>>> only uses the chain provided by the server? Without trying to use
> an
> >>>>>>> alternate chain?
> >>>>>>
> >>>>>> Yes, indeed it seems that old OpenSSL versions cannot handle
> >>>>>> alternative certificate chains. This has been fixed in OpenSSL in
> >>>>>> 2015, so modern Linux systems should be fine. However, macOS uses
> >>>>>> LibreSSL, and LibreSSL never fixed this issue. E.g.
> >>>>>> https://github.com/libressl-portable/portable/issues/595
> >>>>>>
> >>>>>> r-project.org can be updated to send the new root certificate,
> which
> >>>>>> will solve most of our problems, but we'll probably have issues with
> >>>>>> other web sites that'll update slower or never.
> >>>>>>
> >>>>>> FWIW I built macOS binaries for the curl package, using a static
> >>>>>> libcurl and macOS Secure Transport, so these binaries does not have
> >>>>>> this issue.
> >>>>>>
> >>>>>> They are at https://files.r-hub.io/curl-macos-static and they can
> be
> >>>>>> installed with
> >>>>>> install.packages("curl", repos =
> >>>>>> "https://files.r-hub.io/curl-macos-static", type = "binary")
> >>>>>>
> >>>>>> They support R 3.2 and up, including R 4.1, and should work on all
> >>>>>> macOS versions that the given R release supports.
> >>>>>>
> >>>>>> Gabor
> >>>>>
> >>>>> ______________________________________________
> >>>>> R-devel at r-project.org mailing list
> >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >> --
> >> Peter Dalgaard, Professor,
> >> Center for Statistics, Copenhagen Business School
> >> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> >> Phone: (+45)38153501
> >> Office: A 4.23
> >> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From jte||er|@@rproject @end|ng |rom gm@||@com  Wed Jun 10 13:06:38 2020
From: jte||er|@@rproject @end|ng |rom gm@||@com (Juan Telleria Ruiz de Aguirre)
Date: Wed, 10 Jun 2020 13:06:38 +0200
Subject: [Rd] Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
Message-ID: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>

Dear R Developers,

I am having an issue with the renv package and R 4.0.1, which I
suspect is related to base R and not the renv package itself, as with
R 3.6.3 such an "error" does not appear.

The error is raised by a file.exists() path, and path
"C:\Users\J-tel\Documents", which in R 3.6.3 is read correctly, but in
R 4.0.1 fails (Probably because of the "-" symbol), and I suspect it
might be related with the new UTF-8 usage on Windows 10?
(https://developer.r-project.org/Blog/public/2020/05/02/utf-8-support-on-windows/index.html)

I have also checked file.exists() function and its internals, and seem
not to have happened changes in the meanwhile within them:

https://github.com/wch/r-source/blob/0e3b3182f87a60af4b0293a5410dde680b910f49/src/library/base/R/files.R
https://github.com/search?q=SEXP%20attribute_hidden%20do_fileexists+repo:wch/r-source&type=Code

Error Details:

> renv::init()
Error in file.exists(children) :
  file name conversion problem -- name too long?
> traceback()
14: file.exists(children)
13: renv_dependencies_find_dir_children(path, root)
12: renv_dependencies_find_dir(path, root)
11: FUN(X[[i]], ...)
10: lapply(path, renv_dependencies_find_impl, root = root)
9: renv_dependencies_find(path, root)
8: (function (path = getwd(), root = NULL, ..., progress = TRUE,
       errors = c("reported", "fatal", "ignored"), dev = FALSE)
   {
       path <- renv_path_normalize(path, winslash = "/", mustWork = TRUE)
       root <- root %||% renv_dependencies_root(path)
       if (exists(path, envir = `_renv_dependencies`))
           return(get(path, envir = `_renv_dependencies`))
       renv_dependencies_begin(root = root)
       on.exit(renv_dependencies_end(), add = TRUE)
       dots <- list(...)
       if (identical(dots[["quiet"]], TRUE)) {
           progress <- FALSE
           errors <- "ignored"
       }
       files <- renv_dependencies_find(path, root)
       deps <- renv_dependencies_discover(files, progress, errors)
       renv_dependencies_report(errors)
       deps
   })(path, progress = FALSE, errors = errors, dev = TRUE)
7: eval(call, envir = parent.frame(2))
6: eval(call, envir = parent.frame(2))
5: delegate(renv_dependencies_impl)
4: dependencies(path, progress = FALSE, errors = errors, dev = TRUE)
3: withCallingHandlers(dependencies(path, progress = FALSE, errors = errors,
       dev = TRUE), renv.dependencies.error =
renv_dependencies_error_handler(message,
       errors))
2: renv_dependencies_scope(project, action = "init")
1: renv::init()

> renv::diagnostics()
Diagnostics Report -- renv [0.10.0]
===================================

# Session Info =======================
R version 4.0.1 (2020-06-06)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18362)

Matrix products: default

locale:
[1] LC_COLLATE=Spanish_Spain.1252  LC_CTYPE=Spanish_Spain.1252
[3] LC_MONETARY=Spanish_Spain.1252 LC_NUMERIC=C
[5] LC_TIME=Spanish_Spain.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] renv_0.10.0

loaded via a namespace (and not attached):
 [1] compiler_4.0.1   rsconnect_0.8.16 htmltools_0.4.0  tools_4.0.1
 [5] yaml_2.2.1       Rcpp_1.0.4.6     rmarkdown_2.2    knitr_1.28
 [9] xfun_0.14        digest_0.6.25    packrat_0.5.0    rlang_0.4.6
[13] evaluate_0.14

# Project ============================
Project path: "~/Test2"

# Status =============================

# Lockfile ===========================
This project has not yet been snapshotted: 'renv.lock' does not exist.

# Library ============================
The project library "~/Test2/renv/library/R-4.0/x86_64-w64-mingw32"
does not exist.

# Dependencies =======================

# User Profile =======================
[no user profile detected]

# Settings ===========================
List of 6
 $ external.libraries       : chr(0)
 $ ignored.packages         : chr(0)
 $ package.dependency.fields: chr [1:3] "Imports" "Depends" "LinkingTo"
 $ snapshot.type            : chr "implicit"
 $ use.cache                : logi TRUE
 $ vcs.ignore.library       : logi TRUE

# Options ============================
List of 1
 $ renv.verbose: logi TRUE

# Environment Variables ==============
HOME        = C:\Users\J-tel\OneDrive\Documents
LANG        = <NA>
R_LIBS      = <NA>
R_LIBS_SITE = <NA>
R_LIBS_USER = C:/Users/J-tel/OneDrive/Documents/R/win-library/4.0

# PATH ===============================
- C:\rtools40\usr\bin
- C:\Program Files\R\R-4.0.1\bin\x64
- C:\ProgramData\Miniconda3
- C:\ProgramData\Miniconda3\Library\mingw-w64\bin
- C:\ProgramData\Miniconda3\Library\usr\bin
- C:\ProgramData\Miniconda3\Library\bin
- C:\ProgramData\Miniconda3\Scripts
- C:\ProgramData\Oracle\Java\javapath
- C:\WINDOWS\system32
- C:\WINDOWS
- C:\WINDOWS\System32\Wbem
- C:\WINDOWS\System32\WindowsPowerShell\v1.0\
- C:\WINDOWS\System32\OpenSSH\
- C:\Program Files\MiKTeX 2.9\miktex\bin\x64\
- C:\ProgramData\Miniconda3\Scripts\conda.exe

# Cache ==============================
There are a total of 0 package(s) installed in the renv cache.
Cache path: "C:/Users/J-tel/AppData/Local/renv/cache/v5/R-4.0/x86_64-w64-mingw32"

System Information:

> R.Version()
$platform
[1] "x86_64-w64-mingw32"

$arch
[1] "x86_64"

$os
[1] "mingw32"

$system
[1] "x86_64, mingw32"

$status
[1] ""

$major
[1] "4"

$minor
[1] "0.1"

$year
[1] "2020"

$month
[1] "06"

$day
[1] "06"

$`svn rev`
[1] "78648"

$language
[1] "R"

$version.string
[1] "R version 4.0.1 (2020-06-06)"

$nickname
[1] "See Things Now"

Thank you,
Juan


From edd @end|ng |rom deb|@n@org  Wed Jun 10 13:55:29 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 10 Jun 2020 06:55:29 -0500
Subject: [Rd] 
 Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
In-Reply-To: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
Message-ID: <24288.51761.87476.260587@rob.eddelbuettel.com>


On 10 June 2020 at 13:06, Juan Telleria Ruiz de Aguirre wrote:
| I am having an issue with the renv package and R 4.0.1, which I
| suspect is related to base R and not the renv package itself, as with
| R 3.6.3 such an "error" does not appear.

So a bug in `renv` as it does not account for changes in R 4.0.0 ?

Stuff happens. I just fixed an 'change in R 4.0.0' for one small aspect of
Rcpp(Armadillo) (namely the change in package.skeleton() and NAMESPACE).

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From kev|nu@hey @end|ng |rom gm@||@com  Wed Jun 10 17:49:02 2020
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Wed, 10 Jun 2020 08:49:02 -0700
Subject: [Rd] 
 Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
In-Reply-To: <24288.51761.87476.260587@rob.eddelbuettel.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
 <24288.51761.87476.260587@rob.eddelbuettel.com>
Message-ID: <CAJXgQP2UTW2pKS3_kGOH067oQLnhU6xmd=zVSxAJujQp+hcYjQ@mail.gmail.com>

Hi Juan,

For bug reports to R, you should attempt to create a
minimally-reproducible example, using only R's builtin facilities and
not any other addon packages. Given your report, it's not clear
whether the issue lies within renv or truly is caused by a change in R
4.0.0.

Also note that you have not supplied a minimally reproducible example.
If at all possible, you should be able to supply some code that
reproduces the issue -- ideally, one should be able to just copy +
paste the code into an R session to see the issue arise. Presumably,
if the issue is indeed in base R, then you should be able to supply a
reproducible example of the form:

    path <- "path/that/causes/issue"
    file.exists(path)

Alternatively, if you can distill this into a minimally-reproducible
example that does require renv, then you should report that to the
maintainer of renv (me), not this mailing list.

Best,
Kevin

On Wed, Jun 10, 2020 at 4:55 AM Dirk Eddelbuettel <edd at debian.org> wrote:
>
>
> On 10 June 2020 at 13:06, Juan Telleria Ruiz de Aguirre wrote:
> | I am having an issue with the renv package and R 4.0.1, which I
> | suspect is related to base R and not the renv package itself, as with
> | R 3.6.3 such an "error" does not appear.
>
> So a bug in `renv` as it does not account for changes in R 4.0.0 ?
>
> Stuff happens. I just fixed an 'change in R 4.0.0' for one small aspect of
> Rcpp(Armadillo) (namely the change in package.skeleton() and NAMESPACE).
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jte||er|@@rproject @end|ng |rom gm@||@com  Wed Jun 10 23:00:48 2020
From: jte||er|@@rproject @end|ng |rom gm@||@com (Juan Telleria Ruiz de Aguirre)
Date: Wed, 10 Jun 2020 23:00:48 +0200
Subject: [Rd] 
 Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
In-Reply-To: <CAJXgQP2UTW2pKS3_kGOH067oQLnhU6xmd=zVSxAJujQp+hcYjQ@mail.gmail.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
 <24288.51761.87476.260587@rob.eddelbuettel.com>
 <CAJXgQP2UTW2pKS3_kGOH067oQLnhU6xmd=zVSxAJujQp+hcYjQ@mail.gmail.com>
Message-ID: <CAJXDcw1g79_ZVTBGkwNMd1VaRnDfLj=J7-P_V9D9qQvNcKSoig@mail.gmail.com>

Thank you Kevin, just checked that the error is solved in the latest
development version of "renv", and now it works as expected with R
4.0.1:

https://github.com/rstudio/renv/commit/976ae7af6dc348af30eaf2893d886f132a76aba0

Sorry for posting in r-devel, I was not sure if it was a R or "renv"
error due to different behaviour in different versions of R 4.0.1 and
R 3.6.3 for conversion from UTF16-LE to UTF-8 encoding.

Will provide a better reproducible example next time and traceback the
error with options(error=recover)) to make sure.

Thanks,
Juan


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Jun 10 13:43:43 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 10 Jun 2020 13:43:43 +0200
Subject: [Rd] 
 Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
In-Reply-To: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
Message-ID: <857dde35-259a-cff8-27b4-4bdc098ccb31-3957@gmail.com>


Dear Juan,

I don't see what is the problem from your report. Please try to create a 
minimal but complete reproducible example that does not use the renv 
package. Perhaps you could use the R debugger (e.g. via 
options(error=recover)) to find out what is the argument that 
file.exists() has been called with. And then you could try just to call 
file.exists() directly with that argument to trigger the problem.

It may be that the argument has been corrupted/is invalid in the current 
native encoding. If that is the case, the next step would be to find out 
who corrupted it (renv, R, something else). The error is displayed when 
a path name cannot be converted from the current native encoding to 
UTF16-LE.

The experimental support for UTF-8 as native encoding on Windows 10 is 
only available in a custom build of R, like the one I linked from my 
blog post.

Thanks
Tomas



On 6/10/20 1:06 PM, Juan Telleria Ruiz de Aguirre wrote:
> Dear R Developers,
>
> I am having an issue with the renv package and R 4.0.1, which I
> suspect is related to base R and not the renv package itself, as with
> R 3.6.3 such an "error" does not appear.
>
> The error is raised by a file.exists() path, and path
> "C:\Users\J-tel\Documents", which in R 3.6.3 is read correctly, but in
> R 4.0.1 fails (Probably because of the "-" symbol), and I suspect it
> might be related with the new UTF-8 usage on Windows 10?
> (https://developer.r-project.org/Blog/public/2020/05/02/utf-8-support-on-windows/index.html)
>
> I have also checked file.exists() function and its internals, and seem
> not to have happened changes in the meanwhile within them:
>
> https://github.com/wch/r-source/blob/0e3b3182f87a60af4b0293a5410dde680b910f49/src/library/base/R/files.R
> https://github.com/search?q=SEXP%20attribute_hidden%20do_fileexists+repo:wch/r-source&type=Code
>
> Error Details:
>
>> renv::init()
> Error in file.exists(children) :
>    file name conversion problem -- name too long?
>> traceback()
> 14: file.exists(children)
> 13: renv_dependencies_find_dir_children(path, root)
> 12: renv_dependencies_find_dir(path, root)
> 11: FUN(X[[i]], ...)
> 10: lapply(path, renv_dependencies_find_impl, root = root)
> 9: renv_dependencies_find(path, root)
> 8: (function (path = getwd(), root = NULL, ..., progress = TRUE,
>         errors = c("reported", "fatal", "ignored"), dev = FALSE)
>     {
>         path <- renv_path_normalize(path, winslash = "/", mustWork = TRUE)
>         root <- root %||% renv_dependencies_root(path)
>         if (exists(path, envir = `_renv_dependencies`))
>             return(get(path, envir = `_renv_dependencies`))
>         renv_dependencies_begin(root = root)
>         on.exit(renv_dependencies_end(), add = TRUE)
>         dots <- list(...)
>         if (identical(dots[["quiet"]], TRUE)) {
>             progress <- FALSE
>             errors <- "ignored"
>         }
>         files <- renv_dependencies_find(path, root)
>         deps <- renv_dependencies_discover(files, progress, errors)
>         renv_dependencies_report(errors)
>         deps
>     })(path, progress = FALSE, errors = errors, dev = TRUE)
> 7: eval(call, envir = parent.frame(2))
> 6: eval(call, envir = parent.frame(2))
> 5: delegate(renv_dependencies_impl)
> 4: dependencies(path, progress = FALSE, errors = errors, dev = TRUE)
> 3: withCallingHandlers(dependencies(path, progress = FALSE, errors = errors,
>         dev = TRUE), renv.dependencies.error =
> renv_dependencies_error_handler(message,
>         errors))
> 2: renv_dependencies_scope(project, action = "init")
> 1: renv::init()
>
>> renv::diagnostics()
> Diagnostics Report -- renv [0.10.0]
> ===================================
>
> # Session Info =======================
> R version 4.0.1 (2020-06-06)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18362)
>
> Matrix products: default
>
> locale:
> [1] LC_COLLATE=Spanish_Spain.1252  LC_CTYPE=Spanish_Spain.1252
> [3] LC_MONETARY=Spanish_Spain.1252 LC_NUMERIC=C
> [5] LC_TIME=Spanish_Spain.1252
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> other attached packages:
> [1] renv_0.10.0
>
> loaded via a namespace (and not attached):
>   [1] compiler_4.0.1   rsconnect_0.8.16 htmltools_0.4.0  tools_4.0.1
>   [5] yaml_2.2.1       Rcpp_1.0.4.6     rmarkdown_2.2    knitr_1.28
>   [9] xfun_0.14        digest_0.6.25    packrat_0.5.0    rlang_0.4.6
> [13] evaluate_0.14
>
> # Project ============================
> Project path: "~/Test2"
>
> # Status =============================
>
> # Lockfile ===========================
> This project has not yet been snapshotted: 'renv.lock' does not exist.
>
> # Library ============================
> The project library "~/Test2/renv/library/R-4.0/x86_64-w64-mingw32"
> does not exist.
>
> # Dependencies =======================
>
> # User Profile =======================
> [no user profile detected]
>
> # Settings ===========================
> List of 6
>   $ external.libraries       : chr(0)
>   $ ignored.packages         : chr(0)
>   $ package.dependency.fields: chr [1:3] "Imports" "Depends" "LinkingTo"
>   $ snapshot.type            : chr "implicit"
>   $ use.cache                : logi TRUE
>   $ vcs.ignore.library       : logi TRUE
>
> # Options ============================
> List of 1
>   $ renv.verbose: logi TRUE
>
> # Environment Variables ==============
> HOME        = C:\Users\J-tel\OneDrive\Documents
> LANG        = <NA>
> R_LIBS      = <NA>
> R_LIBS_SITE = <NA>
> R_LIBS_USER = C:/Users/J-tel/OneDrive/Documents/R/win-library/4.0
>
> # PATH ===============================
> - C:\rtools40\usr\bin
> - C:\Program Files\R\R-4.0.1\bin\x64
> - C:\ProgramData\Miniconda3
> - C:\ProgramData\Miniconda3\Library\mingw-w64\bin
> - C:\ProgramData\Miniconda3\Library\usr\bin
> - C:\ProgramData\Miniconda3\Library\bin
> - C:\ProgramData\Miniconda3\Scripts
> - C:\ProgramData\Oracle\Java\javapath
> - C:\WINDOWS\system32
> - C:\WINDOWS
> - C:\WINDOWS\System32\Wbem
> - C:\WINDOWS\System32\WindowsPowerShell\v1.0\
> - C:\WINDOWS\System32\OpenSSH\
> - C:\Program Files\MiKTeX 2.9\miktex\bin\x64\
> - C:\ProgramData\Miniconda3\Scripts\conda.exe
>
> # Cache ==============================
> There are a total of 0 package(s) installed in the renv cache.
> Cache path: "C:/Users/J-tel/AppData/Local/renv/cache/v5/R-4.0/x86_64-w64-mingw32"
>
> System Information:
>
>> R.Version()
> $platform
> [1] "x86_64-w64-mingw32"
>
> $arch
> [1] "x86_64"
>
> $os
> [1] "mingw32"
>
> $system
> [1] "x86_64, mingw32"
>
> $status
> [1] ""
>
> $major
> [1] "4"
>
> $minor
> [1] "0.1"
>
> $year
> [1] "2020"
>
> $month
> [1] "06"
>
> $day
> [1] "06"
>
> $`svn rev`
> [1] "78648"
>
> $language
> [1] "R"
>
> $version.string
> [1] "R version 4.0.1 (2020-06-06)"
>
> $nickname
> [1] "See Things Now"
>
> Thank you,
> Juan
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From therne@u @end|ng |rom m@yo@edu  Thu Jun 11 16:57:35 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Thu, 11 Jun 2020 09:57:35 -0500
Subject: [Rd] CRAN checks and ASAN
Message-ID: <28fddd$du13jr@ironport10.mayo.edu>

I have a version of R-devel on my development box that has the address sanitizer turned 
on.?? This was instrumental in finding a pair of subtle memory issues.? (I had read, but 
never written, one element past the end of an array, which caused issues on some 
architectures.)

1. I now get a end-of-job messsages from R CMD check survival3.2-3.tar.gz about leaks in 
main/eval.c. ?? They don't appear in 00config.out or 00install.out.
 ?I assume that I can ignore these?

2. When I run my long 'check all packages that depend on survival' job, a lot of package 
fail with sanitizer leaks.?? Again, not my problem?
If so, I just need to recomple R without the ASAN tags and try again.


Terry T.



	[[alternative HTML version deleted]]


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Thu Jun 11 17:32:15 2020
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Thu, 11 Jun 2020 16:32:15 +0100
Subject: [Rd] CRAN checks and ASAN
In-Reply-To: <28fddd$du13jr@ironport10.mayo.edu>
References: <28fddd$du13jr@ironport10.mayo.edu>
Message-ID: <cc1fa834-1659-097a-5505-5de2cae8ee72@stats.ox.ac.uk>

On 11/06/2020 15:57, Therneau, Terry M., Ph.D. via R-devel wrote:
> I have a version of R-devel on my development box that has the address sanitizer turned
> on.?? This was instrumental in finding a pair of subtle memory issues.? (I had read, but
> never written, one element past the end of an array, which caused issues on some
> architectures.)
> 
> 1. I now get a end-of-job messsages from R CMD check survival3.2-3.tar.gz about leaks in
> main/eval.c. ?? They don't appear in 00config.out or 00install.out.
>   ?I assume that I can ignore these?
> 
> 2. When I run my long 'check all packages that depend on survival' job, a lot of package
> fail with sanitizer leaks.?? Again, not my problem?
> If so, I just need to recomple R without the ASAN tags and try again.

The manual suggests you disable the Leak Sanitizer (nowadays by default 
enabled by ASAN): valgrind is a better way of detecting memory leaks. 
We know R has 'leaks': it does not release memory in use right up to the 
end (and some OS things do too).


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From rwo|d|ord @end|ng |rom uw@ter|oo@c@  Thu Jun 11 23:04:49 2020
From: rwo|d|ord @end|ng |rom uw@ter|oo@c@ (Wayne Oldford)
Date: Thu, 11 Jun 2020 21:04:49 +0000
Subject: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
Message-ID: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>

Hello everyone

I am not sure when this appeared
(sometime post R 3.5.0 and after I switched to Mac OS Catalina).

I do not think it happens on all platforms (e.g. seems to work on windows).

But it seems that

      tkimage.create()

no longer works on a Mac for all png files.


(It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)

Any help would be appreciated.

- Wayne


R.W. Oldford
math.uwaterloo.ca/~rwoldfor




> library(tcltk)

> fname <- "Rplot.png"
> png(filename = fname, width = 500, height = 500)
> hist(rnorm(20))
> dev.off()

> tkimage.create("photo", file = fname)

Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
  [tcl] encountered an unsupported criticial chunk type "eXIf".


______________________________

> R.version
               _
platform       x86_64-apple-darwin17.0
arch           x86_64
os             darwin17.0
system         x86_64, darwin17.0
status
major          4
minor          0.0
year           2020
month          04
day            24
svn rev        78286
language       R
version.string R version 4.0.0 (2020-04-24)
nickname       Arbor Day

___________________________

macOS Catalina V 10.15.5

___________________________________________________


	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Thu Jun 11 23:56:15 2020
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Thu, 11 Jun 2020 23:56:15 +0200
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
Message-ID: <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>

Happy enough for me on Mojave. 

On the off chance that you are picking up an old Tcl, do you see this?

> tcl("info","tclversion")
<Tcl> 8.6 


-pd

> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
> 
> Hello everyone
> 
> I am not sure when this appeared
> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
> 
> I do not think it happens on all platforms (e.g. seems to work on windows).
> 
> But it seems that
> 
>      tkimage.create()
> 
> no longer works on a Mac for all png files.
> 
> 
> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
> 
> Any help would be appreciated.
> 
> - Wayne
> 
> 
> R.W. Oldford
> math.uwaterloo.ca/~rwoldfor
> 
> 
> 
> 
>> library(tcltk)
> 
>> fname <- "Rplot.png"
>> png(filename = fname, width = 500, height = 500)
>> hist(rnorm(20))
>> dev.off()
> 
>> tkimage.create("photo", file = fname)
> 
> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
>  [tcl] encountered an unsupported criticial chunk type "eXIf".
> 
> 
> ______________________________
> 
>> R.version
>               _
> platform       x86_64-apple-darwin17.0
> arch           x86_64
> os             darwin17.0
> system         x86_64, darwin17.0
> status
> major          4
> minor          0.0
> year           2020
> month          04
> day            24
> svn rev        78286
> language       R
> version.string R version 4.0.0 (2020-04-24)
> nickname       Arbor Day
> 
> ___________________________
> 
> macOS Catalina V 10.15.5
> 
> ___________________________________________________
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From rwo|d|ord @end|ng |rom uw@ter|oo@c@  Fri Jun 12 00:43:07 2020
From: rwo|d|ord @end|ng |rom uw@ter|oo@c@ (Wayne Oldford)
Date: Thu, 11 Jun 2020 22:43:07 +0000
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>,
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
Message-ID: <BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>

Yes.
I seem to be picking up
<Tcl>  8.6
I should have noted that.

Use to work for me too in Mojave.
I have the sneaky feeling that Catalina is the problem.

R. W. Oldford

https://math.uwaterloo.ca/~rwoldfor

________________________________
From: Peter Dalgaard <pdalgd at gmail.com>
Sent: Thursday, June 11, 2020 5:56:15 PM
To: Wayne Oldford <rwoldford at uwaterloo.ca>
Cc: r-devel at r-project.org <r-devel at r-project.org>
Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"

Happy enough for me on Mojave.

On the off chance that you are picking up an old Tcl, do you see this?

> tcl("info","tclversion")
<Tcl> 8.6


-pd

> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>
> Hello everyone
>
> I am not sure when this appeared
> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
>
> I do not think it happens on all platforms (e.g. seems to work on windows).
>
> But it seems that
>
>      tkimage.create()
>
> no longer works on a Mac for all png files.
>
>
> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
>
> Any help would be appreciated.
>
> - Wayne
>
>
> R.W. Oldford
> math.uwaterloo.ca/~rwoldfor
>
>
>
>
>> library(tcltk)
>
>> fname <- "Rplot.png"
>> png(filename = fname, width = 500, height = 500)
>> hist(rnorm(20))
>> dev.off()
>
>> tkimage.create("photo", file = fname)
>
> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
>  [tcl] encountered an unsupported criticial chunk type "eXIf".
>
>
> ______________________________
>
>> R.version
>               _
> platform       x86_64-apple-darwin17.0
> arch           x86_64
> os             darwin17.0
> system         x86_64, darwin17.0
> status
> major          4
> minor          0.0
> year           2020
> month          04
> day            24
> svn rev        78286
> language       R
> version.string R version 4.0.0 (2020-04-24)
> nickname       Arbor Day
>
> ___________________________
>
> macOS Catalina V 10.15.5
>
> ___________________________________________________
>
>
>        [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

--
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com










	[[alternative HTML version deleted]]


From j|ox @end|ng |rom mcm@@ter@c@  Fri Jun 12 01:54:06 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Thu, 11 Jun 2020 23:54:06 +0000
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
Message-ID: <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>

Dear Wayne and Peter,

FWIW, I observe exactly the same problem in Catalina. The error and my session info:

-------- snip --------

> tkimage.create("photo", file = fname)
Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") : 
  [tcl] encountered an unsupported criticial chunk type "eXIf".

> sessionInfo()
R version 4.0.0 (2020-04-24)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Catalina 10.15.5

Matrix products: default
BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8

attached base packages:
[1] tcltk     stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_4.0.0 tools_4.0.0   

-------- snip --------

This is from RStudio but I see the same thing in the R.app.

I hope this is of some help,
 John

 -----------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Jun 11, 2020, at 6:43 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
> 
> Yes.
> I seem to be picking up
> <Tcl>  8.6
> I should have noted that.
> 
> Use to work for me too in Mojave.
> I have the sneaky feeling that Catalina is the problem.
> 
> R. W. Oldford
> 
> https://math.uwaterloo.ca/~rwoldfor
> 
> ________________________________
> From: Peter Dalgaard <pdalgd at gmail.com>
> Sent: Thursday, June 11, 2020 5:56:15 PM
> To: Wayne Oldford <rwoldford at uwaterloo.ca>
> Cc: r-devel at r-project.org <r-devel at r-project.org>
> Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
> 
> Happy enough for me on Mojave.
> 
> On the off chance that you are picking up an old Tcl, do you see this?
> 
>> tcl("info","tclversion")
> <Tcl> 8.6
> 
> 
> -pd
> 
>> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>> 
>> Hello everyone
>> 
>> I am not sure when this appeared
>> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
>> 
>> I do not think it happens on all platforms (e.g. seems to work on windows).
>> 
>> But it seems that
>> 
>>     tkimage.create()
>> 
>> no longer works on a Mac for all png files.
>> 
>> 
>> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
>> 
>> Any help would be appreciated.
>> 
>> - Wayne
>> 
>> 
>> R.W. Oldford
>> math.uwaterloo.ca/~rwoldfor
>> 
>> 
>> 
>> 
>>> library(tcltk)
>> 
>>> fname <- "Rplot.png"
>>> png(filename = fname, width = 500, height = 500)
>>> hist(rnorm(20))
>>> dev.off()
>> 
>>> tkimage.create("photo", file = fname)
>> 
>> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
>> [tcl] encountered an unsupported criticial chunk type "eXIf".
>> 
>> 
>> ______________________________
>> 
>>> R.version
>>              _
>> platform       x86_64-apple-darwin17.0
>> arch           x86_64
>> os             darwin17.0
>> system         x86_64, darwin17.0
>> status
>> major          4
>> minor          0.0
>> year           2020
>> month          04
>> day            24
>> svn rev        78286
>> language       R
>> version.string R version 4.0.0 (2020-04-24)
>> nickname       Arbor Day
>> 
>> ___________________________
>> 
>> macOS Catalina V 10.15.5
>> 
>> ___________________________________________________
>> 
>> 
>>       [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



 

From rwo|d|ord @end|ng |rom uw@ter|oo@c@  Fri Jun 12 02:24:00 2020
From: rwo|d|ord @end|ng |rom uw@ter|oo@c@ (Wayne Oldford)
Date: Fri, 12 Jun 2020 00:24:00 +0000
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
Message-ID: <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>

I don't know what has changed with Catalina

But I just tried my tk console from the shell command tkcon 
And got the following error. 
Here is my shell:

$ tkcon 

  dyld: Library not loaded: /usr/local/lib:/opt/X11/lib/libtk8.6.dylib
      Referenced from: /usr/local/bin/wish
      Reason: image not found
    Abort trap: 6


I don't know whether this is a red herring or not, but the 
Console fails to boot.

John does it work for you?

Not sure whether Python has the same trouble.  Kind of old info at https://www.python.org/download/mac/tcltk/ 




?-----Original Message-----
From: "Fox, John" <jfox at mcmaster.ca>
Date: Thursday, June 11, 2020 at 7:54 PM
To: Wayne Oldford <rwoldford at uwaterloo.ca>
Cc: Peter Dalgaard <pdalgd at gmail.com>, "r-devel at r-project.org" <r-devel at r-project.org>
Subject: Re: [Rd]  tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"

    Dear Wayne and Peter,
    
    FWIW, I observe exactly the same problem in Catalina. The error and my session info:
    
    -------- snip --------
    
    > tkimage.create("photo", file = fname)
    Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") : 
      [tcl] encountered an unsupported criticial chunk type "eXIf".
    
    > sessionInfo()
    R version 4.0.0 (2020-04-24)
    Platform: x86_64-apple-darwin17.0 (64-bit)
    Running under: macOS Catalina 10.15.5
    
    Matrix products: default
    BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
    LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
    
    locale:
    [1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8
    
    attached base packages:
    [1] tcltk     stats     graphics  grDevices utils     datasets  methods   base     
    
    loaded via a namespace (and not attached):
    [1] compiler_4.0.0 tools_4.0.0   
    
    -------- snip --------
    
    This is from RStudio but I see the same thing in the R.app.
    
    I hope this is of some help,
     John
    
     -----------------------------
      John Fox, Professor Emeritus
      McMaster University
      Hamilton, Ontario, Canada
      Web: http::/socserv.mcmaster.ca/jfox
    
    > On Jun 11, 2020, at 6:43 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
    > 
    > Yes.
    > I seem to be picking up
    > <Tcl>  8.6
    > I should have noted that.
    > 
    > Use to work for me too in Mojave.
    > I have the sneaky feeling that Catalina is the problem.
    > 
    > R. W. Oldford
    > 
    > https://math.uwaterloo.ca/~rwoldfor
    > 
    > ________________________________
    > From: Peter Dalgaard <pdalgd at gmail.com>
    > Sent: Thursday, June 11, 2020 5:56:15 PM
    > To: Wayne Oldford <rwoldford at uwaterloo.ca>
    > Cc: r-devel at r-project.org <r-devel at r-project.org>
    > Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
    > 
    > Happy enough for me on Mojave.
    > 
    > On the off chance that you are picking up an old Tcl, do you see this?
    > 
    >> tcl("info","tclversion")
    > <Tcl> 8.6
    > 
    > 
    > -pd
    > 
    >> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
    >> 
    >> Hello everyone
    >> 
    >> I am not sure when this appeared
    >> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
    >> 
    >> I do not think it happens on all platforms (e.g. seems to work on windows).
    >> 
    >> But it seems that
    >> 
    >>     tkimage.create()
    >> 
    >> no longer works on a Mac for all png files.
    >> 
    >> 
    >> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
    >> 
    >> Any help would be appreciated.
    >> 
    >> - Wayne
    >> 
    >> 
    >> R.W. Oldford
    >> math.uwaterloo.ca/~rwoldfor
    >> 
    >> 
    >> 
    >> 
    >>> library(tcltk)
    >> 
    >>> fname <- "Rplot.png"
    >>> png(filename = fname, width = 500, height = 500)
    >>> hist(rnorm(20))
    >>> dev.off()
    >> 
    >>> tkimage.create("photo", file = fname)
    >> 
    >> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
    >> [tcl] encountered an unsupported criticial chunk type "eXIf".
    >> 
    >> 
    >> ______________________________
    >> 
    >>> R.version
    >>              _
    >> platform       x86_64-apple-darwin17.0
    >> arch           x86_64
    >> os             darwin17.0
    >> system         x86_64, darwin17.0
    >> status
    >> major          4
    >> minor          0.0
    >> year           2020
    >> month          04
    >> day            24
    >> svn rev        78286
    >> language       R
    >> version.string R version 4.0.0 (2020-04-24)
    >> nickname       Arbor Day
    >> 
    >> ___________________________
    >> 
    >> macOS Catalina V 10.15.5
    >> 
    >> ___________________________________________________
    >> 
    >> 
    >>       [[alternative HTML version deleted]]
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    > 
    > --
    > Peter Dalgaard, Professor,
    > Center for Statistics, Copenhagen Business School
    > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
    > Phone: (+45)38153501
    > Office: A 4.23
    > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
    > 
    > 
    > 
    > 
    > 
    > 
    > 
    > 
    > 
    > 
    > 	[[alternative HTML version deleted]]
    > 
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel
    
    
    
     


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Jun 12 03:00:09 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 12 Jun 2020 13:00:09 +1200
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
 <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
Message-ID: <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>

Wayne,

that one is unrelated, but interesting - you can fix it with 

sudo install_name_tool -change \
  /usr/local/lib:/opt/X11/lib/libtk8.6.dylib \
  /usr/local/lib/libtk8.6.dylib \
  /usr/local/bin/wish8.6 

There is a bug in tcltk with IDs on the libraries which I have worked-around for R, but not for wish.

Back to the original question - do you have any example of a file that doesn't work so I could test? Exif chunks are fairly rare in PNG and are a more late extension so I couldn't find any examples.

Thanks,
Simon


> On 12/06/2020, at 12:24 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
> 
> I don't know what has changed with Catalina
> 
> But I just tried my tk console from the shell command tkcon 
> And got the following error. 
> Here is my shell:
> 
> $ tkcon 
> 
>  dyld: Library not loaded: /usr/local/lib:/opt/X11/lib/libtk8.6.dylib
>      Referenced from: /usr/local/bin/wish
>      Reason: image not found
>    Abort trap: 6
> 
> 
> I don't know whether this is a red herring or not, but the 
> Console fails to boot.
> 
> John does it work for you?
> 
> Not sure whether Python has the same trouble.  Kind of old info at https://www.python.org/download/mac/tcltk/ 
> 
> 
> 
> 
> ?-----Original Message-----
> From: "Fox, John" <jfox at mcmaster.ca>
> Date: Thursday, June 11, 2020 at 7:54 PM
> To: Wayne Oldford <rwoldford at uwaterloo.ca>
> Cc: Peter Dalgaard <pdalgd at gmail.com>, "r-devel at r-project.org" <r-devel at r-project.org>
> Subject: Re: [Rd]  tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
> 
>    Dear Wayne and Peter,
> 
>    FWIW, I observe exactly the same problem in Catalina. The error and my session info:
> 
>    -------- snip --------
> 
>> tkimage.create("photo", file = fname)
>    Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") : 
>      [tcl] encountered an unsupported criticial chunk type "eXIf".
> 
>> sessionInfo()
>    R version 4.0.0 (2020-04-24)
>    Platform: x86_64-apple-darwin17.0 (64-bit)
>    Running under: macOS Catalina 10.15.5
> 
>    Matrix products: default
>    BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>    LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
> 
>    locale:
>    [1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8
> 
>    attached base packages:
>    [1] tcltk     stats     graphics  grDevices utils     datasets  methods   base     
> 
>    loaded via a namespace (and not attached):
>    [1] compiler_4.0.0 tools_4.0.0   
> 
>    -------- snip --------
> 
>    This is from RStudio but I see the same thing in the R.app.
> 
>    I hope this is of some help,
>     John
> 
>     -----------------------------
>      John Fox, Professor Emeritus
>      McMaster University
>      Hamilton, Ontario, Canada
>      Web: http::/socserv.mcmaster.ca/jfox
> 
>> On Jun 11, 2020, at 6:43 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>> 
>> Yes.
>> I seem to be picking up
>> <Tcl>  8.6
>> I should have noted that.
>> 
>> Use to work for me too in Mojave.
>> I have the sneaky feeling that Catalina is the problem.
>> 
>> R. W. Oldford
>> 
>> https://math.uwaterloo.ca/~rwoldfor
>> 
>> ________________________________
>> From: Peter Dalgaard <pdalgd at gmail.com>
>> Sent: Thursday, June 11, 2020 5:56:15 PM
>> To: Wayne Oldford <rwoldford at uwaterloo.ca>
>> Cc: r-devel at r-project.org <r-devel at r-project.org>
>> Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
>> 
>> Happy enough for me on Mojave.
>> 
>> On the off chance that you are picking up an old Tcl, do you see this?
>> 
>>> tcl("info","tclversion")
>> <Tcl> 8.6
>> 
>> 
>> -pd
>> 
>>> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>>> 
>>> Hello everyone
>>> 
>>> I am not sure when this appeared
>>> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
>>> 
>>> I do not think it happens on all platforms (e.g. seems to work on windows).
>>> 
>>> But it seems that
>>> 
>>>    tkimage.create()
>>> 
>>> no longer works on a Mac for all png files.
>>> 
>>> 
>>> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
>>> 
>>> Any help would be appreciated.
>>> 
>>> - Wayne
>>> 
>>> 
>>> R.W. Oldford
>>> math.uwaterloo.ca/~rwoldfor
>>> 
>>> 
>>> 
>>> 
>>>> library(tcltk)
>>> 
>>>> fname <- "Rplot.png"
>>>> png(filename = fname, width = 500, height = 500)
>>>> hist(rnorm(20))
>>>> dev.off()
>>> 
>>>> tkimage.create("photo", file = fname)
>>> 
>>> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
>>> [tcl] encountered an unsupported criticial chunk type "eXIf".
>>> 
>>> 
>>> ______________________________
>>> 
>>>> R.version
>>>             _
>>> platform       x86_64-apple-darwin17.0
>>> arch           x86_64
>>> os             darwin17.0
>>> system         x86_64, darwin17.0
>>> status
>>> major          4
>>> minor          0.0
>>> year           2020
>>> month          04
>>> day            24
>>> svn rev        78286
>>> language       R
>>> version.string R version 4.0.0 (2020-04-24)
>>> nickname       Arbor Day
>>> 
>>> ___________________________
>>> 
>>> macOS Catalina V 10.15.5
>>> 
>>> ___________________________________________________
>>> 
>>> 
>>>      [[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> --
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 	[[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 
> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Jun 12 03:14:53 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 12 Jun 2020 13:14:53 +1200
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
 <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
 <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
Message-ID: <0CDB610D-4D4C-4117-A69A-1A3072A637BA@R-project.org>

Some googling suggests that this is an issue in tcltk which doesn't support png files with Exif tags. Are you sure this ever worked? This doesn't seem to be related to the macOS version since it's a feature tcltk, not the system.

I had no issue using the png package, so you could simply remove any offending chunks with

writePNG("test.png",readPNG("exIf.png", TRUE,TRUE))

then the output work with tcltk.

Cheers,
Simon


> On 12/06/2020, at 1:00 PM, Simon Urbanek <simon.urbanek at r-project.org> wrote:
> 
> Wayne,
> 
> that one is unrelated, but interesting - you can fix it with 
> 
> sudo install_name_tool -change \
>  /usr/local/lib:/opt/X11/lib/libtk8.6.dylib \
>  /usr/local/lib/libtk8.6.dylib \
>  /usr/local/bin/wish8.6 
> 
> There is a bug in tcltk with IDs on the libraries which I have worked-around for R, but not for wish.
> 
> Back to the original question - do you have any example of a file that doesn't work so I could test? Exif chunks are fairly rare in PNG and are a more late extension so I couldn't find any examples.
> 
> Thanks,
> Simon
> 
> 
>> On 12/06/2020, at 12:24 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>> 
>> I don't know what has changed with Catalina
>> 
>> But I just tried my tk console from the shell command tkcon 
>> And got the following error. 
>> Here is my shell:
>> 
>> $ tkcon 
>> 
>> dyld: Library not loaded: /usr/local/lib:/opt/X11/lib/libtk8.6.dylib
>>     Referenced from: /usr/local/bin/wish
>>     Reason: image not found
>>   Abort trap: 6
>> 
>> 
>> I don't know whether this is a red herring or not, but the 
>> Console fails to boot.
>> 
>> John does it work for you?
>> 
>> Not sure whether Python has the same trouble.  Kind of old info at https://www.python.org/download/mac/tcltk/ 
>> 
>> 
>> 
>> 
>> ?-----Original Message-----
>> From: "Fox, John" <jfox at mcmaster.ca>
>> Date: Thursday, June 11, 2020 at 7:54 PM
>> To: Wayne Oldford <rwoldford at uwaterloo.ca>
>> Cc: Peter Dalgaard <pdalgd at gmail.com>, "r-devel at r-project.org" <r-devel at r-project.org>
>> Subject: Re: [Rd]  tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
>> 
>>   Dear Wayne and Peter,
>> 
>>   FWIW, I observe exactly the same problem in Catalina. The error and my session info:
>> 
>>   -------- snip --------
>> 
>>> tkimage.create("photo", file = fname)
>>   Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") : 
>>     [tcl] encountered an unsupported criticial chunk type "eXIf".
>> 
>>> sessionInfo()
>>   R version 4.0.0 (2020-04-24)
>>   Platform: x86_64-apple-darwin17.0 (64-bit)
>>   Running under: macOS Catalina 10.15.5
>> 
>>   Matrix products: default
>>   BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>>   LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
>> 
>>   locale:
>>   [1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8
>> 
>>   attached base packages:
>>   [1] tcltk     stats     graphics  grDevices utils     datasets  methods   base     
>> 
>>   loaded via a namespace (and not attached):
>>   [1] compiler_4.0.0 tools_4.0.0   
>> 
>>   -------- snip --------
>> 
>>   This is from RStudio but I see the same thing in the R.app.
>> 
>>   I hope this is of some help,
>>    John
>> 
>>    -----------------------------
>>     John Fox, Professor Emeritus
>>     McMaster University
>>     Hamilton, Ontario, Canada
>>     Web: http::/socserv.mcmaster.ca/jfox
>> 
>>> On Jun 11, 2020, at 6:43 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>>> 
>>> Yes.
>>> I seem to be picking up
>>> <Tcl>  8.6
>>> I should have noted that.
>>> 
>>> Use to work for me too in Mojave.
>>> I have the sneaky feeling that Catalina is the problem.
>>> 
>>> R. W. Oldford
>>> 
>>> https://math.uwaterloo.ca/~rwoldfor
>>> 
>>> ________________________________
>>> From: Peter Dalgaard <pdalgd at gmail.com>
>>> Sent: Thursday, June 11, 2020 5:56:15 PM
>>> To: Wayne Oldford <rwoldford at uwaterloo.ca>
>>> Cc: r-devel at r-project.org <r-devel at r-project.org>
>>> Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
>>> 
>>> Happy enough for me on Mojave.
>>> 
>>> On the off chance that you are picking up an old Tcl, do you see this?
>>> 
>>>> tcl("info","tclversion")
>>> <Tcl> 8.6
>>> 
>>> 
>>> -pd
>>> 
>>>> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>>>> 
>>>> Hello everyone
>>>> 
>>>> I am not sure when this appeared
>>>> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
>>>> 
>>>> I do not think it happens on all platforms (e.g. seems to work on windows).
>>>> 
>>>> But it seems that
>>>> 
>>>>   tkimage.create()
>>>> 
>>>> no longer works on a Mac for all png files.
>>>> 
>>>> 
>>>> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
>>>> 
>>>> Any help would be appreciated.
>>>> 
>>>> - Wayne
>>>> 
>>>> 
>>>> R.W. Oldford
>>>> math.uwaterloo.ca/~rwoldfor
>>>> 
>>>> 
>>>> 
>>>> 
>>>>> library(tcltk)
>>>> 
>>>>> fname <- "Rplot.png"
>>>>> png(filename = fname, width = 500, height = 500)
>>>>> hist(rnorm(20))
>>>>> dev.off()
>>>> 
>>>>> tkimage.create("photo", file = fname)
>>>> 
>>>> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
>>>> [tcl] encountered an unsupported criticial chunk type "eXIf".
>>>> 
>>>> 
>>>> ______________________________
>>>> 
>>>>> R.version
>>>>            _
>>>> platform       x86_64-apple-darwin17.0
>>>> arch           x86_64
>>>> os             darwin17.0
>>>> system         x86_64, darwin17.0
>>>> status
>>>> major          4
>>>> minor          0.0
>>>> year           2020
>>>> month          04
>>>> day            24
>>>> svn rev        78286
>>>> language       R
>>>> version.string R version 4.0.0 (2020-04-24)
>>>> nickname       Arbor Day
>>>> 
>>>> ___________________________
>>>> 
>>>> macOS Catalina V 10.15.5
>>>> 
>>>> ___________________________________________________
>>>> 
>>>> 
>>>>     [[alternative HTML version deleted]]
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> --
>>> Peter Dalgaard, Professor,
>>> Center for Statistics, Copenhagen Business School
>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>> Phone: (+45)38153501
>>> Office: A 4.23
>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 	[[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
>> 
>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From j|ox @end|ng |rom mcm@@ter@c@  Fri Jun 12 04:49:36 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Fri, 12 Jun 2020 02:49:36 +0000
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
 <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
 <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
Message-ID: <52B0A0EF-3BF4-4010-B21A-CD85B0C4B33E@mcmaster.ca>

Dear Simon,

> On Jun 11, 2020, at 9:00 PM, Simon Urbanek <simon.urbanek at r-project.org> wrote:
> 
> Wayne,
> 
> that one is unrelated, but interesting - you can fix it with 
> 
> sudo install_name_tool -change \
>  /usr/local/lib:/opt/X11/lib/libtk8.6.dylib \
>  /usr/local/lib/libtk8.6.dylib \
>  /usr/local/bin/wish8.6 
> 
> There is a bug in tcltk with IDs on the libraries which I have worked-around for R, but not for wish.
> 
> Back to the original question - do you have any example of a file that doesn't work so I could test? Exif chunks are fairly rare in PNG and are a more late extension so I couldn't find any examples.

The code in Wayne's original message (copied below) generated the offending file:

library(tcltk)

fname <- "Rplot.png"
png(filename = fname, width = 500, height = 500)
hist(rnorm(20))
dev.off()

tkimage.create("photo", file = fname)

Best,
 John


> 
> Thanks,
> Simon
> 
> 
>> On 12/06/2020, at 12:24 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>> 
>> I don't know what has changed with Catalina
>> 
>> But I just tried my tk console from the shell command tkcon 
>> And got the following error. 
>> Here is my shell:
>> 
>> $ tkcon 
>> 
>> dyld: Library not loaded: /usr/local/lib:/opt/X11/lib/libtk8.6.dylib
>>     Referenced from: /usr/local/bin/wish
>>     Reason: image not found
>>   Abort trap: 6
>> 
>> 
>> I don't know whether this is a red herring or not, but the 
>> Console fails to boot.
>> 
>> John does it work for you?
>> 
>> Not sure whether Python has the same trouble.  Kind of old info at https://www.python.org/download/mac/tcltk/ 
>> 
>> 
>> 
>> 
>> ?-----Original Message-----
>> From: "Fox, John" <jfox at mcmaster.ca>
>> Date: Thursday, June 11, 2020 at 7:54 PM
>> To: Wayne Oldford <rwoldford at uwaterloo.ca>
>> Cc: Peter Dalgaard <pdalgd at gmail.com>, "r-devel at r-project.org" <r-devel at r-project.org>
>> Subject: Re: [Rd]  tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
>> 
>>   Dear Wayne and Peter,
>> 
>>   FWIW, I observe exactly the same problem in Catalina. The error and my session info:
>> 
>>   -------- snip --------
>> 
>>> tkimage.create("photo", file = fname)
>>   Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") : 
>>     [tcl] encountered an unsupported criticial chunk type "eXIf".
>> 
>>> sessionInfo()
>>   R version 4.0.0 (2020-04-24)
>>   Platform: x86_64-apple-darwin17.0 (64-bit)
>>   Running under: macOS Catalina 10.15.5
>> 
>>   Matrix products: default
>>   BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>>   LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
>> 
>>   locale:
>>   [1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8
>> 
>>   attached base packages:
>>   [1] tcltk     stats     graphics  grDevices utils     datasets  methods   base     
>> 
>>   loaded via a namespace (and not attached):
>>   [1] compiler_4.0.0 tools_4.0.0   
>> 
>>   -------- snip --------
>> 
>>   This is from RStudio but I see the same thing in the R.app.
>> 
>>   I hope this is of some help,
>>    John
>> 
>>    -----------------------------
>>     John Fox, Professor Emeritus
>>     McMaster University
>>     Hamilton, Ontario, Canada
>>     Web: http::/socserv.mcmaster.ca/jfox
>> 
>>> On Jun 11, 2020, at 6:43 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>>> 
>>> Yes.
>>> I seem to be picking up
>>> <Tcl>  8.6
>>> I should have noted that.
>>> 
>>> Use to work for me too in Mojave.
>>> I have the sneaky feeling that Catalina is the problem.
>>> 
>>> R. W. Oldford
>>> 
>>> https://math.uwaterloo.ca/~rwoldfor
>>> 
>>> ________________________________
>>> From: Peter Dalgaard <pdalgd at gmail.com>
>>> Sent: Thursday, June 11, 2020 5:56:15 PM
>>> To: Wayne Oldford <rwoldford at uwaterloo.ca>
>>> Cc: r-devel at r-project.org <r-devel at r-project.org>
>>> Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
>>> 
>>> Happy enough for me on Mojave.
>>> 
>>> On the off chance that you are picking up an old Tcl, do you see this?
>>> 
>>>> tcl("info","tclversion")
>>> <Tcl> 8.6
>>> 
>>> 
>>> -pd
>>> 
>>>> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>>>> 
>>>> Hello everyone
>>>> 
>>>> I am not sure when this appeared
>>>> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
>>>> 
>>>> I do not think it happens on all platforms (e.g. seems to work on windows).
>>>> 
>>>> But it seems that
>>>> 
>>>>   tkimage.create()
>>>> 
>>>> no longer works on a Mac for all png files.
>>>> 
>>>> 
>>>> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
>>>> 
>>>> Any help would be appreciated.
>>>> 
>>>> - Wayne
>>>> 
>>>> 
>>>> R.W. Oldford
>>>> math.uwaterloo.ca/~rwoldfor
>>>> 
>>>> 
>>>> 
>>>> 
>>>>> library(tcltk)
>>>> 
>>>>> fname <- "Rplot.png"
>>>>> png(filename = fname, width = 500, height = 500)
>>>>> hist(rnorm(20))
>>>>> dev.off()
>>>> 
>>>>> tkimage.create("photo", file = fname)
>>>> 
>>>> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
>>>> [tcl] encountered an unsupported criticial chunk type "eXIf".
>>>> 
>>>> 
>>>> ______________________________
>>>> 
>>>>> R.version
>>>>            _
>>>> platform       x86_64-apple-darwin17.0
>>>> arch           x86_64
>>>> os             darwin17.0
>>>> system         x86_64, darwin17.0
>>>> status
>>>> major          4
>>>> minor          0.0
>>>> year           2020
>>>> month          04
>>>> day            24
>>>> svn rev        78286
>>>> language       R
>>>> version.string R version 4.0.0 (2020-04-24)
>>>> nickname       Arbor Day
>>>> 
>>>> ___________________________
>>>> 
>>>> macOS Catalina V 10.15.5
>>>> 
>>>> ___________________________________________________
>>>> 
>>>> 
>>>>     [[alternative HTML version deleted]]
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> --
>>> Peter Dalgaard, Professor,
>>> Center for Statistics, Copenhagen Business School
>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>> Phone: (+45)38153501
>>> Office: A 4.23
>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 	[[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
>> 
>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Fri Jun 12 09:00:21 2020
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Fri, 12 Jun 2020 08:00:21 +0100
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <52B0A0EF-3BF4-4010-B21A-CD85B0C4B33E@mcmaster.ca>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
 <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
 <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
 <52B0A0EF-3BF4-4010-B21A-CD85B0C4B33E@mcmaster.ca>
Message-ID: <39ffed02-7044-fc01-970e-986cebf1cb2f@stats.ox.ac.uk>

On 12/06/2020 03:49, Fox, John wrote:
> Dear Simon,
> 
>> On Jun 11, 2020, at 9:00 PM, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>>
>> Wayne,
>>
>> that one is unrelated, but interesting - you can fix it with
>>
>> sudo install_name_tool -change \
>>   /usr/local/lib:/opt/X11/lib/libtk8.6.dylib \
>>   /usr/local/lib/libtk8.6.dylib \
>>   /usr/local/bin/wish8.6
>>
>> There is a bug in tcltk with IDs on the libraries which I have worked-around for R, but not for wish.
>>
>> Back to the original question - do you have any example of a file that doesn't work so I could test? Exif chunks are fairly rare in PNG and are a more late extension so I couldn't find any examples.
> 
> The code in Wayne's original message (copied below) generated the offending file:
> 
> library(tcltk)
> 
> fname <- "Rplot.png"
> png(filename = fname, width = 500, height = 500)
> hist(rnorm(20))
> dev.off()
> 
> tkimage.create("photo", file = fname)

There are several png() devices for R.  The default on macOS is to use 
Quartz, and that depends on macOS system functions so might well have 
changed with Mojave -> Catalina.

As a workaround, try e.g. png(type='cairo').  E.g.

fname <- file.path(tempdir(), "Rplot.png")
png(filename = fname, width = 500, height = 500, type="cairo")
hist(rnorm(20))
dev.off()

library(tcltk)
tkimage.create("photo", file = fname)

works for me on Catalina.


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From urb@nek @end|ng |rom r-project@org  Fri Jun 12 09:17:37 2020
From: urb@nek @end|ng |rom r-project@org (Simon Urbanek)
Date: Fri, 12 Jun 2020 19:17:37 +1200
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <39ffed02-7044-fc01-970e-986cebf1cb2f@stats.ox.ac.uk>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
 <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
 <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
 <52B0A0EF-3BF4-4010-B21A-CD85B0C4B33E@mcmaster.ca>
 <39ffed02-7044-fc01-970e-986cebf1cb2f@stats.ox.ac.uk>
Message-ID: <C4FFE728-6888-426B-8116-A9CD6EAB367C@r-project.org>

Ah, thanks, Brian, so the issue is that Catalina is now embedding Exif tags while previous versions didn?t. Tcltk never supported them, but it only came up now as Catalina is generating them. I?ll check if tcltk has ever fixed it.

Sent from my iPhone

> On 12 Jun 2020, at 19:00, Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
> 
>> On 12/06/2020 03:49, Fox, John wrote:
>> Dear Simon,
>>> On Jun 11, 2020, at 9:00 PM, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>>> 
>>> Wayne,
>>> 
>>> that one is unrelated, but interesting - you can fix it with
>>> 
>>> sudo install_name_tool -change \
>>>  /usr/local/lib:/opt/X11/lib/libtk8.6.dylib \
>>>  /usr/local/lib/libtk8.6.dylib \
>>>  /usr/local/bin/wish8.6
>>> 
>>> There is a bug in tcltk with IDs on the libraries which I have worked-around for R, but not for wish.
>>> 
>>> Back to the original question - do you have any example of a file that doesn't work so I could test? Exif chunks are fairly rare in PNG and are a more late extension so I couldn't find any examples.
>> The code in Wayne's original message (copied below) generated the offending file:
>> library(tcltk)
>> fname <- "Rplot.png"
>> png(filename = fname, width = 500, height = 500)
>> hist(rnorm(20))
>> dev.off()
>> tkimage.create("photo", file = fname)
> 
> There are several png() devices for R.  The default on macOS is to use Quartz, and that depends on macOS system functions so might well have changed with Mojave -> Catalina.
> 
> As a workaround, try e.g. png(type='cairo').  E.g.
> 
> fname <- file.path(tempdir(), "Rplot.png")
> png(filename = fname, width = 500, height = 500, type="cairo")
> hist(rnorm(20))
> dev.off()
> 
> library(tcltk)
> tkimage.create("photo", file = fname)
> 
> works for me on Catalina.
> 
> 
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
> 


From rwo|d|ord @end|ng |rom uw@ter|oo@c@  Fri Jun 12 15:53:26 2020
From: rwo|d|ord @end|ng |rom uw@ter|oo@c@ (Wayne Oldford)
Date: Fri, 12 Jun 2020 13:53:26 +0000
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <39ffed02-7044-fc01-970e-986cebf1cb2f@stats.ox.ac.uk>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
 <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
 <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
 <52B0A0EF-3BF4-4010-B21A-CD85B0C4B33E@mcmaster.ca>
 <39ffed02-7044-fc01-970e-986cebf1cb2f@stats.ox.ac.uk>
Message-ID: <4547282C-E31D-4279-933C-C2C8DA012B4D@uwaterloo.ca>


Thanks everyone for getting a solution.

Brian's solution works for me too. 

Thanks again!!

Wayne


?-----Original Message-----
From: Prof Brian Ripley <ripley at stats.ox.ac.uk>
Date: Friday, June 12, 2020 at 3:00 AM
To: "Fox, John" <jfox at mcmaster.ca>, Simon Urbanek <simon.urbanek at r-project.org>
Cc: Wayne Oldford <rwoldford at uwaterloo.ca>, "r-devel at r-project.org" <r-devel at R-project.org>
Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"

    On 12/06/2020 03:49, Fox, John wrote:
    > Dear Simon,
    > 
    >> On Jun 11, 2020, at 9:00 PM, Simon Urbanek <simon.urbanek at r-project.org> wrote:
    >>
    >> Wayne,
    >>
    >> that one is unrelated, but interesting - you can fix it with
    >>
    >> sudo install_name_tool -change \
    >>   /usr/local/lib:/opt/X11/lib/libtk8.6.dylib \
    >>   /usr/local/lib/libtk8.6.dylib \
    >>   /usr/local/bin/wish8.6
    >>
    >> There is a bug in tcltk with IDs on the libraries which I have worked-around for R, but not for wish.
    >>
    >> Back to the original question - do you have any example of a file that doesn't work so I could test? Exif chunks are fairly rare in PNG and are a more late extension so I couldn't find any examples.
    > 
    > The code in Wayne's original message (copied below) generated the offending file:
    > 
    > library(tcltk)
    > 
    > fname <- "Rplot.png"
    > png(filename = fname, width = 500, height = 500)
    > hist(rnorm(20))
    > dev.off()
    > 
    > tkimage.create("photo", file = fname)
    
    There are several png() devices for R.  The default on macOS is to use 
    Quartz, and that depends on macOS system functions so might well have 
    changed with Mojave -> Catalina.
    
    As a workaround, try e.g. png(type='cairo').  E.g.
    
    fname <- file.path(tempdir(), "Rplot.png")
    png(filename = fname, width = 500, height = 500, type="cairo")
    hist(rnorm(20))
    dev.off()
    
    library(tcltk)
    tkimage.create("photo", file = fname)
    
    works for me on Catalina.
    
    
    -- 
    Brian D. Ripley,                  ripley at stats.ox.ac.uk
    Emeritus Professor of Applied Statistics, University of Oxford
    


From @ko@ty@h@k @end|ng |rom u||@edu  Fri Jun 12 16:17:11 2020
From: @ko@ty@h@k @end|ng |rom u||@edu (Scott Kostyshak)
Date: Fri, 12 Jun 2020 10:17:11 -0400
Subject: [Rd] Marking a ticket as a (potential) regression in bug tracker?
Message-ID: <20200612141711.b67mfiizy46jyoo2@tallinn>

Is there a way to mark a ticket as a potential regression in the bug
tracker? I think the following issue is a regression:

  https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17684

I've just tested (2020-06-12 r78687) and what I believe to be a
regression is still there. I don't think the bug has bitten many people,
so I don't think it is critical, but often it is helpful to mark bugs as
regressions in trackers.

Thanks,

Scott


-- 
Scott Kostyshak
Assistant Professor of Economics
University of Florida
https://people.clas.ufl.edu/skostyshak/


From r@|mundonetto1 @end|ng |rom gm@||@com  Mon Jun 15 17:37:11 2020
From: r@|mundonetto1 @end|ng |rom gm@||@com (Raimundo Neto)
Date: Mon, 15 Jun 2020 12:37:11 -0300
Subject: [Rd] numericDeriv alters result of eval in R 4.0.1
Message-ID: <CAOwtXOUu7BT-Ave2JGmmQJQdJjvn0AEgYYu73hYJrA7JtWH1gQ@mail.gmail.com>

Dear R developers,

I've run into a weird behavior of the numericDeriv function (from the stats
package) which I also posted on StackOverflow (question has same title as
this email, except for the version of R).

Running the code bellow we can see that the numericDeriv function gives an
error as the derivative of x^a wrt a is x^a * log(x) and log is not defined
for negative numbers. However, seems like the function changes the value of
env1$a from 3 to 3.000000044703483581543. If x is a vector of positive
values numericDeriv function completes the task without errors  and env1$a
remains unchanged as expected.

This happened to me running R 4.0.1 on Ubuntu 20.04 and also to another
StackOverflow user using running the same version of R on Windows 10. I
wonder, is this an intended behavior of the function or really a bug?

options(digits=22)
env1 = new.env()
env1$x = rnorm(10)
env1$a = 3
eval(quote(x^a), env1)
numericDeriv(quote(x^a), "a", env1)
eval(quote(x^a), env1)
env1$a

Thank you!
Raimundo Neto

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Jun 16 16:30:58 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 16 Jun 2020 09:30:58 -0500 (CDT)
Subject: [Rd] [External]  numericDeriv alters result of eval in R 4.0.1
In-Reply-To: <CAOwtXOUu7BT-Ave2JGmmQJQdJjvn0AEgYYu73hYJrA7JtWH1gQ@mail.gmail.com>
References: <CAOwtXOUu7BT-Ave2JGmmQJQdJjvn0AEgYYu73hYJrA7JtWH1gQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2006160929450.32631@luke-Latitude-7480>

Thanks; definitely a bug. I've submitted it to the bug tracker at

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17831

Best,

luke

On Mon, 15 Jun 2020, Raimundo Neto wrote:

> Dear R developers,
>
> I've run into a weird behavior of the numericDeriv function (from the stats
> package) which I also posted on StackOverflow (question has same title as
> this email, except for the version of R).
>
> Running the code bellow we can see that the numericDeriv function gives an
> error as the derivative of x^a wrt a is x^a * log(x) and log is not defined
> for negative numbers. However, seems like the function changes the value of
> env1$a from 3 to 3.000000044703483581543. If x is a vector of positive
> values numericDeriv function completes the task without errors  and env1$a
> remains unchanged as expected.
>
> This happened to me running R 4.0.1 on Ubuntu 20.04 and also to another
> StackOverflow user using running the same version of R on Windows 10. I
> wonder, is this an intended behavior of the function or really a bug?
>
> options(digits=22)
> env1 = new.env()
> env1$x = rnorm(10)
> env1$a = 3
> eval(quote(x^a), env1)
> numericDeriv(quote(x^a), "a", env1)
> eval(quote(x^a), env1)
> env1$a
>
> Thank you!
> Raimundo Neto
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From r@|mundonetto1 @end|ng |rom gm@||@com  Tue Jun 16 19:10:14 2020
From: r@|mundonetto1 @end|ng |rom gm@||@com (Raimundo Neto)
Date: Tue, 16 Jun 2020 14:10:14 -0300
Subject: [Rd] [External]  numericDeriv alters result of eval in R 4.0.1
In-Reply-To: <alpine.DEB.2.21.2006160929450.32631@luke-Latitude-7480>
References: <CAOwtXOUu7BT-Ave2JGmmQJQdJjvn0AEgYYu73hYJrA7JtWH1gQ@mail.gmail.com>
 <alpine.DEB.2.21.2006160929450.32631@luke-Latitude-7480>
Message-ID: <CAOwtXOXUaMRDp7WSuejHErfEnOy0r5mJQmKuQ3eTwNLBDzJs=A@mail.gmail.com>

Dear all

As far as I could trace, looking at the function C function numeric_deriv,
this unwanted behavior comes from the inner most loop in, at the very end
of the function,
for(i = 0, start = 0; i < LENGTH(theta); i++) {
  for(j = 0; j < LENGTH(VECTOR_ELT(pars, i)); j++, start += LENGTH(ans)) {
    SEXP ans_del;
    double origPar, xx, delta;

    origPar = REAL(VECTOR_ELT(pars, i))[j];
    xx = fabs(origPar);
    delta = (xx == 0) ? eps : xx*eps;
    REAL(VECTOR_ELT(pars, i))[j] += rDir[i] * delta;
    PROTECT(ans_del = eval(expr, rho));
    if(!isReal(ans_del)) ans_del = coerceVector(ans_del, REALSXP);
    UNPROTECT(1);
    for(k = 0; k < LENGTH(ans); k++) {
      if (!R_FINITE(REAL(ans_del)[k]))
        *error(_("Missing value or an infinity produced when evaluating the
model"));*
      REAL(gradient)[start + k] = rDir[i] * (REAL(ans_del)[k] -
REAL(ans)[k])/delta;
    }
    *REAL(VECTOR_ELT(pars, i))[j] = origPar;*
  }
}
Maybe a (naive?) fix is change the if statement in the inner most loop to

if (!R_FINITE(REAL(ans_del)[k])) {


*  REAL(VECTOR_ELT(pars, i))[j] = origPar;  error(_("Missing value or an
infinity produced when evaluating the model"));*}


Regards,
Raimundo Neto


Em ter., 16 de jun. de 2020 ?s 11:31, <luke-tierney at uiowa.edu> escreveu:

> Thanks; definitely a bug. I've submitted it to the bug tracker at
>
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17831
>
> Best,
>
> luke
>
> On Mon, 15 Jun 2020, Raimundo Neto wrote:
>
> > Dear R developers,
> >
> > I've run into a weird behavior of the numericDeriv function (from the
> stats
> > package) which I also posted on StackOverflow (question has same title as
> > this email, except for the version of R).
> >
> > Running the code bellow we can see that the numericDeriv function gives
> an
> > error as the derivative of x^a wrt a is x^a * log(x) and log is not
> defined
> > for negative numbers. However, seems like the function changes the value
> of
> > env1$a from 3 to 3.000000044703483581543. If x is a vector of positive
> > values numericDeriv function completes the task without errors  and
> env1$a
> > remains unchanged as expected.
> >
> > This happened to me running R 4.0.1 on Ubuntu 20.04 and also to another
> > StackOverflow user using running the same version of R on Windows 10. I
> > wonder, is this an intended behavior of the function or really a bug?
> >
> > options(digits=22)
> > env1 = new.env()
> > env1$x = rnorm(10)
> > env1$a = 3
> > eval(quote(x^a), env1)
> > numericDeriv(quote(x^a), "a", env1)
> > eval(quote(x^a), env1)
> > env1$a
> >
> > Thank you!
> > Raimundo Neto
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Jun 16 19:46:02 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 16 Jun 2020 12:46:02 -0500 (CDT)
Subject: [Rd] [External]  numericDeriv alters result of eval in R 4.0.1
In-Reply-To: <CAOwtXOXUaMRDp7WSuejHErfEnOy0r5mJQmKuQ3eTwNLBDzJs=A@mail.gmail.com>
References: <CAOwtXOUu7BT-Ave2JGmmQJQdJjvn0AEgYYu73hYJrA7JtWH1gQ@mail.gmail.com>
 <alpine.DEB.2.21.2006160929450.32631@luke-Latitude-7480>
 <CAOwtXOXUaMRDp7WSuejHErfEnOy0r5mJQmKuQ3eTwNLBDzJs=A@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2006161243440.32631@luke-Latitude-7480>

The eval() call could also throw an error that would leave the input
environment modified. Better change along the lines described in the
bug report at

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17831

Best,

luke

On Tue, 16 Jun 2020, Raimundo Neto wrote:

> Dear all
> 
> As far as I could trace, looking at the function C function numeric_deriv,
> this unwanted behavior comes from the inner most loop in, at the very end of
> the function,
> for(i = 0, start = 0; i < LENGTH(theta); i++) {
> ? for(j = 0; j < LENGTH(VECTOR_ELT(pars, i)); j++, start += LENGTH(ans)) {
> ? ? SEXP ans_del;
> ? ? double origPar, xx, delta;
> 
> ? ? origPar = REAL(VECTOR_ELT(pars, i))[j];
> ? ? xx = fabs(origPar);
> ? ? delta = (xx == 0) ? eps : xx*eps;
> ? ? REAL(VECTOR_ELT(pars, i))[j] += rDir[i] * delta;
> ? ? PROTECT(ans_del = eval(expr, rho));
> ? ? if(!isReal(ans_del)) ans_del = coerceVector(ans_del, REALSXP);
> ? ? UNPROTECT(1);
> ? ? for(k = 0; k < LENGTH(ans); k++) {
> ? ? ? if (!R_FINITE(REAL(ans_del)[k]))
> ? ? ? ? error(_("Missing value or an infinity produced when evaluating the
> model"));
> ? ? ? REAL(gradient)[start + k] = rDir[i] * (REAL(ans_del)[k] -
> REAL(ans)[k])/delta;
> ? ? }
> ? ? REAL(VECTOR_ELT(pars, i))[j] = origPar;
> ? }
> }
> Maybe a (naive?) fix is change the if statement in the inner most loop to
> 
> if (!R_FINITE(REAL(ans_del)[k])) {
> ? REAL(VECTOR_ELT(pars, i))[j] = origPar;
> ? error(_("Missing value or an infinity produced when evaluating the
> model"));
> }
> 
> 
> Regards,
> Raimundo Neto
> 
> 
> Em ter., 16 de jun. de 2020 ?s 11:31, <luke-tierney at uiowa.edu> escreveu:
>       Thanks; definitely a bug. I've submitted it to the bug tracker
>       at
>
>       https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17831
>
>       Best,
>
>       luke
>
>       On Mon, 15 Jun 2020, Raimundo Neto wrote:
>
>       > Dear R developers,
>       >
>       > I've run into a weird behavior of the numericDeriv function
>       (from the stats
>       > package) which I also posted on StackOverflow (question has
>       same title as
>       > this email, except for the version of R).
>       >
>       > Running the code bellow we can see that the numericDeriv
>       function gives an
>       > error as the derivative of x^a wrt a is x^a * log(x) and log
>       is not defined
>       > for negative numbers. However, seems like the function changes
>       the value of
>       > env1$a from 3 to 3.000000044703483581543. If x is a vector of
>       positive
>       > values numericDeriv function completes the task without
>       errors? and env1$a
>       > remains unchanged as expected.
>       >
>       > This happened to me running R 4.0.1 on Ubuntu 20.04 and also
>       to another
>       > StackOverflow user using running the same version of R on
>       Windows 10. I
>       > wonder, is this an intended behavior of the function or really
>       a bug?
>       >
>       > options(digits=22)
>       > env1 = new.env()
>       > env1$x = rnorm(10)
>       > env1$a = 3
>       > eval(quote(x^a), env1)
>       > numericDeriv(quote(x^a), "a", env1)
>       > eval(quote(x^a), env1)
>       > env1$a
>       >
>       > Thank you!
>       > Raimundo Neto
>       >
>       >? ? ? ?[[alternative HTML version deleted]]
>       >
>       > ______________________________________________
>       > R-devel at r-project.org mailing list
>       > https://stat.ethz.ch/mailman/listinfo/r-devel
>       >
>
>       --
>       Luke Tierney
>       Ralph E. Wareham Professor of Mathematical Sciences
>       University of Iowa? ? ? ? ? ? ? ? ? Phone:? ? ? ? ? ?
>       ?319-335-3386
>       Department of Statistics and? ? ? ? Fax:? ? ? ? ? ? ?
>       ?319-335-3017
>       ? ? Actuarial Science
>       241 Schaeffer Hall? ? ? ? ? ? ? ? ? email:?
>       ?luke-tierney at uiowa.edu
>       Iowa City, IA 52242? ? ? ? ? ? ? ? ?WWW:?
>       http://www.stat.uiowa.edu
> 
> 
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From morg@n@em@||box @end|ng |rom gm@||@com  Wed Jun 17 12:10:08 2020
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Wed, 17 Jun 2020 11:10:08 +0100
Subject: [Rd] subset data.frame at C level
Message-ID: <CAL0QV_MzvzfG4aFi-ph=BZBF8ffusePsDCyDqmZ-MKRuOMC=RQ@mail.gmail.com>

Hi,

Hope you are well.

I was wondering if there is a function at C level that is equivalent to
mtcars$carb or .subset2(mtcars, "carb").

If I have the index of the column then the answer would be VECTOR_ELT(df,
asInteger(idx)) but I was wondering if there is a way to do it directly
from the name of the column without having to loop over columns names to
find the index?

Thank you
Best regards
Morgan

	[[alternative HTML version deleted]]


From j@goreck| @end|ng |rom w|t@edu@p|  Thu Jun 18 13:16:04 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Thu, 18 Jun 2020 12:16:04 +0100
Subject: [Rd] fixed url for R-release windows binaries
Message-ID: <CAOO9MKX0Dt6dnhtFTyc3NcbWcVofvMYwXR5DdG3hApqvPX1ZUw@mail.gmail.com>

Dear R-developers,

Could we have a fixed url to fetch current R-release windows binaries?
Like we do for R-devel
https://cloud.r-project.org/bin/windows/base/R-devel-win.exe

Something like the following would do
https://cloud.r-project.org/bin/windows/base/R-release-win.exe

Thank you,
Jan Gorecki


From |r|end|y @end|ng |rom yorku@c@  Thu Jun 18 18:43:30 2020
From: |r|end|y @end|ng |rom yorku@c@ (Michael Friendly)
Date: Thu, 18 Jun 2020 12:43:30 -0400
Subject: [Rd] stats::screeplot suggestion
Message-ID: <093518f5-cfc0-c5d8-3b52-c7a44b0c018f@yorku.ca>

  Hi

Here is a suggestion/request for stats::screeplot

* Please allow to change xlab and ylab.  The attached file does that, and maintains current behavior. Reason: strictly speaking, ylab should be "Variance" (singular). It would also be better to have an explicit label for the X axis: "Component"

In the would-be-nice-if category, I suggest addition of a type="cumulative" chart, a line graph of cumulative % of variance, labeled "% Variance" by default.

-Michael

----- screeplot.default.R ---------

screeplot.default <- function (x, npcs = min(10, length(x$sdev)),
 ?????????????? type = c("barplot", "lines"),
 ?????????????? xlab = "",
 ?????????????? ylab = "Variances",
 ?????????????? main = deparse(substitute(x)), ...)
{
 ??? main
 ??? type <- match.arg(type)
 ??? pcs <- x$sdev^2
 ??? xp <- seq_len(npcs)
 ??? dev.hold()
 ??? on.exit(dev.flush())
 ??? if (type == "barplot")
 ??????? barplot(pcs[xp], names.arg = names(pcs[xp]), main = main,
 ??????????? ylab = ylab, ...)
 ??? else {
 ??????? plot(xp, pcs[xp], type = "b", axes = FALSE, main = main,
 ??????????? xlab = xlab, ylab = ylab, ...)
 ??????? axis(2)
 ??????? axis(1, at = xp, labels = names(pcs[xp]))
 ??? }
 ??? invisible()
}

----------------------------------------

-- 
Michael Friendly     Email: friendly AT yorku DOT ca
Professor, Psychology Dept. & Chair, ASA Statistical Graphics Section
York University      Voice: 416 736-2100 x66249 Fax: 416 736-5814
4700 Keele Street    Web:   http://www.datavis.ca  |  @datavisFriendly
Toronto, ONT  M3J 1P3 CANADA


From tdhock5 @end|ng |rom gm@||@com  Thu Jun 18 22:21:35 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Thu, 18 Jun 2020 13:21:35 -0700
Subject: [Rd] valgrind false positive on R startup?
In-Reply-To: <47483e13-3582-8998-5be3-3f84fbc02b28@stats.ox.ac.uk>
References: <CALK03d1zKdgcwhnRfM-kNgVQvXGmzN_WitwuREsbwoJsDZpVkA@mail.gmail.com>
 <47483e13-3582-8998-5be3-3f84fbc02b28@stats.ox.ac.uk>
Message-ID: <CALK03d38Rk9CmD7gZ4dgMP1WQSqnm-XCZrP=WxhL3qycYQhoVg@mail.gmail.com>

Great, that works for me, thanks!
If this is an issue with glibc, has it been reported to the glibc devs, and
are they working on a fix?

On Tue, Jun 9, 2020 at 9:12 PM Prof Brian Ripley <ripley at stats.ox.ac.uk>
wrote:

> It is known, with a known workaround, see e.g.
> https://www.stats.ox.ac.uk/pub/bdr/memtests/README.txt .  Set
> suppressions in ~/.valgrindrc, e.g. the CRAN check machine has
>
> --suppressions=/data/blackswan/ripley/wcsrtombs.supp
>
> It is an issue in your OS (glibc), not TRE nor R.
>
> On 10/06/2020 00:21, Toby Hocking wrote:
> > Hi all,
> >
> > I'm on Ubuntu 18.04, running R-4.0.0 which I compiled from source, and
> > using valgrind I am always seeing the following message. Does anybody
> > else see that? Is that a known false positive? Any ideas how to
> > fix/suppress? Seems related to TRE, do I need to upgrade that?
> >
> > (base) tdhock at maude-MacBookPro:~/R/binsegRcpp$ R --vanilla -d valgrind
> > -e 'extSoftVersion()'
> > ==9565== Memcheck, a memory error detector
> > ==9565== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
> > ==9565== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright
> info
> > ==9565== Command: /home/tdhock/lib/R/bin/exec/R --vanilla -e
> extSoftVersion()
> > ==9565==
> > ==9565== Conditional jump or move depends on uninitialised value(s)
> > ==9565==    at 0x55AB9E0: __wcsnlen_sse4_1 (strlen.S:147)
> > ==9565==    by 0x5598EC1: wcsrtombs (wcsrtombs.c:104)
> > ==9565==    by 0x551EB20: wcstombs (wcstombs.c:34)
> > ==9565==    by 0x50BAA07: wcstombs (stdlib.h:154)
> > ==9565==    by 0x50BAA07: tre_parse_bracket_items (tre-parse.c:336)
> > ==9565==    by 0x50BAA07: tre_parse_bracket (tre-parse.c:453)
> > ==9565==    by 0x50BAA07: tre_parse (tre-parse.c:1380)
> > ==9565==    by 0x50B2498: tre_compile (tre-compile.c:1920)
> > ==9565==    by 0x50AFBE0: tre_regcompb (regcomp.c:150)
> > ==9565==    by 0x4FA9F42: do_gsub (grep.c:2023)
> > ==9565==    by 0x4F79045: bcEval (eval.c:7090)
> > ==9565==    by 0x4F8572F: Rf_eval (eval.c:723)
> > ==9565==    by 0x4F8754E: R_execClosure (eval.c:1888)
> > ==9565==    by 0x4F88316: Rf_applyClosure (eval.c:1814)
> > ==9565==    by 0x4F85902: Rf_eval (eval.c:846)
> > ==9565==
> >
> > R version 4.0.0 (2020-04-24) -- "Arbor Day"
> > Copyright (C) 2020 The R Foundation for Statistical Computing
> > Platform: x86_64-pc-linux-gnu (64-bit)
> >
> > R is free software and comes with ABSOLUTELY NO WARRANTY.
> > You are welcome to redistribute it under certain conditions.
> > Type 'license()' or 'licence()' for distribution details.
> >
> >    Natural language support but running in an English locale
> >
> > R is a collaborative project with many contributors.
> > Type 'contributors()' for more information and
> > 'citation()' on how to cite R or R packages in publications.
> >
> > Type 'demo()' for some demos, 'help()' for on-line help, or
> > 'help.start()' for an HTML browser interface to help.
> > Type 'q()' to quit R.
> >
> >> extSoftVersion()
> >                                  zlib
> bzlib
> >                              "1.2.11"                 "1.0.6,
> 6-Sept-2010"
> >                                    xz
>  PCRE
> >                               "5.2.2"                   "10.31
> 2018-02-12"
> >                                   ICU
> TRE
> >                                "60.2"            "TRE 0.8.0 R_fixes
> (BSD)"
> >                                 iconv
>  readline
> >                          "glibc 2.27"
> "7.0"
> >                                  BLAS
> > "/home/tdhock/lib/R/lib/libRblas.so"
> >>
> >>
> > ==9565==
> > ==9565== HEAP SUMMARY:
> > ==9565==     in use at exit: 40,492,919 bytes in 9,170 blocks
> > ==9565==   total heap usage: 19,784 allocs, 10,614 frees, 62,951,535
> > bytes allocated
> > ==9565==
> > ==9565== LEAK SUMMARY:
> > ==9565==    definitely lost: 0 bytes in 0 blocks
> > ==9565==    indirectly lost: 0 bytes in 0 blocks
> > ==9565==      possibly lost: 0 bytes in 0 blocks
> > ==9565==    still reachable: 40,492,919 bytes in 9,170 blocks
> > ==9565==                       of which reachable via heuristic:
> > ==9565==                         newarray           : 4,264 bytes in 1
> blocks
> > ==9565==         suppressed: 0 bytes in 0 blocks
> > ==9565== Rerun with --leak-check=full to see details of leaked memory
> > ==9565==
> > ==9565== For counts of detected and suppressed errors, rerun with: -v
> > ==9565== Use --track-origins=yes to see where uninitialised values come
> from
> > ==9565== ERROR SUMMARY: 46 errors from 1 contexts (suppressed: 0 from 0)
> > (base) tdhock at maude-MacBookPro:~/R/binsegRcpp$
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>
> --
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
>

	[[alternative HTML version deleted]]


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Sun Jun 21 20:01:31 2020
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Sun, 21 Jun 2020 18:01:31 +0000
Subject: [Rd] Possible bug in heatmap()?
Message-ID: <fdb6ca06292c4115907ab466a86e5383@UM-MAIL3214.unimaas.nl>

Dear All,

There might be a bug in heatmap():

x <- matrix(rnorm(10*5), 10, 5)
heatmap(x, labCol=1:5)

Error in axis(1, 1L:nc, labels = labCol, las = 2, line = -0.5, tick = 0,  : 
  'at' and 'labels' lengths differ, 5 != 10

Works fine under 4.0.1. Looking at the code from 4.0.1 vs. Rdevel, esp. this part sticks out:

    labRow <- labRow[rowInd] %||% rownames(x) %||% (1L:nr)[rowInd]
    labCol <- labCol[rowInd] %||% colnames(x) %||% (1L:nc)[colInd]

Maybe this should be:

    labCol <- labCol[colInd] %||% colnames(x) %||% (1L:nc)[colInd]

> sessionInfo()
R Under development (unstable) (2020-06-21 r78727)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.6 LTS

Matrix products: default
BLAS:   /home/wviechtb/rdev/lib/libRblas.so
LAPACK: /home/wviechtb/rdev/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8       
 [4] LC_COLLATE=C               LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  LC_ADDRESS=C              
[10] LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_4.1.0

Best,
Wolfgang


From x|e @end|ng |rom y|hu|@n@me  Mon Jun 22 06:11:35 2020
From: x|e @end|ng |rom y|hu|@n@me (Yihui Xie)
Date: Sun, 21 Jun 2020 23:11:35 -0500
Subject: [Rd] 
 Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
In-Reply-To: <857dde35-259a-cff8-27b4-4bdc098ccb31-3957@gmail.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
 <857dde35-259a-cff8-27b4-4bdc098ccb31-3957@gmail.com>
Message-ID: <CALFMOMAnGodB557Q_NBCMWAw6+FLHHi8KCjaOG+U1q4j=f28Eg@mail.gmail.com>

Hi Tomas,

I received a report about R 4.0.0 in the knitr package
(https://github.com/yihui/knitr/issues/1840), and I think it is
related to the issue here. I created a minimal reproducible example
below:

owd = setwd(tempdir())
z = 'K\u00e4sch.txt'
file.create(z)
list.files()
file.exists(list.files())
setwd(owd)

Output:

> owd = setwd(tempdir())
> z = 'K\u00e4sch.txt'
> file.create(z)
[1] TRUE
> list.files()
[1] "K?sch.txt"
> file.exists(list.files())
[1] FALSE
> setwd(owd)

I wonder if it is expected that file.exists() returns FALSE here.

> sessionInfo()
R version 4.0.1 (2020-06-06)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 7 x64 (build 7601) Service Pack 1

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
[5] LC_TIME=English_United States.1252
system code page: 936

FWIW, I also tested Chinese characters in the variable `z` above, and
file.exists() returns TRUE only after I Sys.setlocale(, "Chinese").

Regards,
Yihui

On Thu, Jun 11, 2020 at 3:11 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
>
> Dear Juan,
>
> I don't see what is the problem from your report. Please try to create a
> minimal but complete reproducible example that does not use the renv
> package. Perhaps you could use the R debugger (e.g. via
> options(error=recover)) to find out what is the argument that
> file.exists() has been called with. And then you could try just to call
> file.exists() directly with that argument to trigger the problem.
>
> It may be that the argument has been corrupted/is invalid in the current
> native encoding. If that is the case, the next step would be to find out
> who corrupted it (renv, R, something else). The error is displayed when
> a path name cannot be converted from the current native encoding to
> UTF16-LE.
>
> The experimental support for UTF-8 as native encoding on Windows 10 is
> only available in a custom build of R, like the one I linked from my
> blog post.
>
> Thanks
> Tomas
>
>
>
> On 6/10/20 1:06 PM, Juan Telleria Ruiz de Aguirre wrote:
> > Dear R Developers,
> >
> > I am having an issue with the renv package and R 4.0.1, which I
> > suspect is related to base R and not the renv package itself, as with
> > R 3.6.3 such an "error" does not appear.
> >
> > The error is raised by a file.exists() path, and path
> > "C:\Users\J-tel\Documents", which in R 3.6.3 is read correctly, but in
> > R 4.0.1 fails (Probably because of the "-" symbol), and I suspect it
> > might be related with the new UTF-8 usage on Windows 10?
> > (https://developer.r-project.org/Blog/public/2020/05/02/utf-8-support-on-windows/index.html)
> >
> > I have also checked file.exists() function and its internals, and seem
> > not to have happened changes in the meanwhile within them:
> >
> > https://github.com/wch/r-source/blob/0e3b3182f87a60af4b0293a5410dde680b910f49/src/library/base/R/files.R
> > https://github.com/search?q=SEXP%20attribute_hidden%20do_fileexists+repo:wch/r-source&type=Code
> >
> > Error Details:
> >
> >> renv::init()
> > Error in file.exists(children) :
> >    file name conversion problem -- name too long?
> >> traceback()
> > 14: file.exists(children)
> > 13: renv_dependencies_find_dir_children(path, root)
> > 12: renv_dependencies_find_dir(path, root)
> > 11: FUN(X[[i]], ...)
> > 10: lapply(path, renv_dependencies_find_impl, root = root)
> > 9: renv_dependencies_find(path, root)
> > 8: (function (path = getwd(), root = NULL, ..., progress = TRUE,
> >         errors = c("reported", "fatal", "ignored"), dev = FALSE)
> >     {
> >         path <- renv_path_normalize(path, winslash = "/", mustWork = TRUE)
> >         root <- root %||% renv_dependencies_root(path)
> >         if (exists(path, envir = `_renv_dependencies`))
> >             return(get(path, envir = `_renv_dependencies`))
> >         renv_dependencies_begin(root = root)
> >         on.exit(renv_dependencies_end(), add = TRUE)
> >         dots <- list(...)
> >         if (identical(dots[["quiet"]], TRUE)) {
> >             progress <- FALSE
> >             errors <- "ignored"
> >         }
> >         files <- renv_dependencies_find(path, root)
> >         deps <- renv_dependencies_discover(files, progress, errors)
> >         renv_dependencies_report(errors)
> >         deps
> >     })(path, progress = FALSE, errors = errors, dev = TRUE)
> > 7: eval(call, envir = parent.frame(2))
> > 6: eval(call, envir = parent.frame(2))
> > 5: delegate(renv_dependencies_impl)
> > 4: dependencies(path, progress = FALSE, errors = errors, dev = TRUE)
> > 3: withCallingHandlers(dependencies(path, progress = FALSE, errors = errors,
> >         dev = TRUE), renv.dependencies.error =
> > renv_dependencies_error_handler(message,
> >         errors))
> > 2: renv_dependencies_scope(project, action = "init")
> > 1: renv::init()
> >
> >> renv::diagnostics()
> > Diagnostics Report -- renv [0.10.0]
> > ===================================
> >
> > # Session Info =======================
> > R version 4.0.1 (2020-06-06)
> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> > Running under: Windows 10 x64 (build 18362)
> >
> > Matrix products: default
> >
> > locale:
> > [1] LC_COLLATE=Spanish_Spain.1252  LC_CTYPE=Spanish_Spain.1252
> > [3] LC_MONETARY=Spanish_Spain.1252 LC_NUMERIC=C
> > [5] LC_TIME=Spanish_Spain.1252
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > other attached packages:
> > [1] renv_0.10.0
> >
> > loaded via a namespace (and not attached):
> >   [1] compiler_4.0.1   rsconnect_0.8.16 htmltools_0.4.0  tools_4.0.1
> >   [5] yaml_2.2.1       Rcpp_1.0.4.6     rmarkdown_2.2    knitr_1.28
> >   [9] xfun_0.14        digest_0.6.25    packrat_0.5.0    rlang_0.4.6
> > [13] evaluate_0.14
> >
> > # Project ============================
> > Project path: "~/Test2"
> >
> > # Status =============================
> >
> > # Lockfile ===========================
> > This project has not yet been snapshotted: 'renv.lock' does not exist.
> >
> > # Library ============================
> > The project library "~/Test2/renv/library/R-4.0/x86_64-w64-mingw32"
> > does not exist.
> >
> > # Dependencies =======================
> >
> > # User Profile =======================
> > [no user profile detected]
> >
> > # Settings ===========================
> > List of 6
> >   $ external.libraries       : chr(0)
> >   $ ignored.packages         : chr(0)
> >   $ package.dependency.fields: chr [1:3] "Imports" "Depends" "LinkingTo"
> >   $ snapshot.type            : chr "implicit"
> >   $ use.cache                : logi TRUE
> >   $ vcs.ignore.library       : logi TRUE
> >
> > # Options ============================
> > List of 1
> >   $ renv.verbose: logi TRUE
> >
> > # Environment Variables ==============
> > HOME        = C:\Users\J-tel\OneDrive\Documents
> > LANG        = <NA>
> > R_LIBS      = <NA>
> > R_LIBS_SITE = <NA>
> > R_LIBS_USER = C:/Users/J-tel/OneDrive/Documents/R/win-library/4.0
> >
> > # PATH ===============================
> > - C:\rtools40\usr\bin
> > - C:\Program Files\R\R-4.0.1\bin\x64
> > - C:\ProgramData\Miniconda3
> > - C:\ProgramData\Miniconda3\Library\mingw-w64\bin
> > - C:\ProgramData\Miniconda3\Library\usr\bin
> > - C:\ProgramData\Miniconda3\Library\bin
> > - C:\ProgramData\Miniconda3\Scripts
> > - C:\ProgramData\Oracle\Java\javapath
> > - C:\WINDOWS\system32
> > - C:\WINDOWS
> > - C:\WINDOWS\System32\Wbem
> > - C:\WINDOWS\System32\WindowsPowerShell\v1.0\
> > - C:\WINDOWS\System32\OpenSSH\
> > - C:\Program Files\MiKTeX 2.9\miktex\bin\x64\
> > - C:\ProgramData\Miniconda3\Scripts\conda.exe
> >
> > # Cache ==============================
> > There are a total of 0 package(s) installed in the renv cache.
> > Cache path: "C:/Users/J-tel/AppData/Local/renv/cache/v5/R-4.0/x86_64-w64-mingw32"
> >
> > System Information:
> >
> >> R.Version()
> > $platform
> > [1] "x86_64-w64-mingw32"
> >
> > $arch
> > [1] "x86_64"
> >
> > $os
> > [1] "mingw32"
> >
> > $system
> > [1] "x86_64, mingw32"
> >
> > $status
> > [1] ""
> >
> > $major
> > [1] "4"
> >
> > $minor
> > [1] "0.1"
> >
> > $year
> > [1] "2020"
> >
> > $month
> > [1] "06"
> >
> > $day
> > [1] "06"
> >
> > $`svn rev`
> > [1] "78648"
> >
> > $language
> > [1] "R"
> >
> > $version.string
> > [1] "R version 4.0.1 (2020-06-06)"
> >
> > $nickname
> > [1] "See Things Now"
> >
> > Thank you,
> > Juan
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Mon Jun 22 07:30:41 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Mon, 22 Jun 2020 07:30:41 +0200
Subject: [Rd] Possible bug in heatmap()?
In-Reply-To: <fdb6ca06292c4115907ab466a86e5383@UM-MAIL3214.unimaas.nl>
References: <fdb6ca06292c4115907ab466a86e5383@UM-MAIL3214.unimaas.nl>
Message-ID: <24304.16897.179338.266935@hornik.net>

>>>>> Viechtbauer, Wolfgang (SP) writes:

Should be fixed now.

Best
-k

> Dear All,
> There might be a bug in heatmap():

> x <- matrix(rnorm(10*5), 10, 5)
> heatmap(x, labCol=1:5)

> Error in axis(1, 1L:nc, labels = labCol, las = 2, line = -0.5, tick = 0,  : 
>   'at' and 'labels' lengths differ, 5 != 10

> Works fine under 4.0.1. Looking at the code from 4.0.1 vs. Rdevel, esp. this part sticks out:

>     labRow <- labRow[rowInd] %||% rownames(x) %||% (1L:nr)[rowInd]
>     labCol <- labCol[rowInd] %||% colnames(x) %||% (1L:nc)[colInd]

> Maybe this should be:

>     labCol <- labCol[colInd] %||% colnames(x) %||% (1L:nc)[colInd]

>> sessionInfo()
> R Under development (unstable) (2020-06-21 r78727)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 16.04.6 LTS

> Matrix products: default
> BLAS:   /home/wviechtb/rdev/lib/libRblas.so
> LAPACK: /home/wviechtb/rdev/lib/libRlapack.so

> locale:
>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8       
>  [4] LC_COLLATE=C               LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  LC_ADDRESS=C              
> [10] LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base     

> loaded via a namespace (and not attached):
> [1] compiler_4.1.0

> Best,
> Wolfgang

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@me@ @end|ng |rom cb@@dk  Mon Jun 22 10:21:31 2020
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Mon, 22 Jun 2020 08:21:31 +0000
Subject: [Rd] R 4.0.2 is released
Message-ID: <109235C0-23F3-4DA6-B895-51596AD62D31@cbs.dk>

The build system rolled up R-4.0.2.tar.gz (codename "Taking Off Again") this morning.

The list below details the changes in this release.

You can get the source code from

http://cran.r-project.org/src/base/R-4/R-4.0.2.tar.gz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course.


For the R Core Team,

Peter Dalgaard

These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = b9c44f9f78cab3184ad9898bebc854b4
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = 4afa171cd982aaa60f0ba92e2e7bc5d6
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = 566a6bb3642e28e6bf01cf98db31137c
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = eb78c4d053ec9c32b815cf0c2ebea801
MD5 (NEWS.2) = 496062c138e2def06cebccddfb814ac6
MD5 (NEWS.3) = 012e7f4a80cc8ec947bf3f0ff6117ec8
MD5 (R-latest.tar.gz) = 1eac7293d5fe313a56ddabfda02b437e
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = 529223fd3ffef95731d0a87353108435
MD5 (THANKS) = 251d20510bfc3cc93b82c5a99f7efcc6
MD5 (VERSION-INFO.dcf) = 62496d3a0fd8cc2ed644ea518c052371
MD5 (R-4/R-4.0.2.tar.gz) = 1eac7293d5fe313a56ddabfda02b437e

2cde824a7b18958e5f06b391c801c8288be0f84fa8934b7ddefef23c67e60c09  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
eddf87b12197c7b3b19cbc9b11c1beab95b14e3dcd715bf37d2f6a8b2a72c2a1  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
ec05bba338358410fae6b34fed061605989ab3601aba1b3fcb45a610d5dd2eb9  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
12b30c724117b1b2b11484673906a6dcd48a361f69fc420b36194f9218692d01  NEWS.1
e80de410c77f05ff2012fa70051b89119845f734a7fa5c55857e61e4ed7d5f6e  NEWS.2
7201d139947afa52b5e09d26dc01445edf444506264355b2185122bc1ed3dce0  NEWS.3
d3bceab364da0876625e4097808b42512395fdf41292f4915ab1fd257c1bbe75  R-latest.tar.gz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
408737572ecc6e1135fdb2cf7a9dbb1a6cb27967c757f1771b8c39d1fd2f1ab9  RESOURCES
c9c7cb32308b4e560a22c858819ade9de524a602abd4e92d1c328c89f8037d73  THANKS
10cc5f566a4a5ce49147e7dcfbe9180dba09ccb9efb17298b067309eb799e92e  VERSION-INFO.dcf
d3bceab364da0876625e4097808b42512395fdf41292f4915ab1fd257c1bbe75  R-4/R-4.0.2.tar.gz

This is the relevant part of the NEWS file

CHANGES IN R 4.0.2:

  UTILITIES:

    * R CMD check skips vignette re-building (with a warning) if the
      VignetteBuilder package(s) are not available.

  BUG FIXES:

    * Paths with non-ASCII characters caused problems for package
      loading on Windows PR#17833.

    * Using tcltk widgets no longer crashes R on Windows.

    * source(*, echo=TRUE) no longer fails in some cases with empty
      lines; reported by Bill Dunlap in PR#17769.

    * on.exit() now correctly matches named arguments, thanks to
      PR#17815 (including patch) by Brodie Gaslam.

    * regexpr(*, perl=TRUE) no longer returns incorrect positions into
      text containing characters outside of the Unicode Basic
      Multilingual Plane on Windows.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Jun 22 10:37:09 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 22 Jun 2020 10:37:09 +0200
Subject: [Rd] 
 Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
In-Reply-To: <CALFMOMAnGodB557Q_NBCMWAw6+FLHHi8KCjaOG+U1q4j=f28Eg@mail.gmail.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
 <857dde35-259a-cff8-27b4-4bdc098ccb31-3957@gmail.com>
 <CALFMOMAnGodB557Q_NBCMWAw6+FLHHi8KCjaOG+U1q4j=f28Eg@mail.gmail.com>
Message-ID: <88588972-223f-4d77-5e41-251eec6c6e8d@gmail.com>

Hi Yihui,

list.files() returns file names converted to native encoding by Windows, 
so one needs to use only characters representable in current native 
encoding for file names. If one wants to be safe, it makes sense to be 
much stricter than that (only ASCII, and only a subset of it, there is a 
number of recommendations that can be found online). Using more than 
that is asking for trouble.

Unicode "\u00e4" is a Latin-1 character, so representable in CP1252. On 
my Windows running in CP1252 as C locale and system code page, your 
example works fine, file.exists() returns TRUE, and this is the expected 
behavior (tested in R-devel and R4.0).

Your example was run in CP1252 as C locale but CP936 as the system code 
page (see the sessionInfo() output). On Windows, unfortunately, there 
are two different "current locales" at a time. With your settings 
(CP1252 as C locale and CP936 as system code page), I get the same 
results as you, file.exists() returns FALSE. enc2native(z) works fine 
and returns a valid Latin-1 string, but that is because here "native" is 
CP1252. Windows API functions and consequently some C library functions 
that return strings from the OS, however, convert to the encoding from 
the system code page, which is CP936 and it cannot represent "?". So, 
currently the behavior you are reporting is expected for R 4.0 and 
earlier. I don't think this is a regression, it couldn't have worked 
before, either - and I've tested in 3.6.3 and 3.4.3 on my system.

These problems will go away when UTF-8 is both the current native 
encoding for the C locale and the system code page. This is possible in 
recent Windows 10, but requires UCRT and hence a new toolchain to build 
R, and requires all packages and libraries to be rebuilt from source. 
More details on my blog, also there is experimental build of R 
(installer) and experimental toolchain available:
https://developer.r-project.org/Blog/public/2020/05/02/utf-8-support-on-windows/index.html

Best
Tomas


On 6/22/20 6:11 AM, Yihui Xie wrote:
> Hi Tomas,
>
> I received a report about R 4.0.0 in the knitr package
> (https://github.com/yihui/knitr/issues/1840), and I think it is
> related to the issue here. I created a minimal reproducible example
> below:
>
> owd = setwd(tempdir())
> z = 'K\u00e4sch.txt'
> file.create(z)
> list.files()
> file.exists(list.files())
> setwd(owd)
>
> Output:
>
>> owd = setwd(tempdir())
>> z = 'K\u00e4sch.txt'
>> file.create(z)
> [1] TRUE
>> list.files()
> [1] "K?sch.txt"
>> file.exists(list.files())
> [1] FALSE
>> setwd(owd)
> I wonder if it is expected that file.exists() returns FALSE here.
>
>> sessionInfo()
> R version 4.0.1 (2020-06-06)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 7 x64 (build 7601) Service Pack 1
>
> locale:
> [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252
> [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
> [5] LC_TIME=English_United States.1252
> system code page: 936
>
> FWIW, I also tested Chinese characters in the variable `z` above, and
> file.exists() returns TRUE only after I Sys.setlocale(, "Chinese").
>
> Regards,
> Yihui
>
> On Thu, Jun 11, 2020 at 3:11 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>
>> Dear Juan,
>>
>> I don't see what is the problem from your report. Please try to create a
>> minimal but complete reproducible example that does not use the renv
>> package. Perhaps you could use the R debugger (e.g. via
>> options(error=recover)) to find out what is the argument that
>> file.exists() has been called with. And then you could try just to call
>> file.exists() directly with that argument to trigger the problem.
>>
>> It may be that the argument has been corrupted/is invalid in the current
>> native encoding. If that is the case, the next step would be to find out
>> who corrupted it (renv, R, something else). The error is displayed when
>> a path name cannot be converted from the current native encoding to
>> UTF16-LE.
>>
>> The experimental support for UTF-8 as native encoding on Windows 10 is
>> only available in a custom build of R, like the one I linked from my
>> blog post.
>>
>> Thanks
>> Tomas
>>
>>
>>
>> On 6/10/20 1:06 PM, Juan Telleria Ruiz de Aguirre wrote:
>>> Dear R Developers,
>>>
>>> I am having an issue with the renv package and R 4.0.1, which I
>>> suspect is related to base R and not the renv package itself, as with
>>> R 3.6.3 such an "error" does not appear.
>>>
>>> The error is raised by a file.exists() path, and path
>>> "C:\Users\J-tel\Documents", which in R 3.6.3 is read correctly, but in
>>> R 4.0.1 fails (Probably because of the "-" symbol), and I suspect it
>>> might be related with the new UTF-8 usage on Windows 10?
>>> (https://developer.r-project.org/Blog/public/2020/05/02/utf-8-support-on-windows/index.html)
>>>
>>> I have also checked file.exists() function and its internals, and seem
>>> not to have happened changes in the meanwhile within them:
>>>
>>> https://github.com/wch/r-source/blob/0e3b3182f87a60af4b0293a5410dde680b910f49/src/library/base/R/files.R
>>> https://github.com/search?q=SEXP%20attribute_hidden%20do_fileexists+repo:wch/r-source&type=Code
>>>
>>> Error Details:
>>>
>>>> renv::init()
>>> Error in file.exists(children) :
>>>     file name conversion problem -- name too long?
>>>> traceback()
>>> 14: file.exists(children)
>>> 13: renv_dependencies_find_dir_children(path, root)
>>> 12: renv_dependencies_find_dir(path, root)
>>> 11: FUN(X[[i]], ...)
>>> 10: lapply(path, renv_dependencies_find_impl, root = root)
>>> 9: renv_dependencies_find(path, root)
>>> 8: (function (path = getwd(), root = NULL, ..., progress = TRUE,
>>>          errors = c("reported", "fatal", "ignored"), dev = FALSE)
>>>      {
>>>          path <- renv_path_normalize(path, winslash = "/", mustWork = TRUE)
>>>          root <- root %||% renv_dependencies_root(path)
>>>          if (exists(path, envir = `_renv_dependencies`))
>>>              return(get(path, envir = `_renv_dependencies`))
>>>          renv_dependencies_begin(root = root)
>>>          on.exit(renv_dependencies_end(), add = TRUE)
>>>          dots <- list(...)
>>>          if (identical(dots[["quiet"]], TRUE)) {
>>>              progress <- FALSE
>>>              errors <- "ignored"
>>>          }
>>>          files <- renv_dependencies_find(path, root)
>>>          deps <- renv_dependencies_discover(files, progress, errors)
>>>          renv_dependencies_report(errors)
>>>          deps
>>>      })(path, progress = FALSE, errors = errors, dev = TRUE)
>>> 7: eval(call, envir = parent.frame(2))
>>> 6: eval(call, envir = parent.frame(2))
>>> 5: delegate(renv_dependencies_impl)
>>> 4: dependencies(path, progress = FALSE, errors = errors, dev = TRUE)
>>> 3: withCallingHandlers(dependencies(path, progress = FALSE, errors = errors,
>>>          dev = TRUE), renv.dependencies.error =
>>> renv_dependencies_error_handler(message,
>>>          errors))
>>> 2: renv_dependencies_scope(project, action = "init")
>>> 1: renv::init()
>>>
>>>> renv::diagnostics()
>>> Diagnostics Report -- renv [0.10.0]
>>> ===================================
>>>
>>> # Session Info =======================
>>> R version 4.0.1 (2020-06-06)
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> Running under: Windows 10 x64 (build 18362)
>>>
>>> Matrix products: default
>>>
>>> locale:
>>> [1] LC_COLLATE=Spanish_Spain.1252  LC_CTYPE=Spanish_Spain.1252
>>> [3] LC_MONETARY=Spanish_Spain.1252 LC_NUMERIC=C
>>> [5] LC_TIME=Spanish_Spain.1252
>>>
>>> attached base packages:
>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>
>>> other attached packages:
>>> [1] renv_0.10.0
>>>
>>> loaded via a namespace (and not attached):
>>>    [1] compiler_4.0.1   rsconnect_0.8.16 htmltools_0.4.0  tools_4.0.1
>>>    [5] yaml_2.2.1       Rcpp_1.0.4.6     rmarkdown_2.2    knitr_1.28
>>>    [9] xfun_0.14        digest_0.6.25    packrat_0.5.0    rlang_0.4.6
>>> [13] evaluate_0.14
>>>
>>> # Project ============================
>>> Project path: "~/Test2"
>>>
>>> # Status =============================
>>>
>>> # Lockfile ===========================
>>> This project has not yet been snapshotted: 'renv.lock' does not exist.
>>>
>>> # Library ============================
>>> The project library "~/Test2/renv/library/R-4.0/x86_64-w64-mingw32"
>>> does not exist.
>>>
>>> # Dependencies =======================
>>>
>>> # User Profile =======================
>>> [no user profile detected]
>>>
>>> # Settings ===========================
>>> List of 6
>>>    $ external.libraries       : chr(0)
>>>    $ ignored.packages         : chr(0)
>>>    $ package.dependency.fields: chr [1:3] "Imports" "Depends" "LinkingTo"
>>>    $ snapshot.type            : chr "implicit"
>>>    $ use.cache                : logi TRUE
>>>    $ vcs.ignore.library       : logi TRUE
>>>
>>> # Options ============================
>>> List of 1
>>>    $ renv.verbose: logi TRUE
>>>
>>> # Environment Variables ==============
>>> HOME        = C:\Users\J-tel\OneDrive\Documents
>>> LANG        = <NA>
>>> R_LIBS      = <NA>
>>> R_LIBS_SITE = <NA>
>>> R_LIBS_USER = C:/Users/J-tel/OneDrive/Documents/R/win-library/4.0
>>>
>>> # PATH ===============================
>>> - C:\rtools40\usr\bin
>>> - C:\Program Files\R\R-4.0.1\bin\x64
>>> - C:\ProgramData\Miniconda3
>>> - C:\ProgramData\Miniconda3\Library\mingw-w64\bin
>>> - C:\ProgramData\Miniconda3\Library\usr\bin
>>> - C:\ProgramData\Miniconda3\Library\bin
>>> - C:\ProgramData\Miniconda3\Scripts
>>> - C:\ProgramData\Oracle\Java\javapath
>>> - C:\WINDOWS\system32
>>> - C:\WINDOWS
>>> - C:\WINDOWS\System32\Wbem
>>> - C:\WINDOWS\System32\WindowsPowerShell\v1.0\
>>> - C:\WINDOWS\System32\OpenSSH\
>>> - C:\Program Files\MiKTeX 2.9\miktex\bin\x64\
>>> - C:\ProgramData\Miniconda3\Scripts\conda.exe
>>>
>>> # Cache ==============================
>>> There are a total of 0 package(s) installed in the renv cache.
>>> Cache path: "C:/Users/J-tel/AppData/Local/renv/cache/v5/R-4.0/x86_64-w64-mingw32"
>>>
>>> System Information:
>>>
>>>> R.Version()
>>> $platform
>>> [1] "x86_64-w64-mingw32"
>>>
>>> $arch
>>> [1] "x86_64"
>>>
>>> $os
>>> [1] "mingw32"
>>>
>>> $system
>>> [1] "x86_64, mingw32"
>>>
>>> $status
>>> [1] ""
>>>
>>> $major
>>> [1] "4"
>>>
>>> $minor
>>> [1] "0.1"
>>>
>>> $year
>>> [1] "2020"
>>>
>>> $month
>>> [1] "06"
>>>
>>> $day
>>> [1] "06"
>>>
>>> $`svn rev`
>>> [1] "78648"
>>>
>>> $language
>>> [1] "R"
>>>
>>> $version.string
>>> [1] "R version 4.0.1 (2020-06-06)"
>>>
>>> $nickname
>>> [1] "See Things Now"
>>>
>>> Thank you,
>>> Juan
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From wdun|@p @end|ng |rom t|bco@com  Tue Jun 23 02:05:53 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Mon, 22 Jun 2020 17:05:53 -0700
Subject: [Rd] mget(missingArgument)?
Message-ID: <CAF8bMcY5dc2NLPf86ycJTw2Y2YQam4Dc5y83vjG-a93vKGUTLQ@mail.gmail.com>

Currently, when mget() is used to get the value of a function's argument
with no default value and no value in the call it returns the empty name
(R_MissingArg).  Is that the right thing to do or should it return
'ifnotfound' or give an error?

E.g.,
> a <- (function(x) { y <- "y from function's environment";
mget(c("x","y","z"), envir=environment(), ifnotfound=666)})()
> str(a)
List of 3
 $ x: symbol
 $ y: chr "y from function's environment"
 $ z: num 666

The similar function get0() gives an error in that case.
> b <- (function(x) get0("x", envir=environment(), ifnotfound=666))()
Error in get0("x", envir = environment(), ifnotfound = 666) :
  argument "x" is missing, with no default

Bill Dunlap
TIBCO Software
wdunlap tibco.com

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Tue Jun 23 05:37:32 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 22 Jun 2020 20:37:32 -0700
Subject: [Rd] mget(missingArgument)?
In-Reply-To: <CAF8bMcY5dc2NLPf86ycJTw2Y2YQam4Dc5y83vjG-a93vKGUTLQ@mail.gmail.com>
References: <CAF8bMcY5dc2NLPf86ycJTw2Y2YQam4Dc5y83vjG-a93vKGUTLQ@mail.gmail.com>
Message-ID: <CAD4oTHHntd2e=hH01ctOkYnS9VO4W8ZOePQ6viSepZ0bGBosjw@mail.gmail.com>

At first I thought this was more or less correct, because

> f = function(x) { y <- mget("x")[[1]]; missing(y)}

> f()

[1] TRUE


reflects the actual "value" of x, but then at the very least this


> f = function(x) { y <- mget("x")[[1]]; y}

> f()

*Error in f() : argument "y" is missing, with no default*


Is a problem because, of course, y was not an argument of f and talking
about its default is nonsensical, and the actual argument which was missing
is not named.


~G

On Mon, Jun 22, 2020 at 5:06 PM William Dunlap via R-devel <
r-devel at r-project.org> wrote:

> Currently, when mget() is used to get the value of a function's argument
> with no default value and no value in the call it returns the empty name
> (R_MissingArg).  Is that the right thing to do or should it return
> 'ifnotfound' or give an error?
>
> E.g.,
> > a <- (function(x) { y <- "y from function's environment";
> mget(c("x","y","z"), envir=environment(), ifnotfound=666)})()
> > str(a)
> List of 3
>  $ x: symbol
>  $ y: chr "y from function's environment"
>  $ z: num 666
>
> The similar function get0() gives an error in that case.
> > b <- (function(x) get0("x", envir=environment(), ifnotfound=666))()
> Error in get0("x", envir = environment(), ifnotfound = 666) :
>   argument "x" is missing, with no default
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Jun 23 11:23:50 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 23 Jun 2020 11:23:50 +0200
Subject: [Rd] base::order breaking change in R-devel
In-Reply-To: <CAOO9MKUJEdpLfaSsReD1yagdi-kWxf0VHXO+sUdV_5PAC=eu-Q@mail.gmail.com>
References: <CAOO9MKUJEdpLfaSsReD1yagdi-kWxf0VHXO+sUdV_5PAC=eu-Q@mail.gmail.com>
Message-ID: <33585673-f2ea-f72b-e926-ebe7b03303fd@gmail.com>

This can be narrowed down to

Sys.setlocale("LC_CTYPE","C")
x2 <- "\u00e7"
x1 <- iconv(x2, from="UTF-8", to="latin1")
x1 < x2 # FALSE or NA

In R 4.0 it returns NA, in R-devel it returns FALSE (when running in 
CP1252 locale on Windows).

It is the same character, only the encoding is different, so the R-devel 
return value is correct and the previous behavior was a bug. It should 
not matter what is the current native encoding when doing the 
comparison. Also, the collation order should only apply after characters 
are converted to a common encoding, when the encoding is known, so in 
this case the collation order of the locale should not have an impact, 
and it seems it doesn't. I don't think R should preserve 
bug-compatibility in this case, code depending on this buggy behavior 
should be fixed.

I don't see immediately which NEWS entry this corresponds to. Please 
keep in mind that NEWS don't cover all changes, for that you need to 
look at the svn commits, and even then it may be hard to track down 
concrete changes in behavior to the commits, to do that you need to 
debug the code or bisect.

Changes to _documented_ behavior should be more visible and of course 
reflected by changes in the documentation, if not, it is a bug worth 
reporting,? and the report should come with a reference to concrete 
parts of the documentation that is violated.

Best
Tomas

On 5/23/20 12:03 PM, Jan Gorecki wrote:
> Hi R developers,
> There seems to be breaking change in base::order on Windows in
> R-devel. Code below yields different results on R 4.0.0 and R-devel
> (2020-05-22 r78545). I haven't found any info about that change in
> NEWS. Was the change intentional?
>
> Sys.setlocale("LC_CTYPE","C")
> Sys.setlocale("LC_COLLATE","C")
> x1 = "fa\xE7ile"
> Encoding(x1) = "latin1"
> x2 = iconv(x1, "latin1", "UTF-8")
> base::order(c(x2,x1,x1,x2))
> Encoding(x2) = "unknown"
> base::order(c(x2,x1,x1,x2))
>
> # R 4.0.0
> base::order(c(x2,x1,x1,x2))
> #[1] 1 4 2 3
> Encoding(x2) = "unknown"
> base::order(c(x2,x1,x1,x2))
> #[1] 2 3 1 4
>
> # R-devel
> base::order(c(x2,x1,x1,x2))
> #[1] 1 2 3 4
> Encoding(x2) = "unknown"
> base::order(c(x2,x1,x1,x2))
> #[1] 1 4 2 3
>
> Best Regards,
> Jan Gorecki
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Jun 23 12:27:15 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 23 Jun 2020 12:27:15 +0200
Subject: [Rd] R-ints context documentation
In-Reply-To: <1172322540.196280.1590541621063@mail.yahoo.com>
References: <1172322540.196280.1590541621063.ref@mail.yahoo.com>
 <1172322540.196280.1590541621063@mail.yahoo.com>
Message-ID: <af7cdb33-b7da-37d5-48b9-9f52228701f1@gmail.com>

Thanks for spotting this outdated bit in the documentation. Updated now 
in R-devel. The byte-code compiler does additional optimizations - the 
contexts are not included when not needed, and source 
references/expressions are tracked in a different way. That is 
documented in the compiler documentation.

Best,
Tomas

On 5/27/20 3:07 AM, brodie gaslam via R-devel wrote:
> In 1.4 Contexts[1], should the following:
>
>> Note that whilst calls to closures and builtins set a context,
>> those to special internal functions never do.
> Be something like:
>
>> Note that whilst calls to closures always set a context,
>> those to builtins only set a context under profiling
>> or if they are of the foreign variety (e.g `.C` and similar),
>> and those to special internal functions never do.
> Based on the 'eval.c' source[2].
>
> Best,
>
> Brodie
>
> [1]: https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Contexts
> [2]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/eval.c#L821
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From h@@@n@d|w@n @end|ng |rom gm@||@com  Mon Jun 22 10:41:42 2020
From: h@@@n@d|w@n @end|ng |rom gm@||@com (Hasan Diwan)
Date: Mon, 22 Jun 2020 01:41:42 -0700
Subject: [Rd] [R] R 4.0.2 is released
In-Reply-To: <109235C0-23F3-4DA6-B895-51596AD62D31@cbs.dk>
References: <109235C0-23F3-4DA6-B895-51596AD62D31@cbs.dk>
Message-ID: <CAP+bYWDfuiuTfg74r6d=ChFevhQBKztCQBv-UnfYEfYS+x+CHw-9867@mail.gmail.com>

Congrats! -- H

	[[alternative HTML version deleted]]


From j@me@@|@he@ter @end|ng |rom gm@||@com  Tue Jun 23 22:11:42 2020
From: j@me@@|@he@ter @end|ng |rom gm@||@com (Jim Hester)
Date: Tue, 23 Jun 2020 16:11:42 -0400
Subject: [Rd] subset data.frame at C level
In-Reply-To: <CAL0QV_MzvzfG4aFi-ph=BZBF8ffusePsDCyDqmZ-MKRuOMC=RQ@mail.gmail.com>
References: <CAL0QV_MzvzfG4aFi-ph=BZBF8ffusePsDCyDqmZ-MKRuOMC=RQ@mail.gmail.com>
Message-ID: <CAD6tx96b-V8PwDz8NgELoqPrjN2EE6y3LKQAyrsfyqz0OsS3uA@mail.gmail.com>

It looks to me like internally .subset2 uses `get1index()`, but this
function is declared in Defn.h, which AFAIK is not part of the exported R
API.

 Looking at the code for `get1index()` it looks like it just loops over the
(translated) names, so I guess I just do that [0].

[0]:
https://github.com/r-devel/r-svn/blob/1ff1d4197495a6ee1e1d88348a03ff841fd27608/src/main/subscript.c#L226-L235

On Wed, Jun 17, 2020 at 6:11 AM Morgan Morgan <morgan.emailbox at gmail.com>
wrote:

> Hi,
>
> Hope you are well.
>
> I was wondering if there is a function at C level that is equivalent to
> mtcars$carb or .subset2(mtcars, "carb").
>
> If I have the index of the column then the answer would be VECTOR_ELT(df,
> asInteger(idx)) but I was wondering if there is a way to do it directly
> from the name of the column without having to loop over columns names to
> find the index?
>
> Thank you
> Best regards
> Morgan
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue Jun 23 22:21:08 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 23 Jun 2020 13:21:08 -0700
Subject: [Rd] Restrict package to load-only access - prevent attempts to
 attach it
Message-ID: <CAFDcVCRWv4jSnU4WfG-32GbDD=GLBjW4yDRmqcq6=r8zaW4ceQ@mail.gmail.com>

Hi,

I'm developing a package whose API is only meant to be used in other
packages via imports or pkg::foo().  There should be no need to attach
this package so that its API appears on the search() path. As a
maintainer, I want to avoid having it appear in search() conflicts by
mistake.

This means that, for instance, other packages should declare this
package under 'Imports' or 'Suggests' but never under 'Depends'.  I
can document this and hope that's how it's going to be used.  But, I'd
like to make it explicit that this API should be used via imports or
::.  One approach I've considered is:

.onAttach <- function(libname, pkgname) {
   if (nzchar(Sys.getenv("R_CMD"))) return()
   stop("Package ", sQuote(pkgname), " must not be attached")
}

This would produce an error if the package is attached.  It's
conditioned on the environment variable 'R_CMD' set by R itself
whenever 'R CMD ...' runs.  This is done to avoid errors in 'R CMD
INSTALL' and 'R CMD check' "load tests", which formally are *attach*
tests.  The above approach passes all the tests and checks I'm aware
of and on all platforms.

Before I ping the CRAN team explicitly, does anyone know whether this
is a valid approach?  Do you know if there are alternatives for
asserting that a package is never attached.  Maybe this is more
philosophical where the package "contract" is such that all packages
should be attachable and, if not, then it's not a valid R package.

This is a non-critical topic but if it can be done it would be useful.

Thanks,

Henrik


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Jun 23 22:59:04 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 23 Jun 2020 16:59:04 -0400
Subject: [Rd] Restrict package to load-only access - prevent attempts to
 attach it
In-Reply-To: <CAFDcVCRWv4jSnU4WfG-32GbDD=GLBjW4yDRmqcq6=r8zaW4ceQ@mail.gmail.com>
References: <CAFDcVCRWv4jSnU4WfG-32GbDD=GLBjW4yDRmqcq6=r8zaW4ceQ@mail.gmail.com>
Message-ID: <193094b6-3e7e-0670-2d14-248ffaab85bc@gmail.com>

On 23/06/2020 4:21 p.m., Henrik Bengtsson wrote:
> Hi,
> 
> I'm developing a package whose API is only meant to be used in other
> packages via imports or pkg::foo().  There should be no need to attach
> this package so that its API appears on the search() path. As a
> maintainer, I want to avoid having it appear in search() conflicts by
> mistake.
> 
> This means that, for instance, other packages should declare this
> package under 'Imports' or 'Suggests' but never under 'Depends'.  I
> can document this and hope that's how it's going to be used.  But, I'd
> like to make it explicit that this API should be used via imports or
> ::.  One approach I've considered is:
> 
> .onAttach <- function(libname, pkgname) {
>     if (nzchar(Sys.getenv("R_CMD"))) return()
>     stop("Package ", sQuote(pkgname), " must not be attached")
> }
> 
> This would produce an error if the package is attached.  It's
> conditioned on the environment variable 'R_CMD' set by R itself
> whenever 'R CMD ...' runs.  This is done to avoid errors in 'R CMD
> INSTALL' and 'R CMD check' "load tests", which formally are *attach*
> tests.  The above approach passes all the tests and checks I'm aware
> of and on all platforms.
> 
> Before I ping the CRAN team explicitly, does anyone know whether this
> is a valid approach?  Do you know if there are alternatives for
> asserting that a package is never attached.  Maybe this is more
> philosophical where the package "contract" is such that all packages
> should be attachable and, if not, then it's not a valid R package.
> 
> This is a non-critical topic but if it can be done it would be useful.

Speaking from the philosophical side, I think this is probably a bad 
idea.  Presumably you have some idea of how your package will be used, 
but in my experience, really interesting things happen when such 
assumptions aren't met, and people use code in different ways.

So I'd prefer that you didn't try to prevent me from using your package 
in some weird way.  It's fine if you document that it's intended to be 
used in some particular way, but why try to prevent me from using it 
differently?  Just tell me to read the docs when problems arise because 
of my misuse and I ask you for help.

Duncan Murdoch


From @purd|e@@ @end|ng |rom gm@||@com  Wed Jun 24 02:09:38 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Wed, 24 Jun 2020 12:09:38 +1200
Subject: [Rd] Restrict package to load-only access - prevent attempts to
 attach it
In-Reply-To: <CAFDcVCRWv4jSnU4WfG-32GbDD=GLBjW4yDRmqcq6=r8zaW4ceQ@mail.gmail.com>
References: <CAFDcVCRWv4jSnU4WfG-32GbDD=GLBjW4yDRmqcq6=r8zaW4ceQ@mail.gmail.com>
Message-ID: <CAB8pepwu_NKfXxQ12h4kayBsktY2Rfa3wbMNvH43pcdnxbzBiQ@mail.gmail.com>

You could go one step down, print a note or a warning.

Also, you could combine different approaches:
Check for an (additional) environment variable.
If set, print a note, if not set, generate a warning (or an error).

That would prevent someone accidently attaching your package, and
would discourage them from doing it.
But would also allow people to attach your package, if they really want to.


On Wed, Jun 24, 2020 at 8:21 AM Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> Hi,
>
> I'm developing a package whose API is only meant to be used in other
> packages via imports or pkg::foo().  There should be no need to attach
> this package so that its API appears on the search() path. As a
> maintainer, I want to avoid having it appear in search() conflicts by
> mistake.
>
> This means that, for instance, other packages should declare this
> package under 'Imports' or 'Suggests' but never under 'Depends'.  I
> can document this and hope that's how it's going to be used.  But, I'd
> like to make it explicit that this API should be used via imports or
> ::.  One approach I've considered is:
>
> .onAttach <- function(libname, pkgname) {
>    if (nzchar(Sys.getenv("R_CMD"))) return()
>    stop("Package ", sQuote(pkgname), " must not be attached")
> }
>
> This would produce an error if the package is attached.  It's
> conditioned on the environment variable 'R_CMD' set by R itself
> whenever 'R CMD ...' runs.  This is done to avoid errors in 'R CMD
> INSTALL' and 'R CMD check' "load tests", which formally are *attach*
> tests.  The above approach passes all the tests and checks I'm aware
> of and on all platforms.
>
> Before I ping the CRAN team explicitly, does anyone know whether this
> is a valid approach?  Do you know if there are alternatives for
> asserting that a package is never attached.  Maybe this is more
> philosophical where the package "contract" is such that all packages
> should be attachable and, if not, then it's not a valid R package.
>
> This is a non-critical topic but if it can be done it would be useful.
>
> Thanks,
>
> Henrik
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From x|e @end|ng |rom y|hu|@n@me  Wed Jun 24 06:40:39 2020
From: x|e @end|ng |rom y|hu|@n@me (Yihui Xie)
Date: Tue, 23 Jun 2020 23:40:39 -0500
Subject: [Rd] 
 Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
In-Reply-To: <88588972-223f-4d77-5e41-251eec6c6e8d@gmail.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
 <857dde35-259a-cff8-27b4-4bdc098ccb31-3957@gmail.com>
 <CALFMOMAnGodB557Q_NBCMWAw6+FLHHi8KCjaOG+U1q4j=f28Eg@mail.gmail.com>
 <88588972-223f-4d77-5e41-251eec6c6e8d@gmail.com>
Message-ID: <CANROs4c2nsANgCNH9P3FhMLTk2TOwdZLPW4OLGocHt81vLdS9Q@mail.gmail.com>

Hi Tomas,

Sorry for the false alarm! I did some further testing, and you were
right. There was no regression. I suspected it was a regression
because the user who reported the issue said his code worked in R 3.6
but not 4.0. I should have tested it more carefully by myself. After I
tested it again with the German locale and Chinese locale,
respectively, I found that the code worked for both versions of R in
the German locale, and failed in the Chinese locale. Your explanation
makes perfect sense to me. I have also read your blog post when it
came out last month, and I'm really looking forward to the end of this
character encoding pain! Thank you very much for the hard work!

Regards,
Yihui
--
https://yihui.org

On Mon, Jun 22, 2020 at 3:37 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> Hi Yihui,
>
> list.files() returns file names converted to native encoding by Windows,
> so one needs to use only characters representable in current native
> encoding for file names. If one wants to be safe, it makes sense to be
> much stricter than that (only ASCII, and only a subset of it, there is a
> number of recommendations that can be found online). Using more than
> that is asking for trouble.
>
> Unicode "\u00e4" is a Latin-1 character, so representable in CP1252. On
> my Windows running in CP1252 as C locale and system code page, your
> example works fine, file.exists() returns TRUE, and this is the expected
> behavior (tested in R-devel and R4.0).
>
> Your example was run in CP1252 as C locale but CP936 as the system code
> page (see the sessionInfo() output). On Windows, unfortunately, there
> are two different "current locales" at a time. With your settings
> (CP1252 as C locale and CP936 as system code page), I get the same
> results as you, file.exists() returns FALSE. enc2native(z) works fine
> and returns a valid Latin-1 string, but that is because here "native" is
> CP1252. Windows API functions and consequently some C library functions
> that return strings from the OS, however, convert to the encoding from
> the system code page, which is CP936 and it cannot represent "?". So,
> currently the behavior you are reporting is expected for R 4.0 and
> earlier. I don't think this is a regression, it couldn't have worked
> before, either - and I've tested in 3.6.3 and 3.4.3 on my system.
>
> These problems will go away when UTF-8 is both the current native
> encoding for the C locale and the system code page. This is possible in
> recent Windows 10, but requires UCRT and hence a new toolchain to build
> R, and requires all packages and libraries to be rebuilt from source.
> More details on my blog, also there is experimental build of R
> (installer) and experimental toolchain available:
> https://developer.r-project.org/Blog/public/2020/05/02/utf-8-support-on-windows/index.html
>
> Best
> Tomas
>
>
> On 6/22/20 6:11 AM, Yihui Xie wrote:
> > Hi Tomas,
> >
> > I received a report about R 4.0.0 in the knitr package
> > (https://github.com/yihui/knitr/issues/1840), and I think it is
> > related to the issue here. I created a minimal reproducible example
> > below:
> >
> > owd = setwd(tempdir())
> > z = 'K\u00e4sch.txt'
> > file.create(z)
> > list.files()
> > file.exists(list.files())
> > setwd(owd)
> >
> > Output:
> >
> >> owd = setwd(tempdir())
> >> z = 'K\u00e4sch.txt'
> >> file.create(z)
> > [1] TRUE
> >> list.files()
> > [1] "K?sch.txt"
> >> file.exists(list.files())
> > [1] FALSE
> >> setwd(owd)
> > I wonder if it is expected that file.exists() returns FALSE here.
> >
> >> sessionInfo()
> > R version 4.0.1 (2020-06-06)
> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> > Running under: Windows 7 x64 (build 7601) Service Pack 1
> >
> > locale:
> > [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252
> > [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
> > [5] LC_TIME=English_United States.1252
> > system code page: 936
> >
> > FWIW, I also tested Chinese characters in the variable `z` above, and
> > file.exists() returns TRUE only after I Sys.setlocale(, "Chinese").
> >
> > Regards,
> > Yihui
> >
> > On Thu, Jun 11, 2020 at 3:11 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>
> >> Dear Juan,
> >>
> >> I don't see what is the problem from your report. Please try to create a
> >> minimal but complete reproducible example that does not use the renv
> >> package. Perhaps you could use the R debugger (e.g. via
> >> options(error=recover)) to find out what is the argument that
> >> file.exists() has been called with. And then you could try just to call
> >> file.exists() directly with that argument to trigger the problem.
> >>
> >> It may be that the argument has been corrupted/is invalid in the current
> >> native encoding. If that is the case, the next step would be to find out
> >> who corrupted it (renv, R, something else). The error is displayed when
> >> a path name cannot be converted from the current native encoding to
> >> UTF16-LE.
> >>
> >> The experimental support for UTF-8 as native encoding on Windows 10 is
> >> only available in a custom build of R, like the one I linked from my
> >> blog post.
> >>
> >> Thanks
> >> Tomas
> >>
> >>
> >>
> >> On 6/10/20 1:06 PM, Juan Telleria Ruiz de Aguirre wrote:
> >>> Dear R Developers,
> >>>
> >>> I am having an issue with the renv package and R 4.0.1, which I
> >>> suspect is related to base R and not the renv package itself, as with
> >>> R 3.6.3 such an "error" does not appear.
> >>>
> >>> The error is raised by a file.exists() path, and path
> >>> "C:\Users\J-tel\Documents", which in R 3.6.3 is read correctly, but in
> >>> R 4.0.1 fails (Probably because of the "-" symbol), and I suspect it
> >>> might be related with the new UTF-8 usage on Windows 10?
> >>> (https://developer.r-project.org/Blog/public/2020/05/02/utf-8-support-on-windows/index.html)
> >>>
> >>> I have also checked file.exists() function and its internals, and seem
> >>> not to have happened changes in the meanwhile within them:
> >>>
> >>> https://github.com/wch/r-source/blob/0e3b3182f87a60af4b0293a5410dde680b910f49/src/library/base/R/files.R
> >>> https://github.com/search?q=SEXP%20attribute_hidden%20do_fileexists+repo:wch/r-source&type=Code
> >>>
> >>> Error Details:
> >>>
> >>>> renv::init()
> >>> Error in file.exists(children) :
> >>>     file name conversion problem -- name too long?
> >>>> traceback()
> >>> 14: file.exists(children)
> >>> 13: renv_dependencies_find_dir_children(path, root)
> >>> 12: renv_dependencies_find_dir(path, root)
> >>> 11: FUN(X[[i]], ...)
> >>> 10: lapply(path, renv_dependencies_find_impl, root = root)
> >>> 9: renv_dependencies_find(path, root)
> >>> 8: (function (path = getwd(), root = NULL, ..., progress = TRUE,
> >>>          errors = c("reported", "fatal", "ignored"), dev = FALSE)
> >>>      {
> >>>          path <- renv_path_normalize(path, winslash = "/", mustWork = TRUE)
> >>>          root <- root %||% renv_dependencies_root(path)
> >>>          if (exists(path, envir = `_renv_dependencies`))
> >>>              return(get(path, envir = `_renv_dependencies`))
> >>>          renv_dependencies_begin(root = root)
> >>>          on.exit(renv_dependencies_end(), add = TRUE)
> >>>          dots <- list(...)
> >>>          if (identical(dots[["quiet"]], TRUE)) {
> >>>              progress <- FALSE
> >>>              errors <- "ignored"
> >>>          }
> >>>          files <- renv_dependencies_find(path, root)
> >>>          deps <- renv_dependencies_discover(files, progress, errors)
> >>>          renv_dependencies_report(errors)
> >>>          deps
> >>>      })(path, progress = FALSE, errors = errors, dev = TRUE)
> >>> 7: eval(call, envir = parent.frame(2))
> >>> 6: eval(call, envir = parent.frame(2))
> >>> 5: delegate(renv_dependencies_impl)
> >>> 4: dependencies(path, progress = FALSE, errors = errors, dev = TRUE)
> >>> 3: withCallingHandlers(dependencies(path, progress = FALSE, errors = errors,
> >>>          dev = TRUE), renv.dependencies.error =
> >>> renv_dependencies_error_handler(message,
> >>>          errors))
> >>> 2: renv_dependencies_scope(project, action = "init")
> >>> 1: renv::init()
> >>>
> >>>> renv::diagnostics()
> >>> Diagnostics Report -- renv [0.10.0]
> >>> ===================================
> >>>
> >>> # Session Info =======================
> >>> R version 4.0.1 (2020-06-06)
> >>> Platform: x86_64-w64-mingw32/x64 (64-bit)
> >>> Running under: Windows 10 x64 (build 18362)
> >>>
> >>> Matrix products: default
> >>>
> >>> locale:
> >>> [1] LC_COLLATE=Spanish_Spain.1252  LC_CTYPE=Spanish_Spain.1252
> >>> [3] LC_MONETARY=Spanish_Spain.1252 LC_NUMERIC=C
> >>> [5] LC_TIME=Spanish_Spain.1252
> >>>
> >>> attached base packages:
> >>> [1] stats     graphics  grDevices utils     datasets  methods   base
> >>>
> >>> other attached packages:
> >>> [1] renv_0.10.0
> >>>
> >>> loaded via a namespace (and not attached):
> >>>    [1] compiler_4.0.1   rsconnect_0.8.16 htmltools_0.4.0  tools_4.0.1
> >>>    [5] yaml_2.2.1       Rcpp_1.0.4.6     rmarkdown_2.2    knitr_1.28
> >>>    [9] xfun_0.14        digest_0.6.25    packrat_0.5.0    rlang_0.4.6
> >>> [13] evaluate_0.14
> >>>
> >>> # Project ============================
> >>> Project path: "~/Test2"
> >>>
> >>> # Status =============================
> >>>
> >>> # Lockfile ===========================
> >>> This project has not yet been snapshotted: 'renv.lock' does not exist.
> >>>
> >>> # Library ============================
> >>> The project library "~/Test2/renv/library/R-4.0/x86_64-w64-mingw32"
> >>> does not exist.
> >>>
> >>> # Dependencies =======================
> >>>
> >>> # User Profile =======================
> >>> [no user profile detected]
> >>>
> >>> # Settings ===========================
> >>> List of 6
> >>>    $ external.libraries       : chr(0)
> >>>    $ ignored.packages         : chr(0)
> >>>    $ package.dependency.fields: chr [1:3] "Imports" "Depends" "LinkingTo"
> >>>    $ snapshot.type            : chr "implicit"
> >>>    $ use.cache                : logi TRUE
> >>>    $ vcs.ignore.library       : logi TRUE
> >>>
> >>> # Options ============================
> >>> List of 1
> >>>    $ renv.verbose: logi TRUE
> >>>
> >>> # Environment Variables ==============
> >>> HOME        = C:\Users\J-tel\OneDrive\Documents
> >>> LANG        = <NA>
> >>> R_LIBS      = <NA>
> >>> R_LIBS_SITE = <NA>
> >>> R_LIBS_USER = C:/Users/J-tel/OneDrive/Documents/R/win-library/4.0
> >>>
> >>> # PATH ===============================
> >>> - C:\rtools40\usr\bin
> >>> - C:\Program Files\R\R-4.0.1\bin\x64
> >>> - C:\ProgramData\Miniconda3
> >>> - C:\ProgramData\Miniconda3\Library\mingw-w64\bin
> >>> - C:\ProgramData\Miniconda3\Library\usr\bin
> >>> - C:\ProgramData\Miniconda3\Library\bin
> >>> - C:\ProgramData\Miniconda3\Scripts
> >>> - C:\ProgramData\Oracle\Java\javapath
> >>> - C:\WINDOWS\system32
> >>> - C:\WINDOWS
> >>> - C:\WINDOWS\System32\Wbem
> >>> - C:\WINDOWS\System32\WindowsPowerShell\v1.0\
> >>> - C:\WINDOWS\System32\OpenSSH\
> >>> - C:\Program Files\MiKTeX 2.9\miktex\bin\x64\
> >>> - C:\ProgramData\Miniconda3\Scripts\conda.exe
> >>>
> >>> # Cache ==============================
> >>> There are a total of 0 package(s) installed in the renv cache.
> >>> Cache path: "C:/Users/J-tel/AppData/Local/renv/cache/v5/R-4.0/x86_64-w64-mingw32"
> >>>
> >>> System Information:
> >>>
> >>>> R.Version()
> >>> $platform
> >>> [1] "x86_64-w64-mingw32"
> >>>
> >>> $arch
> >>> [1] "x86_64"
> >>>
> >>> $os
> >>> [1] "mingw32"
> >>>
> >>> $system
> >>> [1] "x86_64, mingw32"
> >>>
> >>> $status
> >>> [1] ""
> >>>
> >>> $major
> >>> [1] "4"
> >>>
> >>> $minor
> >>> [1] "0.1"
> >>>
> >>> $year
> >>> [1] "2020"
> >>>
> >>> $month
> >>> [1] "06"
> >>>
> >>> $day
> >>> [1] "06"
> >>>
> >>> $`svn rev`
> >>> [1] "78648"
> >>>
> >>> $language
> >>> [1] "R"
> >>>
> >>> $version.string
> >>> [1] "R version 4.0.1 (2020-06-06)"
> >>>
> >>> $nickname
> >>> [1] "See Things Now"
> >>>
> >>> Thank you,
> >>> Juan
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From morg@n@em@||box @end|ng |rom gm@||@com  Wed Jun 24 10:23:43 2020
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Wed, 24 Jun 2020 09:23:43 +0100
Subject: [Rd] subset data.frame at C level
In-Reply-To: <CAD6tx96b-V8PwDz8NgELoqPrjN2EE6y3LKQAyrsfyqz0OsS3uA@mail.gmail.com>
References: <CAL0QV_MzvzfG4aFi-ph=BZBF8ffusePsDCyDqmZ-MKRuOMC=RQ@mail.gmail.com>
 <CAD6tx96b-V8PwDz8NgELoqPrjN2EE6y3LKQAyrsfyqz0OsS3uA@mail.gmail.com>
Message-ID: <CAL0QV_OGsBOQ+bLqykUmgLm+x=+37G3dMRHcz0ZLzATd4X+D=w@mail.gmail.com>

Thank you Jim for the feedback.

I actually implemented it the way I describe it in my first email and it
seems fast enough for me.

Just to give a bit of context I will need it at some point in package kit.
I also implemented subset by row which I actually need more as I am working
on a faster version of the unique and duplicated function. The function
unique is particularly slow for data.frame. So far I got a 100x speedup.

Best regards
Morgan


On Tue, 23 Jun 2020, 21:11 Jim Hester, <james.f.hester at gmail.com> wrote:

> It looks to me like internally .subset2 uses `get1index()`, but this
> function is declared in Defn.h, which AFAIK is not part of the exported R
> API.
>
>  Looking at the code for `get1index()` it looks like it just loops over
> the (translated) names, so I guess I just do that [0].
>
> [0]:
> https://github.com/r-devel/r-svn/blob/1ff1d4197495a6ee1e1d88348a03ff841fd27608/src/main/subscript.c#L226-L235
>
> On Wed, Jun 17, 2020 at 6:11 AM Morgan Morgan <morgan.emailbox at gmail.com>
> wrote:
>
>> Hi,
>>
>> Hope you are well.
>>
>> I was wondering if there is a function at C level that is equivalent to
>> mtcars$carb or .subset2(mtcars, "carb").
>>
>> If I have the index of the column then the answer would be VECTOR_ELT(df,
>> asInteger(idx)) but I was wondering if there is a way to do it directly
>> from the name of the column without having to loop over columns names to
>> find the index?
>>
>> Thank you
>> Best regards
>> Morgan
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From novo@|rj @end|ng |rom rutger@@edu  Wed Jun 24 20:56:06 2020
From: novo@|rj @end|ng |rom rutger@@edu (Ryan Novosielski)
Date: Wed, 24 Jun 2020 18:56:06 +0000
Subject: [Rd] R 4.0.1-4.0.2 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7
Message-ID: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>

Hi there,

I initially asked about this on r-help and was told this might be a better venue. I?m not really convinced from reading the posting guide, but I?ll give it a shot. It was also suggested that the R-Project doesn?t really care about building with ?non-standard? compilers, but I can?t find any evidence of that on the website (indeed, there?s some mention of successful past builds, and the build itself is successful).

I built R 4.0.2 with the Intel Parallel Studio XE compiler suite, versions 19.0.x to 19.1.1. Build seems to go fine. I built it like this:

module purge
module load intel/19.1.1
module list

export CC=icc
export CXX=icpc
export F77=ifort
export FC=ifort
export AR=xiar
export LD=xild

export CFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
export F77FLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
export FFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
export CXXFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
export MKL="-lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread"

VERSION=4.0.1

/scratch/novosirj/install-files/R-${VERSION}/configure --with-blas="$MKL" --with-lapack --prefix=/opt/sw/packages/intel-19_1/R-Project/${VERSION} && \
       make -j32 && make check && make -j32 install

However, the ?make check" phase fails at this part:

Testing examples for package ?parallel?
make[2]: Leaving directory `/mnt/scratch/novosirj/R-4.0.1-intel-19.1-build/tests/Examples'
make[1]: Leaving directory `/mnt/scratch/novosirj/R-4.0.1-intel-19.1-build/tests'
make[1]: Entering directory `/mnt/scratch/novosirj/R-4.0.1-intel-19.1-build/tests'
running strict specific tests
make[2]: Entering directory `/mnt/scratch/novosirj/R-4.0.1-intel-19.1-build/tests'
running code in '/scratch/novosirj/install-files/R-4.0.1/tests/eval-etc.R' ... OK
 comparing 'eval-etc.Rout' to '/scratch/novosirj/install-files/R-4.0.1/tests/eval-etc.Rout.save' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.1/tests/simple-true.R' ... OK
 comparing 'simple-true.Rout' to '/scratch/novosirj/install-files/R-4.0.1/tests/simple-true.Rout.save' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.1/tests/arith-true.R' ... OK
 comparing 'arith-true.Rout' to '/scratch/novosirj/install-files/R-4.0.1/tests/arith-true.Rout.save' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.1/tests/arith.R' ... OK
 comparing 'arith.Rout' to '/scratch/novosirj/install-files/R-4.0.1/tests/arith.Rout.save' ... OK
running code in '/scratch/novosirj/install-files/R-4.0.1/tests/lm-tests.R' ... OK
 comparing 'lm-tests.Rout' to '/scratch/novosirj/install-files/R-4.0.1/tests/lm-tests.Rout.save' ... OK
/bin/sh: line 1: 62064 Segmentation fault      (core dumped) LANGUAGE=en LC_ALL=C SRCDIR=/scratch/novosirj/install-files/R-4.0.1/tests R_DEFAULT_PACKAGES= ../bin/R --vanilla < /scratch/novosirj/install-files/R-4.0.1/tests/ok-errors.R > ok-errors.Rout.fail 2>&1
running code in '/scratch/novosirj/install-files/R-4.0.1/tests/ok-errors.R' ...make[2]: *** [ok-errors.Rout] Error 1
make[2]: Leaving directory `/mnt/scratch/novosirj/R-4.0.1-intel-19.1-build/tests'
make[1]: *** [test-Specific] Error 2
make[1]: Leaving directory `/mnt/scratch/novosirj/R-4.0.1-intel-19.1-build/tests'
make: *** [test-all-basics] Error 1

Is this something I should be concerned about, or something I can fix? Not seeing any real information about what?s going wrong here. Here?s what?s contained in ok-errors.Rout.fail:

---
R version 4.0.1 (2020-06-06) -- "See Things Now"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #### STRICT test suite in the spirit of no-segfaults,
> #### but with explicit statements.
> 
> options(error=expression(NULL))
> stop("test of `options(error=expression(NULL))'")
Error: test of `options(error=expression(NULL))'
> 
> if(FALSE) {
+ ## these ought to work on machines with enough memory
+ ## These segfaulted in 1.3.x ,  give "could not allocate" errors now
+   integer(2^30+1)
+    double(2^30+1)
+   complex(2^30+1)
+ character(2^30+1)
+ vector("list", 2^30+2)
+ }
> 
> ## bad infinite recursion / on.exit / ... interactions
> ##   catch the error to permit different error messages emitted
> ##   (handling of infinite recursion is different in the AST interpreter
> ##   and the byte-code interpreter)
> 
> bar <- function() 1+1
> foo <- function() { on.exit(bar()); foo() }
> tryCatch(foo(), error=function(x) TRUE) # now simple "infinite recursion"

*** caught segfault ***
address 0x7fff4dc1b9f8, cause 'memory not mapped'

Traceback:
1: foo()
2: foo()
3: foo()
4: foo()

...

2712: foo()
2713: foo()
2714: foo()
2715: foo()
2716: foo()
2717: foo()
2718: foo()
2719: doTryCatch(return(expr), name, parentenv, handler)
2720: tryCatchOne(expr, names, parentenv, handlers[[1L]])
2721: tryCatchList(expr, classes, parentenv, handlers)
2722: tryCatch(foo(), error = function(x) TRUE)
An irrecoverable exception occurred. R is aborting now ...
---

Thanks in advance.

--
____
|| \\UTGERS,  	 |---------------------------*O*---------------------------
||_// the State	 |         Ryan Novosielski - novosirj at rutgers.edu
|| \\ University | Sr. Technologist - 973/972.0922 (2x0922) ~*~ RBHS Campus
||  \\    of NJ	 | Office of Advanced Research Computing - MSB C630, Newark
    `'


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 195 bytes
Desc: Message signed with OpenPGP
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200624/d26e185b/attachment.sig>

From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jun 24 22:27:25 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 24 Jun 2020 16:27:25 -0400
Subject: [Rd] R 4.0.1-4.0.2 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7
In-Reply-To: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
Message-ID: <02c2d804-0afd-a4b6-182c-eea63ca1fec4@gmail.com>

If you just run the failed test, does it segfault?  What I get when I 
run it is

 > bar <- function() 1+1
 > foo <- function() { on.exit(bar()); foo() }
 > tryCatch(foo(), error=function(x) TRUE) # now simple "infinite recursion"
[1] TRUE

Clearly a segfault on an infinite recursion is undesirable, but maybe 
not the end of the world: maybe it just makes your life harder when 
debugging.  Or maybe you'll get segfaults from non-buggy code too, which 
would be really bad.  But I think you're the only one who can debug 
this, and find out why R's error handling isn't working in your build.

Duncan Murdoch

On 24/06/2020 2:56 p.m., Ryan Novosielski wrote:
> Hi there,
> 
> I initially asked about this on r-help and was told this might be a better venue. I?m not really convinced from reading the posting guide, but I?ll give it a shot. It was also suggested that the R-Project doesn?t really care about building with ?non-standard? compilers, but I can?t find any evidence of that on the website (indeed, there?s some mention of successful past builds, and the build itself is successful).
> 
> I built R 4.0.2 with the Intel Parallel Studio XE compiler suite, versions 19.0.x to 19.1.1. Build seems to go fine. I built it like this:
> 
> module purge
> module load intel/19.1.1
> module list
> 
> export CC=icc
> export CXX=icpc
> export F77=ifort
> export FC=ifort
> export AR=xiar
> export LD=xild
> 
> export CFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
> export F77FLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
> export FFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
> export CXXFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
> export MKL="-lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread"
> 
> VERSION=4.0.1
> 
> /scratch/novosirj/install-files/R-${VERSION}/configure --with-blas="$MKL" --with-lapack --prefix=/opt/sw/packages/intel-19_1/R-Project/${VERSION} && \
>         make -j32 && make check && make -j32 install
> 
> However, the ?make check" phase fails at this part:
> 
> Testing examples for package ?parallel?
> make[2]: Leaving directory `/mnt/scratch/novosirj/R-4.0.1-intel-19.1-build/tests/Examples'
> make[1]: Leaving directory `/mnt/scratch/novosirj/R-4.0.1-intel-19.1-build/tests'
> make[1]: Entering directory `/mnt/scratch/novosirj/R-4.0.1-intel-19.1-build/tests'
> running strict specific tests
> make[2]: Entering directory `/mnt/scratch/novosirj/R-4.0.1-intel-19.1-build/tests'
> running code in '/scratch/novosirj/install-files/R-4.0.1/tests/eval-etc.R' ... OK
>   comparing 'eval-etc.Rout' to '/scratch/novosirj/install-files/R-4.0.1/tests/eval-etc.Rout.save' ... OK
> running code in '/scratch/novosirj/install-files/R-4.0.1/tests/simple-true.R' ... OK
>   comparing 'simple-true.Rout' to '/scratch/novosirj/install-files/R-4.0.1/tests/simple-true.Rout.save' ... OK
> running code in '/scratch/novosirj/install-files/R-4.0.1/tests/arith-true.R' ... OK
>   comparing 'arith-true.Rout' to '/scratch/novosirj/install-files/R-4.0.1/tests/arith-true.Rout.save' ... OK
> running code in '/scratch/novosirj/install-files/R-4.0.1/tests/arith.R' ... OK
>   comparing 'arith.Rout' to '/scratch/novosirj/install-files/R-4.0.1/tests/arith.Rout.save' ... OK
> running code in '/scratch/novosirj/install-files/R-4.0.1/tests/lm-tests.R' ... OK
>   comparing 'lm-tests.Rout' to '/scratch/novosirj/install-files/R-4.0.1/tests/lm-tests.Rout.save' ... OK
> /bin/sh: line 1: 62064 Segmentation fault      (core dumped) LANGUAGE=en LC_ALL=C SRCDIR=/scratch/novosirj/install-files/R-4.0.1/tests R_DEFAULT_PACKAGES= ../bin/R --vanilla < /scratch/novosirj/install-files/R-4.0.1/tests/ok-errors.R > ok-errors.Rout.fail 2>&1
> running code in '/scratch/novosirj/install-files/R-4.0.1/tests/ok-errors.R' ...make[2]: *** [ok-errors.Rout] Error 1
> make[2]: Leaving directory `/mnt/scratch/novosirj/R-4.0.1-intel-19.1-build/tests'
> make[1]: *** [test-Specific] Error 2
> make[1]: Leaving directory `/mnt/scratch/novosirj/R-4.0.1-intel-19.1-build/tests'
> make: *** [test-all-basics] Error 1
> 
> Is this something I should be concerned about, or something I can fix? Not seeing any real information about what?s going wrong here. Here?s what?s contained in ok-errors.Rout.fail:
> 
> ---
> R version 4.0.1 (2020-06-06) -- "See Things Now"
> Copyright (C) 2020 The R Foundation for Statistical Computing
> Platform: x86_64-pc-linux-gnu (64-bit)
> 
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
> 
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
> 
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
> 
>> #### STRICT test suite in the spirit of no-segfaults,
>> #### but with explicit statements.
>>
>> options(error=expression(NULL))
>> stop("test of `options(error=expression(NULL))'")
> Error: test of `options(error=expression(NULL))'
>>
>> if(FALSE) {
> + ## these ought to work on machines with enough memory
> + ## These segfaulted in 1.3.x ,  give "could not allocate" errors now
> +   integer(2^30+1)
> +    double(2^30+1)
> +   complex(2^30+1)
> + character(2^30+1)
> + vector("list", 2^30+2)
> + }
>>
>> ## bad infinite recursion / on.exit / ... interactions
>> ##   catch the error to permit different error messages emitted
>> ##   (handling of infinite recursion is different in the AST interpreter
>> ##   and the byte-code interpreter)
>>
>> bar <- function() 1+1
>> foo <- function() { on.exit(bar()); foo() }
>> tryCatch(foo(), error=function(x) TRUE) # now simple "infinite recursion"
> 
> *** caught segfault ***
> address 0x7fff4dc1b9f8, cause 'memory not mapped'
> 
> Traceback:
> 1: foo()
> 2: foo()
> 3: foo()
> 4: foo()
> 
> ...
> 
> 2712: foo()
> 2713: foo()
> 2714: foo()
> 2715: foo()
> 2716: foo()
> 2717: foo()
> 2718: foo()
> 2719: doTryCatch(return(expr), name, parentenv, handler)
> 2720: tryCatchOne(expr, names, parentenv, handlers[[1L]])
> 2721: tryCatchList(expr, classes, parentenv, handlers)
> 2722: tryCatch(foo(), error = function(x) TRUE)
> An irrecoverable exception occurred. R is aborting now ...
> ---
> 
> Thanks in advance.
> 
> --
> ____
> || \\UTGERS,  	 |---------------------------*O*---------------------------
> ||_// the State	 |         Ryan Novosielski - novosirj at rutgers.edu
> || \\ University | Sr. Technologist - 973/972.0922 (2x0922) ~*~ RBHS Campus
> ||  \\    of NJ	 | Office of Advanced Research Computing - MSB C630, Newark
>      `'
> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From kry|ov@r00t @end|ng |rom gm@||@com  Thu Jun 25 14:06:21 2020
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Thu, 25 Jun 2020 15:06:21 +0300
Subject: [Rd] R 4.0.1-4.0.2 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7
In-Reply-To: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
Message-ID: <20200625150621.3854a233@Tarkus>

On Wed, 24 Jun 2020 18:56:06 +0000
Ryan Novosielski <novosirj at rutgers.edu> wrote:

On my machine, getOption('expressions') is 5000 and the example from
the test correctly stops with length(traceback()) == 2500. (And the
simpler example of f <- function() f(); f() stops with
length(traceback()) == 5000).

> Traceback:

<...>

> 2718: foo()

This (traceback() being more than 2500 entries long) seems to imply
that the stack size check is somehow skipped. (Perhaps optimized away?)
The evaluation depth limit is checked in src/main/eval.c, line 705 [*],
followed by stack size check. Can you attach the debugger and take a
look at the values of R_EvalDepth and R_Expressions while executing the
text? What about R_CStackStart and R_CStackLimit? What is the stack
size limit (ulimit -s?) on the machine running this test?

-- 
Best regards,
Ivan

[*]
https://github.com/wch/r-source/blob/8d7ac4699fba640d030703fa010b66bf26054cbd/src/main/eval.c#L705

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 228 bytes
Desc: ???????????????? ?????????????? OpenPGP
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200625/2fe9360d/attachment.sig>

From b@h@mev|k @end|ng |rom u@|t@u|o@no  Thu Jun 25 16:31:33 2020
From: b@h@mev|k @end|ng |rom u@|t@u|o@no (=?utf-8?Q?Bj=C3=B8rn-Helge_Mevik?=)
Date: Thu, 25 Jun 2020 16:31:33 +0200
Subject: [Rd] R 4.0.1-4.0.2 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7
In-Reply-To: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu> (Ryan
 Novosielski's message of "Wed, 24 Jun 2020 18:56:06 +0000")
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
Message-ID: <s3sy2obtdx6.fsf@varelg.uio.no>

Ryan Novosielski <novosirj at rutgers.edu> writes:

> Hi there,
>
> I initially asked about this on r-help and was told this might be a better venue. I?m not really convinced from reading the posting guide, but I?ll give it a shot. It was also suggested that the R-Project doesn?t really care about building with ?non-standard? compilers, but I can?t find any evidence of that on the website (indeed, there?s some mention of successful past builds, and the build itself is successful).
>
> I built R 4.0.2 with the Intel Parallel Studio XE compiler suite, versions 19.0.x to 19.1.1. Build seems to go fine. I built it like this:
>
> module purge
> module load intel/19.1.1
> module list
>
> export CC=icc
> export CXX=icpc
> export F77=ifort
> export FC=ifort
> export AR=xiar
> export LD=xild
>
> export CFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
> export F77FLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
> export FFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
> export CXXFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
> export MKL="-lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread"
>
> VERSION=4.0.1
>
> /scratch/novosirj/install-files/R-${VERSION}/configure --with-blas="$MKL" --with-lapack --prefix=/opt/sw/packages/intel-19_1/R-Project/${VERSION} && \
>        make -j32 && make check && make -j32 install

For what it is worth, we used to build R with the Intel compilers and
MKL on our HPC cluster (on CentOS Linux), and we used the following
setup.  Note the comments about -fp-model precise and -ipo.  It might no
longer be a problem, but maybe worth checking.

fast="-ip -O3 -qopt-mem-layout-trans=3 -xHost -mavx"
## Notes:
## -static and -ipo break compilation
## -no-prec-div breaks make check
## -fp-model precise is needed for make check
## -wd188 removes a lot of warnings (see R Inst. & Adm. manual)
export CC="icc"
export CFLAGS="$fast -wd188 -fp-model precise"
export F77="ifort"
export FFLAGS="$fast -fp-model precise"
export CXX="icpc"
export CXXFLAGS="$fast -fp-model precise"
export FC="ifort"
export FCFLAGS="$fast -fp-model precise"

## This works with intel 2011.10, at least:
BLAS=--with-blas='-mkl=parallel'
LAPACK=--with-lapack

## To make the linker find libraries in modules:
export LDFLAGS=$(echo $LD_LIBRARY_PATH | sed 's/^/-L/; s/:/ -L/g')

./configure "$BLAS" "$LAPACK" --enable-BLAS-shlib --enable-R-shlib
make -j 8
make check
make install

-- 
Regards,
Bj?rn-Helge Mevik

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 832 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200625/b365e557/attachment.sig>

From M@tthew@C@r|ucc| @end|ng |rom c@mh@c@  Thu Jun 25 20:21:02 2020
From: M@tthew@C@r|ucc| @end|ng |rom c@mh@c@ (Matthew Carlucci)
Date: Thu, 25 Jun 2020 18:21:02 +0000
Subject: [Rd] Unexpected Error Handling by Generic in R 4.0.1
Message-ID: <22E3E3E83FF7B44983E2C863FE235E1AD1196A0C@CHCREXCH1.camh.ca>

Hello R-devel community,

I posted a new R 4.0.1 behaviour to stack overflow (https://stackoverflow.com/questions/62327810/inconsistent-error-handling-of-function-and-s4-generics-on-r-4-0-1), where I think it is an undesired or unexpected change in 4.0.1. Attributes of errors seem to be lost or obscured when encountered in an S4 generic context.

An example of this being undesirable comes in shiny applications where my_reactive (an unevaluated reactive object) returns a shiny.silent.error attribute which is lost upon error within an S4 generic function. The lack of this attribute causes the entire application to exit with an error (with no stack trace available). For example, within a shiny context:

> foo <- try(nrow(my_reactive()))

> attr(foo,"condition")

<shiny.silent.error: >

Where the S4 generic returns:

> bar <- try(BiocGenerics::nrow(my_reactive()))

> attr(bar,"condition")

<simpleError in (function (cond) .Internal(C_tryCatchHelper(addr, 1L, cond)))(structure(list(message = ""), class = c("shiny.silent.error", "validation", "error", "condition"), stack.trace = [... lots more output here ...]: error in evaluating the argument 'x' in selecting a method for function 'nrow': >

>From what I can tell from the release notes of 4.0.1, this does not appear to be an expected breaking change so I am hesitant to update old code and shiny applications to account for this behaviour. Any guidance would be appreciated.

Thank you,

Matthew Carlucci

CONFIDENTIALITY NOTICE: This e-mail message, including a...{{dropped:18}}


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Jun 25 23:59:28 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 25 Jun 2020 16:59:28 -0500 (CDT)
Subject: [Rd] 
 [External]  Unexpected Error Handling by Generic in R 4.0.1
In-Reply-To: <22E3E3E83FF7B44983E2C863FE235E1AD1196A0C@CHCREXCH1.camh.ca>
References: <22E3E3E83FF7B44983E2C863FE235E1AD1196A0C@CHCREXCH1.camh.ca>
Message-ID: <alpine.DEB.2.21.2006251639050.32631@luke-Latitude-7480>

Thanks for the report.

This is due to a change restoring behavior that was disabled
temporarily to work around a bug
(https://bugs.r-project.org/bugzilla/show_bug.cgi?id=16111).
So it is again working as originally designed.

There are a number of places in the S4 dispatch code where errors are
caught and re-signaled with some additional information about the
dispatch context that might be helpful. Unfortunately all that is
retained from the original error is the message. It would be better to
signal a structured error object that includes the original error in a
slot.

Some options:

    Create and signal a structured error wrapping the original error in
    these cases.

    Revert the argument evaluation to not wrap errors.

    Drop wrapping of error from all other cases.

I don't have strong views on which way to go. But wrapping and
re-signaling from C would take a decent amount of effort so isn't likely
to happen without someone contributing a well-tested patch.

Best,

luke

On Thu, 25 Jun 2020, Matthew Carlucci wrote:

> Hello R-devel community,
>
> I posted a new R 4.0.1 behaviour to stack overflow (https://stackoverflow.com/questions/62327810/inconsistent-error-handling-of-function-and-s4-generics-on-r-4-0-1), where I think it is an undesired or unexpected change in 4.0.1. Attributes of errors seem to be lost or obscured when encountered in an S4 generic context.
>
> An example of this being undesirable comes in shiny applications where my_reactive (an unevaluated reactive object) returns a shiny.silent.error attribute which is lost upon error within an S4 generic function. The lack of this attribute causes the entire application to exit with an error (with no stack trace available). For example, within a shiny context:
>
>> foo <- try(nrow(my_reactive()))
>
>> attr(foo,"condition")
>
> <shiny.silent.error: >
>
> Where the S4 generic returns:
>
>> bar <- try(BiocGenerics::nrow(my_reactive()))
>
>> attr(bar,"condition")
>
> <simpleError in (function (cond) .Internal(C_tryCatchHelper(addr, 1L, cond)))(structure(list(message = ""), class = c("shiny.silent.error", "validation", "error", "condition"), stack.trace = [... lots more output here ...]: error in evaluating the argument 'x' in selecting a method for function 'nrow': >
>
> From what I can tell from the release notes of 4.0.1, this does not appear to be an expected breaking change so I am hesitant to update old code and shiny applications to account for this behaviour. Any guidance would be appreciated.
>
> Thank you,
>
> Matthew Carlucci
>
> CONFIDENTIALITY NOTICE: This e-mail message, including a...{{dropped:18}}
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From v|ncent@gou|et @end|ng |rom me@com  Fri Jun 26 06:01:28 2020
From: v|ncent@gou|et @end|ng |rom me@com (Vincent Goulet)
Date: Fri, 26 Jun 2020 00:01:28 -0400
Subject: [Rd] "R CMD Sweave --driver=..." woes
Message-ID: <022E471C-35B4-40CB-9930-49135C124A36@me.com>

In trying to change the driver used by Sweave on the command line using 

   R CMD Sweave --driver=foo

I consistently get the "directory 'foo' does not exist' error. (For any value of 'foo', even the default 'RweaveLatex'.)

Looking up the source code for function .Sweave that is called by 'R CMD Sweave', I notice that the argument 'driver', if used, is added to the vector of arguments of ''buildVignette' without being named. It ends up being passed to argument 'dir', hence rhe error.

I believe the simple patch below should fix the issue, but I wasn't able to test it.

Hope this helps.

v.

Vincent Goulet
Professeur titulaire
?cole d'actuariat, Universit? Laval


Index: src/library/utils/R/Sweave.R
===================================================================
--- src/library/utils/R/Sweave.R	(revision 78746)
+++ src/library/utils/R/Sweave.R	(working copy)
@@ -516,7 +516,7 @@
        do_exit(1L)
    }
    args <- list(file=file, tangle=FALSE, latex=toPDF, engine=engine, clean=clean)
-    if(nzchar(driver)) args <- c(args, driver)
+    if(nzchar(driver)) args <- c(args, driver=driver)
    args <- c(args, encoding = encoding)
    if(nzchar(options)) {
        opts <- eval(str2expression(paste0("list(", options, ")")))


From novo@|rj @end|ng |rom rutger@@edu  Fri Jun 26 19:03:03 2020
From: novo@|rj @end|ng |rom rutger@@edu (Ryan Novosielski)
Date: Fri, 26 Jun 2020 17:03:03 +0000
Subject: [Rd] R 4.0.1-4.0.2 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7
In-Reply-To: <s3sy2obtdx6.fsf@varelg.uio.no>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <s3sy2obtdx6.fsf@varelg.uio.no>
Message-ID: <D40FC895-CF5A-49A2-BCD2-3CC696CAEA1F@rutgers.edu>

> On Jun 25, 2020, at 10:31 AM, Bj?rn-Helge Mevik <b.h.mevik at usit.uio.no> wrote:
> 
> Signed PGP part
> Ryan Novosielski <novosirj at rutgers.edu> writes:
> 
>> Hi there,
>> 
>> I initially asked about this on r-help and was told this might be a better venue. I?m not really convinced from reading the posting guide, but I?ll give it a shot. It was also suggested that the R-Project doesn?t really care about building with ?non-standard? compilers, but I can?t find any evidence of that on the website (indeed, there?s some mention of successful past builds, and the build itself is successful).
>> 
>> I built R 4.0.2 with the Intel Parallel Studio XE compiler suite, versions 19.0.x to 19.1.1. Build seems to go fine. I built it like this:
>> 
>> module purge
>> module load intel/19.1.1
>> module list
>> 
>> export CC=icc
>> export CXX=icpc
>> export F77=ifort
>> export FC=ifort
>> export AR=xiar
>> export LD=xild
>> 
>> export CFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
>> export F77FLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
>> export FFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
>> export CXXFLAGS="-O3 -ipo -qopenmp -axAVX,CORE-AVX2,CORE-AVX512"
>> export MKL="-lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread"
>> 
>> VERSION=4.0.1
>> 
>> /scratch/novosirj/install-files/R-${VERSION}/configure --with-blas="$MKL" --with-lapack --prefix=/opt/sw/packages/intel-19_1/R-Project/${VERSION} && \
>>       make -j32 && make check && make -j32 install
> 
> For what it is worth, we used to build R with the Intel compilers and
> MKL on our HPC cluster (on CentOS Linux), and we used the following
> setup.  Note the comments about -fp-model precise and -ipo.  It might no
> longer be a problem, but maybe worth checking.
> 
> fast="-ip -O3 -qopt-mem-layout-trans=3 -xHost -mavx"
> ## Notes:
> ## -static and -ipo break compilation
> ## -no-prec-div breaks make check
> ## -fp-model precise is needed for make check
> ## -wd188 removes a lot of warnings (see R Inst. & Adm. manual)
> export CC="icc"
> export CFLAGS="$fast -wd188 -fp-model precise"
> export F77="ifort"
> export FFLAGS="$fast -fp-model precise"
> export CXX="icpc"
> export CXXFLAGS="$fast -fp-model precise"
> export FC="ifort"
> export FCFLAGS="$fast -fp-model precise"
> 
> ## This works with intel 2011.10, at least:
> BLAS=--with-blas='-mkl=parallel'
> LAPACK=--with-lapack
> 
> ## To make the linker find libraries in modules:
> export LDFLAGS=$(echo $LD_LIBRARY_PATH | sed 's/^/-L/; s/:/ -L/g')
> 
> ./configure "$BLAS" "$LAPACK" --enable-BLAS-shlib --enable-R-shlib
> make -j 8
> make check
> make install

Thanks, Bj?rn; -ipo no longer breaks compilation (I didn?t specify it, but I see that it was getting added automatically). I was really hoping that "-fp-model precise? (which also implies -prec-div which would seem to affect the other option mentioned) would have an impact on ?make check? here, but apparently not. Also -wd188 is no longer required to hide warnings; this doesn?t seem to be happening anymore (but remember it myself from earlier on).

I guess it might make sense to check with Intel; we have support. I wish I could remember if this ever worked right, but I don?t think I thought/knew to run "make check" on our older builds.

--
____
|| \\UTGERS,  	 |---------------------------*O*---------------------------
||_// the State	 |         Ryan Novosielski - novosirj at rutgers.edu
|| \\ University | Sr. Technologist - 973/972.0922 (2x0922) ~*~ RBHS Campus
||  \\    of NJ	 | Office of Advanced Research Computing - MSB C630, Newark
     `'


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 195 bytes
Desc: Message signed with OpenPGP
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200626/f519fae7/attachment.sig>

From novo@|rj @end|ng |rom rutger@@edu  Fri Jun 26 19:03:58 2020
From: novo@|rj @end|ng |rom rutger@@edu (Ryan Novosielski)
Date: Fri, 26 Jun 2020 17:03:58 +0000
Subject: [Rd] R 4.0.1-4.0.2 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7
In-Reply-To: <20200625150621.3854a233@Tarkus>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
Message-ID: <B511E41D-889F-4B6E-8449-6BD5555CB840@rutgers.edu>

> On Jun 25, 2020, at 8:06 AM, Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
> On Wed, 24 Jun 2020 18:56:06 +0000
> Ryan Novosielski <novosirj at rutgers.edu> wrote:
> 
> On my machine, getOption('expressions') is 5000 and the example from
> the test correctly stops with length(traceback()) == 2500. (And the
> simpler example of f <- function() f(); f() stops with
> length(traceback()) == 5000).
> 
>> Traceback:
> 
> <...>
> 
>> 2718: foo()
> 
> This (traceback() being more than 2500 entries long) seems to imply
> that the stack size check is somehow skipped. (Perhaps optimized away?)
> The evaluation depth limit is checked in src/main/eval.c, line 705 [*],
> followed by stack size check. Can you attach the debugger and take a
> look at the values of R_EvalDepth and R_Expressions while executing the
> text? What about R_CStackStart and R_CStackLimit? What is the stack
> size limit (ulimit -s?) on the machine running this test?

I can do that. I figure you may have more experience debugging R than I have, but I know the R command is a script, and that running the R binary directly doesn?t result in a working run. So what I?ve tried is to do ?gdb /bin/bash? and then running R from that shell. Is that best/are there guidelines? I?m not much of an expert in this area. Is there also any special way I need to compile R to have the appropriate symbols?

The shell I?m running in had 8192 for stack size:

[novosirj at amarel-test1 R-4.0.2-intel-19.1-build]$ ulimit -s
8192

Thanks for your help!

--
____
|| \\UTGERS,  	 |---------------------------*O*---------------------------
||_// the State	 |         Ryan Novosielski - novosirj at rutgers.edu
|| \\ University | Sr. Technologist - 973/972.0922 (2x0922) ~*~ RBHS Campus
||  \\    of NJ	 | Office of Advanced Research Computing - MSB C630, Newark
     `'


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 195 bytes
Desc: Message signed with OpenPGP
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200626/37b4c9c9/attachment.sig>

From wdun|@p @end|ng |rom t|bco@com  Sat Jun 27 00:44:18 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Fri, 26 Jun 2020 15:44:18 -0700
Subject: [Rd] Change in lapply's missing argument passing
Message-ID: <CAF8bMcb54kkNbmh9=SjkHV7_Uvw7s1apiht3smpY-GVPL9R_6g@mail.gmail.com>

Consider the following expression, in which we pass 'i=', with no value
given for the 'i' argument, to lapply.
    lapply("x", function(i, j) c(i=missing(i),j=missing(j), i=)
>From R-2.14.0 (2011-10-31) through R-3.4.4 (2018-03-15) this evaluated to
c(i=TRUE, j=FALSE).  From R-3.5.0 (2018-04-23) through R-4.0.0 (2020-04-24)
this evaluated to c(i=FALSE, j=TRUE).

Was this change intentional?

Bill Dunlap
TIBCO Software
wdunlap tibco.com

	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Sat Jun 27 00:57:06 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Fri, 26 Jun 2020 15:57:06 -0700
Subject: [Rd] Error in substring: invalid multibyte string
Message-ID: <CALK03d0+7dOx_zS9b9Xi2oFbNouqRddF1fZw0wNygQES0ohujg@mail.gmail.com>

Hi all,
I'm getting the following error from substring:

> substr("<I>Jens Oehlschl\xe4gel-Akiyoshi", 1, 100)
Error in substr("<I>Jens Oehlschl\xe4gel-Akiyoshi", 1, 100) :
  invalid multibyte string at '<e4>gel-A<6b>iyoshi'

Is that normal / intended? I've tried setting the Encoding/locale to
Latin-1/UTF-8 but that does not help. nchar gives me something similar

> nchar("<I>Jens Oehlschl\xe4gel-Akiyoshi")
Error in nchar("<I>Jens Oehlschl\xe4gel-Akiyoshi") :
  invalid multibyte string, element 1

I find it strange that substr/nchar give an error but regexpr works for
telling me the length:

> regexpr(".*", "<I>Jens Oehlschl\xe4gel-Akiyoshi")
[1] 1
attr(,"match.length")
[1] 29

Is that inconsistency normal/intended?

btw this example comes from our very own list:

> readLines("
https://stat.ethz.ch/pipermail/r-devel/1999-November/author.html")[28]
[1] "<I>Jens Oehlschl\xe4gel-Akiyoshi"

Best,
Toby

	[[alternative HTML version deleted]]


From j@goreck| @end|ng |rom w|t@edu@p|  Sat Jun 27 01:37:05 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Sat, 27 Jun 2020 00:37:05 +0100
Subject: [Rd] R-devel internal errors during check produce?
Message-ID: <CAOO9MKUUtUhxUG1nYoej1-GipH1npzvBn2nP9b3cKKKozN8ZVg@mail.gmail.com>

Hi R developers,

On R-devel (2020-06-24 r78746) I am getting those two new exceptions
during R check. I found a change which eventually may be related
https://github.com/wch/r-source/commit/69de92b9fb1b7f2a7c8d1394b8d56050881a5465
I think this may be a regression. I grep'ed package manuals and R code
for unique.default but don't see any. Usage section of the unique
method looks fine as well. Errors look a little bit like internal
errors.

* checking Rd \usage sections ... NOTE
 Error in unique.default(env_list) :
   LENGTH or similar applied to environment object
 Calls: <Anonymous> ... .get_S3_generics_as_seen_from_package ->
unique -> unique.default
 Execution halted
 The \usage entries for S3 methods should use the \method markup and not
 their full name.
 * checking S3 generic/method consistency ... WARNING
 Error in unique.default(env_list) :
   LENGTH or similar applied to environment object
 Calls: <Anonymous> ... .get_S3_generics_as_seen_from_package ->
unique -> unique.default

I don't think if it is related but I build R-devel with extra args:
--with-recommended-packages --enable-strict-barrier --disable-long-double
I check with:
--as-cran --no-manual
To reproduce download current data.table from CRAN (1.12.8) and run R check

Best regards,
Jan Gorecki


From j@goreck| @end|ng |rom w|t@edu@p|  Sat Jun 27 02:02:03 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Sat, 27 Jun 2020 01:02:03 +0100
Subject: [Rd] R-devel internal errors during check produce?
In-Reply-To: <CAOO9MKUUtUhxUG1nYoej1-GipH1npzvBn2nP9b3cKKKozN8ZVg@mail.gmail.com>
References: <CAOO9MKUUtUhxUG1nYoej1-GipH1npzvBn2nP9b3cKKKozN8ZVg@mail.gmail.com>
Message-ID: <CAOO9MKU+1934ADNSAQhMgsOn5X5zD=iyOUBh_6_kK-+PXqKfpg@mail.gmail.com>

So the unique.default is from the R tools package during checks.
I don't see those issues on CRAN checks.
Exact environment where I am reproducing this issue is a fresh ubuntu,
no R packages pre-installed
docker pull registry.gitlab.com/jangorecki/dockerfiles/r-devel
https://gitlab.com/jangorecki/dockerfiles/-/raw/master/r-devel/Dockerfile

On Sat, Jun 27, 2020 at 12:37 AM Jan Gorecki <j.gorecki at wit.edu.pl> wrote:
>
> Hi R developers,
>
> On R-devel (2020-06-24 r78746) I am getting those two new exceptions
> during R check. I found a change which eventually may be related
> https://github.com/wch/r-source/commit/69de92b9fb1b7f2a7c8d1394b8d56050881a5465
> I think this may be a regression. I grep'ed package manuals and R code
> for unique.default but don't see any. Usage section of the unique
> method looks fine as well. Errors look a little bit like internal
> errors.
>
> * checking Rd \usage sections ... NOTE
>  Error in unique.default(env_list) :
>    LENGTH or similar applied to environment object
>  Calls: <Anonymous> ... .get_S3_generics_as_seen_from_package ->
> unique -> unique.default
>  Execution halted
>  The \usage entries for S3 methods should use the \method markup and not
>  their full name.
>  * checking S3 generic/method consistency ... WARNING
>  Error in unique.default(env_list) :
>    LENGTH or similar applied to environment object
>  Calls: <Anonymous> ... .get_S3_generics_as_seen_from_package ->
> unique -> unique.default
>
> I don't think if it is related but I build R-devel with extra args:
> --with-recommended-packages --enable-strict-barrier --disable-long-double
> I check with:
> --as-cran --no-manual
> To reproduce download current data.table from CRAN (1.12.8) and run R check
>
> Best regards,
> Jan Gorecki


From kry|ov@r00t @end|ng |rom gm@||@com  Sat Jun 27 11:12:42 2020
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Sat, 27 Jun 2020 12:12:42 +0300
Subject: [Rd] Error in substring: invalid multibyte string
In-Reply-To: <CALK03d0+7dOx_zS9b9Xi2oFbNouqRddF1fZw0wNygQES0ohujg@mail.gmail.com>
References: <CALK03d0+7dOx_zS9b9Xi2oFbNouqRddF1fZw0wNygQES0ohujg@mail.gmail.com>
Message-ID: <20200627121242.2fa3b0a5@trisector>

On Fri, 26 Jun 2020 15:57:06 -0700
Toby Hocking <tdhock5 at gmail.com> wrote:

>invalid multibyte string at '<e4>gel-A<6b>iyoshi'

>https://stat.ethz.ch/pipermail/r-devel/1999-November/author.html

The server says that the text is UTF-8:

curl -sI \
 https://stat.ethz.ch/pipermail/r-devel/1999-November/author.html | \
 grep Content-Type
# Content-Type: text/html; charset=UTF-8

But it's not, at least not all of it. If you ask readLines to mark
the text as Latin-1, you get Jens Oehlschl?gel-Akiyoshi without the
mojibake and invalid multi-byte characters:

x <- readLines(
 'https://stat.ethz.ch/pipermail/r-devel/1999-November/author.html',
 encoding = 'latin1'
)[28]
substr(x, 1, 100)
# [1] "<I>Jens Oehlschl?gel-Akiyoshi"

The behaviour we observe when encoding = 'latin1' is not specified
results from returned lines having "unknown" encoding. The substr()
implementation tries to interpret such strings according to multi-byte C
locale rules (using mbrtowc(3)). On my system (yours too, probably, if
it's GNU/Linux or macOS), the multi-byte C locale encoding is UTF-8,
and this Latin-1 string does not result in valid code points when
decoded as UTF-8.

-- 
Best regards,
Ivan


From @ndre@@@b|@ette @end|ng |rom un|-due@de  Sat Jun 27 13:06:04 2020
From: @ndre@@@b|@ette @end|ng |rom un|-due@de (=?utf-8?B?QmzDpHR0ZSwgQW5kcmVhcw==?=)
Date: Sat, 27 Jun 2020 11:06:04 +0000
Subject: [Rd] roxygen2 / documentation of reexports
Message-ID: <C516EB20-644D-474A-9497-340EEDA325F4@uni-due.de>

Dear colleagues,

preparing a release of my package ?polmineR? I encountered the following issue with a new warning issued when running R CMD check with the --as-cran option on Debian with R-devel.

To reexport the magrittr pipe operator %>%, my package adopted I snippet you?d see in the dplyr package, for instance:

#' @importFrom magrittr %>%
#' @export
magrittr::`%>%`

The dplyr package has many statements of this kind and I guess the pattern is common. Roxygn2 will prepare a file documenting the reexport. But the Rd file prepared by Roxygen2 will result in an error saying ?Non-file package-anchored link(s) in documentation object?.

The part of the Rd file that is not in line with CRAN requirements is: \code{\link[magrittr]{\%>\%}}

Looking around for a solution, I realized that the DT package was adopted recently to address the issue (commit message ?fix the R-devel issue about documentation links?):
https://github.com/rstudio/DT/commit/99daef8fcd376c285f3a82be753b80dee7ae3670

The snippet to do the reexport is somewhat different (I report magrittr pipe only):

#' @importFrom magrittr %>%
#' @export %>%
NULL

But on this basis, roxygen2 will not prepare the Rd file for the reexports automatically. As I understand it, an Rd file for the DT package that works and meets the requirements of R-devel has been written manually (https://github.com/rstudio/DT/blob/master/man/DT-imports.Rd). So this is what I did for my polmineR package because I need to get it published asap (it has been archived). It works and it passes tests. So far so good.

I like to use roxygen2 systematically and I dislike having to write the reexports single file manually. So does anybody know another solution?

Checking / testing dplyr (master branch) on my Debian R-devel test environment, I realize that dplyr has many reexports that are documented in a manner that evokes the same issues I have seen. I assume that further packages will encounter this issue.

Kind regards
Andreas (Bl?tte)

--
Prof. Dr. Andreas Bl?tte
Professor of Public Policy and Regional Politics
University of Duisburg-Essen



	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sat Jun 27 14:27:35 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 27 Jun 2020 13:27:35 +0100
Subject: [Rd] roxygen2 / documentation of reexports
In-Reply-To: <C516EB20-644D-474A-9497-340EEDA325F4@uni-due.de>
References: <C516EB20-644D-474A-9497-340EEDA325F4@uni-due.de>
Message-ID: <CABtg=K=s9ZiS-RBu1RK+AAc_WaCMR3QaOx_ddMJHjhafwrVxqQ@mail.gmail.com>

You can fix this with the dev version of roxygen, you can get it from
https://github.com/r-lib/roxygen2

roxygen 7.1.1 with the fix will be on CRAN shortly, hopefully:
https://github.com/r-lib/roxygen2/issues/1126

See more about this issue here:
https://www.mail-archive.com/r-package-devel at r-project.org/msg05502.html
https://github.com/r-lib/roxygen2/pull/1109

Gabor

On Sat, Jun 27, 2020 at 1:18 PM Bl?tte, Andreas
<andreas.blaette at uni-due.de> wrote:
>
> Dear colleagues,
>
> preparing a release of my package ?polmineR? I encountered the following issue with a new warning issued when running R CMD check with the --as-cran option on Debian with R-devel.
>
> To reexport the magrittr pipe operator %>%, my package adopted I snippet you?d see in the dplyr package, for instance:
>
> #' @importFrom magrittr %>%
> #' @export
> magrittr::`%>%`
>
> The dplyr package has many statements of this kind and I guess the pattern is common. Roxygn2 will prepare a file documenting the reexport. But the Rd file prepared by Roxygen2 will result in an error saying ?Non-file package-anchored link(s) in documentation object?.
>
> The part of the Rd file that is not in line with CRAN requirements is: \code{\link[magrittr]{\%>\%}}
>
> Looking around for a solution, I realized that the DT package was adopted recently to address the issue (commit message ?fix the R-devel issue about documentation links?):
> https://github.com/rstudio/DT/commit/99daef8fcd376c285f3a82be753b80dee7ae3670
>
> The snippet to do the reexport is somewhat different (I report magrittr pipe only):
>
> #' @importFrom magrittr %>%
> #' @export %>%
> NULL
>
> But on this basis, roxygen2 will not prepare the Rd file for the reexports automatically. As I understand it, an Rd file for the DT package that works and meets the requirements of R-devel has been written manually (https://github.com/rstudio/DT/blob/master/man/DT-imports.Rd). So this is what I did for my polmineR package because I need to get it published asap (it has been archived). It works and it passes tests. So far so good.
>
> I like to use roxygen2 systematically and I dislike having to write the reexports single file manually. So does anybody know another solution?
>
> Checking / testing dplyr (master branch) on my Debian R-devel test environment, I realize that dplyr has many reexports that are documented in a manner that evokes the same issues I have seen. I assume that further packages will encounter this issue.
>
> Kind regards
> Andreas (Bl?tte)
>
> --
> Prof. Dr. Andreas Bl?tte
> Professor of Public Policy and Regional Politics
> University of Duisburg-Essen
>
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From rh@r|ow86 @end|ng |rom gm@||@com  Sat Jun 27 21:00:35 2020
From: rh@r|ow86 @end|ng |rom gm@||@com (Robert Harlow)
Date: Sat, 27 Jun 2020 15:00:35 -0400
Subject: [Rd] R CMD build/check Documentation in Writing R Extensions 1.3
Message-ID: <CAHdfS966awNN_3AqXQEB+mkbDrZVvn=06GzJBAt=rS3V71EErA@mail.gmail.com>

Hi,
  In WRE section 1.3, there is a note that says "R CMD check and R CMD build
run R processes with --vanilla in which none of the user?s startup files
are read." While this is true, is it somewhat confusing? When reading
quickly, it is possible to read that statement as "running R CMD check is
the same thing as running R --vanilla CMD check". It is easy to read WRE
and think that your .Rprofile file is being ignored by the parent R process
in a call to R CMD check when this is not the case.

Bob

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Sat Jun 27 22:34:35 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sat, 27 Jun 2020 15:34:35 -0500 (CDT)
Subject: [Rd] [External]  Change in lapply's missing argument passing
In-Reply-To: <CAF8bMcb54kkNbmh9=SjkHV7_Uvw7s1apiht3smpY-GVPL9R_6g@mail.gmail.com>
References: <CAF8bMcb54kkNbmh9=SjkHV7_Uvw7s1apiht3smpY-GVPL9R_6g@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2006271534100.32631@luke-Latitude-7480>

Yes, to resolve

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15199

Best,

luke

On Fri, 26 Jun 2020, William Dunlap via R-devel wrote:

> Consider the following expression, in which we pass 'i=', with no value
> given for the 'i' argument, to lapply.
>    lapply("x", function(i, j) c(i=missing(i),j=missing(j), i=)
> From R-2.14.0 (2011-10-31) through R-3.4.4 (2018-03-15) this evaluated to
> c(i=TRUE, j=FALSE).  From R-3.5.0 (2018-04-23) through R-4.0.0 (2020-04-24)
> this evaluated to c(i=FALSE, j=TRUE).
>
> Was this change intentional?
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From tdhock5 @end|ng |rom gm@||@com  Sun Jun 28 00:38:01 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Sat, 27 Jun 2020 15:38:01 -0700
Subject: [Rd] Error in substring: invalid multibyte string
In-Reply-To: <20200627121242.2fa3b0a5@trisector>
References: <CALK03d0+7dOx_zS9b9Xi2oFbNouqRddF1fZw0wNygQES0ohujg@mail.gmail.com>
 <20200627121242.2fa3b0a5@trisector>
Message-ID: <CALK03d0JtMVugJFi_S8yvjR7JRTG=LL_0BthU969AnkzKQti=Q@mail.gmail.com>

Thanks for the quick response Ivan. readLines with encoding='latin1' works
for me (on Ubuntu).

However I was more concerned with the inconsistency in results between
substr and regexpr. I was expecting that if one of them errors because of
an unknown encoding then the other should as well. Even better, if regexpr
works, why shouldn't substr work as well?

Incidentally the analogous stringi function stri_sub works fine in this
case:

> stringi::stri_sub("<I>Jens Oehlschl\xe4gel-Akiyoshi", 1, 100)
[1] "<I>Jens Oehlschl\xe4gel-Akiyoshi"

But the stringi analog to nchar gives a similar warning:

> stringi::stri_length("<I>Jens Oehlschl\xe4gel-Akiyoshi")
[1] NA
Warning message:
In stringi::stri_length("<I>Jens Oehlschl\xe4gel-Akiyoshi") :
  invalid UTF-8 byte sequence detected; try calling stri_enc_toutf8()


On Sat, Jun 27, 2020 at 2:12 AM Ivan Krylov <krylov.r00t at gmail.com> wrote:

> On Fri, 26 Jun 2020 15:57:06 -0700
> Toby Hocking <tdhock5 at gmail.com> wrote:
>
> >invalid multibyte string at '<e4>gel-A<6b>iyoshi'
>
> >https://stat.ethz.ch/pipermail/r-devel/1999-November/author.html
>
> The server says that the text is UTF-8:
>
> curl -sI \
>  https://stat.ethz.ch/pipermail/r-devel/1999-November/author.html | \
>  grep Content-Type
> # Content-Type: text/html; charset=UTF-8
>
> But it's not, at least not all of it. If you ask readLines to mark
> the text as Latin-1, you get Jens Oehlschl?gel-Akiyoshi without the
> mojibake and invalid multi-byte characters:
>
> x <- readLines(
>  'https://stat.ethz.ch/pipermail/r-devel/1999-November/author.html',
>  encoding = 'latin1'
> )[28]
> substr(x, 1, 100)
> # [1] "<I>Jens Oehlschl?gel-Akiyoshi"
>
> The behaviour we observe when encoding = 'latin1' is not specified
> results from returned lines having "unknown" encoding. The substr()
> implementation tries to interpret such strings according to multi-byte C
> locale rules (using mbrtowc(3)). On my system (yours too, probably, if
> it's GNU/Linux or macOS), the multi-byte C locale encoding is UTF-8,
> and this Latin-1 string does not result in valid code points when
> decoded as UTF-8.
>
> --
> Best regards,
> Ivan
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Mon Jun 29 09:29:42 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Mon, 29 Jun 2020 09:29:42 +0200
Subject: [Rd] Error in substring: invalid multibyte string
In-Reply-To: <CALK03d0JtMVugJFi_S8yvjR7JRTG=LL_0BthU969AnkzKQti=Q@mail.gmail.com>
References: <CALK03d0+7dOx_zS9b9Xi2oFbNouqRddF1fZw0wNygQES0ohujg@mail.gmail.com>
 <20200627121242.2fa3b0a5@trisector>
 <CALK03d0JtMVugJFi_S8yvjR7JRTG=LL_0BthU969AnkzKQti=Q@mail.gmail.com>
Message-ID: <fb27c1c0-6e9e-8bf4-823e-ff5eb3e3739e@gmail.com>

 From the user's (or package author's) point, all strings should always 
be valid in their declared encoding. If they are not, the result of 
string operations is undefined - it may be an error or warning, but also 
silently produced correct or incorrect result. There are R functions 
that check if a string is valid. In this example, the string was invalid 
in its declared encoding.

 From the viewpoint of R implementation (or of external software), some 
operations such as substring can be carried out in a well defined way 
even on strings with invalid characters or characters invalid in 
specific ways, usually only in some encodings (e.g. UTF-8), and the 
implementation is then more complicated. Some operations can't be well 
defined on such strings.

It may seem it would make sense to ban all invalid strings (not allow 
their creation) as not to mask errors like the one you have encountered, 
but it is sometimes better for debugging to be able to include invalid 
strings in error and diagnostic messages. Moreover, some systems support 
invalid strings in some operations also as they may appear in file 
names. On Windows, file names may include unpaired UTF-16 surrogates, 
which can't be represented in UTF-8. Some systems allow representing 
invalid strings in a custom way that is a valid string but preserves the 
information, only in some encodings (e.g. in UTF-8).

So differences in how invalid strings are treated by different R 
functions are to be expected. The same applies to differences wrt to 
external software. Some may be optimized for UTF-8 and support invalid 
strings in more cases (R does not support substring on invalid strings), 
of course other may have bugs or intentionally may not check strings for 
validity when that is perceived too slow in given operation.

Best
Tomas


On 6/28/20 12:38 AM, Toby Hocking wrote:
> Thanks for the quick response Ivan. readLines with encoding='latin1' works
> for me (on Ubuntu).
>
> However I was more concerned with the inconsistency in results between
> substr and regexpr. I was expecting that if one of them errors because of
> an unknown encoding then the other should as well. Even better, if regexpr
> works, why shouldn't substr work as well?
>
> Incidentally the analogous stringi function stri_sub works fine in this
> case:
>
>> stringi::stri_sub("<I>Jens Oehlschl\xe4gel-Akiyoshi", 1, 100)
> [1] "<I>Jens Oehlschl\xe4gel-Akiyoshi"
>
> But the stringi analog to nchar gives a similar warning:
>
>> stringi::stri_length("<I>Jens Oehlschl\xe4gel-Akiyoshi")
> [1] NA
> Warning message:
> In stringi::stri_length("<I>Jens Oehlschl\xe4gel-Akiyoshi") :
>    invalid UTF-8 byte sequence detected; try calling stri_enc_toutf8()
>
>
> On Sat, Jun 27, 2020 at 2:12 AM Ivan Krylov <krylov.r00t at gmail.com> wrote:
>
>> On Fri, 26 Jun 2020 15:57:06 -0700
>> Toby Hocking <tdhock5 at gmail.com> wrote:
>>
>>> invalid multibyte string at '<e4>gel-A<6b>iyoshi'
>>> https://stat.ethz.ch/pipermail/r-devel/1999-November/author.html
>> The server says that the text is UTF-8:
>>
>> curl -sI \
>>   https://stat.ethz.ch/pipermail/r-devel/1999-November/author.html | \
>>   grep Content-Type
>> # Content-Type: text/html; charset=UTF-8
>>
>> But it's not, at least not all of it. If you ask readLines to mark
>> the text as Latin-1, you get Jens Oehlschl?gel-Akiyoshi without the
>> mojibake and invalid multi-byte characters:
>>
>> x <- readLines(
>>   'https://stat.ethz.ch/pipermail/r-devel/1999-November/author.html',
>>   encoding = 'latin1'
>> )[28]
>> substr(x, 1, 100)
>> # [1] "<I>Jens Oehlschl?gel-Akiyoshi"
>>
>> The behaviour we observe when encoding = 'latin1' is not specified
>> results from returned lines having "unknown" encoding. The substr()
>> implementation tries to interpret such strings according to multi-byte C
>> locale rules (using mbrtowc(3)). On my system (yours too, probably, if
>> it's GNU/Linux or macOS), the multi-byte C locale encoding is UTF-8,
>> and this Latin-1 string does not result in valid code points when
>> decoded as UTF-8.
>>
>> --
>> Best regards,
>> Ivan
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @zwj|08 @end|ng |rom gm@||@com  Mon Jun 29 11:16:53 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jeff King)
Date: Mon, 29 Jun 2020 17:16:53 +0800
Subject: [Rd] A warning in gzcon but not in gzfile
Message-ID: <CAGiFhPOQ+VV+KNZ9CKrhBm4jn4N+HV9B2uDkmesMpUJfTgohDg@mail.gmail.com>

Hi all,

I used `gzfile` and `gzcon` to read a compressed file but I found that
`gzcon` gave me a different result than `gzfile`. It seems like the `gzcon`
does not handle the data correctly. I have posted an example below. In the
example, a portion of a compressed file is downloaded from Google Cloud as
a raw vector, and the data is saved into a temp file. If I use ` gzfile` to
read the file, it can show the first 1000 lines successfully. However, if I
wrap the raw vector as a connection, and use  `gzcon` to read from that
connection, it shows the first  884 lines along with a warning(see the
output).

code:

> # installed.packages("BiocManager")
> # BiocManager::install("GCSConnection", version = "devel")
> library(GCSConnection)
> ## Download data from cloud
> uri <-
> "gs://gnomad-public/release/3.0/vcf/genomes/gnomad.genomes.r3.0.sites.chr1.vcf.bgz"
> con <- gcs_connection(uri)
> data <- readBin(con, raw(), 4*1024*1024)
> close(con)
>


## write data to a file
> file_path <- tempfile()
> writeBin(data, file_path)
>


## Read the data using `gzfile`
> con1 <- gzfile(file_path)
> str(readLines(con1, 1000))
>


## Read the data using `gzcon`
> ## We create a raw connection from the raw vector
> con2 <- gzcon(rawConnection(data))
> str(readLines(con2, 1000))


output:

> > str(readLines(con1, 1000))
>  chr [1:1000] "##fileformat=VCFv4.2" "##hailversion=0.2.24-9cd88d97bedd"
> ...
> > str(readLines(con2, 1000))
>  chr [1:884] "##fileformat=VCFv4.2" "##hailversion=0.2.24-9cd88d97bedd" ...
> Warning message:
> In readLines(con2, 1000) : incomplete final line found on 'gzcon(data)'


I am not sure if this is caused by a bug in `gzcon` or the misuse of the
function. The same result can be observed at R4.0 and R4.1 devel on Win.
Here is my session info, I hope it can be helpful. Any suggestions and help
would be appreciated.

R Under development (unstable) (2020-06-27 r78747)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18363)
> Matrix products: default
> locale:
> [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United
> States.1252
> [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
>
> [5] LC_TIME=English_United States.1252
> system code page: 65001



Best,
Jiefei

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Mon Jun 29 16:13:03 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Mon, 29 Jun 2020 16:13:03 +0200
Subject: [Rd] R-devel internal errors during check produce?
In-Reply-To: <CAOO9MKU+1934ADNSAQhMgsOn5X5zD=iyOUBh_6_kK-+PXqKfpg@mail.gmail.com>
References: <CAOO9MKUUtUhxUG1nYoej1-GipH1npzvBn2nP9b3cKKKozN8ZVg@mail.gmail.com>
 <CAOO9MKU+1934ADNSAQhMgsOn5X5zD=iyOUBh_6_kK-+PXqKfpg@mail.gmail.com>
Message-ID: <24313.63215.532899.731588@hornik.net>

>>>>> Jan Gorecki writes:

> So the unique.default is from the R tools package during checks.
> I don't see those issues on CRAN checks.

I cannot reproduce this locally (and have no clues about docker).
Perhaps you can try to debug this on your end?  And see what env_list is
when the error occurs?

Best
-k


> Exact environment where I am reproducing this issue is a fresh ubuntu,
> no R packages pre-installed
> docker pull registry.gitlab.com/jangorecki/dockerfiles/r-devel
> https://gitlab.com/jangorecki/dockerfiles/-/raw/master/r-devel/Dockerfile

> On Sat, Jun 27, 2020 at 12:37 AM Jan Gorecki <j.gorecki at wit.edu.pl> wrote:
>> 
>> Hi R developers,
>> 
>> On R-devel (2020-06-24 r78746) I am getting those two new exceptions
>> during R check. I found a change which eventually may be related
>> https://github.com/wch/r-source/commit/69de92b9fb1b7f2a7c8d1394b8d56050881a5465
>> I think this may be a regression. I grep'ed package manuals and R code
>> for unique.default but don't see any. Usage section of the unique
>> method looks fine as well. Errors look a little bit like internal
>> errors.
>> 
>> * checking Rd \usage sections ... NOTE
>> Error in unique.default(env_list) :
>> LENGTH or similar applied to environment object
>> Calls: <Anonymous> ... .get_S3_generics_as_seen_from_package ->
>> unique -> unique.default
>> Execution halted
>> The \usage entries for S3 methods should use the \method markup and not
>> their full name.
>> * checking S3 generic/method consistency ... WARNING
>> Error in unique.default(env_list) :
>> LENGTH or similar applied to environment object
>> Calls: <Anonymous> ... .get_S3_generics_as_seen_from_package ->
>> unique -> unique.default
>> 
>> I don't think if it is related but I build R-devel with extra args:
>> --with-recommended-packages --enable-strict-barrier --disable-long-double
>> I check with:
>> --as-cran --no-manual
>> To reproduce download current data.table from CRAN (1.12.8) and run R check
>> 
>> Best regards,
>> Jan Gorecki

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Mon Jun 29 16:23:32 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Mon, 29 Jun 2020 16:23:32 +0200
Subject: [Rd] "R CMD Sweave --driver=..." woes
In-Reply-To: <022E471C-35B4-40CB-9930-49135C124A36@me.com>
References: <022E471C-35B4-40CB-9930-49135C124A36@me.com>
Message-ID: <24313.63844.326076.886267@hornik.net>

>>>>> Vincent Goulet via R-devel writes:

Thanks: fixed now in the trunk with c78751.

Best
-k

> In trying to change the driver used by Sweave on the command line using 
>    R CMD Sweave --driver=foo

> I consistently get the "directory 'foo' does not exist' error. (For any value of 'foo', even the default 'RweaveLatex'.)

> Looking up the source code for function .Sweave that is called by 'R CMD Sweave', I notice that the argument 'driver', if used, is added to the vector of arguments of ''buildVignette' without being named. It ends up being passed to argument 'dir', hence rhe error.

> I believe the simple patch below should fix the issue, but I wasn't able to test it.

> Hope this helps.

> v.

> Vincent Goulet
> Professeur titulaire
> ?cole d'actuariat, Universit? Laval


> Index: src/library/utils/R/Sweave.R
> ===================================================================
> --- src/library/utils/R/Sweave.R	(revision 78746)
> +++ src/library/utils/R/Sweave.R	(working copy)
> @@ -516,7 +516,7 @@
>         do_exit(1L)
>     }
>     args <- list(file=file, tangle=FALSE, latex=toPDF, engine=engine, clean=clean)
> -    if(nzchar(driver)) args <- c(args, driver)
> +    if(nzchar(driver)) args <- c(args, driver=driver)
>     args <- c(args, encoding = encoding)
>     if(nzchar(options)) {
>         opts <- eval(str2expression(paste0("list(", options, ")")))

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From JAR@uh @end|ng |rom web@de  Mon Jun 29 16:39:20 2020
From: JAR@uh @end|ng |rom web@de (Johannes Rauh)
Date: Mon, 29 Jun 2020 16:39:20 +0200
Subject: [Rd] `basename` and `dirname` change the encoding to "UTF-8"
In-Reply-To: <CANROs4c2nsANgCNH9P3FhMLTk2TOwdZLPW4OLGocHt81vLdS9Q@mail.gmail.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
 <857dde35-259a-cff8-27b4-4bdc098ccb31-3957@gmail.com>
 <CALFMOMAnGodB557Q_NBCMWAw6+FLHHi8KCjaOG+U1q4j=f28Eg@mail.gmail.com>
 <88588972-223f-4d77-5e41-251eec6c6e8d@gmail.com>
 <CANROs4c2nsANgCNH9P3FhMLTk2TOwdZLPW4OLGocHt81vLdS9Q@mail.gmail.com>
Message-ID: <trinity-80ed050e-17bd-45ed-983a-5ff860b0daaf-1593441560785@3c-app-webde-bap18>

Dear R Developers,

I noticed that `basename` and `dirname` always return "UTF-8" on Windows (tested with R-4.0.0 and R-3.6.3):

> p <- "F??/B?r"
> Encoding(p)
[1] "latin1"
> Encoding(dirname(p))
[1] "UTF-8"
> Encoding(basename(p))
[1] "UTF-8"

Is this on purpose?  At least I did not find any relevant comment in the documentation of `dirname`/`basename`.

Background: I'm currently struggeling with a directory name containing a latin1-character.  (I know that this is a bad idea, but I did not create the directory and I cannot rename it.)  I now want to pass a latin1-directory name to a function, which internally uses `tools::makeLazyLoadDB`.  At that point, internally, `dirname` is called, which changes the encoding, and things break.  If I use `debug` to halt the processing and "fix" the encoding, things work as expected.

So, if possible, I would prefer that `dirname` and `basename` preserve the encoding.

Best regards
Johannes


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jun 29 18:42:05 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 29 Jun 2020 18:42:05 +0200
Subject: [Rd] R-devel internal errors during check produce?
In-Reply-To: <24313.63215.532899.731588@hornik.net>
References: <CAOO9MKUUtUhxUG1nYoej1-GipH1npzvBn2nP9b3cKKKozN8ZVg@mail.gmail.com>
 <CAOO9MKU+1934ADNSAQhMgsOn5X5zD=iyOUBh_6_kK-+PXqKfpg@mail.gmail.com>
 <24313.63215.532899.731588@hornik.net>
Message-ID: <24314.6621.320580.682163@stat.math.ethz.ch>

>>>>> Kurt Hornik 
>>>>>     on Mon, 29 Jun 2020 16:13:03 +0200 writes:

>>>>> Jan Gorecki writes:
    >> So the unique.default is from the R tools package during
    >> checks.  I don't see those issues on CRAN checks.

    > I cannot reproduce this locally (and have no clues about
    > docker).  Perhaps you can try to debug this on your end?
    > And see what env_list is when the error occurs?

    > Best -k

Indeed, if it is a bug in R (as opposed to being an assumption
that 'data.table' makes about undocumented R internals), it
should be reproducible with a very small dummy package instead
of data.table. ... or actually reproducible with relatively
simple R code calling unique() not envolving any non base package.

Martin


    >> Exact environment where I am reproducing this issue is a
    >> fresh ubuntu, no R packages pre-installed docker pull
    >> registry.gitlab.com/jangorecki/dockerfiles/r-devel
    >> https://gitlab.com/jangorecki/dockerfiles/-/raw/master/r-devel/Dockerfile

    >> On Sat, Jun 27, 2020 at 12:37 AM Jan Gorecki
    >> <j.gorecki at wit.edu.pl> wrote:
    >>> 
    >>> Hi R developers,
    >>> 
    >>> On R-devel (2020-06-24 r78746) I am getting those two
    >>> new exceptions during R check. I found a change which
    >>> eventually may be related
    >>> https://github.com/wch/r-source/commit/69de92b9fb1b7f2a7c8d1394b8d56050881a5465
    >>> I think this may be a regression. I grep'ed package
    >>> manuals and R code for unique.default but don't see
    >>> any. Usage section of the unique method looks fine as
    >>> well. Errors look a little bit like internal errors.
    >>> 
    >>> * checking Rd \usage sections ... NOTE Error in
    >>> unique.default(env_list) : LENGTH or similar applied to
    >>> environment object Calls: <Anonymous>
    >>> ... .get_S3_generics_as_seen_from_package -> unique ->
    >>> unique.default Execution halted The \usage entries for
    >>> S3 methods should use the \method markup and not their
    >>> full name.  * checking S3 generic/method consistency
    >>> ... WARNING Error in unique.default(env_list) : LENGTH
    >>> or similar applied to environment object Calls:
    >>> <Anonymous> ... .get_S3_generics_as_seen_from_package ->
    >>> unique -> unique.default
    >>> 
    >>> I don't think if it is related but I build R-devel with
    >>> extra args: --with-recommended-packages
    >>> --enable-strict-barrier --disable-long-double I check
    >>> with: --as-cran --no-manual To reproduce download
    >>> current data.table from CRAN (1.12.8) and run R check
    >>> 
    >>> Best regards, Jan Gorecki

    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Jun 29 20:50:44 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 29 Jun 2020 14:50:44 -0400
Subject: [Rd] `basename` and `dirname` change the encoding to "UTF-8"
In-Reply-To: <trinity-80ed050e-17bd-45ed-983a-5ff860b0daaf-1593441560785@3c-app-webde-bap18>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
 <857dde35-259a-cff8-27b4-4bdc098ccb31-3957@gmail.com>
 <CALFMOMAnGodB557Q_NBCMWAw6+FLHHi8KCjaOG+U1q4j=f28Eg@mail.gmail.com>
 <88588972-223f-4d77-5e41-251eec6c6e8d@gmail.com>
 <CANROs4c2nsANgCNH9P3FhMLTk2TOwdZLPW4OLGocHt81vLdS9Q@mail.gmail.com>
 <trinity-80ed050e-17bd-45ed-983a-5ff860b0daaf-1593441560785@3c-app-webde-bap18>
Message-ID: <67ee709c-9aa2-aefa-6233-4ecf569a1e63@gmail.com>

On 29/06/2020 10:39 a.m., Johannes Rauh wrote:
> Dear R Developers,
> 
> I noticed that `basename` and `dirname` always return "UTF-8" on Windows (tested with R-4.0.0 and R-3.6.3):
> 
>> p <- "F??/B?r"
>> Encoding(p)
> [1] "latin1"
>> Encoding(dirname(p))
> [1] "UTF-8"
>> Encoding(basename(p))
> [1] "UTF-8"
> 
> Is this on purpose?  At least I did not find any relevant comment in the documentation of `dirname`/`basename`.
> 
> Background: I'm currently struggeling with a directory name containing a latin1-character.  (I know that this is a bad idea, but I did not create the directory and I cannot rename it.)  I now want to pass a latin1-directory name to a function, which internally uses `tools::makeLazyLoadDB`.  At that point, internally, `dirname` is called, which changes the encoding, and things break.  If I use `debug` to halt the processing and "fix" the encoding, things work as expected.
> 
> So, if possible, I would prefer that `dirname` and `basename` preserve the encoding.

Actually, makeLazyLoadDB isn't exported from tools, so strictly speaking 
you shouldn't be calling it.  Or perhaps you have a good reason to call 
it, and should be asking for it to be exported, or you are calling a 
published function which calls it:  in either case it should probably be 
fixed to accept UTF-8.

But it doesn't call dirname or basename, so maybe the function that 
calls it is the one that needs fixing.

In any case, while asking dirname() and basename() to preserve the 
encoding sounds reasonable, it seems like it would just be covering up a 
deeper problem.

Duncan Murdoch


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Jun 29 20:55:34 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 29 Jun 2020 19:55:34 +0100
Subject: [Rd] Possible ABI change in R 4.0.1
Message-ID: <CABtg=K=2iJeaXjENMfgTTMxLsmSR0mHAS417F28wMKgkE7Cw8g@mail.gmail.com>

Hi all,

it seems that from R 4.0.1 EXTPTR_PTR can be either a macro or a
function, depending on whether USE_RINTERNALS is requested.

Jeroen helped me find that this was in 78592:
https://github.com/wch/r-source/commit/c634fec5214e73747b44d7c0e6f047fefe44667d

This is a problem, because binary packages that are built on R 4.0.1
or R 4.0.2 will potentially not load on R 4.0.0, if they use the
EXTPTR_PTR function.

E.g. this is R 4.0.0 on Linux:

> library(Rcpp)
Error: package or namespace load failed for ?Rcpp? in dyn.load(file,
DLLpath = DLLpath, ...):
 unable to load shared object '/usr/local/lib/R/library/Rcpp/libs/Rcpp.so':
  Error relocating /usr/local/lib/R/library/Rcpp/libs/Rcpp.so:
EXTPTR_PTR: symbol not found
In addition: Warning message:
package ?Rcpp? was built under R version 4.0.1

It is easiest to reproduce this on Windows, because the CRAN binaries
are now built on R 4.0.2, so if you install Rcpp on R 4.0.0 from CRAN,
and try to load it you'll get:

> library(Rcpp)
Error: package or namespace load failed for 'Rcpp' in inDL(x,
as.logical(local), as.logical(now), ...):
 unable to load shared object
'C:/Users/csard/R/win-library/4.0/Rcpp/libs/x64/Rcpp.dll':
  LoadLibrary failure:  The specified procedure could not be found.
In addition: Warning message:
package 'Rcpp' was built under R version 4.0.2

I suppose this change was not intended?

Best,
Gabor


From kev|nu@hey @end|ng |rom gm@||@com  Mon Jun 29 21:00:06 2020
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Mon, 29 Jun 2020 12:00:06 -0700
Subject: [Rd] `basename` and `dirname` change the encoding to "UTF-8"
In-Reply-To: <67ee709c-9aa2-aefa-6233-4ecf569a1e63@gmail.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
 <857dde35-259a-cff8-27b4-4bdc098ccb31-3957@gmail.com>
 <CALFMOMAnGodB557Q_NBCMWAw6+FLHHi8KCjaOG+U1q4j=f28Eg@mail.gmail.com>
 <88588972-223f-4d77-5e41-251eec6c6e8d@gmail.com>
 <CANROs4c2nsANgCNH9P3FhMLTk2TOwdZLPW4OLGocHt81vLdS9Q@mail.gmail.com>
 <trinity-80ed050e-17bd-45ed-983a-5ff860b0daaf-1593441560785@3c-app-webde-bap18>
 <67ee709c-9aa2-aefa-6233-4ecf569a1e63@gmail.com>
Message-ID: <CAJXgQP3dc=5mPLRyYXskjSxoTR3_OJ85NWxJUC_2Kf-_sXpfdA@mail.gmail.com>

Did you test with R 4.0.2 or R-devel? A bug related to this issue was
recently fixed:

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17833

Best,
Kevin

On Mon, Jun 29, 2020 at 11:51 AM Duncan Murdoch
<murdoch.duncan at gmail.com> wrote:
>
> On 29/06/2020 10:39 a.m., Johannes Rauh wrote:
> > Dear R Developers,
> >
> > I noticed that `basename` and `dirname` always return "UTF-8" on Windows (tested with R-4.0.0 and R-3.6.3):
> >
> >> p <- "F??/B?r"
> >> Encoding(p)
> > [1] "latin1"
> >> Encoding(dirname(p))
> > [1] "UTF-8"
> >> Encoding(basename(p))
> > [1] "UTF-8"
> >
> > Is this on purpose?  At least I did not find any relevant comment in the documentation of `dirname`/`basename`.
> >
> > Background: I'm currently struggeling with a directory name containing a latin1-character.  (I know that this is a bad idea, but I did not create the directory and I cannot rename it.)  I now want to pass a latin1-directory name to a function, which internally uses `tools::makeLazyLoadDB`.  At that point, internally, `dirname` is called, which changes the encoding, and things break.  If I use `debug` to halt the processing and "fix" the encoding, things work as expected.
> >
> > So, if possible, I would prefer that `dirname` and `basename` preserve the encoding.
>
> Actually, makeLazyLoadDB isn't exported from tools, so strictly speaking
> you shouldn't be calling it.  Or perhaps you have a good reason to call
> it, and should be asking for it to be exported, or you are calling a
> published function which calls it:  in either case it should probably be
> fixed to accept UTF-8.
>
> But it doesn't call dirname or basename, so maybe the function that
> calls it is the one that needs fixing.
>
> In any case, while asking dirname() and basename() to preserve the
> encoding sounds reasonable, it seems like it would just be covering up a
> deeper problem.
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@goreck| @end|ng |rom w|t@edu@p|  Mon Jun 29 23:34:32 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Mon, 29 Jun 2020 22:34:32 +0100
Subject: [Rd] R-devel internal errors during check produce?
In-Reply-To: <24314.6621.320580.682163@stat.math.ethz.ch>
References: <CAOO9MKUUtUhxUG1nYoej1-GipH1npzvBn2nP9b3cKKKozN8ZVg@mail.gmail.com>
 <CAOO9MKU+1934ADNSAQhMgsOn5X5zD=iyOUBh_6_kK-+PXqKfpg@mail.gmail.com>
 <24313.63215.532899.731588@hornik.net>
 <24314.6621.320580.682163@stat.math.ethz.ch>
Message-ID: <CAOO9MKWEkUeg80UvH2U5OyRoNvfZv7Ky-_pW3--=4Jh9XwJbow@mail.gmail.com>

Thank you both,
You are absolutely correct that example should be minimal, so here it is.

l = list(a=new.env(), b=new.env())
unique(l)

Just for completeness, env_list during check that raises error

env_list <- list(baseenv(),
  as.environment("package:graphics"),
  as.environment("package:stats"),
  as.environment("package:utils"),
  as.environment("package:methods")
)
unique(env_list)

Best regards,
Jan

On Mon, Jun 29, 2020 at 5:42 PM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Kurt Hornik
> >>>>>     on Mon, 29 Jun 2020 16:13:03 +0200 writes:
>
> >>>>> Jan Gorecki writes:
>     >> So the unique.default is from the R tools package during
>     >> checks.  I don't see those issues on CRAN checks.
>
>     > I cannot reproduce this locally (and have no clues about
>     > docker).  Perhaps you can try to debug this on your end?
>     > And see what env_list is when the error occurs?
>
>     > Best -k
>
> Indeed, if it is a bug in R (as opposed to being an assumption
> that 'data.table' makes about undocumented R internals), it
> should be reproducible with a very small dummy package instead
> of data.table. ... or actually reproducible with relatively
> simple R code calling unique() not envolving any non base package.
>
> Martin
>
>
>     >> Exact environment where I am reproducing this issue is a
>     >> fresh ubuntu, no R packages pre-installed docker pull
>     >> registry.gitlab.com/jangorecki/dockerfiles/r-devel
>     >> https://gitlab.com/jangorecki/dockerfiles/-/raw/master/r-devel/Dockerfile
>
>     >> On Sat, Jun 27, 2020 at 12:37 AM Jan Gorecki
>     >> <j.gorecki at wit.edu.pl> wrote:
>     >>>
>     >>> Hi R developers,
>     >>>
>     >>> On R-devel (2020-06-24 r78746) I am getting those two
>     >>> new exceptions during R check. I found a change which
>     >>> eventually may be related
>     >>> https://github.com/wch/r-source/commit/69de92b9fb1b7f2a7c8d1394b8d56050881a5465
>     >>> I think this may be a regression. I grep'ed package
>     >>> manuals and R code for unique.default but don't see
>     >>> any. Usage section of the unique method looks fine as
>     >>> well. Errors look a little bit like internal errors.
>     >>>
>     >>> * checking Rd \usage sections ... NOTE Error in
>     >>> unique.default(env_list) : LENGTH or similar applied to
>     >>> environment object Calls: <Anonymous>
>     >>> ... .get_S3_generics_as_seen_from_package -> unique ->
>     >>> unique.default Execution halted The \usage entries for
>     >>> S3 methods should use the \method markup and not their
>     >>> full name.  * checking S3 generic/method consistency
>     >>> ... WARNING Error in unique.default(env_list) : LENGTH
>     >>> or similar applied to environment object Calls:
>     >>> <Anonymous> ... .get_S3_generics_as_seen_from_package ->
>     >>> unique -> unique.default
>     >>>
>     >>> I don't think if it is related but I build R-devel with
>     >>> extra args: --with-recommended-packages
>     >>> --enable-strict-barrier --disable-long-double I check
>     >>> with: --as-cran --no-manual To reproduce download
>     >>> current data.table from CRAN (1.12.8) and run R check
>     >>>
>     >>> Best regards, Jan Gorecki
>
>     >> ______________________________________________
>     >> R-devel at r-project.org mailing list
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Jun 30 00:55:37 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Mon, 29 Jun 2020 17:55:37 -0500 (CDT)
Subject: [Rd] [External]  Possible ABI change in R 4.0.1
In-Reply-To: <CABtg=K=2iJeaXjENMfgTTMxLsmSR0mHAS417F28wMKgkE7Cw8g@mail.gmail.com>
References: <CABtg=K=2iJeaXjENMfgTTMxLsmSR0mHAS417F28wMKgkE7Cw8g@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2006291740000.32631@luke-Latitude-7480>

EXTPTR_PTR is not in the API so it is not guaranteed to even exist in
the future. The API function for accessing the pointer address is
R_ExternalPtrAddr. See Section 5.13 in WRE.

Sometimes internals need to be changed, In this case a change was made
to deal with a segfault; the commit notice tells you the PR this
addressed.

As it says in Writing R Extensions about defining USE_RINTERNALS:

     Also be prepared to adjust your code should R internals change.

The same goes for any use of non-API macros and functions.

Best,

luke


On Mon, 29 Jun 2020, G?bor Cs?rdi wrote:

> Hi all,
>
> it seems that from R 4.0.1 EXTPTR_PTR can be either a macro or a
> function, depending on whether USE_RINTERNALS is requested.
>
> Jeroen helped me find that this was in 78592:
> https://github.com/wch/r-source/commit/c634fec5214e73747b44d7c0e6f047fefe44667d
>
> This is a problem, because binary packages that are built on R 4.0.1
> or R 4.0.2 will potentially not load on R 4.0.0, if they use the
> EXTPTR_PTR function.
>
> E.g. this is R 4.0.0 on Linux:
>
>> library(Rcpp)
> Error: package or namespace load failed for ?Rcpp? in dyn.load(file,
> DLLpath = DLLpath, ...):
> unable to load shared object '/usr/local/lib/R/library/Rcpp/libs/Rcpp.so':
>  Error relocating /usr/local/lib/R/library/Rcpp/libs/Rcpp.so:
> EXTPTR_PTR: symbol not found
> In addition: Warning message:
> package ?Rcpp? was built under R version 4.0.1
>
> It is easiest to reproduce this on Windows, because the CRAN binaries
> are now built on R 4.0.2, so if you install Rcpp on R 4.0.0 from CRAN,
> and try to load it you'll get:
>
>> library(Rcpp)
> Error: package or namespace load failed for 'Rcpp' in inDL(x,
> as.logical(local), as.logical(now), ...):
> unable to load shared object
> 'C:/Users/csard/R/win-library/4.0/Rcpp/libs/x64/Rcpp.dll':
>  LoadLibrary failure:  The specified procedure could not be found.
> In addition: Warning message:
> package 'Rcpp' was built under R version 4.0.2
>
> I suppose this change was not intended?
>
> Best,
> Gabor
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From Kurt@Horn|k @end|ng |rom wu@@c@@t  Tue Jun 30 06:20:57 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Tue, 30 Jun 2020 06:20:57 +0200
Subject: [Rd] R-devel internal errors during check produce?
In-Reply-To: <CAOO9MKWEkUeg80UvH2U5OyRoNvfZv7Ky-_pW3--=4Jh9XwJbow@mail.gmail.com>
References: <CAOO9MKUUtUhxUG1nYoej1-GipH1npzvBn2nP9b3cKKKozN8ZVg@mail.gmail.com>
 <CAOO9MKU+1934ADNSAQhMgsOn5X5zD=iyOUBh_6_kK-+PXqKfpg@mail.gmail.com>
 <24313.63215.532899.731588@hornik.net>
 <24314.6621.320580.682163@stat.math.ethz.ch>
 <CAOO9MKWEkUeg80UvH2U5OyRoNvfZv7Ky-_pW3--=4Jh9XwJbow@mail.gmail.com>
Message-ID: <24314.48553.253358.641637@hornik.net>

>>>>> Jan Gorecki writes:

> Thank you both,
> You are absolutely correct that example should be minimal, so here it is.

> l = list(a=new.env(), b=new.env())
> unique(l)

> Just for completeness, env_list during check that raises error

> env_list <- list(baseenv(),
>   as.environment("package:graphics"),
>   as.environment("package:stats"),
>   as.environment("package:utils"),
>   as.environment("package:methods")
> )
> unique(env_list)

Thanks ... but the above work fine for me.  E.g., 

R> l = list(a=new.env(), b=new.env())
R> unique(l)
[[1]]
<environment: 0x55695f2f6d20>

[[2]]
<environment: 0x55695f2f6930>

Best
-k


> Best regards,
> Jan

> On Mon, Jun 29, 2020 at 5:42 PM Martin Maechler
> <maechler at stat.math.ethz.ch> wrote:
>> 
>> >>>>> Kurt Hornik
>> >>>>>     on Mon, 29 Jun 2020 16:13:03 +0200 writes:
>> 
>> >>>>> Jan Gorecki writes:
>> >> So the unique.default is from the R tools package during
>> >> checks.  I don't see those issues on CRAN checks.
>> 
>> > I cannot reproduce this locally (and have no clues about
>> > docker).  Perhaps you can try to debug this on your end?
>> > And see what env_list is when the error occurs?
>> 
>> > Best -k
>> 
>> Indeed, if it is a bug in R (as opposed to being an assumption
>> that 'data.table' makes about undocumented R internals), it
>> should be reproducible with a very small dummy package instead
>> of data.table. ... or actually reproducible with relatively
>> simple R code calling unique() not envolving any non base package.
>> 
>> Martin
>> 
>> 
>> >> Exact environment where I am reproducing this issue is a
>> >> fresh ubuntu, no R packages pre-installed docker pull
>> >> registry.gitlab.com/jangorecki/dockerfiles/r-devel
>> >> https://gitlab.com/jangorecki/dockerfiles/-/raw/master/r-devel/Dockerfile
>> 
>> >> On Sat, Jun 27, 2020 at 12:37 AM Jan Gorecki
>> >> <j.gorecki at wit.edu.pl> wrote:
>> >>>
>> >>> Hi R developers,
>> >>>
>> >>> On R-devel (2020-06-24 r78746) I am getting those two
>> >>> new exceptions during R check. I found a change which
>> >>> eventually may be related
>> >>> https://github.com/wch/r-source/commit/69de92b9fb1b7f2a7c8d1394b8d56050881a5465
>> >>> I think this may be a regression. I grep'ed package
>> >>> manuals and R code for unique.default but don't see
>> >>> any. Usage section of the unique method looks fine as
>> >>> well. Errors look a little bit like internal errors.
>> >>>
>> >>> * checking Rd \usage sections ... NOTE Error in
>> >>> unique.default(env_list) : LENGTH or similar applied to
>> >>> environment object Calls: <Anonymous>
>> >>> ... .get_S3_generics_as_seen_from_package -> unique ->
>> >>> unique.default Execution halted The \usage entries for
>> >>> S3 methods should use the \method markup and not their
>> >>> full name.  * checking S3 generic/method consistency
>> >>> ... WARNING Error in unique.default(env_list) : LENGTH
>> >>> or similar applied to environment object Calls:
>> >>> <Anonymous> ... .get_S3_generics_as_seen_from_package ->
>> >>> unique -> unique.default
>> >>>
>> >>> I don't think if it is related but I build R-devel with
>> >>> extra args: --with-recommended-packages
>> >>> --enable-strict-barrier --disable-long-double I check
>> >>> with: --as-cran --no-manual To reproduce download
>> >>> current data.table from CRAN (1.12.8) and run R check
>> >>>
>> >>> Best regards, Jan Gorecki
>> 
>> >> ______________________________________________
>> >> R-devel at r-project.org mailing list
>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Jun 30 09:25:27 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 30 Jun 2020 09:25:27 +0200
Subject: [Rd] `basename` and `dirname` change the encoding to "UTF-8"
In-Reply-To: <trinity-80ed050e-17bd-45ed-983a-5ff860b0daaf-1593441560785@3c-app-webde-bap18>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
 <857dde35-259a-cff8-27b4-4bdc098ccb31-3957@gmail.com>
 <CALFMOMAnGodB557Q_NBCMWAw6+FLHHi8KCjaOG+U1q4j=f28Eg@mail.gmail.com>
 <88588972-223f-4d77-5e41-251eec6c6e8d@gmail.com>
 <CANROs4c2nsANgCNH9P3FhMLTk2TOwdZLPW4OLGocHt81vLdS9Q@mail.gmail.com>
 <trinity-80ed050e-17bd-45ed-983a-5ff860b0daaf-1593441560785@3c-app-webde-bap18>
Message-ID: <8df968b4-48ac-0ce5-64fe-75b7a06f3e44@gmail.com>

On 6/29/20 4:39 PM, Johannes Rauh wrote:
> Dear R Developers,
>
> I noticed that `basename` and `dirname` always return "UTF-8" on Windows (tested with R-4.0.0 and R-3.6.3):
>
>> p <- "F??/B?r"
>> Encoding(p)
> [1] "latin1"
>> Encoding(dirname(p))
> [1] "UTF-8"
>> Encoding(basename(p))
> [1] "UTF-8"
>
> Is this on purpose?  At least I did not find any relevant comment in the documentation of `dirname`/`basename`.
> Background: I'm currently struggeling with a directory name containing a latin1-character.  (I know that this is a bad idea, but I did not create the directory and I cannot rename it.)  I now want to pass a latin1-directory name to a function, which internally uses `tools::makeLazyLoadDB`.  At that point, internally, `dirname` is called, which changes the encoding, and things break.  If I use `debug` to halt the processing and "fix" the encoding, things work as expected.
>
> So, if possible, I would prefer that `dirname` and `basename` preserve the encoding.

Please try to always submit a minimal reproducible example with your 
reports and test with at least the latest released version of R, ideally 
also with R-devel.

As you have not sent a reproducible example, it is hard to tell for 
sure, but most likely as Kevin wrote you have run into a real bug, which 
was however already fixed in 4.0.2 and in R-devel (17833). The lazy 
loading cache did not work with file names in non-native encoding.

That real bug has been uncovered by legitimate and correct changes like 
the ones you report, where file operations started returning non-ASCII 
strings in UTF-8. Historically in R such functions would instead return 
native strings with misrepresented characters, and we were reluctant to 
change that expecting waking bugs in code silently assuming native 
encoding. Still, as people were increasingly running into problems with 
non-representable characters, we did that change in several functions 
anyway, and yes, it started waking up bugs.

With some performance overhead and added complexity, we could be 
returning preferentially results in native encoding, and in UTF-8 only 
when they included non-representable characters. That would increase the 
code complexity, increase performance overhead, but wake up existing 
bugs with smaller probability.? Note - some code that relied previously 
on best-fit conversions done by Windows will have been broken anyway. We 
would have to bypass win_iconv/iconv for that (adding more complexity). 
Bugs in code not handling encodings properly would still be triggered 
via non-representable characters. I've recently changed file.path() in 
R-devel to be slightly more conservative again, along these lines.

We can still do it more widely, but it is not high on the priority list. 
The way to fix all of these problems is switching to UTF-8 as native 
encoding on Windows and every day spent on tuning the existing behavior 
postpones that real solution.

Best
Tomas


>
> Best regards
> Johannes
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jun 30 10:02:41 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 30 Jun 2020 10:02:41 +0200
Subject: [Rd] R-devel internal errors during check produce?
In-Reply-To: <24314.48553.253358.641637@hornik.net>
References: <CAOO9MKUUtUhxUG1nYoej1-GipH1npzvBn2nP9b3cKKKozN8ZVg@mail.gmail.com>
 <CAOO9MKU+1934ADNSAQhMgsOn5X5zD=iyOUBh_6_kK-+PXqKfpg@mail.gmail.com>
 <24313.63215.532899.731588@hornik.net>
 <24314.6621.320580.682163@stat.math.ethz.ch>
 <CAOO9MKWEkUeg80UvH2U5OyRoNvfZv7Ky-_pW3--=4Jh9XwJbow@mail.gmail.com>
 <24314.48553.253358.641637@hornik.net>
Message-ID: <24314.61857.638287.799265@stat.math.ethz.ch>

>>>>> Kurt Hornik 
>>>>>     on Tue, 30 Jun 2020 06:20:57 +0200 writes:

>>>>> Jan Gorecki writes:
    >> Thank you both, You are absolutely correct that example
    >> should be minimal, so here it is.

    >> l = list(a=new.env(), b=new.env()) unique(l)

    >> Just for completeness, env_list during check that raises
    >> error

    >> env_list <- list(baseenv(),
    >>   as.environment("package:graphics"),
    >>   as.environment("package:stats"),
    >>   as.environment("package:utils"),
    >>   as.environment("package:methods") )

    >> unique(env_list)

    > Thanks ... but the above work fine for me.  E.g.,

    R> l = list(a=new.env(), b=new.env())
    R> unique(l)
    > [[1]] <environment: 0x55695f2f6d20>

    > [[2]] <environment: 0x55695f2f6930>

    > Best -k

Ditto here;  also your (Jan) 2nd example works fine.

So, you must have loaded some (untidy) packages / code which redefine
standard base R behavior ?

Martin


From morg@n@em@||box @end|ng |rom gm@||@com  Tue Jun 30 11:08:10 2020
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Tue, 30 Jun 2020 10:08:10 +0100
Subject: [Rd] Build a R call at C level
Message-ID: <CAL0QV_Mif016yg-U-YxhVpVUTBq7ahub+z1qxVZ2JtWVzaAF6w@mail.gmail.com>

Hi All,

I was reading the R extension manual section 5.11 ( Evaluating R expression
from C) and I tried to build a simple call to the sum function. Please see
below.

call_to_sum <- inline::cfunction(
  language = "C",
  sig = c(x = "SEXP"), body = "

SEXP e = PROTECT(lang2(install(\"sum\"), x));
SEXP ans = PROTECT(eval(e, R_GlobalEnv));
UNPROTECT(2);
return ans;

")

call_to_sum(1:3)

The above works. My question is how do I add the argument "na.rm=TRUE" at C
level to the above call? I have tried various things based on what is in
section 5.11 but I did not manage to get it to work.

Thank you
Best regards

	[[alternative HTML version deleted]]


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Tue Jun 30 12:10:48 2020
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Tue, 30 Jun 2020 15:40:48 +0530
Subject: [Rd] R-devel internal errors during check produce?
In-Reply-To: <24314.61857.638287.799265@stat.math.ethz.ch>
References: <CAOO9MKUUtUhxUG1nYoej1-GipH1npzvBn2nP9b3cKKKozN8ZVg@mail.gmail.com>
 <CAOO9MKU+1934ADNSAQhMgsOn5X5zD=iyOUBh_6_kK-+PXqKfpg@mail.gmail.com>
 <24313.63215.532899.731588@hornik.net>
 <24314.6621.320580.682163@stat.math.ethz.ch>
 <CAOO9MKWEkUeg80UvH2U5OyRoNvfZv7Ky-_pW3--=4Jh9XwJbow@mail.gmail.com>
 <24314.48553.253358.641637@hornik.net>
 <24314.61857.638287.799265@stat.math.ethz.ch>
Message-ID: <CADfFDC7uSeMQQx0oDaz7CESD-pZO-qBM8ObK_YV=_ABNjoK=Eg@mail.gmail.com>

On Tue, Jun 30, 2020 at 1:32 PM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Kurt Hornik
> >>>>>     on Tue, 30 Jun 2020 06:20:57 +0200 writes:
>
> >>>>> Jan Gorecki writes:
>     >> Thank you both, You are absolutely correct that example
>     >> should be minimal, so here it is.
>
>     >> l = list(a=new.env(), b=new.env()) unique(l)
>
>     >> Just for completeness, env_list during check that raises
>     >> error
>
>     >> env_list <- list(baseenv(),
>     >>   as.environment("package:graphics"),
>     >>   as.environment("package:stats"),
>     >>   as.environment("package:utils"),
>     >>   as.environment("package:methods") )
>
>     >> unique(env_list)
>
>     > Thanks ... but the above work fine for me.  E.g.,
>
>     R> l = list(a=new.env(), b=new.env())
>     R> unique(l)
>     > [[1]] <environment: 0x55695f2f6d20>
>
>     > [[2]] <environment: 0x55695f2f6930>
>
>     > Best -k
>
> Ditto here;  also your (Jan) 2nd example works fine.
>
> So, you must have loaded some (untidy) packages / code which redefine
> standard base R behavior ?

Looking inside Jan's Dockerfile, it turns out that he is configuring R with

./configure --with-recommended-packages --enable-strict-barrier
--disable-long-double

and with that I can reproduce:

> unique(list(new.env()))
Error in unique.default(list(new.env())) :
 LENGTH or similar applied to environment object

--enable-strict-barrier is enough to reproduce the error.

-Deepayan


From j@goreck| @end|ng |rom w|t@edu@p|  Tue Jun 30 12:29:24 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Tue, 30 Jun 2020 11:29:24 +0100
Subject: [Rd] R-devel internal errors during check produce?
In-Reply-To: <24314.61857.638287.799265@stat.math.ethz.ch>
References: <CAOO9MKUUtUhxUG1nYoej1-GipH1npzvBn2nP9b3cKKKozN8ZVg@mail.gmail.com>
 <CAOO9MKU+1934ADNSAQhMgsOn5X5zD=iyOUBh_6_kK-+PXqKfpg@mail.gmail.com>
 <24313.63215.532899.731588@hornik.net>
 <24314.6621.320580.682163@stat.math.ethz.ch>
 <CAOO9MKWEkUeg80UvH2U5OyRoNvfZv7Ky-_pW3--=4Jh9XwJbow@mail.gmail.com>
 <24314.48553.253358.641637@hornik.net>
 <24314.61857.638287.799265@stat.math.ethz.ch>
Message-ID: <CAOO9MKURVnd79BGNWWXF5UaCk=MUMLsp0HKESKADe0ZyekGFrw@mail.gmail.com>

No packages are being loaded, or even installed.
Did you try running the example on R-devel built with flags I have
provided in this email?
I checked now and it is required to use --enable-strict-barrier to
reproduce the issue.

On Tue, Jun 30, 2020 at 9:02 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Kurt Hornik
> >>>>>     on Tue, 30 Jun 2020 06:20:57 +0200 writes:
>
> >>>>> Jan Gorecki writes:
>     >> Thank you both, You are absolutely correct that example
>     >> should be minimal, so here it is.
>
>     >> l = list(a=new.env(), b=new.env()) unique(l)
>
>     >> Just for completeness, env_list during check that raises
>     >> error
>
>     >> env_list <- list(baseenv(),
>     >>   as.environment("package:graphics"),
>     >>   as.environment("package:stats"),
>     >>   as.environment("package:utils"),
>     >>   as.environment("package:methods") )
>
>     >> unique(env_list)
>
>     > Thanks ... but the above work fine for me.  E.g.,
>
>     R> l = list(a=new.env(), b=new.env())
>     R> unique(l)
>     > [[1]] <environment: 0x55695f2f6d20>
>
>     > [[2]] <environment: 0x55695f2f6930>
>
>     > Best -k
>
> Ditto here;  also your (Jan) 2nd example works fine.
>
> So, you must have loaded some (untidy) packages / code which redefine
> standard base R behavior ?
>
> Martin
>
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jun 30 12:34:44 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 30 Jun 2020 12:34:44 +0200
Subject: [Rd] R-devel internal errors during check produce?
In-Reply-To: <CAOO9MKURVnd79BGNWWXF5UaCk=MUMLsp0HKESKADe0ZyekGFrw@mail.gmail.com>
References: <CAOO9MKUUtUhxUG1nYoej1-GipH1npzvBn2nP9b3cKKKozN8ZVg@mail.gmail.com>
 <CAOO9MKU+1934ADNSAQhMgsOn5X5zD=iyOUBh_6_kK-+PXqKfpg@mail.gmail.com>
 <24313.63215.532899.731588@hornik.net>
 <24314.6621.320580.682163@stat.math.ethz.ch>
 <CAOO9MKWEkUeg80UvH2U5OyRoNvfZv7Ky-_pW3--=4Jh9XwJbow@mail.gmail.com>
 <24314.48553.253358.641637@hornik.net>
 <24314.61857.638287.799265@stat.math.ethz.ch>
 <CAOO9MKURVnd79BGNWWXF5UaCk=MUMLsp0HKESKADe0ZyekGFrw@mail.gmail.com>
Message-ID: <24315.5444.248426.545980@stat.math.ethz.ch>

>>>>> Jan Gorecki 
>>>>>     on Tue, 30 Jun 2020 11:29:24 +0100 writes:

    > No packages are being loaded, or even installed.
    > Did you try running the example on R-devel built with flags I have
    > provided in this email?

    > I checked now and it is required to use --enable-strict-barrier to
    > reproduce the issue.

No, I (and Kurt probably, too) had overlooked the extra flags
setting you'd used ....

Thank you and Deepayan for checking more there.

I now agree this is something we (R Core) should address one way
or the other.

Martin


    > On Tue, Jun 30, 2020 at 9:02 AM Martin Maechler
    > <maechler at stat.math.ethz.ch> wrote:
    >> 
    >> >>>>> Kurt Hornik
    >> >>>>>     on Tue, 30 Jun 2020 06:20:57 +0200 writes:
    >> 
    >> >>>>> Jan Gorecki writes:
    >> >> Thank you both, You are absolutely correct that example
    >> >> should be minimal, so here it is.
    >> 
    >> >> l = list(a=new.env(), b=new.env()) unique(l)
    >> 
    >> >> Just for completeness, env_list during check that raises
    >> >> error
    >> 
    >> >> env_list <- list(baseenv(),
    >> >>   as.environment("package:graphics"),
    >> >>   as.environment("package:stats"),
    >> >>   as.environment("package:utils"),
    >> >>   as.environment("package:methods") )
    >> 
    >> >> unique(env_list)
    >> 
    >> > Thanks ... but the above work fine for me.  E.g.,
    >> 
    R> l = list(a=new.env(), b=new.env())
    R> unique(l)
    >> > [[1]] <environment: 0x55695f2f6d20>
    >> 
    >> > [[2]] <environment: 0x55695f2f6930>
    >> 
    >> > Best -k
    >> 
    >> Ditto here;  also your (Jan) 2nd example works fine.
    >> 
    >> So, you must have loaded some (untidy) packages / code which redefine
    >> standard base R behavior ?
    >> 
    >> Martin
    >> 
    >>


From j@goreck| @end|ng |rom w|t@edu@p|  Tue Jun 30 13:06:49 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Tue, 30 Jun 2020 12:06:49 +0100
Subject: [Rd] Build a R call at C level
In-Reply-To: <CAL0QV_Mif016yg-U-YxhVpVUTBq7ahub+z1qxVZ2JtWVzaAF6w@mail.gmail.com>
References: <CAL0QV_Mif016yg-U-YxhVpVUTBq7ahub+z1qxVZ2JtWVzaAF6w@mail.gmail.com>
Message-ID: <CAOO9MKX+wRMUJz8AHfis-J24vHXF3KYoysKAfyX7pGWDu8fS1A@mail.gmail.com>

It is quite known that R documentation on R C api could be improved...
Still R-package-devel mailing list should be preferred for this kind
of questions.
Not sure if that is the best way, but works.

call_to_sum <- inline::cfunction(
  language = "C",
  sig = c(x = "SEXP"), body = "

SEXP e = PROTECT(lang2(install(\"sum\"), x));
SEXP r_true = PROTECT(CONS(ScalarLogical(1), R_NilValue));
SETCDR(CDR(e), r_true);
SET_TAG(CDDR(e), install(\"na.rm\"));
Rf_PrintValue(e);
SEXP ans = PROTECT(eval(e, R_GlobalEnv));
UNPROTECT(3);
return ans;

")

call_to_sum(c(1L,NA,3L))

On Tue, Jun 30, 2020 at 10:08 AM Morgan Morgan
<morgan.emailbox at gmail.com> wrote:
>
> Hi All,
>
> I was reading the R extension manual section 5.11 ( Evaluating R expression
> from C) and I tried to build a simple call to the sum function. Please see
> below.
>
> call_to_sum <- inline::cfunction(
>   language = "C",
>   sig = c(x = "SEXP"), body = "
>
> SEXP e = PROTECT(lang2(install(\"sum\"), x));
> SEXP ans = PROTECT(eval(e, R_GlobalEnv));
> UNPROTECT(2);
> return ans;
>
> ")
>
> call_to_sum(1:3)
>
> The above works. My question is how do I add the argument "na.rm=TRUE" at C
> level to the above call? I have tried various things based on what is in
> section 5.11 but I did not manage to get it to work.
>
> Thank you
> Best regards
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Jun 30 13:35:59 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 30 Jun 2020 13:35:59 +0200
Subject: [Rd] Build a R call at C level
In-Reply-To: <CAOO9MKX+wRMUJz8AHfis-J24vHXF3KYoysKAfyX7pGWDu8fS1A@mail.gmail.com>
References: <CAL0QV_Mif016yg-U-YxhVpVUTBq7ahub+z1qxVZ2JtWVzaAF6w@mail.gmail.com>
 <CAOO9MKX+wRMUJz8AHfis-J24vHXF3KYoysKAfyX7pGWDu8fS1A@mail.gmail.com>
Message-ID: <177993a2-9f5f-6819-dea5-f706cdd729cf@gmail.com>

On 6/30/20 1:06 PM, Jan Gorecki wrote:
> It is quite known that R documentation on R C api could be improved...

Please see "5.11 Evaluating R expressions from C" from "Writing R 
Extensions"

Best
Tomas

> Still R-package-devel mailing list should be preferred for this kind
> of questions.
> Not sure if that is the best way, but works.
>
> call_to_sum <- inline::cfunction(
>    language = "C",
>    sig = c(x = "SEXP"), body = "
>
> SEXP e = PROTECT(lang2(install(\"sum\"), x));
> SEXP r_true = PROTECT(CONS(ScalarLogical(1), R_NilValue));
> SETCDR(CDR(e), r_true);
> SET_TAG(CDDR(e), install(\"na.rm\"));
> Rf_PrintValue(e);
> SEXP ans = PROTECT(eval(e, R_GlobalEnv));
> UNPROTECT(3);
> return ans;
>
> ")
>
> call_to_sum(c(1L,NA,3L))
>
> On Tue, Jun 30, 2020 at 10:08 AM Morgan Morgan
> <morgan.emailbox at gmail.com> wrote:
>> Hi All,
>>
>> I was reading the R extension manual section 5.11 ( Evaluating R expression
>> from C) and I tried to build a simple call to the sum function. Please see
>> below.
>>
>> call_to_sum <- inline::cfunction(
>>    language = "C",
>>    sig = c(x = "SEXP"), body = "
>>
>> SEXP e = PROTECT(lang2(install(\"sum\"), x));
>> SEXP ans = PROTECT(eval(e, R_GlobalEnv));
>> UNPROTECT(2);
>> return ans;
>>
>> ")
>>
>> call_to_sum(1:3)
>>
>> The above works. My question is how do I add the argument "na.rm=TRUE" at C
>> level to the above call? I have tried various things based on what is in
>> section 5.11 but I did not manage to get it to work.
>>
>> Thank you
>> Best regards
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Jun 30 14:41:32 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 30 Jun 2020 07:41:32 -0500 (CDT)
Subject: [Rd] 
 [External] Re:  R-devel internal errors during check produce?
In-Reply-To: <CAOO9MKURVnd79BGNWWXF5UaCk=MUMLsp0HKESKADe0ZyekGFrw@mail.gmail.com>
References: <CAOO9MKUUtUhxUG1nYoej1-GipH1npzvBn2nP9b3cKKKozN8ZVg@mail.gmail.com>
 <CAOO9MKU+1934ADNSAQhMgsOn5X5zD=iyOUBh_6_kK-+PXqKfpg@mail.gmail.com>
 <24313.63215.532899.731588@hornik.net>
 <24314.6621.320580.682163@stat.math.ethz.ch>
 <CAOO9MKWEkUeg80UvH2U5OyRoNvfZv7Ky-_pW3--=4Jh9XwJbow@mail.gmail.com>
 <24314.48553.253358.641637@hornik.net>
 <24314.61857.638287.799265@stat.math.ethz.ch>
 <CAOO9MKURVnd79BGNWWXF5UaCk=MUMLsp0HKESKADe0ZyekGFrw@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2006300740220.32631@luke-Latitude-7480>

Thanks. Fixed in R-devel in r78754. This was related to a fix for
PR#17809, not the change to unique.default.

Best,

luke

On Tue, 30 Jun 2020, Jan Gorecki wrote:

> No packages are being loaded, or even installed.
> Did you try running the example on R-devel built with flags I have
> provided in this email?
> I checked now and it is required to use --enable-strict-barrier to
> reproduce the issue.
>
> On Tue, Jun 30, 2020 at 9:02 AM Martin Maechler
> <maechler at stat.math.ethz.ch> wrote:
>>
>>>>>>> Kurt Hornik
>>>>>>>     on Tue, 30 Jun 2020 06:20:57 +0200 writes:
>>
>>>>>>> Jan Gorecki writes:
>>    >> Thank you both, You are absolutely correct that example
>>    >> should be minimal, so here it is.
>>
>>    >> l = list(a=new.env(), b=new.env()) unique(l)
>>
>>    >> Just for completeness, env_list during check that raises
>>    >> error
>>
>>    >> env_list <- list(baseenv(),
>>    >>   as.environment("package:graphics"),
>>    >>   as.environment("package:stats"),
>>    >>   as.environment("package:utils"),
>>    >>   as.environment("package:methods") )
>>
>>    >> unique(env_list)
>>
>>    > Thanks ... but the above work fine for me.  E.g.,
>>
>>     R> l = list(a=new.env(), b=new.env())
>>     R> unique(l)
>>    > [[1]] <environment: 0x55695f2f6d20>
>>
>>    > [[2]] <environment: 0x55695f2f6930>
>>
>>    > Best -k
>>
>> Ditto here;  also your (Jan) 2nd example works fine.
>>
>> So, you must have loaded some (untidy) packages / code which redefine
>> standard base R behavior ?
>>
>> Martin
>>
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From morg@n@em@||box @end|ng |rom gm@||@com  Tue Jun 30 15:42:39 2020
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Tue, 30 Jun 2020 14:42:39 +0100
Subject: [Rd] Build a R call at C level
In-Reply-To: <177993a2-9f5f-6819-dea5-f706cdd729cf@gmail.com>
References: <CAL0QV_Mif016yg-U-YxhVpVUTBq7ahub+z1qxVZ2JtWVzaAF6w@mail.gmail.com>
 <CAOO9MKX+wRMUJz8AHfis-J24vHXF3KYoysKAfyX7pGWDu8fS1A@mail.gmail.com>
 <177993a2-9f5f-6819-dea5-f706cdd729cf@gmail.com>
Message-ID: <CAL0QV_NGfAq_NTmgFJ42zDO0n26N5VBqjUb9R8A0yzBbV0j5eg@mail.gmail.com>

Thanks Jan and Tomas for the feedback.
Answer from Jan is what I am looking for.
Maybe I am not looking in the right place buy it is not easy to understand
how these LCONS, CONS, SETCDR...etc works.

Thank you
Best regards
Morgan



On Tue, 30 Jun 2020, 12:36 Tomas Kalibera, <tomas.kalibera at gmail.com> wrote:

> On 6/30/20 1:06 PM, Jan Gorecki wrote:
> > It is quite known that R documentation on R C api could be improved...
>
> Please see "5.11 Evaluating R expressions from C" from "Writing R
> Extensions"
>
> Best
> Tomas
>
> > Still R-package-devel mailing list should be preferred for this kind
> > of questions.
> > Not sure if that is the best way, but works.
> >
> > call_to_sum <- inline::cfunction(
> >    language = "C",
> >    sig = c(x = "SEXP"), body = "
> >
> > SEXP e = PROTECT(lang2(install(\"sum\"), x));
> > SEXP r_true = PROTECT(CONS(ScalarLogical(1), R_NilValue));
> > SETCDR(CDR(e), r_true);
> > SET_TAG(CDDR(e), install(\"na.rm\"));
> > Rf_PrintValue(e);
> > SEXP ans = PROTECT(eval(e, R_GlobalEnv));
> > UNPROTECT(3);
> > return ans;
> >
> > ")
> >
> > call_to_sum(c(1L,NA,3L))
> >
> > On Tue, Jun 30, 2020 at 10:08 AM Morgan Morgan
> > <morgan.emailbox at gmail.com> wrote:
> >> Hi All,
> >>
> >> I was reading the R extension manual section 5.11 ( Evaluating R
> expression
> >> from C) and I tried to build a simple call to the sum function. Please
> see
> >> below.
> >>
> >> call_to_sum <- inline::cfunction(
> >>    language = "C",
> >>    sig = c(x = "SEXP"), body = "
> >>
> >> SEXP e = PROTECT(lang2(install(\"sum\"), x));
> >> SEXP ans = PROTECT(eval(e, R_GlobalEnv));
> >> UNPROTECT(2);
> >> return ans;
> >>
> >> ")
> >>
> >> call_to_sum(1:3)
> >>
> >> The above works. My question is how do I add the argument "na.rm=TRUE"
> at C
> >> level to the above call? I have tried various things based on what is in
> >> section 5.11 but I did not manage to get it to work.
> >>
> >> Thank you
> >> Best regards
> >>
> >>          [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Tue Jun 30 15:52:10 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 30 Jun 2020 08:52:10 -0500
Subject: [Rd] Build a R call at C level
In-Reply-To: <CAL0QV_NGfAq_NTmgFJ42zDO0n26N5VBqjUb9R8A0yzBbV0j5eg@mail.gmail.com>
References: <CAL0QV_Mif016yg-U-YxhVpVUTBq7ahub+z1qxVZ2JtWVzaAF6w@mail.gmail.com>
 <CAOO9MKX+wRMUJz8AHfis-J24vHXF3KYoysKAfyX7pGWDu8fS1A@mail.gmail.com>
 <177993a2-9f5f-6819-dea5-f706cdd729cf@gmail.com>
 <CAL0QV_NGfAq_NTmgFJ42zDO0n26N5VBqjUb9R8A0yzBbV0j5eg@mail.gmail.com>
Message-ID: <24315.17290.484544.110266@rob.eddelbuettel.com>


On 30 June 2020 at 14:42, Morgan Morgan wrote:
| Thanks Jan and Tomas for the feedback.
| Answer from Jan is what I am looking for.
| Maybe I am not looking in the right place buy it is not easy to understand
| how these LCONS, CONS, SETCDR...etc works.

a) There are alternatives, and if memory serves I already told you about them.

b) This is quite likely the wrong list for your questions. Consider r-package-devel.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From JAR@uh @end|ng |rom web@de  Tue Jun 30 16:50:55 2020
From: JAR@uh @end|ng |rom web@de (Johannes Rauh)
Date: Tue, 30 Jun 2020 16:50:55 +0200
Subject: [Rd] `basename` and `dirname` change the encoding to "UTF-8"
In-Reply-To: <8df968b4-48ac-0ce5-64fe-75b7a06f3e44@gmail.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
 <857dde35-259a-cff8-27b4-4bdc098ccb31-3957@gmail.com>
 <CALFMOMAnGodB557Q_NBCMWAw6+FLHHi8KCjaOG+U1q4j=f28Eg@mail.gmail.com>
 <88588972-223f-4d77-5e41-251eec6c6e8d@gmail.com>
 <CANROs4c2nsANgCNH9P3FhMLTk2TOwdZLPW4OLGocHt81vLdS9Q@mail.gmail.com>
 <trinity-80ed050e-17bd-45ed-983a-5ff860b0daaf-1593441560785@3c-app-webde-bap18>
 <8df968b4-48ac-0ce5-64fe-75b7a06f3e44@gmail.com>
Message-ID: <trinity-d42bb8f3-73cc-42c1-a60b-26654ea3c0f3-1593528655836@3c-app-webde-bap13>

Hello, everyone,

thank you for your quick and helpful responses and the detailed information.

Sorry for not providing a reproducible example for the (potential) bug in `tools::makeLazyLoadDB`.  The main point of my mail was the surprising behaviour of `basename` and `dirname`.  Fixing those functions would probably solve my problem for me (as a workaround, probably hiding some underlying problem, and likely leading to a failure for someone else fighting with encodings).

Concerning my underlying direct problem with `tools::makeLazyLoadDB`, I'm having difficulty to make my example reproducible.  I'm trying to use a directory with a non-ASCII-name for a knitr cache.  My R-4.0.0 here behaves different from my R-3.6.3, but when I filed a bug report with knitr, Yihui could not reproduce this difference (https://github.com/yihui/knitr/issues/1840).  So I'll try R-4.0.2 next, let's see what happens.

Cheers
Johannes

> Gesendet: Dienstag, 30. Juni 2020 um 09:25 Uhr
> Von: "Tomas Kalibera" <tomas.kalibera at gmail.com>
> An: "Johannes Rauh" <JARauh at web.de>, "r-devel" <r-devel at r-project.org>
> Betreff: Re: [Rd] `basename` and `dirname` change the encoding to "UTF-8"
>
> On 6/29/20 4:39 PM, Johannes Rauh wrote:
> > Dear R Developers,
> >
> > I noticed that `basename` and `dirname` always return "UTF-8" on Windows (tested with R-4.0.0 and R-3.6.3):
> >
> >> p <- "F??/B?r"
> >> Encoding(p)
> > [1] "latin1"
> >> Encoding(dirname(p))
> > [1] "UTF-8"
> >> Encoding(basename(p))
> > [1] "UTF-8"
> >
> > Is this on purpose?  At least I did not find any relevant comment in the documentation of `dirname`/`basename`.
> > Background: I'm currently struggeling with a directory name containing a latin1-character.  (I know that this is a bad idea, but I did not create the directory and I cannot rename it.)  I now want to pass a latin1-directory name to a function, which internally uses `tools::makeLazyLoadDB`.  At that point, internally, `dirname` is called, which changes the encoding, and things break.  If I use `debug` to halt the processing and "fix" the encoding, things work as expected.
> >
> > So, if possible, I would prefer that `dirname` and `basename` preserve the encoding.
> 
> Please try to always submit a minimal reproducible example with your 
> reports and test with at least the latest released version of R, ideally 
> also with R-devel.
> 
> As you have not sent a reproducible example, it is hard to tell for 
> sure, but most likely as Kevin wrote you have run into a real bug, which 
> was however already fixed in 4.0.2 and in R-devel (17833). The lazy 
> loading cache did not work with file names in non-native encoding.
> 
> That real bug has been uncovered by legitimate and correct changes like 
> the ones you report, where file operations started returning non-ASCII 
> strings in UTF-8. Historically in R such functions would instead return 
> native strings with misrepresented characters, and we were reluctant to 
> change that expecting waking bugs in code silently assuming native 
> encoding. Still, as people were increasingly running into problems with 
> non-representable characters, we did that change in several functions 
> anyway, and yes, it started waking up bugs.
> 
> With some performance overhead and added complexity, we could be 
> returning preferentially results in native encoding, and in UTF-8 only 
> when they included non-representable characters. That would increase the 
> code complexity, increase performance overhead, but wake up existing 
> bugs with smaller probability.? Note - some code that relied previously 
> on best-fit conversions done by Windows will have been broken anyway. We 
> would have to bypass win_iconv/iconv for that (adding more complexity). 
> Bugs in code not handling encodings properly would still be triggered 
> via non-representable characters. I've recently changed file.path() in 
> R-devel to be slightly more conservative again, along these lines.
> 
> We can still do it more widely, but it is not high on the priority list. 
> The way to fix all of these problems is switching to UTF-8 as native 
> encoding on Windows and every day spent on tuning the existing behavior 
> postpones that real solution.
> 
> Best
> Tomas
> 
> 
> >
> > Best regards
> > Johannes
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
>


From morg@n@em@||box @end|ng |rom gm@||@com  Tue Jun 30 16:52:56 2020
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Tue, 30 Jun 2020 15:52:56 +0100
Subject: [Rd] Build a R call at C level
In-Reply-To: <CAL0QV_NGfAq_NTmgFJ42zDO0n26N5VBqjUb9R8A0yzBbV0j5eg@mail.gmail.com>
References: <CAL0QV_Mif016yg-U-YxhVpVUTBq7ahub+z1qxVZ2JtWVzaAF6w@mail.gmail.com>
 <CAOO9MKX+wRMUJz8AHfis-J24vHXF3KYoysKAfyX7pGWDu8fS1A@mail.gmail.com>
 <177993a2-9f5f-6819-dea5-f706cdd729cf@gmail.com>
 <CAL0QV_NGfAq_NTmgFJ42zDO0n26N5VBqjUb9R8A0yzBbV0j5eg@mail.gmail.com>
Message-ID: <CAL0QV_N7jgGVoVmSgGQznwYe6gXz45hEzL3M+5Y8jya9cNXJRQ@mail.gmail.com>

Sorry Dirk, I don't remember discussing this topic or alternatives with you
at all.
Have a nice day.

On Tue, 30 Jun 2020, 14:42 Morgan Morgan, <morgan.emailbox at gmail.com> wrote:

> Thanks Jan and Tomas for the feedback.
> Answer from Jan is what I am looking for.
> Maybe I am not looking in the right place buy it is not easy to understand
> how these LCONS, CONS, SETCDR...etc works.
>
> Thank you
> Best regards
> Morgan
>
>
>
> On Tue, 30 Jun 2020, 12:36 Tomas Kalibera, <tomas.kalibera at gmail.com>
> wrote:
>
>> On 6/30/20 1:06 PM, Jan Gorecki wrote:
>> > It is quite known that R documentation on R C api could be improved...
>>
>> Please see "5.11 Evaluating R expressions from C" from "Writing R
>> Extensions"
>>
>> Best
>> Tomas
>>
>> > Still R-package-devel mailing list should be preferred for this kind
>> > of questions.
>> > Not sure if that is the best way, but works.
>> >
>> > call_to_sum <- inline::cfunction(
>> >    language = "C",
>> >    sig = c(x = "SEXP"), body = "
>> >
>> > SEXP e = PROTECT(lang2(install(\"sum\"), x));
>> > SEXP r_true = PROTECT(CONS(ScalarLogical(1), R_NilValue));
>> > SETCDR(CDR(e), r_true);
>> > SET_TAG(CDDR(e), install(\"na.rm\"));
>> > Rf_PrintValue(e);
>> > SEXP ans = PROTECT(eval(e, R_GlobalEnv));
>> > UNPROTECT(3);
>> > return ans;
>> >
>> > ")
>> >
>> > call_to_sum(c(1L,NA,3L))
>> >
>> > On Tue, Jun 30, 2020 at 10:08 AM Morgan Morgan
>> > <morgan.emailbox at gmail.com> wrote:
>> >> Hi All,
>> >>
>> >> I was reading the R extension manual section 5.11 ( Evaluating R
>> expression
>> >> from C) and I tried to build a simple call to the sum function. Please
>> see
>> >> below.
>> >>
>> >> call_to_sum <- inline::cfunction(
>> >>    language = "C",
>> >>    sig = c(x = "SEXP"), body = "
>> >>
>> >> SEXP e = PROTECT(lang2(install(\"sum\"), x));
>> >> SEXP ans = PROTECT(eval(e, R_GlobalEnv));
>> >> UNPROTECT(2);
>> >> return ans;
>> >>
>> >> ")
>> >>
>> >> call_to_sum(1:3)
>> >>
>> >> The above works. My question is how do I add the argument "na.rm=TRUE"
>> at C
>> >> level to the above call? I have tried various things based on what is
>> in
>> >> section 5.11 but I did not manage to get it to work.
>> >>
>> >> Thank you
>> >> Best regards
>> >>
>> >>          [[alternative HTML version deleted]]
>> >>
>> >> ______________________________________________
>> >> R-devel at r-project.org mailing list
>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>>

	[[alternative HTML version deleted]]


