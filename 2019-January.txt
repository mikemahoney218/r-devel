From tom@@@k@liber@ @ending from gm@il@com  Wed Jan  2 11:13:23 2019
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Wed, 2 Jan 2019 11:13:23 +0100
Subject: [Rd] Bug report: R.home() cause package Rcpp failed executing
 sourceCpp,
 similar bug are labeled "BUG 16660" since 2016 and here I could provide a
 solution that tested in my laptop.
In-Reply-To: <aeff153.d5285.167d20c814b.Coremail.qweytr1@mail.ustc.edu.cn>
References: <aeff153.d5285.167d20c814b.Coremail.qweytr1@mail.ustc.edu.cn>
Message-ID: <a2497bab-306b-aea1-ca01-58bd59e6162d@gmail.com>


To resolve this issue quickly on your side, I would recommend installing 
R on the C: drive which should have the short file names enabled by 
default. Then, R.home() will return a path name without a space (short 
file names do not include a space).

If you for some reason need to install R on the D: drive, then it might 
be easiest to choose installation directory without the space, such as 
"D:/R". Alternatively, you can enable short file names on your D: drive.

---

Re what could/should be fixed. I think code in R and packages should be 
robust against space in file names, it should properly quote the file 
names before passing to the OS. If you can debug this issue down to the 
place where quoting (e.g. via shQuote) is missing, I'd be happy to fix 
if it is in R code, please submit a bug report/patch. If it is in Rcpp 
or other package you may contribute a patch/ask the package maintainer 
to fix.

Best
Tomas


On 12/21/18 7:34 PM, qweytr1 at mail.ustc.edu.cn wrote:
> https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16660
> Here is the bug, which R.home may generate a path contains a whitespace.
>
>
> this will cause Rcpp failed executing sourceCpp
>
>
>> sourceCpp("b:/2018-12-14/src/18020/MCMC.cpp")
> Error in system(cmd, intern = !showOutput) : 'D:/Program' not found
> Error in system(cmd, ignore.stderr = TRUE, intern = TRUE) :
>    'D:/Program' not found
>
>
>
> Code is tested in both R 3.5.1 and Microsoft R Open 3.5.1.
>
>
> I find a temp solution, is to copy such words into Rprofile:
>
>
> unlockBinding("R.home", baseenv())
> utils::assignInNamespace("R.home",function (component = "home")
> {
>      rh <- .Internal(R.home())
>      paste0('"',switch(component, home = rh, bin = if (.Platform$OS.type ==
>          "windows" && nzchar(p <- .Platform$r_arch)) file.path(rh,
>          component, p) else file.path(rh, component), share = if (nzchar(p <- Sys.getenv("R_SHARE_DIR"))) p else file.path(rh,
>          component), doc = if (nzchar(p <- Sys.getenv("R_DOC_DIR"))) p else file.path(rh,
>          component), include = if (nzchar(p <- Sys.getenv("R_INCLUDE_DIR"))) p else file.path(rh,
>          component), modules = if (nzchar(p <- .Platform$r_arch)) file.path(rh,
>          component, p) else file.path(rh, component), file.path(rh,
>          component)),'"')
> }, ns="base", envir=baseenv())
> lockBinding("R.home", baseenv())
>
>
> Actually, calling "D:/Program Files/R/R Open/bin/x64"/R is same to calling "D:/Program Files/R/R Open/bin/x64/R"
>
>
> it shows that we could use quote to quote the whitespaces.
>
>
> (although the code seems a little bit ugly)
>
>
>
>                 _
> platform       x86_64-w64-mingw32
> arch           x86_64
> os             mingw32
> system         x86_64, mingw32
> status
> major          3
> minor          5.1
> year           2018
> month          07
> day            02
> svn rev        74947
> language       R
> version.string R version 3.5.1 (2018-07-02)
> nickname       Feather Spray
>
>
>
>
>
>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuc@r @ending from fedor@project@org  Thu Jan  3 20:18:52 2019
From: iuc@r @ending from fedor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Thu, 3 Jan 2019 20:18:52 +0100
Subject: [Rd] Compiler + stopifnot bug
Message-ID: <CALEXWq2CneLqRqaD5H4_-qQEzB3LjhSwoqc=Mg3f9WeHAirmXg@mail.gmail.com>

Hi,

I found the following issue in r-devel (2019-01-02 r75945):

`foo<-` <- function(x, value) {
  bar(x) <- value * x
  x
}

`bar<-` <- function(x, value) {
  stopifnot(all(value / x == 1))
  x + value
}

`foo<-` <- compiler::cmpfun(`foo<-`)
`bar<-` <- compiler::cmpfun(`bar<-`)

x <- c(2, 2)
foo(x) <- 1
x # should be c(4, 4)
#> [1] 3 3

If the functions are not compiled or the stopifnot call is removed,
the snippet works correctly. So it seems that something is messing
around with the references to "value" when the call to stopifnot gets
compiled, and the wrong "value" is modified. Note also that if "x <-
2", then the result is correct, 4.

Regards,
-- 
I?aki ?car


From murdoch@dunc@n @ending from gm@il@com  Thu Jan  3 21:37:17 2019
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Thu, 3 Jan 2019 15:37:17 -0500
Subject: [Rd] Compiler + stopifnot bug
In-Reply-To: <CALEXWq2CneLqRqaD5H4_-qQEzB3LjhSwoqc=Mg3f9WeHAirmXg@mail.gmail.com>
References: <CALEXWq2CneLqRqaD5H4_-qQEzB3LjhSwoqc=Mg3f9WeHAirmXg@mail.gmail.com>
Message-ID: <ffedc6fa-2f6c-21f3-b29a-8e1f0e3fac89@gmail.com>

I see this too; by bisection, it seems to have first appeared in r72943.

Duncan Murdoch

On 03/01/2019 2:18 p.m., I?aki Ucar wrote:
> Hi,
> 
> I found the following issue in r-devel (2019-01-02 r75945):
> 
> `foo<-` <- function(x, value) {
>    bar(x) <- value * x
>    x
> }
> 
> `bar<-` <- function(x, value) {
>    stopifnot(all(value / x == 1))
>    x + value
> }
> 
> `foo<-` <- compiler::cmpfun(`foo<-`)
> `bar<-` <- compiler::cmpfun(`bar<-`)
> 
> x <- c(2, 2)
> foo(x) <- 1
> x # should be c(4, 4)
> #> [1] 3 3
> 
> If the functions are not compiled or the stopifnot call is removed,
> the snippet works correctly. So it seems that something is messing
> around with the references to "value" when the call to stopifnot gets
> compiled, and the wrong "value" is modified. Note also that if "x <-
> 2", then the result is correct, 4.
> 
> Regards,
>


From bbolker @ending from gm@il@com  Fri Jan  4 00:45:26 2019
From: bbolker @ending from gm@il@com (Ben Bolker)
Date: Thu, 3 Jan 2019 18:45:26 -0500
Subject: [Rd] history of objects() and ls()
Message-ID: <c0420341-e400-9e7f-b110-2d970d6e7815@gmail.com>


  I found out today (maybe I had known sometime before??) that objects()
is a synonym for ls().  I'm curious about the history, which seems to go
at least back to the beginning of R.  It's been thus since SVN revision
2 (Sep 1997) ...

svn cat https://svn.r-project.org/R/trunk/src/library/base/R/attach at 2 |
grep objects

  I had a quick look at the Becker & Chambers brown book (1984) and
Becker and Wilks blue book (1988) on Google books and could find ls but
not objects() ... ?

  Anyone happen to know?

 cheers
   Ben Bolker


From murdoch@dunc@n @ending from gm@il@com  Fri Jan  4 01:05:20 2019
From: murdoch@dunc@n @ending from gm@il@com (Duncan Murdoch)
Date: Thu, 3 Jan 2019 19:05:20 -0500
Subject: [Rd] Compiler + stopifnot bug
In-Reply-To: <ffedc6fa-2f6c-21f3-b29a-8e1f0e3fac89@gmail.com>
References: <CALEXWq2CneLqRqaD5H4_-qQEzB3LjhSwoqc=Mg3f9WeHAirmXg@mail.gmail.com>
 <ffedc6fa-2f6c-21f3-b29a-8e1f0e3fac89@gmail.com>
Message-ID: <dce3cbe4-ee06-ec13-d307-5230e98df7c8@gmail.com>

On 03/01/2019 3:37 p.m., Duncan Murdoch wrote:
> I see this too; by bisection, it seems to have first appeared in r72943.

Sorry, that was a typo.  I meant r75943.

Duncan Murdoch

> 
> Duncan Murdoch
> 
> On 03/01/2019 2:18 p.m., I?aki Ucar wrote:
>> Hi,
>>
>> I found the following issue in r-devel (2019-01-02 r75945):
>>
>> `foo<-` <- function(x, value) {
>>     bar(x) <- value * x
>>     x
>> }
>>
>> `bar<-` <- function(x, value) {
>>     stopifnot(all(value / x == 1))
>>     x + value
>> }
>>
>> `foo<-` <- compiler::cmpfun(`foo<-`)
>> `bar<-` <- compiler::cmpfun(`bar<-`)
>>
>> x <- c(2, 2)
>> foo(x) <- 1
>> x # should be c(4, 4)
>> #> [1] 3 3
>>
>> If the functions are not compiled or the stopifnot call is removed,
>> the snippet works correctly. So it seems that something is messing
>> around with the references to "value" when the call to stopifnot gets
>> compiled, and the wrong "value" is modified. Note also that if "x <-
>> 2", then the result is correct, 4.
>>
>> Regards,
>>
>


From mtmorg@n@bioc @ending from gm@il@com  Fri Jan  4 01:13:02 2019
From: mtmorg@n@bioc @ending from gm@il@com (Martin Morgan)
Date: Fri, 4 Jan 2019 00:13:02 +0000
Subject: [Rd] Compiler + stopifnot bug
In-Reply-To: <dce3cbe4-ee06-ec13-d307-5230e98df7c8@gmail.com>
References: <CALEXWq2CneLqRqaD5H4_-qQEzB3LjhSwoqc=Mg3f9WeHAirmXg@mail.gmail.com>
 <ffedc6fa-2f6c-21f3-b29a-8e1f0e3fac89@gmail.com>
 <dce3cbe4-ee06-ec13-d307-5230e98df7c8@gmail.com>
Message-ID: <MWHPR05MB35822175B1FF606B449ECDD2F98E0@MWHPR05MB3582.namprd05.prod.outlook.com>

For what it's worth this also introduced

    > df = data.frame(v = package_version("1.2"))
    > rbind(df, df)$v
     [[1]]
     [1] 1 2

     [[2]]
     [1] 1 2

instead of

    > rbind(df, df)$v
    [1] '1.2' '1.2'

which shows up in Travis builds of Bioconductor packages

  https://stat.ethz.ch/pipermail/bioc-devel/2019-January/014506.html

and elsewhere

Martin Morgan

?On 1/3/19, 7:05 PM, "R-devel on behalf of Duncan Murdoch" <r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com> wrote:

    On 03/01/2019 3:37 p.m., Duncan Murdoch wrote:
    > I see this too; by bisection, it seems to have first appeared in r72943.
    
    Sorry, that was a typo.  I meant r75943.
    
    Duncan Murdoch
    
    > 
    > Duncan Murdoch
    > 
    > On 03/01/2019 2:18 p.m., I?aki Ucar wrote:
    >> Hi,
    >>
    >> I found the following issue in r-devel (2019-01-02 r75945):
    >>
    >> `foo<-` <- function(x, value) {
    >>     bar(x) <- value * x
    >>     x
    >> }
    >>
    >> `bar<-` <- function(x, value) {
    >>     stopifnot(all(value / x == 1))
    >>     x + value
    >> }
    >>
    >> `foo<-` <- compiler::cmpfun(`foo<-`)
    >> `bar<-` <- compiler::cmpfun(`bar<-`)
    >>
    >> x <- c(2, 2)
    >> foo(x) <- 1
    >> x # should be c(4, 4)
    >> #> [1] 3 3
    >>
    >> If the functions are not compiled or the stopifnot call is removed,
    >> the snippet works correctly. So it seems that something is messing
    >> around with the references to "value" when the call to stopifnot gets
    >> compiled, and the wrong "value" is modified. Note also that if "x <-
    >> 2", then the result is correct, 4.
    >>
    >> Regards,
    >>
    >
    
    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel
    

From luke-tierney @ending from uiow@@edu  Fri Jan  4 01:32:46 2019
From: luke-tierney @ending from uiow@@edu (Tierney, Luke)
Date: Fri, 4 Jan 2019 00:32:46 +0000
Subject: [Rd] Compiler + stopifnot bug
In-Reply-To: <MWHPR05MB35822175B1FF606B449ECDD2F98E0@MWHPR05MB3582.namprd05.prod.outlook.com>
References: <CALEXWq2CneLqRqaD5H4_-qQEzB3LjhSwoqc=Mg3f9WeHAirmXg@mail.gmail.com>
 <ffedc6fa-2f6c-21f3-b29a-8e1f0e3fac89@gmail.com>
 <dce3cbe4-ee06-ec13-d307-5230e98df7c8@gmail.com>,
 <MWHPR05MB35822175B1FF606B449ECDD2F98E0@MWHPR05MB3582.namprd05.prod.outlook.com>
Message-ID: <94D62FBD-4DE4-4359-A3C6-C390625362BF@uiowa.edu>

Thanks for the reports. Will look into it soon and report back.

Luke

Sent from my iPhone

> On Jan 3, 2019, at 2:15 PM, Martin Morgan <mtmorgan.bioc at gmail.com> wrote:
> 
> For what it's worth this also introduced
> 
>> df = data.frame(v = package_version("1.2"))
>> rbind(df, df)$v
>     [[1]]
>     [1] 1 2
> 
>     [[2]]
>     [1] 1 2
> 
> instead of
> 
>> rbind(df, df)$v
>    [1] '1.2' '1.2'
> 
> which shows up in Travis builds of Bioconductor packages
> 
>  https://stat.ethz.ch/pipermail/bioc-devel/2019-January/014506.html
> 
> and elsewhere
> 
> Martin Morgan
> 
> ?On 1/3/19, 7:05 PM, "R-devel on behalf of Duncan Murdoch" <r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com> wrote:
> 
>>    On 03/01/2019 3:37 p.m., Duncan Murdoch wrote:
>> I see this too; by bisection, it seems to have first appeared in r72943.
> 
>    Sorry, that was a typo.  I meant r75943.
> 
>    Duncan Murdoch
> 
>> 
>> Duncan Murdoch
>> 
>>> On 03/01/2019 2:18 p.m., I?aki Ucar wrote:
>>> Hi,
>>> 
>>> I found the following issue in r-devel (2019-01-02 r75945):
>>> 
>>> `foo<-` <- function(x, value) {
>>>    bar(x) <- value * x
>>>    x
>>> }
>>> 
>>> `bar<-` <- function(x, value) {
>>>    stopifnot(all(value / x == 1))
>>>    x + value
>>> }
>>> 
>>> `foo<-` <- compiler::cmpfun(`foo<-`)
>>> `bar<-` <- compiler::cmpfun(`bar<-`)
>>> 
>>> x <- c(2, 2)
>>> foo(x) <- 1
>>> x # should be c(4, 4)
>>> #> [1] 3 3
>>> 
>>> If the functions are not compiled or the stopifnot call is removed,
>>> the snippet works correctly. So it seems that something is messing
>>> around with the references to "value" when the call to stopifnot gets
>>> compiled, and the wrong "value" is modified. Note also that if "x <-
>>> 2", then the result is correct, 4.
>>> 
>>> Regards,
>>> 
>> 
> 
>    ______________________________________________
>    R-devel at r-project.org mailing list
>    https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

From pd@lgd @ending from gm@il@com  Fri Jan  4 01:46:44 2019
From: pd@lgd @ending from gm@il@com (Peter Dalgaard)
Date: Fri, 4 Jan 2019 01:46:44 +0100
Subject: [Rd] history of objects() and ls()
In-Reply-To: <c0420341-e400-9e7f-b110-2d970d6e7815@gmail.com>
References: <c0420341-e400-9e7f-b110-2d970d6e7815@gmail.com>
Message-ID: <307C1E66-8B39-44F4-B861-040BAFD99667@gmail.com>

As far as I remember, this comes from S-PLUS, introduced around v.3 (white book?) or maybe v.4, and due to a desire to cut some Unix ties as MS-DOS was taking over the world. However, it was long ago, in a different world, and besides, S-PLUS is dead (mostly).

- Peter 

> On 4 Jan 2019, at 00:45 , Ben Bolker <bbolker at gmail.com> wrote:
> 
> 
>  I found out today (maybe I had known sometime before??) that objects()
> is a synonym for ls().  I'm curious about the history, which seems to go
> at least back to the beginning of R.  It's been thus since SVN revision
> 2 (Sep 1997) ...
> 
> svn cat https://svn.r-project.org/R/trunk/src/library/base/R/attach at 2 |
> grep objects
> 
>  I had a quick look at the Becker & Chambers brown book (1984) and
> Becker and Wilks blue book (1988) on Google books and could find ls but
> not objects() ... ?
> 
>  Anyone happen to know?
> 
> cheers
>   Ben Bolker
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From wdunl@p @ending from tibco@com  Fri Jan  4 02:47:55 2019
From: wdunl@p @ending from tibco@com (William Dunlap)
Date: Thu, 3 Jan 2019 17:47:55 -0800
Subject: [Rd] history of objects() and ls()
In-Reply-To: <307C1E66-8B39-44F4-B861-040BAFD99667@gmail.com>
References: <c0420341-e400-9e7f-b110-2d970d6e7815@gmail.com>
 <307C1E66-8B39-44F4-B861-040BAFD99667@gmail.com>
Message-ID: <CAF8bMcY-WjR88P4YYMVvmTev8yuVHoTtZC_7NXZhW6AYj3FDjw@mail.gmail.com>

S-PLUS took it from S, sometime in the early 1990's.  The "White Book"
("Statistical Models in S", Chambers and Hastie, eds.,1992), uses objects()
on p.88..

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Thu, Jan 3, 2019 at 4:47 PM Peter Dalgaard <pdalgd at gmail.com> wrote:

> As far as I remember, this comes from S-PLUS, introduced around v.3 (white
> book?) or maybe v.4, and due to a desire to cut some Unix ties as MS-DOS
> was taking over the world. However, it was long ago, in a different world,
> and besides, S-PLUS is dead (mostly).
>
> - Peter
>
> > On 4 Jan 2019, at 00:45 , Ben Bolker <bbolker at gmail.com> wrote:
> >
> >
> >  I found out today (maybe I had known sometime before??) that objects()
> > is a synonym for ls().  I'm curious about the history, which seems to go
> > at least back to the beginning of R.  It's been thus since SVN revision
> > 2 (Sep 1997) ...
> >
> > svn cat https://svn.r-project.org/R/trunk/src/library/base/R/attach at 2 |
> > grep objects
> >
> >  I had a quick look at the Becker & Chambers brown book (1984) and
> > Becker and Wilks blue book (1988) on Google books and could find ls but
> > not objects() ... ?
> >
> >  Anyone happen to know?
> >
> > cheers
> >   Ben Bolker
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From luke-tierney @ending from uiow@@edu  Fri Jan  4 08:09:28 2019
From: luke-tierney @ending from uiow@@edu (Tierney, Luke)
Date: Fri, 4 Jan 2019 07:09:28 +0000
Subject: [Rd] Compiler + stopifnot bug
In-Reply-To: <94D62FBD-4DE4-4359-A3C6-C390625362BF@uiowa.edu>
References: <CALEXWq2CneLqRqaD5H4_-qQEzB3LjhSwoqc=Mg3f9WeHAirmXg@mail.gmail.com>
 <ffedc6fa-2f6c-21f3-b29a-8e1f0e3fac89@gmail.com>
 <dce3cbe4-ee06-ec13-d307-5230e98df7c8@gmail.com>,
 <MWHPR05MB35822175B1FF606B449ECDD2F98E0@MWHPR05MB3582.namprd05.prod.outlook.com>
 <94D62FBD-4DE4-4359-A3C6-C390625362BF@uiowa.edu>
Message-ID: <alpine.OSX.2.21.1901040108290.66930@lukes-macbook-air.local>

Should be fixed in r75946.

Best,

luke

On Fri, 4 Jan 2019, Tierney, Luke wrote:

> Thanks for the reports. Will look into it soon and report back.
>
> Luke
>
> Sent from my iPhone
>
>> On Jan 3, 2019, at 2:15 PM, Martin Morgan <mtmorgan.bioc at gmail.com> wrote:
>>
>> For what it's worth this also introduced
>>
>>> df = data.frame(v = package_version("1.2"))
>>> rbind(df, df)$v
>>     [[1]]
>>     [1] 1 2
>>
>>     [[2]]
>>     [1] 1 2
>>
>> instead of
>>
>>> rbind(df, df)$v
>>    [1] '1.2' '1.2'
>>
>> which shows up in Travis builds of Bioconductor packages
>>
>>  https://stat.ethz.ch/pipermail/bioc-devel/2019-January/014506.html
>>
>> and elsewhere
>>
>> Martin Morgan
>>
>> ?On 1/3/19, 7:05 PM, "R-devel on behalf of Duncan Murdoch" <r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com> wrote:
>>
>>>    On 03/01/2019 3:37 p.m., Duncan Murdoch wrote:
>>> I see this too; by bisection, it seems to have first appeared in r72943.
>>
>>    Sorry, that was a typo.  I meant r75943.
>>
>>    Duncan Murdoch
>>
>>>
>>> Duncan Murdoch
>>>
>>>> On 03/01/2019 2:18 p.m., I?aki Ucar wrote:
>>>> Hi,
>>>>
>>>> I found the following issue in r-devel (2019-01-02 r75945):
>>>>
>>>> `foo<-` <- function(x, value) {
>>>>    bar(x) <- value * x
>>>>    x
>>>> }
>>>>
>>>> `bar<-` <- function(x, value) {
>>>>    stopifnot(all(value / x == 1))
>>>>    x + value
>>>> }
>>>>
>>>> `foo<-` <- compiler::cmpfun(`foo<-`)
>>>> `bar<-` <- compiler::cmpfun(`bar<-`)
>>>>
>>>> x <- c(2, 2)
>>>> foo(x) <- 1
>>>> x # should be c(4, 4)
>>>> #> [1] 3 3
>>>>
>>>> If the functions are not compiled or the stopifnot call is removed,
>>>> the snippet works correctly. So it seems that something is messing
>>>> around with the references to "value" when the call to stopifnot gets
>>>> compiled, and the wrong "value" is modified. Note also that if "x <-
>>>> 2", then the result is correct, 4.
>>>>
>>>> Regards,
>>>>
>>>
>>
>>    ______________________________________________
>>    R-devel at r-project.org mailing list
>>    https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From iuc@r @ending from fedor@project@org  Fri Jan  4 11:54:47 2019
From: iuc@r @ending from fedor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Fri, 4 Jan 2019 11:54:47 +0100
Subject: [Rd] Compiler + stopifnot bug
In-Reply-To: <alpine.OSX.2.21.1901040108290.66930@lukes-macbook-air.local>
References: <CALEXWq2CneLqRqaD5H4_-qQEzB3LjhSwoqc=Mg3f9WeHAirmXg@mail.gmail.com>
 <ffedc6fa-2f6c-21f3-b29a-8e1f0e3fac89@gmail.com>
 <dce3cbe4-ee06-ec13-d307-5230e98df7c8@gmail.com>
 <MWHPR05MB35822175B1FF606B449ECDD2F98E0@MWHPR05MB3582.namprd05.prod.outlook.com>
 <94D62FBD-4DE4-4359-A3C6-C390625362BF@uiowa.edu>
 <alpine.OSX.2.21.1901040108290.66930@lukes-macbook-air.local>
Message-ID: <CALEXWq3arL2HKpJBF-V15yp19NoS4uhJ_MYdxU0dEKAvHmrpwA@mail.gmail.com>

I confirm it is fixed in r75946. Thanks.

I?aki

On Fri, 4 Jan 2019 at 09:27, Tierney, Luke <luke-tierney at uiowa.edu> wrote:
>
> Should be fixed in r75946.
>
> Best,
>
> luke
>
> On Fri, 4 Jan 2019, Tierney, Luke wrote:
>
> > Thanks for the reports. Will look into it soon and report back.
> >
> > Luke
> >
> > Sent from my iPhone
> >
> >> On Jan 3, 2019, at 2:15 PM, Martin Morgan <mtmorgan.bioc at gmail.com> wrote:
> >>
> >> For what it's worth this also introduced
> >>
> >>> df = data.frame(v = package_version("1.2"))
> >>> rbind(df, df)$v
> >>     [[1]]
> >>     [1] 1 2
> >>
> >>     [[2]]
> >>     [1] 1 2
> >>
> >> instead of
> >>
> >>> rbind(df, df)$v
> >>    [1] '1.2' '1.2'
> >>
> >> which shows up in Travis builds of Bioconductor packages
> >>
> >>  https://stat.ethz.ch/pipermail/bioc-devel/2019-January/014506.html
> >>
> >> and elsewhere
> >>
> >> Martin Morgan
> >>
> >> ?On 1/3/19, 7:05 PM, "R-devel on behalf of Duncan Murdoch" <r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com> wrote:
> >>
> >>>    On 03/01/2019 3:37 p.m., Duncan Murdoch wrote:
> >>> I see this too; by bisection, it seems to have first appeared in r72943.
> >>
> >>    Sorry, that was a typo.  I meant r75943.
> >>
> >>    Duncan Murdoch
> >>
> >>>
> >>> Duncan Murdoch
> >>>
> >>>> On 03/01/2019 2:18 p.m., I?aki Ucar wrote:
> >>>> Hi,
> >>>>
> >>>> I found the following issue in r-devel (2019-01-02 r75945):
> >>>>
> >>>> `foo<-` <- function(x, value) {
> >>>>    bar(x) <- value * x
> >>>>    x
> >>>> }
> >>>>
> >>>> `bar<-` <- function(x, value) {
> >>>>    stopifnot(all(value / x == 1))
> >>>>    x + value
> >>>> }
> >>>>
> >>>> `foo<-` <- compiler::cmpfun(`foo<-`)
> >>>> `bar<-` <- compiler::cmpfun(`bar<-`)
> >>>>
> >>>> x <- c(2, 2)
> >>>> foo(x) <- 1
> >>>> x # should be c(4, 4)
> >>>> #> [1] 3 3
> >>>>
> >>>> If the functions are not compiled or the stopifnot call is removed,
> >>>> the snippet works correctly. So it seems that something is messing
> >>>> around with the references to "value" when the call to stopifnot gets
> >>>> compiled, and the wrong "value" is modified. Note also that if "x <-
> >>>> 2", then the result is correct, 4.
> >>>>
> >>>> Regards,
> >>>>
> >>>
> >>
> >>    ______________________________________________
> >>    R-devel at r-project.org mailing list
> >>    https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
I?aki ?car


From henrik@bengt@@on @ending from gm@il@com  Sat Jan  5 03:43:25 2019
From: henrik@bengt@@on @ending from gm@il@com (Henrik Bengtsson)
Date: Fri, 4 Jan 2019 18:43:25 -0800
Subject: [Rd] Error in re-building vignettes: '\R' is an unrecognized escape
 in ... "'D:\temp\R"
Message-ID: <CAFDcVCQzn=GiGckwii+OqLSYsB5P+vi2-VfOjMw1CD_4e5Wk5Q@mail.gmail.com>

This is just an FYI to whoever might look into this - we're now
getting the following on CRAN checks (e.g.
https://cran.r-project.org/web/checks/check_results_future.batchtools.html):

Version: 0.16.1
Check: re-building of vignette outputs
Result: WARN
    Error(s) in re-building vignettes:
    Error: '\R' is an unrecognized escape in character string starting
"'D:\temp\R"
    Execution halted
Flavor: r-devel-windows-ix86+x86_64

using R Under development (unstable) (2019-01-04 r75947)
using platform: x86_64-w64-mingw32 (64-bit)
using session charset: ISO8859-1

I have not attempted to narrow down exactly when this was introduced
(maybe it's related to the recent updates to how vignette are built).

/Henrik


From jono @ending from jc@rroll@com@@u  Mon Jan  7 03:03:26 2019
From: jono @ending from jc@rroll@com@@u (Jonathan Carroll)
Date: Mon, 7 Jan 2019 12:33:26 +1030
Subject: [Rd] [patch] Documentation for list.files when no matches found
Message-ID: <CAAjDRig3e9kwSBkDDb9UTb3BtbXYqrTrG2L0KKyxTOevvGF3fg@mail.gmail.com>

Apologies in advance if this is already known but a search of the
r-devel archive did not immediately turn up any mentions.

list.files() (and thus dir()) returns character(0) when no files are
found in the requested path. This is useful and expected behaviour as
length(dir()) can be tested for success. The Value documentation,
however, indicates otherwise

> A character vector containing the names of the files in the specified directories, or "" if there were no files.

which would be less useful and does not match current behaviour.

This appears to have been the case for the majority the lifetime of
the software so I'm not sure it's terribly important, but for the sake
of consistency, I propose the following simple patch.

Kind regards,

- Jonathan.

--- a/src/library/base/man/list.files.Rd
+++ b/src/library/base/man/list.files.Rd
@@ -45,7 +45,7 @@ list.dirs(path = ".", full.names = TRUE, recursive = TRUE)
 }
 \value{
   A character vector containing the names of the files in the
-  specified directories, or \code{""} if there were no files.  If a
+  specified directories, or \code{character(0)} if there were no files.  If a
   path does not exist or is not a directory or is unreadable it
   is skipped, with a warning.


From tom@@@k@liber@ @ending from gm@il@com  Mon Jan  7 09:30:30 2019
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Mon, 7 Jan 2019 09:30:30 +0100
Subject: [Rd] [patch] Documentation for list.files when no matches found
In-Reply-To: <CAAjDRig3e9kwSBkDDb9UTb3BtbXYqrTrG2L0KKyxTOevvGF3fg@mail.gmail.com>
References: <CAAjDRig3e9kwSBkDDb9UTb3BtbXYqrTrG2L0KKyxTOevvGF3fg@mail.gmail.com>
Message-ID: <85c97a1d-ed77-7b27-419d-2a0a0ab3d128@gmail.com>

Thanks for the report, fixed in documentation in R-devel.

Best
Tomas

On 1/7/19 3:03 AM, Jonathan Carroll wrote:
> Apologies in advance if this is already known but a search of the
> r-devel archive did not immediately turn up any mentions.
>
> list.files() (and thus dir()) returns character(0) when no files are
> found in the requested path. This is useful and expected behaviour as
> length(dir()) can be tested for success. The Value documentation,
> however, indicates otherwise
>
>> A character vector containing the names of the files in the specified directories, or "" if there were no files.
> which would be less useful and does not match current behaviour.
>
> This appears to have been the case for the majority the lifetime of
> the software so I'm not sure it's terribly important, but for the sake
> of consistency, I propose the following simple patch.
>
> Kind regards,
>
> - Jonathan.
>
> --- a/src/library/base/man/list.files.Rd
> +++ b/src/library/base/man/list.files.Rd
> @@ -45,7 +45,7 @@ list.dirs(path = ".", full.names = TRUE, recursive = TRUE)
>   }
>   \value{
>     A character vector containing the names of the files in the
> -  specified directories, or \code{""} if there were no files.  If a
> +  specified directories, or \code{character(0)} if there were no files.  If a
>     path does not exist or is not a directory or is unreadable it
>     is skipped, with a warning.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From evgeni@ch@@nov@ki @ending from gm@il@com  Fri Jan  4 10:59:54 2019
From: evgeni@ch@@nov@ki @ending from gm@il@com (Evgeni Chasnovski)
Date: Fri, 4 Jan 2019 11:59:54 +0200
Subject: [Rd] Bug report with patch: `stats:::regularize.values()` always
 creates full copies of `x` and `y`
Message-ID: <CAP9Eqm1DxLjv=tdaT7fsWYwT1VFQwHEBZEAx=dY-YVu92weesA@mail.gmail.com>

This is intended to be a bug report with proposed patch. I am posting to
this mailing list as described in NOTE in "Bug Reporting in R".

Function `stats:::regularize.values()` is meant to preprocess `x` and `y`
arguments to have "proper" values for later use during interpolation. If
input is already "proper", I would expect it to reuse the same objects
without creating new ones. However, this isn't the case and is the source
of unneccessary extra memory usage in `approx()` and others.

The root cause of this seems to be a forceful reordering in lines 37-39 of
'approx.R' file. If reordering is done only if `x` is unsorted then no
copies are created. Also this doesn't seem like breaking any existing code.

There is a patch attached.

Reproducable code:
x <- seq(1, 100, 1)
y <- seq(1, 100, 1)

reg_xy <- stats:::regularize.values(x, y, mean)

# Regularized versions of `x` and `y` are identical to input but are stored
at
# different places
identical(x, reg_xy[["x"]])
#> [1] TRUE
.Internal(inspect(x))
#> @15719b0 14 REALSXP g0c7 [NAM(3)] (len=100, tl=0) 1,2,3,4,5,...
.Internal(inspect(reg_xy[["x"]]))
#> @2b84130 14 REALSXP g0c7 [NAM(3)] (len=100, tl=0) 1,2,3,4,5,...

identical(y, reg_xy[["y"]])
#> [1] TRUE
.Internal(inspect(y))
#> @2c91be0 14 REALSXP g0c7 [NAM(3)] (len=100, tl=0) 1,2,3,4,5,...
.Internal(inspect(reg_xy[["y"]]))
#> @2bb4880 14 REALSXP g0c7 [NAM(3)] (len=100, tl=0) 1,2,3,4,5,...

# Differs from original only by using `if (is.unsorted(x))`
new_regularize.values <- function (x, y, ties) {
  x <- xy.coords(x, y, setLab = FALSE)
  y <- x$y
  x <- x$x
  if (any(na <- is.na(x) | is.na(y))) {
    ok <- !na
    x <- x[ok]
    y <- y[ok]
  }
  nx <- length(x)
  if (!identical(ties, "ordered")) {
    if (is.unsorted(x)) {
      o <- order(x)
      x <- x[o]
      y <- y[o]
    }
    if (length(ux <- unique(x)) < nx) {
      if (missing(ties))
        warning("collapsing to unique 'x' values")
      y <- as.vector(tapply(y, match(x, x), ties))
      x <- ux
      stopifnot(length(y) == length(x))
    }
  }
  list(x = x, y = y)
}

new_reg_xy <- new_regularize.values(x, y, mean)

# Output is still identical to input and also references to the same objects
identical(x, new_reg_xy[["x"]])
#> [1] TRUE
.Internal(inspect(x))
#> @15719b0 14 REALSXP g1c7 [MARK,NAM(3)] (len=100, tl=0) 1,2,3,4,5,...
.Internal(inspect(new_reg_xy[["x"]]))
#> @15719b0 14 REALSXP g1c7 [MARK,NAM(3)] (len=100, tl=0) 1,2,3,4,5,...

identical(y, new_reg_xy[["y"]])
#> [1] TRUE
.Internal(inspect(y))
#> @2c91be0 14 REALSXP g1c7 [MARK,NAM(3)] (len=100, tl=0) 1,2,3,4,5,...
.Internal(inspect(new_reg_xy[["y"]]))
#> @2c91be0 14 REALSXP g1c7 [MARK,NAM(3)] (len=100, tl=0) 1,2,3,4,5,...

# Current R version
R.version
#>                _
#> platform       x86_64-pc-linux-gnu
#> arch           x86_64
#> os             linux-gnu
#> system         x86_64, linux-gnu
#> status
#> major          3
#> minor          5.2
#> year           2018
#> month          12
#> day            20
#> svn rev        75870
#> language       R
#> version.string R version 3.5.2 (2018-12-20)
#> nickname       Eggshell Igloo

-- 
Best regards,
Evgeni Chasnovski

-------------- next part --------------
A non-text attachment was scrubbed...
Name: patch.diff
Type: text/x-patch
Size: 522 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190104/87d5382c/attachment.bin>

From h@rvey13131 @ending from gm@il@com  Sat Jan  5 05:37:30 2019
From: h@rvey13131 @ending from gm@il@com (Harvey Smith)
Date: Fri, 4 Jan 2019 23:37:30 -0500
Subject: [Rd] unsorted - suggestion for performance improvement and ALTREP
 support for POSIXct
Message-ID: <CACVELJ08tPritTXC1CZVXEgyhbJs3iFsb6StD25NqCH8L2O14w@mail.gmail.com>

I believe the performance of isUnsorted() in sort.c could be improved by
calling REAL() once (outside of the for loop), rather than calling it twice
inside the loop.   As an aside, it is implemented in the faster way in
doSort() (sort.c line 401).  The example below shows the performance
improvement for a vectors of double of moving REAL() outside the for loop.

# example as implemented in isUnsorted
body = "
R_xlen_t n, i;
n = XLENGTH(x);
for(i = 0; i+1 < n ; i++)
  if(REAL(x)[i] > REAL(x)[i+1])
    return ScalarLogical(TRUE);
return ScalarLogical(FALSE);";
f1 = inline::cfunction(sig = signature(x='numeric'), body=body)
# example updated with only one call to REAL()
body = "
R_xlen_t n, i;
n = XLENGTH(x);
double* real_x = REAL(x);
for(i = 0; i+1 < n ; i++)
  if(real_x[i] > real_x[i+1])
    return ScalarLogical(TRUE);
return ScalarLogical(FALSE);";
f2 = inline::cfunction(sig = signature(x='numeric'), body=body)
# unsorted
x.double = as.double(1:1e7) + 0
x.posixct = Sys.time() + x.double
microbenchmark::microbenchmark(
  f1(x.double),
  f2(x.double),  # faster due to one REAL()
  f1(x.posixct),
  f2(x.posixct), # faster due to one REAL()
  unit='ms', times=10)
Unit: milliseconds
          expr       min        lq      mean    median        uq      max
neval
  f1(x.double) 35.737629 37.991785 43.004432 38.575525 39.198533 80.85625
 10
  f2(x.double)  6.053373  6.064323  7.238750  6.092453  8.438550 10.69384
 10
 f1(x.posixct) 36.315705 36.542253 42.349745 38.355395 39.378262 81.59857
 10
 f2(x.posixct)  6.063946  6.070741  7.579176  6.138518  7.063024 13.94141
 10



I would also like to suggest ALTREP support for POSIXct vectors, which are
interpreted as type REAL in the c code, but do not gain the performance
benefits of real vectors.  Sorted vectors of timestamps are important for
joining time series and in calls to findInterval().

# unsorted vectors
x.double = as.double(1:1e7) + 0
x.posixct = Sys.time() + x.double
# sort for altrep benefit
x.double.sort <- sort(x.double)
x.posixct.sort <- sort(x.posixct)
microbenchmark::microbenchmark(
  is.unsorted(x.double),
  is.unsorted(x.double.sort), # faster due to altrep
  is.unsorted(x.posixct),
  is.unsorted(x.posixct.sort), # no altrep benefit
  unit='ms', times=10)
Unit: milliseconds
                        expr       min        lq       mean     median
   uq        max neval
       is.unsorted(x.double) 16.987730 17.010008 17.1577173 17.0862785
17.308674  17.474432    10
  is.unsorted(x.double.sort)  0.000378  0.000756  0.0065327  0.0075525
 0.010195   0.011706    10
      is.unsorted(x.posixct) 36.925876 37.084837 43.4125593 37.4695915
41.858589  78.742174    10
 is.unsorted(x.posixct.sort) 36.966654 37.031975 51.1228686 37.1235380
37.777319 153.270170    10


Since there do not appear to be any tests for is.unsorted() these are some
tests to be added for some types.

# integer sequence
x <- -10L:10L
stopifnot(!is.unsorted(x, na.rm = F, strictly = T))
stopifnot(!is.unsorted(x, na.rm = F, strictly = F))
# integer not strictly
x <- -10L:10L
x[2] <- x[3]
stopifnot( is.unsorted(x, na.rm = F, strictly = T))
stopifnot(!is.unsorted(x, na.rm = F, strictly = F))
# integer with NA
x <- -10L:10L
x[2] <- NA
stopifnot(!is.unsorted(x, na.rm = T, strictly = F))
stopifnot(is.na(is.unsorted(x, na.rm = F, strictly = F)))
# double
x <- seq(from = -10, to = 10, by=0.01)
stopifnot(!is.unsorted(x, na.rm = F, strictly = T))
stopifnot(!is.unsorted(x, na.rm = F, strictly = F))
# double not strictly
x <- seq(from = -10, to = 10, by=0.01)
x[2] <- x[3]
stopifnot( is.unsorted(x, na.rm = F, strictly = T))
stopifnot(!is.unsorted(x, na.rm = F, strictly = F))
# double with NA
x <- seq(from = -10, to = 10, by=0.01)
x[length(x)] <- NA
stopifnot(!is.unsorted(x, na.rm = T, strictly = F))
stopifnot(is.na(is.unsorted(x, na.rm = F, strictly = F)))
# logical
stopifnot(!is.unsorted( c(F, T, T), strictly = F))
stopifnot( is.unsorted( c(F, T, T), strictly = T))
stopifnot( is.unsorted( c(T, T, F), strictly = F))
stopifnot( is.unsorted( c(T, T, F), strictly = T))
# POSIXct
x <- seq(from=as.POSIXct('2018-1-1'), to=as.POSIXct('2019-1-1'), by='day')
stopifnot(!is.unsorted(x, na.rm = T, strictly = F))
stopifnot(!is.unsorted(x, na.rm = F, strictly = F))
# POSIXct not strictly
x <- seq(from=as.POSIXct('2018-1-1'), to=as.POSIXct('2019-1-1'), by='day')
x[2] <- x[3]
stopifnot( is.unsorted(x, na.rm = F, strictly = T))
stopifnot(!is.unsorted(x, na.rm = F, strictly = F))
# POSIXct with NA
x <- seq(from=as.POSIXct('2018-1-1'), to=as.POSIXct('2019-1-1'), by='day')
x[length(x)] <- NA
stopifnot(!is.unsorted(x, na.rm = T, strictly = F))
stopifnot(is.na(is.unsorted(x, na.rm = F, strictly = F)))

	[[alternative HTML version deleted]]


From lindelof @ending from ieee@org  Thu Jan  3 11:43:31 2019
From: lindelof @ending from ieee@org (David Lindelof)
Date: Thu, 3 Jan 2019 11:43:31 +0100
Subject: [Rd] Runnable R packages
In-Reply-To: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
Message-ID: <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>

Dear all,

I?m working as a data scientist in a major tech company. I have been using
R for almost 20 years now and there?s one issue that?s been bugging me of
late. I apologize in advance if this has been discussed before.

R has traditionally been used for running short scripts or data analysis
notebooks, but there?s recently been a growing interest in developing full
applications in the language. Three examples come to mind:

1) The Shiny web application framework, which facilitates the developent of
rich, interactive web applications
2) The httr package, which provides lower-level facilities than Shiny for
writing web services
3) Batch jobs run by data scientists according to, say, a cron schedule

Compared with other languages, R?s support for such applications is rather
poor. The Rscript program is generally used to run an R script or an
arbitrary R expression, but I feel it suffers from a few problems:

1) It encourages developers of batch jobs to provide their code in a single
R file (bad for code structure and unit-testability)
2) It provides no way to deal with dependencies on other packages
3) It provides no way to "run" an application provided as an R package

For example, let?s say I want to run a Shiny application that I provide as
an R package (to keep the code modular, to benefit from unit tests, and to
declare dependencies properly). I would then need to a) uncompress my R
package, b) somehow, ensure my dependencies are installed, and c) call
runApp(). This can get tedious, fast.

Other languages let the developer package their code in "runnable"
artefacts, and let the developer specify the main entry point. The
mechanics depend on the language but are remarkably similar, and suggest a
way to implement this in R. Through declarations in some file, the
developer can often specify dependencies and declare where the program?s
"main" function resides. Consider Java:

Artefact: .jar file
Declarations file: Manifest file
Entry point: declared as 'Main-Class'
Executed as: java -jar <jarfile>

Or Python:

Artefact: Python package, typically as .tar.gz source distribution file
Declarations file: setup.py (which specifies dependencies)
Entry point: special __main__() function
Executed as: python -m <package>

R has already much of this machinery:

Artefact: R package
Declarations file: DESCRIPTION
Entry point: ?
Executed as: ?

I feel that R could benefit from letting the developer specify, possibly in
DESCRIPTION, how to "run" the package. The package could then be run
through, for example, a new R CMD command, for example:

R CMD RUN <package> <args>

I?m sure there are plenty of wrinkles in this idea that need to be ironed
out, but is this something that has ever been considered, or that is on R?s
roadmap?

Thanks for reading so far,



David Lindel?f, Ph.D.
+41 (0)79 415 66 41 or skype:david.lindelof
http://computersandbuildings.com
Follow me on Twitter:
http://twitter.com/dlindelof

	[[alternative HTML version deleted]]


From d@roczig @ending from r@pporter@net  Mon Jan  7 22:09:07 2019
From: d@roczig @ending from r@pporter@net (=?UTF-8?Q?Gergely_Dar=C3=B3czi?=)
Date: Mon, 7 Jan 2019 22:09:07 +0100
Subject: [Rd] Runnable R packages
In-Reply-To: <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
Message-ID: <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>

Dear David, sharing some related (subjective) thoughts below.

On Mon, Jan 7, 2019 at 9:53 PM David Lindelof <lindelof at ieee.org> wrote:
>
> Dear all,
>
> I?m working as a data scientist in a major tech company. I have been using
> R for almost 20 years now and there?s one issue that?s been bugging me of
> late. I apologize in advance if this has been discussed before.
>
> R has traditionally been used for running short scripts or data analysis
> notebooks, but there?s recently been a growing interest in developing full
> applications in the language. Three examples come to mind:
>
> 1) The Shiny web application framework, which facilitates the developent of
> rich, interactive web applications
> 2) The httr package, which provides lower-level facilities than Shiny for
> writing web services
> 3) Batch jobs run by data scientists according to, say, a cron schedule
>
> Compared with other languages, R?s support for such applications is rather
> poor. The Rscript program is generally used to run an R script or an
> arbitrary R expression, but I feel it suffers from a few problems:
>
> 1) It encourages developers of batch jobs to provide their code in a single
> R file (bad for code structure and unit-testability)

I think it rather encourages developers to create (internal) R
packages and use those from the batch jobs. This way the structure is
pretty clean, sharing code between scripts is easy, unit testing can
be done within the package etc.

> 2) It provides no way to deal with dependencies on other packages

See above: create R package(s) and use those from the scripts.

> 3) It provides no way to "run" an application provided as an R package
>
> For example, let?s say I want to run a Shiny application that I provide as
> an R package (to keep the code modular, to benefit from unit tests, and to
> declare dependencies properly). I would then need to a) uncompress my R
> package, b) somehow, ensure my dependencies are installed, and c) call
> runApp(). This can get tedious, fast.

You can provide your app as a Docker image, so that the end-user
simply calls a "docker pull" and then "docker run" -- that can be done
from a user-friendly script as well.
Of course, this requires Docker to be installed, but if that's a
problem, probably better to "ship" the app as a web application and
share a URL with the user, eg backed by shinyproxy.io

>
> Other languages let the developer package their code in "runnable"
> artefacts, and let the developer specify the main entry point. The
> mechanics depend on the language but are remarkably similar, and suggest a
> way to implement this in R. Through declarations in some file, the
> developer can often specify dependencies and declare where the program?s
> "main" function resides. Consider Java:
>
> Artefact: .jar file
> Declarations file: Manifest file
> Entry point: declared as 'Main-Class'
> Executed as: java -jar <jarfile>
>
> Or Python:
>
> Artefact: Python package, typically as .tar.gz source distribution file
> Declarations file: setup.py (which specifies dependencies)
> Entry point: special __main__() function
> Executed as: python -m <package>
>
> R has already much of this machinery:
>
> Artefact: R package
> Declarations file: DESCRIPTION
> Entry point: ?
> Executed as: ?
>
> I feel that R could benefit from letting the developer specify, possibly in
> DESCRIPTION, how to "run" the package. The package could then be run
> through, for example, a new R CMD command, for example:
>
> R CMD RUN <package> <args>
>
> I?m sure there are plenty of wrinkles in this idea that need to be ironed
> out, but is this something that has ever been considered, or that is on R?s
> roadmap?
>
> Thanks for reading so far,
>
>
>
> David Lindel?f, Ph.D.
> +41 (0)79 415 66 41 or skype:david.lindelof
> http://computersandbuildings.com
> Follow me on Twitter:
> http://twitter.com/dlindelof
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From edd @ending from debi@n@org  Mon Jan  7 22:18:03 2019
From: edd @ending from debi@n@org (Dirk Eddelbuettel)
Date: Mon, 7 Jan 2019 15:18:03 -0600
Subject: [Rd] Runnable R packages
In-Reply-To: <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
Message-ID: <23603.49675.200337.238189@rob.eddelbuettel.com>


On 3 January 2019 at 11:43, David Lindelof wrote:
| Dear all,
| 
| I?m working as a data scientist in a major tech company. I have been using
| R for almost 20 years now and there?s one issue that?s been bugging me of
| late. I apologize in advance if this has been discussed before.
| 
| R has traditionally been used for running short scripts or data analysis
| notebooks, but there?s recently been a growing interest in developing full
| applications in the language. Three examples come to mind:
| 
| 1) The Shiny web application framework, which facilitates the developent of
| rich, interactive web applications
| 2) The httr package, which provides lower-level facilities than Shiny for
| writing web services
| 3) Batch jobs run by data scientists according to, say, a cron schedule

That is a bit of a weird classification of "full applications". I have done
this about as long as you but I also provided (at least as tests and demos)
  i)  GUI apps using tcl/tk (which comes with R) and
  ii) GUI apps with Qt (or even Wt), see my RInside package.

But my main weapon for 3) is littler. See

   https://cran.r-project.org/package=littler

and particularly the many examples at

   https://github.com/eddelbuettel/littler/tree/master/inst/examples
 
| Compared with other languages, R?s support for such applications is rather
| poor. The Rscript program is generally used to run an R script or an
| arbitrary R expression, but I feel it suffers from a few problems:
| 
| 1) It encourages developers of batch jobs to provide their code in a single
| R file (bad for code structure and unit-testability)
| 2) It provides no way to deal with dependencies on other packages
| 3) It provides no way to "run" an application provided as an R package

Err, no. See the examples/ directory above. About every single one uses
packages.

As illustrations I have long-running and somewhat visible cronjobs that are
implemented the same way: CRANberries (since 2007, now running hourly) and
CRAN Policy Watch (running once a day). Because both are 'hacks' I never
published the code but there is not that much to it. CRANberries just queries
CRAN, compares to what it had last, and writes out variants of the
DESCRIPTION file to text where a static blog engine (like Hugo, but older)
makes a feed and html pagaes out of it.  Oh, and we tweet because "why not?".
 
| For example, let?s say I want to run a Shiny application that I provide as
| an R package (to keep the code modular, to benefit from unit tests, and to
| declare dependencies properly). I would then need to a) uncompress my R
| package, b) somehow, ensure my dependencies are installed, and c) call
| runApp(). This can get tedious, fast.

Disagree here too. At work, I just write my code, organize it in packages,
update the packages and have shiny expose whatever makes sense.

| Other languages let the developer package their code in "runnable"
| artefacts, and let the developer specify the main entry point. The
| mechanics depend on the language but are remarkably similar, and suggest a
| way to implement this in R. Through declarations in some file, the
| developer can often specify dependencies and declare where the program?s
| "main" function resides. Consider Java:
| 
| Artefact: .jar file
| Declarations file: Manifest file
| Entry point: declared as 'Main-Class'
| Executed as: java -jar <jarfile>
| 
| Or Python:
| 
| Artefact: Python package, typically as .tar.gz source distribution file
| Declarations file: setup.py (which specifies dependencies)
| Entry point: special __main__() function
| Executed as: python -m <package>
| 
| R has already much of this machinery:
| 
| Artefact: R package
| Declarations file: DESCRIPTION
| Entry point: ?
| Executed as: ?
| 
| I feel that R could benefit from letting the developer specify, possibly in
| DESCRIPTION, how to "run" the package. The package could then be run
| through, for example, a new R CMD command, for example:
| 
| R CMD RUN <package> <args>
| 
| I?m sure there are plenty of wrinkles in this idea that need to be ironed
| out, but is this something that has ever been considered, or that is on R?s
| roadmap?

Hm. If _you_ have an itch to scratch here why don't _you_ implement a draft.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murr@y @ending from @tokely@org  Mon Jan  7 22:26:55 2019
From: murr@y @ending from @tokely@org (Murray Stokely)
Date: Mon, 7 Jan 2019 13:26:55 -0800
Subject: [Rd] Runnable R packages
In-Reply-To: <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
Message-ID: <CAECWziL1rHqvcOrESAJhjDsW8dfP6C8y=ZZNmLB35=zzScC9Tw@mail.gmail.com>

Some other major tech companies have in the past widely use Runnable R
Archives (".Rar" files), similar to Python .par files [1], and integrate
them completely into the proprietary R package build system in use there.
I thought there were a few systems like this that had made their way to
CRAN or the UseR conferences, but I don't have a link.

Building something specific to your organization on top of the python .par
framework to archive up R, your needed packages/shared libraries, and other
dependencies with a runner script to R CMD RUN your entry point in a
sandbox is pretty straightforward way to have control in a way that makes
sense for your environment.

      - Murray

[1] https://google.github.io/subpar/subpar.html

On Mon, Jan 7, 2019 at 12:53 PM David Lindelof <lindelof at ieee.org> wrote:

> Dear all,
>
> I?m working as a data scientist in a major tech company. I have been using
> R for almost 20 years now and there?s one issue that?s been bugging me of
> late. I apologize in advance if this has been discussed before.
>
> R has traditionally been used for running short scripts or data analysis
> notebooks, but there?s recently been a growing interest in developing full
> applications in the language. Three examples come to mind:
>
> 1) The Shiny web application framework, which facilitates the developent of
> rich, interactive web applications
> 2) The httr package, which provides lower-level facilities than Shiny for
> writing web services
> 3) Batch jobs run by data scientists according to, say, a cron schedule
>
> Compared with other languages, R?s support for such applications is rather
> poor. The Rscript program is generally used to run an R script or an
> arbitrary R expression, but I feel it suffers from a few problems:
>
> 1) It encourages developers of batch jobs to provide their code in a single
> R file (bad for code structure and unit-testability)
> 2) It provides no way to deal with dependencies on other packages
> 3) It provides no way to "run" an application provided as an R package
>
> For example, let?s say I want to run a Shiny application that I provide as
> an R package (to keep the code modular, to benefit from unit tests, and to
> declare dependencies properly). I would then need to a) uncompress my R
> package, b) somehow, ensure my dependencies are installed, and c) call
> runApp(). This can get tedious, fast.
>
> Other languages let the developer package their code in "runnable"
> artefacts, and let the developer specify the main entry point. The
> mechanics depend on the language but are remarkably similar, and suggest a
> way to implement this in R. Through declarations in some file, the
> developer can often specify dependencies and declare where the program?s
> "main" function resides. Consider Java:
>
> Artefact: .jar file
> Declarations file: Manifest file
> Entry point: declared as 'Main-Class'
> Executed as: java -jar <jarfile>
>
> Or Python:
>
> Artefact: Python package, typically as .tar.gz source distribution file
> Declarations file: setup.py (which specifies dependencies)
> Entry point: special __main__() function
> Executed as: python -m <package>
>
> R has already much of this machinery:
>
> Artefact: R package
> Declarations file: DESCRIPTION
> Entry point: ?
> Executed as: ?
>
> I feel that R could benefit from letting the developer specify, possibly in
> DESCRIPTION, how to "run" the package. The package could then be run
> through, for example, a new R CMD command, for example:
>
> R CMD RUN <package> <args>
>
> I?m sure there are plenty of wrinkles in this idea that need to be ironed
> out, but is this something that has ever been considered, or that is on R?s
> roadmap?
>
> Thanks for reading so far,
>
>
>
> David Lindel?f, Ph.D.
> +41 (0)79 415 66 41 or skype:david.lindelof
> http://computersandbuildings.com
> Follow me on Twitter:
> http://twitter.com/dlindelof
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From edd @ending from debi@n@org  Mon Jan  7 22:37:40 2019
From: edd @ending from debi@n@org (Dirk Eddelbuettel)
Date: Mon, 7 Jan 2019 15:37:40 -0600
Subject: [Rd] Runnable R packages
In-Reply-To: <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
 <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
Message-ID: <23603.50852.865289.273800@rob.eddelbuettel.com>


On 7 January 2019 at 22:09, Gergely Dar?czi wrote:
| You can provide your app as a Docker image, so that the end-user
| simply calls a "docker pull" and then "docker run" -- that can be done
| from a user-friendly script as well.
| Of course, this requires Docker to be installed, but if that's a
| problem, probably better to "ship" the app as a web application and
| share a URL with the user, eg backed by shinyproxy.io

Excellent suggestion.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From iuc@r @ending from fedor@project@org  Mon Jan  7 22:44:55 2019
From: iuc@r @ending from fedor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Mon, 7 Jan 2019 22:44:55 +0100
Subject: [Rd] Runnable R packages
In-Reply-To: <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
 <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
Message-ID: <CALEXWq2mJ=r7t4Z2akQGe1vDhu9RdHikYCGqdZy_xS1nx=YMnw@mail.gmail.com>

On Mon, 7 Jan 2019 at 22:09, Gergely Dar?czi <daroczig at rapporter.net> wrote:
>
> Dear David, sharing some related (subjective) thoughts below.
>
> You can provide your app as a Docker image, so that the end-user
> simply calls a "docker pull" and then "docker run" -- that can be done
> from a user-friendly script as well.
> Of course, this requires Docker to be installed, but if that's a
> problem, probably better to "ship" the app as a web application and
> share a URL with the user, eg backed by shinyproxy.io

If Docker is a problem, you can also try podman: same usage,
compatible with Dockerfiles and daemon-less, no admin rights required.

https://podman.io/

I?aki


From g@bembecker @ending from gm@il@com  Tue Jan  8 02:17:15 2019
From: g@bembecker @ending from gm@il@com (Gabriel Becker)
Date: Mon, 7 Jan 2019 17:17:15 -0800
Subject: [Rd] 
 unsorted - suggestion for performance improvement and ALTREP
 support for POSIXct
In-Reply-To: <CACVELJ08tPritTXC1CZVXEgyhbJs3iFsb6StD25NqCH8L2O14w@mail.gmail.com>
References: <CACVELJ08tPritTXC1CZVXEgyhbJs3iFsb6StD25NqCH8L2O14w@mail.gmail.com>
Message-ID: <CAD4oTHH_eC05-h=FzmN4ZV-y+k6jLe5at1_NUPk6EF1-eNp2SQ@mail.gmail.com>

Hi Harvey,

Its exciting to see people thinking about and looking at ALTREP speedups
"in the wild" :).   You're absolutely right that pulling out the REAL call
will give you a significant speedup, but ALTREP does add a little wrinkle
(and a solution to it!). Detailed responses and comments inline:

On Mon, Jan 7, 2019 at 11:58 AM Harvey Smith <harvey13131 at gmail.com> wrote:

> I believe the performance of isUnsorted() in sort.c could be improved by
> calling REAL() once (outside of the for loop), rather than calling it twice
> inside the loop.   As an aside, it is implemented in the faster way in
> doSort() (sort.c line 401).  The example below shows the performance
> improvement for a vectors of double of moving REAL() outside the for loop.
>
> <snip>
>
>
In light of ALTREP's inclusion in the R internals its best to avoid asking
things for their full data vector when you don't need to. Instead, you can
use the ITERATE_BY_REGION macro R (courtesy of Luke, I believe?) provides
in <includedir>/R_ext/Itermacros.h. This is particularly true of R's
internals, which also preferably won't  "explode"/invalidate an ALTREP
(which asking for a writable pointer does) when they don't need to. Most
internal functions haven't been converted to this yet, as you see with
is.unsorted (and its not a high priority to do the conversion until it
becomes an issue for any given case), but this is what, e.g., R's own sum
function now does.

ITERATE_BY_REGION is based on *_GET_REGION, which was added to the C API
as part ALTREP, but works on ALTREP and normal vectors, and won't explode
in corner cases where materializing a full ALTREP vector would be
problematic. The core concept for ITERATE_BY_REGION is to grab regions (a
quick glance tells me its 512 elements at a time) of a vector, copying them
into a buffer, and using the same trick your code does by avoiding pointer
lookup inside the inner tight loop. Do note that as of now I had to compile
my function with language="C", rather than the default "C++" to avoid an
error about initializing a const double * with a const void * value.

On my machine, at least, you actually *nearly* the same speedup with all
the added safety. Eyeballing it I'm not convinced the difference is
statistically signfiicant, to be honest, but even if it is, you get most of
the benefit...


body = "
R_xlen_t n, i;
n = XLENGTH(x);
for(i = 0; i+1 < n ; i++)
  if(REAL(x)[i] > REAL(x)[i+1])
    return ScalarLogical(TRUE);
return ScalarLogical(FALSE);";
f1 = inline::cfunction(sig = signature(x='numeric'), body=body)

body = "
R_xlen_t n, i;
n = XLENGTH(x);
double* real_x = REAL(x);
for(i = 0; i+1 < n ; i++)
  if(real_x[i] > real_x[i+1])
    return ScalarLogical(TRUE);
return ScalarLogical(FALSE);";
f2 = inline::cfunction(sig = signature(x='numeric'), body=body)

body = "
double tmp = -DBL_MAX; // minimum possible double value
ITERATE_BY_REGION(x, xptr, i, nbatch, double, REAL, {
  if(xptr[0] < tmp) //deal with batch barriers, tmp is end of last batch
    return ScalarLogical(TRUE);
  for(R_xlen_t k = 0; k < nbatch - 1; k++) {
  if(xptr[k] > xptr[k+1])
    return ScalarLogical(TRUE);
  }
  tmp = xptr[nbatch - 1];
});
return ScalarLogical(FALSE);";
f3 = inline::cfunction(sig = signature(x='numeric'), body=body, includes =
'#include "R_ext/Itermacros.h"',
                       language = "C")

x.double = as.double(1:1e7) + 0
x.posixct = Sys.time() + x.double
microbenchmark::microbenchmark(
                    f1(x.double),
                    f2(x.double), # one REAL call
                    f3(x.double),  # ITERATE_BY_REGION
                    f1(x.posixct),
                    f2(x.posixct), # one REAL call
                    f3(x.posixct), # ITERATE_BY_REGION
                    unit='ms', times=100)



Unit: milliseconds

          expr       min        lq      mean    median        uq        max

  f1(x.double) 26.377432 27.234192 28.156993 27.774590 28.602643  32.213378

  f2(x.double)  4.722712  4.854300  5.011549  4.991388  5.127996   5.523156

  f3(x.double)  4.759537  4.788137  5.408925  5.373667  5.713877   6.694330

 f1(x.posixct) 77.975030 78.853724 85.867995 82.530822 83.557849 123.546206

 f2(x.posixct)  4.637912  4.660033  4.872892  4.750513  4.880569   5.907149

 f3(x.posixct)  4.643806  4.665936  5.094212  5.085454  5.384414   5.778274

 neval

    10

    10

    10

    10

    10

    10



To be extra careful we can check that we're getting all the edges right
just incase, since the code is admittedly harder to follow and a bit more
arcane:

> x.double2 = x.double

> x.double2[512] = x.double[1] #unsorted at end of first batch

> stopifnot(f3(x.double2))

>

> x.double2a = x.double

> x.double2a[513] = x.double[1] #unsorted at beginning of 2nd batch

> stopifnot(f3(x.double2a))

>

>

> ##check edges

> x.double3 = x.double

> x.double3[length(x.double3)] = x.double3[1] #unsorted at last element

> stopifnot(f3(x.double3))

>

> x.double4 = x.double

> x.double4[1] = x.double[5] #unsorted at first element

> stopifnot(f3(x.double4))
>



If R-core is interested I'm happy to develop a patch for the isUnsorted
workhorse c-function, at least for integers and reals.


> I would also like to suggest ALTREP support for POSIXct vectors, which are
> interpreted as type REAL in the c code, but do not gain the performance
> benefits of real vectors.  Sorted vectors of timestamps are important for
> joining time series and in calls to findInterval().
>

So looking at this, it is because is.object(x.posixct) returns true, which
means sort.default does x[order(x, <bla bla bla>)], which ALTREP is not
currently (and may not ever be?) smart enough to catch on its own and know
is sorted.

Its true we could add something after that to wrap it in what is called a
wrapper altrep which would know it's sorted, but we don't do that currently
now and I'm not sure we actually should in the general case. I'm not
convinced its safe to assume an object class' defined ordering will match
the ordering of an underlying double/int representation. I believe we ran
into something similar with deferred sting conversions from integers (I
think, possibly doubles) where the int had sortedness information but that
wasn't correct for the *character vector *the ALTREP ultimately represented.


Best,
~G


PS above timings were in a mildly (~1 month) old version of R-devel:

> sessionInfo()

R Under development (unstable) (2018-12-11 r75837)

Platform: x86_64-apple-darwin17.7.0 (64-bit)

Running under: macOS High Sierra 10.13.6



> # unsorted vectors
> x.double = as.double(1:1e7) + 0
> x.posixct = Sys.time() + x.double
> # sort for altrep benefit
> x.double.sort <- sort(x.double)
> x.posixct.sort <- sort(x.posixct)
> microbenchmark::microbenchmark(
>   is.unsorted(x.double),
>   is.unsorted(x.double.sort), # faster due to altrep
>   is.unsorted(x.posixct),
>   is.unsorted(x.posixct.sort), # no altrep benefit
>   unit='ms', times=10)
> Unit: milliseconds
>                         expr       min        lq       mean     median
>    uq        max neval
>        is.unsorted(x.double) 16.987730 17.010008 17.1577173 17.0862785
> 17.308674  17.474432    10
>   is.unsorted(x.double.sort)  0.000378  0.000756  0.0065327  0.0075525
>  0.010195   0.011706    10
>       is.unsorted(x.posixct) 36.925876 37.084837 43.4125593 37.4695915
> 41.858589  78.742174    10
>  is.unsorted(x.posixct.sort) 36.966654 37.031975 51.1228686 37.1235380
> 37.777319 153.270170    10
>
>
> Since there do not appear to be any tests for is.unsorted() these are some
> tests to be added for some types.
>
> # integer sequence
> x <- -10L:10L
> stopifnot(!is.unsorted(x, na.rm = F, strictly = T))
> stopifnot(!is.unsorted(x, na.rm = F, strictly = F))
> # integer not strictly
> x <- -10L:10L
> x[2] <- x[3]
> stopifnot( is.unsorted(x, na.rm = F, strictly = T))
> stopifnot(!is.unsorted(x, na.rm = F, strictly = F))
> # integer with NA
> x <- -10L:10L
> x[2] <- NA
> stopifnot(!is.unsorted(x, na.rm = T, strictly = F))
> stopifnot(is.na(is.unsorted(x, na.rm = F, strictly = F)))
> # double
> x <- seq(from = -10, to = 10, by=0.01)
> stopifnot(!is.unsorted(x, na.rm = F, strictly = T))
> stopifnot(!is.unsorted(x, na.rm = F, strictly = F))
> # double not strictly
> x <- seq(from = -10, to = 10, by=0.01)
> x[2] <- x[3]
> stopifnot( is.unsorted(x, na.rm = F, strictly = T))
> stopifnot(!is.unsorted(x, na.rm = F, strictly = F))
> # double with NA
> x <- seq(from = -10, to = 10, by=0.01)
> x[length(x)] <- NA
> stopifnot(!is.unsorted(x, na.rm = T, strictly = F))
> stopifnot(is.na(is.unsorted(x, na.rm = F, strictly = F)))
> # logical
> stopifnot(!is.unsorted( c(F, T, T), strictly = F))
> stopifnot( is.unsorted( c(F, T, T), strictly = T))
> stopifnot( is.unsorted( c(T, T, F), strictly = F))
> stopifnot( is.unsorted( c(T, T, F), strictly = T))
> # POSIXct
> x <- seq(from=as.POSIXct('2018-1-1'), to=as.POSIXct('2019-1-1'), by='day')
> stopifnot(!is.unsorted(x, na.rm = T, strictly = F))
> stopifnot(!is.unsorted(x, na.rm = F, strictly = F))
> # POSIXct not strictly
> x <- seq(from=as.POSIXct('2018-1-1'), to=as.POSIXct('2019-1-1'), by='day')
> x[2] <- x[3]
> stopifnot( is.unsorted(x, na.rm = F, strictly = T))
> stopifnot(!is.unsorted(x, na.rm = F, strictly = F))
> # POSIXct with NA
> x <- seq(from=as.POSIXct('2018-1-1'), to=as.POSIXct('2019-1-1'), by='day')
> x[length(x)] <- NA
> stopifnot(!is.unsorted(x, na.rm = T, strictly = F))
> stopifnot(is.na(is.unsorted(x, na.rm = F, strictly = F)))
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From m@rk@ch@ppell @ending from zoho@com  Wed Jan  9 03:10:26 2019
From: m@rk@ch@ppell @ending from zoho@com (mark.chappell)
Date: Wed, 09 Jan 2019 13:10:26 +1100
Subject: [Rd] Bug in dt() function in stats - accuracy only 6 dp.
In-Reply-To: <168301b928b.e9668824246620.3977017311338014196@zoho.com>
References: <168301b928b.e9668824246620.3977017311338014196@zoho.com>
Message-ID: <168306009c1.cfa68936250531.4734375789261380744@zoho.com>

Hi



I believe the dt() function in stats has small areas of inaccuracy.



SmallRangeMostDetaileddf150.png shows this occurring in the 10-11th decimal place.



MyD4 is computed using Myt_NC(), at the bottom of BugL.R - my function is very slow due to using mpfr, but i believe

accurate to the accuracy of genhypergeo() which it uses - 14-15 dp.



LargeRangeDiffdf150.png, which is difference between dt() and my function, shows spikes across -1.5 < x < 1.5.



I assumed probably only a problem for large df, but SmallRangeCloseZerodf20.png, shows actually more of a problem with

df = 20.? Accuracy seems to be only to 6 decimal places.



Using R version 3.5.2.



Cheers



Mark
-------------- next part --------------
A non-text attachment was scrubbed...
Name: SmallRangeMostDetaileddf150.png
Type: image/png
Size: 1262560 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190109/20c85cda/attachment-0003.png>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: LargeRangeDiffdf150.png
Type: image/png
Size: 1262560 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190109/20c85cda/attachment-0004.png>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: SmallRangeCloseZerodf20.png
Type: image/png
Size: 1262560 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190109/20c85cda/attachment-0005.png>

From m@echler @ending from @t@t@m@th@ethz@ch  Thu Jan 10 11:07:45 2019
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 10 Jan 2019 11:07:45 +0100
Subject: [Rd] Bug in dt() function in stats - accuracy only 6 dp.
In-Reply-To: <168306009c1.cfa68936250531.4734375789261380744@zoho.com>
References: <168301b928b.e9668824246620.3977017311338014196@zoho.com>
 <168306009c1.cfa68936250531.4734375789261380744@zoho.com>
Message-ID: <23607.6513.948878.283560@stat.math.ethz.ch>

>>>>> mark chappell via R-devel 
>>>>>     on Wed, 9 Jan 2019 13:10:26 +1100 writes:

    > Hi I believe the dt() function in stats has small areas of
    > inaccuracy.



    > SmallRangeMostDetaileddf150.png shows this occurring in
    > the 10-11th decimal place.



    > MyD4 is computed using Myt_NC(), at the bottom of BugL.R -
    > my function is very slow due to using mpfr, but i believe

    > accurate to the accuracy of genhypergeo() which it uses -
    > 14-15 dp.



    > LargeRangeDiffdf150.png, which is difference between dt()
    > and my function, shows spikes across -1.5 < x < 1.5.



    > I assumed probably only a problem for large df, but
    > SmallRangeCloseZerodf20.png, shows actually more of a
    > problem with
    > df = 20.? Accuracy seems to be only to 6 decimal places.

We did not get a single piece of R code.
Maybe you've wanted to attach the 'BugL.R' R script mentioned
above, but failed to use 'text/plain'  MIME encoding?

Note: If this is about using *non*central t-distribution (as the
 above "NC" suggests), then this is *not* a bug per se,
as the help page *does* mention that the acuracy there is reduced.

Still, I have created an R bugzilla account for you to report
there, i.e.,  https://bugs.r-project.org/

Best,
Martin


    > Using R version 3.5.2.

    > Cheers

    > Mark

    > [DELETED ATTACHMENT SmallRangeMostDetaileddf150.png, PNG image]
    > [DELETED ATTACHMENT LargeRangeDiffdf150.png, PNG image]
    > [DELETED ATTACHMENT SmallRangeCloseZerodf20.png, PNG image]


From wdunl@p @ending from tibco@com  Thu Jan 10 17:30:00 2019
From: wdunl@p @ending from tibco@com (William Dunlap)
Date: Thu, 10 Jan 2019 08:30:00 -0800
Subject: [Rd] setClass accepts slot-mismatch between slots and prototype
 arguments
Message-ID: <CAF8bMcbPCvsWx2o3iTHpXGFAT=azDdMZXz7Uiznr_jOZBbyKcw@mail.gmail.com>

I was installing the 'diffobj' package into TERR and got an error from the
call
StyleSummary <- setClass("StyleSummary",
  slots=c(container="ANY", body="ANY", map="ANY"),
  prototype=list(
    container=function(x) sprintf("\n%s\n", paste0(x, collapse="")),
    body=identity,
    detail=function(x) sprintf("\n%s\n", paste0("  ", x, collapse="")),
    map=function(x) sprintf("\n%s", paste0("  ", x, collapse="\n"))
  ))
because the prototype contained components not in the slots list.  R does
not complain about the mismatch, but new("StyleSummary") does name make
something with a 'detail' slot.  Should this be an error?

I suspect that the package writer intended to include 'detail' in the slots
argument.

Bill Dunlap
TIBCO Software
wdunlap tibco.com

	[[alternative HTML version deleted]]


From brodie@g@@l@m @ending from y@hoo@com  Thu Jan 10 17:57:35 2019
From: brodie@g@@l@m @ending from y@hoo@com (brodie gaslam)
Date: Thu, 10 Jan 2019 16:57:35 +0000 (UTC)
Subject: [Rd] setClass accepts slot-mismatch between slots and prototype
 arguments
In-Reply-To: <CAF8bMcbPCvsWx2o3iTHpXGFAT=azDdMZXz7Uiznr_jOZBbyKcw@mail.gmail.com>
References: <CAF8bMcbPCvsWx2o3iTHpXGFAT=azDdMZXz7Uiznr_jOZBbyKcw@mail.gmail.com>
Message-ID: <396016809.9493101.1547139455425@mail.yahoo.com>

Indeed that was on oversight on my part.? It is surprising that things like this work:

> setClass('test', slots=c(a='ANY'), prototype=list(a=NULL, b='hello'))
> new('test')@b
[1] "hello"
> slotNames(new('test'))
[1] "a"

I'm planning a release of diffobj right now so I will fix this, but I agree that R should probably throw an error here.

Best,

B.




On Thursday, January 10, 2019, 11:30:13 AM EST, William Dunlap <wdunlap at tibco.com> wrote: 





I was installing the 'diffobj' package into TERR and got an error from the call
StyleSummary <- setClass("StyleSummary",
? slots=c(container="ANY", body="ANY", map="ANY"),
? prototype=list(
? ? container=function(x) sprintf("\n%s\n", paste0(x, collapse="")),
? ? body=identity,
? ? detail=function(x) sprintf("\n%s\n", paste0("? ", x, collapse="")),
? ? map=function(x) sprintf("\n%s", paste0("? ", x, collapse="\n"))
? ))
because the prototype contained components not in the slots list.? R does not complain about the mismatch, but new("StyleSummary") does name make something with a 'detail' slot.? Should this be an error?

I suspect that the package writer intended to include 'detail' in the slots argument.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


From l@wrence@mich@el @ending from gene@com  Thu Jan 10 20:05:40 2019
From: l@wrence@mich@el @ending from gene@com (Michael Lawrence)
Date: Thu, 10 Jan 2019 11:05:40 -0800
Subject: [Rd] setClass accepts slot-mismatch between slots and prototype
 arguments
In-Reply-To: <CAF8bMcbPCvsWx2o3iTHpXGFAT=azDdMZXz7Uiznr_jOZBbyKcw@mail.gmail.com>
References: <CAF8bMcbPCvsWx2o3iTHpXGFAT=azDdMZXz7Uiznr_jOZBbyKcw@mail.gmail.com>
Message-ID: <CAOQ5NyeE6D29PEBL7ntWk3Pr=v1bZsaGv9FcgC-iGkb-ioZ+PA@mail.gmail.com>

Thanks for the report. There is a comment from 2001 in the header for
reconcilePropertiesAndPrototype() that states:

"The prototype may imply slots not in the properties list.  It is not
required that the extends classes be define at this time.  Should it
be?"

But somewhere in the mid 2000's, I think, it became necessary for the
extends classes to be defined, so it may be safe to add this
constraint.

I'll commit a fix soon. While fixing, I found that the type
consistency check for slots shared with superclasses was completely
broken ever since it was written in 2002.

Michael

On Thu, Jan 10, 2019 at 8:31 AM William Dunlap via R-devel
<r-devel at r-project.org> wrote:
>
> I was installing the 'diffobj' package into TERR and got an error from the
> call
> StyleSummary <- setClass("StyleSummary",
>   slots=c(container="ANY", body="ANY", map="ANY"),
>   prototype=list(
>     container=function(x) sprintf("\n%s\n", paste0(x, collapse="")),
>     body=identity,
>     detail=function(x) sprintf("\n%s\n", paste0("  ", x, collapse="")),
>     map=function(x) sprintf("\n%s", paste0("  ", x, collapse="\n"))
>   ))
> because the prototype contained components not in the slots list.  R does
> not complain about the mismatch, but new("StyleSummary") does name make
> something with a 'detail' slot.  Should this be an error?
>
> I suspect that the package writer intended to include 'detail' in the slots
> argument.
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From mich@elchirico4 @ending from gm@il@com  Fri Jan 11 07:36:17 2019
From: mich@elchirico4 @ending from gm@il@com (Michael Chirico)
Date: Fri, 11 Jan 2019 14:36:17 +0800
Subject: [Rd] strtoi output of empty string inconsistent across platforms
Message-ID: <CAPRVBczEB89pKT6Wk_mYw9mzQfWkyE033Y_haR50QftP5v1Tdw@mail.gmail.com>

Identified as root cause of a bug in data.table:

https://github.com/Rdatatable/data.table/issues/3267

On my machine, strtoi("", base = 2L) produces NA_integer_ (which seems
consistent with ?strtoi: "Values which cannot be interpreted as integers or
would overflow are returned as NA_integer_").

But on all the other machines I've seen, 0L is returned. This seems to be
consistent with the output of a simple C program using the underlying
strtol function (see data.table link for this program, and for full
sessionInfo() of some environments with differing output).

So, what is the correct output of strtoi("", base = 2L)? Is the
cross-platform inconsistency to be expected/documentable?

Michael Chirico

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Fri Jan 11 09:44:14 2019
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 11 Jan 2019 09:44:14 +0100
Subject: [Rd] 
 strtoi output of empty string inconsistent across platforms
In-Reply-To: <CAPRVBczEB89pKT6Wk_mYw9mzQfWkyE033Y_haR50QftP5v1Tdw@mail.gmail.com>
References: <CAPRVBczEB89pKT6Wk_mYw9mzQfWkyE033Y_haR50QftP5v1Tdw@mail.gmail.com>
Message-ID: <23608.22366.748553.97125@stat.math.ethz.ch>

>>>>> Michael Chirico 
>>>>>     on Fri, 11 Jan 2019 14:36:17 +0800 writes:

    > Identified as root cause of a bug in data.table:
    > https://github.com/Rdatatable/data.table/issues/3267

    > On my machine, strtoi("", base = 2L) produces NA_integer_
    > (which seems consistent with ?strtoi: "Values which cannot
    > be interpreted as integers or would overflow are returned
    > as NA_integer_").

indeed consistent with R's documentation on strtoi().
What machine would that be?

    > But on all the other machines I've seen, 0L is
    > returned. This seems to be consistent with the output of a
    > simple C program using the underlying strtol function (see
    > data.table link for this program, and for full
    > sessionInfo() of some environments with differing output).

    > So, what is the correct output of strtoi("", base = 2L)?

    > Is the cross-platform inconsistency to be
    > expected/documentable?

The inconsistency is certainly undesirable.
The relevant utility function in R's source (<R>/src/main/character.c)
is

static int strtoi(SEXP s, int base)
{
    long int res;
    char *endp;

    /* strtol might return extreme values on error */
    errno = 0;

    if(s == NA_STRING) return(NA_INTEGER);
    res = strtol(CHAR(s), &endp, base); /* ASCII */
    if(errno || *endp != '\0') res = NA_INTEGER;
    if(res > INT_MAX || res < INT_MIN) res = NA_INTEGER;
    return (int) res;
}

and so it clearly is a platform-inconsistency in the underlying C
library's strtol().

I think we should make this cross-platform consistent... and
indeed it make much sense to ensure the result of

   strtoi("", base=2L)  to become  NA_integer_

but changes are that would break code that has relied on the
current behavior {on "all but your computer" ;-)}  ?

    > Michael Chirico

Thank you for the report,

Martin Maechler
ETH Zurich and R Core Team


From tom@@@k@liber@ @ending from gm@il@com  Fri Jan 11 12:14:49 2019
From: tom@@@k@liber@ @ending from gm@il@com (Tomas Kalibera)
Date: Fri, 11 Jan 2019 12:14:49 +0100
Subject: [Rd] 
 Inconsistent returned values of normalizePath(NA_character_)
 on Windows and *nix
In-Reply-To: <CANROs4cjRX5aiyp_pzVyeWPKwQNpmhPD6cveAwU6gBR7b4yKTA@mail.gmail.com>
References: <CABtg=KkB-e75kms1vL7XvjdcShwarBP1VLPnT2nb0SEFAJkarg@mail.gmail.com>
 <CANROs4cjRX5aiyp_pzVyeWPKwQNpmhPD6cveAwU6gBR7b4yKTA@mail.gmail.com>
Message-ID: <f0308320-b89d-32ee-699e-c4eb625876e5@gmail.com>

Thanks for the report, fixed in R-devel (one gets NA_character_ as a 
result and the path is treated as non-existent, so with a warning or 
error when requested via mustWork argument).

Best,
Tomas


On 12/7/18 7:10 PM, Yihui Xie wrote:
> Hi,
>
> I just noticed normalizePath(NA_character_) returns NA_character_ on
> *nix but "%HOME%\\NA" on Windows (with a warning by default), where
> %HOME% denotes the HOME folder like "C:\\Users\\John". I'm not sure if
> this is a bug or by design.
>
> Regards,
> Yihui
> --
> https://yihui.name
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@echler @ending from @t@t@m@th@ethz@ch  Fri Jan 11 19:00:12 2019
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 11 Jan 2019 19:00:12 +0100
Subject: [Rd] 
 strtoi output of empty string inconsistent across platforms
In-Reply-To: <23608.22366.748553.97125@stat.math.ethz.ch>
References: <CAPRVBczEB89pKT6Wk_mYw9mzQfWkyE033Y_haR50QftP5v1Tdw@mail.gmail.com>
 <23608.22366.748553.97125@stat.math.ethz.ch>
Message-ID: <23608.55724.928453.416528@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Fri, 11 Jan 2019 09:44:14 +0100 writes:

>>>>> Michael Chirico 
>>>>>     on Fri, 11 Jan 2019 14:36:17 +0800 writes:

    >> Identified as root cause of a bug in data.table:
    >> https://github.com/Rdatatable/data.table/issues/3267

    >> On my machine, strtoi("", base = 2L) produces NA_integer_
    >> (which seems consistent with ?strtoi: "Values which
    >> cannot be interpreted as integers or would overflow are
    >> returned as NA_integer_").

    > indeed consistent with R's documentation on strtoi().
    > What machine would that be?

    >> But on all the other machines I've seen, 0L is
    >> returned. This seems to be consistent with the output of
    >> a simple C program using the underlying strtol function
    >> (see data.table link for this program, and for full
    >> sessionInfo() of some environments with differing
    >> output).

    >> So, what is the correct output of strtoi("", base = 2L)?

    >> Is the cross-platform inconsistency to be
    >> expected/documentable?

    > The inconsistency is certainly undesirable.  The relevant
    > utility function in R's source (<R>/src/main/character.c)
    > is

    > static int strtoi(SEXP s, int base) { long int res; char
    > *endp;

    >     /* strtol might return extreme values on error */
    > errno = 0;

    >     if(s == NA_STRING) return(NA_INTEGER); res =
    > strtol(CHAR(s), &endp, base); /* ASCII */ if(errno ||
    > *endp != '\0') res = NA_INTEGER; if(res > INT_MAX || res <
    > INT_MIN) res = NA_INTEGER; return (int) res; }

    > and so it clearly is a platform-inconsistency in the
    > underlying C library's strtol().

(corrected typos here: )

    > I think we should make this cross-platform consistent ... 
    > and indeed it makes much sense to ensure the result of

    >     strtoi("", base=2L)    to become   NA_integer_

    > but chances are that would break code that has relied on
    > the current behavior {on "all but your computer" ;-)} ?

I still think that such a change should be done.

'make check all' on the R source (+ Recommended packages) seems
not to signal any error or warning with such a change, so I plan
to commit that change to "the trunk" / "R-devel" soon, unless
concerns are raised highly (and quickly enough).

Martin


From mich@elchirico4 @ending from gm@il@com  Sat Jan 12 10:34:03 2019
From: mich@elchirico4 @ending from gm@il@com (Michael Chirico)
Date: Sat, 12 Jan 2019 17:34:03 +0800
Subject: [Rd] 
 strtoi output of empty string inconsistent across platforms
In-Reply-To: <23608.55724.928453.416528@stat.math.ethz.ch>
References: <CAPRVBczEB89pKT6Wk_mYw9mzQfWkyE033Y_haR50QftP5v1Tdw@mail.gmail.com>
 <23608.22366.748553.97125@stat.math.ethz.ch>
 <23608.55724.928453.416528@stat.math.ethz.ch>
Message-ID: <CAPRVBcyZKREJNVidF6jJOq+eeko1Rh3-6F8GzCei1+QTwYO4kg@mail.gmail.com>

Thanks Martin.

For what it's worth, this extremely representative, highly scientific
Twitter poll suggests the Mac/Linux split is pretty stark (NA on Mac, 0 on
Linux)

https://twitter.com/michael_chirico/status/1083649190117306369?s=17

On Sat, Jan 12, 2019, 2:00 AM Martin Maechler <maechler at stat.math.ethz.ch
wrote:

> >>>>> Martin Maechler
> >>>>>     on Fri, 11 Jan 2019 09:44:14 +0100 writes:
>
> >>>>> Michael Chirico
> >>>>>     on Fri, 11 Jan 2019 14:36:17 +0800 writes:
>
>     >> Identified as root cause of a bug in data.table:
>     >> https://github.com/Rdatatable/data.table/issues/3267
>
>     >> On my machine, strtoi("", base = 2L) produces NA_integer_
>     >> (which seems consistent with ?strtoi: "Values which
>     >> cannot be interpreted as integers or would overflow are
>     >> returned as NA_integer_").
>
>     > indeed consistent with R's documentation on strtoi().
>     > What machine would that be?
>
>     >> But on all the other machines I've seen, 0L is
>     >> returned. This seems to be consistent with the output of
>     >> a simple C program using the underlying strtol function
>     >> (see data.table link for this program, and for full
>     >> sessionInfo() of some environments with differing
>     >> output).
>
>     >> So, what is the correct output of strtoi("", base = 2L)?
>
>     >> Is the cross-platform inconsistency to be
>     >> expected/documentable?
>
>     > The inconsistency is certainly undesirable.  The relevant
>     > utility function in R's source (<R>/src/main/character.c)
>     > is
>
>     > static int strtoi(SEXP s, int base) { long int res; char
>     > *endp;
>
>     >     /* strtol might return extreme values on error */
>     > errno = 0;
>
>     >     if(s == NA_STRING) return(NA_INTEGER); res =
>     > strtol(CHAR(s), &endp, base); /* ASCII */ if(errno ||
>     > *endp != '\0') res = NA_INTEGER; if(res > INT_MAX || res <
>     > INT_MIN) res = NA_INTEGER; return (int) res; }
>
>     > and so it clearly is a platform-inconsistency in the
>     > underlying C library's strtol().
>
> (corrected typos here: )
>
>     > I think we should make this cross-platform consistent ...
>     > and indeed it makes much sense to ensure the result of
>
>     >     strtoi("", base=2L)    to become   NA_integer_
>
>     > but chances are that would break code that has relied on
>     > the current behavior {on "all but your computer" ;-)} ?
>
> I still think that such a change should be done.
>
> 'make check all' on the R source (+ Recommended packages) seems
> not to signal any error or warning with such a change, so I plan
> to commit that change to "the trunk" / "R-devel" soon, unless
> concerns are raised highly (and quickly enough).
>
> Martin
>

	[[alternative HTML version deleted]]


From m@echler @ending from @t@t@m@th@ethz@ch  Sat Jan 12 15:49:02 2019
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 12 Jan 2019 15:49:02 +0100
Subject: [Rd] 
 strtoi output of empty string inconsistent across platforms
In-Reply-To: <CAPRVBcyZKREJNVidF6jJOq+eeko1Rh3-6F8GzCei1+QTwYO4kg@mail.gmail.com>
References: <CAPRVBczEB89pKT6Wk_mYw9mzQfWkyE033Y_haR50QftP5v1Tdw@mail.gmail.com>
 <23608.22366.748553.97125@stat.math.ethz.ch>
 <23608.55724.928453.416528@stat.math.ethz.ch>
 <CAPRVBcyZKREJNVidF6jJOq+eeko1Rh3-6F8GzCei1+QTwYO4kg@mail.gmail.com>
Message-ID: <23609.65118.436080.899377@stat.math.ethz.ch>

>>>>> Michael Chirico 
>>>>>     on Sat, 12 Jan 2019 17:34:03 +0800 writes:

    > Thanks Martin.  For what it's worth, this extremely
    > representative, highly scientific Twitter poll suggests
    > the Mac/Linux split is pretty stark (NA on Mac, 0 on
    > Linux)

    > https://twitter.com/michael_chirico/status/1083649190117306369?s=17

    > On Sat, Jan 12, 2019, 2:00 AM Martin Maechler
    > <maechler at stat.math.ethz.ch wrote:

    >> >>>>> Martin Maechler >>>>> on Fri, 11 Jan 2019 09:44:14
    >> +0100 writes:
    >> 
    >> >>>>> Michael Chirico >>>>> on Fri, 11 Jan 2019 14:36:17
    >> +0800 writes:
    >> 
    >> >> Identified as root cause of a bug in data.table: >>
    >> https://github.com/Rdatatable/data.table/issues/3267
    >> 
    >> >> On my machine, strtoi("", base = 2L) produces
    >> NA_integer_ >> (which seems consistent with ?strtoi:
    >> "Values which >> cannot be interpreted as integers or
    >> would overflow are >> returned as NA_integer_").
    >> 
    >> > indeed consistent with R's documentation on strtoi().
    >> > What machine would that be?
    >> 
    >> >> But on all the other machines I've seen, 0L is >>
    >> returned. This seems to be consistent with the output of
    >> >> a simple C program using the underlying strtol
    >> function >> (see data.table link for this program, and
    >> for full >> sessionInfo() of some environments with
    >> differing >> output).
    >> 
    >> >> So, what is the correct output of strtoi("", base =
    >> 2L)?
    >> 
    >> >> Is the cross-platform inconsistency to be >>
    >> expected/documentable?
    >> 
    >> > The inconsistency is certainly undesirable.  The
    >> relevant > utility function in R's source
    >> (<R>/src/main/character.c) > is
    >> 
    >> > static int strtoi(SEXP s, int base) { long int res;
    >> char > *endp;
    >> 
    >> > /* strtol might return extreme values on error */ >
    >> errno = 0;
    >> 
    >> > if(s == NA_STRING) return(NA_INTEGER); res = >
    >> strtol(CHAR(s), &endp, base); /* ASCII */ if(errno || >
    >> *endp != '\0') res = NA_INTEGER; if(res > INT_MAX || res
    >> < > INT_MIN) res = NA_INTEGER; return (int) res; }
    >> 
    >> > and so it clearly is a platform-inconsistency in the >
    >> underlying C library's strtol().
    >> 
    >> (corrected typos here: )
    >> 
    >> > I think we should make this cross-platform consistent
    >> ...  > and indeed it makes much sense to ensure the
    >> result of
    >> 
    >> > strtoi("", base=2L) to become NA_integer_
    >> 
    >> > but chances are that would break code that has relied
    >> on > the current behavior {on "all but your computer"
    >> ;-)} ?
    >> 
    >> I still think that such a change should be done.
    >> 
    >> 'make check all' on the R source (+ Recommended packages)
    >> seems not to signal any error or warning with such a
    >> change, so I plan to commit that change to "the trunk" /
    >> "R-devel" soon, unless concerns are raised highly (and
    >> quickly enough).

I've now committed  svn rev 75977  to R-devel  which does change
strtoi("", <base>)  to return NA_integer_   (for all <base>)
platform independently, not even calling lib C's strtol() in
that case.

Martin


From m@cl@ch @ending from gwu@edu  Sat Jan 12 18:25:19 2019
From: m@cl@ch @ending from gwu@edu (Glen MacLachlan)
Date: Sat, 12 Jan 2019 12:25:19 -0500
Subject: [Rd] Error: corrupted double-linked list
Message-ID: <CAL1KGHFc1Q+sZ3b7UBy9aRd1zJ0Oo7J-pt6LhOfHr7MyobTwaA@mail.gmail.com>

Hello,

Not sure if this is the right list of if this is a gdal/sf issue so I
apologize but recently I've been seeing errors that crash R/3.5.1 and throw
a double-linked list error (see below). Has anyone else come across this
issue and if so is there a fix?



> rwhole <- st_transform(rwhole,st_crs(ele.map))
*** Error in `/usr/local/lib64/R/bin/exec/R': corrupted double-linked list:
0x0000000082787a00 ***
======= Backtrace: =========
/lib64/libc.so.6(+0x80aef)[0x7f774ceceaef]
/lib64/libc.so.6(+0x8137e)[0x7f774cecf37e]
/usr/local/lib/libproj.so.13(pj_dealloc+0xe)[0x7f773f13ddee]
/usr/local/lib/libgdal.so.20(_ZN10OGRProj4CTD1Ev+0x77)[0x7f773f75a2f7]
/usr/local/lib/libgdal.so.20(_ZN10OGRProj4CTD0Ev+0x9)[0x7f773f75a3f9]
/usr/local/lib64/R
/library/sf/libs/sf.so(_Z13CPL_transformN4Rcpp6VectorILi19ENS_15PreserveStorageEEENS0_ILi16ES1_EE+0x1e2)[0x7f7738566582]
/usr/local/lib64/R
/library/sf/libs/sf.so(_sf_CPL_transform+0x72)[0x7f7738556472]
/usr/local/lib64/R/lib/libR.so(+0xf58ed)[0x7f774d97f8ed]
/usr/local/lib64/R/lib/libR.so(+0x131b36)[0x7f774d9bbb36]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
/usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
/usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
/usr/local/lib64/R/lib/libR.so(+0x1416c6)[0x7f774d9cb6c6]
/usr/local/lib64/R/lib/libR.so(+0x13d89c)[0x7f774d9c789c]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
/usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
/usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
/usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
/usr/local/lib64/R/lib/libR.so(+0x17f7b4)[0x7f774da097b4]
/usr/local/lib64/R/lib/libR.so(+0x17fba7)[0x7f774da09ba7]
/usr/local/lib64/R/lib/libR.so(+0x17ff93)[0x7f774da09f93]
/usr/local/lib64/R/lib/libR.so(+0x130109)[0x7f774d9ba109]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
/usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
/usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
/usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
/usr/local/lib64/R/lib/libR.so(+0x17f7b4)[0x7f774da097b4]
/usr/local/lib64/R/lib/libR.so(+0x17fc28)[0x7f774da09c28]
/usr/local/lib64/R/lib/libR.so(+0x17ff93)[0x7f774da09f93]
/usr/local/lib64/R/lib/libR.so(+0x130109)[0x7f774d9ba109]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
/usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x2fc)[0x7f774d9caf2c]
/usr/local/lib64/R/lib/libR.so(+0x144e76)[0x7f774d9cee76]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x55d)[0x7f774d9cb18d]
/usr/local/lib64/R/lib/libR.so(+0x14655b)[0x7f774d9d055b]
/usr/local/lib64/R/lib/libR.so(+0x131b36)[0x7f774d9bbb36]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
/usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
/usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
/usr/local/lib64/R/lib/libR.so(+0x1416c6)[0x7f774d9cb6c6]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x800)[0x7f774d9cb430]
/usr/local/lib64/R/lib/libR.so(+0x146841)[0x7f774d9d0841]
/usr/local/lib64/R/lib/libR.so(+0x17d7f9)[0x7f774da077f9]
/usr/local/lib64/R/lib/libR.so(+0x130109)[0x7f774d9ba109]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
/usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
/usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
/usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
/usr/local/lib64/R/lib/libR.so(Rf_eval+0x2fc)[0x7f774d9caf2c]
/usr/local/lib64/R/lib/libR.so(Rf_ReplIteration+0x232)[0x7f774d9fada2]
/usr/local/lib64/R/lib/libR.so(+0x171191)[0x7f774d9fb191]
/usr/local/lib64/R/lib/libR.so(run_Rmainloop+0x4f)[0x7f774d9fb22f]
/usr/local/lib64/R/bin/exec/R(main+0x1b)[0x40075b]
/lib64/libc.so.6(__libc_start_main+0xf5)[0x7f774ce70445]
/usr/local/lib64/R/bin/exec/R[0x40078b]
======= Memory map: ========
00400000-00401000 r-xp 00000000 07:01 70665
/usr/local/lib64/R/bin/exec/R
00600000-00601000 r--p 00000000 07:01 70665
/usr/local/lib64/R/bin/exec/R
00601000-00602000 rw-p 00001000 07:01 70665
/usr/local/lib64/R/bin/exec/R
019c6000-a7898000 rw-p 00000000 00:00 0
[heap]
7f7738530000-7f77385ae000 r-xp 00000000 07:01 68
 /usr/local/lib64/R/library/sf/libs/sf.so
7f77385ae000-7f77387ad000 ---p 0007e000 07:01 68
 /usr/local/lib64/R/library/sf/libs/sf.so
7f77387ad000-7f77387af000 r--p 0007d000 07:01 68
 /usr/local/lib64/R/library/sf/libs/sf.so
7f77387af000-7f77387b1000 rw-p 0007f000 07:01 68
 /usr/local/lib64/R/library/sf/libs/sf.so
7f77387b1000-7f77387b3000 rw-p 00000000 00:00 0
7f77387b3000-7f77387cd000 r-xp 00000000 07:01 139267
 /usr/local/lib/libudunits2.so.0.1.0
7f77387cd000-7f77389cc000 ---p 0001a000 07:01 139267
 /usr/local/lib/libudunits2.so.0.1.0
7f77389cc000-7f77389cd000 r--p 00019000 07:01 139267
 /usr/local/lib/libudunits2.so.0.1.0
7f77389cd000-7f77389ce000 rw-p 0001a000 07:01 139267
 /usr/local/lib/libudunits2.so.0.1.0
7f77389ce000-7f77389e7000 r-xp 00000000 07:01 115212
 /usr/local/lib64/R/library/units/libs/units.so
7f77389e7000-7f7738be7000 ---p 00019000 07:01 115212
 /usr/local/lib64/R/library/units/libs/units.so
7f7738be7000-7f7738be8000 r--p 00019000 07:01 115212
 /usr/local/lib64/R/library/units/libs/units.so
7f7738be8000-7f7738be9000 rw-p 0001a000 07:01 115212
 /usr/local/lib64/R/library/units/libs/units.so
7f7738be9000-7f7738bfd000 r-xp 00000000 07:01 204
/usr/local/lib64/R/library/tools/libs/tools.so
7f7738bfd000-7f7738dfd000 ---p 00014000 07:01 204
/usr/local/lib64/R/library/tools/libs/tools.so
7f7738dfd000-7f7738dfe000 r--p 00014000 07:01 204
/usr/local/lib64/R/library/tools/libs/tools.so
7f7738dfe000-7f7738dff000 rw-p 00015000 07:01 204
/usr/local/lib64/R/library/tools/libs/tools.so
7f7738dff000-7f7738e00000 r-xp 00000000 07:01 107834
 /usr/local/lib64/R/library/classInt/libs/classInt.so
7f7738e00000-7f7738fff000 ---p 00001000 07:01 107834
 /usr/local/lib64/R/library/classInt/libs/classInt.so
7f7738fff000-7f7739000000 r--p 00000000 07:01 107834
 /usr/local/lib64/R/library/classInt/libs/classInt.so
7f7739000000-7f7739001000 rw-p 00001000 07:01 107834
 /usr/local/lib64/R/library/classInt/libs/classInt.so
7f7739001000-7f7739013000 r-xp 00000000 07:01 106999
 /usr/local/lib64/R/library/e1071/libs/e1071.so
7f7739013000-7f7739213000 ---p 00012000 07:01 106999
 /usr/local/lib64/R/library/e1071/libs/e1071.so
7f7739213000-7f7739214000 r--p 00012000 07:01 106999
 /usr/local/lib64/R/library/e1071/libs/e1071.so
7f7739214000-7f7739215000 rw-p 00013000 07:01 106999
 /usr/local/lib64/R/library/e1071/libs/e1071.so
7f7739215000-7f7739218000 r-xp 00000000 07:01 106908
 /usr/local/lib64/R/library/class/libs/class.soAborted (core dumped)

Best,
Glen

==========================================
Glen MacLachlan, PhD
*Senior High Performance Computing Specialist  *

*Adjunct Faculty, Data Sciences*

Office of Technology Services
The George Washington University
Washington, DC 20052

==========================================

	[[alternative HTML version deleted]]


From iuc@r @ending from fedor@project@org  Mon Jan 14 15:32:08 2019
From: iuc@r @ending from fedor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Mon, 14 Jan 2019 15:32:08 +0100
Subject: [Rd] Error: corrupted double-linked list
In-Reply-To: <CAL1KGHFc1Q+sZ3b7UBy9aRd1zJ0Oo7J-pt6LhOfHr7MyobTwaA@mail.gmail.com>
References: <CAL1KGHFc1Q+sZ3b7UBy9aRd1zJ0Oo7J-pt6LhOfHr7MyobTwaA@mail.gmail.com>
Message-ID: <CALEXWq1ntQ436WQ1LN89+X2w1e6Mh46HN9snP6NVMv32Q3ogMQ@mail.gmail.com>

On Mon, 14 Jan 2019 at 10:58, Glen MacLachlan <maclach at gwu.edu> wrote:
>
> Hello,
>
> Not sure if this is the right list of if this is a gdal/sf issue so I
> apologize but recently I've been seeing errors that crash R/3.5.1 and throw
> a double-linked list error (see below). Has anyone else come across this
> issue and if so is there a fix?

R-sig-geo is probably a better place for this. Also, a reproducible
example and/or the output from valgrind would be helpful.

I?aki

>
>
>
> > rwhole <- st_transform(rwhole,st_crs(ele.map))
> *** Error in `/usr/local/lib64/R/bin/exec/R': corrupted double-linked list:
> 0x0000000082787a00 ***
> ======= Backtrace: =========
> /lib64/libc.so.6(+0x80aef)[0x7f774ceceaef]
> /lib64/libc.so.6(+0x8137e)[0x7f774cecf37e]
> /usr/local/lib/libproj.so.13(pj_dealloc+0xe)[0x7f773f13ddee]
> /usr/local/lib/libgdal.so.20(_ZN10OGRProj4CTD1Ev+0x77)[0x7f773f75a2f7]
> /usr/local/lib/libgdal.so.20(_ZN10OGRProj4CTD0Ev+0x9)[0x7f773f75a3f9]
> /usr/local/lib64/R
> /library/sf/libs/sf.so(_Z13CPL_transformN4Rcpp6VectorILi19ENS_15PreserveStorageEEENS0_ILi16ES1_EE+0x1e2)[0x7f7738566582]
> /usr/local/lib64/R
> /library/sf/libs/sf.so(_sf_CPL_transform+0x72)[0x7f7738556472]
> /usr/local/lib64/R/lib/libR.so(+0xf58ed)[0x7f774d97f8ed]
> /usr/local/lib64/R/lib/libR.so(+0x131b36)[0x7f774d9bbb36]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> /usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> /usr/local/lib64/R/lib/libR.so(+0x1416c6)[0x7f774d9cb6c6]
> /usr/local/lib64/R/lib/libR.so(+0x13d89c)[0x7f774d9c789c]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> /usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> /usr/local/lib64/R/lib/libR.so(+0x17f7b4)[0x7f774da097b4]
> /usr/local/lib64/R/lib/libR.so(+0x17fba7)[0x7f774da09ba7]
> /usr/local/lib64/R/lib/libR.so(+0x17ff93)[0x7f774da09f93]
> /usr/local/lib64/R/lib/libR.so(+0x130109)[0x7f774d9ba109]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> /usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> /usr/local/lib64/R/lib/libR.so(+0x17f7b4)[0x7f774da097b4]
> /usr/local/lib64/R/lib/libR.so(+0x17fc28)[0x7f774da09c28]
> /usr/local/lib64/R/lib/libR.so(+0x17ff93)[0x7f774da09f93]
> /usr/local/lib64/R/lib/libR.so(+0x130109)[0x7f774d9ba109]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x2fc)[0x7f774d9caf2c]
> /usr/local/lib64/R/lib/libR.so(+0x144e76)[0x7f774d9cee76]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x55d)[0x7f774d9cb18d]
> /usr/local/lib64/R/lib/libR.so(+0x14655b)[0x7f774d9d055b]
> /usr/local/lib64/R/lib/libR.so(+0x131b36)[0x7f774d9bbb36]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> /usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> /usr/local/lib64/R/lib/libR.so(+0x1416c6)[0x7f774d9cb6c6]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x800)[0x7f774d9cb430]
> /usr/local/lib64/R/lib/libR.so(+0x146841)[0x7f774d9d0841]
> /usr/local/lib64/R/lib/libR.so(+0x17d7f9)[0x7f774da077f9]
> /usr/local/lib64/R/lib/libR.so(+0x130109)[0x7f774d9ba109]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> /usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> /usr/local/lib64/R/lib/libR.so(Rf_eval+0x2fc)[0x7f774d9caf2c]
> /usr/local/lib64/R/lib/libR.so(Rf_ReplIteration+0x232)[0x7f774d9fada2]
> /usr/local/lib64/R/lib/libR.so(+0x171191)[0x7f774d9fb191]
> /usr/local/lib64/R/lib/libR.so(run_Rmainloop+0x4f)[0x7f774d9fb22f]
> /usr/local/lib64/R/bin/exec/R(main+0x1b)[0x40075b]
> /lib64/libc.so.6(__libc_start_main+0xf5)[0x7f774ce70445]
> /usr/local/lib64/R/bin/exec/R[0x40078b]
> ======= Memory map: ========
> 00400000-00401000 r-xp 00000000 07:01 70665
> /usr/local/lib64/R/bin/exec/R
> 00600000-00601000 r--p 00000000 07:01 70665
> /usr/local/lib64/R/bin/exec/R
> 00601000-00602000 rw-p 00001000 07:01 70665
> /usr/local/lib64/R/bin/exec/R
> 019c6000-a7898000 rw-p 00000000 00:00 0
> [heap]
> 7f7738530000-7f77385ae000 r-xp 00000000 07:01 68
>  /usr/local/lib64/R/library/sf/libs/sf.so
> 7f77385ae000-7f77387ad000 ---p 0007e000 07:01 68
>  /usr/local/lib64/R/library/sf/libs/sf.so
> 7f77387ad000-7f77387af000 r--p 0007d000 07:01 68
>  /usr/local/lib64/R/library/sf/libs/sf.so
> 7f77387af000-7f77387b1000 rw-p 0007f000 07:01 68
>  /usr/local/lib64/R/library/sf/libs/sf.so
> 7f77387b1000-7f77387b3000 rw-p 00000000 00:00 0
> 7f77387b3000-7f77387cd000 r-xp 00000000 07:01 139267
>  /usr/local/lib/libudunits2.so.0.1.0
> 7f77387cd000-7f77389cc000 ---p 0001a000 07:01 139267
>  /usr/local/lib/libudunits2.so.0.1.0
> 7f77389cc000-7f77389cd000 r--p 00019000 07:01 139267
>  /usr/local/lib/libudunits2.so.0.1.0
> 7f77389cd000-7f77389ce000 rw-p 0001a000 07:01 139267
>  /usr/local/lib/libudunits2.so.0.1.0
> 7f77389ce000-7f77389e7000 r-xp 00000000 07:01 115212
>  /usr/local/lib64/R/library/units/libs/units.so
> 7f77389e7000-7f7738be7000 ---p 00019000 07:01 115212
>  /usr/local/lib64/R/library/units/libs/units.so
> 7f7738be7000-7f7738be8000 r--p 00019000 07:01 115212
>  /usr/local/lib64/R/library/units/libs/units.so
> 7f7738be8000-7f7738be9000 rw-p 0001a000 07:01 115212
>  /usr/local/lib64/R/library/units/libs/units.so
> 7f7738be9000-7f7738bfd000 r-xp 00000000 07:01 204
> /usr/local/lib64/R/library/tools/libs/tools.so
> 7f7738bfd000-7f7738dfd000 ---p 00014000 07:01 204
> /usr/local/lib64/R/library/tools/libs/tools.so
> 7f7738dfd000-7f7738dfe000 r--p 00014000 07:01 204
> /usr/local/lib64/R/library/tools/libs/tools.so
> 7f7738dfe000-7f7738dff000 rw-p 00015000 07:01 204
> /usr/local/lib64/R/library/tools/libs/tools.so
> 7f7738dff000-7f7738e00000 r-xp 00000000 07:01 107834
>  /usr/local/lib64/R/library/classInt/libs/classInt.so
> 7f7738e00000-7f7738fff000 ---p 00001000 07:01 107834
>  /usr/local/lib64/R/library/classInt/libs/classInt.so
> 7f7738fff000-7f7739000000 r--p 00000000 07:01 107834
>  /usr/local/lib64/R/library/classInt/libs/classInt.so
> 7f7739000000-7f7739001000 rw-p 00001000 07:01 107834
>  /usr/local/lib64/R/library/classInt/libs/classInt.so
> 7f7739001000-7f7739013000 r-xp 00000000 07:01 106999
>  /usr/local/lib64/R/library/e1071/libs/e1071.so
> 7f7739013000-7f7739213000 ---p 00012000 07:01 106999
>  /usr/local/lib64/R/library/e1071/libs/e1071.so
> 7f7739213000-7f7739214000 r--p 00012000 07:01 106999
>  /usr/local/lib64/R/library/e1071/libs/e1071.so
> 7f7739214000-7f7739215000 rw-p 00013000 07:01 106999
>  /usr/local/lib64/R/library/e1071/libs/e1071.so
> 7f7739215000-7f7739218000 r-xp 00000000 07:01 106908
>  /usr/local/lib64/R/library/class/libs/class.soAborted (core dumped)
>
> Best,
> Glen
>
> ==========================================
> Glen MacLachlan, PhD
> *Senior High Performance Computing Specialist  *
>
> *Adjunct Faculty, Data Sciences*
>
> Office of Technology Services
> The George Washington University
> Washington, DC 20052
>
> ==========================================
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
I?aki ?car


From m@c|@ch @end|ng |rom gwu@edu  Mon Jan 14 17:55:03 2019
From: m@c|@ch @end|ng |rom gwu@edu (Glen MacLachlan)
Date: Mon, 14 Jan 2019 11:55:03 -0500
Subject: [Rd] Error: corrupted double-linked list
In-Reply-To: <CALEXWq1ntQ436WQ1LN89+X2w1e6Mh46HN9snP6NVMv32Q3ogMQ@mail.gmail.com>
References: <CAL1KGHFc1Q+sZ3b7UBy9aRd1zJ0Oo7J-pt6LhOfHr7MyobTwaA@mail.gmail.com>
 <CALEXWq1ntQ436WQ1LN89+X2w1e6Mh46HN9snP6NVMv32Q3ogMQ@mail.gmail.com>
Message-ID: <CAL1KGHGCdm=Bw-60UJP4kFZc4bdcNpYqy1LUVD+-xgQF_OGYpA@mail.gmail.com>

Of course! Thanks for the suggestion regarding valgrind.

Best,
Glen

==========================================
Glen MacLachlan, PhD
*Senior High Performance Computing Specialist  *

*Adjunct Faculty, Data Sciences*

Office of Technology Services
The George Washington University
Washington, DC 20052

==========================================






On Mon, Jan 14, 2019 at 9:32 AM I?aki Ucar <iucar at fedoraproject.org> wrote:

> On Mon, 14 Jan 2019 at 10:58, Glen MacLachlan <maclach at gwu.edu> wrote:
> >
> > Hello,
> >
> > Not sure if this is the right list of if this is a gdal/sf issue so I
> > apologize but recently I've been seeing errors that crash R/3.5.1 and
> throw
> > a double-linked list error (see below). Has anyone else come across this
> > issue and if so is there a fix?
>
> R-sig-geo is probably a better place for this. Also, a reproducible
> example and/or the output from valgrind would be helpful.
>
> I?aki
>
> >
> >
> >
> > > rwhole <- st_transform(rwhole,st_crs(ele.map))
> > *** Error in `/usr/local/lib64/R/bin/exec/R': corrupted double-linked
> list:
> > 0x0000000082787a00 ***
> > ======= Backtrace: =========
> > /lib64/libc.so.6(+0x80aef)[0x7f774ceceaef]
> > /lib64/libc.so.6(+0x8137e)[0x7f774cecf37e]
> > /usr/local/lib/libproj.so.13(pj_dealloc+0xe)[0x7f773f13ddee]
> > /usr/local/lib/libgdal.so.20(_ZN10OGRProj4CTD1Ev+0x77)[0x7f773f75a2f7]
> > /usr/local/lib/libgdal.so.20(_ZN10OGRProj4CTD0Ev+0x9)[0x7f773f75a3f9]
> > /usr/local/lib64/R
> >
> /library/sf/libs/sf.so(_Z13CPL_transformN4Rcpp6VectorILi19ENS_15PreserveStorageEEENS0_ILi16ES1_EE+0x1e2)[0x7f7738566582]
> > /usr/local/lib64/R
> > /library/sf/libs/sf.so(_sf_CPL_transform+0x72)[0x7f7738556472]
> > /usr/local/lib64/R/lib/libR.so(+0xf58ed)[0x7f774d97f8ed]
> > /usr/local/lib64/R/lib/libR.so(+0x131b36)[0x7f774d9bbb36]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> > /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> > /usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> > /usr/local/lib64/R/lib/libR.so(+0x1416c6)[0x7f774d9cb6c6]
> > /usr/local/lib64/R/lib/libR.so(+0x13d89c)[0x7f774d9c789c]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> > /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> > /usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> > /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> > /usr/local/lib64/R/lib/libR.so(+0x17f7b4)[0x7f774da097b4]
> > /usr/local/lib64/R/lib/libR.so(+0x17fba7)[0x7f774da09ba7]
> > /usr/local/lib64/R/lib/libR.so(+0x17ff93)[0x7f774da09f93]
> > /usr/local/lib64/R/lib/libR.so(+0x130109)[0x7f774d9ba109]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> > /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> > /usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> > /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> > /usr/local/lib64/R/lib/libR.so(+0x17f7b4)[0x7f774da097b4]
> > /usr/local/lib64/R/lib/libR.so(+0x17fc28)[0x7f774da09c28]
> > /usr/local/lib64/R/lib/libR.so(+0x17ff93)[0x7f774da09f93]
> > /usr/local/lib64/R/lib/libR.so(+0x130109)[0x7f774d9ba109]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> > /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x2fc)[0x7f774d9caf2c]
> > /usr/local/lib64/R/lib/libR.so(+0x144e76)[0x7f774d9cee76]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x55d)[0x7f774d9cb18d]
> > /usr/local/lib64/R/lib/libR.so(+0x14655b)[0x7f774d9d055b]
> > /usr/local/lib64/R/lib/libR.so(+0x131b36)[0x7f774d9bbb36]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> > /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> > /usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> > /usr/local/lib64/R/lib/libR.so(+0x1416c6)[0x7f774d9cb6c6]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x800)[0x7f774d9cb430]
> > /usr/local/lib64/R/lib/libR.so(+0x146841)[0x7f774d9d0841]
> > /usr/local/lib64/R/lib/libR.so(+0x17d7f9)[0x7f774da077f9]
> > /usr/local/lib64/R/lib/libR.so(+0x130109)[0x7f774d9ba109]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> > /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> > /usr/local/lib64/R/lib/libR.so(+0x136e17)[0x7f774d9c0e17]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x348)[0x7f774d9caf78]
> > /usr/local/lib64/R/lib/libR.so(+0x14256b)[0x7f774d9cc56b]
> > /usr/local/lib64/R/lib/libR.so(Rf_eval+0x2fc)[0x7f774d9caf2c]
> > /usr/local/lib64/R/lib/libR.so(Rf_ReplIteration+0x232)[0x7f774d9fada2]
> > /usr/local/lib64/R/lib/libR.so(+0x171191)[0x7f774d9fb191]
> > /usr/local/lib64/R/lib/libR.so(run_Rmainloop+0x4f)[0x7f774d9fb22f]
> > /usr/local/lib64/R/bin/exec/R(main+0x1b)[0x40075b]
> > /lib64/libc.so.6(__libc_start_main+0xf5)[0x7f774ce70445]
> > /usr/local/lib64/R/bin/exec/R[0x40078b]
> > ======= Memory map: ========
> > 00400000-00401000 r-xp 00000000 07:01 70665
> > /usr/local/lib64/R/bin/exec/R
> > 00600000-00601000 r--p 00000000 07:01 70665
> > /usr/local/lib64/R/bin/exec/R
> > 00601000-00602000 rw-p 00001000 07:01 70665
> > /usr/local/lib64/R/bin/exec/R
> > 019c6000-a7898000 rw-p 00000000 00:00 0
> > [heap]
> > 7f7738530000-7f77385ae000 r-xp 00000000 07:01 68
> >  /usr/local/lib64/R/library/sf/libs/sf.so
> > 7f77385ae000-7f77387ad000 ---p 0007e000 07:01 68
> >  /usr/local/lib64/R/library/sf/libs/sf.so
> > 7f77387ad000-7f77387af000 r--p 0007d000 07:01 68
> >  /usr/local/lib64/R/library/sf/libs/sf.so
> > 7f77387af000-7f77387b1000 rw-p 0007f000 07:01 68
> >  /usr/local/lib64/R/library/sf/libs/sf.so
> > 7f77387b1000-7f77387b3000 rw-p 00000000 00:00 0
> > 7f77387b3000-7f77387cd000 r-xp 00000000 07:01 139267
> >  /usr/local/lib/libudunits2.so.0.1.0
> > 7f77387cd000-7f77389cc000 ---p 0001a000 07:01 139267
> >  /usr/local/lib/libudunits2.so.0.1.0
> > 7f77389cc000-7f77389cd000 r--p 00019000 07:01 139267
> >  /usr/local/lib/libudunits2.so.0.1.0
> > 7f77389cd000-7f77389ce000 rw-p 0001a000 07:01 139267
> >  /usr/local/lib/libudunits2.so.0.1.0
> > 7f77389ce000-7f77389e7000 r-xp 00000000 07:01 115212
> >  /usr/local/lib64/R/library/units/libs/units.so
> > 7f77389e7000-7f7738be7000 ---p 00019000 07:01 115212
> >  /usr/local/lib64/R/library/units/libs/units.so
> > 7f7738be7000-7f7738be8000 r--p 00019000 07:01 115212
> >  /usr/local/lib64/R/library/units/libs/units.so
> > 7f7738be8000-7f7738be9000 rw-p 0001a000 07:01 115212
> >  /usr/local/lib64/R/library/units/libs/units.so
> > 7f7738be9000-7f7738bfd000 r-xp 00000000 07:01 204
> > /usr/local/lib64/R/library/tools/libs/tools.so
> > 7f7738bfd000-7f7738dfd000 ---p 00014000 07:01 204
> > /usr/local/lib64/R/library/tools/libs/tools.so
> > 7f7738dfd000-7f7738dfe000 r--p 00014000 07:01 204
> > /usr/local/lib64/R/library/tools/libs/tools.so
> > 7f7738dfe000-7f7738dff000 rw-p 00015000 07:01 204
> > /usr/local/lib64/R/library/tools/libs/tools.so
> > 7f7738dff000-7f7738e00000 r-xp 00000000 07:01 107834
> >  /usr/local/lib64/R/library/classInt/libs/classInt.so
> > 7f7738e00000-7f7738fff000 ---p 00001000 07:01 107834
> >  /usr/local/lib64/R/library/classInt/libs/classInt.so
> > 7f7738fff000-7f7739000000 r--p 00000000 07:01 107834
> >  /usr/local/lib64/R/library/classInt/libs/classInt.so
> > 7f7739000000-7f7739001000 rw-p 00001000 07:01 107834
> >  /usr/local/lib64/R/library/classInt/libs/classInt.so
> > 7f7739001000-7f7739013000 r-xp 00000000 07:01 106999
> >  /usr/local/lib64/R/library/e1071/libs/e1071.so
> > 7f7739013000-7f7739213000 ---p 00012000 07:01 106999
> >  /usr/local/lib64/R/library/e1071/libs/e1071.so
> > 7f7739213000-7f7739214000 r--p 00012000 07:01 106999
> >  /usr/local/lib64/R/library/e1071/libs/e1071.so
> > 7f7739214000-7f7739215000 rw-p 00013000 07:01 106999
> >  /usr/local/lib64/R/library/e1071/libs/e1071.so
> > 7f7739215000-7f7739218000 r-xp 00000000 07:01 106908
> >  /usr/local/lib64/R/library/class/libs/class.soAborted (core dumped)
> >
> > Best,
> > Glen
> >
> > ==========================================
> > Glen MacLachlan, PhD
> > *Senior High Performance Computing Specialist  *
> >
> > *Adjunct Faculty, Data Sciences*
> >
> > Office of Technology Services
> > The George Washington University
> > Washington, DC 20052
> >
> > ==========================================
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> I?aki ?car
>

	[[alternative HTML version deleted]]


From tr@ver@c @end|ng |rom gm@||@com  Tue Jan 15 21:50:45 2019
From: tr@ver@c @end|ng |rom gm@||@com (Travers Ching)
Date: Tue, 15 Jan 2019 12:50:45 -0800
Subject: [Rd] Objectsize function visiting every element for alt-rep strings
Message-ID: <CAPLMX9GKS9QQs9WRBYQQc8f1xc3B2OmXu5URLP=BDa6QFHHVVw@mail.gmail.com>

I have a toy alt-rep string package that generates randomly seeded strings.

example:
library(altstringisode)
x <- altrandomStrings(1e8)
head(x)
[1] "2PN0bdwPY7CA8M06zVKEkhHgZVgtV1" "5PN2qmWqBlQ9wQj99nsQzldVI5ZuGX" ... etc
object.size(1e8)

Object.size will call the set_altstring_Elt_method for every single
element, materializing (slowly) every element of the vector.  This is
a problem mostly in R-studio since object.size is called
automatically, defeating the purpose of alt-rep.

Is there a way to avoid the problem of forced materialization in rstudio?

PS: Is there a way to tell if a post has been received by the mailing
list?  How long does it take to show up in the archives?


From bbo|ker @end|ng |rom gm@||@com  Thu Jan 17 18:32:20 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 17 Jan 2019 12:32:20 -0500
Subject: [Rd] long-standing documentation bug in ?anova.lme
Message-ID: <75c1ba9b-eec3-3beb-5c8f-f7f4cc445449@gmail.com>

tl;dr anova.lme() claims to provide sums of squares, but it doesn't. And
some names are misspelled in ?lme.  I can submit all this stuff as a bug
report if that's preferred.

?anova.lme says:

When only one fitted model object is present, a data frame with
     the sums of squares, numerator degrees of freedom, denominator
     degrees of freedom, F-values, and P-values

The output of

fm1 <- lme(distance ~ age, data = Orthodont) # random is ~ age
anova(fm1)

gives columns

    numDF denDF   F-value p-value

-- i.e. the sums of squares aren't there!  (For fairly good reasons; lme
doesn't actually compute them internally, and it might not always be
straightforward to compute them, for more complex models. They would
mostly be useful for comparison with simpler, method-of-moments based
approaches like aov()). Federico Calboli pointed this out on r-help in
2004: https://stat.ethz.ch/pipermail/r-help/2004-May/051444.html


Two more points:

  * the last sentence of the Description might need one fewer comma
[after "statistic"] or one more [after "p-value"].
  * in ?lme, Littell's name is misspelled at least twice and Reinsel's
at least once.

  Is there a publicly accessible SVN server for recommended packages (in
general) and nlme (in particular) anywhere?

  cheers
      Ben Bolker


From g@bembecker @end|ng |rom gm@||@com  Fri Jan 18 23:49:21 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Fri, 18 Jan 2019 14:49:21 -0800
Subject: [Rd] 
 Objectsize function visiting every element for alt-rep strings
In-Reply-To: <CAPLMX9GKS9QQs9WRBYQQc8f1xc3B2OmXu5URLP=BDa6QFHHVVw@mail.gmail.com>
References: <CAPLMX9GKS9QQs9WRBYQQc8f1xc3B2OmXu5URLP=BDa6QFHHVVw@mail.gmail.com>
Message-ID: <CAD4oTHEKa9C2BqD6aa5fJ8Pcf8ggY2s-2tdt-zBbe7xp0ec8Pg@mail.gmail.com>

Travers,

Great to hear you're trying out the ALTREP stuff, good on you :).

Did you mean the get_altstring_Elt_method? I see the code in size.c within
utils that grabs each element, but I don't see any setting (and the setters
are noops currently anyway they just do things the old way).

One thing we have to decide is what object.size means for an altrep. I tend
to think it should mean the size of the alternative representation
currently in use in memory, but I see that a small note in ?object.size
indicates that size of objects with compact internal representations may be
overestimated, so technically this is "as currently documented". The "we"
here, of course, is the R-core team so we'll have to see how they feel on
the matter.

As for what to do about it, one possibility is to add an object.size method
to the ALTREP method table that gets called if object.size is called on an
ALTREP object.  In this case, it would be up  to the class to define an
appropriate object.size method. That would be relatively easy to do from a
technical standpoint on R's side, but what comes out of object.size would
be a bit "Wild West-y", without the consistency and correctness guarantees
one might expect from a function in utils.

Another option is to to have object.size recurse to calling object.size on
the two parts (SEXPS which together make up a CONS cell, I believe) that
make up an ALTREP  internally. Roughly speaking one of these is usually the
alternative representation while the other is the spot to put an object
with the traditional representation if the payload is ever fully
materialized in an altrep-unsafe way - e.g., C code grabs a writable
dataptr via INTEGER, REAL, DATAPTR, etc. Note there are exceptions to what
I said above, though,such as the wrapper ALTREP classes which always have
the parent object (typically a traditionally laid-out vector), because the
"alternative representation" part is strictly a metadata annotation in that
case and contains no representation of the payload data for those classes.

In this second case the result of object.size would be consistent across
all ALTREP classes, but in both cases the result of object.size would no
longer give any information about the size of a vector *payload*. This is
consistent with how object.size deals with external pointers now, but could
lead to some surprise in the case of vectors which the end user may not
even know are ALTREPs.

Thoughts from anyone else on this list?

Anyway, thanks for pointing this out. I'll talk with Luke and see what
makes sense to do here.

Best,
~G

On Wed, Jan 16, 2019 at 3:49 AM Travers Ching <traversc at gmail.com> wrote:

> I have a toy alt-rep string package that generates randomly seeded strings.
>
> example:
> library(altstringisode)
> x <- altrandomStrings(1e8)
> head(x)
> [1] "2PN0bdwPY7CA8M06zVKEkhHgZVgtV1" "5PN2qmWqBlQ9wQj99nsQzldVI5ZuGX" ...
> etc
> object.size(1e8)
>
> Object.size will call the set_altstring_Elt_method for every single
> element, materializing (slowly) every element of the vector.  This is
> a problem mostly in R-studio since object.size is called
> automatically, defeating the purpose of alt-rep.
>
> Is there a way to avoid the problem of forced materialization in rstudio?
>
> PS: Is there a way to tell if a post has been received by the mailing
> list?  How long does it take to show up in the archives?
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tr@ver@c @end|ng |rom gm@||@com  Sat Jan 19 21:14:28 2019
From: tr@ver@c @end|ng |rom gm@||@com (Travers Ching)
Date: Sat, 19 Jan 2019 12:14:28 -0800
Subject: [Rd] 
 Objectsize function visiting every element for alt-rep strings
In-Reply-To: <CAD4oTHEKa9C2BqD6aa5fJ8Pcf8ggY2s-2tdt-zBbe7xp0ec8Pg@mail.gmail.com>
References: <CAPLMX9GKS9QQs9WRBYQQc8f1xc3B2OmXu5URLP=BDa6QFHHVVw@mail.gmail.com>
 <CAD4oTHEKa9C2BqD6aa5fJ8Pcf8ggY2s-2tdt-zBbe7xp0ec8Pg@mail.gmail.com>
Message-ID: <CAPLMX9FmdDaPwohRjpWgh-UCPNu+P-eReSdipAXs9HZZ2JSJUA@mail.gmail.com>

Thanks for the detailed response, Gabriel!

I think that an object_size alt-rep method that package developers
need to implement might be hard to get right.  One alternative could
be an alt-rep method that returns the number of bytes/characters in a
given string element since I believe the object size of a CHARSXP
depends only on string length?  I think two optional alt-string
methods would be nice:

`alt_string_elt_nchars` -- for the `nchar` function in R
`alt_string_elt_nbytes` -- for `object.size` (which might be different
than nchars due to encoding)

Also since it's an issue that mainly affects R-studio, I started an
issue on their github, and it sounds like they'll avoid calling
object.size on alt-rep objects automatically.  That would fix the main
problem I've been having.

Thanks,
Travers

On Fri, Jan 18, 2019 at 2:49 PM Gabriel Becker <gabembecker at gmail.com> wrote:
>
> Travers,
>
> Great to hear you're trying out the ALTREP stuff, good on you :).
>
> Did you mean the get_altstring_Elt_method? I see the code in size.c within utils that grabs each element, but I don't see any setting (and the setters are noops currently anyway they just do things the old way).
>
> One thing we have to decide is what object.size means for an altrep. I tend to think it should mean the size of the alternative representation currently in use in memory, but I see that a small note in ?object.size indicates that size of objects with compact internal representations may be overestimated, so technically this is "as currently documented". The "we" here, of course, is the R-core team so we'll have to see how they feel on the matter.
>
> As for what to do about it, one possibility is to add an object.size method to the ALTREP method table that gets called if object.size is called on an ALTREP object.  In this case, it would be up  to the class to define an appropriate object.size method. That would be relatively easy to do from a technical standpoint on R's side, but what comes out of object.size would be a bit "Wild West-y", without the consistency and correctness guarantees one might expect from a function in utils.
>
> Another option is to to have object.size recurse to calling object.size on the two parts (SEXPS which together make up a CONS cell, I believe) that make up an ALTREP  internally. Roughly speaking one of these is usually the alternative representation while the other is the spot to put an object with the traditional representation if the payload is ever fully materialized in an altrep-unsafe way - e.g., C code grabs a writable dataptr via INTEGER, REAL, DATAPTR, etc. Note there are exceptions to what I said above, though,such as the wrapper ALTREP classes which always have the parent object (typically a traditionally laid-out vector), because the "alternative representation" part is strictly a metadata annotation in that case and contains no representation of the payload data for those classes.
>
> In this second case the result of object.size would be consistent across all ALTREP classes, but in both cases the result of object.size would no longer give any information about the size of a vector payload. This is consistent with how object.size deals with external pointers now, but could lead to some surprise in the case of vectors which the end user may not even know are ALTREPs.
>
> Thoughts from anyone else on this list?
>
> Anyway, thanks for pointing this out. I'll talk with Luke and see what makes sense to do here.
>
> Best,
> ~G
>
> On Wed, Jan 16, 2019 at 3:49 AM Travers Ching <traversc at gmail.com> wrote:
>>
>> I have a toy alt-rep string package that generates randomly seeded strings.
>>
>> example:
>> library(altstringisode)
>> x <- altrandomStrings(1e8)
>> head(x)
>> [1] "2PN0bdwPY7CA8M06zVKEkhHgZVgtV1" "5PN2qmWqBlQ9wQj99nsQzldVI5ZuGX" ... etc
>> object.size(1e8)
>>
>> Object.size will call the set_altstring_Elt_method for every single
>> element, materializing (slowly) every element of the vector.  This is
>> a problem mostly in R-studio since object.size is called
>> automatically, defeating the purpose of alt-rep.
>>
>> Is there a way to avoid the problem of forced materialization in rstudio?
>>
>> PS: Is there a way to tell if a post has been received by the mailing
>> list?  How long does it take to show up in the archives?
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Sun Jan 20 19:20:25 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sun, 20 Jan 2019 13:20:25 -0500
Subject: [Rd] long-standing documentation bug in ?anova.lme
In-Reply-To: <75c1ba9b-eec3-3beb-5c8f-f7f4cc445449@gmail.com>
References: <75c1ba9b-eec3-3beb-5c8f-f7f4cc445449@gmail.com>
Message-ID: <2d5d09b8-2011-2298-1558-fe3446237ec4@gmail.com>


  Silence on this so far? Trying here one more time, otherwise I'll
submit it as a bug report ...

  cheers
   Ben Bolker

On 2019-01-17 12:32 p.m., Ben Bolker wrote:
> tl;dr anova.lme() claims to provide sums of squares, but it doesn't. And
> some names are misspelled in ?lme.  I can submit all this stuff as a bug
> report if that's preferred.
> 
> ?anova.lme says:
> 
> When only one fitted model object is present, a data frame with
>      the sums of squares, numerator degrees of freedom, denominator
>      degrees of freedom, F-values, and P-values
> 
> The output of
> 
> fm1 <- lme(distance ~ age, data = Orthodont) # random is ~ age
> anova(fm1)
> 
> gives columns
> 
>     numDF denDF   F-value p-value
> 
> -- i.e. the sums of squares aren't there!  (For fairly good reasons; lme
> doesn't actually compute them internally, and it might not always be
> straightforward to compute them, for more complex models. They would
> mostly be useful for comparison with simpler, method-of-moments based
> approaches like aov()). Federico Calboli pointed this out on r-help in
> 2004: https://stat.ethz.ch/pipermail/r-help/2004-May/051444.html
> 
> 
> Two more points:
> 
>   * the last sentence of the Description might need one fewer comma
> [after "statistic"] or one more [after "p-value"].
>   * in ?lme, Littell's name is misspelled at least twice and Reinsel's
> at least once.
> 
>   Is there a publicly accessible SVN server for recommended packages (in
> general) and nlme (in particular) anywhere?
> 
>   cheers
>       Ben Bolker
>


From kmbe||56 @end|ng |rom gm@||@com  Mon Jan 21 01:39:45 2019
From: kmbe||56 @end|ng |rom gm@||@com (Kenny Bell)
Date: Mon, 21 Jan 2019 13:39:45 +1300
Subject: [Rd] Request: make `var` a generic
Message-ID: <CAPekMCnOKB4A7utzh1ocEYJnhBWY0=YrXiXmp5X47c9Avgc0TA@mail.gmail.com>

Hi all,

I am running into problems using `summary.lm` as calling `var` on a `units`
object does not retain the `units` attribute.

The units package addresses this issue for `mean` by implementing
`mean.units`:

units:::mean.units
function (x, ...)
{
    .as.units(NextMethod(), units(x))
}

This is, however, not possible for `var` (as it's not a generic), which
breaks `summary.lm`:

```
library(units)
#> udunits system database from C:/R/Library/3.5/units/share/udunits
iris$Sepal.Length <- set_units(iris$Sepal.Length, "cm")

summary(lm(Sepal.Length ~ Sepal.Width,
           data = iris))
#> Error in Ops.units(mean(f)^2, var(f)): both operands of the expression
should be "units" objects
```

Created on 2019-01-21 by the [reprex package](https://reprex.tidyverse.org)
(v0.2.1.9000)

Apologies if `stats` package emails shouldn't go here.

Cheers,
Kenny

	[[alternative HTML version deleted]]


From edzer@pebe@m@ @end|ng |rom un|-muen@ter@de  Mon Jan 21 08:11:11 2019
From: edzer@pebe@m@ @end|ng |rom un|-muen@ter@de (Edzer Pebesma)
Date: Mon, 21 Jan 2019 08:11:11 +0100
Subject: [Rd] Request: make `var` a generic
In-Reply-To: <CAPekMCnOKB4A7utzh1ocEYJnhBWY0=YrXiXmp5X47c9Avgc0TA@mail.gmail.com>
References: <CAPekMCnOKB4A7utzh1ocEYJnhBWY0=YrXiXmp5X47c9Avgc0TA@mail.gmail.com>
Message-ID: <4037bc1e-ab0e-7533-5385-8a07154e24c6@uni-muenster.de>

Hi Kenny,

yes, there's only so much you can do with S3 methods penetrating other
packages' code; I?aki discusses this in the blog about the r-quantities
project found at:

https://www.r-spatial.org/r/2018/08/31/quantities-final.html#fitting-linear-models-with-quantities

I'm not sure whether making "var" a generic would not shift the problem
to the next function not being generic, you could experiment with that.

On 1/20/19 6:39 PM, Kenny Bell wrote:
> Hi all,
> 
> I am running into problems using `summary.lm` as calling `var` on a `units`
> object does not retain the `units` attribute.
> 
> The units package addresses this issue for `mean` by implementing
> `mean.units`:
> 
> units:::mean.units
> function (x, ...)
> {
>     .as.units(NextMethod(), units(x))
> }
> 
> This is, however, not possible for `var` (as it's not a generic), which
> breaks `summary.lm`:
> 
> ```
> library(units)
> #> udunits system database from C:/R/Library/3.5/units/share/udunits
> iris$Sepal.Length <- set_units(iris$Sepal.Length, "cm")
> 
> summary(lm(Sepal.Length ~ Sepal.Width,
>            data = iris))
> #> Error in Ops.units(mean(f)^2, var(f)): both operands of the expression
> should be "units" objects
> ```
> 
> Created on 2019-01-21 by the [reprex package](https://reprex.tidyverse.org)
> (v0.2.1.9000)
> 
> Apologies if `stats` package emails shouldn't go here.
> 
> Cheers,
> Kenny
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Edzer Pebesma
Institute for Geoinformatics
Heisenbergstrasse 2, 48151 Muenster, Germany
Phone: +49 251 8333081

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jan 21 10:02:03 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 21 Jan 2019 10:02:03 +0100
Subject: [Rd] 
 Objectsize function visiting every element for alt-rep strings
In-Reply-To: <CAPLMX9GKS9QQs9WRBYQQc8f1xc3B2OmXu5URLP=BDa6QFHHVVw@mail.gmail.com>
References: <CAPLMX9GKS9QQs9WRBYQQc8f1xc3B2OmXu5URLP=BDa6QFHHVVw@mail.gmail.com>
Message-ID: <23621.35467.558760.525093@stat.math.ethz.ch>

>>>>> Travers Ching 
>>>>>     on Tue, 15 Jan 2019 12:50:45 -0800 writes:

    > I have a toy alt-rep string package that generates
    > randomly seeded strings.  example: library(altstringisode)
    > x <- altrandomStrings(1e8) head(x) [1]
    > "2PN0bdwPY7CA8M06zVKEkhHgZVgtV1"
    > "5PN2qmWqBlQ9wQj99nsQzldVI5ZuGX" ... etc object.size(1e8)

    > Object.size will call the set_altstring_Elt_method for
    > every single element, materializing (slowly) every element
    > of the vector.  This is a problem mostly in R-studio since
    > object.size is called automatically, defeating the purpose
    > of alt-rep.

Hmm.  But still, the idea had been that object.size()  *shuld*
return the size of the "de-ALTREP'ed" object *but* should not
de-ALTREP it.
That's what happens for integers, but indeed fails to happen for
such as.character(.)ed integers.

>From my eRum presentation (which took from the official ALTREP documentation
https://svn.r-project.org/R/branches/ALTREP/ALTREP.html ) :

  > x <- 1:1e15
  > object.size(x) # 8000'000'000'000'048 bytes : 8000 TBytes -- ok, not really
  8000000000000048 bytes
  > is.unsorted(x) # FALSE : i.e., R's *knows* it is sorted
  [1] FALSE
  > xs <- sort(x)  #
  > .Internal(inspect(x))
  @80255f8 14 REALSXP g0c0 [NAM(7)]  1 : 1000000000000000 (compact)
  > 

  > cx <- as.character(x)
  > .Internal(inspect(cx))
  @80485d8 16 STRSXP g0c0 [NAM(1)]   <deferred string conversion>
    @80255f8 14 REALSXP g1c0 [MARK,NAM(7)]  1 : 1000000000000000 (compact)
  > system.time( print(object.size(x)), gc=FALSE)
  8000000000000048 bytes
     user  system elapsed 
    0.000   0.000   0.001 
  > system.time( print(object.size(cx)), gc=FALSE)
  Error: cannot allocate vector of size 8388608.0 Gb
  Timing stopped at: 11.43 0 11.46
  > 

One could consider it a bug that object.size(cx) is indeed
inspecting every string, i.e., accessing cx[i] for all i.
Note that it is *not*  deALTREPing cx  itself :

> x <- 1:1e6
> cx <- as.character(x)
> .Internal(inspect(cx))

@7f5b1a0 16 STRSXP g0c0 [NAM(1)]   <deferred string conversion>
  @7f5adb0 13 INTSXP g0c0 [NAM(7)]  1 : 1000000 (compact)
> system.time( print(object.size(cx)), gc=FALSE)
64000048 bytes
   user  system elapsed 
  0.369   0.005   0.374 
> .Internal(inspect(cx))
@7f5b1a0 16 STRSXP g0c0 [NAM(7)]   <deferred string conversion>
  @7f5adb0 13 INTSXP g0c0 [NAM(7)]  1 : 1000000 (compact)
> 

    > Is there a way to avoid the problem of forced
    > materialization in rstudio?

    > PS: Is there a way to tell if a post has been received by
    > the mailing list?  How long does it take to show up in the
    > archives?

[ that (waiting time) distribution is quite right skewed... I'd
  guess it's median to be less than 10 minutes... but we had
  artificially delayed it somewhat in the past to fight
  spammers, and ETH (the hosting instituttion) and others have
  increased spam and virus filtering so everything has become
  quite a bit slower ]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jan 21 10:54:30 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 21 Jan 2019 10:54:30 +0100
Subject: [Rd] long-standing documentation bug in ?anova.lme
In-Reply-To: <75c1ba9b-eec3-3beb-5c8f-f7f4cc445449@gmail.com>
References: <75c1ba9b-eec3-3beb-5c8f-f7f4cc445449@gmail.com>
Message-ID: <23621.38614.877168.877150@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Thu, 17 Jan 2019 12:32:20 -0500 writes:

    > tl;dr anova.lme() claims to provide sums of squares, but it doesn't. And
    > some names are misspelled in ?lme.  I can submit all this stuff as a bug
    > report if that's preferred.

    > ?anova.lme says:

    > When only one fitted model object is present, a data frame with
    > the sums of squares, numerator degrees of freedom, denominator
    > degrees of freedom, F-values, and P-values

    > The output of

    > fm1 <- lme(distance ~ age, data = Orthodont) # random is ~ age
    > anova(fm1)

    > gives columns

    > numDF denDF   F-value p-value

    > -- i.e. the sums of squares aren't there!  (For fairly good reasons; lme
    > doesn't actually compute them internally, and it might not always be
    > straightforward to compute them, for more complex models. They would
    > mostly be useful for comparison with simpler, method-of-moments based
    > approaches like aov()). Federico Calboli pointed this out on r-help in
    > 2004: https://stat.ethz.ch/pipermail/r-help/2004-May/051444.html


    > Two more points:

    > * the last sentence of the Description might need one fewer comma
    > [after "statistic"] or one more [after "p-value"].
    > * in ?lme, Littell's name is misspelled at least twice and Reinsel's
    > at least once.

We'd be grateful for patches, thank you Ben!

Notably for 'nlme' and 'foreign', both of which are maintained
by R-core (rather than individual R core or R Foundation
members) we've also encouraged that  R's bugzilla be used for
non-trivial bug reports as that allows attached patches and
simple references too. 


    > Is there a publicly accessible SVN server for recommended packages (in
    > general) and nlme (in particular) anywhere?

nlme's SVN is physically at the same place as the R sources
(here at ETH Zurich), with URL

   https://svn.r-project.org/R-packages/trunk/nlme

in addition to 'nlme', at least  'foreign', 'mgcv'  and
'cluster' are also maintained there.

Thank you for the question:
 I do think "we" should add the corresponding  svn URL to the
 respective DESCRIPTION file.

OTOH, 'Matrix' has moved to R-forge a while ago .. and I'm
currently also not sure about the other Recommended packages
such as 'KernSmooth' or 'boot' . 

Best,
Martin

Martin Maechler
ETH Zurich and R core team


From torre@ @end|ng |rom un|ov|@e@  Mon Jan 21 11:22:40 2019
From: torre@ @end|ng |rom un|ov|@e@ (EMILIO TORRES MANZANERA)
Date: Mon, 21 Jan 2019 10:22:40 +0000
Subject: [Rd] orderVector1 (sort.c): Tiny improvement concerning nalast
Message-ID: <87va2ipaxd.fsf@uniovi.es>


Dear Sir,

In the functions  orderVector1, orderVector1l  (R-3.5.2/src/main/sort.c) there are two loops concerning nalast (lines 1096, 1105). I am not sure about the possibility of redefining them, so this function should be a little faster.

The first one (line 1096) can be included in the previous 'switch' block (line 1079) (see below). And if you rewrite/duplicate this 'switch' block (line 1079) for the case nalast==false, you should be able to avoid the loop of line 1105.

Best regards,
Emilio



*** /home/emilio/Descargas/R-3.5.2/src/main/sort.c	2018-11-07 00:15:02.000000000 +0100
--- /home/emilio/Descargas/R-3.5.2/src/main/sort2.c	2019-01-21 11:13:07.414332755 +0100
***************
*** 1079,1099 ****
  	switch (TYPEOF(key)) {
  	case LGLSXP:
  	case INTSXP:
! 	    for (i = 0; i < n; i++) isna[i] = (ix[i] == NA_INTEGER);
! 	    break;
  	case REALSXP:
! 	    for (i = 0; i < n; i++) isna[i] = ISNAN(x[i]);
! 	    break;
  	case STRSXP:
! 	    for (i = 0; i < n; i++) isna[i] = (sx[i] == NA_STRING);
! 	    break;
  	case CPLXSXP:
! 	    for (i = 0; i < n; i++) isna[i] = ISNAN(cx[i].r) || ISNAN(cx[i].i);
! 	    break;
  	default:
! 	    UNIMPLEMENTED_TYPE("orderVector1", key);
  	}
! 	for (i = 0; i < n; i++) numna += isna[i];
  
  	if(numna)
  	    switch (TYPEOF(key)) {
--- 1079,1111 ----
  	switch (TYPEOF(key)) {
  	case LGLSXP:
  	case INTSXP:
! 	  for (i = 0; i < n; i++) {
! 		isna[i] = (ix[i] == NA_INTEGER);
! 		numna += isna[i];
! 	  }
! 	  break;
  	case REALSXP:
! 	  for (i = 0; i < n; i++){
! 		isna[i] = ISNAN(x[i]);
! 		numna += isna[i];
! 	  } 
! 	  break;
  	case STRSXP:
! 	  for (i = 0; i < n; i++){
! 		isna[i] = (sx[i] == NA_STRING);
! 		numna += isna[i];
! 	  } 
! 	  break;
  	case CPLXSXP:
! 	  for (i = 0; i < n; i++){
! 		isna[i] = ISNAN(cx[i].r) || ISNAN(cx[i].i);
! 		numna += isna[i];
! 	  } 
! 	  break;
  	default:
! 	  UNIMPLEMENTED_TYPE("orderVector1", key);
  	}
! 	/*	for (i = 0; i < n; i++) numna += isna[i]; */
  
  	if(numna)
  	    switch (TYPEOF(key)) {




-- 
=================================================
Emilio Torres Manzanera
Fac. de Comercio - Universidad de Oviedo
c/ Luis Moya 261, E-33203 Gij?n (Spain)
Tel. 985 182 197 email: torres at uniovi.es
=================================================

From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Mon Jan 21 18:35:25 2019
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Mon, 21 Jan 2019 12:35:25 -0500
Subject: [Rd] pmax and long vector
Message-ID: <CAC2h7utLs6nitW+LpAAS0X6bVw+HZQn5LJ36_n+ARXeeW5bUUg@mail.gmail.com>

I see that base::pmax() does not support long vectors.

Is R-devel interested in reports like this; ie. is there a goal of full
support for long vectors in "basic" functions, something I at least would
greatly appreciate?

MRE:

> pmax(rep(1L, 3*10^9), 0)

Error in pmax(rep(1L, 3 * 10^9), 0) :
  long vectors not supported yet:
../../../R-devel-src/src/include/Rinlinedfuns.h:522

Best,
Kasper

	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Mon Jan 21 20:26:16 2019
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 21 Jan 2019 14:26:16 -0500
Subject: [Rd] long-standing documentation bug in ?anova.lme
In-Reply-To: <23621.38614.877168.877150@stat.math.ethz.ch>
References: <75c1ba9b-eec3-3beb-5c8f-f7f4cc445449@gmail.com>
 <23621.38614.877168.877150@stat.math.ethz.ch>
Message-ID: <a394bfaf-b391-aa65-a1f0-7da49f3b85f2@gmail.com>


  Here are relevant patches to address the various issues described
below.  Thanks for the SVN info!

  cheers
    Ben Bolker


On 2019-01-21 4:54 a.m., Martin Maechler wrote:
>>>>>> Ben Bolker 
>>>>>>     on Thu, 17 Jan 2019 12:32:20 -0500 writes:
> 
>     > tl;dr anova.lme() claims to provide sums of squares, but it doesn't. And
>     > some names are misspelled in ?lme.  I can submit all this stuff as a bug
>     > report if that's preferred.
> 
>     > ?anova.lme says:
> 
>     > When only one fitted model object is present, a data frame with
>     > the sums of squares, numerator degrees of freedom, denominator
>     > degrees of freedom, F-values, and P-values
> 
>     > The output of
> 
>     > fm1 <- lme(distance ~ age, data = Orthodont) # random is ~ age
>     > anova(fm1)
> 
>     > gives columns
> 
>     > numDF denDF   F-value p-value
> 
>     > -- i.e. the sums of squares aren't there!  (For fairly good reasons; lme
>     > doesn't actually compute them internally, and it might not always be
>     > straightforward to compute them, for more complex models. They would
>     > mostly be useful for comparison with simpler, method-of-moments based
>     > approaches like aov()). Federico Calboli pointed this out on r-help in
>     > 2004: https://stat.ethz.ch/pipermail/r-help/2004-May/051444.html
> 
> 
>     > Two more points:
> 
>     > * the last sentence of the Description might need one fewer comma
>     > [after "statistic"] or one more [after "p-value"].
>     > * in ?lme, Littell's name is misspelled at least twice and Reinsel's
>     > at least once.
> 
> We'd be grateful for patches, thank you Ben!
> 
> Notably for 'nlme' and 'foreign', both of which are maintained
> by R-core (rather than individual R core or R Foundation
> members) we've also encouraged that  R's bugzilla be used for
> non-trivial bug reports as that allows attached patches and
> simple references too. 
> 
> 
>     > Is there a publicly accessible SVN server for recommended packages (in
>     > general) and nlme (in particular) anywhere?
> 
> nlme's SVN is physically at the same place as the R sources
> (here at ETH Zurich), with URL
> 
>    https://svn.r-project.org/R-packages/trunk/nlme
> 
> in addition to 'nlme', at least  'foreign', 'mgcv'  and
> 'cluster' are also maintained there.
> 
> Thank you for the question:
>  I do think "we" should add the corresponding  svn URL to the
>  respective DESCRIPTION file.
> 
> OTOH, 'Matrix' has moved to R-forge a while ago .. and I'm
> currently also not sure about the other Recommended packages
> such as 'KernSmooth' or 'boot' . 
> 
> Best,
> Martin
> 
> Martin Maechler
> ETH Zurich and R core team
> 

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: nlmediff.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190121/19cefafb/attachment.txt>

From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Jan 21 20:35:47 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 21 Jan 2019 14:35:47 -0500
Subject: [Rd] pmax and long vector
In-Reply-To: <CAC2h7utLs6nitW+LpAAS0X6bVw+HZQn5LJ36_n+ARXeeW5bUUg@mail.gmail.com>
References: <CAC2h7utLs6nitW+LpAAS0X6bVw+HZQn5LJ36_n+ARXeeW5bUUg@mail.gmail.com>
Message-ID: <bdf4f62a-d065-172e-c02f-4b499c1bd8c5@gmail.com>

On 21/01/2019 12:35 p.m., Kasper Daniel Hansen wrote:
> I see that base::pmax() does not support long vectors.
> 
> Is R-devel interested in reports like this; ie. is there a goal of full
> support for long vectors in "basic" functions, something I at least would
> greatly appreciate?
> 
> MRE:
> 
>> pmax(rep(1L, 3*10^9), 0)
> 
> Error in pmax(rep(1L, 3 * 10^9), 0) :
>    long vectors not supported yet:
> ../../../R-devel-src/src/include/Rinlinedfuns.h:522


I think a carefully tested patch that fixes pmax (it would need to 
change this call from length() to xlength(), and make some other 
necessary changes that follow from this), would probably be useful to R 
Core, and could be posted to bugs.r-project.org.

It might also be useful on R-devel to post a list of all known commonly 
used functions that don't support long vectors; this could be updated on 
a regular basis.  This might encourage people to produce patches as above.

I'm not so sure a report about a single function won't just get lost.

Duncan Murdoch


From g@bembecker @end|ng |rom gm@||@com  Mon Jan 21 21:09:26 2019
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 21 Jan 2019 12:09:26 -0800
Subject: [Rd] pmax and long vector
In-Reply-To: <bdf4f62a-d065-172e-c02f-4b499c1bd8c5@gmail.com>
References: <CAC2h7utLs6nitW+LpAAS0X6bVw+HZQn5LJ36_n+ARXeeW5bUUg@mail.gmail.com>
 <bdf4f62a-d065-172e-c02f-4b499c1bd8c5@gmail.com>
Message-ID: <CAD4oTHHDFBX-R++jpuk8=nAkkRnwVmDnYUzxJxrGWUEBj18W7Q@mail.gmail.com>

Kasper,

If you're not interested or dont have time to create said patch yourself
let me know and i can do it.

Best,
~G

On Mon, Jan 21, 2019, 11:36 AM Duncan Murdoch <murdoch.duncan at gmail.com
wrote:

> On 21/01/2019 12:35 p.m., Kasper Daniel Hansen wrote:
> > I see that base::pmax() does not support long vectors.
> >
> > Is R-devel interested in reports like this; ie. is there a goal of full
> > support for long vectors in "basic" functions, something I at least would
> > greatly appreciate?
> >
> > MRE:
> >
> >> pmax(rep(1L, 3*10^9), 0)
> >
> > Error in pmax(rep(1L, 3 * 10^9), 0) :
> >    long vectors not supported yet:
> > ../../../R-devel-src/src/include/Rinlinedfuns.h:522
>
>
> I think a carefully tested patch that fixes pmax (it would need to
> change this call from length() to xlength(), and make some other
> necessary changes that follow from this), would probably be useful to R
> Core, and could be posted to bugs.r-project.org.
>
> It might also be useful on R-devel to post a list of all known commonly
> used functions that don't support long vectors; this could be updated on
> a regular basis.  This might encourage people to produce patches as above.
>
> I'm not so sure a report about a single function won't just get lost.
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Tue Jan 22 03:51:55 2019
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Mon, 21 Jan 2019 21:51:55 -0500
Subject: [Rd] pmax and long vector
In-Reply-To: <CAD4oTHHDFBX-R++jpuk8=nAkkRnwVmDnYUzxJxrGWUEBj18W7Q@mail.gmail.com>
References: <CAC2h7utLs6nitW+LpAAS0X6bVw+HZQn5LJ36_n+ARXeeW5bUUg@mail.gmail.com>
 <bdf4f62a-d065-172e-c02f-4b499c1bd8c5@gmail.com>
 <CAD4oTHHDFBX-R++jpuk8=nAkkRnwVmDnYUzxJxrGWUEBj18W7Q@mail.gmail.com>
Message-ID: <CAC2h7us1MZVdamfejW6m2qaGZTTkYy1LihV6oM_acTdirHwTyQ@mail.gmail.com>

Gabe, I don't (yet) know much about long vectors at the C level. So feel
free to address this.

Duncan, I'll see what I can do regarding systematically compiling a list of
functions without long vector support. These days I frequently work with
big enough matrices that I need it.

On Mon, Jan 21, 2019 at 3:09 PM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Kasper,
>
> If you're not interested or dont have time to create said patch yourself
> let me know and i can do it.
>
> Best,
> ~G
>
> On Mon, Jan 21, 2019, 11:36 AM Duncan Murdoch <murdoch.duncan at gmail.com
> wrote:
>
>> On 21/01/2019 12:35 p.m., Kasper Daniel Hansen wrote:
>> > I see that base::pmax() does not support long vectors.
>> >
>> > Is R-devel interested in reports like this; ie. is there a goal of full
>> > support for long vectors in "basic" functions, something I at least
>> would
>> > greatly appreciate?
>> >
>> > MRE:
>> >
>> >> pmax(rep(1L, 3*10^9), 0)
>> >
>> > Error in pmax(rep(1L, 3 * 10^9), 0) :
>> >    long vectors not supported yet:
>> > ../../../R-devel-src/src/include/Rinlinedfuns.h:522
>>
>>
>> I think a carefully tested patch that fixes pmax (it would need to
>> change this call from length() to xlength(), and make some other
>> necessary changes that follow from this), would probably be useful to R
>> Core, and could be posted to bugs.r-project.org.
>>
>> It might also be useful on R-devel to post a list of all known commonly
>> used functions that don't support long vectors; this could be updated on
>> a regular basis.  This might encourage people to produce patches as above.
>>
>> I'm not so sure a report about a single function won't just get lost.
>>
>> Duncan Murdoch
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Tue Jan 22 14:33:49 2019
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 22 Jan 2019 07:33:49 -0600
Subject: [Rd] Hex sticker
Message-ID: <871ab4$avk0c4@ironport10.mayo.edu>

Is there a canonical place to add a hex sticker to a package???? I've found use of 
man/figures and inst/.
A nice sticker has been made for survival and since it is a required package I don't want 
to mess it up.

Terry T.


	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Tue Jan 22 14:38:39 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Tue, 22 Jan 2019 13:38:39 +0000
Subject: [Rd] Hex sticker
In-Reply-To: <871ab4$avk0c4@ironport10.mayo.edu>
References: <871ab4$avk0c4@ironport10.mayo.edu>
Message-ID: <CABtg=Kn_9fMv-MDNO3ZY-5C6nfNnq95j8RxpGpgX9-nBi2SHSg@mail.gmail.com>

FWIW man/figures/logo.png is picked up by pkgdown web sites, and also
by roxygen if you have a man page for the package itself.

Gabor

On Tue, Jan 22, 2019 at 1:34 PM Therneau, Terry M., Ph.D. via R-devel
<r-devel at r-project.org> wrote:
>
> Is there a canonical place to add a hex sticker to a package?    I've found use of
> man/figures and inst/.
> A nice sticker has been made for survival and since it is a required package I don't want
> to mess it up.
>
> Terry T.
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |uke-t|erney @end|ng |rom u|ow@@edu  Tue Jan 22 17:21:09 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Tue, 22 Jan 2019 16:21:09 +0000
Subject: [Rd] 
 Objectsize function visiting every element for alt-rep strings
In-Reply-To: <23621.35467.558760.525093@stat.math.ethz.ch>
References: <CAPLMX9GKS9QQs9WRBYQQc8f1xc3B2OmXu5URLP=BDa6QFHHVVw@mail.gmail.com>
 <23621.35467.558760.525093@stat.math.ethz.ch>
Message-ID: <alpine.DEB.2.21.1901220950150.2972@luke-Latitude-7480>

On Mon, 21 Jan 2019, Martin Maechler wrote:

>>>>>> Travers Ching
>>>>>>     on Tue, 15 Jan 2019 12:50:45 -0800 writes:
>
>    > I have a toy alt-rep string package that generates
>    > randomly seeded strings.  example: library(altstringisode)
>    > x <- altrandomStrings(1e8) head(x) [1]
>    > "2PN0bdwPY7CA8M06zVKEkhHgZVgtV1"
>    > "5PN2qmWqBlQ9wQj99nsQzldVI5ZuGX" ... etc object.size(1e8)
>
>    > Object.size will call the set_altstring_Elt_method for
>    > every single element, materializing (slowly) every element
>    > of the vector.  This is a problem mostly in R-studio since
>    > object.size is called automatically, defeating the purpose
>    > of alt-rep.

There is no sensible way in general to figure out how large the
strings would be without computing them. There might be specifically
for a deferred sequence conversion but it would require a fair bit of
effort to figure out that would be better spent elsewhere.

I've never been a big fan of object.size since what it is trying to
compute isn't very well defined in the context of sharing and possible
internal state changes (even before ALTREP byte code compilation could
change the internals of a function [which object.size sees] and
assigning into environments or evaluating promises can change
environments [which object.size ignores]). The issue is not unlike the
one faced by identical(), which has a bunch of options for the
different ways objects can be identical, and might need even more.

We could in general have object.size for and ALTREP return the
object.size results of the current internal representation, but that
might not always be appropriate. Again, what object.size is trying to
compute isn't very well defined.

RStudio does seem to call object.size on every assignment to
.GlobalEnv. That might be worth revisiting.


Best,

luke

>
> Hmm.  But still, the idea had been that object.size()  *shuld*
> return the size of the "de-ALTREP'ed" object *but* should not
> de-ALTREP it.
> That's what happens for integers, but indeed fails to happen for
> such as.character(.)ed integers.
>
> From my eRum presentation (which took from the official ALTREP documentation
> https://svn.r-project.org/R/branches/ALTREP/ALTREP.html ) :
>
>  > x <- 1:1e15
>  > object.size(x) # 8000'000'000'000'048 bytes : 8000 TBytes -- ok, not really
>  8000000000000048 bytes
>  > is.unsorted(x) # FALSE : i.e., R's *knows* it is sorted
>  [1] FALSE
>  > xs <- sort(x)  #
>  > .Internal(inspect(x))
>  @80255f8 14 REALSXP g0c0 [NAM(7)]  1 : 1000000000000000 (compact)
>  >
>
>  > cx <- as.character(x)
>  > .Internal(inspect(cx))
>  @80485d8 16 STRSXP g0c0 [NAM(1)]   <deferred string conversion>
>    @80255f8 14 REALSXP g1c0 [MARK,NAM(7)]  1 : 1000000000000000 (compact)
>  > system.time( print(object.size(x)), gc=FALSE)
>  8000000000000048 bytes
>     user  system elapsed
>    0.000   0.000   0.001
>  > system.time( print(object.size(cx)), gc=FALSE)
>  Error: cannot allocate vector of size 8388608.0 Gb
>  Timing stopped at: 11.43 0 11.46
>  >
>
> One could consider it a bug that object.size(cx) is indeed
> inspecting every string, i.e., accessing cx[i] for all i.
> Note that it is *not*  deALTREPing cx  itself :
>
>> x <- 1:1e6
>> cx <- as.character(x)
>> .Internal(inspect(cx))
>
> @7f5b1a0 16 STRSXP g0c0 [NAM(1)]   <deferred string conversion>
>  @7f5adb0 13 INTSXP g0c0 [NAM(7)]  1 : 1000000 (compact)
>> system.time( print(object.size(cx)), gc=FALSE)
> 64000048 bytes
>   user  system elapsed
>  0.369   0.005   0.374
>> .Internal(inspect(cx))
> @7f5b1a0 16 STRSXP g0c0 [NAM(7)]   <deferred string conversion>
>  @7f5adb0 13 INTSXP g0c0 [NAM(7)]  1 : 1000000 (compact)
>>
>
>    > Is there a way to avoid the problem of forced
>    > materialization in rstudio?
>
>    > PS: Is there a way to tell if a post has been received by
>    > the mailing list?  How long does it take to show up in the
>    > archives?
>
> [ that (waiting time) distribution is quite right skewed... I'd
>  guess it's median to be less than 10 minutes... but we had
>  artificially delayed it somewhat in the past to fight
>  spammers, and ETH (the hosting instituttion) and others have
>  increased spam and virus filtering so everything has become
>  quite a bit slower ]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From kev|nu@hey @end|ng |rom gm@||@com  Tue Jan 22 18:17:55 2019
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Tue, 22 Jan 2019 09:17:55 -0800
Subject: [Rd] 
 Objectsize function visiting every element for alt-rep strings
In-Reply-To: <alpine.DEB.2.21.1901220950150.2972@luke-Latitude-7480>
References: <CAPLMX9GKS9QQs9WRBYQQc8f1xc3B2OmXu5URLP=BDa6QFHHVVw@mail.gmail.com>
 <23621.35467.558760.525093@stat.math.ethz.ch>
 <alpine.DEB.2.21.1901220950150.2972@luke-Latitude-7480>
Message-ID: <CAJXgQP1YwQc0GyxFsw4WVMKntjUYi8chC+hX+BJsFH7wh612=A@mail.gmail.com>

I think that object.size() is most commonly used to answer the question,
"what R objects are consuming the most memory currently in my R session?"
and for that reason I think returning the size of the internal
representations of objects (for e.g. ALTREP objects; unevaluated promises)
is the right default behavior.

I also agree it would be worth considering adding arguments that control
how object.size() is computed for different kinds of R objects, since users
might want to use object.size() to answer different types of questions.

All that said, if the ultimate goal here is to avoid having RStudio
materialize ALTREP objects in the background, then perhaps that change
should happen in RStudio :-)

Best,
Kevin

On Tue, Jan 22, 2019 at 8:21 AM Tierney, Luke <luke-tierney at uiowa.edu>
wrote:

> On Mon, 21 Jan 2019, Martin Maechler wrote:
>
> >>>>>> Travers Ching
> >>>>>>     on Tue, 15 Jan 2019 12:50:45 -0800 writes:
> >
> >    > I have a toy alt-rep string package that generates
> >    > randomly seeded strings.  example: library(altstringisode)
> >    > x <- altrandomStrings(1e8) head(x) [1]
> >    > "2PN0bdwPY7CA8M06zVKEkhHgZVgtV1"
> >    > "5PN2qmWqBlQ9wQj99nsQzldVI5ZuGX" ... etc object.size(1e8)
> >
> >    > Object.size will call the set_altstring_Elt_method for
> >    > every single element, materializing (slowly) every element
> >    > of the vector.  This is a problem mostly in R-studio since
> >    > object.size is called automatically, defeating the purpose
> >    > of alt-rep.
>
> There is no sensible way in general to figure out how large the
> strings would be without computing them. There might be specifically
> for a deferred sequence conversion but it would require a fair bit of
> effort to figure out that would be better spent elsewhere.
>
> I've never been a big fan of object.size since what it is trying to
> compute isn't very well defined in the context of sharing and possible
> internal state changes (even before ALTREP byte code compilation could
> change the internals of a function [which object.size sees] and
> assigning into environments or evaluating promises can change
> environments [which object.size ignores]). The issue is not unlike the
> one faced by identical(), which has a bunch of options for the
> different ways objects can be identical, and might need even more.
>
> We could in general have object.size for and ALTREP return the
> object.size results of the current internal representation, but that
> might not always be appropriate. Again, what object.size is trying to
> compute isn't very well defined.
>
> RStudio does seem to call object.size on every assignment to
> .GlobalEnv. That might be worth revisiting.
>
>
> Best,
>
> luke
>
> >
> > Hmm.  But still, the idea had been that object.size()  *shuld*
> > return the size of the "de-ALTREP'ed" object *but* should not
> > de-ALTREP it.
> > That's what happens for integers, but indeed fails to happen for
> > such as.character(.)ed integers.
> >
> > From my eRum presentation (which took from the official ALTREP
> documentation
> > https://svn.r-project.org/R/branches/ALTREP/ALTREP.html ) :
> >
> >  > x <- 1:1e15
> >  > object.size(x) # 8000'000'000'000'048 bytes : 8000 TBytes -- ok, not
> really
> >  8000000000000048 bytes
> >  > is.unsorted(x) # FALSE : i.e., R's *knows* it is sorted
> >  [1] FALSE
> >  > xs <- sort(x)  #
> >  > .Internal(inspect(x))
> >  @80255f8 14 REALSXP g0c0 [NAM(7)]  1 : 1000000000000000 (compact)
> >  >
> >
> >  > cx <- as.character(x)
> >  > .Internal(inspect(cx))
> >  @80485d8 16 STRSXP g0c0 [NAM(1)]   <deferred string conversion>
> >    @80255f8 14 REALSXP g1c0 [MARK,NAM(7)]  1 : 1000000000000000 (compact)
> >  > system.time( print(object.size(x)), gc=FALSE)
> >  8000000000000048 bytes
> >     user  system elapsed
> >    0.000   0.000   0.001
> >  > system.time( print(object.size(cx)), gc=FALSE)
> >  Error: cannot allocate vector of size 8388608.0 Gb
> >  Timing stopped at: 11.43 0 11.46
> >  >
> >
> > One could consider it a bug that object.size(cx) is indeed
> > inspecting every string, i.e., accessing cx[i] for all i.
> > Note that it is *not*  deALTREPing cx  itself :
> >
> >> x <- 1:1e6
> >> cx <- as.character(x)
> >> .Internal(inspect(cx))
> >
> > @7f5b1a0 16 STRSXP g0c0 [NAM(1)]   <deferred string conversion>
> >  @7f5adb0 13 INTSXP g0c0 [NAM(7)]  1 : 1000000 (compact)
> >> system.time( print(object.size(cx)), gc=FALSE)
> > 64000048 bytes
> >   user  system elapsed
> >  0.369   0.005   0.374
> >> .Internal(inspect(cx))
> > @7f5b1a0 16 STRSXP g0c0 [NAM(7)]   <deferred string conversion>
> >  @7f5adb0 13 INTSXP g0c0 [NAM(7)]  1 : 1000000 (compact)
> >>
> >
> >    > Is there a way to avoid the problem of forced
> >    > materialization in rstudio?
> >
> >    > PS: Is there a way to tell if a post has been received by
> >    > the mailing list?  How long does it take to show up in the
> >    > archives?
> >
> > [ that (waiting time) distribution is quite right skewed... I'd
> >  guess it's median to be less than 10 minutes... but we had
> >  artificially delayed it somewhat in the past to fight
> >  spammers, and ETH (the hosting instituttion) and others have
> >  increased spam and virus filtering so everything has become
> >  quite a bit slower ]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan 22 18:56:56 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 22 Jan 2019 18:56:56 +0100
Subject: [Rd] pmax and long vector
In-Reply-To: <CAC2h7us1MZVdamfejW6m2qaGZTTkYy1LihV6oM_acTdirHwTyQ@mail.gmail.com>
References: <CAC2h7utLs6nitW+LpAAS0X6bVw+HZQn5LJ36_n+ARXeeW5bUUg@mail.gmail.com>
 <bdf4f62a-d065-172e-c02f-4b499c1bd8c5@gmail.com>
 <CAD4oTHHDFBX-R++jpuk8=nAkkRnwVmDnYUzxJxrGWUEBj18W7Q@mail.gmail.com>
 <CAC2h7us1MZVdamfejW6m2qaGZTTkYy1LihV6oM_acTdirHwTyQ@mail.gmail.com>
Message-ID: <23623.22888.812785.496430@stat.math.ethz.ch>

>>>>> Kasper Daniel Hansen 
>>>>>     on Mon, 21 Jan 2019 21:51:55 -0500 writes:

    > Gabe, I don't (yet) know much about long vectors at the C level. So feel
    > free to address this.

    > Duncan, I'll see what I can do regarding systematically compiling a list of
    > functions without long vector support. These days I frequently work with
    > big enough matrices that I need it.

Thank you, Kasper, Duncan and Gabriel!

I agree with Duncan about  "probably be useful to R Core".

Best,
Martin 


    > On Mon, Jan 21, 2019 at 3:09 PM Gabriel Becker <gabembecker at gmail.com>
    > wrote:

    >> Kasper,
    >> 
    >> If you're not interested or dont have time to create said patch yourself
    >> let me know and i can do it.
    >> 
    >> Best,
    >> ~G
    >> 
    >> On Mon, Jan 21, 2019, 11:36 AM Duncan Murdoch <murdoch.duncan at gmail.com
    >> wrote:
    >> 
    >>> On 21/01/2019 12:35 p.m., Kasper Daniel Hansen wrote:
    >>> > I see that base::pmax() does not support long vectors.
    >>> >
    >>> > Is R-devel interested in reports like this; ie. is there a goal of full
    >>> > support for long vectors in "basic" functions, something I at least
    >>> would
    >>> > greatly appreciate?
    >>> >
    >>> > MRE:
    >>> >
    >>> >> pmax(rep(1L, 3*10^9), 0)
    >>> >
    >>> > Error in pmax(rep(1L, 3 * 10^9), 0) :
    >>> >    long vectors not supported yet:
    >>> > ../../../R-devel-src/src/include/Rinlinedfuns.h:522
    >>> 
    >>> 
    >>> I think a carefully tested patch that fixes pmax (it would need to
    >>> change this call from length() to xlength(), and make some other
    >>> necessary changes that follow from this), would probably be useful to R
    >>> Core, and could be posted to bugs.r-project.org.
    >>> 
    >>> It might also be useful on R-devel to post a list of all known commonly
    >>> used functions that don't support long vectors; this could be updated on
    >>> a regular basis.  This might encourage people to produce patches as above.
    >>> 
    >>> I'm not so sure a report about a single function won't just get lost.
    >>> 
    >>> Duncan Murdoch
    >>> 
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> 
    >> 

    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Jan 23 10:33:32 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 23 Jan 2019 10:33:32 +0100
Subject: [Rd] 
 Objectsize function visiting every element for alt-rep strings
In-Reply-To: <CAJXgQP1YwQc0GyxFsw4WVMKntjUYi8chC+hX+BJsFH7wh612=A@mail.gmail.com>
References: <CAPLMX9GKS9QQs9WRBYQQc8f1xc3B2OmXu5URLP=BDa6QFHHVVw@mail.gmail.com>
 <23621.35467.558760.525093@stat.math.ethz.ch>
 <alpine.DEB.2.21.1901220950150.2972@luke-Latitude-7480>
 <CAJXgQP1YwQc0GyxFsw4WVMKntjUYi8chC+hX+BJsFH7wh612=A@mail.gmail.com>
Message-ID: <b43ad328-4342-dfdd-319b-9b21cf05aecb@gmail.com>

On 1/22/19 6:17 PM, Kevin Ushey wrote:
> I think that object.size() is most commonly used to answer the question,
> "what R objects are consuming the most memory currently in my R session?"
> and for that reason I think returning the size of the internal
> representations of objects (for e.g. ALTREP objects; unevaluated promises)
> is the right default behavior.

I don't think one could answer that question at all in the presence of 
sharing (of objects with value semantics due to copy on write, string 
cache or other caches, sharing of objects with referential semantics 
such as environments, etc). Also the mapping from R objects (SEXPs) to 
what users might understand as objects would not be clear (which SEXPs 
belong to which "object", which SEXPs are too low-level for the user to 
be considered, etc). In principle, there could be a memory profiler 
working at SEXP level and exposing all the intricacies of the memory 
layout, answering reachability questions on a heap dump (so one could 
find out about a 1G integer vector and then list all bindings say in 
namespace environments from which it is reachable), but of course that 
would be a lot of work to implement and to maintain. The problem is not 
unique to R (e.g. see Java with the same problems of sharing that 
prevent meaningful definition for object size). I am not persuaded it 
makes sense to add more options to a function that does not have and 
cannot have a well defined user-level semantics, and I would discourage 
writing code that is trying to build on that function as I think that it 
might lead to confusion and frustration. I think equality for example is 
easier to define (just that one could come up with multiple meaningful 
definitions, so it makes sense to have multiple options).

Best
Tomas
>
> I also agree it would be worth considering adding arguments that control
> how object.size() is computed for different kinds of R objects, since users
> might want to use object.size() to answer different types of questions.
>
> All that said, if the ultimate goal here is to avoid having RStudio
> materialize ALTREP objects in the background, then perhaps that change
> should happen in RStudio :-)
>
> Best,
> Kevin
>
> On Tue, Jan 22, 2019 at 8:21 AM Tierney, Luke <luke-tierney at uiowa.edu>
> wrote:
>
>> On Mon, 21 Jan 2019, Martin Maechler wrote:
>>
>>>>>>>> Travers Ching
>>>>>>>>      on Tue, 15 Jan 2019 12:50:45 -0800 writes:
>>>     > I have a toy alt-rep string package that generates
>>>     > randomly seeded strings.  example: library(altstringisode)
>>>     > x <- altrandomStrings(1e8) head(x) [1]
>>>     > "2PN0bdwPY7CA8M06zVKEkhHgZVgtV1"
>>>     > "5PN2qmWqBlQ9wQj99nsQzldVI5ZuGX" ... etc object.size(1e8)
>>>
>>>     > Object.size will call the set_altstring_Elt_method for
>>>     > every single element, materializing (slowly) every element
>>>     > of the vector.  This is a problem mostly in R-studio since
>>>     > object.size is called automatically, defeating the purpose
>>>     > of alt-rep.
>> There is no sensible way in general to figure out how large the
>> strings would be without computing them. There might be specifically
>> for a deferred sequence conversion but it would require a fair bit of
>> effort to figure out that would be better spent elsewhere.
>>
>> I've never been a big fan of object.size since what it is trying to
>> compute isn't very well defined in the context of sharing and possible
>> internal state changes (even before ALTREP byte code compilation could
>> change the internals of a function [which object.size sees] and
>> assigning into environments or evaluating promises can change
>> environments [which object.size ignores]). The issue is not unlike the
>> one faced by identical(), which has a bunch of options for the
>> different ways objects can be identical, and might need even more.
>>
>> We could in general have object.size for and ALTREP return the
>> object.size results of the current internal representation, but that
>> might not always be appropriate. Again, what object.size is trying to
>> compute isn't very well defined.
>>
>> RStudio does seem to call object.size on every assignment to
>> .GlobalEnv. That might be worth revisiting.
>>
>>
>> Best,
>>
>> luke
>>
>>> Hmm.  But still, the idea had been that object.size()  *shuld*
>>> return the size of the "de-ALTREP'ed" object *but* should not
>>> de-ALTREP it.
>>> That's what happens for integers, but indeed fails to happen for
>>> such as.character(.)ed integers.
>>>
>>>  From my eRum presentation (which took from the official ALTREP
>> documentation
>>> https://svn.r-project.org/R/branches/ALTREP/ALTREP.html ) :
>>>
>>>   > x <- 1:1e15
>>>   > object.size(x) # 8000'000'000'000'048 bytes : 8000 TBytes -- ok, not
>> really
>>>   8000000000000048 bytes
>>>   > is.unsorted(x) # FALSE : i.e., R's *knows* it is sorted
>>>   [1] FALSE
>>>   > xs <- sort(x)  #
>>>   > .Internal(inspect(x))
>>>   @80255f8 14 REALSXP g0c0 [NAM(7)]  1 : 1000000000000000 (compact)
>>>   >
>>>
>>>   > cx <- as.character(x)
>>>   > .Internal(inspect(cx))
>>>   @80485d8 16 STRSXP g0c0 [NAM(1)]   <deferred string conversion>
>>>     @80255f8 14 REALSXP g1c0 [MARK,NAM(7)]  1 : 1000000000000000 (compact)
>>>   > system.time( print(object.size(x)), gc=FALSE)
>>>   8000000000000048 bytes
>>>      user  system elapsed
>>>     0.000   0.000   0.001
>>>   > system.time( print(object.size(cx)), gc=FALSE)
>>>   Error: cannot allocate vector of size 8388608.0 Gb
>>>   Timing stopped at: 11.43 0 11.46
>>>   >
>>>
>>> One could consider it a bug that object.size(cx) is indeed
>>> inspecting every string, i.e., accessing cx[i] for all i.
>>> Note that it is *not*  deALTREPing cx  itself :
>>>
>>>> x <- 1:1e6
>>>> cx <- as.character(x)
>>>> .Internal(inspect(cx))
>>> @7f5b1a0 16 STRSXP g0c0 [NAM(1)]   <deferred string conversion>
>>>   @7f5adb0 13 INTSXP g0c0 [NAM(7)]  1 : 1000000 (compact)
>>>> system.time( print(object.size(cx)), gc=FALSE)
>>> 64000048 bytes
>>>    user  system elapsed
>>>   0.369   0.005   0.374
>>>> .Internal(inspect(cx))
>>> @7f5b1a0 16 STRSXP g0c0 [NAM(7)]   <deferred string conversion>
>>>   @7f5adb0 13 INTSXP g0c0 [NAM(7)]  1 : 1000000 (compact)
>>>     > Is there a way to avoid the problem of forced
>>>     > materialization in rstudio?
>>>
>>>     > PS: Is there a way to tell if a post has been received by
>>>     > the mailing list?  How long does it take to show up in the
>>>     > archives?
>>>
>>> [ that (waiting time) distribution is quite right skewed... I'd
>>>   guess it's median to be less than 10 minutes... but we had
>>>   artificially delayed it somewhat in the past to fight
>>>   spammers, and ETH (the hosting instituttion) and others have
>>>   increased spam and virus filtering so everything has become
>>>   quite a bit slower ]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>      Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tr@ver@c @end|ng |rom gm@||@com  Wed Jan 23 19:27:22 2019
From: tr@ver@c @end|ng |rom gm@||@com (Travers Ching)
Date: Wed, 23 Jan 2019 10:27:22 -0800
Subject: [Rd] 
 Objectsize function visiting every element for alt-rep strings
In-Reply-To: <b43ad328-4342-dfdd-319b-9b21cf05aecb@gmail.com>
References: <CAPLMX9GKS9QQs9WRBYQQc8f1xc3B2OmXu5URLP=BDa6QFHHVVw@mail.gmail.com>
 <23621.35467.558760.525093@stat.math.ethz.ch>
 <alpine.DEB.2.21.1901220950150.2972@luke-Latitude-7480>
 <CAJXgQP1YwQc0GyxFsw4WVMKntjUYi8chC+hX+BJsFH7wh612=A@mail.gmail.com>
 <b43ad328-4342-dfdd-319b-9b21cf05aecb@gmail.com>
Message-ID: <CAPLMX9HE+gGF-AaO6T1XBxiyRt+gXn=UQ+gv+Drg+h60SqViQA@mail.gmail.com>

It should be possible to calculate object.size in the presence of
sharing, at least with respect to all sub-nodes of a SEXP.  E.g.,
during calculation, keep a hash of all SEXP pointers visited.  If a
pointer has already been visited, add only the size of the pointer to
the total object size.

Travers

On Wed, Jan 23, 2019 at 1:33 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 1/22/19 6:17 PM, Kevin Ushey wrote:
> > I think that object.size() is most commonly used to answer the question,
> > "what R objects are consuming the most memory currently in my R session?"
> > and for that reason I think returning the size of the internal
> > representations of objects (for e.g. ALTREP objects; unevaluated promises)
> > is the right default behavior.
>
> I don't think one could answer that question at all in the presence of
> sharing (of objects with value semantics due to copy on write, string
> cache or other caches, sharing of objects with referential semantics
> such as environments, etc). Also the mapping from R objects (SEXPs) to
> what users might understand as objects would not be clear (which SEXPs
> belong to which "object", which SEXPs are too low-level for the user to
> be considered, etc). In principle, there could be a memory profiler
> working at SEXP level and exposing all the intricacies of the memory
> layout, answering reachability questions on a heap dump (so one could
> find out about a 1G integer vector and then list all bindings say in
> namespace environments from which it is reachable), but of course that
> would be a lot of work to implement and to maintain. The problem is not
> unique to R (e.g. see Java with the same problems of sharing that
> prevent meaningful definition for object size). I am not persuaded it
> makes sense to add more options to a function that does not have and
> cannot have a well defined user-level semantics, and I would discourage
> writing code that is trying to build on that function as I think that it
> might lead to confusion and frustration. I think equality for example is
> easier to define (just that one could come up with multiple meaningful
> definitions, so it makes sense to have multiple options).
>
> Best
> Tomas
> >
> > I also agree it would be worth considering adding arguments that control
> > how object.size() is computed for different kinds of R objects, since users
> > might want to use object.size() to answer different types of questions.
> >
> > All that said, if the ultimate goal here is to avoid having RStudio
> > materialize ALTREP objects in the background, then perhaps that change
> > should happen in RStudio :-)
> >
> > Best,
> > Kevin
> >
> > On Tue, Jan 22, 2019 at 8:21 AM Tierney, Luke <luke-tierney at uiowa.edu>
> > wrote:
> >
> >> On Mon, 21 Jan 2019, Martin Maechler wrote:
> >>
> >>>>>>>> Travers Ching
> >>>>>>>>      on Tue, 15 Jan 2019 12:50:45 -0800 writes:
> >>>     > I have a toy alt-rep string package that generates
> >>>     > randomly seeded strings.  example: library(altstringisode)
> >>>     > x <- altrandomStrings(1e8) head(x) [1]
> >>>     > "2PN0bdwPY7CA8M06zVKEkhHgZVgtV1"
> >>>     > "5PN2qmWqBlQ9wQj99nsQzldVI5ZuGX" ... etc object.size(1e8)
> >>>
> >>>     > Object.size will call the set_altstring_Elt_method for
> >>>     > every single element, materializing (slowly) every element
> >>>     > of the vector.  This is a problem mostly in R-studio since
> >>>     > object.size is called automatically, defeating the purpose
> >>>     > of alt-rep.
> >> There is no sensible way in general to figure out how large the
> >> strings would be without computing them. There might be specifically
> >> for a deferred sequence conversion but it would require a fair bit of
> >> effort to figure out that would be better spent elsewhere.
> >>
> >> I've never been a big fan of object.size since what it is trying to
> >> compute isn't very well defined in the context of sharing and possible
> >> internal state changes (even before ALTREP byte code compilation could
> >> change the internals of a function [which object.size sees] and
> >> assigning into environments or evaluating promises can change
> >> environments [which object.size ignores]). The issue is not unlike the
> >> one faced by identical(), which has a bunch of options for the
> >> different ways objects can be identical, and might need even more.
> >>
> >> We could in general have object.size for and ALTREP return the
> >> object.size results of the current internal representation, but that
> >> might not always be appropriate. Again, what object.size is trying to
> >> compute isn't very well defined.
> >>
> >> RStudio does seem to call object.size on every assignment to
> >> .GlobalEnv. That might be worth revisiting.
> >>
> >>
> >> Best,
> >>
> >> luke
> >>
> >>> Hmm.  But still, the idea had been that object.size()  *shuld*
> >>> return the size of the "de-ALTREP'ed" object *but* should not
> >>> de-ALTREP it.
> >>> That's what happens for integers, but indeed fails to happen for
> >>> such as.character(.)ed integers.
> >>>
> >>>  From my eRum presentation (which took from the official ALTREP
> >> documentation
> >>> https://svn.r-project.org/R/branches/ALTREP/ALTREP.html ) :
> >>>
> >>>   > x <- 1:1e15
> >>>   > object.size(x) # 8000'000'000'000'048 bytes : 8000 TBytes -- ok, not
> >> really
> >>>   8000000000000048 bytes
> >>>   > is.unsorted(x) # FALSE : i.e., R's *knows* it is sorted
> >>>   [1] FALSE
> >>>   > xs <- sort(x)  #
> >>>   > .Internal(inspect(x))
> >>>   @80255f8 14 REALSXP g0c0 [NAM(7)]  1 : 1000000000000000 (compact)
> >>>   >
> >>>
> >>>   > cx <- as.character(x)
> >>>   > .Internal(inspect(cx))
> >>>   @80485d8 16 STRSXP g0c0 [NAM(1)]   <deferred string conversion>
> >>>     @80255f8 14 REALSXP g1c0 [MARK,NAM(7)]  1 : 1000000000000000 (compact)
> >>>   > system.time( print(object.size(x)), gc=FALSE)
> >>>   8000000000000048 bytes
> >>>      user  system elapsed
> >>>     0.000   0.000   0.001
> >>>   > system.time( print(object.size(cx)), gc=FALSE)
> >>>   Error: cannot allocate vector of size 8388608.0 Gb
> >>>   Timing stopped at: 11.43 0 11.46
> >>>   >
> >>>
> >>> One could consider it a bug that object.size(cx) is indeed
> >>> inspecting every string, i.e., accessing cx[i] for all i.
> >>> Note that it is *not*  deALTREPing cx  itself :
> >>>
> >>>> x <- 1:1e6
> >>>> cx <- as.character(x)
> >>>> .Internal(inspect(cx))
> >>> @7f5b1a0 16 STRSXP g0c0 [NAM(1)]   <deferred string conversion>
> >>>   @7f5adb0 13 INTSXP g0c0 [NAM(7)]  1 : 1000000 (compact)
> >>>> system.time( print(object.size(cx)), gc=FALSE)
> >>> 64000048 bytes
> >>>    user  system elapsed
> >>>   0.369   0.005   0.374
> >>>> .Internal(inspect(cx))
> >>> @7f5b1a0 16 STRSXP g0c0 [NAM(7)]   <deferred string conversion>
> >>>   @7f5adb0 13 INTSXP g0c0 [NAM(7)]  1 : 1000000 (compact)
> >>>     > Is there a way to avoid the problem of forced
> >>>     > materialization in rstudio?
> >>>
> >>>     > PS: Is there a way to tell if a post has been received by
> >>>     > the mailing list?  How long does it take to show up in the
> >>>     > archives?
> >>>
> >>> [ that (waiting time) distribution is quite right skewed... I'd
> >>>   guess it's median to be less than 10 minutes... but we had
> >>>   artificially delayed it somewhat in the past to fight
> >>>   spammers, and ETH (the hosting instituttion) and others have
> >>>   increased spam and virus filtering so everything has become
> >>>   quite a bit slower ]
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >> --
> >> Luke Tierney
> >> Ralph E. Wareham Professor of Mathematical Sciences
> >> University of Iowa                  Phone:             319-335-3386
> >> Department of Statistics and        Fax:               319-335-3017
> >>      Actuarial Science
> >> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> >> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Thu Jan 24 14:36:24 2019
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (Brodie Gaslam)
Date: Thu, 24 Jan 2019 08:36:24 -0500
Subject: [Rd] Possible setClassUnion Unloading Issue
Message-ID: <43215456-ba4a-4173-c7c4-a0d89604d1ce@yahoo.com>

I'm encountering a problem caused by class unions from unloaded
packages that are referenced by the still-loaded subclasses.  In
essence, when the class union is loaded initially, it registers itself
as a super class of the component classes in the S4 cache.  When the
package the class union lives in is unloaded, it does not undo that
registration.  Here is an MRE of the problems it causes:

     ## the character and NULL basic types, and install it
     testpkg <- tempfile()
     dir.create(file.path(testpkg, 'R'), recursive=TRUE)
     writeLines('', file.path(testpkg, 'NAMESPACE'))
     description <- 'Package: testpkg\nTitle: Textpkg\nVersion: 0.1\n'
     writeLines(description, file.path(testpkg, 'DESCRIPTION'))
     code <- 'setClassUnion("chrOrNULL", c("character", "NULL"))'
     writeLines(code, file.path(testpkg, 'R', 'union.R'))
     install.packages(testpkg, repos=NULL, type='src')

     ## Load the package and check validity of a character object
     library('testpkg')
     validObject('hello')
     ## [1] TRUE

     ## Detach, unload, and confirm that superclass is still attached
     ## to character
     detach('package:testpkg', unload=TRUE)
     getClassDef('character')
     ## Class "character" [package "methods"]
     ##
     ## No Slots, prototype of class "character"
     ##
     ## Extends: "vector", "data.frameRowLabels", "SuperClassMethod", 
"chrOrNULL"
     ##
     ## Known Subclasses:
     ## Class "signature", from data part
     ## Class "className", from data part
     ## Class "ObjectsWithPackage", from data part

     ## `validObject` now fails:
     validObject('hello')
     ## Loading required package: testpkg
     ## Error in validObject("hello") :
     ##   invalid class "character" object: superclass "chrOrNULL" not 
defined
     ##   in the environment of the object's class

     ## But if we run it again it works
     validObject('hello')
     ## [1] TRUE

There are two issues:

1. Whether the dangling superclass association in the `character` (and
    `NULL`) classes after the detach/unload is desirable.
2. That the attempt to reload the package to retrieve the class
    definition fails after the first call to `validObject`, though not
    the second.

I can see how it may be desirable to keep true superclasses associated
with objects, even if somehow the package that contains them is
unloaded.  The case for class unions _seems_ much weaker. I should not
need to reload my package to check validity of something like
'character'.  In my actual use case I had a class that contained
'character' among other things that I was checking with
`validObject(..., complete=TRUE)`.

I attach a patch that adds a cleanup step to `cacheMetaData` which is
kicked off by the package unload process. I grant I'm not an expert in
these matters and there could very well be an important use case where
removing the references is undesirable.

This brings us to the second issue: even if the first patch is
undesirable, `validObject` fails while attempting to reload the class
definition.  I believe the error that occurs when we try to run
`validObject` the first time happens in the `validObject` ->
`getClassDef` -> `.requirePackage` set of calls.  When
`.requirePackage` does not find our package already loaded, it loads,
attaches it, and returns the _package_ environment.  This is different
to what happens when the package namespace is already loaded, in which
case the _namespace_ environment is returned.

The problem with the _package_ environment is that any unexported
class definitions will not be found there.  This is why `validObject`
fails the first time, but works the second.  The first time the
package is loaded and `getClassDef` is given the package env to look
in, but it can't find 'chrOrNULL' because it is not exported.  The
second time `.requirePackage` finds the namespace from the prior load
and returns that, and this does have the class definition.

Since `.requirePackage` is used much more broadly than
`cacheMetaData`, I am reluctant to submit a patch without feedback
from those more knowledgeable of the inner workings of S4.

I ran `make check-all` on a recent version of R-devel with the patch
applied, and everything came back OK.  However, I'm guessing there
isn't much natural testing of unloading packages, so this probably
requires extra scrutiny.

Best,

Brodie


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: methods-patch.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20190124/9daff743/attachment.txt>

From d@v|@ @end|ng |rom r@tud|o@com  Thu Jan 24 14:56:44 2019
From: d@v|@ @end|ng |rom r@tud|o@com (Davis Vaughan)
Date: Thu, 24 Jan 2019 08:56:44 -0500
Subject: [Rd] Inconsistent documentation of the return value of .getXlevels()
Message-ID: <CABzLhzwx25RbuJaNv_Z++h9UnQWac9or8EoYx+JU8ravV50PGQ@mail.gmail.com>

Hi all,

I would like to report an inconsistency in the documentation regarding
.getXlevels(). The return value states that: ".getXlevels returns a named
character vector, or NULL." This is not consistent with what is actually
returned, as seen further below in this message.

I would suggest stating: ".getXlevels returns a named list of character
vectors, or an empty named list."

I would report this directly on bugzilla, but do not have an account. Can
an R Core member here create an account for me as well? davis at rstudio.com
is the email.

Thanks!

# Returns a named list of character vectors
mf <- model.frame(Sepal.Width ~ Species, iris)
termz <- terms(mf)
.getXlevels(termz, mf)
#> $Species
#> [1] "setosa"     "versicolor" "virginica"


# Returns an empty named list
mf2 <- model.frame(Sepal.Width ~ Sepal.Length, iris)
termz2 <- terms(mf2)
.getXlevels(termz2, mf2)
#> named list()

	[[alternative HTML version deleted]]


From d@v|d@kor|k@mp @end|ng |rom o|||@@de  Thu Jan 24 15:51:39 2019
From: d@v|d@kor|k@mp @end|ng |rom o|||@@de (David Korfkamp)
Date: Thu, 24 Jan 2019 15:51:39 +0100
Subject: [Rd] Bug or undocumented behavior in normalizePath() with file
 system links on windows
Message-ID: <OF48B62599.D79E0C5C-ONC125838C.0050BE06-C125838C.0051A286@domino.offis.uni-oldenburg.de>

Hello,

I discovered a bug or undocumented behavior in normalizePath

steps to reproduce:

execute normalizePath on a folder link on windows. When you are on a 
non-english windows box, you likely have links in place for windows' 
default folders, e.g. "C:\Programme" linking to "C:\Program Files" on 
german windows boxes.

Thus executing 'normalizePath("C:/Programme/R")' results in an "
path[1]="C:/Programme/R": Access is denied" error while 
'normalizePath("C:/Program Files/R")' yields the expected result. Just 
executing executing 'normalizePath("C:/Programme")' however also yields 
the expected result,

Cheers
David

-- 
M.Sc. David Korfkamp

OFFIS e.V. - Institut f?r Informatik
FuE Bereich Gesundheit | R&D Division Health
Escherweg 2, 26121 Oldenburg - Germany
Phone/Fax: +49 (0) 441 9722 346 / -111
E-Mail: david.korfkamp at offis.de
URL: http://www.offis.de

Registergericht: Amtsgericht Oldenburg VR 1956 
Vorstand: Prof. Dr.-Ing. Wolfgang H. Nebel (Vorsitzender), Prof. Dr. 
techn. Susanne Boll-Westermann, Prof. Dr.-Ing. Axel Hahn, Prof. Dr.-Ing. 
Andreas Hein, Prof. Dr. Sebastian Lehnhoff 
	[[alternative HTML version deleted]]


From w|||@|@nd@u @end|ng |rom gm@||@com  Fri Jan 25 18:24:14 2019
From: w|||@|@nd@u @end|ng |rom gm@||@com (Will L)
Date: Fri, 25 Jan 2019 12:24:14 -0500
Subject: [Rd] 
 Patch idea: an environment variable for setting the user ID
In-Reply-To: <23529.12236.875063.74972@hornik.net>
References: <CAC-MUvuBmqs31FX2Hv6w2RD7H7bmwXbV9kdWEEHVmzKLZvK+aA@mail.gmail.com>
 <23529.12236.875063.74972@hornik.net>
Message-ID: <CAC-MUvuMTiXDAN1ES9Uk9vAatX=rV5g2V4+PV9DQu1dq_GqMdg@mail.gmail.com>

Thanks, Kurt.

I think I now have enough time to write a patch. What are the steps? I have
read https://www.r-project.org/bugs.html#how-to-submit-patches but I do not
seem to have permission to create a Bugzilla account at
https://bugs.r-project.org/bugzilla/.

Will


On Mon, Nov 12, 2018 at 2:46 AM Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:

> >>>>> Will L writes:
>
> > To R-devel,
> > In `R CMD build`, the ID of the user is automatically inserted into the
> > DESCRIPTION file, e.g.
>
> > Packaged: 2018-11-06 14:01:50 UTC; <MY USER ID>
>
>
> > This is problematic for those of us who work in corporate settings. We
> must
> > not divulge our user IDs in the packages we develop and release.
>
> > Jim Hester pointed out that these two lines in
> > `add_build_stamp_to_description_file()`
> > <
> https://github.com/wch/r-source/blob/521c90a175d67475b9f1b43d7ae68bc48062d8e6/src/library/tools/R/build.R#L170-L171
> >
> > are responsible. Could we consider his suggestion of using an optional
> > environment variable to overwrite the default behavior?
>
> > user <- Sys.getenv("R_BUILD_USERNAME")
> > if (!nzchar(user)) user <- Sys.info()["user"]
> > if(user == "unknown") user <- Sys.getenv("LOGNAME")
>
> Yep, something along these lines should be possible.
> R_BUILD_USER or R_BUILD_LOGNAME may seem more natural though ...
>
> Best
> -k
>
>
>
> > Will Landau
> > --
> > wlandau.github.io
> > linkedin.com/in/wlandau
> > github.com/wlandau
>
> >       [[alternative HTML version deleted]]
>
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
wlandau.github.io
linkedin.com/in/wlandau
github.com/wlandau

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Jan 29 12:18:11 2019
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 29 Jan 2019 12:18:11 +0100
Subject: [Rd] Bug or undocumented behavior in normalizePath() with file
 system links on windows
In-Reply-To: <OF48B62599.D79E0C5C-ONC125838C.0050BE06-C125838C.0051A286@domino.offis.uni-oldenburg.de>
References: <OF48B62599.D79E0C5C-ONC125838C.0050BE06-C125838C.0051A286@domino.offis.uni-oldenburg.de>
Message-ID: <9da22622-3d56-d8d1-131f-5b287a67ed1d@gmail.com>


I think this is caused by insufficient permissions on "C:/Programme" 
junction, and the behavior of normalizePath is as documented. I can get 
the same error with "C:/Documents and Settings", which is on my machine 
a junction into "C:/Users". The path cannot be normalized using 
normalizePath(), because my user account does not have read (listing) 
permissions for the junction "C:/Documents and Settings". This is 
documented in ?normalizePath as one of the reasons for it to signal an 
error (and, on Windows, read permissions for a directory are needed for 
conversion to long path names). Normalization works fine for both 
junctions and symbolic links with sufficient permissions (note that on 
Windows, as documented, links are not resolved; on Unix/POSIX they are, 
by realpath).

Best,
Tomas

On 1/24/19 3:51 PM, David Korfkamp wrote:
> Hello,
>
> I discovered a bug or undocumented behavior in normalizePath
>
> steps to reproduce:
>
> execute normalizePath on a folder link on windows. When you are on a
> non-english windows box, you likely have links in place for windows'
> default folders, e.g. "C:\Programme" linking to "C:\Program Files" on
> german windows boxes.
>
> Thus executing 'normalizePath("C:/Programme/R")' results in an "
> path[1]="C:/Programme/R": Access is denied" error while
> 'normalizePath("C:/Program Files/R")' yields the expected result. Just
> executing executing 'normalizePath("C:/Programme")' however also yields
> the expected result,
>
> Cheers
> David
>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



	[[alternative HTML version deleted]]


From k@@kr @end|ng |rom dtu@dk  Mon Jan 28 09:56:39 2019
From: k@@kr @end|ng |rom dtu@dk (Kasper Kristensen)
Date: Mon, 28 Jan 2019 08:56:39 +0000
Subject: [Rd] nlminb with constraints failing on some platforms
Message-ID: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>

I've noticed unstable behavior of nlminb on some Linux systems. The problem can be reproduced by compiling R-3.5.2 using gcc-8.2 and running the following snippet:

f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
xhat <- rep(1, 10)
abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE

The example works perfectly when removing the bounds. However, when bounds are added the snippet returns 'FALSE'.

An older R version (3.4.4), compiled using the same gcc-8.2, did not have the problem. Between the two versions R has changed the flags to compile Fortran sources:

< SAFE_FFLAGS = -O2 -fomit-frame-pointer -ffloat-store
---
> SAFE_FFLAGS = -O2 -fomit-frame-pointer -msse2 -mfpmath=sse

Reverting to the old SAFE_FFLAGS 'solves' the problem.

> sessionInfo()
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Scientific Linux release 6.4 (Carbon)

Matrix products: default
BLAS/LAPACK: /zdata/groups/nfsopt/intel/2018update3/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so

locale:
[1] C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.5.2



	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Jan 30 14:34:38 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 30 Jan 2019 13:34:38 +0000
Subject: [Rd] R_MAKEVARS_SITE for multiple archs
Message-ID: <CABtg=K=X8sLJ=48njSBeQAZq6vFbXEmsPKC-KhuG8Zp6GHeGXA@mail.gmail.com>

Dear all,

is there a way to set R_MAKEVARS_SITE (or something else), so that R
finds Makevars.site for multiple archs?

AFAICT the only option is to put the arch directories in R.home(). But
I might be missing something.

My goal is to set different make variables for 32-bit and 64-bit R on
Windows, without modifying R.home().

Thank you,
Gabor


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Jan 30 14:39:28 2019
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 30 Jan 2019 13:39:28 +0000
Subject: [Rd] R_MAKEVARS_SITE for multiple archs
In-Reply-To: <CABtg=K=X8sLJ=48njSBeQAZq6vFbXEmsPKC-KhuG8Zp6GHeGXA@mail.gmail.com>
References: <CABtg=K=X8sLJ=48njSBeQAZq6vFbXEmsPKC-KhuG8Zp6GHeGXA@mail.gmail.com>
Message-ID: <CABtg=KncfSUVMiLQxF9jHuSdc_=b=LZV10ofmACj9mPqZvKRyQ@mail.gmail.com>

I guess the user level makevars is just as good, from the admin manual:

> The R system and package-specific compilation flags can be overridden or added to by setting the appropriate Make variables in the personal file HOME/.R/Makevars-R_PLATFORM (but HOME/.R/Makevars.win or HOME/.R/Makevars.win64 on Windows), or if that does not exist, HOME/.R/Makevars,

This should do.

Gabor

On Wed, Jan 30, 2019 at 1:34 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> Dear all,
>
> is there a way to set R_MAKEVARS_SITE (or something else), so that R
> finds Makevars.site for multiple archs?
>
> AFAICT the only option is to put the arch directories in R.home(). But
> I might be missing something.
>
> My goal is to set different make variables for 32-bit and 64-bit R on
> Windows, without modifying R.home().
>
> Thank you,
> Gabor


From tr@ver@c @end|ng |rom gm@||@com  Thu Jan 31 09:10:15 2019
From: tr@ver@c @end|ng |rom gm@||@com (Travers Ching)
Date: Thu, 31 Jan 2019 08:10:15 -0000
Subject: [Rd] Object.size() should not visit every element for alt-rep
 strings, or there should be an altstring_objectsize_method
Message-ID: <CAPLMX9FwLRo_whXQpGArrfghj2ckX7B0pW+b=6QdO=E68fS37g-7184@mail.gmail.com>


Below is a toy alt-rep string example, that generates N random strings:

https://gist.github.com/traversc/a48a504eb062554f2d6ff8043ca16f9c

example:
`x <- altrandomStrings(1e8)`
`head(x)`
[1] "2PN0bdwPY7CA8M06zVKEkhHgZVgtV1" "5PN2qmWqBlQ9wQj99nsQzldVI5ZuGX" ...
`object.size(1e8)`

Object.size will call the `set_altstring_Elt_method` for every single
element, materializing (slowly) every element of the vector.  This is
a problem mostly in R-studio since object.size is called
automatically, defeating the purpose of alt-rep entirely.


From |uke-t|erney @end|ng |rom u|ow@@edu  Thu Jan 31 14:35:34 2019
From: |uke-t|erney @end|ng |rom u|ow@@edu (Tierney, Luke)
Date: Thu, 31 Jan 2019 13:35:34 +0000
Subject: [Rd] Object.size() should not visit every element for alt-rep
 strings, or there should be an altstring_objectsize_method
In-Reply-To: <CAPLMX9FwLRo_whXQpGArrfghj2ckX7B0pW+b=6QdO=E68fS37g-7184@mail.gmail.com>
References: <CAPLMX9FwLRo_whXQpGArrfghj2ckX7B0pW+b=6QdO=E68fS37g-7184@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.1901310727400.3127@luke-Latitude-7480>

You should really take this up with RStudio. Calling object.size on
every top level assignment as they appear to do is a bad idea, even
without ALTREP. object.size is only a cheap operation for simple
atomic vectors. For anything with recursive sturcture it needs to walk
the object, so the effort is proprtional to object size:

> x <- rep("A", 1e8)
> system.time(object.size(x))
    user  system elapsed
   1.222   0.624   1.850 
> x <- rep(list(1), 1e8)
> system.time(object.size(x))
    user  system elapsed
   1.247   0.022   1.273

The current help for object.size says

      Provides an estimate of the memory that is being used to store an
      R object.

If this is interpreted as the current memory use, which could change
in the ALTREP context (or for environments, though there the changes
are ignored), then we could define object.size for ALTREP objects to
avoid any ALTREP-specific computation. I'm not convinced yet that this
is a good idea, but it even if we do change this at the R level,
RStudio would still be well-advised to have another look at what they
are doing.

Best,

luke

On Tue, 15 Jan 2019, Travers Ching wrote:

>
> Below is a toy alt-rep string example, that generates N random strings:
>
> https://gist.github.com/traversc/a48a504eb062554f2d6ff8043ca16f9c
>
> example:
> `x <- altrandomStrings(1e8)`
> `head(x)`
> [1] "2PN0bdwPY7CA8M06zVKEkhHgZVgtV1" "5PN2qmWqBlQ9wQj99nsQzldVI5ZuGX" ...
> `object.size(1e8)`
>
> Object.size will call the `set_altstring_Elt_method` for every single
> element, materializing (slowly) every element of the vector.  This is
> a problem mostly in R-studio since object.size is called
> automatically, defeating the purpose of alt-rep entirely.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From pro|jcn@@h @end|ng |rom gm@||@com  Thu Jan 31 14:45:07 2019
From: pro|jcn@@h @end|ng |rom gm@||@com (ProfJCNash)
Date: Thu, 31 Jan 2019 08:45:07 -0500
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
References: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
Message-ID: <3cbd19df-544b-aeef-7d30-bbbfe9839e48@gmail.com>

This is not about the failure on some platforms, which is an important
issue. However, what is below may provide a temporary workaround until
the source of the problem is uncovered.

FWIW, the problem seems fairly straightforward for most optimizers at my
disposal in the R-forge (developmental) version of the optimx package at
https://r-forge.r-project.org/projects/optimizer/

I used the code

## KKristensen19nlminb.R
f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
xhat <- rep(1, 10)
abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
opt
library(optimx)
optx <- opm(rep(0,10), f, lower=-1, upper=3, method="ALL")
summary(optx, order=value)
optxc <- opm(rep(0,10), f, gr="grcentral", lower=-1, upper=3, method="ALL")
summary(optxc, order=value)
optxn <- opm(rep(0,10), f, gr="grnd", lower=-1, upper=3, method="ALL")
summary(optxn, order=value)

It should not be too difficult to actually supply the gradient, which
would give speedier and more reliable outcomes.


JN



On 2019-01-28 3:56 a.m., Kasper Kristensen via R-devel wrote:
> I've noticed unstable behavior of nlminb on some Linux systems. The problem can be reproduced by compiling R-3.5.2 using gcc-8.2 and running the following snippet:
> 
> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> xhat <- rep(1, 10)
> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> 
> The example works perfectly when removing the bounds. However, when bounds are added the snippet returns 'FALSE'.
> 
> An older R version (3.4.4), compiled using the same gcc-8.2, did not have the problem. Between the two versions R has changed the flags to compile Fortran sources:
> 
> < SAFE_FFLAGS = -O2 -fomit-frame-pointer -ffloat-store
> ---
>> SAFE_FFLAGS = -O2 -fomit-frame-pointer -msse2 -mfpmath=sse
> 
> Reverting to the old SAFE_FFLAGS 'solves' the problem.
> 
>> sessionInfo()
> R version 3.5.2 (2018-12-20)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Scientific Linux release 6.4 (Carbon)
> 
> Matrix products: default
> BLAS/LAPACK: /zdata/groups/nfsopt/intel/2018update3/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so
> 
> locale:
> [1] C
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.5.2
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pro|@@m|t@m|tt@| @end|ng |rom gm@||@com  Thu Jan 31 15:26:52 2019
From: pro|@@m|t@m|tt@| @end|ng |rom gm@||@com (Amit Mittal)
Date: Thu, 31 Jan 2019 19:56:52 +0530
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <3cbd19df-544b-aeef-7d30-bbbfe9839e48@gmail.com>
References: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
 <3cbd19df-544b-aeef-7d30-bbbfe9839e48@gmail.com>
Message-ID: <CAP8zaQB+9NCihJxCC34Ox6xh2u61DLjGCHJi5cv0wV3H58DmSw@mail.gmail.com>

Prof Nash, Prof Galanos

Is it possible to use a generic code stub in front of packages that use
optimx to improve optimx use or curtail it according to the requirements?


Best Regards

Amit

+91 7899381263











 ________________________________________________________________________

Please request Skype as available

5th Year FPM (Ph.D.) in Finance and Accounting Area

Indian Institute of Management, Lucknow, (U.P.) 226013 India

http://bit.ly/2A2PhD

AEA Job profile : http://bit.ly/AEAamit

FMA 2 page profile : http://bit.ly/FMApdf2p
SSRN top10% downloaded since July 2017: http://ssrn.com/author=2665511
________________________________________________________________________


On Thu, Jan 31, 2019 at 7:22 PM ProfJCNash <profjcnash at gmail.com> wrote:

> This is not about the failure on some platforms, which is an important
> issue. However, what is below may provide a temporary workaround until
> the source of the problem is uncovered.
>
> FWIW, the problem seems fairly straightforward for most optimizers at my
> disposal in the R-forge (developmental) version of the optimx package at
> https://r-forge.r-project.org/projects/optimizer/
>
> I used the code
>
> ## KKristensen19nlminb.R
> f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> xhat <- rep(1, 10)
> abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> opt
> library(optimx)
> optx <- opm(rep(0,10), f, lower=-1, upper=3, method="ALL")
> summary(optx, order=value)
> optxc <- opm(rep(0,10), f, gr="grcentral", lower=-1, upper=3, method="ALL")
> summary(optxc, order=value)
> optxn <- opm(rep(0,10), f, gr="grnd", lower=-1, upper=3, method="ALL")
> summary(optxn, order=value)
>
> It should not be too difficult to actually supply the gradient, which
> would give speedier and more reliable outcomes.
>
>
> JN
>
>
>
> On 2019-01-28 3:56 a.m., Kasper Kristensen via R-devel wrote:
> > I've noticed unstable behavior of nlminb on some Linux systems. The
> problem can be reproduced by compiling R-3.5.2 using gcc-8.2 and running
> the following snippet:
> >
> > f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
> > opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
> > xhat <- rep(1, 10)
> > abs( opt$objective - f(xhat) ) < 1e-4  ## Must be TRUE
> >
> > The example works perfectly when removing the bounds. However, when
> bounds are added the snippet returns 'FALSE'.
> >
> > An older R version (3.4.4), compiled using the same gcc-8.2, did not
> have the problem. Between the two versions R has changed the flags to
> compile Fortran sources:
> >
> > < SAFE_FFLAGS = -O2 -fomit-frame-pointer -ffloat-store
> > ---
> >> SAFE_FFLAGS = -O2 -fomit-frame-pointer -msse2 -mfpmath=sse
> >
> > Reverting to the old SAFE_FFLAGS 'solves' the problem.
> >
> >> sessionInfo()
> > R version 3.5.2 (2018-12-20)
> > Platform: x86_64-pc-linux-gnu (64-bit)
> > Running under: Scientific Linux release 6.4 (Carbon)
> >
> > Matrix products: default
> > BLAS/LAPACK:
> /zdata/groups/nfsopt/intel/2018update3/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so
> >
> > locale:
> > [1] C
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_3.5.2
> >
> >
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From ||nde|o| @end|ng |rom |eee@org  Thu Jan 31 15:32:01 2019
From: ||nde|o| @end|ng |rom |eee@org (David Lindelof)
Date: Thu, 31 Jan 2019 15:32:01 +0100
Subject: [Rd] Runnable R packages
In-Reply-To: <CALEXWq2mJ=r7t4Z2akQGe1vDhu9RdHikYCGqdZy_xS1nx=YMnw@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
 <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
 <CALEXWq2mJ=r7t4Z2akQGe1vDhu9RdHikYCGqdZy_xS1nx=YMnw@mail.gmail.com>
Message-ID: <CAKtMxAGkVRfgvND1sm2Ukn8Z2ocAov+E0sb+eCRBOuS4vjiTYw@mail.gmail.com>

Belated thanks to all who replied to my initial query. In summary, three
approaches have been mentioned to run R code "in production": 1)
ShinyProxy, mentioned by Tobias, for deploying Shiny applications; 2)
Docker-like solutions, mentioned by Gergely and I?aki; and 3) Solutions
based on Rscript or littler, mentioned by Dirk.

I can't speak to 1) because I don't currently use Shiny. And it seems to me
that Docker-like solutions will still need some "point of entry" for the R
application, which will have to be Rscript or littler.

In my first email, I observed that Rscript expects a single expression or a
single script, which is probably why (in my experience) many data
scientists tend to provide their code in a very limited number of files.
Gergely disagreed, arguing to the contrary that data scientists are
encouraged to provide their application as an R package called by a short
script executed by Rscript. But this doesn't happen where I work for
several reasons:

   - it implies installing your package on the production machine(s),
   including its dependencies, which must be done by hand
   - some machine learning platforms will simply not accept code provided
   as an R package
   - we have some "big data" use cases for which we need Spark; Spark can
   run R or Python code, but only when it is provided as a single file. (On
   the other hand, Spark can run applications provided as JAR files)

In summary, I'm convinced R would benefit from something similar to Java's
`Main-Class` header or Python's `__main__()` function. A new R CMD command
would take a package, install its dependencies, and run its "main"
function. If we have this machinery available, we could even consider
reaching out to Spark (and other tech stacks) developers and make it easier
to develop R applications for those platforms.

A candid comment from Dirk suggested that I should implement this myself,
which I would be happy to do, provided this is the normal procedure. Or is
there a more formal process I should follow?

Kind regards,

David Lindel?f

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Jan 31 16:26:00 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 31 Jan 2019 10:26:00 -0500
Subject: [Rd] Runnable R packages
In-Reply-To: <CAKtMxAGkVRfgvND1sm2Ukn8Z2ocAov+E0sb+eCRBOuS4vjiTYw@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
 <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
 <CALEXWq2mJ=r7t4Z2akQGe1vDhu9RdHikYCGqdZy_xS1nx=YMnw@mail.gmail.com>
 <CAKtMxAGkVRfgvND1sm2Ukn8Z2ocAov+E0sb+eCRBOuS4vjiTYw@mail.gmail.com>
Message-ID: <e161ab77-28f5-56c2-8f08-73d7dede3b88@gmail.com>

On 31/01/2019 9:32 a.m., David Lindelof wrote:
> Belated thanks to all who replied to my initial query. In summary, three
> approaches have been mentioned to run R code "in production": 1)
> ShinyProxy, mentioned by Tobias, for deploying Shiny applications; 2)
> Docker-like solutions, mentioned by Gergely and I?aki; and 3) Solutions
> based on Rscript or littler, mentioned by Dirk.
> 
> I can't speak to 1) because I don't currently use Shiny. And it seems to me
> that Docker-like solutions will still need some "point of entry" for the R
> application, which will have to be Rscript or littler.
> 
> In my first email, I observed that Rscript expects a single expression or a
> single script, which is probably why (in my experience) many data
> scientists tend to provide their code in a very limited number of files.
> Gergely disagreed, arguing to the contrary that data scientists are
> encouraged to provide their application as an R package called by a short
> script executed by Rscript. But this doesn't happen where I work for
> several reasons:
> 
>     - it implies installing your package on the production machine(s),
>     including its dependencies, which must be done by hand
>     - some machine learning platforms will simply not accept code provided
>     as an R package
>     - we have some "big data" use cases for which we need Spark; Spark can
>     run R or Python code, but only when it is provided as a single file. (On
>     the other hand, Spark can run applications provided as JAR files)
> 
> In summary, I'm convinced R would benefit from something similar to Java's
> `Main-Class` header or Python's `__main__()` function. A new R CMD command
> would take a package, install its dependencies, and run its "main"
> function. If we have this machinery available, we could even consider
> reaching out to Spark (and other tech stacks) developers and make it easier
> to develop R applications for those platforms.
> 
> A candid comment from Dirk suggested that I should implement this myself,
> which I would be happy to do, provided this is the normal procedure. Or is
> there a more formal process I should follow?

You can't implement it to run under R CMD, but it should be 
straightforward to put this in an R package, to be run by Rscript using 
something like

   Rscript -e "yourpackage::run_main('somepackage')"

You can use the installation code from the `remotes` package, so 
run_main() could be a pretty simple function.

Duncan Murdoch


From b@row||ng@on @end|ng |rom |@nc@@ter@@c@uk  Thu Jan 31 16:38:34 2019
From: b@row||ng@on @end|ng |rom |@nc@@ter@@c@uk (Barry Rowlingson)
Date: Thu, 31 Jan 2019 15:38:34 +0000
Subject: [Rd] Runnable R packages
In-Reply-To: <72b511b92df64f69ab43f2ce5c654584@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
 <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
 <CALEXWq2mJ=r7t4Z2akQGe1vDhu9RdHikYCGqdZy_xS1nx=YMnw@mail.gmail.com>
 <72b511b92df64f69ab43f2ce5c654584@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
Message-ID: <CANVKczOZcSz0YLuKiWfdU0x3qMP0GvUAdqDgp32rmrPfHmK1tA@mail.gmail.com>

On Thu, Jan 31, 2019 at 3:14 PM David Lindelof <lindelof at ieee.org> wrote:

>
> In summary, I'm convinced R would benefit from something similar to Java's
> `Main-Class` header or Python's `__main__()` function. A new R CMD command
> would take a package, install its dependencies, and run its "main"
> function.



I just created and built a very boilerplate R package called "runme". I can
install its dependencies and run its "main" function with:

 $ R CMD INSTALL runme_0.0.0.9000.tar.gz
 $ R -e 'runme::main()'

No new R CMDs needed. Now my choice of "main" is arbitrary, whereas with
python and java and C the entrypoint is more tightly specified (__name__ ==
"__main__" in python, int main(..) in C and so on). But I don't think
that's much of a problem.

Does that not satisfy your requirements close enough? If you want it in one
line then:

R CMD INSTALL runme_0.0.0.9000.tar.gz && R -e 'runme::main()'

will do the second if the first succeeds (Unix shells).

You could write a script for $RHOME/bin/RUN which would be a two-liner and
that could mandate the use of "main" as an entry point. But good luck
getting anything into base R.

Barry




> If we have this machinery available, we could even consider
> reaching out to Spark (and other tech stacks) developers and make it easier
> to develop R applications for those platforms.
>
>

	[[alternative HTML version deleted]]


From ||nde|o| @end|ng |rom |eee@org  Thu Jan 31 16:56:31 2019
From: ||nde|o| @end|ng |rom |eee@org (David Lindelof)
Date: Thu, 31 Jan 2019 16:56:31 +0100
Subject: [Rd] Runnable R packages
In-Reply-To: <CANVKczOZcSz0YLuKiWfdU0x3qMP0GvUAdqDgp32rmrPfHmK1tA@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
 <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
 <CALEXWq2mJ=r7t4Z2akQGe1vDhu9RdHikYCGqdZy_xS1nx=YMnw@mail.gmail.com>
 <72b511b92df64f69ab43f2ce5c654584@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczOZcSz0YLuKiWfdU0x3qMP0GvUAdqDgp32rmrPfHmK1tA@mail.gmail.com>
Message-ID: <CAKtMxAHuV1dioQbty8SHpgg15qvHfAheCNN+7qZ1JFuricAjJA@mail.gmail.com>

Would you care to share how your package installs its own dependencies? I
assume this is done during the call to `main()`? (Last time I checked, R
CMD INSTALL would not install a package's dependencies...)


On Thu, Jan 31, 2019 at 4:38 PM Barry Rowlingson <
b.rowlingson at lancaster.ac.uk> wrote:

>
>
> On Thu, Jan 31, 2019 at 3:14 PM David Lindelof <lindelof at ieee.org> wrote:
>
>>
>> In summary, I'm convinced R would benefit from something similar to Java's
>> `Main-Class` header or Python's `__main__()` function. A new R CMD command
>> would take a package, install its dependencies, and run its "main"
>> function.
>
>
>
> I just created and built a very boilerplate R package called "runme". I
> can install its dependencies and run its "main" function with:
>
>  $ R CMD INSTALL runme_0.0.0.9000.tar.gz
>  $ R -e 'runme::main()'
>
> No new R CMDs needed. Now my choice of "main" is arbitrary, whereas with
> python and java and C the entrypoint is more tightly specified (__name__ ==
> "__main__" in python, int main(..) in C and so on). But I don't think
> that's much of a problem.
>
> Does that not satisfy your requirements close enough? If you want it in
> one line then:
>
> R CMD INSTALL runme_0.0.0.9000.tar.gz && R -e 'runme::main()'
>
> will do the second if the first succeeds (Unix shells).
>
> You could write a script for $RHOME/bin/RUN which would be a two-liner and
> that could mandate the use of "main" as an entry point. But good luck
> getting anything into base R.
>
> Barry
>
>
>
>
>> If we have this machinery available, we could even consider
>> reaching out to Spark (and other tech stacks) developers and make it
>> easier
>> to develop R applications for those platforms.
>>
>>
>
>

	[[alternative HTML version deleted]]


From j@goreck| @end|ng |rom w|t@edu@p|  Thu Jan 31 16:56:48 2019
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Thu, 31 Jan 2019 21:26:48 +0530
Subject: [Rd] Runnable R packages
In-Reply-To: <CANVKczOZcSz0YLuKiWfdU0x3qMP0GvUAdqDgp32rmrPfHmK1tA@mail.gmail.com>
References: <CAKtMxAFYFafUHOitKEUbRSPxXVgHd+sWe_937YHNHJOyNEm_3g@mail.gmail.com>
 <CAKtMxAHmoT=L211CJbyB034bY0ddyY8jg_QqB+LgWZCm_XgL3Q@mail.gmail.com>
 <CAPvvxJX_EFOE26vU4zBH_T2LuP7tRgV_CJx4LsvP6eN8PLZNLQ@mail.gmail.com>
 <CALEXWq2mJ=r7t4Z2akQGe1vDhu9RdHikYCGqdZy_xS1nx=YMnw@mail.gmail.com>
 <72b511b92df64f69ab43f2ce5c654584@LNXP265MB1705.GBRP265.PROD.OUTLOOK.COM>
 <CANVKczOZcSz0YLuKiWfdU0x3qMP0GvUAdqDgp32rmrPfHmK1tA@mail.gmail.com>
Message-ID: <CAOO9MKWMPw8gT_G=UGx0T6Arm7q_1KiFgF7nXt7N0zmyiNoPYQ@mail.gmail.com>

Quoting:

"In summary, I'm convinced R would benefit from something similar to Java's
`Main-Class` header or Python's `__main__()` function. A new R CMD command
would take a package, install its dependencies, and run its "main"
function."

This kind of increase the scope of your idea. New command in R CMD to
redirect to "main" is interesting idea. On the other hand it will
impose limitation on user comparing to the way how you could do it
now: Rscript -e 'mypkg::mymain("myparam")' (or littler, it should be
shipped with R IMO).
For production system one doesn't want to just "install its
dependencies". First dependencies has to be mirrored and their version
frozen. Then testing your package on that set of dependencies. Once
successfully done then same set of packages should be used for
production deployment. For those processes you might find tools4pkgs
branch in base R useful (packages.dcf, mirror.packages functions),
unfortunately not merged:
https://github.com/wch/r-source/compare/tools4pkgs

Jan Gorecki

On Thu, Jan 31, 2019 at 9:08 PM Barry Rowlingson
<b.rowlingson at lancaster.ac.uk> wrote:
>
> On Thu, Jan 31, 2019 at 3:14 PM David Lindelof <lindelof at ieee.org> wrote:
>
> >
> > In summary, I'm convinced R would benefit from something similar to Java's
> > `Main-Class` header or Python's `__main__()` function. A new R CMD command
> > would take a package, install its dependencies, and run its "main"
> > function.
>
>
>
> I just created and built a very boilerplate R package called "runme". I can
> install its dependencies and run its "main" function with:
>
>  $ R CMD INSTALL runme_0.0.0.9000.tar.gz
>  $ R -e 'runme::main()'
>
> No new R CMDs needed. Now my choice of "main" is arbitrary, whereas with
> python and java and C the entrypoint is more tightly specified (__name__ ==
> "__main__" in python, int main(..) in C and so on). But I don't think
> that's much of a problem.
>
> Does that not satisfy your requirements close enough? If you want it in one
> line then:
>
> R CMD INSTALL runme_0.0.0.9000.tar.gz && R -e 'runme::main()'
>
> will do the second if the first succeeds (Unix shells).
>
> You could write a script for $RHOME/bin/RUN which would be a two-liner and
> that could mandate the use of "main" as an entry point. But good luck
> getting anything into base R.
>
> Barry
>
>
>
>
> > If we have this machinery available, we could even consider
> > reaching out to Spark (and other tech stacks) developers and make it easier
> > to develop R applications for those platforms.
> >
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tr@ver@c @end|ng |rom gm@||@com  Thu Jan 31 17:02:35 2019
From: tr@ver@c @end|ng |rom gm@||@com (Travers Ching)
Date: Thu, 31 Jan 2019 08:02:35 -0800
Subject: [Rd] Object.size() should not visit every element for alt-rep
 strings, or there should be an altstring_objectsize_method
In-Reply-To: <alpine.DEB.2.21.1901310727400.3127@luke-Latitude-7480>
References: <CAPLMX9FwLRo_whXQpGArrfghj2ckX7B0pW+b=6QdO=E68fS37g-7184@mail.gmail.com>
 <alpine.DEB.2.21.1901310727400.3127@luke-Latitude-7480>
Message-ID: <CAPLMX9Fj-o3MFvO42Xziir8r9+SJpwtf7A1BmKC5V-2MdtoA4w@mail.gmail.com>

Hi Lujke,

Thanks for the response.  But for some reason, this is a duplicate
post I had sent WEEKS ago, but for some reason is only showing up now?
 I initially thought it was filtered out and detected as spam because
of the github link, so I re-wrote the email (several times in fact),
and you can see the other thread.   Very weird.

Also, the good people at rstudio seem to have fixed the issue!

Thanks
Travers

On Thu, Jan 31, 2019 at 5:35 AM Tierney, Luke <luke-tierney at uiowa.edu> wrote:
>
> You should really take this up with RStudio. Calling object.size on
> every top level assignment as they appear to do is a bad idea, even
> without ALTREP. object.size is only a cheap operation for simple
> atomic vectors. For anything with recursive sturcture it needs to walk
> the object, so the effort is proprtional to object size:
>
> > x <- rep("A", 1e8)
> > system.time(object.size(x))
>     user  system elapsed
>    1.222   0.624   1.850
> > x <- rep(list(1), 1e8)
> > system.time(object.size(x))
>     user  system elapsed
>    1.247   0.022   1.273
>
> The current help for object.size says
>
>       Provides an estimate of the memory that is being used to store an
>       R object.
>
> If this is interpreted as the current memory use, which could change
> in the ALTREP context (or for environments, though there the changes
> are ignored), then we could define object.size for ALTREP objects to
> avoid any ALTREP-specific computation. I'm not convinced yet that this
> is a good idea, but it even if we do change this at the R level,
> RStudio would still be well-advised to have another look at what they
> are doing.
>
> Best,
>
> luke
>
> On Tue, 15 Jan 2019, Travers Ching wrote:
>
> >
> > Below is a toy alt-rep string example, that generates N random strings:
> >
> > https://gist.github.com/traversc/a48a504eb062554f2d6ff8043ca16f9c
> >
> > example:
> > `x <- altrandomStrings(1e8)`
> > `head(x)`
> > [1] "2PN0bdwPY7CA8M06zVKEkhHgZVgtV1" "5PN2qmWqBlQ9wQj99nsQzldVI5ZuGX" ...
> > `object.size(1e8)`
> >
> > Object.size will call the `set_altstring_Elt_method` for every single
> > element, materializing (slowly) every element of the vector.  This is
> > a problem mostly in R-studio since object.size is called
> > automatically, defeating the purpose of alt-rep entirely.
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From pro|jcn@@h @end|ng |rom gm@||@com  Thu Jan 31 19:32:31 2019
From: pro|jcn@@h @end|ng |rom gm@||@com (ProfJCNash)
Date: Thu, 31 Jan 2019 13:32:31 -0500
Subject: [Rd] nlminb with constraints failing on some platforms
In-Reply-To: <CAP8zaQB+9NCihJxCC34Ox6xh2u61DLjGCHJi5cv0wV3H58DmSw@mail.gmail.com>
References: <b83bb3a0e9674e198eb53d3682171804@dtu.dk>
 <3cbd19df-544b-aeef-7d30-bbbfe9839e48@gmail.com>
 <CAP8zaQB+9NCihJxCC34Ox6xh2u61DLjGCHJi5cv0wV3H58DmSw@mail.gmail.com>
Message-ID: <f8c1343f-6600-3303-7ad5-c3444bf1c098@gmail.com>

I'm not entirely sure what you are asking. However, optimx is really NOT
meant as a production tool. I intend it as a way to
1) try out a lot of optimizers quickly on a user's problem or problem
class to select a method or methods that suit well;
2) to provide (in the source code of optimr()) an example of how to
call the particular optimizers. They all have a lot of different syntax
elements, which in fact are the biggest headache in building and
extending optimx.

Best, JN

On 2019-01-31 9:26 a.m., Amit Mittal wrote:
> Prof Nash, Prof Galanos
> 
> Is it possible to use a generic code stub in front of packages that use
> optimx to improve optimx use or curtail it according to the requirements?
> 
> 
> Best Regards
> 
> Amit
> 
> +91 7899381263
> 
> ?
> 
> ?
> 
> ?
> 
> ?
> 
> ?
> 
> ?________________________________________________________________________
> 
> Please request Skype as available?
> 
> 5^th ?Year FPM (Ph.D.) in Finance and Accounting Area
> 
> Indian Institute of Management, Lucknow, (U.P.) 226013 India
> 
> http://bit.ly/2A2PhD
> 
> AEA Job profile :?http://bit.ly/AEAamit
> 
> FMA 2 page profile :?http://bit.ly/FMApdf2p
> 
> SSRN top10% downloaded since July 2017:?http://ssrn.com/author=2665511
> ________________________________________________________________________
> 
> 
> On Thu, Jan 31, 2019 at 7:22 PM ProfJCNash <profjcnash at gmail.com
> <mailto:profjcnash at gmail.com>> wrote:
> 
>     This is not about the failure on some platforms, which is an important
>     issue. However, what is below may provide a temporary workaround until
>     the source of the problem is uncovered.
> 
>     FWIW, the problem seems fairly straightforward for most optimizers at my
>     disposal in the R-forge (developmental) version of the optimx package at
>     https://r-forge.r-project.org/projects/optimizer/
> 
>     I used the code
> 
>     ## KKristensen19nlminb.R
>     f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
>     opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
>     xhat <- rep(1, 10)
>     abs( opt$objective - f(xhat) ) < 1e-4? ## Must be TRUE
>     opt
>     library(optimx)
>     optx <- opm(rep(0,10), f, lower=-1, upper=3, method="ALL")
>     summary(optx, order=value)
>     optxc <- opm(rep(0,10), f, gr="grcentral", lower=-1, upper=3,
>     method="ALL")
>     summary(optxc, order=value)
>     optxn <- opm(rep(0,10), f, gr="grnd", lower=-1, upper=3, method="ALL")
>     summary(optxn, order=value)
> 
>     It should not be too difficult to actually supply the gradient, which
>     would give speedier and more reliable outcomes.
> 
> 
>     JN
> 
> 
> 
>     On 2019-01-28 3:56 a.m., Kasper Kristensen via R-devel wrote:
>     > I've noticed unstable behavior of nlminb on some Linux systems.
>     The problem can be reproduced by compiling R-3.5.2 using gcc-8.2 and
>     running the following snippet:
>     >
>     > f <- function(x) sum( log(diff(x)^2+.01) + (x[1]-1)^2 )
>     > opt <- nlminb(rep(0, 10), f, lower=-1, upper=3)
>     > xhat <- rep(1, 10)
>     > abs( opt$objective - f(xhat) ) < 1e-4? ## Must be TRUE
>     >
>     > The example works perfectly when removing the bounds. However,
>     when bounds are added the snippet returns 'FALSE'.
>     >
>     > An older R version (3.4.4), compiled using the same gcc-8.2, did
>     not have the problem. Between the two versions R has changed the
>     flags to compile Fortran sources:
>     >
>     > < SAFE_FFLAGS = -O2 -fomit-frame-pointer -ffloat-store
>     > ---
>     >> SAFE_FFLAGS = -O2 -fomit-frame-pointer -msse2 -mfpmath=sse
>     >
>     > Reverting to the old SAFE_FFLAGS 'solves' the problem.
>     >
>     >> sessionInfo()
>     > R version 3.5.2 (2018-12-20)
>     > Platform: x86_64-pc-linux-gnu (64-bit)
>     > Running under: Scientific Linux release 6.4 (Carbon)
>     >
>     > Matrix products: default
>     > BLAS/LAPACK:
>     /zdata/groups/nfsopt/intel/2018update3/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so
>     >
>     > locale:
>     > [1] C
>     >
>     > attached base packages:
>     > [1] stats? ? ?graphics? grDevices utils? ? ?datasets? methods? ?base
>     >
>     > loaded via a namespace (and not attached):
>     > [1] compiler_3.5.2
>     >
>     >
>     >
>     >? ? ? ?[[alternative HTML version deleted]]
>     >
>     > ______________________________________________
>     > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>


