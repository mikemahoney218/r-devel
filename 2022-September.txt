From benj@m|n@rede||ng@ @end|ng |rom gm@||@com  Thu Sep  1 14:12:29 2022
From: benj@m|n@rede||ng@ @end|ng |rom gm@||@com (Benjamin Redelings)
Date: Thu, 1 Sep 2022 08:12:29 -0400
Subject: [Rd] [External] Re:  Pipe operator status, placeholders?
In-Reply-To: <3434293-d79-697c-734c-3b3c617a357e@uiowa.edu>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
 <3434293-d79-697c-734c-3b3c617a357e@uiowa.edu>
Message-ID: <321fe733-62e9-94bb-ff20-8a3daef96d41@gmail.com>

Hi,

Did you manage to get to a blog post at some point?

I just saw that there was an live-streaming lecture on August 4th - 
https://sms.wgtn.ac.nz/cgi-bin/seminars?rm=details&id=987

Was this perhaps recorded anywhere?

-BenRI


On 4/21/22 11:57 AM, luke-tierney at uiowa.edu wrote:
> At some point there will probably be a blog post about the design of
> the forward pipe operator in base, but that is not something I will
> think about until after the current semester is over and my backlog of
> other things is cleared.
>
> Best,
>
> luke
>
> On Tue, 19 Apr 2022, peter dalgaard wrote:
>
>> You probably want Luke Tierney for the full story, but what I gather 
>> from the deliberations (on the private R-core list), there are issues 
>> with how non-funcall syntax like lm(....) |> _$coef[2] should work. 
>> This, in turn, has to do with wanting to have the placeholder occur 
>> only as a toplevel substitution (i.e. "["("$"(_, coef), 2) is a 
>> no-go. And the reason for that has to do with the way the pipe works 
>> in the absense of placeholder, e.g. the parser gets confused by
>>
>>> x |> f(g(x=_))
>> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>>
>> -pd
>>
>>> On 17 Apr 2022, at 01:04 , Benjamin Redelings 
>>> <benjamin.redelings at gmail.com> wrote:
>>>
>>> Hi,
>>>
>>> I see that R 4.2 adds the underscore _ as a placeholder for the new 
>>> forward pipe operator |> , but only for named arguments. The reason 
>>> why placeholders for position arguments was NOT added isn't clear to 
>>> me, so I've been looking for the discussion around the introduction 
>>> of the placeholder.
>>>
>>> By searching subject lines in the r-devel mailing list archive, I've 
>>> found
>>>
>>> https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html
>>>
>>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html
>>>
>>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html and 
>>> following messages
>>>
>>> but not much else.
>>>
>>> 1. Am I looking in the wrong place?
>>>
>>> 2. What is the reasoning behind allowing _ as a placeholder only for 
>>> named arguments?
>>>
>>> take care,
>>>
>>> -BenRI
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Fri Sep  2 06:17:37 2022
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Fri, 2 Sep 2022 16:17:37 +1200
Subject: [Rd] [External] Re: Pipe operator status, placeholders?
In-Reply-To: <321fe733-62e9-94bb-ff20-8a3daef96d41@gmail.com>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
 <3434293-d79-697c-734c-3b3c617a357e@uiowa.edu>
 <321fe733-62e9-94bb-ff20-8a3daef96d41@gmail.com>
Message-ID: <387b44ec-9a5a-6296-13de-499359d535dd@stat.auckland.ac.nz>

Hi

Luke's Ihaka Lecture is now on You Tube ...

https://youtu.be/IMpXB30MP48

Paul

On 2/09/2022 12:12 am, Benjamin Redelings wrote:
> Hi,
> 
> Did you manage to get to a blog post at some point?
> 
> I just saw that there was an live-streaming lecture on August 4th -
> https://sms.wgtn.ac.nz/cgi-bin/seminars?rm=details&id=987 
> <https://sms.wgtn.ac.nz/cgi-bin/seminars?rm=details&id=987>
> 
> Was this perhaps recorded anywhere?
> 
> -BenRI
> 
> 
> On 4/21/22 11:57 AM, luke-tierney at uiowa.edu wrote:
>  > At some point there will probably be a blog post about the design of
>  > the forward pipe operator in base, but that is not something I will
>  > think about until after the current semester is over and my backlog of
>  > other things is cleared.
>  >
>  > Best,
>  >
>  > luke
>  >
>  > On Tue, 19 Apr 2022, peter dalgaard wrote:
>  >
>  >> You probably want Luke Tierney for the full story, but what I gather
>  >> from the deliberations (on the private R-core list), there are issues
>  >> with how non-funcall syntax like lm(....) |> _$coef[2] should work.
>  >> This, in turn, has to do with wanting to have the placeholder occur
>  >> only as a toplevel substitution (i.e. "["("$"(_, coef), 2) is a
>  >> no-go. And the reason for that has to do with the way the pipe works
>  >> in the absense of placeholder, e.g. the parser gets confused by
>  >>
>  >>> x |> f(g(x=_))
>  >> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>  >>
>  >> -pd
>  >>
>  >>> On 17 Apr 2022, at 01:04 , Benjamin Redelings
>  >>> <benjamin.redelings at gmail.com> wrote:
>  >>>
>  >>> Hi,
>  >>>
>  >>> I see that R 4.2 adds the underscore _ as a placeholder for the new
>  >>> forward pipe operator |> , but only for named arguments. The reason
>  >>> why placeholders for position arguments was NOT added isn't clear to
>  >>> me, so I've been looking for the discussion around the introduction
>  >>> of the placeholder.
>  >>>
>  >>> By searching subject lines in the r-devel mailing list archive, I've
>  >>> found
>  >>>
>  >>> https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html 
> <https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html>
>  >>>
>  >>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html 
> <https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html>
>  >>>
>  >>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html 
> <https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html> 
> and
>  >>> following messages
>  >>>
>  >>> but not much else.
>  >>>
>  >>> 1. Am I looking in the wrong place?
>  >>>
>  >>> 2. What is the reasoning behind allowing _ as a placeholder only for
>  >>> named arguments?
>  >>>
>  >>> take care,
>  >>>
>  >>> -BenRI
>  >>>
>  >>> ______________________________________________
>  >>> R-devel at r-project.org mailing list
>  >>> https://stat.ethz.ch/mailman/listinfo/r-devel 
> <https://stat.ethz.ch/mailman/listinfo/r-devel>
>  >>
>  >>
>  >
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel 
> <https://stat.ethz.ch/mailman/listinfo/r-devel>

-- 
Dr Paul Murrell
Te Kura Tatauranga | Department of Statistics
Waipapa Taumata Rau | The University of Auckland
Private Bag 92019, Auckland, New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
www.stat.auckland.ac.nz/~paul/


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Sep  2 11:30:06 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 2 Sep 2022 11:30:06 +0200
Subject: [Rd] R_check_class_etc(x,
 valid) is "slow" when 'valid' contains class(x)
In-Reply-To: <1e01976b-f819-cc97-f8fe-81755ec85a03@gmail.com>
References: <1e01976b-f819-cc97-f8fe-81755ec85a03@gmail.com>
Message-ID: <ccf592e5-bd6b-6857-7d1d-0ed9af2092b5@gmail.com>

Hi Mikael,

On 8/28/22 01:13, Mikael Jagan wrote:
> R_check_class_etc(x, valid) spends a nontrivial amount of time finding
> an environment 'rho' containing the definition of class(x), evaluating
> (in R, not C) methods::.classEnv(class(x)).
>
> It then returns the result of R_check_class_and_super(x, valid, rho).
> But R_check_class_and_super() does not use 'rho' at all in the trivial
> case where class(x) is found in 'valid'.
right, that could be improved. Do you have an example which exhibits the 
problem, have you found this by profiling something?
>
> My feeling is that this can be improved.? I am happy to contribute a 
> patch,
> if it would be considered by R-core.

Both R_check_class_etc and R_check_class_and_super are unfortunately 
exported, the former is used a lot in packages (even though they are not 
mentioned in Writing R Extensions, so actually shouldn't be used in 
packages). Anyway, it would be easier if we could preserve their 
interface and behavior.

Maybe we could support rho==NULL in R_check_class_and_super, the 
environment would be looked up in that case when needed. 
R_check_class_etc would simply only call R_check_class_and_super with 
that argument. I see that R_check_class_and_super uses asChar() on the 
class attribute, while R_check_class_etc does not currently for looking 
for the environment, but I assume doing that in both cases should not 
matter (and it would have to be tested).

So this would be a trivial change, but if you wanted to create a minimal 
patch, I will be happy to have a look.

Best
Tomas


> Mikael
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@g@nmn2 @end|ng |rom gm@||@com  Fri Sep  2 14:51:17 2022
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Fri, 2 Sep 2022 08:51:17 -0400
Subject: [Rd] R_check_class_etc(x,
 valid) is "slow" when 'valid' contains class(x)
In-Reply-To: <ccf592e5-bd6b-6857-7d1d-0ed9af2092b5@gmail.com>
References: <1e01976b-f819-cc97-f8fe-81755ec85a03@gmail.com>
 <ccf592e5-bd6b-6857-7d1d-0ed9af2092b5@gmail.com>
Message-ID: <f4f35bc9-8c82-cfac-1647-b52391101400@gmail.com>



On 2022-09-02 5:30 am, Tomas Kalibera wrote:
> Hi Mikael,
> 
> On 8/28/22 01:13, Mikael Jagan wrote:
>> R_check_class_etc(x, valid) spends a nontrivial amount of time finding
>> an environment 'rho' containing the definition of class(x), evaluating
>> (in R, not C) methods::.classEnv(class(x)).
>>
>> It then returns the result of R_check_class_and_super(x, valid, rho).
>> But R_check_class_and_super() does not use 'rho' at all in the trivial
>> case where class(x) is found in 'valid'.
> right, that could be improved. Do you have an example which exhibits the 
> problem, have you found this by profiling something?
I benchmarked .Call("R_etc", x) for x <- new("dgTMatrix"), after compiling
and loading the following:

```
#include <Rinternals.h>

SEXP R_etc(SEXP x) {
     static const char *valid[] = {"dgCMatrix", "dgRMatrix", "dgTMatrix", ""};
     return ScalarInteger(R_check_class_etc(x, valid));
}
```

R-devel used ~2 microseconds while my patched version of R used ~0.2
microseconds.  So, not a bottleneck by any means.  On the other hand,
'Matrix' and probably other packages do call R_check_class_etc() quite
often, hence my report.

>>
>> My feeling is that this can be improved.? I am happy to contribute a patch,
>> if it would be considered by R-core.
> 
> Both R_check_class_etc and R_check_class_and_super are unfortunately exported, 
> the former is used a lot in packages (even though they are not mentioned in 
> Writing R Extensions, so actually shouldn't be used in packages). Anyway, it 
> would be easier if we could preserve their interface and behavior.
> 
> Maybe we could support rho==NULL in R_check_class_and_super, the environment 
> would be looked up in that case when needed. R_check_class_etc would simply only 
> call R_check_class_and_super with that argument. I see that 
> R_check_class_and_super uses asChar() on the class attribute, while 
> R_check_class_etc does not currently for looking for the environment, but I 
> assume doing that in both cases should not matter (and it would have to be tested).
> 
> So this would be a trivial change, but if you wanted to create a minimal patch, 
> I will be happy to have a look.

I've implemented essentially what you've described; see attached.

Mikael

> 
> Best
> Tomas
> 
> 
>> Mikael
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: patch.diff
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20220902/7e17c4be/attachment.ksh>

From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Mon Sep  5 15:36:30 2022
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (NP))
Date: Mon, 5 Sep 2022 13:36:30 +0000
Subject: [Rd] Passing a call as label to text() works differently when the
 call involves paste() vs paste0()
Message-ID: <d6a1ccfe0082445b8f74a32f1e511e48@UM-MAIL3214.unimaas.nl>

Hi all,

Maybe a bit of an esoteric observation, but the second one doesn't work properly:

x <- 2
plot(NA, xlim=c(0,1), ylim=c(0,1))
text(0.5, 0.55, bquote(paste("x =", .(x))))
text(0.5, 0.45, bquote(paste0("x = ", .(x))))

Note that this has nothing to do in particular with bquote(). This is the same issue:

plot(NA, xlim=c(0,1), ylim=c(0,1))
text(0.5, 0.55, as.call(list(quote(paste), "x =", 2)))
text(0.5, 0.45, as.call(list(quote(paste0), "x = ", 2)))

I had a look at C_text in plot.c, but couldn't figure out why the second one is treated differently.

Best,
Wolfgang


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Sep  5 15:49:19 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 5 Sep 2022 09:49:19 -0400
Subject: [Rd] 
 Passing a call as label to text() works differently when the
 call involves paste() vs paste0()
In-Reply-To: <d6a1ccfe0082445b8f74a32f1e511e48@UM-MAIL3214.unimaas.nl>
References: <d6a1ccfe0082445b8f74a32f1e511e48@UM-MAIL3214.unimaas.nl>
Message-ID: <1b8e2e6d-60ae-c7a1-b3ab-9e146d17c1b8@gmail.com>

On 05/09/2022 9:36 a.m., Viechtbauer, Wolfgang (NP) wrote:
> Hi all,
> 
> Maybe a bit of an esoteric observation, but the second one doesn't work properly:
> 
> x <- 2
> plot(NA, xlim=c(0,1), ylim=c(0,1))
> text(0.5, 0.55, bquote(paste("x =", .(x))))
> text(0.5, 0.45, bquote(paste0("x = ", .(x))))
> 
> Note that this has nothing to do in particular with bquote(). This is the same issue:
> 
> plot(NA, xlim=c(0,1), ylim=c(0,1))
> text(0.5, 0.55, as.call(list(quote(paste), "x =", 2)))
> text(0.5, 0.45, as.call(list(quote(paste0), "x = ", 2)))
> 
> I had a look at C_text in plot.c, but couldn't figure out why the second one is treated differently.

You're using plotmath code, which is documented in ?plotmath.

It doesn't execute paste(), it just uses that name for a similar 
operation.  There's no operation named paste0(), so that doesn't work.

The paste() operation doesn't add space, so it's more like paste0() in 
any case.

Duncan Murdoch


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Mon Sep  5 15:59:56 2022
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (NP))
Date: Mon, 5 Sep 2022 13:59:56 +0000
Subject: [Rd] 
 Passing a call as label to text() works differently when the
 call involves paste() vs paste0()
In-Reply-To: <1b8e2e6d-60ae-c7a1-b3ab-9e146d17c1b8@gmail.com>
References: <d6a1ccfe0082445b8f74a32f1e511e48@UM-MAIL3214.unimaas.nl>
 <1b8e2e6d-60ae-c7a1-b3ab-9e146d17c1b8@gmail.com>
Message-ID: <ca3458a0b3374fd8ae3ec59e611e0a7e@UM-MAIL3214.unimaas.nl>

Got it, thanks!

Best,
Wolfgang

>-----Original Message-----
>From: Duncan Murdoch [mailto:murdoch.duncan at gmail.com]
>Sent: Monday, 05 September, 2022 15:49
>To: Viechtbauer, Wolfgang (NP); R-devel at r-project.org
>Subject: Re: [Rd] Passing a call as label to text() works differently when the
>call involves paste() vs paste0()
>
>On 05/09/2022 9:36 a.m., Viechtbauer, Wolfgang (NP) wrote:
>> Hi all,
>>
>> Maybe a bit of an esoteric observation, but the second one doesn't work
>properly:
>>
>> x <- 2
>> plot(NA, xlim=c(0,1), ylim=c(0,1))
>> text(0.5, 0.55, bquote(paste("x =", .(x))))
>> text(0.5, 0.45, bquote(paste0("x = ", .(x))))
>>
>> Note that this has nothing to do in particular with bquote(). This is the same
>issue:
>>
>> plot(NA, xlim=c(0,1), ylim=c(0,1))
>> text(0.5, 0.55, as.call(list(quote(paste), "x =", 2)))
>> text(0.5, 0.45, as.call(list(quote(paste0), "x = ", 2)))
>>
>> I had a look at C_text in plot.c, but couldn't figure out why the second one is
>treated differently.
>
>You're using plotmath code, which is documented in ?plotmath.
>
>It doesn't execute paste(), it just uses that name for a similar
>operation.  There's no operation named paste0(), so that doesn't work.
>
>The paste() operation doesn't add space, so it's more like paste0() in
>any case.
>
>Duncan Murdoch

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Sep  8 15:23:40 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 8 Sep 2022 15:23:40 +0200
Subject: [Rd] R_check_class_etc(x,
 valid) is "slow" when 'valid' contains class(x)
In-Reply-To: <f4f35bc9-8c82-cfac-1647-b52391101400@gmail.com>
References: <1e01976b-f819-cc97-f8fe-81755ec85a03@gmail.com>
 <ccf592e5-bd6b-6857-7d1d-0ed9af2092b5@gmail.com>
 <f4f35bc9-8c82-cfac-1647-b52391101400@gmail.com>
Message-ID: <21b6b923-4833-2d6f-5c19-48aec8d46e7c@gmail.com>


On 02/09/2022 14:51, Mikael Jagan wrote:
>
>
> On 2022-09-02 5:30 am, Tomas Kalibera wrote:
>> Hi Mikael,
>>
>> On 8/28/22 01:13, Mikael Jagan wrote:
>>> R_check_class_etc(x, valid) spends a nontrivial amount of time finding
>>> an environment 'rho' containing the definition of class(x), evaluating
>>> (in R, not C) methods::.classEnv(class(x)).
>>>
>>> It then returns the result of R_check_class_and_super(x, valid, rho).
>>> But R_check_class_and_super() does not use 'rho' at all in the trivial
>>> case where class(x) is found in 'valid'.
>> right, that could be improved. Do you have an example which exhibits 
>> the problem, have you found this by profiling something?
> I benchmarked .Call("R_etc", x) for x <- new("dgTMatrix"), after 
> compiling
> and loading the following:
>
> ```
> #include <Rinternals.h>
>
> SEXP R_etc(SEXP x) {
> ??? static const char *valid[] = {"dgCMatrix", "dgRMatrix", 
> "dgTMatrix", ""};
> ??? return ScalarInteger(R_check_class_etc(x, valid));
> }
> ```
>
> R-devel used ~2 microseconds while my patched version of R used ~0.2
> microseconds.? So, not a bottleneck by any means.? On the other hand,
> 'Matrix' and probably other packages do call R_check_class_etc() quite
> often, hence my report.
I see, ideally one would have a real scenario with a real performance 
issue leading to this. With a micro-benchmark, one could come up with 
pretty much arbitrary speedup, so it is harder to judge whether an 
optimization is actually worth the effort, the risk of introducing bugs 
and sometimes the added complexity.
>>>
>>> My feeling is that this can be improved.? I am happy to contribute a 
>>> patch,
>>> if it would be considered by R-core.
>>
>> Both R_check_class_etc and R_check_class_and_super are unfortunately 
>> exported, the former is used a lot in packages (even though they are 
>> not mentioned in Writing R Extensions, so actually shouldn't be used 
>> in packages). Anyway, it would be easier if we could preserve their 
>> interface and behavior.
>>
>> Maybe we could support rho==NULL in R_check_class_and_super, the 
>> environment would be looked up in that case when needed. 
>> R_check_class_etc would simply only call R_check_class_and_super with 
>> that argument. I see that R_check_class_and_super uses asChar() on 
>> the class attribute, while R_check_class_etc does not currently for 
>> looking for the environment, but I assume doing that in both cases 
>> should not matter (and it would have to be tested).
>>
>> So this would be a trivial change, but if you wanted to create a 
>> minimal patch, I will be happy to have a look.
>
> I've implemented essentially what you've described; see attached.

Thanks, I've restored the original behavior with pkg == R_NilValue (note 
rho was R_GlobalEnv), I've used C NULL to mark the special mode when 
"rho" should be found, and I made some small tweaks. I will add after 
more testing, if the results are ok.

Best
Tomas

>
> Mikael
>
>>
>> Best
>> Tomas
>>
>>
>>> Mikael
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@g@nmn2 @end|ng |rom gm@||@com  Thu Sep  8 18:44:30 2022
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Thu, 8 Sep 2022 12:44:30 -0400
Subject: [Rd] R_check_class_etc(x,
 valid) is "slow" when 'valid' contains class(x)
In-Reply-To: <21b6b923-4833-2d6f-5c19-48aec8d46e7c@gmail.com>
References: <1e01976b-f819-cc97-f8fe-81755ec85a03@gmail.com>
 <ccf592e5-bd6b-6857-7d1d-0ed9af2092b5@gmail.com>
 <f4f35bc9-8c82-cfac-1647-b52391101400@gmail.com>
 <21b6b923-4833-2d6f-5c19-48aec8d46e7c@gmail.com>
Message-ID: <3bc0a3c5-cc05-55e3-09ed-a4f40b5e6433@gmail.com>



On 2022-09-08 9:23 am, Tomas Kalibera wrote:
> 
> On 02/09/2022 14:51, Mikael Jagan wrote:
>>
>>
>> On 2022-09-02 5:30 am, Tomas Kalibera wrote:
>>> Hi Mikael,
>>>
>>> On 8/28/22 01:13, Mikael Jagan wrote:
>>>> R_check_class_etc(x, valid) spends a nontrivial amount of time finding
>>>> an environment 'rho' containing the definition of class(x), evaluating
>>>> (in R, not C) methods::.classEnv(class(x)).
>>>>
>>>> It then returns the result of R_check_class_and_super(x, valid, rho).
>>>> But R_check_class_and_super() does not use 'rho' at all in the trivial
>>>> case where class(x) is found in 'valid'.
>>> right, that could be improved. Do you have an example which exhibits the 
>>> problem, have you found this by profiling something?
>> I benchmarked .Call("R_etc", x) for x <- new("dgTMatrix"), after compiling
>> and loading the following:
>>
>> ```
>> #include <Rinternals.h>
>>
>> SEXP R_etc(SEXP x) {
>> ??? static const char *valid[] = {"dgCMatrix", "dgRMatrix", "dgTMatrix", ""};
>> ??? return ScalarInteger(R_check_class_etc(x, valid));
>> }
>> ```
>>
>> R-devel used ~2 microseconds while my patched version of R used ~0.2
>> microseconds.? So, not a bottleneck by any means.? On the other hand,
>> 'Matrix' and probably other packages do call R_check_class_etc() quite
>> often, hence my report.
> I see, ideally one would have a real scenario with a real performance issue 
> leading to this. With a micro-benchmark, one could come up with pretty much 
> arbitrary speedup, so it is harder to judge whether an optimization is actually 
> worth the effort, the risk of introducing bugs and sometimes the added complexity.

Yes.  I _was_ at first thinking about a less artificial example
(and in retrospect I probably should have led with that):

## install.packages("Matrix", repos = "http://R-Forge.R-project.org")
library(Matrix)
n <- 10L
x <- new("dgeMatrix", Dim = c(n, n), x = as.double(seq_len(n^2)))
microbenchmark::microbenchmark(t(x))

where the 't' method calls the C-level unpackedMatrix_transpose(),
which in turn calls R_check_class_etc().

>>>>
>>>> My feeling is that this can be improved.? I am happy to contribute a patch,
>>>> if it would be considered by R-core.
>>>
>>> Both R_check_class_etc and R_check_class_and_super are unfortunately 
>>> exported, the former is used a lot in packages (even though they are not 
>>> mentioned in Writing R Extensions, so actually shouldn't be used in 
>>> packages). Anyway, it would be easier if we could preserve their interface 
>>> and behavior.
>>>
>>> Maybe we could support rho==NULL in R_check_class_and_super, the environment 
>>> would be looked up in that case when needed. R_check_class_etc would simply 
>>> only call R_check_class_and_super with that argument. I see that 
>>> R_check_class_and_super uses asChar() on the class attribute, while 
>>> R_check_class_etc does not currently for looking for the environment, but I 
>>> assume doing that in both cases should not matter (and it would have to be 
>>> tested).
>>>
>>> So this would be a trivial change, but if you wanted to create a minimal 
>>> patch, I will be happy to have a look.
>>
>> I've implemented essentially what you've described; see attached.
> 
> Thanks, I've restored the original behavior with pkg == R_NilValue (note rho was 
> R_GlobalEnv), I've used C NULL to mark the special mode when "rho" should be 
> found, and I made some small tweaks. I will add after more testing, if the 
> results are ok.

Makes sense - thanks for catching that.

Mikael

> 
> Best
> Tomas
> 
>>
>> Mikael
>>
>>>
>>> Best
>>> Tomas
>>>
>>>
>>>> Mikael
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@g|||e@p|e @end|ng |rom gm@||@com  Fri Sep  9 19:33:09 2022
From: c@g|||e@p|e @end|ng |rom gm@||@com (Colin Gillespie)
Date: Fri, 9 Sep 2022 18:33:09 +0100
Subject: [Rd] Duplicated mirrors on available packages
Message-ID: <CADbDLZmXY5133qb89vo05eww1VbtkOsUVaeXLzkJo-zRW+SGPw@mail.gmail.com>

Hi

When there are duplicated repos, available.packages() takes
significantly longer to run.

For example

mirror = "https://cloud.r-project.org/"
system.time(available.packages(repos = mirror))
#   user  system elapsed
# 1.054   0.031   1.245
system.time(available.packages(repos = c(mirror, mirror)))
#   user  system elapsed
# 22.389   0.037  22.429

Best wishes,

Colin


> sessionInfo()
R version 4.2.0 (2022-04-22)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 22.04.1 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3
LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so

locale:
 [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8
 [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8
 [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.2.0 tools_4.2.0


Dr Colin Gillespie
https://twitter.com/csgillespie


From m@x|m@n@z@rov @end|ng |rom open@n@|yt|c@@eu  Mon Sep 12 10:57:43 2022
From: m@x|m@n@z@rov @end|ng |rom open@n@|yt|c@@eu (Maxim Nazarov)
Date: Mon, 12 Sep 2022 08:57:43 +0000
Subject: [Rd] Duplicated mirrors on available packages
In-Reply-To: <CADbDLZmXY5133qb89vo05eww1VbtkOsUVaeXLzkJo-zRW+SGPw@mail.gmail.com>
References: <CADbDLZmXY5133qb89vo05eww1VbtkOsUVaeXLzkJo-zRW+SGPw@mail.gmail.com>
Message-ID: <0102018330eb2f22-5b6669be-b3fa-4ebf-a1dd-8a8cee8efbc3-000000@eu-west-1.amazonses.com>

If you profile the second run, you will see that the majority of the time is spent in the `tools:::.remove_stale_dups` function, which loops over all duplicated packages - so all packages in that case.
One improvement I could think of is to replace the first line of that function
    pkgs <- ap[, "Package"]
with
    pkgs <- ap[!duplicated(ap[, c("Package", "Version")]), "Package"]
which would help in your example, but the function might still run longer if there are many packages with different versions present, so there maybe even better optimizations.

Stating the obvious here, but since we don't know your 'real' use case, adding a `unique` call to the `repos` argument of the `available.packages` would achieve a similar improvement without any modifications needed from `tools`.

Kind regards,
Maxim Nazarov

----- Original Message -----
From: "Colin Gillespie" <csgillespie at gmail.com>
To: "r-devel" <r-devel at r-project.org>
Sent: Friday, September 9, 2022 7:33:09 PM
Subject: [Rd] Duplicated mirrors on available packages

Hi

When there are duplicated repos, available.packages() takes
significantly longer to run.

For example

mirror = "https://cloud.r-project.org/"
system.time(available.packages(repos = mirror))
#   user  system elapsed
# 1.054   0.031   1.245
system.time(available.packages(repos = c(mirror, mirror)))
#   user  system elapsed
# 22.389   0.037  22.429

Best wishes,

Colin


> sessionInfo()
R version 4.2.0 (2022-04-22)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 22.04.1 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3
LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so

locale:
 [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8
 [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8
 [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.2.0 tools_4.2.0


Dr Colin Gillespie
https://twitter.com/csgillespie

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From c@g|||e@p|e @end|ng |rom gm@||@com  Mon Sep 12 11:08:38 2022
From: c@g|||e@p|e @end|ng |rom gm@||@com (Colin Gillespie)
Date: Mon, 12 Sep 2022 10:08:38 +0100
Subject: [Rd] Duplicated mirrors on available packages
In-Reply-To: <0102018330eb2f22-5b6669be-b3fa-4ebf-a1dd-8a8cee8efbc3-000000@eu-west-1.amazonses.com>
References: <CADbDLZmXY5133qb89vo05eww1VbtkOsUVaeXLzkJo-zRW+SGPw@mail.gmail.com>
 <0102018330eb2f22-5b6669be-b3fa-4ebf-a1dd-8a8cee8efbc3-000000@eu-west-1.amazonses.com>
Message-ID: <CADbDLZn2ok6omoboz1cfgcsf-YfkesrNCkvq_EZFJZQ9Tv4EDg@mail.gmail.com>

The use case came from the rig application
(https://github.com/r-lib/rig). Rig (I think) inserts the RStudio
package manager into the list of repos. This can cause duplication in
repos, hence the current issue.
Now that I know the reason, I can work around it.



On Mon, 12 Sept 2022 at 09:57, Maxim Nazarov
<maxim.nazarov at openanalytics.eu> wrote:
>
> If you profile the second run, you will see that the majority of the time is spent in the `tools:::.remove_stale_dups` function, which loops over all duplicated packages - so all packages in that case.
> One improvement I could think of is to replace the first line of that function
>     pkgs <- ap[, "Package"]
> with
>     pkgs <- ap[!duplicated(ap[, c("Package", "Version")]), "Package"]
> which would help in your example, but the function might still run longer if there are many packages with different versions present, so there maybe even better optimizations.
>
> Stating the obvious here, but since we don't know your 'real' use case, adding a `unique` call to the `repos` argument of the `available.packages` would achieve a similar improvement without any modifications needed from `tools`.
>
> Kind regards,
> Maxim Nazarov
>
> ----- Original Message -----
> From: "Colin Gillespie" <csgillespie at gmail.com>
> To: "r-devel" <r-devel at r-project.org>
> Sent: Friday, September 9, 2022 7:33:09 PM
> Subject: [Rd] Duplicated mirrors on available packages
>
> Hi
>
> When there are duplicated repos, available.packages() takes
> significantly longer to run.
>
> For example
>
> mirror = "https://cloud.r-project.org/"
> system.time(available.packages(repos = mirror))
> #   user  system elapsed
> # 1.054   0.031   1.245
> system.time(available.packages(repos = c(mirror, mirror)))
> #   user  system elapsed
> # 22.389   0.037  22.429
>
> Best wishes,
>
> Colin
>
>
> > sessionInfo()
> R version 4.2.0 (2022-04-22)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 22.04.1 LTS
>
> Matrix products: default
> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3
> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so
>
> locale:
>  [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C
>  [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8
>  [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8
>  [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C
>  [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.2.0 tools_4.2.0
>
>
> Dr Colin Gillespie
> https://twitter.com/csgillespie
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Tue Sep 13 14:02:04 2022
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Tue, 13 Sep 2022 14:02:04 +0200
Subject: [Rd] Duplicated mirrors on available packages
In-Reply-To: <CADbDLZn2ok6omoboz1cfgcsf-YfkesrNCkvq_EZFJZQ9Tv4EDg@mail.gmail.com>
References: <CADbDLZmXY5133qb89vo05eww1VbtkOsUVaeXLzkJo-zRW+SGPw@mail.gmail.com>
 <0102018330eb2f22-5b6669be-b3fa-4ebf-a1dd-8a8cee8efbc3-000000@eu-west-1.amazonses.com>
 <CADbDLZn2ok6omoboz1cfgcsf-YfkesrNCkvq_EZFJZQ9Tv4EDg@mail.gmail.com>
Message-ID: <25376.28988.687109.926647@hornik.net>

>>>>> Colin Gillespie writes:

> The use case came from the rig application
> (https://github.com/r-lib/rig). Rig (I think) inserts the RStudio
> package manager into the list of repos. This can cause duplication in
> repos, hence the current issue.
> Now that I know the reason, I can work around it.

Thanks for reporting this issue.  I just changed available.packages() a
la

-    for(repos in contriburl) {
+    for(repos in unique(contriburl)) {

which avoids the full duplication.

Best
-k

> On Mon, 12 Sept 2022 at 09:57, Maxim Nazarov
> <maxim.nazarov at openanalytics.eu> wrote:
>> 
>> If you profile the second run, you will see that the majority of the time is spent in the `tools:::.remove_stale_dups` function, which loops over all duplicated packages - so all packages in that case.
>> One improvement I could think of is to replace the first line of that function
>> pkgs <- ap[, "Package"]
>> with
>> pkgs <- ap[!duplicated(ap[, c("Package", "Version")]), "Package"]
>> which would help in your example, but the function might still run longer if there are many packages with different versions present, so there maybe even better optimizations.
>> 
>> Stating the obvious here, but since we don't know your 'real' use case, adding a `unique` call to the `repos` argument of the `available.packages` would achieve a similar improvement without any modifications needed from `tools`.
>> 
>> Kind regards,
>> Maxim Nazarov
>> 
>> ----- Original Message -----
>> From: "Colin Gillespie" <csgillespie at gmail.com>
>> To: "r-devel" <r-devel at r-project.org>
>> Sent: Friday, September 9, 2022 7:33:09 PM
>> Subject: [Rd] Duplicated mirrors on available packages
>> 
>> Hi
>> 
>> When there are duplicated repos, available.packages() takes
>> significantly longer to run.
>> 
>> For example
>> 
>> mirror = "https://cloud.r-project.org/"
>> system.time(available.packages(repos = mirror))
>> #   user  system elapsed
>> # 1.054   0.031   1.245
>> system.time(available.packages(repos = c(mirror, mirror)))
>> #   user  system elapsed
>> # 22.389   0.037  22.429
>> 
>> Best wishes,
>> 
>> Colin
>> 
>> 
>> > sessionInfo()
>> R version 4.2.0 (2022-04-22)
>> Platform: x86_64-pc-linux-gnu (64-bit)
>> Running under: Ubuntu 22.04.1 LTS
>> 
>> Matrix products: default
>> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3
>> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so
>> 
>> locale:
>> [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C
>> [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8
>> [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8
>> [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C
>> [9] LC_ADDRESS=C               LC_TELEPHONE=C
>> [11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C
>> 
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>> 
>> loaded via a namespace (and not attached):
>> [1] compiler_4.2.0 tools_4.2.0
>> 
>> 
>> Dr Colin Gillespie
>> https://twitter.com/csgillespie
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@g@nmn2 @end|ng |rom gm@||@com  Tue Sep 13 23:45:13 2022
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Tue, 13 Sep 2022 17:45:13 -0400
Subject: [Rd] Should package version requirements assume installation from
 sources?
Message-ID: <b3e53fa9-b0e0-a8c8-147a-c1c56348f3e9@gmail.com>

[Arguably also appropriate for R-package-devel, but posted to R-devel
     as the discussion is aimed primarily at "experts" ... ]

We, the authors of Matrix, have encountered a somewhat subtle issue
induced by caching of S4 classes and methods in package namespaces.

The namespaces of three reverse dependent packages (SeuratObject, conText,
mcmcsae) cache the formal definition of our virtual class Matrix (and some
subclasses).  For example:

 > ns <- asNamespace("SeuratObject")
 > grep("^[.]__C__.*Matrix$", names(ns), value = TRUE)
[1] ".__C__dMatrix"       ".__C__compMatrix"    ".__C__AnyMatrix"
[4] ".__C__generalMatrix" ".__C__CsparseMatrix" ".__C__sparseMatrix"
[7] ".__C__dsparseMatrix" ".__C__Matrix"

The cached definition (which includes a _validity method_) is obtained from
the version of Matrix available when the reverse dependent package was built
from sources.  For example, if SeuratObject was built under Matrix 1.4-1,
then we get:

 > getValidity(ns$.__C__Matrix)
function (object)
{
     if (!isTRUE(r <- .Call(Dim_validate, object, "Matrix")))
         r
     else .Call(dimNames_validate, object)
}
<bytecode: 0x11e7ca508>
<environment: namespace:Matrix>

whereas if SeuratObject was built under Matrix >= 1.5-0, then we get:

 > getValidity(ns$.__C__Matrix)
function (object)
.Call(Matrix_validate, object)
<bytecode: 0x107dc1698>
<environment: namespace:Matrix>

There are two "questions" here:

1.  The symbol 'Matrix_validate' is not defined until Matrix 1.5-0.
     Is it necessary, for this reason alone, for SeuratObject to have
     'Imports: Matrix (>= 1.5-0)'?  Or can SeuratObject continue using
     'Imports: Matrix (>= 1.3-3)', at the risk of errors like

     > Error: object 'Matrix_validate' not found

     (as already seen here: https://stackoverflow.com/questions/73700130)?

     Note that this error would not occur for anyone installing SeuratObject
     from sources, unless they decide to _downgrade_ Matrix after doing so.
     Hence this primarily concerns Windows and macOS where R users would
     typically install a binary built by CRAN (i.e., not on their system).

     We are aware that package TMB tests in .onLoad() that the current Matrix
     version is equal to or greater than the version available at build time,
     thus avoiding a "strict" version requirement, but do not want this practice
     to spread ...

2.  For how long should Matrix retain the superceded 'Dim_validate' and
     'dimNames_validate', in order to ensure that "stale" cached validity
     methods continue to work?

We hope that this discussion will highlight the potential ramifications
of importing classes and methods from other packages, and having one's
classes and methods imported _by_ other packages, especially for version
requirements.

Mikael, Martin, and Doug


From hp@ge@@on@g|thub @end|ng |rom gm@||@com  Wed Sep 14 01:11:54 2022
From: hp@ge@@on@g|thub @end|ng |rom gm@||@com (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Tue, 13 Sep 2022 16:11:54 -0700
Subject: [Rd] 
 Should package version requirements assume installation from
 sources?
In-Reply-To: <b3e53fa9-b0e0-a8c8-147a-c1c56348f3e9@gmail.com>
References: <b3e53fa9-b0e0-a8c8-147a-c1c56348f3e9@gmail.com>
Message-ID: <07ec1390-3e67-82cf-09b4-6668db099c31@gmail.com>

FWIW this happens all the time in Bioconductor, where S4 is used very 
intensively, when we make that kind of change to a core infrastructure 
package. Then a bunch of Windows and Mac binary packages need to be 
rebuilt because they contain cached stuff that is now out-of-sync with 
the new state of affairs. The way we deal with this is by bumping the 
version numbers of all the affected packages. This triggers automatic 
rebuilt and propagation of the new binaries.

Note that these problems also affect packages that were already 
installed on the user machines _prior_ to the changes to the upstream 
package. Because the caching we are talking about is actually in the 
package installation folder (and the fact that it ends up in the 
binaries is just a consequence of that). So even on a system where 
packages are installed from source, the affected packages need to be 
reinstalled. Bumping the version numbers of all the affected packages 
also solves that.

I don't see how this could be handled or mitigated via package requirements.

Best,

H.


On 13/09/2022 14:45, Mikael Jagan wrote:
> [Arguably also appropriate for R-package-devel, but posted to R-devel
> ??? as the discussion is aimed primarily at "experts" ... ]
>
> We, the authors of Matrix, have encountered a somewhat subtle issue
> induced by caching of S4 classes and methods in package namespaces.
>
> The namespaces of three reverse dependent packages (SeuratObject, 
> conText,
> mcmcsae) cache the formal definition of our virtual class Matrix (and 
> some
> subclasses).? For example:
>
> > ns <- asNamespace("SeuratObject")
> > grep("^[.]__C__.*Matrix$", names(ns), value = TRUE)
> [1] ".__C__dMatrix"?????? ".__C__compMatrix"??? ".__C__AnyMatrix"
> [4] ".__C__generalMatrix" ".__C__CsparseMatrix" ".__C__sparseMatrix"
> [7] ".__C__dsparseMatrix" ".__C__Matrix"
>
> The cached definition (which includes a _validity method_) is obtained 
> from
> the version of Matrix available when the reverse dependent package was 
> built
> from sources.? For example, if SeuratObject was built under Matrix 1.4-1,
> then we get:
>
> > getValidity(ns$.__C__Matrix)
> function (object)
> {
> ??? if (!isTRUE(r <- .Call(Dim_validate, object, "Matrix")))
> ??????? r
> ??? else .Call(dimNames_validate, object)
> }
> <bytecode: 0x11e7ca508>
> <environment: namespace:Matrix>
>
> whereas if SeuratObject was built under Matrix >= 1.5-0, then we get:
>
> > getValidity(ns$.__C__Matrix)
> function (object)
> .Call(Matrix_validate, object)
> <bytecode: 0x107dc1698>
> <environment: namespace:Matrix>
>
> There are two "questions" here:
>
> 1.? The symbol 'Matrix_validate' is not defined until Matrix 1.5-0.
> ??? Is it necessary, for this reason alone, for SeuratObject to have
> ??? 'Imports: Matrix (>= 1.5-0)'?? Or can SeuratObject continue using
> ??? 'Imports: Matrix (>= 1.3-3)', at the risk of errors like
>
> ??? > Error: object 'Matrix_validate' not found
>
> ??? (as already seen here: https://stackoverflow.com/questions/73700130)?
>
> ??? Note that this error would not occur for anyone installing 
> SeuratObject
> ??? from sources, unless they decide to _downgrade_ Matrix after doing 
> so.
> ??? Hence this primarily concerns Windows and macOS where R users would
> ??? typically install a binary built by CRAN (i.e., not on their system).
>
> ??? We are aware that package TMB tests in .onLoad() that the current 
> Matrix
> ??? version is equal to or greater than the version available at build 
> time,
> ??? thus avoiding a "strict" version requirement, but do not want this 
> practice
> ??? to spread ...
>
> 2.? For how long should Matrix retain the superceded 'Dim_validate' and
> ??? 'dimNames_validate', in order to ensure that "stale" cached validity
> ??? methods continue to work?
>
> We hope that this discussion will highlight the potential ramifications
> of importing classes and methods from other packages, and having one's
> classes and methods imported _by_ other packages, especially for version
> requirements.
>
> Mikael, Martin, and Doug
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Herv? Pag?s

Bioconductor Core Team
hpages.on.github at gmail.com


From bbo|ker @end|ng |rom gm@||@com  Wed Sep 14 02:31:33 2022
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 13 Sep 2022 20:31:33 -0400
Subject: [Rd] 
 Should package version requirements assume installation from
 sources?
In-Reply-To: <07ec1390-3e67-82cf-09b4-6668db099c31@gmail.com>
References: <b3e53fa9-b0e0-a8c8-147a-c1c56348f3e9@gmail.com>
 <07ec1390-3e67-82cf-09b4-6668db099c31@gmail.com>
Message-ID: <70bacfe0-58f2-c656-3a91-061901f4a3f8@gmail.com>

   Interesting.

   How is the version number bumping communicated back to package 
maintainers? Or is there a rule like "third digit-blocks of package 
versions are reserved for Bioconductor modifications" ?

On 2022-09-13 7:11 p.m., Herv? Pag?s wrote:
> FWIW this happens all the time in Bioconductor, where S4 is used very 
> intensively, when we make that kind of change to a core infrastructure 
> package. Then a bunch of Windows and Mac binary packages need to be 
> rebuilt because they contain cached stuff that is now out-of-sync with 
> the new state of affairs. The way we deal with this is by bumping the 
> version numbers of all the affected packages. This triggers automatic 
> rebuilt and propagation of the new binaries.
> 
> Note that these problems also affect packages that were already 
> installed on the user machines _prior_ to the changes to the upstream 
> package. Because the caching we are talking about is actually in the 
> package installation folder (and the fact that it ends up in the 
> binaries is just a consequence of that). So even on a system where 
> packages are installed from source, the affected packages need to be 
> reinstalled. Bumping the version numbers of all the affected packages 
> also solves that.
> 
> I don't see how this could be handled or mitigated via package 
> requirements.
> 
> Best,
> 
> H.
> 
> 
> On 13/09/2022 14:45, Mikael Jagan wrote:
>> [Arguably also appropriate for R-package-devel, but posted to R-devel
>> ??? as the discussion is aimed primarily at "experts" ... ]
>>
>> We, the authors of Matrix, have encountered a somewhat subtle issue
>> induced by caching of S4 classes and methods in package namespaces.
>>
>> The namespaces of three reverse dependent packages (SeuratObject, 
>> conText,
>> mcmcsae) cache the formal definition of our virtual class Matrix (and 
>> some
>> subclasses).? For example:
>>
>> > ns <- asNamespace("SeuratObject")
>> > grep("^[.]__C__.*Matrix$", names(ns), value = TRUE)
>> [1] ".__C__dMatrix"?????? ".__C__compMatrix"??? ".__C__AnyMatrix"
>> [4] ".__C__generalMatrix" ".__C__CsparseMatrix" ".__C__sparseMatrix"
>> [7] ".__C__dsparseMatrix" ".__C__Matrix"
>>
>> The cached definition (which includes a _validity method_) is obtained 
>> from
>> the version of Matrix available when the reverse dependent package was 
>> built
>> from sources.? For example, if SeuratObject was built under Matrix 1.4-1,
>> then we get:
>>
>> > getValidity(ns$.__C__Matrix)
>> function (object)
>> {
>> ??? if (!isTRUE(r <- .Call(Dim_validate, object, "Matrix")))
>> ??????? r
>> ??? else .Call(dimNames_validate, object)
>> }
>> <bytecode: 0x11e7ca508>
>> <environment: namespace:Matrix>
>>
>> whereas if SeuratObject was built under Matrix >= 1.5-0, then we get:
>>
>> > getValidity(ns$.__C__Matrix)
>> function (object)
>> .Call(Matrix_validate, object)
>> <bytecode: 0x107dc1698>
>> <environment: namespace:Matrix>
>>
>> There are two "questions" here:
>>
>> 1.? The symbol 'Matrix_validate' is not defined until Matrix 1.5-0.
>> ??? Is it necessary, for this reason alone, for SeuratObject to have
>> ??? 'Imports: Matrix (>= 1.5-0)'?? Or can SeuratObject continue using
>> ??? 'Imports: Matrix (>= 1.3-3)', at the risk of errors like
>>
>> ??? > Error: object 'Matrix_validate' not found
>>
>> ??? (as already seen here: https://stackoverflow.com/questions/73700130)?
>>
>> ??? Note that this error would not occur for anyone installing 
>> SeuratObject
>> ??? from sources, unless they decide to _downgrade_ Matrix after doing 
>> so.
>> ??? Hence this primarily concerns Windows and macOS where R users would
>> ??? typically install a binary built by CRAN (i.e., not on their system).
>>
>> ??? We are aware that package TMB tests in .onLoad() that the current 
>> Matrix
>> ??? version is equal to or greater than the version available at build 
>> time,
>> ??? thus avoiding a "strict" version requirement, but do not want this 
>> practice
>> ??? to spread ...
>>
>> 2.? For how long should Matrix retain the superceded 'Dim_validate' and
>> ??? 'dimNames_validate', in order to ensure that "stale" cached validity
>> ??? methods continue to work?
>>
>> We hope that this discussion will highlight the potential ramifications
>> of importing classes and methods from other packages, and having one's
>> classes and methods imported _by_ other packages, especially for version
>> requirements.
>>
>> Mikael, Martin, and Doug
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
(Acting) Graduate chair, Mathematics & Statistics
 > E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From edd @end|ng |rom deb|@n@org  Wed Sep 14 03:16:32 2022
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 13 Sep 2022 20:16:32 -0500
Subject: [Rd] 
 Should package version requirements assume installation from
 sources?
In-Reply-To: <07ec1390-3e67-82cf-09b4-6668db099c31@gmail.com>
References: <b3e53fa9-b0e0-a8c8-147a-c1c56348f3e9@gmail.com>
 <07ec1390-3e67-82cf-09b4-6668db099c31@gmail.com>
Message-ID: <25377.11120.322288.57005@rob.eddelbuettel.com>


On 13 September 2022 at 16:11, Herv? Pag?s wrote:
| FWIW this happens all the time in Bioconductor, where S4 is used very 
| intensively, when we make that kind of change to a core infrastructure 
| package. Then a bunch of Windows and Mac binary packages need to be 
| rebuilt because they contain cached stuff that is now out-of-sync with 
| the new state of affairs. The way we deal with this is by bumping the 
| version numbers of all the affected packages. This triggers automatic 
| rebuilt and propagation of the new binaries.

When you control the whole repo, and release it in batch, you can rebuild and
increment versions (more on that below).

| Note that these problems also affect packages that were already 
| installed on the user machines _prior_ to the changes to the upstream 
| package. Because the caching we are talking about is actually in the 
| package installation folder (and the fact that it ends up in the 
| binaries is just a consequence of that). So even on a system where 
| packages are installed from source, the affected packages need to be 
| reinstalled. Bumping the version numbers of all the affected packages 
| also solves that.
| 
| I don't see how this could be handled or mitigated via package requirements.

R uses a bunch of elements from the Debian package graph, namely

 Depends/Imports,
 Recommends,
 Suggests 
 Enhances (even if rarely used)

We may need to think about _the other direction_ via

 Breaks

where here, in Mikael's case, we could possibly say that Matrix: has a
Breaks: on the current (known, built with previous Matrix) packages
SeuratObject, conText, mcmcsae (each with a <= set to their current CRAN
version).  This would ensure that when Matrix updates, those packages also
update.

But it gets trickier because Debian can differentiate between an (upstream
source version), say, Matrix 1.5-1 _and its build versions_, say 1.5-1-1 so
the breakage would be of 1.5-1-1 but resolved by a new binary 1.5-1-2 which
sorts higher.  We don't have that, so maybe we cannot do the Breaks with
proper ordering. BioConductor can because of how it releases, CRAN cannot as
it does alter version numbers, only Maintainers do.

So maybe we need a few field in DESCRIPTION to tag 'RecommendedRebuilds'?
Or maybe CRAN would get a right to do an incremental release, so say 'my'
digest 0.6.29 would become 0.6.29.1 ?  But how to communicate this _in
general_ back to Maintainers?

Obviousy for binary packages we can cover this at the repo level, and CRAN
generally does but there are also 'from source' users out we should cover
here. So in short that is an open issue with no clear solution.

And all of this would of course require new and changed tooling.  As we often
maybe this too is something best tried first at package level via opt-in
alternatives to the functions in base package tools and utils.

Dirk

| Best,
| 
| H.
| 
| 
| On 13/09/2022 14:45, Mikael Jagan wrote:
| > [Arguably also appropriate for R-package-devel, but posted to R-devel
| > ??? as the discussion is aimed primarily at "experts" ... ]
| >
| > We, the authors of Matrix, have encountered a somewhat subtle issue
| > induced by caching of S4 classes and methods in package namespaces.
| >
| > The namespaces of three reverse dependent packages (SeuratObject, 
| > conText,
| > mcmcsae) cache the formal definition of our virtual class Matrix (and 
| > some
| > subclasses).? For example:
| >
| > > ns <- asNamespace("SeuratObject")
| > > grep("^[.]__C__.*Matrix$", names(ns), value = TRUE)
| > [1] ".__C__dMatrix"?????? ".__C__compMatrix"??? ".__C__AnyMatrix"
| > [4] ".__C__generalMatrix" ".__C__CsparseMatrix" ".__C__sparseMatrix"
| > [7] ".__C__dsparseMatrix" ".__C__Matrix"
| >
| > The cached definition (which includes a _validity method_) is obtained 
| > from
| > the version of Matrix available when the reverse dependent package was 
| > built
| > from sources.? For example, if SeuratObject was built under Matrix 1.4-1,
| > then we get:
| >
| > > getValidity(ns$.__C__Matrix)
| > function (object)
| > {
| > ??? if (!isTRUE(r <- .Call(Dim_validate, object, "Matrix")))
| > ??????? r
| > ??? else .Call(dimNames_validate, object)
| > }
| > <bytecode: 0x11e7ca508>
| > <environment: namespace:Matrix>
| >
| > whereas if SeuratObject was built under Matrix >= 1.5-0, then we get:
| >
| > > getValidity(ns$.__C__Matrix)
| > function (object)
| > .Call(Matrix_validate, object)
| > <bytecode: 0x107dc1698>
| > <environment: namespace:Matrix>
| >
| > There are two "questions" here:
| >
| > 1.? The symbol 'Matrix_validate' is not defined until Matrix 1.5-0.
| > ??? Is it necessary, for this reason alone, for SeuratObject to have
| > ??? 'Imports: Matrix (>= 1.5-0)'?? Or can SeuratObject continue using
| > ??? 'Imports: Matrix (>= 1.3-3)', at the risk of errors like
| >
| > ??? > Error: object 'Matrix_validate' not found
| >
| > ??? (as already seen here: https://stackoverflow.com/questions/73700130)?
| >
| > ??? Note that this error would not occur for anyone installing 
| > SeuratObject
| > ??? from sources, unless they decide to _downgrade_ Matrix after doing 
| > so.
| > ??? Hence this primarily concerns Windows and macOS where R users would
| > ??? typically install a binary built by CRAN (i.e., not on their system).
| >
| > ??? We are aware that package TMB tests in .onLoad() that the current 
| > Matrix
| > ??? version is equal to or greater than the version available at build 
| > time,
| > ??? thus avoiding a "strict" version requirement, but do not want this 
| > practice
| > ??? to spread ...
| >
| > 2.? For how long should Matrix retain the superceded 'Dim_validate' and
| > ??? 'dimNames_validate', in order to ensure that "stale" cached validity
| > ??? methods continue to work?
| >
| > We hope that this discussion will highlight the potential ramifications
| > of importing classes and methods from other packages, and having one's
| > classes and methods imported _by_ other packages, especially for version
| > requirements.
| >
| > Mikael, Martin, and Doug
| >
| > ______________________________________________
| > R-devel at r-project.org mailing list
| > https://stat.ethz.ch/mailman/listinfo/r-devel
| 
| -- 
| Herv? Pag?s
| 
| Bioconductor Core Team
| hpages.on.github at gmail.com
| 
| ______________________________________________
| R-devel at r-project.org mailing list
| https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Sep 14 03:27:44 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 14 Sep 2022 13:27:44 +1200
Subject: [Rd] 
 Should package version requirements assume installation from
 sources?
In-Reply-To: <b3e53fa9-b0e0-a8c8-147a-c1c56348f3e9@gmail.com>
References: <b3e53fa9-b0e0-a8c8-147a-c1c56348f3e9@gmail.com>
Message-ID: <030E9435-8D03-4BC5-9461-5247D18703A0@R-project.org>

Mikael,

first about the macOS part of the issue: the first step is that you can tell me and I can trigger a full re-build. For performance reasons the macOS build system does not do full reverse builds, because they take too long as small updates in popular packages can trigger large portions of CRAN needing a re-build - in most cases with no benefit.

Now, that still only addresses one part where the users can upgrade to re-built versions __if they are aware__. However, they would have to know and do it explicitly, because a regular update.packages() would not re-install such reverse-dependent packages since their version has not changed. Therefore I would strongly suggest making sure that updates are backward-compatible, because there is simply no way around that problem as users have no way of knowing that an upgrade of Matrix requires re-installation of many other packages. In fact for Matrix I would argue that such breaking changes should only be allowed with major R release since at that point all packages have to be reinstalled by definition anyway.  So to answer your second part of the question: until next major (=annual) release.

Note that this problem can exist in both directions - even if you upgrade Matrix, if a dependent package is build against newer Matrix __but does not require the newer version__ then the user doesn't know that the installed version is incompatible, so you have to guard in both directions.

Cheers,
Simon


> On 14/09/2022, at 9:45 AM, Mikael Jagan <jaganmn2 at gmail.com> wrote:
> 
> [Arguably also appropriate for R-package-devel, but posted to R-devel
>    as the discussion is aimed primarily at "experts" ... ]
> 
> We, the authors of Matrix, have encountered a somewhat subtle issue
> induced by caching of S4 classes and methods in package namespaces.
> 
> The namespaces of three reverse dependent packages (SeuratObject, conText,
> mcmcsae) cache the formal definition of our virtual class Matrix (and some
> subclasses).  For example:
> 
> > ns <- asNamespace("SeuratObject")
> > grep("^[.]__C__.*Matrix$", names(ns), value = TRUE)
> [1] ".__C__dMatrix"       ".__C__compMatrix"    ".__C__AnyMatrix"
> [4] ".__C__generalMatrix" ".__C__CsparseMatrix" ".__C__sparseMatrix"
> [7] ".__C__dsparseMatrix" ".__C__Matrix"
> 
> The cached definition (which includes a _validity method_) is obtained from
> the version of Matrix available when the reverse dependent package was built
> from sources.  For example, if SeuratObject was built under Matrix 1.4-1,
> then we get:
> 
> > getValidity(ns$.__C__Matrix)
> function (object)
> {
>    if (!isTRUE(r <- .Call(Dim_validate, object, "Matrix")))
>        r
>    else .Call(dimNames_validate, object)
> }
> <bytecode: 0x11e7ca508>
> <environment: namespace:Matrix>
> 
> whereas if SeuratObject was built under Matrix >= 1.5-0, then we get:
> 
> > getValidity(ns$.__C__Matrix)
> function (object)
> .Call(Matrix_validate, object)
> <bytecode: 0x107dc1698>
> <environment: namespace:Matrix>
> 
> There are two "questions" here:
> 
> 1.  The symbol 'Matrix_validate' is not defined until Matrix 1.5-0.
>    Is it necessary, for this reason alone, for SeuratObject to have
>    'Imports: Matrix (>= 1.5-0)'?  Or can SeuratObject continue using
>    'Imports: Matrix (>= 1.3-3)', at the risk of errors like
> 
>    > Error: object 'Matrix_validate' not found
> 
>    (as already seen here: https://stackoverflow.com/questions/73700130)?
> 
>    Note that this error would not occur for anyone installing SeuratObject
>    from sources, unless they decide to _downgrade_ Matrix after doing so.
>    Hence this primarily concerns Windows and macOS where R users would
>    typically install a binary built by CRAN (i.e., not on their system).
> 
>    We are aware that package TMB tests in .onLoad() that the current Matrix
>    version is equal to or greater than the version available at build time,
>    thus avoiding a "strict" version requirement, but do not want this practice
>    to spread ...
> 
> 2.  For how long should Matrix retain the superceded 'Dim_validate' and
>    'dimNames_validate', in order to ensure that "stale" cached validity
>    methods continue to work?
> 
> We hope that this discussion will highlight the potential ramifications
> of importing classes and methods from other packages, and having one's
> classes and methods imported _by_ other packages, especially for version
> requirements.
> 
> Mikael, Martin, and Doug
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Sep 14 12:04:04 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 14 Sep 2022 06:04:04 -0400
Subject: [Rd] 
 Should package version requirements assume installation from
 sources?
In-Reply-To: <b3e53fa9-b0e0-a8c8-147a-c1c56348f3e9@gmail.com>
References: <b3e53fa9-b0e0-a8c8-147a-c1c56348f3e9@gmail.com>
Message-ID: <bf1ca8d1-37f9-6ec1-59d3-692f0fb563ba@gmail.com>

On 13/09/2022 5:45 p.m., Mikael Jagan wrote:
> [Arguably also appropriate for R-package-devel, but posted to R-devel
>       as the discussion is aimed primarily at "experts" ... ]
> 
> We, the authors of Matrix, have encountered a somewhat subtle issue
> induced by caching of S4 classes and methods in package namespaces.
> 
> The namespaces of three reverse dependent packages (SeuratObject, conText,
> mcmcsae) cache the formal definition of our virtual class Matrix (and some
> subclasses).  For example:
> 
>   > ns <- asNamespace("SeuratObject")
>   > grep("^[.]__C__.*Matrix$", names(ns), value = TRUE)
> [1] ".__C__dMatrix"       ".__C__compMatrix"    ".__C__AnyMatrix"
> [4] ".__C__generalMatrix" ".__C__CsparseMatrix" ".__C__sparseMatrix"
> [7] ".__C__dsparseMatrix" ".__C__Matrix"
> 
> The cached definition (which includes a _validity method_) is obtained from
> the version of Matrix available when the reverse dependent package was built
> from sources.  For example, if SeuratObject was built under Matrix 1.4-1,
> then we get:
> 
>   > getValidity(ns$.__C__Matrix)
> function (object)
> {
>       if (!isTRUE(r <- .Call(Dim_validate, object, "Matrix")))
>           r
>       else .Call(dimNames_validate, object)
> }
> <bytecode: 0x11e7ca508>
> <environment: namespace:Matrix>
> 
> whereas if SeuratObject was built under Matrix >= 1.5-0, then we get:
> 
>   > getValidity(ns$.__C__Matrix)
> function (object)
> .Call(Matrix_validate, object)
> <bytecode: 0x107dc1698>
> <environment: namespace:Matrix>
> 
> There are two "questions" here:
> 
> 1.  The symbol 'Matrix_validate' is not defined until Matrix 1.5-0.
>       Is it necessary, for this reason alone, for SeuratObject to have
>       'Imports: Matrix (>= 1.5-0)'?  Or can SeuratObject continue using
>       'Imports: Matrix (>= 1.3-3)', at the risk of errors like
> 
>       > Error: object 'Matrix_validate' not found
> 
>       (as already seen here: https://stackoverflow.com/questions/73700130)?
> 
>       Note that this error would not occur for anyone installing SeuratObject
>       from sources, unless they decide to _downgrade_ Matrix after doing so.
>       Hence this primarily concerns Windows and macOS where R users would
>       typically install a binary built by CRAN (i.e., not on their system).
> 
>       We are aware that package TMB tests in .onLoad() that the current Matrix
>       version is equal to or greater than the version available at build time,
>       thus avoiding a "strict" version requirement, but do not want this practice
>       to spread ...
> 
> 2.  For how long should Matrix retain the superceded 'Dim_validate' and
>       'dimNames_validate', in order to ensure that "stale" cached validity
>       methods continue to work?
> 
> We hope that this discussion will highlight the potential ramifications
> of importing classes and methods from other packages, and having one's
> classes and methods imported _by_ other packages, especially for version
> requirements.

This sounds like a bug or bad design in the S4 system, i.e. caching 
things without a way to detect or update when the cache becomes stale.

Is it really necessary to cache things as part of the binary package, or 
could they be put in place when needed using lazy loading, getting a 
copy from the loaded copy of Matrix?

Duncan Murdoch


From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Wed Sep 14 15:16:25 2022
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Wed, 14 Sep 2022 09:16:25 -0400
Subject: [Rd] 
 Should package version requirements assume installation from
 sources?
In-Reply-To: <70bacfe0-58f2-c656-3a91-061901f4a3f8@gmail.com>
References: <b3e53fa9-b0e0-a8c8-147a-c1c56348f3e9@gmail.com>
 <07ec1390-3e67-82cf-09b4-6668db099c31@gmail.com>
 <70bacfe0-58f2-c656-3a91-061901f4a3f8@gmail.com>
Message-ID: <CAC2h7uuEhcdmip_RvBS6MeG6V+FixqWX9c5whq+L71C1sogX4g@mail.gmail.com>

On Tue, Sep 13, 2022 at 8:31 PM Ben Bolker <bbolker at gmail.com> wrote:

>    Interesting.
>
>    How is the version number bumping communicated back to package
> maintainers? Or is there a rule like "third digit-blocks of package
> versions are reserved for Bioconductor modifications" ?
>

In practice, when you have a package in Bioconductor, we set up a
bioconductor git repository for the package, which is what is being used to
build Bioc. So we have

bioc git <- used for binary building
optionally, package devel git repos (typically on github)

If "we" (Bioconductor) can then choose to change things in the bioc git
which is upstream of the package devel git. So when Herve changes things to
basic S4 classes, when updating my packages, I pull those changes into my
github repos and merge them.

Regarding version numbers, the rule is that we have three digits x.y.z. We
release Bioc bi-annually and say we release package at version 1.2.0 as
part of Biocondctor 3.15. After release, we bump the version number for
devel, so we create 1.3.0 which only exists in Bioc-devel. Then over time
the developer bumps z as changes are made in devel. Then say we end up at
1.3.17. At release time, this now gets made into 1.4.0.

So we have potentially tons of version bumping where there is no change in
code. This may sound chaotic, but it is being helped by the notion of a
simultaneous release every 6 months. So most users only see 1.2.0 and 1.4.0
(which could be identical but dependencies are likely to change). Once you
understand it, it is a pretty good system IMO, since - for example - I can
immediately see if a package is from devel (odd y) or release (even y). It
does go againsts some people's arbitrary instincts regarding version
numbering; here it also helps that these rules are essentially enforced
across all packages.

Best,
Kasper



>
> On 2022-09-13 7:11 p.m., Herv? Pag?s wrote:
> > FWIW this happens all the time in Bioconductor, where S4 is used very
> > intensively, when we make that kind of change to a core infrastructure
> > package. Then a bunch of Windows and Mac binary packages need to be
> > rebuilt because they contain cached stuff that is now out-of-sync with
> > the new state of affairs. The way we deal with this is by bumping the
> > version numbers of all the affected packages. This triggers automatic
> > rebuilt and propagation of the new binaries.
> >
> > Note that these problems also affect packages that were already
> > installed on the user machines _prior_ to the changes to the upstream
> > package. Because the caching we are talking about is actually in the
> > package installation folder (and the fact that it ends up in the
> > binaries is just a consequence of that). So even on a system where
> > packages are installed from source, the affected packages need to be
> > reinstalled. Bumping the version numbers of all the affected packages
> > also solves that.
> >
> > I don't see how this could be handled or mitigated via package
> > requirements.
> >
> > Best,
> >
> > H.
> >
> >
> > On 13/09/2022 14:45, Mikael Jagan wrote:
> >> [Arguably also appropriate for R-package-devel, but posted to R-devel
> >>     as the discussion is aimed primarily at "experts" ... ]
> >>
> >> We, the authors of Matrix, have encountered a somewhat subtle issue
> >> induced by caching of S4 classes and methods in package namespaces.
> >>
> >> The namespaces of three reverse dependent packages (SeuratObject,
> >> conText,
> >> mcmcsae) cache the formal definition of our virtual class Matrix (and
> >> some
> >> subclasses).  For example:
> >>
> >> > ns <- asNamespace("SeuratObject")
> >> > grep("^[.]__C__.*Matrix$", names(ns), value = TRUE)
> >> [1] ".__C__dMatrix"       ".__C__compMatrix"    ".__C__AnyMatrix"
> >> [4] ".__C__generalMatrix" ".__C__CsparseMatrix" ".__C__sparseMatrix"
> >> [7] ".__C__dsparseMatrix" ".__C__Matrix"
> >>
> >> The cached definition (which includes a _validity method_) is obtained
> >> from
> >> the version of Matrix available when the reverse dependent package was
> >> built
> >> from sources.  For example, if SeuratObject was built under Matrix
> 1.4-1,
> >> then we get:
> >>
> >> > getValidity(ns$.__C__Matrix)
> >> function (object)
> >> {
> >>     if (!isTRUE(r <- .Call(Dim_validate, object, "Matrix")))
> >>         r
> >>     else .Call(dimNames_validate, object)
> >> }
> >> <bytecode: 0x11e7ca508>
> >> <environment: namespace:Matrix>
> >>
> >> whereas if SeuratObject was built under Matrix >= 1.5-0, then we get:
> >>
> >> > getValidity(ns$.__C__Matrix)
> >> function (object)
> >> .Call(Matrix_validate, object)
> >> <bytecode: 0x107dc1698>
> >> <environment: namespace:Matrix>
> >>
> >> There are two "questions" here:
> >>
> >> 1.  The symbol 'Matrix_validate' is not defined until Matrix 1.5-0.
> >>     Is it necessary, for this reason alone, for SeuratObject to have
> >>     'Imports: Matrix (>= 1.5-0)'?  Or can SeuratObject continue using
> >>     'Imports: Matrix (>= 1.3-3)', at the risk of errors like
> >>
> >>     > Error: object 'Matrix_validate' not found
> >>
> >>     (as already seen here: https://stackoverflow.com/questions/73700130
> )?
> >>
> >>     Note that this error would not occur for anyone installing
> >> SeuratObject
> >>     from sources, unless they decide to _downgrade_ Matrix after doing
> >> so.
> >>     Hence this primarily concerns Windows and macOS where R users would
> >>     typically install a binary built by CRAN (i.e., not on their
> system).
> >>
> >>     We are aware that package TMB tests in .onLoad() that the current
> >> Matrix
> >>     version is equal to or greater than the version available at build
> >> time,
> >>     thus avoiding a "strict" version requirement, but do not want this
> >> practice
> >>     to spread ...
> >>
> >> 2.  For how long should Matrix retain the superceded 'Dim_validate' and
> >>     'dimNames_validate', in order to ensure that "stale" cached validity
> >>     methods continue to work?
> >>
> >> We hope that this discussion will highlight the potential ramifications
> >> of importing classes and methods from other packages, and having one's
> >> classes and methods imported _by_ other packages, especially for version
> >> requirements.
> >>
> >> Mikael, Martin, and Doug
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Dr. Benjamin Bolker
> Professor, Mathematics & Statistics and Biology, McMaster University
> Director, School of Computational Science and Engineering
> (Acting) Graduate chair, Mathematics & Statistics
>  > E-mail is sent at my convenience; I don't expect replies outside of
> working hours.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Best,
Kasper

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Thu Sep 15 20:11:52 2022
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 15 Sep 2022 11:11:52 -0700
Subject: [Rd] Respecting custom repositories files in interactive/batch R
 sessions
Message-ID: <CAD4oTHEoUDsL91EiwAOUYoNv0LkeucZFNUYPgLK3=3iOKwrFYw@mail.gmail.com>

Hi all,

A company I work with mirrors CRAN internally behind its firewall for
security (and reproducibility/consistency/etc) reasons. In that case, we
would like all R processes (across all the R CMD *, as well as interactive
and batch sessions) to automatically hit our cran mirror instead of
prompting the user to select a mirror or failing to contact CRAN at all
(during check).

I recently found out about the ${R_HOME}/etc/repositories file (after
multiple years owning the R installations of a sizable corporate research
outfit in my previous job).

Contrary to my expectations, however, the CRAN entry found in the
repositories file is not respected in interactive or batch sessions.

With the value "https://fakeyfakeyfake" for the CRAN URL, I get this
behavior in an interactive session in Rdevel built from trunk:

R Under development (unstable) (2022-09-14 r82853) -- "Unsuffered
Consequences"


<snip>


> available.packages()

--- Please select a CRAN mirror for use in this session ---

Secure CRAN mirrors


 <snip>


Selection: 0

*Error in contrib.url(repos, type) : *

*  trying to use CRAN without setting a mirror*

> readLines(file.path(R.home(), "etc", "repositories"))

 <snip>

[11] "menu_name\tURL\tdefault\tsource\twin.binary\tmac.binary"


[12] "CRAN\tCRAN\t\*"https://fakeyfakeyfake
<https://fakeyfakeyfake>\"*\tTRUE\tTRUE\tTRUE\tTRUE"
  <snip>


R CMD check, on the other hand, *does* use it the entry in repositories out
of the box:


gabrielbecker$ Rdevel CMD check switchr_0.14.5.tar.gz

[1]
"/Users/gabrielbecker/local/Rdevelraw/R.framework/Versions/4.3/Resources/library"

* using log directory ?/Users/gabrielbecker/gabe/checkedout/switchr.Rcheck?

* using R Under development (unstable) (2022-09-14 r82853)

* using platform: x86_64-apple-darwin21.5.0 (64-bit)

* using session charset: UTF-8

* checking for file ?switchr/DESCRIPTION? ... OK

* checking extension type ... Package

* this is package ?switchr? version ?0.14.5?

* checking package namespace information ... OK

* checking package dependencies ...Warning: unable to access index for
repository https://fakeyfakeyfake/src/contrib:

  cannot open URL 'https://fakeyfakeyfake/src/contrib/PACKAGES'


This behavior is coming from the fact that the repos option is unilaterally
set to c(CRAN = "@CRAN@") in utils::.onLoad


I propose instead that this should be set to either a) the CRAN entry to
the repository file, or even better imho, b) the set of all repos marked as
default in the repositories file, with a caveat that its set to @CRAN@ in
the case there is no cran entry, though comments around the source code in
tools suggest other things will break in that case anyway.

The default value of the repositories file has @CRAN@ for the cran entry,
and cran is the only repo marked as default, so this preserves the existing
behavior in what I assume to be the overwhelming majority of cases where
the repositories file is either not custom, or is only appended to .

I have a patch which does option (b) (and can easily be adapted to option
(a)) that I will submit to bugzilla after any discussion here.

Also, as a separate issue, I strongly feel that the R administration manual
section about repositories be updated to more clearly describe behavior and
best practices around setting the repos R will look in. I will develop a
patch for that separately once I see whether one of the above changes is
likely to go in or not (as I don't want to write it twice).

For completeness, I know that we could put a setRepositories call in the
the site Rprofile, but I have to admit I don't really understand why this
should be necessary.

Thoughts?
~G

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Thu Sep 15 20:31:47 2022
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 15 Sep 2022 13:31:47 -0500
Subject: [Rd] 
 Respecting custom repositories files in interactive/batch R sessions
In-Reply-To: <CAD4oTHEoUDsL91EiwAOUYoNv0LkeucZFNUYPgLK3=3iOKwrFYw@mail.gmail.com>
References: <CAD4oTHEoUDsL91EiwAOUYoNv0LkeucZFNUYPgLK3=3iOKwrFYw@mail.gmail.com>
Message-ID: <25379.28563.847469.688038@rob.eddelbuettel.com>


I may be missing something here but aren't you overcomplicating things?  One
can avoid the repetitive dialog by setting   options(repos)   accordingly,
and I have long done so.  The Debian (and hence Ubuntu and other derivatives)
package does so via the Rprofile.site I ship.  See e.g. here

 https://sources.debian.org/src/r-base/4.2.1-2/debian/Rprofile.site/

I have used the same mechanism to point to intra-company repositories, easily
a decade or so ago. I had no problems with R CMD check of in-house packages
using this.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Sep 15 21:33:48 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 15 Sep 2022 15:33:48 -0400
Subject: [Rd] Time to drop globalenv() from searches in package code?
Message-ID: <0bc42d07-d897-2807-0da2-eab959d35a2a@gmail.com>

The author of this Stackoverflow question 
https://stackoverflow.com/q/73722496/2554330 got confused because a typo 
in his code didn't trigger an error in normal circumstances, but it did 
when he ran his code in pkgdown.

The typo was to use "x" in a test, when the local variable was named 
".x".  There was no "x" defined locally or in the package or its 
imports, so the search got all the way to the global environment and 
found one.  (The very confusing part for this user was that it found the 
right variable.)

This author had suppressed the "R CMD check" check for use of global 
variables.  Obviously he shouldn't have done that, but he's working with 
tidyverse NSE, and that causes so many false positives that it is 
somewhat understandable he would suppress one too many.

The pkgdown simulation of code in examples doesn't do perfect mimicry of 
running it at top level; the fake global environment never makes it onto 
the search list.  Some might call this a bug, but I'd call it the right 
search strategy.

My suggestion is that the search for variables in package code should 
never get to globalenv().  The chain of environments should stop after 
handling the imports.  (Probably base package functions should also be 
implicitly imported, but nothing else.)

I suspect this change would reveal errors in lots of packages, but the 
number of legitimate uses of the current search strategy has got to be 
pretty small nowadays, since we've been getting warnings for years about 
implicit imports from other standard packages.

Duncan Murdoch


From g@bembecker @end|ng |rom gm@||@com  Fri Sep 16 06:51:57 2022
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 15 Sep 2022 21:51:57 -0700
Subject: [Rd] 
 Respecting custom repositories files in interactive/batch R sessions
In-Reply-To: <25379.28563.847469.688038@rob.eddelbuettel.com>
References: <CAD4oTHEoUDsL91EiwAOUYoNv0LkeucZFNUYPgLK3=3iOKwrFYw@mail.gmail.com>
 <25379.28563.847469.688038@rob.eddelbuettel.com>
Message-ID: <CAD4oTHG062PARBAkXXMAW-weYG-4nN3ahQuXw-SqrFEXmGaHag@mail.gmail.com>

Hi Dirk,

So there's a couple of things going on. First off you're correct that that
works generally. There are a couple of reasons that made it not. The first
is a bug/design error in Rstudio which is causing the R_PROFILE to not be
adhered to when you build there. I will be filing a bug regarding that with
them, as I know that is irrelevant to this list.  There was some indication
that even raw R CMD check running via an R studio server installation was
missing the profile, but that ended up being spurious upon deeper testing.

That said, I do think that there is a case to be made for the ability to
modify what repositories R knows about at a more fundamental level than
setting options in a site profile, and that is, ostensibly, what the
repositories file machinery does. I understand it was intended initially
and is currently only (?) used for the windows repository gui menu and
related setRepositories function, but I still think there is some value in
extending it in the ways I described.

One major difference is that in this case, even when run with --vanilla,
administrators would still be in control of which repositories users hit
(by default only, of course, but there is still value in that).

Best,
~G

On Thu, Sep 15, 2022 at 11:31 AM Dirk Eddelbuettel <edd at debian.org> wrote:

>
> I may be missing something here but aren't you overcomplicating things?
> One
> can avoid the repetitive dialog by setting   options(repos)   accordingly,
> and I have long done so.  The Debian (and hence Ubuntu and other
> derivatives)
> package does so via the Rprofile.site I ship.  See e.g. here
>
>  https://sources.debian.org/src/r-base/4.2.1-2/debian/Rprofile.site/
>
> I have used the same mechanism to point to intra-company repositories,
> easily
> a decade or so ago. I had no problems with R CMD check of in-house packages
> using this.
>
> Dirk
>
> --
> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Fri Sep 16 09:57:28 2022
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Fri, 16 Sep 2022 09:57:28 +0200
Subject: [Rd] 
 Respecting custom repositories files in interactive/batch R sessions
In-Reply-To: <CAD4oTHG062PARBAkXXMAW-weYG-4nN3ahQuXw-SqrFEXmGaHag@mail.gmail.com>
References: <CAD4oTHEoUDsL91EiwAOUYoNv0LkeucZFNUYPgLK3=3iOKwrFYw@mail.gmail.com>
 <25379.28563.847469.688038@rob.eddelbuettel.com>
 <CAD4oTHG062PARBAkXXMAW-weYG-4nN3ahQuXw-SqrFEXmGaHag@mail.gmail.com>
Message-ID: <25380.11368.261722.143011@hornik.net>

>>>>> Gabriel Becker writes:

Friends,

I always keep forgetting how these things currently/precisely work, but
I guess the principle is that utils:::.onLoad() does

  options(repos = c(CRAN = "@CRAN@"))

unless the repos option was already set (in the user or site profiles).
As the latter are not used when checking, the check code in tools takes
advantage of the repositories file mechanism, see ? setRepositories:

     The default list of known repositories is stored in the file
     ?R_HOME/etc/repositories?.  That file can be edited for a site, or
     a user can have a personal copy in the file pointed to by the
     environment variable ?R_REPOSITORIES?, or if this is unset or does
     not exist, in ?HOME/.R/repositories?, which will take precedence.

which also points to Startup etc).

I guess one could teach utils:::.onLoad() to use the user/site
repositories setting instead of the hard-wired CRAN = @CRAN@?  Afaict,
that would make no difference if the repositories file was not
configured, and provide the configured setting in case repos was not set
in the user/site profile ...

Best
-k


> Hi Dirk,
> So there's a couple of things going on. First off you're correct that that
> works generally. There are a couple of reasons that made it not. The first
> is a bug/design error in Rstudio which is causing the R_PROFILE to not be
> adhered to when you build there. I will be filing a bug regarding that with
> them, as I know that is irrelevant to this list.  There was some indication
> that even raw R CMD check running via an R studio server installation was
> missing the profile, but that ended up being spurious upon deeper testing.

> That said, I do think that there is a case to be made for the ability to
> modify what repositories R knows about at a more fundamental level than
> setting options in a site profile, and that is, ostensibly, what the
> repositories file machinery does. I understand it was intended initially
> and is currently only (?) used for the windows repository gui menu and
> related setRepositories function, but I still think there is some value in
> extending it in the ways I described.

> One major difference is that in this case, even when run with --vanilla,
> administrators would still be in control of which repositories users hit
> (by default only, of course, but there is still value in that).

> Best,
> ~G

> On Thu, Sep 15, 2022 at 11:31 AM Dirk Eddelbuettel <edd at debian.org> wrote:

>> 
>> I may be missing something here but aren't you overcomplicating things?
>> One
>> can avoid the repetitive dialog by setting   options(repos)   accordingly,
>> and I have long done so.  The Debian (and hence Ubuntu and other
>> derivatives)
>> package does so via the Rprofile.site I ship.  See e.g. here
>> 
>> https://sources.debian.org/src/r-base/4.2.1-2/debian/Rprofile.site/
>> 
>> I have used the same mechanism to point to intra-company repositories,
>> easily
>> a decade or so ago. I had no problems with R CMD check of in-house packages
>> using this.
>> 
>> Dirk
>> 
>> --
>> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>> 

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Fri Sep 16 16:33:14 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Fri, 16 Sep 2022 15:33:14 +0100
Subject: [Rd] Parser bug? A comma too much.
Message-ID: <45b7f223-fefb-7004-f8b7-f4c5a09dde6e@sapo.pt>

Hello,

Why doesn't the comma throw an error?


plot(1:5,)    # works, no complaints


Shouldn't this be considered a bug? I would expect the parser to at 
least give a warning.


sessionInfo()
R version 4.2.1 (2022-06-23 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 22000)

Matrix products: default

locale:
[1] LC_COLLATE=Portuguese_Portugal.utf8 
LC_CTYPE=Portuguese_Portugal.utf8
[3] LC_MONETARY=Portuguese_Portugal.utf8 LC_NUMERIC=C 

[5] LC_TIME=Portuguese_Portugal.utf8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.2.1


Rui Barradas


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Fri Sep 16 16:39:50 2022
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Fri, 16 Sep 2022 14:39:50 +0000
Subject: [Rd] Parser bug? A comma too much.
In-Reply-To: <45b7f223-fefb-7004-f8b7-f4c5a09dde6e@sapo.pt>
References: <45b7f223-fefb-7004-f8b7-f4c5a09dde6e@sapo.pt>
Message-ID: <CAL6gwn+a7uX3fSRALfgpJDGftr79o7x0Xwid_Oq7mr0VYzSRcg@mail.gmail.com>

That may actually be the case for EVERY default plot, if I understand
correctly. The default S# plot is defined as

## Default S3 method:
plot(x, y = NULL, type = "p",  xlim = NULL, ylim = NULL,
     log = "", main = NULL, sub = NULL, xlab = NULL, ylab = NULL,
     ann = par("ann"), axes = TRUE, frame.plot = axes,
     panel.first = NULL, panel.last = NULL, asp = NA,
     xgap.axis = NA, ygap.axis = NA,
     ...)

By putting in the comma, unless I am mistaken, you are effectively
saying the second element is NULL, which is how it's naturally
defined.

Thanks,

Avi

On Fri, Sep 16, 2022 at 2:33 PM Rui Barradas <ruipbarradas at sapo.pt> wrote:
>
> Hello,
>
> Why doesn't the comma throw an error?
>
>
> plot(1:5,)    # works, no complaints
>
>
> Shouldn't this be considered a bug? I would expect the parser to at
> least give a warning.
>
>
> sessionInfo()
> R version 4.2.1 (2022-06-23 ucrt)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 22000)
>
> Matrix products: default
>
> locale:
> [1] LC_COLLATE=Portuguese_Portugal.utf8
> LC_CTYPE=Portuguese_Portugal.utf8
> [3] LC_MONETARY=Portuguese_Portugal.utf8 LC_NUMERIC=C
>
> [5] LC_TIME=Portuguese_Portugal.utf8
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.2.1
>
>
> Rui Barradas
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From w||||@mwdun|@p @end|ng |rom gm@||@com  Fri Sep 16 16:45:48 2022
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Fri, 16 Sep 2022 07:45:48 -0700
Subject: [Rd] Parser bug? A comma too much.
In-Reply-To: <CAL6gwn+a7uX3fSRALfgpJDGftr79o7x0Xwid_Oq7mr0VYzSRcg@mail.gmail.com>
References: <45b7f223-fefb-7004-f8b7-f4c5a09dde6e@sapo.pt>
 <CAL6gwn+a7uX3fSRALfgpJDGftr79o7x0Xwid_Oq7mr0VYzSRcg@mail.gmail.com>
Message-ID: <CAHqSRuRKb+LfPLvJX8SzSRoFQonOenCGp3yvQbNePtL4DrxxXA@mail.gmail.com>

> By putting in the comma, unless I am mistaken, you are effectively
> saying the second element is NULL, which is how it's naturally
> defined.

No, in f(x,) the second argument is missing, not NULL.

-Bill

On Fri, Sep 16, 2022 at 7:43 AM Avraham Adler <avraham.adler at gmail.com>
wrote:

> That may actually be the case for EVERY default plot, if I understand
> correctly. The default S# plot is defined as
>
> ## Default S3 method:
> plot(x, y = NULL, type = "p",  xlim = NULL, ylim = NULL,
>      log = "", main = NULL, sub = NULL, xlab = NULL, ylab = NULL,
>      ann = par("ann"), axes = TRUE, frame.plot = axes,
>      panel.first = NULL, panel.last = NULL, asp = NA,
>      xgap.axis = NA, ygap.axis = NA,
>      ...)
>
> By putting in the comma, unless I am mistaken, you are effectively
> saying the second element is NULL, which is how it's naturally
> defined.
>
> Thanks,
>
> Avi
>
> On Fri, Sep 16, 2022 at 2:33 PM Rui Barradas <ruipbarradas at sapo.pt> wrote:
> >
> > Hello,
> >
> > Why doesn't the comma throw an error?
> >
> >
> > plot(1:5,)    # works, no complaints
> >
> >
> > Shouldn't this be considered a bug? I would expect the parser to at
> > least give a warning.
> >
> >
> > sessionInfo()
> > R version 4.2.1 (2022-06-23 ucrt)
> > Platform: x86_64-w64-mingw32/x64 (64-bit)
> > Running under: Windows 10 x64 (build 22000)
> >
> > Matrix products: default
> >
> > locale:
> > [1] LC_COLLATE=Portuguese_Portugal.utf8
> > LC_CTYPE=Portuguese_Portugal.utf8
> > [3] LC_MONETARY=Portuguese_Portugal.utf8 LC_NUMERIC=C
> >
> > [5] LC_TIME=Portuguese_Portugal.utf8
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_4.2.1
> >
> >
> > Rui Barradas
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Sep 16 16:48:52 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 16 Sep 2022 10:48:52 -0400
Subject: [Rd] Parser bug? A comma too much.
In-Reply-To: <45b7f223-fefb-7004-f8b7-f4c5a09dde6e@sapo.pt>
References: <45b7f223-fefb-7004-f8b7-f4c5a09dde6e@sapo.pt>
Message-ID: <a8a33e23-5e7d-72cc-31ce-4a0ee8a858dc@gmail.com>

On 16/09/2022 10:33 a.m., Rui Barradas wrote:
> Hello,
> 
> Why doesn't the comma throw an error?
> 
> 
> plot(1:5,)    # works, no complaints

That says the second argument is missing.

You need this to enter missing arguments with positional matching, e.g.

f(a, , b)

sets the second argument of f() to missing, but the third is set to b.

Duncan Murdoch

> 
> 
> Shouldn't this be considered a bug? I would expect the parser to at
> least give a warning.
> 
> 
> sessionInfo()
> R version 4.2.1 (2022-06-23 ucrt)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 22000)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=Portuguese_Portugal.utf8
> LC_CTYPE=Portuguese_Portugal.utf8
> [3] LC_MONETARY=Portuguese_Portugal.utf8 LC_NUMERIC=C
> 
> [5] LC_TIME=Portuguese_Portugal.utf8
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.2.1
> 
> 
> Rui Barradas
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From net|kj@ @end|ng |rom gm@||@com  Fri Sep 16 16:50:48 2022
From: net|kj@ @end|ng |rom gm@||@com (=?UTF-8?Q?Jan_Net=C3=ADk?=)
Date: Fri, 16 Sep 2022 16:50:48 +0200
Subject: [Rd] sessionInfo() errors when an attached package is removed from
 the library
Message-ID: <CA+6hu7cW_+wrZd3jOW9gZky0SN=otFNqocE1BU-hvQuY8vUksQ@mail.gmail.com>

Hello everyone,

I noticed that sessionInfo() results in an error when you remove a package
from the library that was previously attached:

library(xyz)
> remove.packages("xyz")
> #> Removing package from
> '/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library'
> #> (as 'lib' is unspecified)
> sessionInfo()
> #> Warning in FUN(X[[i]], ...): DESCRIPTION file of package 'xyz' is
> #> missing or broken
> #> Error in x$Priority: $ operator is invalid for atomic vectors


If it was only loaded, only "loaded via a namespace" section fails to print
with the same error message.

Notice that this is not an issue for the {sessioninfo} package that only
warns you in a friendly way that the particular package was removed from
the library, without any errors.

The problem occurs when sessionInfo calls packageDescription on each
package on the search path.

Best,
Jan

	[[alternative HTML version deleted]]


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Fri Sep 16 16:56:29 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Fri, 16 Sep 2022 15:56:29 +0100
Subject: [Rd] Parser bug? A comma too much.
In-Reply-To: <a8a33e23-5e7d-72cc-31ce-4a0ee8a858dc@gmail.com>
References: <45b7f223-fefb-7004-f8b7-f4c5a09dde6e@sapo.pt>
 <a8a33e23-5e7d-72cc-31ce-4a0ee8a858dc@gmail.com>
Message-ID: <4d907ef7-d4f4-6b98-d4f7-5042d0fddd89@sapo.pt>

Hello,

Duncan is right, his example convince me. With a function like `[` it's 
frequent to have the second argument missing.

So, no error. Thanks to Avraham, Bill and Duncan.

Hope this helps,

Rui Barradas


?s 15:48 de 16/09/2022, Duncan Murdoch escreveu:
> On 16/09/2022 10:33 a.m., Rui Barradas wrote:
>> Hello,
>>
>> Why doesn't the comma throw an error?
>>
>>
>> plot(1:5,)??? # works, no complaints
> 
> That says the second argument is missing.
> 
> You need this to enter missing arguments with positional matching, e.g.
> 
> f(a, , b)
> 
> sets the second argument of f() to missing, but the third is set to b.
> 
> Duncan Murdoch
> 
>>
>>
>> Shouldn't this be considered a bug? I would expect the parser to at
>> least give a warning.
>>
>>
>> sessionInfo()
>> R version 4.2.1 (2022-06-23 ucrt)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 22000)
>>
>> Matrix products: default
>>
>> locale:
>> [1] LC_COLLATE=Portuguese_Portugal.utf8
>> LC_CTYPE=Portuguese_Portugal.utf8
>> [3] LC_MONETARY=Portuguese_Portugal.utf8 LC_NUMERIC=C
>>
>> [5] LC_TIME=Portuguese_Portugal.utf8
>>
>> attached base packages:
>> [1] stats???? graphics? grDevices utils???? datasets? methods?? base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_4.2.1
>>
>>
>> Rui Barradas
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From pd@|gd @end|ng |rom gm@||@com  Fri Sep 16 17:00:06 2022
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 16 Sep 2022 17:00:06 +0200
Subject: [Rd] Parser bug? A comma too much.
In-Reply-To: <45b7f223-fefb-7004-f8b7-f4c5a09dde6e@sapo.pt>
References: <45b7f223-fefb-7004-f8b7-f4c5a09dde6e@sapo.pt>
Message-ID: <74AC5439-218C-4F87-9490-BF645BD835AB@gmail.com>

As a general matter, empty arguments are allowed and are used meaningfully in some contexts, notably A[i,], which is syntactic sugarcoating of "["(A,i,).

I.e., these are different:

> "["(Sigma,2,) # 2nd row
[1] 0.077 0.168
> "["(Sigma,2) # 2nd element
[1] 0.077


It is somewhat rare to have an empty last argument, intermediate ones are more common:

> seq(0,1,,5)
[1] 0.00 0.25 0.50 0.75 1.00

-pd


> On 16 Sep 2022, at 16:33 , Rui Barradas <ruipbarradas at sapo.pt> wrote:
> 
> Hello,
> 
> Why doesn't the comma throw an error?
> 
> 
> plot(1:5,)    # works, no complaints
> 
> 
> Shouldn't this be considered a bug? I would expect the parser to at least give a warning.
> 
> 
> sessionInfo()
> R version 4.2.1 (2022-06-23 ucrt)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 22000)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=Portuguese_Portugal.utf8 LC_CTYPE=Portuguese_Portugal.utf8
> [3] LC_MONETARY=Portuguese_Portugal.utf8 LC_NUMERIC=C 
> [5] LC_TIME=Portuguese_Portugal.utf8
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.2.1
> 
> 
> Rui Barradas
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From g@bembecker @end|ng |rom gm@||@com  Fri Sep 16 18:04:40 2022
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Fri, 16 Sep 2022 09:04:40 -0700
Subject: [Rd] 
 Respecting custom repositories files in interactive/batch R sessions
In-Reply-To: <25380.11368.261722.143011@hornik.net>
References: <CAD4oTHEoUDsL91EiwAOUYoNv0LkeucZFNUYPgLK3=3iOKwrFYw@mail.gmail.com>
 <25379.28563.847469.688038@rob.eddelbuettel.com>
 <CAD4oTHG062PARBAkXXMAW-weYG-4nN3ahQuXw-SqrFEXmGaHag@mail.gmail.com>
 <25380.11368.261722.143011@hornik.net>
Message-ID: <CAD4oTHHWtfud3sQLyD_xpPKeX0B8vM4LFs2+SMPu_7hs1Swx+g@mail.gmail.com>

Hi Kurt,

Thanks.

On Fri, Sep 16, 2022 at 12:57 AM Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:

> >>>>> Gabriel Becker writes:
>
> Friends,
>
> I always keep forgetting how these things currently/precisely work, but
> I guess the principle is that utils:::.onLoad() does
>
>   options(repos = c(CRAN = "@CRAN@"))
>
> unless the repos option was already set (in the user or site profiles).
> As the latter are not used when checking, the check code in tools takes
> advantage of the repositories file mechanism, see ? setRepositories:
>
>      The default list of known repositories is stored in the file
>      ?R_HOME/etc/repositories?.  That file can be edited for a site, or
>      a user can have a personal copy in the file pointed to by the
>      environment variable ?R_REPOSITORIES?, or if this is unset or does
>      not exist, in ?HOME/.R/repositories?, which will take precedence.
>
> which also points to Startup etc).
>

Yes this is exactly what happens.


>
> I guess one could teach utils:::.onLoad() to use the user/site
> repositories setting instead of the hard-wired CRAN = @CRAN@?  Afaict,
> that would make no difference if the repositories file was not
> configured, and provide the configured setting in case repos was not set
> in the user/site profile ...
>

Precisely, that is my proposal. I have a patch which does this and passes
make check-devel for me (there is some slight technical gotchas because
tools::get_repositories calls utils::read.delim which isn't available yet
during utils::onLoad execution), but I have a workaround for that that
works.

If the consensus is that this is a good idea I'm more than happy to submit
the patch, along with an update to the admin manual reflecting the change
(either together or as separate issues).

Best,
~G



>
> Best
> -k
>
>
> > Hi Dirk,
> > So there's a couple of things going on. First off you're correct that
> that
> > works generally. There are a couple of reasons that made it not. The
> first
> > is a bug/design error in Rstudio which is causing the R_PROFILE to not be
> > adhered to when you build there. I will be filing a bug regarding that
> with
> > them, as I know that is irrelevant to this list.  There was some
> indication
> > that even raw R CMD check running via an R studio server installation was
> > missing the profile, but that ended up being spurious upon deeper
> testing.
>
> > That said, I do think that there is a case to be made for the ability to
> > modify what repositories R knows about at a more fundamental level than
> > setting options in a site profile, and that is, ostensibly, what the
> > repositories file machinery does. I understand it was intended initially
> > and is currently only (?) used for the windows repository gui menu and
> > related setRepositories function, but I still think there is some value
> in
> > extending it in the ways I described.
>
> > One major difference is that in this case, even when run with --vanilla,
> > administrators would still be in control of which repositories users hit
> > (by default only, of course, but there is still value in that).
>
> > Best,
> > ~G
>
> > On Thu, Sep 15, 2022 at 11:31 AM Dirk Eddelbuettel <edd at debian.org>
> wrote:
>
> >>
> >> I may be missing something here but aren't you overcomplicating things?
> >> One
> >> can avoid the repetitive dialog by setting   options(repos)
>  accordingly,
> >> and I have long done so.  The Debian (and hence Ubuntu and other
> >> derivatives)
> >> package does so via the Rprofile.site I ship.  See e.g. here
> >>
> >> https://sources.debian.org/src/r-base/4.2.1-2/debian/Rprofile.site/
> >>
> >> I have used the same mechanism to point to intra-company repositories,
> >> easily
> >> a decade or so ago. I had no problems with R CMD check of in-house
> packages
> >> using this.
> >>
> >> Dirk
> >>
> >> --
> >> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> >>
>
> >       [[alternative HTML version deleted]]
>
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Fri Sep 16 18:46:47 2022
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Fri, 16 Sep 2022 18:46:47 +0200
Subject: [Rd] 
 Respecting custom repositories files in interactive/batch R sessions
In-Reply-To: <CAD4oTHHWtfud3sQLyD_xpPKeX0B8vM4LFs2+SMPu_7hs1Swx+g@mail.gmail.com>
References: <CAD4oTHEoUDsL91EiwAOUYoNv0LkeucZFNUYPgLK3=3iOKwrFYw@mail.gmail.com>
 <25379.28563.847469.688038@rob.eddelbuettel.com>
 <CAD4oTHG062PARBAkXXMAW-weYG-4nN3ahQuXw-SqrFEXmGaHag@mail.gmail.com>
 <25380.11368.261722.143011@hornik.net>
 <CAD4oTHHWtfud3sQLyD_xpPKeX0B8vM4LFs2+SMPu_7hs1Swx+g@mail.gmail.com>
Message-ID: <25380.43127.613727.443942@hornik.net>

>>>>> Gabriel Becker writes:

Thanks.  Perhaps submit your patch via R-bugs?

(I would have hoped we can simply use tools:::.get_repositories() right
away ...)

Best
-k

> Hi Kurt,
> Thanks.

> On Fri, Sep 16, 2022 at 12:57 AM Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:

>> >>>>> Gabriel Becker writes:
>> 
>> Friends,
>> 
>> I always keep forgetting how these things currently/precisely work, but
>> I guess the principle is that utils:::.onLoad() does
>> 
>> options(repos = c(CRAN = "@CRAN@"))
>> 
>> unless the repos option was already set (in the user or site profiles).
>> As the latter are not used when checking, the check code in tools takes
>> advantage of the repositories file mechanism, see ? setRepositories:
>> 
>> The default list of known repositories is stored in the file
>> ?R_HOME/etc/repositories?.  That file can be edited for a site, or
>> a user can have a personal copy in the file pointed to by the
>> environment variable ?R_REPOSITORIES?, or if this is unset or does
>> not exist, in ?HOME/.R/repositories?, which will take precedence.
>> 
>> which also points to Startup etc).
>> 

> Yes this is exactly what happens.


>> 
>> I guess one could teach utils:::.onLoad() to use the user/site
>> repositories setting instead of the hard-wired CRAN = @CRAN@?  Afaict,
>> that would make no difference if the repositories file was not
>> configured, and provide the configured setting in case repos was not set
>> in the user/site profile ...
>> 

> Precisely, that is my proposal. I have a patch which does this and passes
> make check-devel for me (there is some slight technical gotchas because
> tools::get_repositories calls utils::read.delim which isn't available yet
> during utils::onLoad execution), but I have a workaround for that that
> works.

> If the consensus is that this is a good idea I'm more than happy to submit
> the patch, along with an update to the admin manual reflecting the change
> (either together or as separate issues).

> Best,
> ~G



>> 
>> Best
>> -k
>> 
>> 
>> > Hi Dirk,
>> > So there's a couple of things going on. First off you're correct that
>> that
>> > works generally. There are a couple of reasons that made it not. The
>> first
>> > is a bug/design error in Rstudio which is causing the R_PROFILE to not be
>> > adhered to when you build there. I will be filing a bug regarding that
>> with
>> > them, as I know that is irrelevant to this list.  There was some
>> indication
>> > that even raw R CMD check running via an R studio server installation was
>> > missing the profile, but that ended up being spurious upon deeper
>> testing.
>> 
>> > That said, I do think that there is a case to be made for the ability to
>> > modify what repositories R knows about at a more fundamental level than
>> > setting options in a site profile, and that is, ostensibly, what the
>> > repositories file machinery does. I understand it was intended initially
>> > and is currently only (?) used for the windows repository gui menu and
>> > related setRepositories function, but I still think there is some value
>> in
>> > extending it in the ways I described.
>> 
>> > One major difference is that in this case, even when run with --vanilla,
>> > administrators would still be in control of which repositories users hit
>> > (by default only, of course, but there is still value in that).
>> 
>> > Best,
>> > ~G
>> 
>> > On Thu, Sep 15, 2022 at 11:31 AM Dirk Eddelbuettel <edd at debian.org>
>> wrote:
>> 
>> >>
>> >> I may be missing something here but aren't you overcomplicating things?
>> >> One
>> >> can avoid the repetitive dialog by setting   options(repos)
>> accordingly,
>> >> and I have long done so.  The Debian (and hence Ubuntu and other
>> >> derivatives)
>> >> package does so via the Rprofile.site I ship.  See e.g. here
>> >>
>> >> https://sources.debian.org/src/r-base/4.2.1-2/debian/Rprofile.site/
>> >>
>> >> I have used the same mechanism to point to intra-company repositories,
>> >> easily
>> >> a decade or so ago. I had no problems with R CMD check of in-house
>> packages
>> >> using this.
>> >>
>> >> Dirk
>> >>
>> >> --
>> >> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>> >>
>> 
>> >       [[alternative HTML version deleted]]
>> 
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>> 

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Sep 16 21:36:59 2022
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 16 Sep 2022 14:36:59 -0500 (CDT)
Subject: [Rd] 
 [External] Time to drop globalenv() from searches in package code?
In-Reply-To: <0bc42d07-d897-2807-0da2-eab959d35a2a@gmail.com>
References: <0bc42d07-d897-2807-0da2-eab959d35a2a@gmail.com>
Message-ID: <bec8c037-aa79-14f3-bf78-239528dac757@uiowa.edu>

On Thu, 15 Sep 2022, Duncan Murdoch wrote:

> The author of this Stackoverflow question 
> https://stackoverflow.com/q/73722496/2554330 got confused because a typo in 
> his code didn't trigger an error in normal circumstances, but it did when he 
> ran his code in pkgdown.
>
> The typo was to use "x" in a test, when the local variable was named ".x". 
> There was no "x" defined locally or in the package or its imports, so the 
> search got all the way to the global environment and found one.  (The very 
> confusing part for this user was that it found the right variable.)
>
> This author had suppressed the "R CMD check" check for use of global 
> variables.  Obviously he shouldn't have done that, but he's working with 
> tidyverse NSE, and that causes so many false positives that it is somewhat 
> understandable he would suppress one too many.
>
> The pkgdown simulation of code in examples doesn't do perfect mimicry of 
> running it at top level; the fake global environment never makes it onto the 
> search list.  Some might call this a bug, but I'd call it the right search 
> strategy.
>
> My suggestion is that the search for variables in package code should never 
> get to globalenv().  The chain of environments should stop after handling the 
> imports.  (Probably base package functions should also be implicitly 
> imported, but nothing else.)
>

This was considered and discussed when I added namespaces. Basically
it would mean making the parent of the base namespace environment be
the empty environment instead of the global environment. As a design
this is cleaner, and it would be a one-line change in eval.c.  But
there were technical reasons this was not a viable option at the time,
also a few political reasons. The technical reasons mostly had to do
with S3 dispatch.

Changes over the years, mostly from work Kurt has done, to S3 dispatch
for methods defined and registered in packages might make this more
viable in principle, but there would still be a lot of existing code
that would stop working. For example, 'make check' with the one-line
change fails in a base example that defines an S3 method. It might be
possible to fiddle with the dispatch to keep most of that code
working, but I suspect that would be a lot of work. Seeing what it
would take to get 'make check' to succeed would be a first step if
anyone wants to take a crack at it.

> I suspect this change would reveal errors in lots of packages, but the number 
> of legitimate uses of the current search strategy has got to be pretty small 
> nowadays, since we've been getting warnings for years about implicit imports 
> from other standard packages.

Your definition of 'legitimate' is probably quite similar to mine, but
there is likely to be a small but vocal minority with very different
views :-).

Best,

luke

> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From g@bembecker @end|ng |rom gm@||@com  Sat Sep 17 01:53:52 2022
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Fri, 16 Sep 2022 16:53:52 -0700
Subject: [Rd] 
 Respecting custom repositories files in interactive/batch R sessions
In-Reply-To: <25380.43127.613727.443942@hornik.net>
References: <CAD4oTHEoUDsL91EiwAOUYoNv0LkeucZFNUYPgLK3=3iOKwrFYw@mail.gmail.com>
 <25379.28563.847469.688038@rob.eddelbuettel.com>
 <CAD4oTHG062PARBAkXXMAW-weYG-4nN3ahQuXw-SqrFEXmGaHag@mail.gmail.com>
 <25380.11368.261722.143011@hornik.net>
 <CAD4oTHHWtfud3sQLyD_xpPKeX0B8vM4LFs2+SMPu_7hs1Swx+g@mail.gmail.com>
 <25380.43127.613727.443942@hornik.net>
Message-ID: <CAD4oTHEyb+hbcXxFottxwhC_+jO3Sj-tvVOSHFohujfVdMTaiA@mail.gmail.com>

Hi Kurt,

Thanks, submitted as https://bugs.r-project.org/show_bug.cgi?id=18405

~G

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Sat Sep 17 11:13:13 2022
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Sat, 17 Sep 2022 11:13:13 +0200
Subject: [Rd] 
 [External] Time to drop globalenv() from searches in package code?
In-Reply-To: <bec8c037-aa79-14f3-bf78-239528dac757@uiowa.edu>
References: <0bc42d07-d897-2807-0da2-eab959d35a2a@gmail.com>
 <bec8c037-aa79-14f3-bf78-239528dac757@uiowa.edu>
Message-ID: <25381.36777.795591.36433@hornik.net>

>>>>> luke-tierney  writes:

> On Thu, 15 Sep 2022, Duncan Murdoch wrote:
>> The author of this Stackoverflow question 
>> https://stackoverflow.com/q/73722496/2554330 got confused because a typo in 
>> his code didn't trigger an error in normal circumstances, but it did when he 
>> ran his code in pkgdown.
>> 
>> The typo was to use "x" in a test, when the local variable was named ".x". 
>> There was no "x" defined locally or in the package or its imports, so the 
>> search got all the way to the global environment and found one.  (The very 
>> confusing part for this user was that it found the right variable.)
>> 
>> This author had suppressed the "R CMD check" check for use of global 
>> variables.  Obviously he shouldn't have done that, but he's working with 
>> tidyverse NSE, and that causes so many false positives that it is somewhat 
>> understandable he would suppress one too many.
>> 
>> The pkgdown simulation of code in examples doesn't do perfect mimicry of 
>> running it at top level; the fake global environment never makes it onto the 
>> search list.  Some might call this a bug, but I'd call it the right search 
>> strategy.
>> 
>> My suggestion is that the search for variables in package code should never 
>> get to globalenv().  The chain of environments should stop after handling the 
>> imports.  (Probably base package functions should also be implicitly 
>> imported, but nothing else.)
>> 

> This was considered and discussed when I added namespaces. Basically
> it would mean making the parent of the base namespace environment be
> the empty environment instead of the global environment. As a design
> this is cleaner, and it would be a one-line change in eval.c.  But
> there were technical reasons this was not a viable option at the time,
> also a few political reasons. The technical reasons mostly had to do
> with S3 dispatch.

> Changes over the years, mostly from work Kurt has done, to S3 dispatch
> for methods defined and registered in packages might make this more
> viable in principle, but there would still be a lot of existing code
> that would stop working. For example, 'make check' with the one-line
> change fails in a base example that defines an S3 method. It might be
> possible to fiddle with the dispatch to keep most of that code
> working, but I suspect that would be a lot of work. Seeing what it
> would take to get 'make check' to succeed would be a first step if
> anyone wants to take a crack at it.

Luke,

Can you please share the one-line change so that I can take a closer
look?

Best
-k

>> I suspect this change would reveal errors in lots of packages, but the number 
>> of legitimate uses of the current search strategy has got to be pretty small 
>> nowadays, since we've been getting warnings for years about implicit imports 
>> from other standard packages.

> Your definition of 'legitimate' is probably quite similar to mine, but
> there is likely to be a small but vocal minority with very different
> views :-).

> Best,

> luke

>> Duncan Murdoch
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 

> -- 
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Sat Sep 17 22:24:02 2022
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sat, 17 Sep 2022 15:24:02 -0500 (CDT)
Subject: [Rd] 
 [External] Time to drop globalenv() from searches in package code?
In-Reply-To: <25381.36777.795591.36433@hornik.net>
References: <0bc42d07-d897-2807-0da2-eab959d35a2a@gmail.com>
 <bec8c037-aa79-14f3-bf78-239528dac757@uiowa.edu>
 <25381.36777.795591.36433@hornik.net>
Message-ID: <aea3c2f-5d61-b73-2ced-724fb8e94da@uiowa.edu>

On Sat, 17 Sep 2022, Kurt Hornik wrote:

>>>>>> luke-tierney  writes:
>
>> On Thu, 15 Sep 2022, Duncan Murdoch wrote:
>>> The author of this Stackoverflow question
>>> https://stackoverflow.com/q/73722496/2554330 got confused because a typo in
>>> his code didn't trigger an error in normal circumstances, but it did when he
>>> ran his code in pkgdown.
>>>
>>> The typo was to use "x" in a test, when the local variable was named ".x".
>>> There was no "x" defined locally or in the package or its imports, so the
>>> search got all the way to the global environment and found one.  (The very
>>> confusing part for this user was that it found the right variable.)
>>>
>>> This author had suppressed the "R CMD check" check for use of global
>>> variables.  Obviously he shouldn't have done that, but he's working with
>>> tidyverse NSE, and that causes so many false positives that it is somewhat
>>> understandable he would suppress one too many.
>>>
>>> The pkgdown simulation of code in examples doesn't do perfect mimicry of
>>> running it at top level; the fake global environment never makes it onto the
>>> search list.  Some might call this a bug, but I'd call it the right search
>>> strategy.
>>>
>>> My suggestion is that the search for variables in package code should never
>>> get to globalenv().  The chain of environments should stop after handling the
>>> imports.  (Probably base package functions should also be implicitly
>>> imported, but nothing else.)
>>>
>
>> This was considered and discussed when I added namespaces. Basically
>> it would mean making the parent of the base namespace environment be
>> the empty environment instead of the global environment. As a design
>> this is cleaner, and it would be a one-line change in eval.c.  But
>> there were technical reasons this was not a viable option at the time,
>> also a few political reasons. The technical reasons mostly had to do
>> with S3 dispatch.
>
>> Changes over the years, mostly from work Kurt has done, to S3 dispatch
>> for methods defined and registered in packages might make this more
>> viable in principle, but there would still be a lot of existing code
>> that would stop working. For example, 'make check' with the one-line
>> change fails in a base example that defines an S3 method. It might be
>> possible to fiddle with the dispatch to keep most of that code
>> working, but I suspect that would be a lot of work. Seeing what it
>> would take to get 'make check' to succeed would be a first step if
>> anyone wants to take a crack at it.
>
> Luke,
>
> Can you please share the one-line change so that I can take a closer
> look?

Index: src/main/envir.c
===================================================================
--- src/main/envir.c    (revision 82861)
+++ src/main/envir.c    (working copy)
@@ -683,7 +683,7 @@
      R_GlobalCachePreserve = CONS(R_GlobalCache, R_NilValue);
      R_PreserveObject(R_GlobalCachePreserve);
  #endif
-    R_BaseNamespace = NewEnvironment(R_NilValue, R_NilValue, R_GlobalEnv);
+    R_BaseNamespace = NewEnvironment(R_NilValue, R_NilValue, R_EmptyEnv);
      R_PreserveObject(R_BaseNamespace);
      SET_SYMVALUE(install(".BaseNamespaceEnv"), R_BaseNamespace);
      R_BaseNamespaceName = ScalarString(mkChar("base"));

-----

For S3 the dispatch will have to be changed to explicitly search
.GlobalEnv and parents after the namespace if we don't want to break
too much.

Another idiom that will be broken is

if (require("foo"))
    bar(...)

with bar exported from foo. I don't know if that is already warned
about.  Moving away from this is arguably good in principle but also
probably fairly disruptive. We might need to add some cleaner
use-if-available mechanism, or maybe just adjust some checking code.

Best,

luke

>
> Best
> -k
>
>>> I suspect this change would reveal errors in lots of packages, but the number
>>> of legitimate uses of the current search strategy has got to be pretty small
>>> nowadays, since we've been getting warnings for years about implicit imports
>>> from other standard packages.
>
>> Your definition of 'legitimate' is probably quite similar to mine, but
>> there is likely to be a small but vocal minority with very different
>> views :-).
>
>> Best,
>
>> luke
>
>>> Duncan Murdoch
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>     Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Tue Sep 20 09:22:06 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Tue, 20 Sep 2022 08:22:06 +0100
Subject: [Rd] Parser bug? A comma too much.
In-Reply-To: <74AC5439-218C-4F87-9490-BF645BD835AB@gmail.com>
References: <45b7f223-fefb-7004-f8b7-f4c5a09dde6e@sapo.pt>
 <74AC5439-218C-4F87-9490-BF645BD835AB@gmail.com>
Message-ID: <93d34a53-4a4c-7ada-3239-469b703cc1da@sapo.pt>

Hello,

A bit late but thanks for the extra explanation.

Rui Barradas

?s 16:00 de 16/09/2022, peter dalgaard escreveu:
> As a general matter, empty arguments are allowed and are used meaningfully in some contexts, notably A[i,], which is syntactic sugarcoating of "["(A,i,).
> 
> I.e., these are different:
> 
>> "["(Sigma,2,) # 2nd row
> [1] 0.077 0.168
>> "["(Sigma,2) # 2nd element
> [1] 0.077
> 
> 
> It is somewhat rare to have an empty last argument, intermediate ones are more common:
> 
>> seq(0,1,,5)
> [1] 0.00 0.25 0.50 0.75 1.00
> 
> -pd
> 
> 
>> On 16 Sep 2022, at 16:33 , Rui Barradas <ruipbarradas at sapo.pt> wrote:
>>
>> Hello,
>>
>> Why doesn't the comma throw an error?
>>
>>
>> plot(1:5,)    # works, no complaints
>>
>>
>> Shouldn't this be considered a bug? I would expect the parser to at least give a warning.
>>
>>
>> sessionInfo()
>> R version 4.2.1 (2022-06-23 ucrt)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 22000)
>>
>> Matrix products: default
>>
>> locale:
>> [1] LC_COLLATE=Portuguese_Portugal.utf8 LC_CTYPE=Portuguese_Portugal.utf8
>> [3] LC_MONETARY=Portuguese_Portugal.utf8 LC_NUMERIC=C
>> [5] LC_TIME=Portuguese_Portugal.utf8
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_4.2.1
>>
>>
>> Rui Barradas
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From ro|@nd@|u@@ @end|ng |rom thuenen@de  Tue Sep 20 09:25:52 2022
From: ro|@nd@|u@@ @end|ng |rom thuenen@de (=?UTF-8?Q?Roland_Fu=c3=9f?=)
Date: Tue, 20 Sep 2022 09:25:52 +0200
Subject: [Rd] Date method of as.POSIXct does not respect tz
In-Reply-To: <23293.49665.770796.423446@stat.math.ethz.ch>
References: <65932fa5-535d-19e4-2a70-7a6ffd10dfa4@thuenen.de>
 <23293.49665.770796.423446@stat.math.ethz.ch>
Message-ID: <4892f293-b399-45eb-1ee8-ea05afd8365b@thuenen.de>

Hello,

May I follow up on this? Has it fallen through the cracks or were there 
considerations against passing `tz` to `.POSIXct`?

Regards,

Roland

Am 17.05.2018 um 19:55 schrieb Martin Maechler:
>>>>>> Roland Fu?
>>>>>>      on Wed, 16 May 2018 17:21:07 +0200 writes:
>      > R 3.5.0 Is it intended that the Date method of as.POSIXct
>      > does not respect the tz parameter? I suggest changing
>      > as.POSIXct.Date
>
> which is
>
>       function (x, ...) .POSIXct(unclass(x) * 86400)
>
>      > to this:
>
>      function (x, tz = "", ...)
>           .POSIXct(unclass(x) * 86400, tz = tz)
>
> or rather just forward the '...', i.e., use
>
>      function (x, ...) .POSIXct(unclass(x) * 86400, ...)
>
> ??
>
>      > Currently, the best workaround seems to be using the
>      > character method if one doesn't want the default timezone
>      > (which is often an annoying DST timezone).
>
>      > This came up on Stack Overflow:
>      > https://stackoverflow.com/q/50373340/1412059
>
>      > --
>      > Roland
>
> Thank you Roland for your notice (and the help on SO).
>
> Best,
> Martin

-- 
Dr. Roland Fu?

Th?nen-Institut f?r Agrarklimaschutz/
Th?nen Institute of Climate-Smart Agriculture

Bundesallee 65
D-38116 Braunschweig, Germany

Tel.: ++49 531 596 2627
Fax:  ++49 531 596 2699
Email: roland.fuss at thuenen.de

Arbeitsgruppe "Emissionsberichterstattung"/
Working group "Emission Inventories"
Email: emissionsinventare at thuenen.de

Das Johann Heinrich von Th?nen-Institut,
Bundesforschungsinstitut f?r L?ndliche R?ume,
Wald und Fischerei ? kurz: Th?nen-Institut ?
besteht aus 15 Fachinstituten, die in den
Bereichen ?konomie, ?kologie und Technologie
forschen und die Politik beraten.

The Johann Heinrich von Th?nen Institute,
Federal Research Institute for Rural Areas,
Forestry and Fisheries ? Th?nen Institute in brief ?
consists of 15 specialized institutes that
carry out research and provide policy advice
in the fields of economy, ecology and technology.


From @h@rt @end|ng |rom d|m@uch||e@c|  Thu Sep 22 15:48:46 2022
From: @h@rt @end|ng |rom d|m@uch||e@c| (Andrew Hart)
Date: Thu, 22 Sep 2022 10:48:46 -0300
Subject: [Rd] Problem with accessibility in R 4.2.0 and 4.2.1.
Message-ID: <88b4bd63-0ec3-626b-1fa3-148f1419a8a3@dim.uchile.cl>

Hi. I'm having an issue with R 4.2.1 on Windows but I'm not sure if this 
is the right place to ask about it. If it's not, I'm hoping someone can 
point me in the right direction.

I'm blind and have been using R for about 11 years now. The base build 
available on CRAN is quite accessible and works pretty well with 
screen-reading software such as JAWS for Windows and NVDA. R-studio is 
not accessible which appears to have something to do with the version of 
QT it uses, but that's not relevant as I don't use it.

Recently I installed R 4.2.1 (I tend to upgrade two or three times a 
year and this time I was jumping from R 4.1.2 to 4.2.1).
However, I've encountered a serious problem which makes the latest 
version more or less unusable for doing any kind of serious work.
The issue is that the screen-reading software is unable to locate the R 
cursor and behaves as though the cursor is near the top left of the R 
application window. Practically, this means I can't tell what characters 
I'm passing over when cursoring left and right, nor can I hear what 
character is being deleted when the backspace is pressed. Most 
importantly, I can't tell where the insertion point is. This is a major 
regression in the ability to work with and edit the command line in the 
R console. There are ways of actually viewing the command line but the 
way I work is frequently calling up a previous command and making a 
change so as to not have to type the whole command again.

I Went and installed R 4.1.3 and R 4.2.0 in an attempt to find out 
exactly when things went awry and the issue first appeared in R 4.2.0.
Looking through the release notes, the only things mentioned that seem 
likely to be relevant are the following:

? R uses a new 64-bit Tcl/Tk bundle. The previous 32-bit/64-bit bundle 
had a different layout and can no longer be used.

and

? R uses UTF-8 as the native encoding on recent Windows systems (at 
least Windows 10 version 1903, Windows Server 2022 or Windows Server 
1903). As a part
of this change, R uses UCRT as the C runtime. UCRT should be installed 
manually on systems older than Windows 10 or Windows Server 2016 before 
installing
R.

I can't really see how changing to utf-8 as the native encoding would 
produce the behaviour I'm seeing, so I am guessing that the change in 
TCL/TK might be the culprit.

I'm hoping that someone will be able to help shed some light on what's 
going on here.

Thanks a lot,
Andrew.


From bbo|ker @end|ng |rom gm@||@com  Thu Sep 22 16:57:40 2022
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 22 Sep 2022 10:57:40 -0400
Subject: [Rd] Problem with accessibility in R 4.2.0 and 4.2.1.
In-Reply-To: <88b4bd63-0ec3-626b-1fa3-148f1419a8a3@dim.uchile.cl>
References: <88b4bd63-0ec3-626b-1fa3-148f1419a8a3@dim.uchile.cl>
Message-ID: <e44c02ed-d950-5db8-c64d-684b01b53f96@gmail.com>

   There was a long apparently related thread back in May:

https://stat.ethz.ch/pipermail/r-devel/2022-May/081708.html

but that problem was supposedly patched in 4.2.1 ...


On 2022-09-22 9:48 a.m., Andrew Hart via R-devel wrote:
> Hi. I'm having an issue with R 4.2.1 on Windows but I'm not sure if this 
> is the right place to ask about it. If it's not, I'm hoping someone can 
> point me in the right direction.
> 
> I'm blind and have been using R for about 11 years now. The base build 
> available on CRAN is quite accessible and works pretty well with 
> screen-reading software such as JAWS for Windows and NVDA. R-studio is 
> not accessible which appears to have something to do with the version of 
> QT it uses, but that's not relevant as I don't use it.
> 
> Recently I installed R 4.2.1 (I tend to upgrade two or three times a 
> year and this time I was jumping from R 4.1.2 to 4.2.1).
> However, I've encountered a serious problem which makes the latest 
> version more or less unusable for doing any kind of serious work.
> The issue is that the screen-reading software is unable to locate the R 
> cursor and behaves as though the cursor is near the top left of the R 
> application window. Practically, this means I can't tell what characters 
> I'm passing over when cursoring left and right, nor can I hear what 
> character is being deleted when the backspace is pressed. Most 
> importantly, I can't tell where the insertion point is. This is a major 
> regression in the ability to work with and edit the command line in the 
> R console. There are ways of actually viewing the command line but the 
> way I work is frequently calling up a previous command and making a 
> change so as to not have to type the whole command again.
> 
> I Went and installed R 4.1.3 and R 4.2.0 in an attempt to find out 
> exactly when things went awry and the issue first appeared in R 4.2.0.
> Looking through the release notes, the only things mentioned that seem 
> likely to be relevant are the following:
> 
> ? R uses a new 64-bit Tcl/Tk bundle. The previous 32-bit/64-bit bundle 
> had a different layout and can no longer be used.
> 
> and
> 
> ? R uses UTF-8 as the native encoding on recent Windows systems (at 
> least Windows 10 version 1903, Windows Server 2022 or Windows Server 
> 1903). As a part
> of this change, R uses UCRT as the C runtime. UCRT should be installed 
> manually on systems older than Windows 10 or Windows Server 2016 before 
> installing
> R.
> 
> I can't really see how changing to utf-8 as the native encoding would 
> produce the behaviour I'm seeing, so I am guessing that the change in 
> TCL/TK might be the culprit.
> 
> I'm hoping that someone will be able to help shed some light on what's 
> going on here.
> 
> Thanks a lot,
> Andrew.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
(Acting) Graduate chair, Mathematics & Statistics
 > E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From pd@|gd @end|ng |rom gm@||@com  Thu Sep 22 18:24:09 2022
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Thu, 22 Sep 2022 18:24:09 +0200
Subject: [Rd] Problem with accessibility in R 4.2.0 and 4.2.1.
In-Reply-To: <88b4bd63-0ec3-626b-1fa3-148f1419a8a3@dim.uchile.cl>
References: <88b4bd63-0ec3-626b-1fa3-148f1419a8a3@dim.uchile.cl>
Message-ID: <F5D1FEDE-78E8-4FD1-952A-E1C34456E485@gmail.com>

Tomas Kalibera has related that he has some scars from fighting with some unexpected interactions between UTF-8 and the GraphApp library that is used for RGui and I think he said that screen readers were involved. I wouldn't be surprised if this is a leftover issue. (This is obviously a kind of issue that non-blind users don't "see" :-) ).

Would it work for you to use the terminal application (the "DOS box", or whatever it is called these days) until the issue gets fixed?

In general, I would expect your go-to guy for blindness-related issues to be Jonathon Godfrey (cc'ed). Perhaps he can offer some advice.

-pd
 

> On 22 Sep 2022, at 15:48 , Andrew Hart via R-devel <r-devel at r-project.org> wrote:
> 
> Hi. I'm having an issue with R 4.2.1 on Windows but I'm not sure if this is the right place to ask about it. If it's not, I'm hoping someone can point me in the right direction.
> 
> I'm blind and have been using R for about 11 years now. The base build available on CRAN is quite accessible and works pretty well with screen-reading software such as JAWS for Windows and NVDA. R-studio is not accessible which appears to have something to do with the version of QT it uses, but that's not relevant as I don't use it.
> 
> Recently I installed R 4.2.1 (I tend to upgrade two or three times a year and this time I was jumping from R 4.1.2 to 4.2.1).
> However, I've encountered a serious problem which makes the latest version more or less unusable for doing any kind of serious work.
> The issue is that the screen-reading software is unable to locate the R cursor and behaves as though the cursor is near the top left of the R application window. Practically, this means I can't tell what characters I'm passing over when cursoring left and right, nor can I hear what character is being deleted when the backspace is pressed. Most importantly, I can't tell where the insertion point is. This is a major regression in the ability to work with and edit the command line in the R console. There are ways of actually viewing the command line but the way I work is frequently calling up a previous command and making a change so as to not have to type the whole command again.
> 
> I Went and installed R 4.1.3 and R 4.2.0 in an attempt to find out exactly when things went awry and the issue first appeared in R 4.2.0.
> Looking through the release notes, the only things mentioned that seem likely to be relevant are the following:
> 
> ? R uses a new 64-bit Tcl/Tk bundle. The previous 32-bit/64-bit bundle had a different layout and can no longer be used.
> 
> and
> 
> ? R uses UTF-8 as the native encoding on recent Windows systems (at least Windows 10 version 1903, Windows Server 2022 or Windows Server 1903). As a part
> of this change, R uses UCRT as the C runtime. UCRT should be installed manually on systems older than Windows 10 or Windows Server 2016 before installing
> R.
> 
> I can't really see how changing to utf-8 as the native encoding would produce the behaviour I'm seeing, so I am guessing that the change in TCL/TK might be the culprit.
> 
> I'm hoping that someone will be able to help shed some light on what's going on here.
> 
> Thanks a lot,
> Andrew.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Sep 22 18:41:27 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 22 Sep 2022 12:41:27 -0400
Subject: [Rd] Problem with accessibility in R 4.2.0 and 4.2.1.
In-Reply-To: <88b4bd63-0ec3-626b-1fa3-148f1419a8a3@dim.uchile.cl>
References: <88b4bd63-0ec3-626b-1fa3-148f1419a8a3@dim.uchile.cl>
Message-ID: <0836b27f-99cf-ef24-fa31-3f4af75f276d@gmail.com>

On 22/09/2022 9:48 a.m., Andrew Hart via R-devel wrote:
> Hi. I'm having an issue with R 4.2.1 on Windows but I'm not sure if this
> is the right place to ask about it. If it's not, I'm hoping someone can
> point me in the right direction.
> 
> I'm blind and have been using R for about 11 years now. The base build
> available on CRAN is quite accessible and works pretty well with
> screen-reading software such as JAWS for Windows and NVDA. R-studio is
> not accessible which appears to have something to do with the version of
> QT it uses, but that's not relevant as I don't use it.

I believe RStudio is in the process of moving away from QT to Electron. 
  I don't know when the non-QT version will be released (if not 
already), but you might want to investigate that if Rgui doesn't work out.

Duncan Murdoch
> 
> Recently I installed R 4.2.1 (I tend to upgrade two or three times a
> year and this time I was jumping from R 4.1.2 to 4.2.1).
> However, I've encountered a serious problem which makes the latest
> version more or less unusable for doing any kind of serious work.
> The issue is that the screen-reading software is unable to locate the R
> cursor and behaves as though the cursor is near the top left of the R
> application window. Practically, this means I can't tell what characters
> I'm passing over when cursoring left and right, nor can I hear what
> character is being deleted when the backspace is pressed. Most
> importantly, I can't tell where the insertion point is. This is a major
> regression in the ability to work with and edit the command line in the
> R console. There are ways of actually viewing the command line but the
> way I work is frequently calling up a previous command and making a
> change so as to not have to type the whole command again.
> 
> I Went and installed R 4.1.3 and R 4.2.0 in an attempt to find out
> exactly when things went awry and the issue first appeared in R 4.2.0.
> Looking through the release notes, the only things mentioned that seem
> likely to be relevant are the following:
> 
> ? R uses a new 64-bit Tcl/Tk bundle. The previous 32-bit/64-bit bundle
> had a different layout and can no longer be used.
> 
> and
> 
> ? R uses UTF-8 as the native encoding on recent Windows systems (at
> least Windows 10 version 1903, Windows Server 2022 or Windows Server
> 1903). As a part
> of this change, R uses UCRT as the C runtime. UCRT should be installed
> manually on systems older than Windows 10 or Windows Server 2016 before
> installing
> R.
> 
> I can't really see how changing to utf-8 as the native encoding would
> produce the behaviour I'm seeing, so I am guessing that the change in
> TCL/TK might be the culprit.
> 
> I'm hoping that someone will be able to help shed some light on what's
> going on here.
> 
> Thanks a lot,
> Andrew.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tdhock5 @end|ng |rom gm@||@com  Thu Sep 22 21:42:43 2022
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Thu, 22 Sep 2022 12:42:43 -0700
Subject: [Rd] Problem with accessibility in R 4.2.0 and 4.2.1.
In-Reply-To: <0836b27f-99cf-ef24-fa31-3f4af75f276d@gmail.com>
References: <88b4bd63-0ec3-626b-1fa3-148f1419a8a3@dim.uchile.cl>
 <0836b27f-99cf-ef24-fa31-3f4af75f276d@gmail.com>
Message-ID: <CALK03d36eK=VtUPPTTS1O5ch7dL+y2nKQvwdvAHkz5XL23vu9Q@mail.gmail.com>

Another option is to use https://emacspeak.sourceforge.net/ (version of
emacs editor/ide which can speak letters/words/lines -- has a blind
maintainer) with https://ess.r-project.org/ (interface for editing and
running R code from within emacs)

On Thu, Sep 22, 2022 at 9:42 AM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 22/09/2022 9:48 a.m., Andrew Hart via R-devel wrote:
> > Hi. I'm having an issue with R 4.2.1 on Windows but I'm not sure if this
> > is the right place to ask about it. If it's not, I'm hoping someone can
> > point me in the right direction.
> >
> > I'm blind and have been using R for about 11 years now. The base build
> > available on CRAN is quite accessible and works pretty well with
> > screen-reading software such as JAWS for Windows and NVDA. R-studio is
> > not accessible which appears to have something to do with the version of
> > QT it uses, but that's not relevant as I don't use it.
>
> I believe RStudio is in the process of moving away from QT to Electron.
>   I don't know when the non-QT version will be released (if not
> already), but you might want to investigate that if Rgui doesn't work out.
>
> Duncan Murdoch
> >
> > Recently I installed R 4.2.1 (I tend to upgrade two or three times a
> > year and this time I was jumping from R 4.1.2 to 4.2.1).
> > However, I've encountered a serious problem which makes the latest
> > version more or less unusable for doing any kind of serious work.
> > The issue is that the screen-reading software is unable to locate the R
> > cursor and behaves as though the cursor is near the top left of the R
> > application window. Practically, this means I can't tell what characters
> > I'm passing over when cursoring left and right, nor can I hear what
> > character is being deleted when the backspace is pressed. Most
> > importantly, I can't tell where the insertion point is. This is a major
> > regression in the ability to work with and edit the command line in the
> > R console. There are ways of actually viewing the command line but the
> > way I work is frequently calling up a previous command and making a
> > change so as to not have to type the whole command again.
> >
> > I Went and installed R 4.1.3 and R 4.2.0 in an attempt to find out
> > exactly when things went awry and the issue first appeared in R 4.2.0.
> > Looking through the release notes, the only things mentioned that seem
> > likely to be relevant are the following:
> >
> > ? R uses a new 64-bit Tcl/Tk bundle. The previous 32-bit/64-bit bundle
> > had a different layout and can no longer be used.
> >
> > and
> >
> > ? R uses UTF-8 as the native encoding on recent Windows systems (at
> > least Windows 10 version 1903, Windows Server 2022 or Windows Server
> > 1903). As a part
> > of this change, R uses UCRT as the C runtime. UCRT should be installed
> > manually on systems older than Windows 10 or Windows Server 2016 before
> > installing
> > R.
> >
> > I can't really see how changing to utf-8 as the native encoding would
> > produce the behaviour I'm seeing, so I am guessing that the change in
> > TCL/TK might be the culprit.
> >
> > I'm hoping that someone will be able to help shed some light on what's
> > going on here.
> >
> > Thanks a lot,
> > Andrew.
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Sep 22 23:02:19 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 22 Sep 2022 23:02:19 +0200
Subject: [Rd] Problem with accessibility in R 4.2.0 and 4.2.1.
In-Reply-To: <F5D1FEDE-78E8-4FD1-952A-E1C34456E485@gmail.com>
References: <88b4bd63-0ec3-626b-1fa3-148f1419a8a3@dim.uchile.cl>
 <F5D1FEDE-78E8-4FD1-952A-E1C34456E485@gmail.com>
Message-ID: <3b1a3aa1-28e1-c803-2cb5-84da6b54f0df@gmail.com>


On 9/22/22 18:24, peter dalgaard wrote:
> Tomas Kalibera has related that he has some scars from fighting with some unexpected interactions between UTF-8 and the GraphApp library that is used for RGui and I think he said that screen readers were involved. I wouldn't be surprised if this is a leftover issue. (This is obviously a kind of issue that non-blind users don't "see" :-) ).

Yes, that's almost surely related. GraphApp uses very different code for 
handling Windows messages in a multi-byte locale and single-byte locale, 
so switching to UTF-8 changed a lot. The multi-byte version hasn't been 
used that much before, and hence a number of bugs showed up after the 
switch.

> Would it work for you to use the terminal application (the "DOS box", or whatever it is called these days) until the issue gets fixed?
>
> In general, I would expect your go-to guy for blindness-related issues to be Jonathon Godfrey (cc'ed). Perhaps he can offer some advice.

There were two issues reported already with other software controlling a 
running window of Rgui, one was fixed in 4.2.1 (SendInput() for text 
injection didn't work in a multi-byte locale). Another hopefully was 
fixed in the application (it was using WM_CHAR messages to inject text, 
but that is not the right way to do this and fixing that to work as 
before would bee too difficult; the way recommended by Microsoft is 
SendInput, which now works).

It would be good if we could debug and fix this, on either end. For that 
we need to find out how the concrete screen reading applications 
communicate with Rgui window. Ideally I would have a tiny example which 
I could build and run on my Windows machine, without any special 
hardware, which would demonstrate the problem. Or, at least if the 
source code is available and we could have a look. Even if the 
application is closed source, the Windows messages could be captured by 
some tracing software to debug the protocol, and one could try writing 
an example/reproduction of the problem based on that.

Hopefully someone reading this could help with producing such an 
example, and then I could try investigating why it stopped working and 
fix, if possible.

In principle, we cannot yet assume that all Windows systems are new 
enough to support UTF-8 as the system encoding (also called ACP in 
Windows), so R support for running on Windows in a single-byte locale 
still cannot be removed, it will almost surely stay at least in 4.3. So, 
what I could definitely do is create an alternative build of Rgui which 
will use single-byte locale (like the older versions of R) even on new 
Windows systems. That alternatively build might be removed later if we 
decide to require UTF-8, but, temporarily it might help. Still, I hope 
we can debug and fix this to work properly when R is running with UTF-8 
as the native encoding.

I hope for now you can get away with 4.1.3. In principle, building Rgui 
to run R using single-byte locale is trivial (one just changes the 
manifest file for Rgui), so if a temporary solution was needed very 
fast, one can just do that and have a custom build before any new R 
release. Also, well, an older version of Windows 10 (or even older 
Windows) that don't support UTF-8 as the native encoding would do the same.

Best
Tomas


>
> -pd
>   
>
>> On 22 Sep 2022, at 15:48 , Andrew Hart via R-devel <r-devel at r-project.org> wrote:
>>
>> Hi. I'm having an issue with R 4.2.1 on Windows but I'm not sure if this is the right place to ask about it. If it's not, I'm hoping someone can point me in the right direction.
>>
>> I'm blind and have been using R for about 11 years now. The base build available on CRAN is quite accessible and works pretty well with screen-reading software such as JAWS for Windows and NVDA. R-studio is not accessible which appears to have something to do with the version of QT it uses, but that's not relevant as I don't use it.
>>
>> Recently I installed R 4.2.1 (I tend to upgrade two or three times a year and this time I was jumping from R 4.1.2 to 4.2.1).
>> However, I've encountered a serious problem which makes the latest version more or less unusable for doing any kind of serious work.
>> The issue is that the screen-reading software is unable to locate the R cursor and behaves as though the cursor is near the top left of the R application window. Practically, this means I can't tell what characters I'm passing over when cursoring left and right, nor can I hear what character is being deleted when the backspace is pressed. Most importantly, I can't tell where the insertion point is. This is a major regression in the ability to work with and edit the command line in the R console. There are ways of actually viewing the command line but the way I work is frequently calling up a previous command and making a change so as to not have to type the whole command again.
>>
>> I Went and installed R 4.1.3 and R 4.2.0 in an attempt to find out exactly when things went awry and the issue first appeared in R 4.2.0.
>> Looking through the release notes, the only things mentioned that seem likely to be relevant are the following:
>>
>> ? R uses a new 64-bit Tcl/Tk bundle. The previous 32-bit/64-bit bundle had a different layout and can no longer be used.
>>
>> and
>>
>> ? R uses UTF-8 as the native encoding on recent Windows systems (at least Windows 10 version 1903, Windows Server 2022 or Windows Server 1903). As a part
>> of this change, R uses UCRT as the C runtime. UCRT should be installed manually on systems older than Windows 10 or Windows Server 2016 before installing
>> R.
>>
>> I can't really see how changing to utf-8 as the native encoding would produce the behaviour I'm seeing, so I am guessing that the change in TCL/TK might be the culprit.
>>
>> I'm hoping that someone will be able to help shed some light on what's going on here.
>>
>> Thanks a lot,
>> Andrew.
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From @h@rt @end|ng |rom d|m@uch||e@c|  Thu Sep 22 23:15:54 2022
From: @h@rt @end|ng |rom d|m@uch||e@c| (Andrew Hart)
Date: Thu, 22 Sep 2022 18:15:54 -0300
Subject: [Rd] Problem with accessibility in R 4.2.0 and 4.2.1.
In-Reply-To: <CALK03d36eK=VtUPPTTS1O5ch7dL+y2nKQvwdvAHkz5XL23vu9Q@mail.gmail.com>
References: <88b4bd63-0ec3-626b-1fa3-148f1419a8a3@dim.uchile.cl>
 <0836b27f-99cf-ef24-fa31-3f4af75f276d@gmail.com>
 <CALK03d36eK=VtUPPTTS1O5ch7dL+y2nKQvwdvAHkz5XL23vu9Q@mail.gmail.com>
Message-ID: <23cdc9ad-765b-b5c9-32b6-d1cbfe9ccd44@dim.uchile.cl>

	On 22/09/2022 16:42, Toby Hocking wrote:
> Another option is to use https://emacspeak.sourceforge.net/ 
> <https://emacspeak.sourceforge.net/> (version of emacs editor/ide which 
> can speak letters/words/lines -- has a blind maintainer) with 
> https://ess.r-project.org/ <https://ess.r-project.org/> (interface for 
> editing and running R code from within emacs)

Thanks everyone for all the suggestions. Of course, the optimal solution 
would be to figure out what is going on in Rgui, but, as is always the 
case, the blind user use case is a fairly niche one. I appreciate all 
the suggestions for finding an immediate solution to my problem.
I don't use any kind of IDE for working with R since I simply haven't 
found one that is accessible or that i understand how to use. There is a 
plug-in for the Eclipse IDE I installed a few years ago, but I didn't 
understand the first thing about how it was to be used. So I've just 
always worked with an editor open in one Window and R in another,
working interactively in R or bouncing over to the editor for more 
complex things and sourcing code into R as necessary. However, I only 
use the R console in Rgui. I went and had a look at Rterm, which I have 
never used on Windows; I've only ever used it when ssh-ing into Linux 
systems to use R. However, I've just found out that Rterm does a number 
of fairly important things that probably mean I can just use it instead 
of Rgui:
1. You can paste from the clipboard into the Rterm prompt;
2. It has a command history;
3. If you plot something, it opens a Window to draw the plot (I never 
realised it could do this and had always assumed Rgui was needed for 
this); and
4. It opens the HTML help if you ask for help on windows. I only ever 
saw it display text help on Linux, but I was logged in remotely. 
Text-based help is fine when ssh-ing into a machine, but HTML help is 
much nicer to read and navigate.

I think I'll just switch over to Rterm for a while, but I can also check 
out ess, which I wasn't aware of.

Thanks a lot,
Andrew.


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Sep 23 00:06:51 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 23 Sep 2022 00:06:51 +0200
Subject: [Rd] Problem with accessibility in R 4.2.0 and 4.2.1.
In-Reply-To: <MEAPR01MB382950638C09F8D8A2BCBF45934E9@MEAPR01MB3829.ausprd01.prod.outlook.com>
References: <88b4bd63-0ec3-626b-1fa3-148f1419a8a3@dim.uchile.cl>
 <F5D1FEDE-78E8-4FD1-952A-E1C34456E485@gmail.com>
 <MEAPR01MB382950638C09F8D8A2BCBF45934E9@MEAPR01MB3829.ausprd01.prod.outlook.com>
Message-ID: <4ab48dd4-b3d6-8337-dc71-449eeb5af7b2@gmail.com>


On 9/22/22 23:13, Jonathan Godfrey wrote:
> Hello all,
>
> I can confirm Andrew's assessment of the situation for screen reader users (both JAWS and NVDA) for R GUI version 4.2.1; I don't intend to go back and verify how/when the problem first arose though.
>
> The situation is not new, or at least the same experience was evident well before now. When I started using R around 2005/6, the experience we now see today was how I found the GUI then. I investigated the terminal which was a huge success and never looked back.
>
> I tracked how the R GUI was going because my students would be using it, and at some stage, the way the GUI cursor behaved changed. If I recall correctly, the physical appearance of the cursor also altered at the same time. I still update versions regularly to stay one step of my students (all sighted) but because no one uses the R GUI, my efforts to trace its behaviour have been dwindling over the last five or so years. I don't need to check the RStudio behaviour because I can't, my colleagues are doing so, and I know it won't change for blind people anytime soon.
>
> The terminal has behaved consistently all that time. It has some minor differences between JAWS and NVDA, but the user knows what their screen reader is doing so the differences have relatively minor impact. It remains how I use R and therefore what I recommend for other blind users. N.B. I also strongly recommend R markdown files over R scripts.
>
> The experience in the GUI was human dependent, with the choice of screen reader and the skill level of the users with their screen reader both having an impact on the overall user experience. For many years, NVDA users were better off in the GUI than in the terminal, while most JAWS users were happier in the terminal. It has been fairly fluid though so my advice has been to try, using the existing skills and screen reader, but to be prepared to revert to the terminal fairly quickly.
>
> Minor variations in the interactions of R GUI and the various screen readers mean the difference between JAWS and NVDA were very similar prior to v4.2.0 to the extent that I would say the experience had converged quite nicely.
>
> RStudio has not made any significant progress in making its IDE more accessible, and I fear that it never will. I have tested other front ends and none have yet met accessibility standards. The problem with most of the front ends is that they are using development toolkits (such as QT) that do not speak with screen readers straight out of the box. I mentioned this in my R Journal article back in 2013.
>
> I fear that the development toolkit problem is what compromises accessibility of R GUI too. In a discussion I had with Duncan at UseR 2015, it was obvious to me that nothing  intentional had been done to the R GUI to improve my initial experience to the situation Andrew has been enjoying. For that reason, I suspect that there is room for something different in the background, as against any explicit action taken by the R developments, which have (unfortunately) taken us backwards.
>
> Andrew: I am confident you can move to the terminal without requiring help, but grabbing the latest development version of BrailleR off GitHub will give you some functions that will save a bit of effort. We might arrange a voice call next week for an ongoing discussion.
>
> Tomas: I'm not able to help with your suggestion, mainly because I don't understand the nuts and bolts of it. I do believe though that the cursor focus is a critical factor, but that the cursor being used by the screen reader software is different to the cursor being used by the sighted users. When I switch from the active cursor to the screen readers' review mode, the screen readers both take me back to the top left of the window under the menu bar. Has anything changed in the visual appearance of the cursor from v4.1.3 to v4.2.0? I ask because it is the symptom.

Dear Jonathan,

thanks for all the background. There was no change in Rgui/GraphApp 
meant to change anything related to the cursor in 4.2.0 (neither at 
least in the last 5 years). There have only been very few changes, 
majority of them to fix encoding issues. But, as you write, these things 
can happen indirectly, and the switch to 4.2.0 has already woken up many 
(as GraphApp then uses different code than before, and as Windows 
sometimes support UTF-8 in surprising ways - it is a very new feature 
and making the old Windows component accept it properly is probably 
difficult). One of them was actually also reported by a blind user (I 
broke the search/replace in the script editor, already fixed).

Best
Tomas
> Peter: Thank you very much for actively bringing me into this thread. I don't know why I hadn't seen Andrew's first message given I get other list traffic.
>
> Jonathan
>
>
> -----Original Message-----
> From: peter dalgaard <pdalgd at gmail.com>
> Sent: Friday, 23 September 2022 4:24 am
> To: Andrew Hart <ahart at dim.uchile.cl>
> Cc: R-devel at r-project.org; Tomas Kalibera <tomas.kalibera at gmail.com>; Jonathan Godfrey <A.J.Godfrey at massey.ac.nz>
> Subject: Re: [Rd] Problem with accessibility in R 4.2.0 and 4.2.1.
>
> Tomas Kalibera has related that he has some scars from fighting with some unexpected interactions between UTF-8 and the GraphApp library that is used for RGui and I think he said that screen readers were involved. I wouldn't be surprised if this is a leftover issue. (This is obviously a kind of issue that non-blind users don't "see" :-) ).
>
> Would it work for you to use the terminal application (the "DOS box", or whatever it is called these days) until the issue gets fixed?
>
> In general, I would expect your go-to guy for blindness-related issues to be Jonathon Godfrey (cc'ed). Perhaps he can offer some advice.
>
> -pd
>   
>
>> On 22 Sep 2022, at 15:48 , Andrew Hart via R-devel <r-devel at r-project.org> wrote:
>>
>> Hi. I'm having an issue with R 4.2.1 on Windows but I'm not sure if this is the right place to ask about it. If it's not, I'm hoping someone can point me in the right direction.
>>
>> I'm blind and have been using R for about 11 years now. The base build available on CRAN is quite accessible and works pretty well with screen-reading software such as JAWS for Windows and NVDA. R-studio is not accessible which appears to have something to do with the version of QT it uses, but that's not relevant as I don't use it.
>>
>> Recently I installed R 4.2.1 (I tend to upgrade two or three times a year and this time I was jumping from R 4.1.2 to 4.2.1).
>> However, I've encountered a serious problem which makes the latest version more or less unusable for doing any kind of serious work.
>> The issue is that the screen-reading software is unable to locate the R cursor and behaves as though the cursor is near the top left of the R application window. Practically, this means I can't tell what characters I'm passing over when cursoring left and right, nor can I hear what character is being deleted when the backspace is pressed. Most importantly, I can't tell where the insertion point is. This is a major regression in the ability to work with and edit the command line in the R console. There are ways of actually viewing the command line but the way I work is frequently calling up a previous command and making a change so as to not have to type the whole command again.
>>
>> I Went and installed R 4.1.3 and R 4.2.0 in an attempt to find out exactly when things went awry and the issue first appeared in R 4.2.0.
>> Looking through the release notes, the only things mentioned that seem likely to be relevant are the following:
>>
>> * R uses a new 64-bit Tcl/Tk bundle. The previous 32-bit/64-bit bundle had a different layout and can no longer be used.
>>
>> and
>>
>> * R uses UTF-8 as the native encoding on recent Windows systems (at least Windows 10 version 1903, Windows Server 2022 or Windows Server 1903). As a part
>> of this change, R uses UCRT as the C runtime. UCRT should be installed manually on systems older than Windows 10 or Windows Server 2016 before installing
>> R.
>>
>> I can't really see how changing to utf-8 as the native encoding would produce the behaviour I'm seeing, so I am guessing that the change in TCL/TK might be the culprit.
>>
>> I'm hoping that someone will be able to help shed some light on what's going on here.
>>
>> Thanks a lot,
>> Andrew.
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://apc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&amp;data=05%7C01%7CA.J.Godfrey%40massey.ac.nz%7C3e0ccf59e1204914ed8d08da9cb6e77e%7C388728e1bbd0437898dcf8682e644300%7C1%7C0%7C637994606638298455%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=rkn809t40%2BbzwxC%2BVUkQcna4SkaoupyZG%2F1ZMgCw%2BGE%3D&amp;reserved=0


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Sep 23 09:46:34 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 23 Sep 2022 09:46:34 +0200
Subject: [Rd] Date method of as.POSIXct does not respect tz
In-Reply-To: <4892f293-b399-45eb-1ee8-ea05afd8365b@thuenen.de>
References: <65932fa5-535d-19e4-2a70-7a6ffd10dfa4@thuenen.de>
 <23293.49665.770796.423446@stat.math.ethz.ch>
 <4892f293-b399-45eb-1ee8-ea05afd8365b@thuenen.de>
Message-ID: <25389.25690.643428.329556@stat.math.ethz.ch>

>>>>> Roland Fu? 
>>>>>     on Tue, 20 Sep 2022 09:25:52 +0200 writes:

    > Hello, May I follow up on this? Has it fallen through the
    > cracks or were there considerations against passing `tz`
    > to `.POSIXct`?

    > Regards,
    > Roland

Hmm...  I don't remember  even though I had replied positively
to your question in May 2018.

PROS (for allowing 'tz') to be passed to
----   as.POSIXct.Date()  and hence ideally also to as.POSIXlt.Date() 

1) as.POSIXct() and as.POSIXlt()   all show with a 'tz' argument
  on the help page, and hence for consistency users should
  really expect  that 'tz = ".."'  also works in these two cases:

  Usage:

     as.POSIXct(x, tz = "", ...)
     as.POSIXlt(x, tz = "", ...)
     
     ## S3 method for class 'character'
     as.POSIXlt(x, tz = "", format,
                tryFormats = c("%Y-%m-%d %H:%M:%OS",
                               "%Y/%m/%d %H:%M:%OS",
                               "%Y-%m-%d %H:%M",
                               "%Y/%m/%d %H:%M",
                               "%Y-%m-%d",
                               "%Y/%m/%d"),
                optional = FALSE, ...)
     ## Default S3 method:
     as.POSIXlt(x, tz = "",
                optional = FALSE, ...)
     ## S3 method for class 'numeric'
     as.POSIXlt(x, tz = "", origin, ...)


2) It is easy to be implemented for  as.POSIXct()   as you found
   already in 2018.


CONS:
-----

3) The 'Details:' section on the help page,
   end of 1st paragraph says

     Dates without times are treated as being at midnight UTC.

   So the current hardwired behavior is documented.

4a) For  as.POSIXlt.Date()  to allow passing 'tz' needs changes
   in the C code,  i.e., is considerable more work than for the as.POSIXct(),
   (or actually just post-processing in the R code, much less work)

4b) Only changing the behavior for as.POSIXct()  but not for as.POSIXlt()
    is also an inconsistency.


My personal inclination would still be to do the change,
by giving most weight to  '1)' above.

What do other experienced R developers think ?

Martin


    > Am 17.05.2018 um 19:55 schrieb Martin Maechler:
    >>>>>>> Roland Fu? on Wed, 16 May 2018 17:21:07 +0200
    >>>>>>> writes:
    >> > R 3.5.0 Is it intended that the Date method of
    >> as.POSIXct > does not respect the tz parameter? I suggest
    >> changing > as.POSIXct.Date
    >> 
    >> which is
    >> 
    >> function (x, ...) .POSIXct(unclass(x) * 86400)
    >> 
    >> > to this:
    >> 
    >> function (x, tz = "", ...)  .POSIXct(unclass(x) * 86400,
    >> tz = tz)
    >> 
    >> or rather just forward the '...', i.e., use
    >> 
    >> function (x, ...) .POSIXct(unclass(x) * 86400, ...)
    >> 
    >> ??
    >> 
    >> > Currently, the best workaround seems to be using the >
    >> character method if one doesn't want the default timezone
    >> > (which is often an annoying DST timezone).
    >> 
    >> > This came up on Stack Overflow: >
    >> https://stackoverflow.com/q/50373340/1412059
    >> 
    >> > --
    >> > Roland
    >> 
    >> Thank you Roland for your notice (and the help on SO).
    >> 
    >> Best, Martin

    > -- 
    > Dr. Roland Fu?

    > Th?nen-Institut f?r Agrarklimaschutz/ Th?nen Institute of
    > Climate-Smart Agriculture

    > Bundesallee 65 D-38116 Braunschweig, Germany

    > Tel.: ++49 531 596 2627 Fax: ++49 531 596 2699 Email:
    > roland.fuss at thuenen.de

    > Arbeitsgruppe "Emissionsberichterstattung"/ Working group
    > "Emission Inventories" Email:
    > emissionsinventare at thuenen.de

    > Das Johann Heinrich von Th?nen-Institut,
    > Bundesforschungsinstitut f?r L?ndliche R?ume, Wald und
    > Fischerei ? kurz: Th?nen-Institut ? besteht aus 15
    > Fachinstituten, die in den Bereichen ?konomie, ?kologie
    > und Technologie forschen und die Politik beraten.

    > The Johann Heinrich von Th?nen Institute, Federal Research
    > Institute for Rural Areas, Forestry and Fisheries ? Th?nen
    > Institute in brief ? consists of 15 specialized institutes
    > that carry out research and provide policy advice in the
    > fields of economy, ecology and technology.


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Fri Sep 23 09:57:49 2022
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Fri, 23 Sep 2022 09:57:49 +0200
Subject: [Rd] Date method of as.POSIXct does not respect tz
In-Reply-To: <25389.25690.643428.329556@stat.math.ethz.ch>
References: <65932fa5-535d-19e4-2a70-7a6ffd10dfa4@thuenen.de>
 <23293.49665.770796.423446@stat.math.ethz.ch>
 <4892f293-b399-45eb-1ee8-ea05afd8365b@thuenen.de>
 <25389.25690.643428.329556@stat.math.ethz.ch>
Message-ID: <25389.26365.938007.477851@hornik.net>

>>>>> Martin Maechler writes:

Currently in R-devel,

R> as.POSIXlt.Date
function (x, ...) 
{
    if (any((y <- unclass(x)) > .Machine$integer.max, na.rm = TRUE)) 
        as.POSIXlt(.POSIXct(y * 86400), tz = "UTC")
    else .Internal(Date2POSIXlt(x))
}

R> as.POSIXct.Date
function (x, ...) 
.POSIXct(unclass(x) * 86400)

Adding tz to the latter is easy, and the former could do the if() part
also with a given tz without needing to change the .Internal?

Best
-k

>>>>> Roland Fu? 
>>>>>     on Tue, 20 Sep 2022 09:25:52 +0200 writes:

>> Hello, May I follow up on this? Has it fallen through the
>> cracks or were there considerations against passing `tz`
>> to `.POSIXct`?

>> Regards,
>> Roland

> Hmm...  I don't remember  even though I had replied positively
> to your question in May 2018.

> PROS (for allowing 'tz') to be passed to
> ----   as.POSIXct.Date()  and hence ideally also to as.POSIXlt.Date() 

> 1) as.POSIXct() and as.POSIXlt()   all show with a 'tz' argument
>   on the help page, and hence for consistency users should
>   really expect  that 'tz = ".."'  also works in these two cases:

>   Usage:

>      as.POSIXct(x, tz = "", ...)
>      as.POSIXlt(x, tz = "", ...)
     
>      ## S3 method for class 'character'
>      as.POSIXlt(x, tz = "", format,
>                 tryFormats = c("%Y-%m-%d %H:%M:%OS",
>                                "%Y/%m/%d %H:%M:%OS",
>                                "%Y-%m-%d %H:%M",
>                                "%Y/%m/%d %H:%M",
>                                "%Y-%m-%d",
>                                "%Y/%m/%d"),
>                 optional = FALSE, ...)
>      ## Default S3 method:
>      as.POSIXlt(x, tz = "",
>                 optional = FALSE, ...)
>      ## S3 method for class 'numeric'
>      as.POSIXlt(x, tz = "", origin, ...)


> 2) It is easy to be implemented for  as.POSIXct()   as you found
>    already in 2018.


> CONS:
> -----

> 3) The 'Details:' section on the help page,
>    end of 1st paragraph says

>      Dates without times are treated as being at midnight UTC.

>    So the current hardwired behavior is documented.

> 4a) For  as.POSIXlt.Date()  to allow passing 'tz' needs changes
>    in the C code,  i.e., is considerable more work than for the as.POSIXct(),
>    (or actually just post-processing in the R code, much less work)

> 4b) Only changing the behavior for as.POSIXct()  but not for as.POSIXlt()
>     is also an inconsistency.


> My personal inclination would still be to do the change,
> by giving most weight to  '1)' above.

> What do other experienced R developers think ?

> Martin


>> Am 17.05.2018 um 19:55 schrieb Martin Maechler:
>>>>>>>> Roland Fu? on Wed, 16 May 2018 17:21:07 +0200
>>>>>>>> writes:
>>> > R 3.5.0 Is it intended that the Date method of
>>> as.POSIXct > does not respect the tz parameter? I suggest
>>> changing > as.POSIXct.Date
>>> 
>>> which is
>>> 
>>> function (x, ...) .POSIXct(unclass(x) * 86400)
>>> 
>>> > to this:
>>> 
>>> function (x, tz = "", ...)  .POSIXct(unclass(x) * 86400,
>>> tz = tz)
>>> 
>>> or rather just forward the '...', i.e., use
>>> 
>>> function (x, ...) .POSIXct(unclass(x) * 86400, ...)
>>> 
>>> ??
>>> 
>>> > Currently, the best workaround seems to be using the >
>>> character method if one doesn't want the default timezone
>>> > (which is often an annoying DST timezone).
>>> 
>>> > This came up on Stack Overflow: >
>>> https://stackoverflow.com/q/50373340/1412059
>>> 
>>> > --
>>> > Roland
>>> 
>>> Thank you Roland for your notice (and the help on SO).
>>> 
>>> Best, Martin

>> -- 
>> Dr. Roland Fu?

>> Th?nen-Institut f?r Agrarklimaschutz/ Th?nen Institute of
>> Climate-Smart Agriculture

>> Bundesallee 65 D-38116 Braunschweig, Germany

>> Tel.: ++49 531 596 2627 Fax: ++49 531 596 2699 Email:
>> roland.fuss at thuenen.de

>> Arbeitsgruppe "Emissionsberichterstattung"/ Working group
>> "Emission Inventories" Email:
>> emissionsinventare at thuenen.de

>> Das Johann Heinrich von Th?nen-Institut,
>> Bundesforschungsinstitut f?r L?ndliche R?ume, Wald und
>> Fischerei ? kurz: Th?nen-Institut ? besteht aus 15
>> Fachinstituten, die in den Bereichen ?konomie, ?kologie
>> und Technologie forschen und die Politik beraten.

>> The Johann Heinrich von Th?nen Institute, Federal Research
>> Institute for Rural Areas, Forestry and Fisheries ? Th?nen
>> Institute in brief ? consists of 15 specialized institutes
>> that carry out research and provide policy advice in the
>> fields of economy, ecology and technology.

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From A@J@God|rey @end|ng |rom m@@@ey@@c@nz  Thu Sep 22 23:13:04 2022
From: A@J@God|rey @end|ng |rom m@@@ey@@c@nz (Jonathan Godfrey)
Date: Thu, 22 Sep 2022 21:13:04 +0000
Subject: [Rd] Problem with accessibility in R 4.2.0 and 4.2.1.
In-Reply-To: <F5D1FEDE-78E8-4FD1-952A-E1C34456E485@gmail.com>
References: <88b4bd63-0ec3-626b-1fa3-148f1419a8a3@dim.uchile.cl>
 <F5D1FEDE-78E8-4FD1-952A-E1C34456E485@gmail.com>
Message-ID: <MEAPR01MB382950638C09F8D8A2BCBF45934E9@MEAPR01MB3829.ausprd01.prod.outlook.com>

Hello all,

I can confirm Andrew's assessment of the situation for screen reader users (both JAWS and NVDA) for R GUI version 4.2.1; I don't intend to go back and verify how/when the problem first arose though.

The situation is not new, or at least the same experience was evident well before now. When I started using R around 2005/6, the experience we now see today was how I found the GUI then. I investigated the terminal which was a huge success and never looked back.

I tracked how the R GUI was going because my students would be using it, and at some stage, the way the GUI cursor behaved changed. If I recall correctly, the physical appearance of the cursor also altered at the same time. I still update versions regularly to stay one step of my students (all sighted) but because no one uses the R GUI, my efforts to trace its behaviour have been dwindling over the last five or so years. I don't need to check the RStudio behaviour because I can't, my colleagues are doing so, and I know it won't change for blind people anytime soon.

The terminal has behaved consistently all that time. It has some minor differences between JAWS and NVDA, but the user knows what their screen reader is doing so the differences have relatively minor impact. It remains how I use R and therefore what I recommend for other blind users. N.B. I also strongly recommend R markdown files over R scripts.

The experience in the GUI was human dependent, with the choice of screen reader and the skill level of the users with their screen reader both having an impact on the overall user experience. For many years, NVDA users were better off in the GUI than in the terminal, while most JAWS users were happier in the terminal. It has been fairly fluid though so my advice has been to try, using the existing skills and screen reader, but to be prepared to revert to the terminal fairly quickly.

Minor variations in the interactions of R GUI and the various screen readers mean the difference between JAWS and NVDA were very similar prior to v4.2.0 to the extent that I would say the experience had converged quite nicely.

RStudio has not made any significant progress in making its IDE more accessible, and I fear that it never will. I have tested other front ends and none have yet met accessibility standards. The problem with most of the front ends is that they are using development toolkits (such as QT) that do not speak with screen readers straight out of the box. I mentioned this in my R Journal article back in 2013.

I fear that the development toolkit problem is what compromises accessibility of R GUI too. In a discussion I had with Duncan at UseR 2015, it was obvious to me that nothing  intentional had been done to the R GUI to improve my initial experience to the situation Andrew has been enjoying. For that reason, I suspect that there is room for something different in the background, as against any explicit action taken by the R developments, which have (unfortunately) taken us backwards.

Andrew: I am confident you can move to the terminal without requiring help, but grabbing the latest development version of BrailleR off GitHub will give you some functions that will save a bit of effort. We might arrange a voice call next week for an ongoing discussion.

Tomas: I'm not able to help with your suggestion, mainly because I don't understand the nuts and bolts of it. I do believe though that the cursor focus is a critical factor, but that the cursor being used by the screen reader software is different to the cursor being used by the sighted users. When I switch from the active cursor to the screen readers' review mode, the screen readers both take me back to the top left of the window under the menu bar. Has anything changed in the visual appearance of the cursor from v4.1.3 to v4.2.0? I ask because it is the symptom.

Peter: Thank you very much for actively bringing me into this thread. I don't know why I hadn't seen Andrew's first message given I get other list traffic.

Jonathan


-----Original Message-----
From: peter dalgaard <pdalgd at gmail.com> 
Sent: Friday, 23 September 2022 4:24 am
To: Andrew Hart <ahart at dim.uchile.cl>
Cc: R-devel at r-project.org; Tomas Kalibera <tomas.kalibera at gmail.com>; Jonathan Godfrey <A.J.Godfrey at massey.ac.nz>
Subject: Re: [Rd] Problem with accessibility in R 4.2.0 and 4.2.1.

Tomas Kalibera has related that he has some scars from fighting with some unexpected interactions between UTF-8 and the GraphApp library that is used for RGui and I think he said that screen readers were involved. I wouldn't be surprised if this is a leftover issue. (This is obviously a kind of issue that non-blind users don't "see" :-) ).

Would it work for you to use the terminal application (the "DOS box", or whatever it is called these days) until the issue gets fixed?

In general, I would expect your go-to guy for blindness-related issues to be Jonathon Godfrey (cc'ed). Perhaps he can offer some advice.

-pd
 

> On 22 Sep 2022, at 15:48 , Andrew Hart via R-devel <r-devel at r-project.org> wrote:
> 
> Hi. I'm having an issue with R 4.2.1 on Windows but I'm not sure if this is the right place to ask about it. If it's not, I'm hoping someone can point me in the right direction.
> 
> I'm blind and have been using R for about 11 years now. The base build available on CRAN is quite accessible and works pretty well with screen-reading software such as JAWS for Windows and NVDA. R-studio is not accessible which appears to have something to do with the version of QT it uses, but that's not relevant as I don't use it.
> 
> Recently I installed R 4.2.1 (I tend to upgrade two or three times a year and this time I was jumping from R 4.1.2 to 4.2.1).
> However, I've encountered a serious problem which makes the latest version more or less unusable for doing any kind of serious work.
> The issue is that the screen-reading software is unable to locate the R cursor and behaves as though the cursor is near the top left of the R application window. Practically, this means I can't tell what characters I'm passing over when cursoring left and right, nor can I hear what character is being deleted when the backspace is pressed. Most importantly, I can't tell where the insertion point is. This is a major regression in the ability to work with and edit the command line in the R console. There are ways of actually viewing the command line but the way I work is frequently calling up a previous command and making a change so as to not have to type the whole command again.
> 
> I Went and installed R 4.1.3 and R 4.2.0 in an attempt to find out exactly when things went awry and the issue first appeared in R 4.2.0.
> Looking through the release notes, the only things mentioned that seem likely to be relevant are the following:
> 
> * R uses a new 64-bit Tcl/Tk bundle. The previous 32-bit/64-bit bundle had a different layout and can no longer be used.
> 
> and
> 
> * R uses UTF-8 as the native encoding on recent Windows systems (at least Windows 10 version 1903, Windows Server 2022 or Windows Server 1903). As a part
> of this change, R uses UCRT as the C runtime. UCRT should be installed manually on systems older than Windows 10 or Windows Server 2016 before installing
> R.
> 
> I can't really see how changing to utf-8 as the native encoding would produce the behaviour I'm seeing, so I am guessing that the change in TCL/TK might be the culprit.
> 
> I'm hoping that someone will be able to help shed some light on what's going on here.
> 
> Thanks a lot,
> Andrew.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://apc01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&amp;data=05%7C01%7CA.J.Godfrey%40massey.ac.nz%7C3e0ccf59e1204914ed8d08da9cb6e77e%7C388728e1bbd0437898dcf8682e644300%7C1%7C0%7C637994606638298455%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=rkn809t40%2BbzwxC%2BVUkQcna4SkaoupyZG%2F1ZMgCw%2BGE%3D&amp;reserved=0

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Sep 23 11:04:12 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 23 Sep 2022 11:04:12 +0200
Subject: [Rd] Date method of as.POSIXct does not respect tz
In-Reply-To: <25389.26365.938007.477851@hornik.net>
References: <65932fa5-535d-19e4-2a70-7a6ffd10dfa4@thuenen.de>
 <23293.49665.770796.423446@stat.math.ethz.ch>
 <4892f293-b399-45eb-1ee8-ea05afd8365b@thuenen.de>
 <25389.25690.643428.329556@stat.math.ethz.ch>
 <25389.26365.938007.477851@hornik.net>
Message-ID: <25389.30348.53955.824968@stat.math.ethz.ch>

>>>>> Kurt Hornik 
>>>>>     on Fri, 23 Sep 2022 09:57:49 +0200 writes:

>>>>> Martin Maechler writes:

    > Currently in R-devel,

    R> as.POSIXlt.Date
    > function (x, ...) 
    > {
    >    if (any((y <- unclass(x)) > .Machine$integer.max, na.rm = TRUE)) 
    >         as.POSIXlt(.POSIXct(y * 86400), tz = "UTC")
    >    else .Internal(Date2POSIXlt(x))
    > }

    R> as.POSIXct.Date
    > function (x, ...) 
    > .POSIXct(unclass(x) * 86400)

    > Adding tz to the latter is easy, and the former could do the if() part
    > also with a given tz without needing to change the .Internal?

Genau!  Even more elegantly than I first thought when I wrote
"post-processing":

The following even adds internal consistency inside as.POSIXlt.Date() :

as.POSIXlt.Date <- function(x, tz = "UTC", ...) {
    as.POSIXlt(if(any((y <- unclass(x)) > .Machine$integer.max, na.rm = TRUE))
                   .POSIXct(y * 86400)
               else
                   .Internal(Date2POSIXlt(x))
             , tz = tz)
}

because now, tz is even *formally* treated the same in both
cases (whereas previously it only appeared visually in one case).

So probably, another reason to go there.
Note that I also think we'd keep the    tz = "UTZ"
default argument, even when the
other  as.POSIX[cl]t() methods have 'tz = ""'



>>>>> Roland Fu? 
>>>>>     on Tue, 20 Sep 2022 09:25:52 +0200 writes:

    >>> Hello, May I follow up on this? Has it fallen through the
    >>> cracks or were there considerations against passing `tz`
    >>> to `.POSIXct`?

    >>> Regards,
    >>> Roland

    >> Hmm...  I don't remember  even though I had replied positively
    >> to your question in May 2018.

    >> PROS (for allowing 'tz') to be passed to
    >> ----   as.POSIXct.Date()  and hence ideally also to as.POSIXlt.Date() 

    >> 1) as.POSIXct() and as.POSIXlt()   all show with a 'tz' argument
    >> on the help page, and hence for consistency users should
    >> really expect  that 'tz = ".."'  also works in these two cases:

    >> Usage:

    >> as.POSIXct(x, tz = "", ...)
    >> as.POSIXlt(x, tz = "", ...)
     
    >> ## S3 method for class 'character'
    >> as.POSIXlt(x, tz = "", format,
    >> tryFormats = c("%Y-%m-%d %H:%M:%OS",
    >> "%Y/%m/%d %H:%M:%OS",
    >> "%Y-%m-%d %H:%M",
    >> "%Y/%m/%d %H:%M",
    >> "%Y-%m-%d",
    >> "%Y/%m/%d"),
    >> optional = FALSE, ...)
    >> ## Default S3 method:
    >> as.POSIXlt(x, tz = "",
    >> optional = FALSE, ...)
    >> ## S3 method for class 'numeric'
    >> as.POSIXlt(x, tz = "", origin, ...)


    >> 2) It is easy to be implemented for  as.POSIXct()   as you found
    >> already in 2018.


    >> CONS:
    >> -----

    >> 3) The 'Details:' section on the help page,
    >> end of 1st paragraph says

    >> Dates without times are treated as being at midnight UTC.

    >> So the current hardwired behavior is documented.

    >> 4a) For  as.POSIXlt.Date()  to allow passing 'tz' needs changes
    >> in the C code,  i.e., is considerable more work than for the as.POSIXct(),
    >> (or actually just post-processing in the R code, much less work)

    >> 4b) Only changing the behavior for as.POSIXct()  but not for as.POSIXlt()
    >> is also an inconsistency.


    >> My personal inclination would still be to do the change,
    >> by giving most weight to  '1)' above.

    >> What do other experienced R developers think ?

    >> Martin


    >>> Am 17.05.2018 um 19:55 schrieb Martin Maechler:
    >>>>>>>>> Roland Fu? on Wed, 16 May 2018 17:21:07 +0200
    >>>>>>>>> writes:
    >>>> > R 3.5.0 Is it intended that the Date method of
    >>>> as.POSIXct > does not respect the tz parameter? I suggest
    >>>> changing > as.POSIXct.Date
    >>>> 
    >>>> which is
    >>>> 
    >>>> function (x, ...) .POSIXct(unclass(x) * 86400)
    >>>> 
    >>>> > to this:
    >>>> 
    >>>> function (x, tz = "", ...)  .POSIXct(unclass(x) * 86400,
    >>>> tz = tz)
    >>>> 
    >>>> or rather just forward the '...', i.e., use
    >>>> 
    >>>> function (x, ...) .POSIXct(unclass(x) * 86400, ...)
    >>>> 
    >>>> ??
    >>>> 
    >>>> > Currently, the best workaround seems to be using the >
    >>>> character method if one doesn't want the default timezone
    >>>> > (which is often an annoying DST timezone).
    >>>> 
    >>>> > This came up on Stack Overflow: >
    >>>> https://stackoverflow.com/q/50373340/1412059
    >>>> 
    >>>> > --
    >>>> > Roland
    >>>> 
    >>>> Thank you Roland for your notice (and the help on SO).
    >>>> 
    >>>> Best, Martin

    >>> -- 
    >>> Dr. Roland Fu?

    >>> Th?nen-Institut f?r Agrarklimaschutz/ Th?nen Institute of
    >>> Climate-Smart Agriculture

    >>> Bundesallee 65 D-38116 Braunschweig, Germany

    >>> Tel.: ++49 531 596 2627 Fax: ++49 531 596 2699 Email:
    >>> roland.fuss at thuenen.de

    >>> Arbeitsgruppe "Emissionsberichterstattung"/ Working group
    >>> "Emission Inventories" Email:
    >>> emissionsinventare at thuenen.de

    >>> Das Johann Heinrich von Th?nen-Institut,
    >>> Bundesforschungsinstitut f?r L?ndliche R?ume, Wald und
    >>> Fischerei ? kurz: Th?nen-Institut ? besteht aus 15
    >>> Fachinstituten, die in den Bereichen ?konomie, ?kologie
    >>> und Technologie forschen und die Politik beraten.

    >>> The Johann Heinrich von Th?nen Institute, Federal Research
    >>> Institute for Rural Areas, Forestry and Fisheries ? Th?nen
    >>> Institute in brief ? consists of 15 specialized institutes
    >>> that carry out research and provide policy advice in the
    >>> fields of economy, ecology and technology.

    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Sep 23 11:54:57 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 23 Sep 2022 05:54:57 -0400
Subject: [Rd] 
 Should package version requirements assume installation from
 sources?
In-Reply-To: <bf1ca8d1-37f9-6ec1-59d3-692f0fb563ba@gmail.com>
References: <b3e53fa9-b0e0-a8c8-147a-c1c56348f3e9@gmail.com>
 <bf1ca8d1-37f9-6ec1-59d3-692f0fb563ba@gmail.com>
Message-ID: <60965ee5-ab64-98a9-eb1d-f6a46b7b5d86@gmail.com>

This issue may be the culprit in an obscure bug that's been reported on 
R-package-devel:  see 
https://stat.ethz.ch/pipermail/r-package-devel/2022q3/008481.html.  It 
appears that some ggplot2 version 3.4.0 code is being run even though 
3.3.6 is the version on CRAN, and 3.3.6 is *also* being run in the same 
check session.

Duncan Murdoch

On 14/09/2022 6:04 a.m., Duncan Murdoch wrote:
> On 13/09/2022 5:45 p.m., Mikael Jagan wrote:
>> [Arguably also appropriate for R-package-devel, but posted to R-devel
>>        as the discussion is aimed primarily at "experts" ... ]
>>
>> We, the authors of Matrix, have encountered a somewhat subtle issue
>> induced by caching of S4 classes and methods in package namespaces.
>>
>> The namespaces of three reverse dependent packages (SeuratObject, conText,
>> mcmcsae) cache the formal definition of our virtual class Matrix (and some
>> subclasses).  For example:
>>
>>    > ns <- asNamespace("SeuratObject")
>>    > grep("^[.]__C__.*Matrix$", names(ns), value = TRUE)
>> [1] ".__C__dMatrix"       ".__C__compMatrix"    ".__C__AnyMatrix"
>> [4] ".__C__generalMatrix" ".__C__CsparseMatrix" ".__C__sparseMatrix"
>> [7] ".__C__dsparseMatrix" ".__C__Matrix"
>>
>> The cached definition (which includes a _validity method_) is obtained from
>> the version of Matrix available when the reverse dependent package was built
>> from sources.  For example, if SeuratObject was built under Matrix 1.4-1,
>> then we get:
>>
>>    > getValidity(ns$.__C__Matrix)
>> function (object)
>> {
>>        if (!isTRUE(r <- .Call(Dim_validate, object, "Matrix")))
>>            r
>>        else .Call(dimNames_validate, object)
>> }
>> <bytecode: 0x11e7ca508>
>> <environment: namespace:Matrix>
>>
>> whereas if SeuratObject was built under Matrix >= 1.5-0, then we get:
>>
>>    > getValidity(ns$.__C__Matrix)
>> function (object)
>> .Call(Matrix_validate, object)
>> <bytecode: 0x107dc1698>
>> <environment: namespace:Matrix>
>>
>> There are two "questions" here:
>>
>> 1.  The symbol 'Matrix_validate' is not defined until Matrix 1.5-0.
>>        Is it necessary, for this reason alone, for SeuratObject to have
>>        'Imports: Matrix (>= 1.5-0)'?  Or can SeuratObject continue using
>>        'Imports: Matrix (>= 1.3-3)', at the risk of errors like
>>
>>        > Error: object 'Matrix_validate' not found
>>
>>        (as already seen here: https://stackoverflow.com/questions/73700130)?
>>
>>        Note that this error would not occur for anyone installing SeuratObject
>>        from sources, unless they decide to _downgrade_ Matrix after doing so.
>>        Hence this primarily concerns Windows and macOS where R users would
>>        typically install a binary built by CRAN (i.e., not on their system).
>>
>>        We are aware that package TMB tests in .onLoad() that the current Matrix
>>        version is equal to or greater than the version available at build time,
>>        thus avoiding a "strict" version requirement, but do not want this practice
>>        to spread ...
>>
>> 2.  For how long should Matrix retain the superceded 'Dim_validate' and
>>        'dimNames_validate', in order to ensure that "stale" cached validity
>>        methods continue to work?
>>
>> We hope that this discussion will highlight the potential ramifications
>> of importing classes and methods from other packages, and having one's
>> classes and methods imported _by_ other packages, especially for version
>> requirements.
> 
> This sounds like a bug or bad design in the S4 system, i.e. caching
> things without a way to detect or update when the cache becomes stale.
> 
> Is it really necessary to cache things as part of the binary package, or
> could they be put in place when needed using lazy loading, getting a
> copy from the loaded copy of Matrix?
> 
> Duncan Murdoch


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Sep 23 12:09:14 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 23 Sep 2022 06:09:14 -0400
Subject: [Rd] 
 Should package version requirements assume installation from
 sources?
In-Reply-To: <60965ee5-ab64-98a9-eb1d-f6a46b7b5d86@gmail.com>
References: <b3e53fa9-b0e0-a8c8-147a-c1c56348f3e9@gmail.com>
 <bf1ca8d1-37f9-6ec1-59d3-692f0fb563ba@gmail.com>
 <60965ee5-ab64-98a9-eb1d-f6a46b7b5d86@gmail.com>
Message-ID: <cc77b4f4-10ca-04ac-6dac-5de2f70eb5e9@gmail.com>

No, it looks as though this is an unrelated bit of caching being done by 
rstan.  During startup, it saves some ggplot defaults in an internal 
environment ".rstanvis_defaults"; that captured the ggplot2 3.3.6 
defaults, which caused problems when being run under ggplot2 3.4.0.

Duncan Murdoch

On 23/09/2022 5:54 a.m., Duncan Murdoch wrote:
> This issue may be the culprit in an obscure bug that's been reported on
> R-package-devel:  see
> https://stat.ethz.ch/pipermail/r-package-devel/2022q3/008481.html.  It
> appears that some ggplot2 version 3.4.0 code is being run even though
> 3.3.6 is the version on CRAN, and 3.3.6 is *also* being run in the same
> check session.
> 
> Duncan Murdoch
> 
> On 14/09/2022 6:04 a.m., Duncan Murdoch wrote:
>> On 13/09/2022 5:45 p.m., Mikael Jagan wrote:
>>> [Arguably also appropriate for R-package-devel, but posted to R-devel
>>>         as the discussion is aimed primarily at "experts" ... ]
>>>
>>> We, the authors of Matrix, have encountered a somewhat subtle issue
>>> induced by caching of S4 classes and methods in package namespaces.
>>>
>>> The namespaces of three reverse dependent packages (SeuratObject, conText,
>>> mcmcsae) cache the formal definition of our virtual class Matrix (and some
>>> subclasses).  For example:
>>>
>>>     > ns <- asNamespace("SeuratObject")
>>>     > grep("^[.]__C__.*Matrix$", names(ns), value = TRUE)
>>> [1] ".__C__dMatrix"       ".__C__compMatrix"    ".__C__AnyMatrix"
>>> [4] ".__C__generalMatrix" ".__C__CsparseMatrix" ".__C__sparseMatrix"
>>> [7] ".__C__dsparseMatrix" ".__C__Matrix"
>>>
>>> The cached definition (which includes a _validity method_) is obtained from
>>> the version of Matrix available when the reverse dependent package was built
>>> from sources.  For example, if SeuratObject was built under Matrix 1.4-1,
>>> then we get:
>>>
>>>     > getValidity(ns$.__C__Matrix)
>>> function (object)
>>> {
>>>         if (!isTRUE(r <- .Call(Dim_validate, object, "Matrix")))
>>>             r
>>>         else .Call(dimNames_validate, object)
>>> }
>>> <bytecode: 0x11e7ca508>
>>> <environment: namespace:Matrix>
>>>
>>> whereas if SeuratObject was built under Matrix >= 1.5-0, then we get:
>>>
>>>     > getValidity(ns$.__C__Matrix)
>>> function (object)
>>> .Call(Matrix_validate, object)
>>> <bytecode: 0x107dc1698>
>>> <environment: namespace:Matrix>
>>>
>>> There are two "questions" here:
>>>
>>> 1.  The symbol 'Matrix_validate' is not defined until Matrix 1.5-0.
>>>         Is it necessary, for this reason alone, for SeuratObject to have
>>>         'Imports: Matrix (>= 1.5-0)'?  Or can SeuratObject continue using
>>>         'Imports: Matrix (>= 1.3-3)', at the risk of errors like
>>>
>>>         > Error: object 'Matrix_validate' not found
>>>
>>>         (as already seen here: https://stackoverflow.com/questions/73700130)?
>>>
>>>         Note that this error would not occur for anyone installing SeuratObject
>>>         from sources, unless they decide to _downgrade_ Matrix after doing so.
>>>         Hence this primarily concerns Windows and macOS where R users would
>>>         typically install a binary built by CRAN (i.e., not on their system).
>>>
>>>         We are aware that package TMB tests in .onLoad() that the current Matrix
>>>         version is equal to or greater than the version available at build time,
>>>         thus avoiding a "strict" version requirement, but do not want this practice
>>>         to spread ...
>>>
>>> 2.  For how long should Matrix retain the superceded 'Dim_validate' and
>>>         'dimNames_validate', in order to ensure that "stale" cached validity
>>>         methods continue to work?
>>>
>>> We hope that this discussion will highlight the potential ramifications
>>> of importing classes and methods from other packages, and having one's
>>> classes and methods imported _by_ other packages, especially for version
>>> requirements.
>>
>> This sounds like a bug or bad design in the S4 system, i.e. caching
>> things without a way to detect or update when the cache becomes stale.
>>
>> Is it really necessary to cache things as part of the binary package, or
>> could they be put in place when needed using lazy loading, getting a
>> copy from the loaded copy of Matrix?
>>
>> Duncan Murdoch
>


From |uc@r @end|ng |rom |edor@project@org  Fri Sep 23 17:22:49 2022
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Fri, 23 Sep 2022 17:22:49 +0200
Subject: [Rd] Proposal to limit Internet access during package load
Message-ID: <CALEXWq11fOZ9E4bbDY1=JKah+hADBLeAvO1ddfq1VQB0cav9cg@mail.gmail.com>

Hi all,

I'd like to open this debate here, because IMO this is a big issue.
Many packages do this for various reasons, some more legitimate than
others, but I think that this shouldn't be allowed, because it
basically means that installation fails in a machine without Internet
access (which happens e.g. in Linux distro builders for security
reasons).

Now, what if connection is suppressed during package load? There are
basically three use cases out there:

(1) The package requires additional files for the installation (e.g.
the source code of an external library) that cannot be bundled into
the package due to CRAN restrictions (size).
(2) The package requires additional files for using it (e.g.,
datasets, a JAR...) that cannot be bundled into the package due to
CRAN restrictions (size).
(3) Other spurious reasons (e.g. the maintainer decided that package
load was a good place to check an online service availability, etc.).

Again IMO, (3) shouldn't be allowed in any case; (2) should be a
separate function that the user actively calls to download the files,
and those files should be placed into the user dir, and (3) is the
only legitimate use, but then other mechanism should be provided to
avoid connections during package load.

My proposal to support (3) would be to add a new field in the
DESCRIPTION, "Additional_sources", which would be a comma separated
list of additional resources to download during R CMD INSTALL. Those
sources would be downloaded by R CMD INSTALL if not provided via an
option (to support offline installations), and would be placed in a
predefined place for the package to find and configure them (via an
environment variable or in a predefined subdirectory).

This proposal has several advantages. Apart from the obvious one
(Internet access during package load can be limited without losing
current functionalities), it gives more visibility to the resources
that packages are using during the installation phase, and thus makes
those installations more reproducible and more secure.

Best,
-- 
I?aki ?car


From |uc@r @end|ng |rom |edor@project@org  Fri Sep 23 17:29:26 2022
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Fri, 23 Sep 2022 17:29:26 +0200
Subject: [Rd] Proposal to limit Internet access during package load
In-Reply-To: <CALEXWq11fOZ9E4bbDY1=JKah+hADBLeAvO1ddfq1VQB0cav9cg@mail.gmail.com>
References: <CALEXWq11fOZ9E4bbDY1=JKah+hADBLeAvO1ddfq1VQB0cav9cg@mail.gmail.com>
Message-ID: <CALEXWq3w4o+19j7N25wkzj3Wafn-ACHXJr8vV3+MH35g3jqB-A@mail.gmail.com>

On Fri, 23 Sept 2022 at 17:22, I?aki Ucar <iucar at fedoraproject.org> wrote:
>
> [snip]
> Now, what if connection is suppressed during package load? There are
> basically three use cases out there:
>
> (1) The package requires additional files for the installation (e.g.
> the source code of an external library) that cannot be bundled into
> the package due to CRAN restrictions (size).
> (2) The package requires additional files for using it (e.g.,
> datasets, a JAR...) that cannot be bundled into the package due to
> CRAN restrictions (size).
> (3) Other spurious reasons (e.g. the maintainer decided that package
> load was a good place to check an online service availability, etc.).
>
> Again IMO, (3) shouldn't be allowed in any case; (2) should be a
> separate function that the user actively calls to download the files,
> and those files should be placed into the user dir, and (3) is the
> only legitimate use, but then other mechanism should be provided to
> avoid connections during package load.
> [snip]

I meant "(1) is the only legitimate use" above.

-- 
I?aki ?car


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Sep 24 01:55:18 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 24 Sep 2022 11:55:18 +1200
Subject: [Rd] Proposal to limit Internet access during package load
In-Reply-To: <CALEXWq11fOZ9E4bbDY1=JKah+hADBLeAvO1ddfq1VQB0cav9cg@mail.gmail.com>
References: <CALEXWq11fOZ9E4bbDY1=JKah+hADBLeAvO1ddfq1VQB0cav9cg@mail.gmail.com>
Message-ID: <40BA324E-14E5-4EEA-8B50-951617DE0675@R-project.org>

I?aki,

I fully agree, this a very common issue since vast majority of server deployments I have encountered don't allow internet access. In practice this means that such packages are effectively banned.

I would argue that not even (1) or (2) are really an issue, because in fact the CRAN policy doesn't impose any absolute limits on size, it only states that the package should be "of minimum necessary size" which means it shouldn't waste space. If there is no way to reduce the size without impacting functionality, it's perfectly fine.

That said, there are exceptions such as very large datasets (e.g., as distributed by Bioconductor) which are orders of magnitude larger than what is sustainable. I agree that it would be nice to have a mechanism for specifying such sources. So yes, I like the idea, but I'd like to see more real use cases to justify the effort.

The issue with any online downloads, though, is that there is no guarantee of availability - which is real issue for reproducibility. So one could argue that if such external sources are required then they should be on a well-defined, independent, permanent storage such as Zenodo. This could be a matter of policy as opposed to the technical side above which would be adding such support to R CMD INSTALL.

Cheers,
Simon


> On Sep 24, 2022, at 3:22 AM, I?aki Ucar <iucar at fedoraproject.org> wrote:
> 
> Hi all,
> 
> I'd like to open this debate here, because IMO this is a big issue.
> Many packages do this for various reasons, some more legitimate than
> others, but I think that this shouldn't be allowed, because it
> basically means that installation fails in a machine without Internet
> access (which happens e.g. in Linux distro builders for security
> reasons).
> 
> Now, what if connection is suppressed during package load? There are
> basically three use cases out there:
> 
> (1) The package requires additional files for the installation (e.g.
> the source code of an external library) that cannot be bundled into
> the package due to CRAN restrictions (size).
> (2) The package requires additional files for using it (e.g.,
> datasets, a JAR...) that cannot be bundled into the package due to
> CRAN restrictions (size).
> (3) Other spurious reasons (e.g. the maintainer decided that package
> load was a good place to check an online service availability, etc.).
> 
> Again IMO, (3) shouldn't be allowed in any case; (2) should be a
> separate function that the user actively calls to download the files,
> and those files should be placed into the user dir, and (3) is the
> only legitimate use, but then other mechanism should be provided to
> avoid connections during package load.
> 
> My proposal to support (3) would be to add a new field in the
> DESCRIPTION, "Additional_sources", which would be a comma separated
> list of additional resources to download during R CMD INSTALL. Those
> sources would be downloaded by R CMD INSTALL if not provided via an
> option (to support offline installations), and would be placed in a
> predefined place for the package to find and configure them (via an
> environment variable or in a predefined subdirectory).
> 
> This proposal has several advantages. Apart from the obvious one
> (Internet access during package load can be limited without losing
> current functionalities), it gives more visibility to the resources
> that packages are using during the installation phase, and thus makes
> those installations more reproducible and more secure.
> 
> Best,
> -- 
> I?aki ?car
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Sat Sep 24 15:56:26 2022
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Sat, 24 Sep 2022 13:56:26 +0000
Subject: [Rd] Better 'undefined columns' error for data.frame
Message-ID: <99227c5557ca497d8dc601407b2592e9@chu-rouen.fr>

Dear R developers,


One of the error messages that make me loose the most time is the "undefined columns selected" of `[.data.frame`.

It ought to specify the list of bad column names, but currently does not.

Fortunately, this can easily be fixed by a small patch I can write.


Are you interested in that patch?

Is there a standard way to transfer patches for feature requests?


--

Sincerely

Andr? GILLIBERT

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat Sep 24 18:05:51 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 24 Sep 2022 18:05:51 +0200
Subject: [Rd] Better 'undefined columns' error for data.frame
In-Reply-To: <99227c5557ca497d8dc601407b2592e9@chu-rouen.fr>
References: <99227c5557ca497d8dc601407b2592e9@chu-rouen.fr>
Message-ID: <25391.10975.688319.671138@stat.math.ethz.ch>

>>>>> GILLIBERT, Andre 
>>>>>     on Sat, 24 Sep 2022 13:56:26 +0000 writes:

    > Dear R developers, One of the error messages that make me
    > loose the most time is the "undefined columns selected" of
    > `[.data.frame`.

    > It ought to specify the list of bad column names, but
    > currently does not.

    > Fortunately, this can easily be fixed by a small patch I
    > can write.


    > Are you interested in that patch?

    > Is there a standard way to transfer patches for feature
    > requests?

Yes, the standard way is as for bug reports and patches
R's bugzilla:  https://bugs.r-project.org/

One needs an account there, see
https://www.r-project.org/bugs.html  for an explanation (and
more),
but you already got such an account, since about one year,
so do go ahead.

Please keep the patch *minimal*,
i.e., no  white-space only changes etc

Thank you in advance for trying to make R better !

With regards,
Martin


--
Martin Maechler
ETH Zurich  and  R Core team

    > --
    > Sincerely

    > Andr? GILLIBERT

    > 	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Sep 24 18:09:38 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 24 Sep 2022 12:09:38 -0400
Subject: [Rd] Better 'undefined columns' error for data.frame
In-Reply-To: <99227c5557ca497d8dc601407b2592e9@chu-rouen.fr>
References: <99227c5557ca497d8dc601407b2592e9@chu-rouen.fr>
Message-ID: <57f080ce-b4b0-b7eb-7d54-631c86f1dcc5@gmail.com>

On 24/09/2022 9:56 a.m., GILLIBERT, Andre wrote:
> Dear R developers,
> 
> 
> One of the error messages that make me loose the most time is the "undefined columns selected" of `[.data.frame`.
> 
> It ought to specify the list of bad column names, but currently does not.
> 
> Fortunately, this can easily be fixed by a small patch I can write.
> 
> 
> Are you interested in that patch?

I doubt if you'll get an answer to this without showing it to us.

> Is there a standard way to transfer patches for feature requests?

The standard instructions are here:  https://www.r-project.org/bugs.html .
You're offering an enhancement rather than a bug fix, but the process is 
the same.  But since your change is probably quite small, you might not 
need to go through the whole process:  proposing it on this mailing list 
might be sufficient.

Duncan Murdoch


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat Sep 24 22:07:53 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 24 Sep 2022 22:07:53 +0200
Subject: [Rd] Date method of as.POSIXct does not respect tz
In-Reply-To: <25389.30348.53955.824968@stat.math.ethz.ch>
References: <65932fa5-535d-19e4-2a70-7a6ffd10dfa4@thuenen.de>
 <23293.49665.770796.423446@stat.math.ethz.ch>
 <4892f293-b399-45eb-1ee8-ea05afd8365b@thuenen.de>
 <25389.25690.643428.329556@stat.math.ethz.ch>
 <25389.26365.938007.477851@hornik.net>
 <25389.30348.53955.824968@stat.math.ethz.ch>
Message-ID: <25391.25497.621973.142107@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Fri, 23 Sep 2022 11:04:12 +0200 writes:

>>>>> Kurt Hornik 
>>>>>     on Fri, 23 Sep 2022 09:57:49 +0200 writes:

>>>>> Martin Maechler writes:

>     > Currently in R-devel,
> 
>     R> as.POSIXlt.Date
>     > function (x, ...) 
>     > {
>     >    if (any((y <- unclass(x)) > .Machine$integer.max, na.rm = TRUE)) 
>     >         as.POSIXlt(.POSIXct(y * 86400), tz = "UTC")
>     >    else .Internal(Date2POSIXlt(x))
>     > }
> 
>     R> as.POSIXct.Date
>     > function (x, ...) 
>     > .POSIXct(unclass(x) * 86400)
> 
>     > Adding tz to the latter is easy, and the former could do the if() part
>     > also with a given tz without needing to change the .Internal?
> 
> Genau!  Even more elegantly than I first thought when I wrote
> "post-processing":
> 
> The following even adds internal consistency inside as.POSIXlt.Date() :
> 
> as.POSIXlt.Date <- function(x, tz = "UTC", ...) {
>     as.POSIXlt(if(any((y <- unclass(x)) > .Machine$integer.max, na.rm = TRUE))
>                    .POSIXct(y * 86400)
>                else
>                    .Internal(Date2POSIXlt(x))
>              , tz = tz)
> }
> 
> because now, tz is even *formally* treated the same in both
> cases (whereas previously it only appeared visually in one case).
> 
> So probably, another reason to go there.
> Note that I also think we'd keep the    tz = "UTZ"
> default argument, even when the
> other  as.POSIX[cl]t() methods have 'tz = ""'

Hmm, good plan, but not working for the (more important) second
branch:

   as.POSIXlt(<POSIXlt>, tz = "..")

immediately returns the first argument without ever looking if
there are further arguments, in this case 'tz'..

--> we would also have to slightly change  as.POSIXlt.default(x)
such that it obeyed a 'tz = ".."'  in the case of x being
"POSIXlt".
Almost surely this will break some code which had relied on the
current -- a bit surpristing to me -- behavior.

Well,... I think we *should* want the above {setting a "tz"} for
POSIXlt to work.

Martin


