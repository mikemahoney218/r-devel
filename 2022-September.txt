From benj@m|n@rede||ng@ @end|ng |rom gm@||@com  Thu Sep  1 14:12:29 2022
From: benj@m|n@rede||ng@ @end|ng |rom gm@||@com (Benjamin Redelings)
Date: Thu, 1 Sep 2022 08:12:29 -0400
Subject: [Rd] [External] Re:  Pipe operator status, placeholders?
In-Reply-To: <3434293-d79-697c-734c-3b3c617a357e@uiowa.edu>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
 <3434293-d79-697c-734c-3b3c617a357e@uiowa.edu>
Message-ID: <321fe733-62e9-94bb-ff20-8a3daef96d41@gmail.com>

Hi,

Did you manage to get to a blog post at some point?

I just saw that there was an live-streaming lecture on August 4th - 
https://sms.wgtn.ac.nz/cgi-bin/seminars?rm=details&id=987

Was this perhaps recorded anywhere?

-BenRI


On 4/21/22 11:57 AM, luke-tierney at uiowa.edu wrote:
> At some point there will probably be a blog post about the design of
> the forward pipe operator in base, but that is not something I will
> think about until after the current semester is over and my backlog of
> other things is cleared.
>
> Best,
>
> luke
>
> On Tue, 19 Apr 2022, peter dalgaard wrote:
>
>> You probably want Luke Tierney for the full story, but what I gather 
>> from the deliberations (on the private R-core list), there are issues 
>> with how non-funcall syntax like lm(....) |> _$coef[2] should work. 
>> This, in turn, has to do with wanting to have the placeholder occur 
>> only as a toplevel substitution (i.e. "["("$"(_, coef), 2) is a 
>> no-go. And the reason for that has to do with the way the pipe works 
>> in the absense of placeholder, e.g. the parser gets confused by
>>
>>> x |> f(g(x=_))
>> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>>
>> -pd
>>
>>> On 17 Apr 2022, at 01:04 , Benjamin Redelings 
>>> <benjamin.redelings at gmail.com> wrote:
>>>
>>> Hi,
>>>
>>> I see that R 4.2 adds the underscore _ as a placeholder for the new 
>>> forward pipe operator |> , but only for named arguments. The reason 
>>> why placeholders for position arguments was NOT added isn't clear to 
>>> me, so I've been looking for the discussion around the introduction 
>>> of the placeholder.
>>>
>>> By searching subject lines in the r-devel mailing list archive, I've 
>>> found
>>>
>>> https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html
>>>
>>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html
>>>
>>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html and 
>>> following messages
>>>
>>> but not much else.
>>>
>>> 1. Am I looking in the wrong place?
>>>
>>> 2. What is the reasoning behind allowing _ as a placeholder only for 
>>> named arguments?
>>>
>>> take care,
>>>
>>> -BenRI
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Fri Sep  2 06:17:37 2022
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Fri, 2 Sep 2022 16:17:37 +1200
Subject: [Rd] [External] Re: Pipe operator status, placeholders?
In-Reply-To: <321fe733-62e9-94bb-ff20-8a3daef96d41@gmail.com>
References: <f70c4e1e-468f-abcd-187e-124f8b7a3891@gmail.com>
 <D58C198A-7C19-4E0A-AC78-807293B9182C@gmail.com>
 <3434293-d79-697c-734c-3b3c617a357e@uiowa.edu>
 <321fe733-62e9-94bb-ff20-8a3daef96d41@gmail.com>
Message-ID: <387b44ec-9a5a-6296-13de-499359d535dd@stat.auckland.ac.nz>

Hi

Luke's Ihaka Lecture is now on You Tube ...

https://youtu.be/IMpXB30MP48

Paul

On 2/09/2022 12:12 am, Benjamin Redelings wrote:
> Hi,
> 
> Did you manage to get to a blog post at some point?
> 
> I just saw that there was an live-streaming lecture on August 4th -
> https://sms.wgtn.ac.nz/cgi-bin/seminars?rm=details&id=987 
> <https://sms.wgtn.ac.nz/cgi-bin/seminars?rm=details&id=987>
> 
> Was this perhaps recorded anywhere?
> 
> -BenRI
> 
> 
> On 4/21/22 11:57 AM, luke-tierney at uiowa.edu wrote:
>  > At some point there will probably be a blog post about the design of
>  > the forward pipe operator in base, but that is not something I will
>  > think about until after the current semester is over and my backlog of
>  > other things is cleared.
>  >
>  > Best,
>  >
>  > luke
>  >
>  > On Tue, 19 Apr 2022, peter dalgaard wrote:
>  >
>  >> You probably want Luke Tierney for the full story, but what I gather
>  >> from the deliberations (on the private R-core list), there are issues
>  >> with how non-funcall syntax like lm(....) |> _$coef[2] should work.
>  >> This, in turn, has to do with wanting to have the placeholder occur
>  >> only as a toplevel substitution (i.e. "["("$"(_, coef), 2) is a
>  >> no-go. And the reason for that has to do with the way the pipe works
>  >> in the absense of placeholder, e.g. the parser gets confused by
>  >>
>  >>> x |> f(g(x=_))
>  >> Error in f(x, g(x = "_")) : invalid use of pipe placeholder
>  >>
>  >> -pd
>  >>
>  >>> On 17 Apr 2022, at 01:04 , Benjamin Redelings
>  >>> <benjamin.redelings at gmail.com> wrote:
>  >>>
>  >>> Hi,
>  >>>
>  >>> I see that R 4.2 adds the underscore _ as a placeholder for the new
>  >>> forward pipe operator |> , but only for named arguments. The reason
>  >>> why placeholders for position arguments was NOT added isn't clear to
>  >>> me, so I've been looking for the discussion around the introduction
>  >>> of the placeholder.
>  >>>
>  >>> By searching subject lines in the r-devel mailing list archive, I've
>  >>> found
>  >>>
>  >>> https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html 
> <https://stat.ethz.ch/pipermail/r-devel/2021-April/080646.html>
>  >>>
>  >>> https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html 
> <https://stat.ethz.ch/pipermail/r-devel/2021-January/080396.html>
>  >>>
>  >>> https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html 
> <https://stat.ethz.ch/pipermail/r-devel/2020-December/080173.html> 
> and
>  >>> following messages
>  >>>
>  >>> but not much else.
>  >>>
>  >>> 1. Am I looking in the wrong place?
>  >>>
>  >>> 2. What is the reasoning behind allowing _ as a placeholder only for
>  >>> named arguments?
>  >>>
>  >>> take care,
>  >>>
>  >>> -BenRI
>  >>>
>  >>> ______________________________________________
>  >>> R-devel at r-project.org mailing list
>  >>> https://stat.ethz.ch/mailman/listinfo/r-devel 
> <https://stat.ethz.ch/mailman/listinfo/r-devel>
>  >>
>  >>
>  >
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel 
> <https://stat.ethz.ch/mailman/listinfo/r-devel>

-- 
Dr Paul Murrell
Te Kura Tatauranga | Department of Statistics
Waipapa Taumata Rau | The University of Auckland
Private Bag 92019, Auckland, New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
www.stat.auckland.ac.nz/~paul/


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Sep  2 11:30:06 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 2 Sep 2022 11:30:06 +0200
Subject: [Rd] R_check_class_etc(x,
 valid) is "slow" when 'valid' contains class(x)
In-Reply-To: <1e01976b-f819-cc97-f8fe-81755ec85a03@gmail.com>
References: <1e01976b-f819-cc97-f8fe-81755ec85a03@gmail.com>
Message-ID: <ccf592e5-bd6b-6857-7d1d-0ed9af2092b5@gmail.com>

Hi Mikael,

On 8/28/22 01:13, Mikael Jagan wrote:
> R_check_class_etc(x, valid) spends a nontrivial amount of time finding
> an environment 'rho' containing the definition of class(x), evaluating
> (in R, not C) methods::.classEnv(class(x)).
>
> It then returns the result of R_check_class_and_super(x, valid, rho).
> But R_check_class_and_super() does not use 'rho' at all in the trivial
> case where class(x) is found in 'valid'.
right, that could be improved. Do you have an example which exhibits the 
problem, have you found this by profiling something?
>
> My feeling is that this can be improved.? I am happy to contribute a 
> patch,
> if it would be considered by R-core.

Both R_check_class_etc and R_check_class_and_super are unfortunately 
exported, the former is used a lot in packages (even though they are not 
mentioned in Writing R Extensions, so actually shouldn't be used in 
packages). Anyway, it would be easier if we could preserve their 
interface and behavior.

Maybe we could support rho==NULL in R_check_class_and_super, the 
environment would be looked up in that case when needed. 
R_check_class_etc would simply only call R_check_class_and_super with 
that argument. I see that R_check_class_and_super uses asChar() on the 
class attribute, while R_check_class_etc does not currently for looking 
for the environment, but I assume doing that in both cases should not 
matter (and it would have to be tested).

So this would be a trivial change, but if you wanted to create a minimal 
patch, I will be happy to have a look.

Best
Tomas


> Mikael
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@g@nmn2 @end|ng |rom gm@||@com  Fri Sep  2 14:51:17 2022
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Fri, 2 Sep 2022 08:51:17 -0400
Subject: [Rd] R_check_class_etc(x,
 valid) is "slow" when 'valid' contains class(x)
In-Reply-To: <ccf592e5-bd6b-6857-7d1d-0ed9af2092b5@gmail.com>
References: <1e01976b-f819-cc97-f8fe-81755ec85a03@gmail.com>
 <ccf592e5-bd6b-6857-7d1d-0ed9af2092b5@gmail.com>
Message-ID: <f4f35bc9-8c82-cfac-1647-b52391101400@gmail.com>



On 2022-09-02 5:30 am, Tomas Kalibera wrote:
> Hi Mikael,
> 
> On 8/28/22 01:13, Mikael Jagan wrote:
>> R_check_class_etc(x, valid) spends a nontrivial amount of time finding
>> an environment 'rho' containing the definition of class(x), evaluating
>> (in R, not C) methods::.classEnv(class(x)).
>>
>> It then returns the result of R_check_class_and_super(x, valid, rho).
>> But R_check_class_and_super() does not use 'rho' at all in the trivial
>> case where class(x) is found in 'valid'.
> right, that could be improved. Do you have an example which exhibits the 
> problem, have you found this by profiling something?
I benchmarked .Call("R_etc", x) for x <- new("dgTMatrix"), after compiling
and loading the following:

```
#include <Rinternals.h>

SEXP R_etc(SEXP x) {
     static const char *valid[] = {"dgCMatrix", "dgRMatrix", "dgTMatrix", ""};
     return ScalarInteger(R_check_class_etc(x, valid));
}
```

R-devel used ~2 microseconds while my patched version of R used ~0.2
microseconds.  So, not a bottleneck by any means.  On the other hand,
'Matrix' and probably other packages do call R_check_class_etc() quite
often, hence my report.

>>
>> My feeling is that this can be improved.? I am happy to contribute a patch,
>> if it would be considered by R-core.
> 
> Both R_check_class_etc and R_check_class_and_super are unfortunately exported, 
> the former is used a lot in packages (even though they are not mentioned in 
> Writing R Extensions, so actually shouldn't be used in packages). Anyway, it 
> would be easier if we could preserve their interface and behavior.
> 
> Maybe we could support rho==NULL in R_check_class_and_super, the environment 
> would be looked up in that case when needed. R_check_class_etc would simply only 
> call R_check_class_and_super with that argument. I see that 
> R_check_class_and_super uses asChar() on the class attribute, while 
> R_check_class_etc does not currently for looking for the environment, but I 
> assume doing that in both cases should not matter (and it would have to be tested).
> 
> So this would be a trivial change, but if you wanted to create a minimal patch, 
> I will be happy to have a look.

I've implemented essentially what you've described; see attached.

Mikael

> 
> Best
> Tomas
> 
> 
>> Mikael
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: patch.diff
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20220902/7e17c4be/attachment.ksh>

From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Mon Sep  5 15:36:30 2022
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (NP))
Date: Mon, 5 Sep 2022 13:36:30 +0000
Subject: [Rd] Passing a call as label to text() works differently when the
 call involves paste() vs paste0()
Message-ID: <d6a1ccfe0082445b8f74a32f1e511e48@UM-MAIL3214.unimaas.nl>

Hi all,

Maybe a bit of an esoteric observation, but the second one doesn't work properly:

x <- 2
plot(NA, xlim=c(0,1), ylim=c(0,1))
text(0.5, 0.55, bquote(paste("x =", .(x))))
text(0.5, 0.45, bquote(paste0("x = ", .(x))))

Note that this has nothing to do in particular with bquote(). This is the same issue:

plot(NA, xlim=c(0,1), ylim=c(0,1))
text(0.5, 0.55, as.call(list(quote(paste), "x =", 2)))
text(0.5, 0.45, as.call(list(quote(paste0), "x = ", 2)))

I had a look at C_text in plot.c, but couldn't figure out why the second one is treated differently.

Best,
Wolfgang


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Sep  5 15:49:19 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 5 Sep 2022 09:49:19 -0400
Subject: [Rd] 
 Passing a call as label to text() works differently when the
 call involves paste() vs paste0()
In-Reply-To: <d6a1ccfe0082445b8f74a32f1e511e48@UM-MAIL3214.unimaas.nl>
References: <d6a1ccfe0082445b8f74a32f1e511e48@UM-MAIL3214.unimaas.nl>
Message-ID: <1b8e2e6d-60ae-c7a1-b3ab-9e146d17c1b8@gmail.com>

On 05/09/2022 9:36 a.m., Viechtbauer, Wolfgang (NP) wrote:
> Hi all,
> 
> Maybe a bit of an esoteric observation, but the second one doesn't work properly:
> 
> x <- 2
> plot(NA, xlim=c(0,1), ylim=c(0,1))
> text(0.5, 0.55, bquote(paste("x =", .(x))))
> text(0.5, 0.45, bquote(paste0("x = ", .(x))))
> 
> Note that this has nothing to do in particular with bquote(). This is the same issue:
> 
> plot(NA, xlim=c(0,1), ylim=c(0,1))
> text(0.5, 0.55, as.call(list(quote(paste), "x =", 2)))
> text(0.5, 0.45, as.call(list(quote(paste0), "x = ", 2)))
> 
> I had a look at C_text in plot.c, but couldn't figure out why the second one is treated differently.

You're using plotmath code, which is documented in ?plotmath.

It doesn't execute paste(), it just uses that name for a similar 
operation.  There's no operation named paste0(), so that doesn't work.

The paste() operation doesn't add space, so it's more like paste0() in 
any case.

Duncan Murdoch


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Mon Sep  5 15:59:56 2022
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (NP))
Date: Mon, 5 Sep 2022 13:59:56 +0000
Subject: [Rd] 
 Passing a call as label to text() works differently when the
 call involves paste() vs paste0()
In-Reply-To: <1b8e2e6d-60ae-c7a1-b3ab-9e146d17c1b8@gmail.com>
References: <d6a1ccfe0082445b8f74a32f1e511e48@UM-MAIL3214.unimaas.nl>
 <1b8e2e6d-60ae-c7a1-b3ab-9e146d17c1b8@gmail.com>
Message-ID: <ca3458a0b3374fd8ae3ec59e611e0a7e@UM-MAIL3214.unimaas.nl>

Got it, thanks!

Best,
Wolfgang

>-----Original Message-----
>From: Duncan Murdoch [mailto:murdoch.duncan at gmail.com]
>Sent: Monday, 05 September, 2022 15:49
>To: Viechtbauer, Wolfgang (NP); R-devel at r-project.org
>Subject: Re: [Rd] Passing a call as label to text() works differently when the
>call involves paste() vs paste0()
>
>On 05/09/2022 9:36 a.m., Viechtbauer, Wolfgang (NP) wrote:
>> Hi all,
>>
>> Maybe a bit of an esoteric observation, but the second one doesn't work
>properly:
>>
>> x <- 2
>> plot(NA, xlim=c(0,1), ylim=c(0,1))
>> text(0.5, 0.55, bquote(paste("x =", .(x))))
>> text(0.5, 0.45, bquote(paste0("x = ", .(x))))
>>
>> Note that this has nothing to do in particular with bquote(). This is the same
>issue:
>>
>> plot(NA, xlim=c(0,1), ylim=c(0,1))
>> text(0.5, 0.55, as.call(list(quote(paste), "x =", 2)))
>> text(0.5, 0.45, as.call(list(quote(paste0), "x = ", 2)))
>>
>> I had a look at C_text in plot.c, but couldn't figure out why the second one is
>treated differently.
>
>You're using plotmath code, which is documented in ?plotmath.
>
>It doesn't execute paste(), it just uses that name for a similar
>operation.  There's no operation named paste0(), so that doesn't work.
>
>The paste() operation doesn't add space, so it's more like paste0() in
>any case.
>
>Duncan Murdoch

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Sep  8 15:23:40 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 8 Sep 2022 15:23:40 +0200
Subject: [Rd] R_check_class_etc(x,
 valid) is "slow" when 'valid' contains class(x)
In-Reply-To: <f4f35bc9-8c82-cfac-1647-b52391101400@gmail.com>
References: <1e01976b-f819-cc97-f8fe-81755ec85a03@gmail.com>
 <ccf592e5-bd6b-6857-7d1d-0ed9af2092b5@gmail.com>
 <f4f35bc9-8c82-cfac-1647-b52391101400@gmail.com>
Message-ID: <21b6b923-4833-2d6f-5c19-48aec8d46e7c@gmail.com>


On 02/09/2022 14:51, Mikael Jagan wrote:
>
>
> On 2022-09-02 5:30 am, Tomas Kalibera wrote:
>> Hi Mikael,
>>
>> On 8/28/22 01:13, Mikael Jagan wrote:
>>> R_check_class_etc(x, valid) spends a nontrivial amount of time finding
>>> an environment 'rho' containing the definition of class(x), evaluating
>>> (in R, not C) methods::.classEnv(class(x)).
>>>
>>> It then returns the result of R_check_class_and_super(x, valid, rho).
>>> But R_check_class_and_super() does not use 'rho' at all in the trivial
>>> case where class(x) is found in 'valid'.
>> right, that could be improved. Do you have an example which exhibits 
>> the problem, have you found this by profiling something?
> I benchmarked .Call("R_etc", x) for x <- new("dgTMatrix"), after 
> compiling
> and loading the following:
>
> ```
> #include <Rinternals.h>
>
> SEXP R_etc(SEXP x) {
> ??? static const char *valid[] = {"dgCMatrix", "dgRMatrix", 
> "dgTMatrix", ""};
> ??? return ScalarInteger(R_check_class_etc(x, valid));
> }
> ```
>
> R-devel used ~2 microseconds while my patched version of R used ~0.2
> microseconds.? So, not a bottleneck by any means.? On the other hand,
> 'Matrix' and probably other packages do call R_check_class_etc() quite
> often, hence my report.
I see, ideally one would have a real scenario with a real performance 
issue leading to this. With a micro-benchmark, one could come up with 
pretty much arbitrary speedup, so it is harder to judge whether an 
optimization is actually worth the effort, the risk of introducing bugs 
and sometimes the added complexity.
>>>
>>> My feeling is that this can be improved.? I am happy to contribute a 
>>> patch,
>>> if it would be considered by R-core.
>>
>> Both R_check_class_etc and R_check_class_and_super are unfortunately 
>> exported, the former is used a lot in packages (even though they are 
>> not mentioned in Writing R Extensions, so actually shouldn't be used 
>> in packages). Anyway, it would be easier if we could preserve their 
>> interface and behavior.
>>
>> Maybe we could support rho==NULL in R_check_class_and_super, the 
>> environment would be looked up in that case when needed. 
>> R_check_class_etc would simply only call R_check_class_and_super with 
>> that argument. I see that R_check_class_and_super uses asChar() on 
>> the class attribute, while R_check_class_etc does not currently for 
>> looking for the environment, but I assume doing that in both cases 
>> should not matter (and it would have to be tested).
>>
>> So this would be a trivial change, but if you wanted to create a 
>> minimal patch, I will be happy to have a look.
>
> I've implemented essentially what you've described; see attached.

Thanks, I've restored the original behavior with pkg == R_NilValue (note 
rho was R_GlobalEnv), I've used C NULL to mark the special mode when 
"rho" should be found, and I made some small tweaks. I will add after 
more testing, if the results are ok.

Best
Tomas

>
> Mikael
>
>>
>> Best
>> Tomas
>>
>>
>>> Mikael
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel


From j@g@nmn2 @end|ng |rom gm@||@com  Thu Sep  8 18:44:30 2022
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Thu, 8 Sep 2022 12:44:30 -0400
Subject: [Rd] R_check_class_etc(x,
 valid) is "slow" when 'valid' contains class(x)
In-Reply-To: <21b6b923-4833-2d6f-5c19-48aec8d46e7c@gmail.com>
References: <1e01976b-f819-cc97-f8fe-81755ec85a03@gmail.com>
 <ccf592e5-bd6b-6857-7d1d-0ed9af2092b5@gmail.com>
 <f4f35bc9-8c82-cfac-1647-b52391101400@gmail.com>
 <21b6b923-4833-2d6f-5c19-48aec8d46e7c@gmail.com>
Message-ID: <3bc0a3c5-cc05-55e3-09ed-a4f40b5e6433@gmail.com>



On 2022-09-08 9:23 am, Tomas Kalibera wrote:
> 
> On 02/09/2022 14:51, Mikael Jagan wrote:
>>
>>
>> On 2022-09-02 5:30 am, Tomas Kalibera wrote:
>>> Hi Mikael,
>>>
>>> On 8/28/22 01:13, Mikael Jagan wrote:
>>>> R_check_class_etc(x, valid) spends a nontrivial amount of time finding
>>>> an environment 'rho' containing the definition of class(x), evaluating
>>>> (in R, not C) methods::.classEnv(class(x)).
>>>>
>>>> It then returns the result of R_check_class_and_super(x, valid, rho).
>>>> But R_check_class_and_super() does not use 'rho' at all in the trivial
>>>> case where class(x) is found in 'valid'.
>>> right, that could be improved. Do you have an example which exhibits the 
>>> problem, have you found this by profiling something?
>> I benchmarked .Call("R_etc", x) for x <- new("dgTMatrix"), after compiling
>> and loading the following:
>>
>> ```
>> #include <Rinternals.h>
>>
>> SEXP R_etc(SEXP x) {
>> ??? static const char *valid[] = {"dgCMatrix", "dgRMatrix", "dgTMatrix", ""};
>> ??? return ScalarInteger(R_check_class_etc(x, valid));
>> }
>> ```
>>
>> R-devel used ~2 microseconds while my patched version of R used ~0.2
>> microseconds.? So, not a bottleneck by any means.? On the other hand,
>> 'Matrix' and probably other packages do call R_check_class_etc() quite
>> often, hence my report.
> I see, ideally one would have a real scenario with a real performance issue 
> leading to this. With a micro-benchmark, one could come up with pretty much 
> arbitrary speedup, so it is harder to judge whether an optimization is actually 
> worth the effort, the risk of introducing bugs and sometimes the added complexity.

Yes.  I _was_ at first thinking about a less artificial example
(and in retrospect I probably should have led with that):

## install.packages("Matrix", repos = "http://R-Forge.R-project.org")
library(Matrix)
n <- 10L
x <- new("dgeMatrix", Dim = c(n, n), x = as.double(seq_len(n^2)))
microbenchmark::microbenchmark(t(x))

where the 't' method calls the C-level unpackedMatrix_transpose(),
which in turn calls R_check_class_etc().

>>>>
>>>> My feeling is that this can be improved.? I am happy to contribute a patch,
>>>> if it would be considered by R-core.
>>>
>>> Both R_check_class_etc and R_check_class_and_super are unfortunately 
>>> exported, the former is used a lot in packages (even though they are not 
>>> mentioned in Writing R Extensions, so actually shouldn't be used in 
>>> packages). Anyway, it would be easier if we could preserve their interface 
>>> and behavior.
>>>
>>> Maybe we could support rho==NULL in R_check_class_and_super, the environment 
>>> would be looked up in that case when needed. R_check_class_etc would simply 
>>> only call R_check_class_and_super with that argument. I see that 
>>> R_check_class_and_super uses asChar() on the class attribute, while 
>>> R_check_class_etc does not currently for looking for the environment, but I 
>>> assume doing that in both cases should not matter (and it would have to be 
>>> tested).
>>>
>>> So this would be a trivial change, but if you wanted to create a minimal 
>>> patch, I will be happy to have a look.
>>
>> I've implemented essentially what you've described; see attached.
> 
> Thanks, I've restored the original behavior with pkg == R_NilValue (note rho was 
> R_GlobalEnv), I've used C NULL to mark the special mode when "rho" should be 
> found, and I made some small tweaks. I will add after more testing, if the 
> results are ok.

Makes sense - thanks for catching that.

Mikael

> 
> Best
> Tomas
> 
>>
>> Mikael
>>
>>>
>>> Best
>>> Tomas
>>>
>>>
>>>> Mikael
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel


