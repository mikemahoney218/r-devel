From @tevem@rt|n041 @end|ng |rom gm@||@com  Wed Nov  2 02:26:26 2022
From: @tevem@rt|n041 @end|ng |rom gm@||@com (Steve Martin)
Date: Tue, 1 Nov 2022 21:26:26 -0400
Subject: [Rd] unsplit() mangles attributes
Message-ID: <CAP=dwz_nERk37W4ybjO7R1Y+C+UTZ+pan+oZVyGDnYa861yZ=w@mail.gmail.com>

Hello,

Unsplitting a named vector that's been split sets all the names as missing.

x <- 1:12
names(x) <- letters[x]
f <- gl(2, 6)

unsplit(split(x, f), f)
<NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA> <NA>
   1    2    3    4    5    6    7    8    9   10   11   12

The unsplit() function correctly deals with row names when unsplitting
a split data frame, and the same approach preserves regular names as
well. Here's a stripped-down version of unsplit() that keeps names:

unsplit_with_names <- function(value, f) {
  len <- length(f)
  x <- value[[1L]][rep(NA_integer_, len)] # names get lost here...
  split(x, f) <- value
  has_names <- !is.null(names(value[[1L]]))
  if (has_names) {
    split(names(x), f) <- lapply(value, names) # so add them back here
  }
  x
}

unsplit_with_names(split(x, f), f)
 a  b  c  d  e  f  g  h  i  j  k  l
 1  2  3  4  5  6  7  8  9 10 11 12

I plan on reporting this on bugzilla, with a more general fix, but
would first like to see if I'm missing anything, and check that my
reasoning is clear.

It seems that names are the only attribute for unclassed vectors that
survive the default method of split(), and so I think the above
version of unsplit() replaces all the attributes it can for unclassed
vectors.

I'm less confident about classed vectors, as unsplit() isn't generic
and potentially needs to deal with objects. Dates and factors work
fine, as it seems they can only lose names; this is addressed with the
above version of unsplit(). But are there other attributes for classed
objects that may get lost with unsplit? Can my fix above cause
problems for certain classes? (Note that I didn't use the recursion
that unsplit() uses for data frames, as that relies on names not
themselves having names.)

The real challenge is that unsplit need not have all the information
about the original object it's trying to put back together. Take the
case of a vector with a dim attribute.

y <- matrix(x, 3, 4, dimnames = list(letters[1:3], letters[1:4]))

unsplit(split(y, f), f)
[1]  1  2  3  4  5  6  7  8  9 10 11 12

A possible solution is for split() to record the attributes of its
argument for later use by unsplit(). Again, consider some
stripped-down alternatives:

split_with_attr <- function(x, f) {
  res <- split(x, f)
  structure(res, original.attr = attributes(x))
}

unsplit_with_attr <- function(value, f) {
  len <- length(f)
  x <- value[[1L]][rep(NA_integer_, len)]
  split(x, f) <- value
  attributes(x) <- attr(value, "original.attr")
  x
}

unsplit_with_attr(split_with_attr(y, f), f)
  a b c  d
a 1 4 7 10
b 2 5 8 11
c 3 6 9 12

But this seems complicated, and may muck up existing code. It would be
much easier if I can just restrict attention to restoring lost names
for unclassed vectors :)

Any thoughts are much appreciated.

Thanks,
Steve


From dd@|thorp @end|ng |rom protonm@||@com  Wed Nov  2 13:30:43 2022
From: dd@|thorp @end|ng |rom protonm@||@com (Dan Dalthorp)
Date: Wed, 02 Nov 2022 12:30:43 +0000
Subject: [Rd] as.Date without "origin"
Message-ID: <EKNZOOr0Xk-P1uT_HZiKSmlTniaWJ9qxbkQAdiT-WTIadalBDTvhObEvUFCj_yZEXiO1_mImOaOMtS-gxB3Rc5rcCUyeUZY9KTpuq-Yd89U=@protonmail.com>

The new (2022-10-11 r83083 ucrt) as.Date function returns a date rather than an error when called without "origin" specified.

# previous versions of R
as.Date(0)
# Error in as.Date.numeric(0) : 'origin' must be supplied

# new:
as.Date(0)
# [1] "1970-01-01"

This is at odds with the help file, which gives:

origin

aDateobject, or something which can be coerced byas.Date(origin, ...)to such an object.

And:
as.Datewill accept numeric data (the number of days since an epoch), butonlyiforiginis supplied.

The behavior described in the help file and implemented in previous versions seems more reasonable than returning a date with an arbitrary "origin". In any case, in the r-devel there is a mismatch between the function and its description.

-Dan
	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Wed Nov  2 14:20:55 2022
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Wed, 2 Nov 2022 08:20:55 -0500
Subject: [Rd] as.Date without "origin"
In-Reply-To: <EKNZOOr0Xk-P1uT_HZiKSmlTniaWJ9qxbkQAdiT-WTIadalBDTvhObEvUFCj_yZEXiO1_mImOaOMtS-gxB3Rc5rcCUyeUZY9KTpuq-Yd89U=@protonmail.com>
References: <EKNZOOr0Xk-P1uT_HZiKSmlTniaWJ9qxbkQAdiT-WTIadalBDTvhObEvUFCj_yZEXiO1_mImOaOMtS-gxB3Rc5rcCUyeUZY9KTpuq-Yd89U=@protonmail.com>
Message-ID: <345b7101-f116-e6aa-b8cf-522f68ed5638@prodsyse.com>

	  I've felt that "as.Date" should default to origin "1970-01-01", so I 
added a modification to Ecfun:


Ecfun::as.Date1970(0)


	  If R-devel chose to change the default on this, I would happily 
deprecate Ecfun::as.Date1970 in favor of base::as.Date ;-)


	  I would therefore support changing the documentation to match the new 
behavior.


	  Spencer Graves


On 11/2/22 7:30 AM, Dan Dalthorp via R-devel wrote:
> The new (2022-10-11 r83083 ucrt) as.Date function returns a date rather than an error when called without "origin" specified.
> 
> # previous versions of R
> as.Date(0)
> # Error in as.Date.numeric(0) : 'origin' must be supplied
> 
> # new:
> as.Date(0)
> # [1] "1970-01-01"
> 
> This is at odds with the help file, which gives:
> 
> origin
> 
> aDateobject, or something which can be coerced byas.Date(origin, ...)to such an object.
> 
> And:
> as.Datewill accept numeric data (the number of days since an epoch), butonlyiforiginis supplied.
> 
> The behavior described in the help file and implemented in previous versions seems more reasonable than returning a date with an arbitrary "origin". In any case, in the r-devel there is a mismatch between the function and its description.
> 
> -Dan
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From dd@|thorp @end|ng |rom protonm@||@com  Wed Nov  2 14:38:51 2022
From: dd@|thorp @end|ng |rom protonm@||@com (Dan Dalthorp)
Date: Wed, 02 Nov 2022 13:38:51 +0000
Subject: [Rd] as.Date without "origin"
In-Reply-To: <345b7101-f116-e6aa-b8cf-522f68ed5638@prodsyse.com>
References: <EKNZOOr0Xk-P1uT_HZiKSmlTniaWJ9qxbkQAdiT-WTIadalBDTvhObEvUFCj_yZEXiO1_mImOaOMtS-gxB3Rc5rcCUyeUZY9KTpuq-Yd89U=@protonmail.com>
 <345b7101-f116-e6aa-b8cf-522f68ed5638@prodsyse.com>
Message-ID: <UVIu3zmRKG3oM__PzasW3vvKTYxIrBpYeoHDaghpllF9-_HuAAPEmQbDweRrMj3_KrKDjbmOI5EySuBKOt_0vQsOJRLcmO7w20rqi5MSo6I=@protonmail.com>

I don't see a compelling rationale for changing the default behavior as.Date to deviate from the wholly reasonable status quo of "as.Date will accept numeric data (the number of days since an epoch), but only if origin is supplied." That has been the expectation for a long, long time. 

In any case, the manual should match the behavior.

-DHD




------- Original Message -------
On Wednesday, November 2nd, 2022 at 6:20 AM, Spencer Graves <spencer.graves at prodsyse.com> wrote:


> 
> 
> I've felt that "as.Date" should default to origin "1970-01-01", so I
> added a modification to Ecfun:
> 
> 
> Ecfun::as.Date1970(0)
> 
> 
> If R-devel chose to change the default on this, I would happily
> deprecate Ecfun::as.Date1970 in favor of base::as.Date ;-)
> 
> 
> I would therefore support changing the documentation to match the new
> behavior.
> 
> 
> Spencer Graves
> 
> 
> On 11/2/22 7:30 AM, Dan Dalthorp via R-devel wrote:
> 
> > The new (2022-10-11 r83083 ucrt) as.Date function returns a date rather than an error when called without "origin" specified.
> > 
> > # previous versions of R
> > as.Date(0)
> > # Error in as.Date.numeric(0) : 'origin' must be supplied
> > 
> > # new:
> > as.Date(0)
> > # [1] "1970-01-01"
> > 
> > This is at odds with the help file, which gives:
> > 
> > origin
> > 
> > aDateobject, or something which can be coerced byas.Date(origin, ...)to such an object.
> > 
> > And:
> > as.Datewill accept numeric data (the number of days since an epoch), butonlyiforiginis supplied.
> > 
> > The behavior described in the help file and implemented in previous versions seems more reasonable than returning a date with an arbitrary "origin". In any case, in the r-devel there is a mismatch between the function and its description.
> > 
> > -Dan
> > [[alternative HTML version deleted]]
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Wed Nov  2 16:30:23 2022
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 2 Nov 2022 16:30:23 +0100
Subject: [Rd] as.Date without "origin"
In-Reply-To: <UVIu3zmRKG3oM__PzasW3vvKTYxIrBpYeoHDaghpllF9-_HuAAPEmQbDweRrMj3_KrKDjbmOI5EySuBKOt_0vQsOJRLcmO7w20rqi5MSo6I=@protonmail.com>
References: <EKNZOOr0Xk-P1uT_HZiKSmlTniaWJ9qxbkQAdiT-WTIadalBDTvhObEvUFCj_yZEXiO1_mImOaOMtS-gxB3Rc5rcCUyeUZY9KTpuq-Yd89U=@protonmail.com>
 <345b7101-f116-e6aa-b8cf-522f68ed5638@prodsyse.com>
 <UVIu3zmRKG3oM__PzasW3vvKTYxIrBpYeoHDaghpllF9-_HuAAPEmQbDweRrMj3_KrKDjbmOI5EySuBKOt_0vQsOJRLcmO7w20rqi5MSo6I=@protonmail.com>
Message-ID: <70B582E7-760C-4517-9DF6-817E5A3BE19E@gmail.com>

This is in R-devel, mind you, i.e., unreleased and quite possibly unfinished work.

No released version of R does this. E.g.,

> as.Date(0)
Error in as.Date.numeric(0) : 'origin' must be supplied
> version
               _                                          
platform       x86_64-apple-darwin21.6.0                  
arch           x86_64                                     
os             darwin21.6.0                               
system         x86_64, darwin21.6.0                       
status         Patched                                    
major          4                                          
minor          2.2                                        
year           2022                                       
month          11                                         
day            02                                         
svn rev        83236                                      
language       R                                          
version.string R version 4.2.2 Patched (2022-11-02 r83236)
nickname       Innocent and Trusting                      


> On 2 Nov 2022, at 14:38 , Dan Dalthorp via R-devel <r-devel at r-project.org> wrote:
> 
> I don't see a compelling rationale for changing the default behavior as.Date to deviate from the wholly reasonable status quo of "as.Date will accept numeric data (the number of days since an epoch), but only if origin is supplied." That has been the expectation for a long, long time. 
> 
> In any case, the manual should match the behavior.
> 
> -DHD
> 
> 
> 
> 
> ------- Original Message -------
> On Wednesday, November 2nd, 2022 at 6:20 AM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
> 
> 
>> 
>> 
>> I've felt that "as.Date" should default to origin "1970-01-01", so I
>> added a modification to Ecfun:
>> 
>> 
>> Ecfun::as.Date1970(0)
>> 
>> 
>> If R-devel chose to change the default on this, I would happily
>> deprecate Ecfun::as.Date1970 in favor of base::as.Date ;-)
>> 
>> 
>> I would therefore support changing the documentation to match the new
>> behavior.
>> 
>> 
>> Spencer Graves
>> 
>> 
>> On 11/2/22 7:30 AM, Dan Dalthorp via R-devel wrote:
>> 
>>> The new (2022-10-11 r83083 ucrt) as.Date function returns a date rather than an error when called without "origin" specified.
>>> 
>>> # previous versions of R
>>> as.Date(0)
>>> # Error in as.Date.numeric(0) : 'origin' must be supplied
>>> 
>>> # new:
>>> as.Date(0)
>>> # [1] "1970-01-01"
>>> 
>>> This is at odds with the help file, which gives:
>>> 
>>> origin
>>> 
>>> aDateobject, or something which can be coerced byas.Date(origin, ...)to such an object.
>>> 
>>> And:
>>> as.Datewill accept numeric data (the number of days since an epoch), butonlyiforiginis supplied.
>>> 
>>> The behavior described in the help file and implemented in previous versions seems more reasonable than returning a date with an arbitrary "origin". In any case, in the r-devel there is a mismatch between the function and its description.
>>> 
>>> -Dan
>>> [[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From dd@|thorp @end|ng |rom protonm@||@com  Wed Nov  2 16:49:32 2022
From: dd@|thorp @end|ng |rom protonm@||@com (Dan Dalthorp)
Date: Wed, 02 Nov 2022 15:49:32 +0000
Subject: [Rd] as.Date without "origin"
In-Reply-To: <70B582E7-760C-4517-9DF6-817E5A3BE19E@gmail.com>
References: <EKNZOOr0Xk-P1uT_HZiKSmlTniaWJ9qxbkQAdiT-WTIadalBDTvhObEvUFCj_yZEXiO1_mImOaOMtS-gxB3Rc5rcCUyeUZY9KTpuq-Yd89U=@protonmail.com>
 <345b7101-f116-e6aa-b8cf-522f68ed5638@prodsyse.com>
 <UVIu3zmRKG3oM__PzasW3vvKTYxIrBpYeoHDaghpllF9-_HuAAPEmQbDweRrMj3_KrKDjbmOI5EySuBKOt_0vQsOJRLcmO7w20rqi5MSo6I=@protonmail.com>
 <70B582E7-760C-4517-9DF6-817E5A3BE19E@gmail.com>
Message-ID: <MiWEUOFgZSdx-aqszTl8AL9bYv-XDP45KRgb2R13cDCd3RQOi3g21zGKCAOg42v4R2RHdHTtsjqtbFYRqvPwlA8zsbd2GvF4dtWtMugCvso=@protonmail.com>

Of course. But the broken as.Date in R-devel breaks one of my packages, so I'm getting threats of the package being removed from CRAN in a few days if the breakage is not resolved.

DHD




------- Original Message -------
On Wednesday, November 2nd, 2022 at 8:30 AM, peter dalgaard <pdalgd at gmail.com> wrote:


> 
> 
> This is in R-devel, mind you, i.e., unreleased and quite possibly unfinished work.
> 
> No released version of R does this. E.g.,
> 
> > as.Date(0)
> 
> Error in as.Date.numeric(0) : 'origin' must be supplied
> 
> > version
> 
> _
> platform x86_64-apple-darwin21.6.0
> arch x86_64
> os darwin21.6.0
> system x86_64, darwin21.6.0
> status Patched
> major 4
> minor 2.2
> year 2022
> month 11
> day 02
> svn rev 83236
> language R
> version.string R version 4.2.2 Patched (2022-11-02 r83236)
> nickname Innocent and Trusting
> 
> > On 2 Nov 2022, at 14:38 , Dan Dalthorp via R-devel r-devel at r-project.org wrote:
> > 
> > I don't see a compelling rationale for changing the default behavior as.Date to deviate from the wholly reasonable status quo of "as.Date will accept numeric data (the number of days since an epoch), but only if origin is supplied." That has been the expectation for a long, long time.
> > 
> > In any case, the manual should match the behavior.
> > 
> > -DHD
> > 
> > ------- Original Message -------
> > On Wednesday, November 2nd, 2022 at 6:20 AM, Spencer Graves spencer.graves at prodsyse.com wrote:
> > 
> > > I've felt that "as.Date" should default to origin "1970-01-01", so I
> > > added a modification to Ecfun:
> > > 
> > > Ecfun::as.Date1970(0)
> > > 
> > > If R-devel chose to change the default on this, I would happily
> > > deprecate Ecfun::as.Date1970 in favor of base::as.Date ;-)
> > > 
> > > I would therefore support changing the documentation to match the new
> > > behavior.
> > > 
> > > Spencer Graves
> > > 
> > > On 11/2/22 7:30 AM, Dan Dalthorp via R-devel wrote:
> > > 
> > > > The new (2022-10-11 r83083 ucrt) as.Date function returns a date rather than an error when called without "origin" specified.
> > > > 
> > > > # previous versions of R
> > > > as.Date(0)
> > > > # Error in as.Date.numeric(0) : 'origin' must be supplied
> > > > 
> > > > # new:
> > > > as.Date(0)
> > > > # [1] "1970-01-01"
> > > > 
> > > > This is at odds with the help file, which gives:
> > > > 
> > > > origin
> > > > 
> > > > aDateobject, or something which can be coerced byas.Date(origin, ...)to such an object.
> > > > 
> > > > And:
> > > > as.Datewill accept numeric data (the number of days since an epoch), butonlyiforiginis supplied.
> > > > 
> > > > The behavior described in the help file and implemented in previous versions seems more reasonable than returning a date with an arbitrary "origin". In any case, in the r-devel there is a mismatch between the function and its description.
> > > > 
> > > > -Dan
> > > > [[alternative HTML version deleted]]
> > > > 
> > > > ______________________________________________
> > > > R-devel at r-project.org mailing list
> > > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk Priv: PDalgd at gmail.com


From JAR@uh @end|ng |rom web@de  Wed Nov  2 21:47:41 2022
From: JAR@uh @end|ng |rom web@de (Johannes Rauh)
Date: Wed, 2 Nov 2022 21:47:41 +0100
Subject: [Rd] as.Date without "origin"
In-Reply-To: <UVIu3zmRKG3oM__PzasW3vvKTYxIrBpYeoHDaghpllF9-_HuAAPEmQbDweRrMj3_KrKDjbmOI5EySuBKOt_0vQsOJRLcmO7w20rqi5MSo6I=@protonmail.com>
References: <EKNZOOr0Xk-P1uT_HZiKSmlTniaWJ9qxbkQAdiT-WTIadalBDTvhObEvUFCj_yZEXiO1_mImOaOMtS-gxB3Rc5rcCUyeUZY9KTpuq-Yd89U=@protonmail.com>
 <345b7101-f116-e6aa-b8cf-522f68ed5638@prodsyse.com>
 <UVIu3zmRKG3oM__PzasW3vvKTYxIrBpYeoHDaghpllF9-_HuAAPEmQbDweRrMj3_KrKDjbmOI5EySuBKOt_0vQsOJRLcmO7w20rqi5MSo6I=@protonmail.com>
Message-ID: <trinity-944275fc-476b-4c4d-b8db-bbf3ef907154-1667422061742@3c-app-webde-bap25>

Dear all,

I would throw in my vote to have origin = "1970-01-01" as a default in as.Date().  Why?  Well, in fact, the "converse" function as.numeric() does have an implicit default:

> as.numeric(Sys.Date())
[1] 19298

In fact, as.numeric seems to not even have a method for class "Date", and so as.numeric() does not even have an argument "origin" or the like.

In any case, when using Date objects, it may happen that the result is of clas numeric. For example:

> ifelse(TRUE, Sys.Date(), Sys.Date() + 1)
[1] 19298

So, in order to transform the result back to class "Date" using as.Date(), I always need to remember the universal default origin 1970-01-01 and I need to write it out explicitly.

I find that rather inconvenient, and so having the default origin as a default would make very much sense to me here.

Of course, for that particular example, it would also help me if ifelse() would properly handle Date vectors.

Best
Johannes

> Gesendet: Mittwoch, 02. November 2022 um 14:38 Uhr
> Von: "Dan Dalthorp via R-devel" <r-devel at r-project.org>
> An: "Spencer Graves" <spencer.graves at prodsyse.com>
> Cc: "r-devel at r-project.org" <r-devel at r-project.org>
> Betreff: Re: [Rd] as.Date without "origin"
>
> I don't see a compelling rationale for changing the default behavior as.Date to deviate from the wholly reasonable status quo of "as.Date will accept numeric data (the number of days since an epoch), but only if origin is supplied." That has been the expectation for a long, long time.
>
> In any case, the manual should match the behavior.
>
> -DHD
>
>
>
>
> ------- Original Message -------
> On Wednesday, November 2nd, 2022 at 6:20 AM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
>
>
> >
> >
> > I've felt that "as.Date" should default to origin "1970-01-01", so I
> > added a modification to Ecfun:
> >
> >
> > Ecfun::as.Date1970(0)
> >
> >
> > If R-devel chose to change the default on this, I would happily
> > deprecate Ecfun::as.Date1970 in favor of base::as.Date ;-)
> >
> >
> > I would therefore support changing the documentation to match the new
> > behavior.
> >
> >
> > Spencer Graves
> >
> >
> > On 11/2/22 7:30 AM, Dan Dalthorp via R-devel wrote:
> >
> > > The new (2022-10-11 r83083 ucrt) as.Date function returns a date rather than an error when called without "origin" specified.
> > >
> > > # previous versions of R
> > > as.Date(0)
> > > # Error in as.Date.numeric(0) : 'origin' must be supplied
> > >
> > > # new:
> > > as.Date(0)
> > > # [1] "1970-01-01"
> > >
> > > This is at odds with the help file, which gives:
> > >
> > > origin
> > >
> > > aDateobject, or something which can be coerced byas.Date(origin, ...)to such an object.
> > >
> > > And:
> > > as.Datewill accept numeric data (the number of days since an epoch), butonlyiforiginis supplied.
> > >
> > > The behavior described in the help file and implemented in previous versions seems more reasonable than returning a date with an arbitrary "origin". In any case, in the r-devel there is a mismatch between the function and its description.
> > >
> > > -Dan
> > > [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Wed Nov  2 23:32:19 2022
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Wed, 2 Nov 2022 22:32:19 +0000
Subject: [Rd] as.Date without "origin"
In-Reply-To: <trinity-944275fc-476b-4c4d-b8db-bbf3ef907154-1667422061742@3c-app-webde-bap25>
References: <EKNZOOr0Xk-P1uT_HZiKSmlTniaWJ9qxbkQAdiT-WTIadalBDTvhObEvUFCj_yZEXiO1_mImOaOMtS-gxB3Rc5rcCUyeUZY9KTpuq-Yd89U=@protonmail.com>
 <345b7101-f116-e6aa-b8cf-522f68ed5638@prodsyse.com>
 <UVIu3zmRKG3oM__PzasW3vvKTYxIrBpYeoHDaghpllF9-_HuAAPEmQbDweRrMj3_KrKDjbmOI5EySuBKOt_0vQsOJRLcmO7w20rqi5MSo6I=@protonmail.com>
 <trinity-944275fc-476b-4c4d-b8db-bbf3ef907154-1667422061742@3c-app-webde-bap25>
Message-ID: <9022e3ef-90e7-be8d-546c-a72b14f73568@sapo.pt>

?s 20:47 de 02/11/2022, Johannes Rauh escreveu:
> Dear all,
> 
> I would throw in my vote to have origin = "1970-01-01" as a default in as.Date().  Why?  Well, in fact, the "converse" function as.numeric() does have an implicit default:
> 
>> as.numeric(Sys.Date())
> [1] 19298
> 
> In fact, as.numeric seems to not even have a method for class "Date", and so as.numeric() does not even have an argument "origin" or the like.
> 
> In any case, when using Date objects, it may happen that the result is of clas numeric. For example:
> 
>> ifelse(TRUE, Sys.Date(), Sys.Date() + 1)
> [1] 19298
> 
> So, in order to transform the result back to class "Date" using as.Date(), I always need to remember the universal default origin 1970-01-01 and I need to write it out explicitly.
> 
> I find that rather inconvenient, and so having the default origin as a default would make very much sense to me here.
> 
> Of course, for that particular example, it would also help me if ifelse() would properly handle Date vectors.
> 
> Best
> Johannes
> 
>> Gesendet: Mittwoch, 02. November 2022 um 14:38 Uhr
>> Von: "Dan Dalthorp via R-devel" <r-devel at r-project.org>
>> An: "Spencer Graves" <spencer.graves at prodsyse.com>
>> Cc: "r-devel at r-project.org" <r-devel at r-project.org>
>> Betreff: Re: [Rd] as.Date without "origin"
>>
>> I don't see a compelling rationale for changing the default behavior as.Date to deviate from the wholly reasonable status quo of "as.Date will accept numeric data (the number of days since an epoch), but only if origin is supplied." That has been the expectation for a long, long time.
>>
>> In any case, the manual should match the behavior.
>>
>> -DHD
>>
>>
>>
>>
>> ------- Original Message -------
>> On Wednesday, November 2nd, 2022 at 6:20 AM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
>>
>>
>>>
>>>
>>> I've felt that "as.Date" should default to origin "1970-01-01", so I
>>> added a modification to Ecfun:
>>>
>>>
>>> Ecfun::as.Date1970(0)
>>>
>>>
>>> If R-devel chose to change the default on this, I would happily
>>> deprecate Ecfun::as.Date1970 in favor of base::as.Date ;-)
>>>
>>>
>>> I would therefore support changing the documentation to match the new
>>> behavior.
>>>
>>>
>>> Spencer Graves
>>>
>>>
>>> On 11/2/22 7:30 AM, Dan Dalthorp via R-devel wrote:
>>>
>>>> The new (2022-10-11 r83083 ucrt) as.Date function returns a date rather than an error when called without "origin" specified.
>>>>
>>>> # previous versions of R
>>>> as.Date(0)
>>>> # Error in as.Date.numeric(0) : 'origin' must be supplied
>>>>
>>>> # new:
>>>> as.Date(0)
>>>> # [1] "1970-01-01"
>>>>
>>>> This is at odds with the help file, which gives:
>>>>
>>>> origin
>>>>
>>>> aDateobject, or something which can be coerced byas.Date(origin, ...)to such an object.
>>>>
>>>> And:
>>>> as.Datewill accept numeric data (the number of days since an epoch), butonlyiforiginis supplied.
>>>>
>>>> The behavior described in the help file and implemented in previous versions seems more reasonable than returning a date with an arbitrary "origin". In any case, in the r-devel there is a mismatch between the function and its description.
>>>>
>>>> -Dan
>>>> [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

Hello,

ifelse does properly handle Date objects. From its documentation:


Usage
ifelse(test, yes, no)
[...]
Value
A vector of the same length and attributes (including dimensions and 
"class") as test and data values from the values of yes or no.


In your example test = TRUE and yes = Sys.Date() so the return value is


class(ifelse(TRUE, Sys.Date(), Sys.Date() + 1))
# [1] "numeric"

class(ifelse(TRUE, Sys.Date(), Sys.Date() + 1L))
# [1] "numeric"


This is expected behavior.
I was expecting class "integer", not "numeric" but this too is 
documented in ?Dates section Details 2nd paragraph.


It is intended that the date should be an integer, but this is not 
enforced in the internal representation. Fractional days will be ignored 
when printing. It is possible to produce fractional days via the mean 
method or by adding or subtracting (see Ops.Date).


Hope this helps,

Rui Barradas


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Wed Nov  2 23:38:04 2022
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Wed, 2 Nov 2022 17:38:04 -0500
Subject: [Rd] as.Date without "origin"
In-Reply-To: <9022e3ef-90e7-be8d-546c-a72b14f73568@sapo.pt>
References: <EKNZOOr0Xk-P1uT_HZiKSmlTniaWJ9qxbkQAdiT-WTIadalBDTvhObEvUFCj_yZEXiO1_mImOaOMtS-gxB3Rc5rcCUyeUZY9KTpuq-Yd89U=@protonmail.com>
 <345b7101-f116-e6aa-b8cf-522f68ed5638@prodsyse.com>
 <UVIu3zmRKG3oM__PzasW3vvKTYxIrBpYeoHDaghpllF9-_HuAAPEmQbDweRrMj3_KrKDjbmOI5EySuBKOt_0vQsOJRLcmO7w20rqi5MSo6I=@protonmail.com>
 <trinity-944275fc-476b-4c4d-b8db-bbf3ef907154-1667422061742@3c-app-webde-bap25>
 <9022e3ef-90e7-be8d-546c-a72b14f73568@sapo.pt>
Message-ID: <5221d3c5-3f42-027a-a225-6288f6a9c788@prodsyse.com>



On 11/2/22 5:32 PM, Rui Barradas wrote:
> ?s 20:47 de 02/11/2022, Johannes Rauh escreveu:
>> Dear all,
>>
>> I would throw in my vote to have origin = "1970-01-01" as a default in 
>> as.Date().? Why?? Well, in fact, the "converse" function as.numeric() 
>> does have an implicit default:
>>
>>> as.numeric(Sys.Date())
>> [1] 19298
>>
>> In fact, as.numeric seems to not even have a method for class "Date", 
>> and so as.numeric() does not even have an argument "origin" or the like.
>>
>> In any case, when using Date objects, it may happen that the result is 
>> of clas numeric. For example:
>>
>>> ifelse(TRUE, Sys.Date(), Sys.Date() + 1)
>> [1] 19298
>>
>> So, in order to transform the result back to class "Date" using 
>> as.Date(), I always need to remember the universal default origin 
>> 1970-01-01 and I need to write it out explicitly.
>>
>> I find that rather inconvenient, and so having the default origin as a 
>> default would make very much sense to me here.
>>
>> Of course, for that particular example, it would also help me if 
>> ifelse() would properly handle Date vectors.
>>
>> Best
>> Johannes
>>
>>> Gesendet: Mittwoch, 02. November 2022 um 14:38 Uhr
>>> Von: "Dan Dalthorp via R-devel" <r-devel at r-project.org>
>>> An: "Spencer Graves" <spencer.graves at prodsyse.com>
>>> Cc: "r-devel at r-project.org" <r-devel at r-project.org>
>>> Betreff: Re: [Rd] as.Date without "origin"
>>>
>>> I don't see a compelling rationale for changing the default behavior 
>>> as.Date to deviate from the wholly reasonable status quo of "as.Date 
>>> will accept numeric data (the number of days since an epoch), but 
>>> only if origin is supplied." That has been the expectation for a 
>>> long, long time.
>>>
>>> In any case, the manual should match the behavior.
>>>
>>> -DHD
>>>
>>>
>>>
>>>
>>> ------- Original Message -------
>>> On Wednesday, November 2nd, 2022 at 6:20 AM, Spencer Graves 
>>> <spencer.graves at prodsyse.com> wrote:
>>>
>>>
>>>>
>>>>
>>>> I've felt that "as.Date" should default to origin "1970-01-01", so I
>>>> added a modification to Ecfun:
>>>>
>>>>
>>>> Ecfun::as.Date1970(0)
>>>>
>>>>
>>>> If R-devel chose to change the default on this, I would happily
>>>> deprecate Ecfun::as.Date1970 in favor of base::as.Date ;-)
>>>>
>>>>
>>>> I would therefore support changing the documentation to match the new
>>>> behavior.
>>>>
>>>>
>>>> Spencer Graves
>>>>
>>>>
>>>> On 11/2/22 7:30 AM, Dan Dalthorp via R-devel wrote:
>>>>
>>>>> The new (2022-10-11 r83083 ucrt) as.Date function returns a date 
>>>>> rather than an error when called without "origin" specified.
>>>>>
>>>>> # previous versions of R
>>>>> as.Date(0)
>>>>> # Error in as.Date.numeric(0) : 'origin' must be supplied
>>>>>
>>>>> # new:
>>>>> as.Date(0)
>>>>> # [1] "1970-01-01"
>>>>>
>>>>> This is at odds with the help file, which gives:
>>>>>
>>>>> origin
>>>>>
>>>>> aDateobject, or something which can be coerced byas.Date(origin, 
>>>>> ...)to such an object.
>>>>>
>>>>> And:
>>>>> as.Datewill accept numeric data (the number of days since an 
>>>>> epoch), butonlyiforiginis supplied.
>>>>>
>>>>> The behavior described in the help file and implemented in previous 
>>>>> versions seems more reasonable than returning a date with an 
>>>>> arbitrary "origin". In any case, in the r-devel there is a mismatch 
>>>>> between the function and its description.
>>>>>
>>>>> -Dan
>>>>> [[alternative HTML version deleted]]
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> Hello,
> 
> ifelse does properly handle Date objects. From its documentation:
> 
> 
> Usage
> ifelse(test, yes, no)
> [...]
> Value
> A vector of the same length and attributes (including dimensions and 
> "class") as test and data values from the values of yes or no.
> 
> 
> In your example test = TRUE and yes = Sys.Date() so the return value is
> 
> 
> class(ifelse(TRUE, Sys.Date(), Sys.Date() + 1))
> # [1] "numeric"
> 
> class(ifelse(TRUE, Sys.Date(), Sys.Date() + 1L))
> # [1] "numeric"
> 
> 
> This is expected behavior.
> I was expecting class "integer", not "numeric" but this too is 
> documented in ?Dates section Details 2nd paragraph.
> 
> 
> It is intended that the date should be an integer, but this is not 
> enforced in the internal representation. Fractional days will be ignored 
> when printing. It is possible to produce fractional days via the mean 
> method or by adding or subtracting (see Ops.Date).


I routinely use fractional days with class "Date".  I hope I can 
continue to do so.  Thanks, Spencer Graves
> 
> 
> Hope this helps,
> 
> Rui Barradas
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Nov  3 08:28:57 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 3 Nov 2022 20:28:57 +1300
Subject: [Rd] as.Date without "origin"
In-Reply-To: <UVIu3zmRKG3oM__PzasW3vvKTYxIrBpYeoHDaghpllF9-_HuAAPEmQbDweRrMj3_KrKDjbmOI5EySuBKOt_0vQsOJRLcmO7w20rqi5MSo6I=@protonmail.com>
References: <EKNZOOr0Xk-P1uT_HZiKSmlTniaWJ9qxbkQAdiT-WTIadalBDTvhObEvUFCj_yZEXiO1_mImOaOMtS-gxB3Rc5rcCUyeUZY9KTpuq-Yd89U=@protonmail.com>
 <345b7101-f116-e6aa-b8cf-522f68ed5638@prodsyse.com>
 <UVIu3zmRKG3oM__PzasW3vvKTYxIrBpYeoHDaghpllF9-_HuAAPEmQbDweRrMj3_KrKDjbmOI5EySuBKOt_0vQsOJRLcmO7w20rqi5MSo6I=@protonmail.com>
Message-ID: <C95D613E-8B9A-4878-BB29-23D1479CF5A5@R-project.org>

Dan,

as.Date() and as.POSIXct() have been updated to allow replacement of the hidden functions .POSIXct() and .Date() which were the only way to correctly convert the numeric representation of the objects as Johannes explained. Given that this is a very common operation (especially with POSIXct) it makes sense to not rely on hidden functions and will allow us to possibly deprecate them. And as Peter pointed out, this is R-devel so manuals won't be necessarily updated until the full functionality is implemented and this is part of a larger overhaul of the date/time functions which has not been finished yet.

Cheers,
Simon



> On Nov 3, 2022, at 2:38 AM, Dan Dalthorp via R-devel <r-devel at r-project.org> wrote:
> 
> I don't see a compelling rationale for changing the default behavior as.Date to deviate from the wholly reasonable status quo of "as.Date will accept numeric data (the number of days since an epoch), but only if origin is supplied." That has been the expectation for a long, long time. 
> 
> In any case, the manual should match the behavior.
> 
> -DHD
> 
> 
> 
> 
> ------- Original Message -------
> On Wednesday, November 2nd, 2022 at 6:20 AM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
> 
> 
>> 
>> 
>> I've felt that "as.Date" should default to origin "1970-01-01", so I
>> added a modification to Ecfun:
>> 
>> 
>> Ecfun::as.Date1970(0)
>> 
>> 
>> If R-devel chose to change the default on this, I would happily
>> deprecate Ecfun::as.Date1970 in favor of base::as.Date ;-)
>> 
>> 
>> I would therefore support changing the documentation to match the new
>> behavior.
>> 
>> 
>> Spencer Graves
>> 
>> 
>> On 11/2/22 7:30 AM, Dan Dalthorp via R-devel wrote:
>> 
>>> The new (2022-10-11 r83083 ucrt) as.Date function returns a date rather than an error when called without "origin" specified.
>>> 
>>> # previous versions of R
>>> as.Date(0)
>>> # Error in as.Date.numeric(0) : 'origin' must be supplied
>>> 
>>> # new:
>>> as.Date(0)
>>> # [1] "1970-01-01"
>>> 
>>> This is at odds with the help file, which gives:
>>> 
>>> origin
>>> 
>>> aDateobject, or something which can be coerced byas.Date(origin, ...)to such an object.
>>> 
>>> And:
>>> as.Datewill accept numeric data (the number of days since an epoch), butonlyiforiginis supplied.
>>> 
>>> The behavior described in the help file and implemented in previous versions seems more reasonable than returning a date with an arbitrary "origin". In any case, in the r-devel there is a mismatch between the function and its description.
>>> 
>>> -Dan
>>> [[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From therne@u @end|ng |rom m@yo@edu  Thu Nov  3 19:05:41 2022
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Thu, 03 Nov 2022 13:05:41 -0500
Subject: [Rd] as.Date withoug "origin"
Message-ID: <ff6a6b$iuo1bs@ironport10.mayo.edu>

Add my name to those who think this is a good change.

As someone who works daily with medical research data, the number of times I have been 
caugth by failure of statements like
 ?? as.Date(ifelse( is.na(prog.dt), lastfu.dt, prog.dt)
is a large annoyance.??? Replace ifelse by any number of selection processes for choosing 
among ending dates.

Terry T.

-- 
Terry M Therneau, PhD
Department of Quantitative Health Sciences
Mayo Clinic
therneau at mayo.edu

"TERR-ree THUR-noh"

	[[alternative HTML version deleted]]


