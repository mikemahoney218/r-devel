From suh@rto_@@ggo@o m@iii@g oii y@hoo@com  Fri May  1 05:05:37 2020
From: suh@rto_@@ggo@o m@iii@g oii y@hoo@com (suh@rto_@@ggo@o m@iii@g oii y@hoo@com)
Date: Fri, 1 May 2020 03:05:37 +0000 (UTC)
Subject: [Rd] paste(character(0), collapse="", recycle0=FALSE) should be ""
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
Message-ID: <1527610684.154738.1588302337266@mail.yahoo.com>

Without 'collapse', 'paste' pastes (concatenates) its arguments elementwise (separated by 'sep', " " by default). New in R devel and R patched, specifying recycle0 = FALSE makes mixing zero-length and nonzero-length arguments results in length zero. The result of paste(n, "th", sep = "", recycle0 = FALSE) always have the same length as 'n'. Previously, the result is still as long as the longest argument, with the zero-length argument like "". If all og the arguments have length zero, 'recycle0' doesn't matter.

As far as I understand, 'paste' with 'collapse' as a character string is supposed to put together elements of a vector into a single character string. I think 'recycle0' shouldn't change it.

In current R devel and R patched, paste(character(0), collapse = "", recycle0 = FALSE) is character(0). I think it should be "", like paste(character(0), collapse="").

paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE)
is
"4th, 5th".
paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
is
"4th".
I think
paste(c(        ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
should be
"",
not character(0).


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Fri May  1 06:51:16 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Thu, 30 Apr 2020 23:51:16 -0500
Subject: [Rd] 
 "not a valid win32 application" with rtools40-x86_65.exe on
 Windows 10
In-Reply-To: <CABFfbXtKWAuc0y61jV3WDpX52ksPJOzsaY=h+6rmOuMySWHZfw@mail.gmail.com>
References: <48910d2a-c3f0-7a2a-b94a-4f7c2cc74a54@prodsyse.com>
 <CABFfbXtKWAuc0y61jV3WDpX52ksPJOzsaY=h+6rmOuMySWHZfw@mail.gmail.com>
Message-ID: <bcf6e1e7-38f7-595c-63ca-d0106753aefc@prodsyse.com>

Hi, Jeroen et al.:


On 2020-04-30 03:15, Jeroen Ooms wrote:
> On Thu, Apr 30, 2020 at 6:38 AM Spencer Graves
> <spencer.graves at prodsyse.com> wrote:
>> Hello, All:
>>
>>
>>         "00install.out" from "R CMD check Ecfun_0.2-4.tar.gz" includes:
>>
>>
>> Error:  package or namespace load failed for 'Ecfun':
>>    .onLoad failed in loadNamespace() for 'rJava', details
>>     call: inDL(x, as.logical(local), as.logical(now), ...)
>>     error:  unable to load shared object 'c:/Program
>> Files/R/R-4.0.0/library/rJava/libs/i386/rJava.dll':
>>     LoadLibrary failure: ^1 is not a valid win32 application
>>
> This is an error in loading the rJava package, so it is not related to
> rtools40, and probably inappropriate for this mailing list.
>
> As Simon suggested, you may have to install the 32-bit Java JDK. See
> also this faq: https://github.com/r-windows/docs/blob/master/faq.md#how-to-install-rjava-on-windows


 ????? In fact I had both 32- and 64-bit Java installed but only the 
64-bit was in the path.? I added the 32-bit, but that did not fix the 
problem.? The last 2.5 lines in the section "How to install rJava on 
Windows?" to which you referred me reads:


to build rJava from source, you need the --merge-multiarch flag:

install.packages('rJava', type = 'source', INSTALL_opts='--merge-multiarch')


 ????? When I tried that, I got:


Warning in system("sh ./configure.win") : 'sh' not found


*** ON THE OTHER HAND:? The error message above says 'c:/Program
Files/R/R-4.0.0/library/rJava/libs/i386/rJava.dll':
 ?? LoadLibrary failure: ^1 is not a valid win32 application


 >>>> Is "rJava.dll" a valid win32 application?


 ????? Suggestions?
 ????? Thanks,
 ????? Spencer Graves


p.s.? A similar problem with rJava a month ago was fixed by installed 
64-bit Java.? Now with the upgrade to R 4.0.0 and rtools40, this no 
longer works.


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Fri May  1 08:44:43 2020
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Fri, 1 May 2020 12:14:43 +0530
Subject: [Rd] Possible documentation problem/bug?
In-Reply-To: <CAP8icURj-jxF-Qr+eqwT6qS9zZ5N_tkUyMACmSWQezsC2NvRMg@mail.gmail.com>
References: <CAP8icURj-jxF-Qr+eqwT6qS9zZ5N_tkUyMACmSWQezsC2NvRMg@mail.gmail.com>
Message-ID: <CADfFDC5VoLPzRjv5eYx6pFQMMGzdMnm5B=or2S9aNCted0UZ-Q@mail.gmail.com>

On Thu, Apr 30, 2020 at 6:04 PM Dominic Littlewood
<11dlittlewood at gmail.com> wrote:
>
> It seems like there is no obvious way in the documentation to convert the
> expressions in the dots argument to a list without evaluating them. Say, if
> you want to have a function that prints all its arguments:
>
> > foo(abc$de, fg[h], i)
> abc$de
> fg[h]
> i
>
> ...then converting them to a list would be helpful.
> Using substitute(...) was the first thing I tried, but that only gives
> the *first* argument

Isn't that what you would expect anyway? substitute() takes two
arguments, the expression and an environment. You are giving it three.
Normally this should be an error:

foo <- function(a, b, c) substitute(a, b, c)
foo(abc$de, fg[h], i)
# Error in substitute(a, b, c) : unused argument (c)

Clearly ... is being handled in some special way so that we don't get
an error, but otherwise works as expected.

foo <- function(...) substitute(...)
foo(abc$de, fg[h], i)
# abc$de

I would consider this a side-effect of the implementation, and not
something you should rely on.

On the other hand, I would have expected the following to give
something sensible, and it does:

foo <- function(...) substitute({...})
foo(abc$de, fg[h], i)
# {
#   abc$de
#    fg[h]
#    i
# }
as.character(foo(abc$de, fg[h], i))
# [1] "{"      "abc$de" "fg[h]"  "i"

> in dots. It turns out that there is a way to do this, using
> substitute(...()), but this does not appear to be in either the substitute or
> the dots help page.

There is no documented reason for this to work (AFAIK), so again, I
would guess this is a side-effect of the implementation, and not a API
feature you should rely on. This is somewhat borne out by the
following:

> foo <- function(...) substitute({...()})
> foo(abc$de, fg[h], i)
{
   pairlist(abc$de, fg[h], i)
}
> foo(abc$de, fg[h], , i) # add a missing argument for extra fun
{
   as.pairlist(alist(abc$de, fg[h], , i))
}

which is not something you would expect to see at the user level. So
my recommendation: don't use ...() and pretend that you never
discovered it in the first place. Use match.call() instead, as
suggested by Serguei.

[Disclaimer: I have no idea what is actually going on, so these are
just guesses. There are some hints at
https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Dot_002ddot_002ddot-arguments
if you want to folllow up.]

-Deepayan

> In fact, there is a clue how to do this in the documentation, if you look
> closely. Let me quote the substitute page:
>
> "Substituting and quoting often cause confusion when the argument is
> expression(...). The result is a call to the expression constructor
> function and needs to be evaluated with eval to give the actual expression
> object."
>
> So this appears to give a way to turn the arguments into a list -
> eval(substitute(expression(...))).  But that's quite long, and hard to
> understand if you just come across it in some code - why are we using eval
> here? why are we substituting expression? - and would definitely require an
> explanatory comment. If the user just wants to iterate over the arguments,
> substitute(...()) is better. In fact, you can get exactly the same effect
> as the above code using as.expression(substitute(...())). Should the
> documentation be updated?
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From toth@dene@ @end|ng |rom kogentum@hu  Fri May  1 23:00:30 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Fri, 1 May 2020 23:00:30 +0200
Subject: [Rd] Request: tools::md5sum should accept connections and finally
 in-memory objects
Message-ID: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>


AFAIK there is no hashing utility in base R which can create hash 
digests of arbitrary R objects. However, as also described by Henrik 
Bengtsson in [1], we have tools::md5sum() which calculates MD5 hashes of 
files. Calculating hashes of in-memory objects is a very common task in 
several areas, as demonstrated by the popularity of the 'digest' package 
(~850.000 downloads/month).

Upon the inspection of the relevant files in the R-source (e.g., [2] and 
[3]), it seems all building blocks have already been implemented so that 
hashing should not be restricted to files. I would like to ask:

1) Why is md5_buffer unused?:
In src/library/tools/src/md5.c [see 2], md5_buffer is implemented which 
seems to be the counterpart of md5_stream for non-file inputs:

---
#ifdef UNUSED
/* Compute MD5 message digest for LEN bytes beginning at BUFFER.  The
    result is always in little endian byte order, so that a byte-wise
    output yields to the wanted ASCII representation of the message
    digest.  */
static void *
md5_buffer (const char *buffer, size_t len, void *resblock)
{
   struct md5_ctx ctx;

   /* Initialize the computation context.  */
   md5_init_ctx (&ctx);

   /* Process whole buffer but last len % 64 bytes.  */
   md5_process_bytes (buffer, len, &ctx);

   /* Put result in desired memory area.  */
   return md5_finish_ctx (&ctx, resblock);
}
#endif
---

2) How can the R-community help so that this feature becomes available 
in package 'tools'?

Suggestions:
As a first step, it would be great if tools::md5sum would support 
connections (credit goes to Henrik for the idea). E.g., instead of the 
signature tools::md5sum(files), we could have tools::md5sum(files, conn 
= NULL), which would allow:

x <- runif(10)
tools::md5sum(conn = rawConnection(serialize(x, NULL)))

To avoid the inconsistency between 'files' (which computes the hash 
digests in a vectorized manner, that is, one for each file) and 'conn' 
(which expects a single connection), and to make it easier to extend the 
hashing for other algorithms without changing the main R interface, a 
more involved solution would be to introduce tools::hash and 
tools::hashes, in a similar vein to digest::digest and digest::getVDigest.

Regards,
Denes


[1]: https://github.com/HenrikBengtsson/Wishlist-for-R/issues/21
[2]: 
https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/md5.c#L172
[3]: 
https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/Rmd5.c#L27


From jmount @end|ng |rom w|n-vector@com  Fri May  1 23:09:31 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Fri, 1 May 2020 14:09:31 -0700
Subject: [Rd] 
 Request: tools::md5sum should accept connections and finally
 in-memory objects
In-Reply-To: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
References: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
Message-ID: <99EA2602-BC94-4EA3-8A60-5797B8A84485@win-vector.com>

Perhaps use the digest package? Isn't "R the R packages?"

> On May 1, 2020, at 2:00 PM, D?nes T?th <toth.denes at kogentum.hu> wrote:
> 
> 
> AFAIK there is no hashing utility in base R which can create hash digests of arbitrary R objects. However, as also described by Henrik Bengtsson in [1], we have tools::md5sum() which calculates MD5 hashes of files. Calculating hashes of in-memory objects is a very common task in several areas, as demonstrated by the popularity of the 'digest' package (~850.000 downloads/month).
> 
> Upon the inspection of the relevant files in the R-source (e.g., [2] and [3]), it seems all building blocks have already been implemented so that hashing should not be restricted to files. I would like to ask:
> 
> 1) Why is md5_buffer unused?:
> In src/library/tools/src/md5.c [see 2], md5_buffer is implemented which seems to be the counterpart of md5_stream for non-file inputs:
> 
> ---
> #ifdef UNUSED
> /* Compute MD5 message digest for LEN bytes beginning at BUFFER.  The
>   result is always in little endian byte order, so that a byte-wise
>   output yields to the wanted ASCII representation of the message
>   digest.  */
> static void *
> md5_buffer (const char *buffer, size_t len, void *resblock)
> {
>  struct md5_ctx ctx;
> 
>  /* Initialize the computation context.  */
>  md5_init_ctx (&ctx);
> 
>  /* Process whole buffer but last len % 64 bytes.  */
>  md5_process_bytes (buffer, len, &ctx);
> 
>  /* Put result in desired memory area.  */
>  return md5_finish_ctx (&ctx, resblock);
> }
> #endif
> ---
> 
> 2) How can the R-community help so that this feature becomes available in package 'tools'?
> 
> Suggestions:
> As a first step, it would be great if tools::md5sum would support connections (credit goes to Henrik for the idea). E.g., instead of the signature tools::md5sum(files), we could have tools::md5sum(files, conn = NULL), which would allow:
> 
> x <- runif(10)
> tools::md5sum(conn = rawConnection(serialize(x, NULL)))
> 
> To avoid the inconsistency between 'files' (which computes the hash digests in a vectorized manner, that is, one for each file) and 'conn' (which expects a single connection), and to make it easier to extend the hashing for other algorithms without changing the main R interface, a more involved solution would be to introduce tools::hash and tools::hashes, in a similar vein to digest::digest and digest::getVDigest.
> 
> Regards,
> Denes
> 
> 
> [1]: https://github.com/HenrikBengtsson/Wishlist-for-R/issues/21
> [2]: https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/md5.c#L172
> [3]: https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/Rmd5.c#L27
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

---------------
John Mount
http://www.win-vector.com/ <http://www.win-vector.com/> 
Our book: Practical Data Science with R
http://practicaldatascience.com <http://practicaldatascience.com/> 






	[[alternative HTML version deleted]]


From toth@dene@ @end|ng |rom kogentum@hu  Fri May  1 23:35:04 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Fri, 1 May 2020 23:35:04 +0200
Subject: [Rd] 
 Request: tools::md5sum should accept connections and finally
 in-memory objects
In-Reply-To: <99EA2602-BC94-4EA3-8A60-5797B8A84485@win-vector.com>
References: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
 <99EA2602-BC94-4EA3-8A60-5797B8A84485@win-vector.com>
Message-ID: <948ca0cd-3466-f02d-34d7-e6db0c5578c4@kogentum.hu>



On 5/1/20 11:09 PM, John Mount wrote:
> Perhaps use the digest package? Isn't "R the R packages?"

I think it is clear that I am aware of the existence of the digest 
package and also of other packages with similar functionality, e.g. the 
fastdigest package. (And I actually do use digest as I guess 99% percent 
of the R developers do at least as an indirect dependency.) The point is 
that
a) digest is a wonderful and very stable package, but still, it is a 
user-contributed package, whereas
b) 'tools' is a base package which is included by default in all R 
installations, and
c) tools::md5sum already exists, with almost all building blocks to 
allow its extension to calculate MD5 hashes of R objects, and
d) there is high demand in the R community for being able to calculate 
hashes.

So yes, if one wants to use all the utilities or the various algos that 
the digest package provides, one should install and load it. But if one 
can live with MD5 hashes, why not use the built-in R function? (Well, 
without serializing an object to a file, calling tools::md5sum, and then 
cleaning up the file.)

> 
>> On May 1, 2020, at 2:00 PM, D?nes T?th <toth.denes at kogentum.hu 
>> <mailto:toth.denes at kogentum.hu>> wrote:
>>
>>
>> AFAIK there is no hashing utility in base R which can create hash 
>> digests of arbitrary R objects. However, as also described by Henrik 
>> Bengtsson in [1], we have tools::md5sum() which calculates MD5 hashes 
>> of files. Calculating hashes of in-memory objects is a very common 
>> task in several areas, as demonstrated by the popularity of the 
>> 'digest' package (~850.000 downloads/month).
>>
>> Upon the inspection of the relevant files in the R-source (e.g., [2] 
>> and [3]), it seems all building blocks have already been implemented 
>> so that hashing should not be restricted to files. I would like to ask:
>>
>> 1) Why is md5_buffer unused?:
>> In src/library/tools/src/md5.c [see 2], md5_buffer is implemented 
>> which seems to be the counterpart of md5_stream for non-file inputs:
>>
>> ---
>> #ifdef UNUSED
>> /* Compute MD5 message digest for LEN bytes beginning at BUFFER. ?The
>> ??result is always in little endian byte order, so that a byte-wise
>> ??output yields to the wanted ASCII representation of the message
>> ??digest. ?*/
>> static void *
>> md5_buffer (const char *buffer, size_t len, void *resblock)
>> {
>> ?struct md5_ctx ctx;
>>
>> ?/* Initialize the computation context. ?*/
>> ?md5_init_ctx (&ctx);
>>
>> ?/* Process whole buffer but last len % 64 bytes. ?*/
>> ?md5_process_bytes (buffer, len, &ctx);
>>
>> ?/* Put result in desired memory area. ?*/
>> ?return md5_finish_ctx (&ctx, resblock);
>> }
>> #endif
>> ---
>>
>> 2) How can the R-community help so that this feature becomes available 
>> in package 'tools'?
>>
>> Suggestions:
>> As a first step, it would be great if tools::md5sum would support 
>> connections (credit goes to Henrik for the idea). E.g., instead of the 
>> signature tools::md5sum(files), we could have tools::md5sum(files, 
>> conn = NULL), which would allow:
>>
>> x <- runif(10)
>> tools::md5sum(conn = rawConnection(serialize(x, NULL)))
>>
>> To avoid the inconsistency between 'files' (which computes the hash 
>> digests in a vectorized manner, that is, one for each file) and 'conn' 
>> (which expects a single connection), and to make it easier to extend 
>> the hashing for other algorithms without changing the main R 
>> interface, a more involved solution would be to introduce tools::hash 
>> and tools::hashes, in a similar vein to digest::digest and 
>> digest::getVDigest.
>>
>> Regards,
>> Denes
>>
>>
>> [1]: https://github.com/HenrikBengtsson/Wishlist-for-R/issues/21
>> [2]: 
>> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/md5.c#L172
>> [3]: 
>> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/Rmd5.c#L27
>>
>> ______________________________________________
>> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ---------------
> John Mount
> http://www.win-vector.com/
> Our book: Practical Data Science with R
> http://practicaldatascience.com
> 
> 
> 
> 
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri May  1 23:35:48 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 1 May 2020 17:35:48 -0400
Subject: [Rd] 
 Request: tools::md5sum should accept connections and finally
 in-memory objects
In-Reply-To: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
References: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
Message-ID: <aa159b4c-b2a5-4511-af17-d40838250341@gmail.com>

The tools package is not for users, it's for functions that R uses in 
installing packages, checking them, etc.  If you want a function for 
users, it would belong in utils.  But what's wrong with the digest 
package?  What's the argument that R Core should take this on?

Duncan Murdoch

On 01/05/2020 5:00 p.m., D?nes T?th wrote:
> 
> AFAIK there is no hashing utility in base R which can create hash
> digests of arbitrary R objects. However, as also described by Henrik
> Bengtsson in [1], we have tools::md5sum() which calculates MD5 hashes of
> files. Calculating hashes of in-memory objects is a very common task in
> several areas, as demonstrated by the popularity of the 'digest' package
> (~850.000 downloads/month).
> 
> Upon the inspection of the relevant files in the R-source (e.g., [2] and
> [3]), it seems all building blocks have already been implemented so that
> hashing should not be restricted to files. I would like to ask:
> 
> 1) Why is md5_buffer unused?:
> In src/library/tools/src/md5.c [see 2], md5_buffer is implemented which
> seems to be the counterpart of md5_stream for non-file inputs:
> 
> ---
> #ifdef UNUSED
> /* Compute MD5 message digest for LEN bytes beginning at BUFFER.  The
>      result is always in little endian byte order, so that a byte-wise
>      output yields to the wanted ASCII representation of the message
>      digest.  */
> static void *
> md5_buffer (const char *buffer, size_t len, void *resblock)
> {
>     struct md5_ctx ctx;
> 
>     /* Initialize the computation context.  */
>     md5_init_ctx (&ctx);
> 
>     /* Process whole buffer but last len % 64 bytes.  */
>     md5_process_bytes (buffer, len, &ctx);
> 
>     /* Put result in desired memory area.  */
>     return md5_finish_ctx (&ctx, resblock);
> }
> #endif
> ---
> 
> 2) How can the R-community help so that this feature becomes available
> in package 'tools'?
> 
> Suggestions:
> As a first step, it would be great if tools::md5sum would support
> connections (credit goes to Henrik for the idea). E.g., instead of the
> signature tools::md5sum(files), we could have tools::md5sum(files, conn
> = NULL), which would allow:
> 
> x <- runif(10)
> tools::md5sum(conn = rawConnection(serialize(x, NULL)))
> 
> To avoid the inconsistency between 'files' (which computes the hash
> digests in a vectorized manner, that is, one for each file) and 'conn'
> (which expects a single connection), and to make it easier to extend the
> hashing for other algorithms without changing the main R interface, a
> more involved solution would be to introduce tools::hash and
> tools::hashes, in a similar vein to digest::digest and digest::getVDigest.
> 
> Regards,
> Denes
> 
> 
> [1]: https://github.com/HenrikBengtsson/Wishlist-for-R/issues/21
> [2]:
> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/md5.c#L172
> [3]:
> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/Rmd5.c#L27
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From jmount @end|ng |rom w|n-vector@com  Fri May  1 23:40:40 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Fri, 1 May 2020 14:40:40 -0700
Subject: [Rd] 
 Request: tools::md5sum should accept connections and finally
 in-memory objects
In-Reply-To: <948ca0cd-3466-f02d-34d7-e6db0c5578c4@kogentum.hu>
References: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
 <99EA2602-BC94-4EA3-8A60-5797B8A84485@win-vector.com>
 <948ca0cd-3466-f02d-34d7-e6db0c5578c4@kogentum.hu>
Message-ID: <81172D45-9DE3-4520-9A9A-458C2E1B0CFE@win-vector.com>


> So yes, if one wants to use all the utilities or the various algos that the digest package provides, one should install and load it. But if one can live with MD5 hashes, why not use the built-in R function? (Well, without serializing an object to a file, calling tools::md5sum, and then cleaning up the file.)

Doesn't that assume that the serialization method is deterministic? Is that a documented property of the serialization tools?


From toth@dene@ @end|ng |rom kogentum@hu  Sat May  2 00:07:43 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Sat, 2 May 2020 00:07:43 +0200
Subject: [Rd] 
 Request: tools::md5sum should accept connections and finally
 in-memory objects
In-Reply-To: <aa159b4c-b2a5-4511-af17-d40838250341@gmail.com>
References: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
 <aa159b4c-b2a5-4511-af17-d40838250341@gmail.com>
Message-ID: <eed122db-7e6f-f1c2-06ed-68325d41abef@kogentum.hu>



On 5/1/20 11:35 PM, Duncan Murdoch wrote:
> The tools package is not for users, it's for functions that R uses in 
> installing packages, checking them, etc. 

I think the target group for this functionality is the group of R 
developers, not regular R users.

> If you want a function for 
> users, it would belong in utils.? But what's wrong with the digest 
> package?? What's the argument that R Core should take this on?

There is nothing wrong with the digest package except for being an extra 
dependency which could be avoided if an already implemented C function 
were available at the R level.

I do understand that given the load on R Core, they do include new 
features and the related burden of maintenance only if it is absolutely 
necessary. This is why I asked first whether there is a particular 
reason not to expose an already existing (base-R) implementation. I 
think it is reasonable to assume that 'md5_buffer' exists for a reason - 
but probably there is a reason why it never became part of any exported 
function. Now I checked the history of the md5.c file; it was last 
edited 8 years ago. Somewhat surprisingly, md5_buffer was already 
included in the original file (created 17 years ago), but marked as 
UNUSED 12 years ago.

Just to clarify: I do not want suggest that R Core team should take over 
all functionalities of the digest package. I do really focus on 
computing MD5 digests, which is already possible for files. My 
suggestion for a more general function was meant for keeping potential 
further enhancements in mind.


> 
> Duncan Murdoch
> 
> On 01/05/2020 5:00 p.m., D?nes T?th wrote:
>>
>> AFAIK there is no hashing utility in base R which can create hash
>> digests of arbitrary R objects. However, as also described by Henrik
>> Bengtsson in [1], we have tools::md5sum() which calculates MD5 hashes of
>> files. Calculating hashes of in-memory objects is a very common task in
>> several areas, as demonstrated by the popularity of the 'digest' package
>> (~850.000 downloads/month).
>>
>> Upon the inspection of the relevant files in the R-source (e.g., [2] and
>> [3]), it seems all building blocks have already been implemented so that
>> hashing should not be restricted to files. I would like to ask:
>>
>> 1) Why is md5_buffer unused?:
>> In src/library/tools/src/md5.c [see 2], md5_buffer is implemented which
>> seems to be the counterpart of md5_stream for non-file inputs:
>>
>> ---
>> #ifdef UNUSED
>> /* Compute MD5 message digest for LEN bytes beginning at BUFFER.? The
>> ???? result is always in little endian byte order, so that a byte-wise
>> ???? output yields to the wanted ASCII representation of the message
>> ???? digest.? */
>> static void *
>> md5_buffer (const char *buffer, size_t len, void *resblock)
>> {
>> ??? struct md5_ctx ctx;
>>
>> ??? /* Initialize the computation context.? */
>> ??? md5_init_ctx (&ctx);
>>
>> ??? /* Process whole buffer but last len % 64 bytes.? */
>> ??? md5_process_bytes (buffer, len, &ctx);
>>
>> ??? /* Put result in desired memory area.? */
>> ??? return md5_finish_ctx (&ctx, resblock);
>> }
>> #endif
>> ---
>>
>> 2) How can the R-community help so that this feature becomes available
>> in package 'tools'?
>>
>> Suggestions:
>> As a first step, it would be great if tools::md5sum would support
>> connections (credit goes to Henrik for the idea). E.g., instead of the
>> signature tools::md5sum(files), we could have tools::md5sum(files, conn
>> = NULL), which would allow:
>>
>> x <- runif(10)
>> tools::md5sum(conn = rawConnection(serialize(x, NULL)))
>>
>> To avoid the inconsistency between 'files' (which computes the hash
>> digests in a vectorized manner, that is, one for each file) and 'conn'
>> (which expects a single connection), and to make it easier to extend the
>> hashing for other algorithms without changing the main R interface, a
>> more involved solution would be to introduce tools::hash and
>> tools::hashes, in a similar vein to digest::digest and 
>> digest::getVDigest.
>>
>> Regards,
>> Denes
>>
>>
>> [1]: https://github.com/HenrikBengtsson/Wishlist-for-R/issues/21
>> [2]:
>> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/md5.c#L172 
>>
>> [3]:
>> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/Rmd5.c#L27 
>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
>


From @|mon@urb@nek @end|ng |rom R-project@org  Sat May  2 09:20:53 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 2 May 2020 19:20:53 +1200
Subject: [Rd] 
 "not a valid win32 application" with rtools40-x86_65.exe on
 Windows 10
In-Reply-To: <bcf6e1e7-38f7-595c-63ca-d0106753aefc@prodsyse.com>
References: <48910d2a-c3f0-7a2a-b94a-4f7c2cc74a54@prodsyse.com>
 <CABFfbXtKWAuc0y61jV3WDpX52ksPJOzsaY=h+6rmOuMySWHZfw@mail.gmail.com>
 <bcf6e1e7-38f7-595c-63ca-d0106753aefc@prodsyse.com>
Message-ID: <07330765-1A84-43DE-BC03-D89A05DE35D8@R-project.org>

Spencer,

you shouldn't have anything on the PATH, the location of Java is taken from the registry so you only need t have a valid installation of Java. Better don't set PATH or JAVA_HOME as it will stop rJava from working if you get it wrong. The errors on Windows are confusing, the actual error is shown via GUI as pop-up, what they report in the console is not the real error.

Re installation from source - it sooks like you either don't have Rtools40 or you didn't set PATH properly. If I recall the new Rtools40 no longer set the PATH (for whatever reason) so you have to do it by hand and the instructions it gives you are not working for the command shell.

Cheers,
Simon



> On 1/05/2020, at 4:51 PM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
> 
> Hi, Jeroen et al.:
> 
> 
> On 2020-04-30 03:15, Jeroen Ooms wrote:
>> On Thu, Apr 30, 2020 at 6:38 AM Spencer Graves
>> <spencer.graves at prodsyse.com> wrote:
>>> Hello, All:
>>> 
>>> 
>>>        "00install.out" from "R CMD check Ecfun_0.2-4.tar.gz" includes:
>>> 
>>> 
>>> Error:  package or namespace load failed for 'Ecfun':
>>>   .onLoad failed in loadNamespace() for 'rJava', details
>>>    call: inDL(x, as.logical(local), as.logical(now), ...)
>>>    error:  unable to load shared object 'c:/Program
>>> Files/R/R-4.0.0/library/rJava/libs/i386/rJava.dll':
>>>    LoadLibrary failure: ^1 is not a valid win32 application
>>> 
>> This is an error in loading the rJava package, so it is not related to
>> rtools40, and probably inappropriate for this mailing list.
>> 
>> As Simon suggested, you may have to install the 32-bit Java JDK. See
>> also this faq: https://github.com/r-windows/docs/blob/master/faq.md#how-to-install-rjava-on-windows
> 
> 
>       In fact I had both 32- and 64-bit Java installed but only the 64-bit was in the path.  I added the 32-bit, but that did not fix the problem.  The last 2.5 lines in the section "How to install rJava on Windows?" to which you referred me reads:
> 
> 
> to build rJava from source, you need the --merge-multiarch flag:
> 
> install.packages('rJava', type = 'source', INSTALL_opts='--merge-multiarch')
> 
> 
>       When I tried that, I got:
> 
> 
> Warning in system("sh ./configure.win") : 'sh' not found
> 
> 
> *** ON THE OTHER HAND:  The error message above says 'c:/Program
> Files/R/R-4.0.0/library/rJava/libs/i386/rJava.dll':
>    LoadLibrary failure: ^1 is not a valid win32 application
> 
> 
> >>>> Is "rJava.dll" a valid win32 application?
> 
> 
>       Suggestions?
>       Thanks,
>       Spencer Graves
> 
> 
> p.s.  A similar problem with rJava a month ago was fixed by installed 64-bit Java.  Now with the upgrade to R 4.0.0 and rtools40, this no longer works.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @nto|ne@|@br| @end|ng |rom gm@||@com  Sat May  2 14:30:29 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Sat, 2 May 2020 14:30:29 +0200
Subject: [Rd] issues with environment handling in model.frame()
Message-ID: <CAEKh8ugLJi=APMiaAUki11M7V2UdpeGfbSbpr=kCc5AXxRdBTw@mail.gmail.com>

Dear all,

model.frame behaves in a way I don't expect when both its formula and
subset argument are passed through a function call.

This works as expected:

model.frame(~wool, warpbreaks, breaks < 15)
#>    wool
#> 14    A
#> 23    A
#> 29    B
#> 50    B
fun1 <- function(y) model.frame(~wool, warpbreaks, y)
fun1(with(warpbreaks, breaks < 15))
#>    wool
#> 14    A
#> 23    A
#> 29    B
#> 50    B

but this doesn't:

fun2 <- function(x, y) model.frame(x, warpbreaks, y)
fun2(~wool, with(warpbreaks, breaks < 15))
#> Error in eval(substitute(subset), data, env): object 'y' not found

model.frame is used by xtabs() and aggregate() so the following won't work
either:
fun3 <- function(x, y) xtabs(x, warpbreaks, y)
fun3(~wool, with(warpbreaks, breaks < 15))
#> Error in eval(substitute(subset), data, env): object 'y' not found

fun4 <- function(x, y) aggregate(x, warpbreaks, length, subset = y)
fun4(breaks ~ wool, with(warpbreaks, breaks < 15))
#> Error in eval(substitute(subset), data, env): object 'y' not found

The subset argument uses NSE, though no help file among aggregate, xtabs or
model.frame suggests it as far as I can see, and I assume the expectation
that NSE will be used led to overlook the problematic case above.

The SO question prompted this bug report :
https://stackoverflow.com/questions/61145404

Best regards,

Antoine

	[[alternative HTML version deleted]]


From n@veen @end|ng |rom ccdc|nd|@@org  Sat May  2 16:14:45 2020
From: n@veen @end|ng |rom ccdc|nd|@@org (Naveen Kaushik)
Date: Sat, 2 May 2020 14:14:45 +0000
Subject: [Rd] R not working to Window 10
Message-ID: <PS1PR0601MB19316CB959D149B2A6230C9FD5A80@PS1PR0601MB1931.apcprd06.prod.outlook.com>

I have just installed R from https://cran.r-project.org/bin/windows/base/rtest.html but when i want to open R, not open to massage show and when I troubleshoot R program it is show that Settings applied to: Rgui: Windows compatibility mode: Windows 8 (incompatible Program).  So please guide me how to run this program or please fix this type of bugs.



Thanks & Regards
Naveen Kaushik


	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Sat May  2 16:54:21 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 2 May 2020 09:54:21 -0500
Subject: [Rd] R not working to Window 10
In-Reply-To: <PS1PR0601MB19316CB959D149B2A6230C9FD5A80@PS1PR0601MB1931.apcprd06.prod.outlook.com>
References: <PS1PR0601MB19316CB959D149B2A6230C9FD5A80@PS1PR0601MB1931.apcprd06.prod.outlook.com>
Message-ID: <24237.35229.935290.521860@rob.eddelbuettel.com>


On 2 May 2020 at 14:14, Naveen Kaushik via R-devel wrote:
| I have just installed R from https://cran.r-project.org/bin/windows/base/rtest.html but when i want to open R, not open to massage show and when I troubleshoot R program it is show that Settings applied to: Rgui: Windows compatibility mode: Windows 8 (incompatible Program).  So please guide me how to run this program or please fix this type of bugs.

Welcome to R, and sorry about your troubles. This is however *very much* the
wrong place to ask, as this list is about R development of, and with, R.

Not use or installation. Please try r-help, maybe StackOverflow.  I
understand a lot of people use R happily on Windows 10, so maybe also check
the 'R on Windows FAQ' for its entries on anti-virus checkers and alike.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat May  2 17:09:14 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 2 May 2020 17:09:14 +0200
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <1527610684.154738.1588302337266@mail.yahoo.com>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
Message-ID: <24237.36122.138161.27636@stat.math.ethz.ch>

>>>>> suharto anggono--- via R-devel 
>>>>>     on Fri, 1 May 2020 03:05:37 +0000 (UTC) writes:

    > Without 'collapse', 'paste' pastes (concatenates) its arguments elementwise (separated by 'sep', " " by default). New in R devel and R patched, specifying recycle0 = FALSE makes mixing zero-length and nonzero-length arguments results in length zero. 

That's not intended.
(It's what should only happen with the new (non-default) recycle0=TRUE )

> The result of paste(n, "th", sep = "", recycle0 = FALSE) always have the same length as 'n'. Previously, the result is still as long as the longest argument, with the zero-length argument like "". If all og the arguments have length zero, 'recycle0' doesn't matter.

    > As far as I understand, 'paste' with 'collapse' as a character string is supposed to put together elements of a vector into a single character string. I think 'recycle0' shouldn't change it.

Well, not quite:  only  'recycle0=FALSE'  shouldn't change it
.. maybe this is what you meant anyway.

    > In current R devel and R patched, paste(character(0), collapse = "", recycle0 = FALSE) is character(0). I think it should be "", like paste(character(0), collapse="").

Definitely:  The intent of the new 'recycle0' argument is to 
provide a non-default possibility for paste(...., recycle0=TRUE) to behave more
like "arithmetic" functions where the recycling rules ensure that
if one argument has length 0 then the result has length 0:
i.e.,   paste(a,b,c,d,  recycle0=TRUE)      should recycle the same as
              a+b+c+d                       does recycle

Indeed, the default 'recycle0=FALSE'  should correspond to previous (R <= 4.0.0)
behavior entirely.

BUT from all I see, R-devel and R-patched's version of paste()
do behave as they should.  Also what you clim here is not true :

    > paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE)
    > is
    > "4th, 5th".
    > paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
    > is
    > "4th".
    > I think
    > paste(c(        ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
    > should be
    > "",
    > not character(0).

Rather, what I see is what the comments of the following code
lines claim (according to the intention of 'recycle0', contrary
some of your claims above) :


paste(character(0), collapse = "", recycle0 = FALSE) # is "", like
paste(character(0), collapse = "")
paste(character(0), collapse = "", recycle0 =  TRUE) # is character(0)

paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE) # is "4th, 5th"
paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 = FALSE) # is "4th"
paste(c(        ), "th", sep = "", collapse = ", ", recycle0 = FALSE) # is "th"
##
paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 =  TRUE) # is "4th, 5th"
paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 =  TRUE) # is "4th"
paste(c(        ), "th", sep = "", collapse = ", ", recycle0 =  TRUE) # is character(0)


There must be a lapsus / misunderstanding somewhere.
I don't see any problem in the new behavior for now.

Best regards,
Martin


From ccberry @end|ng |rom he@|th@uc@d@edu  Sat May  2 20:09:35 2020
From: ccberry @end|ng |rom he@|th@uc@d@edu (Berry, Charles)
Date: Sat, 2 May 2020 18:09:35 +0000
Subject: [Rd] issues with environment handling in model.frame()
In-Reply-To: <CAEKh8ugLJi=APMiaAUki11M7V2UdpeGfbSbpr=kCc5AXxRdBTw@mail.gmail.com>
References: <CAEKh8ugLJi=APMiaAUki11M7V2UdpeGfbSbpr=kCc5AXxRdBTw@mail.gmail.com>
Message-ID: <20999428-C4E1-492B-AA25-C8AEF4278A15@ucsd.edu>



> On May 2, 2020, at 5:30 AM, Antoine Fabri <antoine.fabri at gmail.com> wrote:
> 
> Dear all,
> 
> model.frame behaves in a way I don't expect when both its formula and
> subset argument are passed through a function call.
> 

See the help page

?formula

in particular the section headed 'Environments'.

Then look at the help for 

?model.frame

which says

"All the variables in formula, subset and in ... are looked for first in data and then in the environment of formula (see the help for formula for further details) and collected into a data frame."


> This works as expected:
> 
> model.frame(~wool, warpbreaks, breaks < 15)
> #>    wool
> #> 14    A
> #> 23    A
> #> 29    B
> #> 50    B
> fun1 <- function(y) model.frame(~wool, warpbreaks, y)
> fun1(with(warpbreaks, breaks < 15))
> #>    wool
> #> 14    A
> #> 23    A
> #> 29    B
> #> 50    B
> 

Here the fornmula `~wool' has the environment created when fun1 is called and so does `y'.

So model.frame finds them both after first looking for them in `warpbreaks'.


> but this doesn't:
> 
> fun2 <- function(x, y) model.frame(x, warpbreaks, y)
> fun2(~wool, with(warpbreaks, breaks < 15))
> #> Error in eval(substitute(subset), data, env): object 'y' not found
> 


Here the formula has environment `<environment: R_GlobalEnv>' and `y' has the environment created when fun2 is called. 

So model.frame looks in warpbreaks, then in `<environment: R_GlobalEnv>' and doesn't find y in either.

Similar issues apply in the use of formulas below.

> model.frame is used by xtabs() and aggregate() so the following won't work
> either:
> fun3 <- function(x, y) xtabs(x, warpbreaks, y)
> fun3(~wool, with(warpbreaks, breaks < 15))
> #> Error in eval(substitute(subset), data, env): object 'y' not found
> 
> fun4 <- function(x, y) aggregate(x, warpbreaks, length, subset = y)
> fun4(breaks ~ wool, with(warpbreaks, breaks < 15))
> #> Error in eval(substitute(subset), data, env): object 'y' not found
> 


Each of these cases can be made to work by inserting

	environment(x) <- environment()

before the call to model.frame in each of your fun[2-4] functions.

However, this can lead to headaches downstream if you need to save the formula and use it in another function.  If this is where you are headed some time spent studying lm() and methods for "lm" objects may help.

[rest deleted]

HTH,

Chuck

From @dr|@n @end|ng |rom tr@p|ett|@org  Sun May  3 10:06:13 2020
From: @dr|@n @end|ng |rom tr@p|ett|@org (Adrian Trapletti)
Date: Sun, 3 May 2020 10:06:13 +0200
Subject: [Rd] R 4.0.0 with Intel MKL for Windows
Message-ID: <CAFmikf17XhpXNCCy9Xv+gcmSN98=4X85OwXY-9K5c9Xzechshw@mail.gmail.com>

For Windows users, some instructions how to use R 4.0.0 with Intel MKL:

https://linkedin.com/pulse/r-400-intel-mkl-windows-adrian-trapletti

Best Regards
Adrian

Adrian Trapletti

Steinstrasse 9b, 8610 Uster, Switzerland
P +41 44 994 56 30  |  M +41 79 103 71 31
adrian at trapletti.org  |  www.trapletti.org


From suh@rto_@@ggo@o m@iii@g oii y@hoo@com  Sun May  3 10:54:12 2020
From: suh@rto_@@ggo@o m@iii@g oii y@hoo@com (suh@rto_@@ggo@o m@iii@g oii y@hoo@com)
Date: Sun, 3 May 2020 08:54:12 +0000 (UTC)
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <24237.36122.138161.27636@stat.math.ethz.ch>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <24237.36122.138161.27636@stat.math.ethz.ch>
Message-ID: <612519988.282141.1588496052127@mail.yahoo.com>

 I was wrong, as I didn't actually try and didn't read the documentation carefully. I thought that ' zero-length arguments being recycled to "" ' happens when recycle0 = TRUE. It is actually the opposite.

Everywhere in my previous message, recycle0 = FALSE should be recycle0 = TRUE.

I really think that 'paste' with 'collapse' specified (as a character string) should always result in a single character string, no matter what value of 'recycle0'.

paste(character(0), collapse = "", recycle0 = TRUE) # character(0), but should be ""

paste(character(0), recycle0 = FALSE)
is the same as
paste(character(0), recycle0 = TRUE) .
'recycle0' doesn't matter there.
Why should
paste(character(0), collapse = "", recycle0 = FALSE)
be different from
paste(character(0), collapse = "", recycle0 = TRUE) ?

paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 =? TRUE) # "4th, 5th"
paste(c("4"? ? ), "th", sep = "", collapse = ", ", recycle0 =? TRUE) # "4th"
paste(c(? ? ? ? ), "th", sep = "", collapse = ", ", recycle0 =? TRUE) # character(0), but should be ""


On Saturday, 2 May 2020, 10:09:21 pm GMT+7, Martin Maechler <maechler at stat.math.ethz.ch> wrote:


>>>>> suharto anggono--- via R-devel 
>>>>>? ? on Fri, 1 May 2020 03:05:37 +0000 (UTC) writes:

? ? > Without 'collapse', 'paste' pastes (concatenates) its arguments elementwise (separated by 'sep', " " by default). New in R devel and R patched, specifying recycle0 = FALSE makes mixing zero-length and nonzero-length arguments results in length zero. 

That's not intended.
(It's what should only happen with the new (non-default) recycle0=TRUE )

> The result of paste(n, "th", sep = "", recycle0 = FALSE) always have the same length as 'n'. Previously, the result is still as long as the longest argument, with the zero-length argument like "". If all og the arguments have length zero, 'recycle0' doesn't matter.

? ? > As far as I understand, 'paste' with 'collapse' as a character string is supposed to put together elements of a vector into a single character string. I think 'recycle0' shouldn't change it.

Well, not quite:? only? 'recycle0=FALSE'? shouldn't change it
.. maybe this is what you meant anyway.

? ? > In current R devel and R patched, paste(character(0), collapse = "", recycle0 = FALSE) is character(0). I think it should be "", like paste(character(0), collapse="").

Definitely:? The intent of the new 'recycle0' argument is to 
provide a non-default possibility for paste(...., recycle0=TRUE) to behave more
like "arithmetic" functions where the recycling rules ensure that
if one argument has length 0 then the result has length 0:
i.e.,? paste(a,b,c,d,? recycle0=TRUE)? ? ? should recycle the same as
? ? ? ? ? ? ? a+b+c+d? ? ? ? ? ? ? ? ? ? ? does recycle

Indeed, the default 'recycle0=FALSE'? should correspond to previous (R <= 4.0.0)
behavior entirely.

BUT from all I see, R-devel and R-patched's version of paste()
do behave as they should.? Also what you clim here is not true :

? ? > paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE)
? ? > is
? ? > "4th, 5th".
? ? > paste(c("4"? ? ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
? ? > is
? ? > "4th".
? ? > I think
? ? > paste(c(? ? ? ? ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
? ? > should be
? ? > "",
? ? > not character(0).

Rather, what I see is what the comments of the following code
lines claim (according to the intention of 'recycle0', contrary
some of your claims above) :


paste(character(0), collapse = "", recycle0 = FALSE) # is "", like
paste(character(0), collapse = "")
paste(character(0), collapse = "", recycle0 =? TRUE) # is character(0)


paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE) # is "4th, 5th"
paste(c("4"? ? ), "th", sep = "", collapse = ", ", recycle0 = FALSE) # is "4th"

paste(c(? ? ? ? ), "th", sep = "", collapse = ", ", recycle0 = FALSE) # is "th"
##
paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 =? TRUE) # is "4th, 5th"
paste(c("4"? ? ), "th", sep = "", collapse = ", ", recycle0 =? TRUE) # is "4th"
paste(c(? ? ? ? ), "th", sep = "", collapse = ", ", recycle0 =? TRUE) # is character(0)


There must be a lapsus / misunderstanding somewhere.
I don't see any problem in the new behavior for now.

Best regards,
Martin  
	[[alternative HTML version deleted]]


From j|ox @end|ng |rom mcm@@ter@c@  Sun May  3 18:15:42 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Sun, 3 May 2020 16:15:42 +0000
Subject: [Rd] Tcl.Tk Tktable package missing from R 4.0.0 on Windows
Message-ID: <B074B41A-963F-40E1-A2D8-870236E5D3CC@mcmaster.ca>

Dear R-devel list members,

The Tktable package for Tcl/Tk is apparently missing from the Windows distribution of R 4.0.0. I (actually a user of the Rcmdr package) discovered this when trying to use the new-data-set dialog in the Rcmdr package, producing the error, "Tcl package 'Tktable' must be installed first." 

I believe the Tktable has been part of the R distribution for Windows since R version 2.9.0, and is still present in the macOS distribution of R 4.0.0.

I apologize for not discovering this problem prior to the release of R 4.0.0. I did test the Rcmdr package under R 4.0.0 on both Windows and macOS, but not every menu item and dialog on each platform.

Does anyone have more information about this problem? 

Thank you,
 John

  -----------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox


From morg@n@em@||box @end|ng |rom gm@||@com  Sun May  3 18:48:46 2020
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Sun, 3 May 2020 17:48:46 +0100
Subject: [Rd] Hash functions at C level
Message-ID: <CAL0QV_NQSBFYFZYemCbUUug=_wcTdDoQGKuAst27N9CdxB-gQg@mail.gmail.com>

Dear R-dev,

Hope you are all well.
I would like to know if there is a hash function available for the R C API?
I noticed that there are hash structures and functions defined in the file
"unique.c". These would definitly suit my needs, however is there a way to
access them at C level?
Thank you for your time.
Best regards
Morgan

	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Sun May  3 21:51:39 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Sun, 3 May 2020 19:51:39 +0000 (UTC)
Subject: [Rd] Character Column-width Calculations
References: <1399385279.574387.1588535499652.ref@mail.yahoo.com>
Message-ID: <1399385279.574387.1588535499652@mail.yahoo.com>

I just submitted a patch on bugzilla[1] to update the internal column-width tables to a more recent version of Unicode.? The most obvious way this shows up is with emoji now having a computed width of 2 columns instead of 1 once the patch is applied:

> nchar('\U0001F600', type='width'). # grinning face emoji
[1] 2 

This wasn't really an issue for a long time as many terminals didn't even do this properly either, but over the last couple of years it seems as if terminals have started to update their width tables.

I don't personally care much for emoji, but do like my wrapped-text columns to be nice and even, which is why I'm proposing the patch.? Posting here in case others are interested in the issue.

This doesn't do any grapheme computations so it won't work with combining emoji, but should still be a step in the right direction.

Best,

Brodie

[1]: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17781


From jeroenoom@ @end|ng |rom gm@||@com  Mon May  4 09:01:07 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Mon, 4 May 2020 09:01:07 +0200
Subject: [Rd] Tcl.Tk Tktable package missing from R 4.0.0 on Windows
In-Reply-To: <B074B41A-963F-40E1-A2D8-870236E5D3CC@mcmaster.ca>
References: <B074B41A-963F-40E1-A2D8-870236E5D3CC@mcmaster.ca>
Message-ID: <CABFfbXtzXg_jChyX21jAq73UcG0ueH+tgoycvSHr8u-CJy9ORA@mail.gmail.com>

On Sun, May 3, 2020 at 6:15 PM Fox, John <jfox at mcmaster.ca> wrote:
>
> Dear R-devel list members,
>
> The Tktable package for Tcl/Tk is apparently missing from the Windows distribution of R 4.0.0. I (actually a user of the Rcmdr package) discovered this when trying to use the new-data-set dialog in the Rcmdr package, producing the error, "Tcl package 'Tktable' must be installed first."
>
> I believe the Tktable has been part of the R distribution for Windows since R version 2.9.0, and is still present in the macOS distribution of R 4.0.0.
>
> I apologize for not discovering this problem prior to the release of R 4.0.0. I did test the Rcmdr package under R 4.0.0 on both Windows and macOS, but not every menu item and dialog on each platform.
>
> Does anyone have more information about this problem?

Sorry this was my mistake. I somehow missed tktable when updating the
tcltk bundle for rtools40. This didn't show up in any package check
either.

I've added it back now, it should work again in today's builds r-devel
and r-patched. Thanks for catching this.

Jeroen


From j|ox @end|ng |rom mcm@@ter@c@  Mon May  4 15:33:47 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Mon, 4 May 2020 13:33:47 +0000
Subject: [Rd] Tcl.Tk Tktable package missing from R 4.0.0 on Windows
In-Reply-To: <CABFfbXtzXg_jChyX21jAq73UcG0ueH+tgoycvSHr8u-CJy9ORA@mail.gmail.com>
References: <B074B41A-963F-40E1-A2D8-870236E5D3CC@mcmaster.ca>
 <CABFfbXtzXg_jChyX21jAq73UcG0ueH+tgoycvSHr8u-CJy9ORA@mail.gmail.com>
Message-ID: <0C718739-15D6-4F04-9352-395873D27419@mcmaster.ca>

Dear Jeroen,

Thank you very much for doing this.

I understand from other (off-list) correspondence that there is an intention to remove Tktable from the macOS distribution of R when Tcl/Tk is updated there, and so a more permanent solution is probably to provide Tktable via an R package. I plan to pursue that possibility.

Best,
 John

> On May 4, 2020, at 3:01 AM, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> 
> On Sun, May 3, 2020 at 6:15 PM Fox, John <jfox at mcmaster.ca> wrote:
>> 
>> Dear R-devel list members,
>> 
>> The Tktable package for Tcl/Tk is apparently missing from the Windows distribution of R 4.0.0. I (actually a user of the Rcmdr package) discovered this when trying to use the new-data-set dialog in the Rcmdr package, producing the error, "Tcl package 'Tktable' must be installed first."
>> 
>> I believe the Tktable has been part of the R distribution for Windows since R version 2.9.0, and is still present in the macOS distribution of R 4.0.0.
>> 
>> I apologize for not discovering this problem prior to the release of R 4.0.0. I did test the Rcmdr package under R 4.0.0 on both Windows and macOS, but not every menu item and dialog on each platform.
>> 
>> Does anyone have more information about this problem?
> 
> Sorry this was my mistake. I somehow missed tktable when updating the
> tcltk bundle for rtools40. This didn't show up in any package check
> either.
> 
> I've added it back now, it should work again in today's builds r-devel
> and r-patched. Thanks for catching this.
> 
> Jeroen


From t@|@nepr@@@ @end|ng |rom gm@||@com  Mon May  4 16:25:09 2020
From: t@|@nepr@@@ @end|ng |rom gm@||@com (Taiane S. Prass)
Date: Mon, 4 May 2020 11:25:09 -0300
Subject: [Rd] Error in message printed by lbfgsb
Message-ID: <CANDZg5qQVHE16=3FEgeGu2aSViPp+0_CaBaGkXyq4yJHvCgL4A@mail.gmail.com>

Hi

I have a FORTRAN version of the L-BFGS-B algorithm and I was comparing it
to the code in the lbfgsb.c file available at R-4.0.0.tar.gz

Everithing looks the same, except for those two lines that must be printed
by the prn3lb function in case of an error (lines 3559 and 3561 in
lbfgsb.c):

case -5: Rprintf("l(%d) > u(%d).  No feasible solution", k, k); break;

case -7: Rprintf("Warning:  more than 10 function and gradient
evaluations\n   in the last line search\n"); break;

I believe that these two lines are interchanged, as lines 835 to 837 say

if (iback >= 10) info = -5;
/*     i.e., to issue a warning if iback>10 in the line search. */
goto L999;

while lines 1784 and 1785 say

strcpy(task, "ERROR: NO FEASIBLE SOLUTION");
*info = -7;


Best regards,


*Profa. Dra. Taiane Schaedler PrassDepartamento de Estat?stica - Instituto
de Matem?tica e Estat?stica*

*Programa de P?s-Gradua??o em Estat?stica (PPGEst)*
*Universidade Federal do Rio Grande do Sul*
Av. Bento Gon?alves, 9500, Porto Alegre - RS - BRASIL - CEP: 91509-900
*https://www.ufrgs.br/ime/ <https://www.ufrgs.br/ime/>*
www.professor.ufrgs.br/tsprass

*"In order to seek truth, it is necessary once in the course of our life,
to doubt, as far as possible, of all things*
*"  Ren? Descartes (1596-1650)*

	[[alternative HTML version deleted]]


From t@|@nepr@@@ @end|ng |rom gm@||@com  Mon May  4 21:26:39 2020
From: t@|@nepr@@@ @end|ng |rom gm@||@com (Taiane S. Prass)
Date: Mon, 4 May 2020 16:26:39 -0300
Subject: [Rd] error in message printed by L-BFGS-B
Message-ID: <CANDZg5rZopSGrgOdierZMk9MLRnm4mR9p120nqvNH0ndcH8dkQ@mail.gmail.com>

Hi

I have a FORTRAN version of the L-BFGS-B algorithm and I was comparing it
to the code in the lbfgsb.c file available at R-4.0.0.tar.gz

Everithing looks the same, except for those two lines that must be printed
by the prn3lb function in case of an error (lines 3559 and 3561 in
lbfgsb.c):

case -5: Rprintf("l(%d) > u(%d).  No feasible solution", k, k); break;

case -7: Rprintf("Warning:  more than 10 function and gradient
evaluations\n   in the last line search\n"); break;

I believe that these two lines are interchanged, as lines 835 to 837 say

if (iback >= 10) info = -5;
/*     i.e., to issue a warning if iback>10 in the line search. */
goto L999;

while lines 1784 and 1785 say

strcpy(task, "ERROR: NO FEASIBLE SOLUTION");
*info = -7;


Best regards,


*Profa. Dra. Taiane Schaedler PrassDepartamento de Estat?stica - Instituto
de Matem?tica e Estat?stica*

*Programa de P?s-Gradua??o em Estat?stica (PPGEst)*
*Universidade Federal do Rio Grande do Sul*
Av. Bento Gon?alves, 9500, Porto Alegre - RS - BRASIL - CEP: 91509-900
*https://www.ufrgs.br/ime/ <https://www.ufrgs.br/ime/>*
www.professor.ufrgs.br/tsprass

*"In order to seek truth, it is necessary once in the course of our life,
to doubt, as far as possible, of all things*
*"  Ren? Descartes (1596-1650)*

	[[alternative HTML version deleted]]


From k|r||| @end|ng |rom @|t||nux@org  Tue May  5 09:54:22 2020
From: k|r||| @end|ng |rom @|t||nux@org (Kirill Maslinsky)
Date: Tue, 05 May 2020 10:54:22 +0300
Subject: [Rd] 
 [External] Re: R 4.0.0 build error with sysdata.rda on ppc64el
 architecture
In-Reply-To: <24234.57996.340969.97974@rob.eddelbuettel.com>
References: <24232.47486.618901.868945@rob.eddelbuettel.com>
 <7D148040-DA12-4405-8D11-7E9B3868913D@gmail.com>
 <24234.8339.103881.186264@rob.eddelbuettel.com>
 <CALEXWq2x-ywdQeJRApN_77cnGF1su1fWVZt6vC=FwFgf0VBJiA@mail.gmail.com>
 <24234.53535.647635.838791@rob.eddelbuettel.com>
 <alpine.DEB.2.21.2004300910220.3189@luke-Latitude-7480>
 <24234.57996.340969.97974@rob.eddelbuettel.com>
Message-ID: <m31rnyakb5.fsf@gmail.com>


Dirk Eddelbuettel writes:

> We know by now (thanks to Bryan and Tomas) that src/main/machar.c is the real
> culprit due to the long double behaviour on ppc64el.  I presume 'compiler'
> calls into platform.c and hence machar.c for calibration or setup.
>
> On the Debian side, I just shipped an updated source package which will skip
> long double support on this platform.  That should allow builds to complete,
> hopefully, so that we can look into get the build from 'experimental' into
> 'unstable' and the distro proper.

I had the similar issue on ppc64le when trying to package R 4.0.0 for ALT
Linux Sisyphus. Disabling long double support indeed fixes the build of
the binaries, but then the build fails in the tests section (make check)
with violated assertions in some basic tests results.

Do you also have this problem, and is there a better solution to this
issue on ppc64le yet?

--
KM


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue May  5 14:46:52 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 5 May 2020 14:46:52 +0200
Subject: [Rd] error in message printed by L-BFGS-B
In-Reply-To: <CANDZg5rZopSGrgOdierZMk9MLRnm4mR9p120nqvNH0ndcH8dkQ@mail.gmail.com>
References: <CANDZg5rZopSGrgOdierZMk9MLRnm4mR9p120nqvNH0ndcH8dkQ@mail.gmail.com>
Message-ID: <d1d7b63e-568a-09d9-dc6b-051f4b3373b2@gmail.com>

Thanks for the report, fixed in R-devel.
Tomas

On 5/4/20 9:26 PM, Taiane S. Prass wrote:
> Hi
>
> I have a FORTRAN version of the L-BFGS-B algorithm and I was comparing it
> to the code in the lbfgsb.c file available at R-4.0.0.tar.gz
>
> Everithing looks the same, except for those two lines that must be printed
> by the prn3lb function in case of an error (lines 3559 and 3561 in
> lbfgsb.c):
>
> case -5: Rprintf("l(%d) > u(%d).  No feasible solution", k, k); break;
>
> case -7: Rprintf("Warning:  more than 10 function and gradient
> evaluations\n   in the last line search\n"); break;
>
> I believe that these two lines are interchanged, as lines 835 to 837 say
>
> if (iback >= 10) info = -5;
> /*     i.e., to issue a warning if iback>10 in the line search. */
> goto L999;
>
> while lines 1784 and 1785 say
>
> strcpy(task, "ERROR: NO FEASIBLE SOLUTION");
> *info = -7;
>
>
> Best regards,
>
>
> *Profa. Dra. Taiane Schaedler PrassDepartamento de Estat?stica - Instituto
> de Matem?tica e Estat?stica*
>
> *Programa de P?s-Gradua??o em Estat?stica (PPGEst)*
> *Universidade Federal do Rio Grande do Sul*
> Av. Bento Gon?alves, 9500, Porto Alegre - RS - BRASIL - CEP: 91509-900
> *https://www.ufrgs.br/ime/ <https://www.ufrgs.br/ime/>*
> www.professor.ufrgs.br/tsprass
>
> *"In order to seek truth, it is necessary once in the course of our life,
> to doubt, as far as possible, of all things*
> *"  Ren? Descartes (1596-1650)*
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Tue May  5 15:11:35 2020
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Tue, 5 May 2020 13:11:35 +0000
Subject: [Rd] Use of MathJax (or something similar) in .Rd files
In-Reply-To: <98017b68d8874f44bef58880a02ac5bb@jhu.edu>
References: <8021fa8f9ad046ea9478ffaa4d604cb1@UM-MAIL3214.unimaas.nl>
 <CABtg=Km8CKTAJbp3H3aR7QfOPhg3u57sq6UxFzjbUE2PGmsv9Q@mail.gmail.com>
 <9eed70bdcdd54198992940818b963139@UM-MAIL3214.unimaas.nl>
 <2433a78d-0209-cbc2-71c0-6e4feb590293@gmail.com>,
 <ccfcbcdad94a43cbbc3ef4f4cbacaf3c@UM-MAIL3214.unimaas.nl>
 <98017b68d8874f44bef58880a02ac5bb@jhu.edu>
Message-ID: <65475fc6dc214df7a48151a5b6388cbb@UM-MAIL3214.unimaas.nl>

Hi All,

After some tinkering, and with support from Duncan, I put together a package that allows for easy inclusion of MathJax equations in Rd files. The package has been submitted to CRAN, but those who want to try this out already can get it here:

https://github.com/wviechtb/mathjaxr

or in other words:

install.packages("remotes")
remotes::install_github("wviechtb/mathjaxr")

Package authors can then use the \loadmathjax macro to enable its use and the \mjeqn{latex}{ascii} and \mjdeqn{latex}{ascii} macros for including inline and displayed equations.

Feedback and suggestions more than welcome!

Best,
Wolfgang

>-----Original Message-----
>From: Ravi Varadhan [mailto:ravi.varadhan at jhu.edu]
>Sent: Thursday, 30 April, 2020 15:58
>To: Viechtbauer, Wolfgang (SP); r-devel
>Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>
>Thank you.? This is a very useful idea!
>
>Best,
>Ravi
>________________________________________
>From: R-devel <r-devel-bounces at r-project.org> on behalf of Viechtbauer,
>Wolfgang (SP) <wolfgang.viechtbauer at maastrichtuniversity.nl>
>Sent: Thursday, April 30, 2020 6:59:02 AM
>To: r-devel
>Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>
>Thanks Gabor and Duncan! It works. For those interested, I added this to the
>beginning of the \details{} section:
>
>\if{html}{\out{
><script id="MathJax-script" async
>?? src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
></script>
>}}
>
>And then I can use:
>
>\if{html}{\out{\(B_{x(a,b)} = \int_0^x t^{a-1} (1-t)^{b-1} dt\)}}
>
>or
>
>\if{html}{\out{\[B_{x(a,b)} = \int_0^x t^{a-1} (1-t)^{b-1} dt\]}}
>
>to render the equation (inline or as 'displaymath'). I'll try to add MathJax
>locally next.
>
>Best,
>Wolfgang
>
>>-----Original Message-----
>>From: Duncan Murdoch [mailto:murdoch.duncan at gmail.com]
>>Sent: Thursday, 30 April, 2020 12:22
>>To: Viechtbauer, Wolfgang (SP); r-devel
>>Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>
>>On 30/04/2020 6:15 a.m., Viechtbauer, Wolfgang (SP) wrote:
>>> Interesting. I gave this a try, but couldn't make this work. One would
>>have to infuse something like
>>>
>>> <script id="MathJax-script" async
>>>??? src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
>>> </script>
>>>
>>> or
>>>
>>> <script id="MathJax-script" async
>>>??? src="<url-to-your-site>/mathjax/tex-chtml.js">
>>> </script>
>>>
>>> into the .html file, but just adding this to the .Rd file (directly or
>>wrapped with \if{html}{}) doesn't do that (it just gets printed). If
>>somebody has already successfully done this, I would be interested in
>>hearing how.
>>
>>You'd need to wrap that code in \out (inside the conditional, i.e.
>>something like
>>
>>\if{html}{\out{<script id="MathJax-script" async
>>src="<url-to-your-site>/mathjax/tex-chtml.js"></script>}}
>>
>>Duncan Murdoch
>>
>>>
>>> Best,
>>> Wolfgang
>>>
>>>> -----Original Message-----
>>>> From: G?bor Cs?rdi [mailto:csardi.gabor at gmail.com]
>>>> Sent: Thursday, 30 April, 2020 11:51
>>>> To: Viechtbauer, Wolfgang (SP)
>>>> Cc: r-devel
>>>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>>>
>>>> You can probably already do this using the \if{html} conditional, and
>>>> either including the matchjax js files in the package, or getting them
>>>>from a CDN.
>>>>
>>>> Gabor
>>>>
>>>> On Thu, Apr 30, 2020 at 9:13 AM Viechtbauer, Wolfgang (SP)
>>>> <wolfgang.viechtbauer at maastrichtuniversity.nl> wrote:
>>>>>
>>>>> Hello All,
>>>>>
>>>>> I am wondering if there has ever been any discussion/consideration
>given
>>>> to incorporating MathJax (or something similar) into R for rendering
>>>> equations in .Rd files. I know that equations are rendered beautifully
>in
>>>> the pdf manuals, but I suspect the majority of users primarily look at
>>the
>>>> html help files when using R. While I am comfortable reading something
>>like
>>>> "B_x(a,b) = integral_0^x t^(a-1) (1-t)^(b-1) dt", it would definitely be
>>>> nicer if this was shown as a 'proper' equation.
>>>>>
>>>>> Best,
>>>>> Wolfgang


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue May  5 15:37:30 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 5 May 2020 09:37:30 -0400
Subject: [Rd] Use of MathJax (or something similar) in .Rd files
In-Reply-To: <65475fc6dc214df7a48151a5b6388cbb@UM-MAIL3214.unimaas.nl>
References: <8021fa8f9ad046ea9478ffaa4d604cb1@UM-MAIL3214.unimaas.nl>
 <CABtg=Km8CKTAJbp3H3aR7QfOPhg3u57sq6UxFzjbUE2PGmsv9Q@mail.gmail.com>
 <9eed70bdcdd54198992940818b963139@UM-MAIL3214.unimaas.nl>
 <2433a78d-0209-cbc2-71c0-6e4feb590293@gmail.com>
 <ccfcbcdad94a43cbbc3ef4f4cbacaf3c@UM-MAIL3214.unimaas.nl>
 <98017b68d8874f44bef58880a02ac5bb@jhu.edu>
 <65475fc6dc214df7a48151a5b6388cbb@UM-MAIL3214.unimaas.nl>
Message-ID: <8ce10555-68da-1a4a-4869-9d79fd79f76e@gmail.com>

The package is really nice, I recommend it.  Package writers should 
install it, but users of their help pages don't need it unless they're 
working offline.  Even then, because of the way MathJax works, they get 
something that's fairly readable, e.g.

"The probability density function of a normal distribution is given by 
\[f(x) = \frac{1}{\sqrt{2\pi} \sigma} 
e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^2},\] where \(\mu\) 
denotes the mean of the distribution and \(\sigma\) its standard deviation."

For a user who is online, or who has the mathjaxr package installed, 
this would be displayed with the equation as a display equation, and mu 
and sigma displayed properly inline.  To obtain that output I used this 
input in an Rd file:

"The probability density function of a normal distribution is given by 
\mjdeqn{f(x) = \frac{1}{\sqrt{2\pi} \sigma} 
e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^2},}{f(x) = 1/(sqrt(2 
pi) sigma) e^-((x - mu)^2/(2 sigma^2)),} where \mjeqn{\mu}{mu} denotes 
the mean of the distribution and \mjeqn{\sigma}{sigma} its standard 
deviation."

A frill that might be possible to add would be a test for a remote 
connection, and a fallback to the ascii display if it's not there.  It 
already has a display-time test for the presence of the MathJax files 
locally.

Maybe once all the kinks are worked out this could be incorporated into 
the R distribution.  However, it's not really needed there, since it 
works so well as a contributed package already.

Duncan Murdoch


On 05/05/2020 9:11 a.m., Viechtbauer, Wolfgang (SP) wrote:
> Hi All,
> 
> After some tinkering, and with support from Duncan, I put together a package that allows for easy inclusion of MathJax equations in Rd files. The package has been submitted to CRAN, but those who want to try this out already can get it here:
> 
> https://github.com/wviechtb/mathjaxr
> 
> or in other words:
> 
> install.packages("remotes")
> remotes::install_github("wviechtb/mathjaxr")
> 
> Package authors can then use the \loadmathjax macro to enable its use and the \mjeqn{latex}{ascii} and \mjdeqn{latex}{ascii} macros for including inline and displayed equations.
> 
> Feedback and suggestions more than welcome!
> 
> Best,
> Wolfgang
> 
>> -----Original Message-----
>> From: Ravi Varadhan [mailto:ravi.varadhan at jhu.edu]
>> Sent: Thursday, 30 April, 2020 15:58
>> To: Viechtbauer, Wolfgang (SP); r-devel
>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>
>> Thank you.? This is a very useful idea!
>>
>> Best,
>> Ravi
>> ________________________________________
>> From: R-devel <r-devel-bounces at r-project.org> on behalf of Viechtbauer,
>> Wolfgang (SP) <wolfgang.viechtbauer at maastrichtuniversity.nl>
>> Sent: Thursday, April 30, 2020 6:59:02 AM
>> To: r-devel
>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>
>> Thanks Gabor and Duncan! It works. For those interested, I added this to the
>> beginning of the \details{} section:
>>
>> \if{html}{\out{
>> <script id="MathJax-script" async
>>  ?? src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
>> </script>
>> }}
>>
>> And then I can use:
>>
>> \if{html}{\out{\(B_{x(a,b)} = \int_0^x t^{a-1} (1-t)^{b-1} dt\)}}
>>
>> or
>>
>> \if{html}{\out{\[B_{x(a,b)} = \int_0^x t^{a-1} (1-t)^{b-1} dt\]}}
>>
>> to render the equation (inline or as 'displaymath'). I'll try to add MathJax
>> locally next.
>>
>> Best,
>> Wolfgang
>>
>>> -----Original Message-----
>>> From: Duncan Murdoch [mailto:murdoch.duncan at gmail.com]
>>> Sent: Thursday, 30 April, 2020 12:22
>>> To: Viechtbauer, Wolfgang (SP); r-devel
>>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>>
>>> On 30/04/2020 6:15 a.m., Viechtbauer, Wolfgang (SP) wrote:
>>>> Interesting. I gave this a try, but couldn't make this work. One would
>>> have to infuse something like
>>>>
>>>> <script id="MathJax-script" async
>>>>  ??? src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
>>>> </script>
>>>>
>>>> or
>>>>
>>>> <script id="MathJax-script" async
>>>>  ??? src="<url-to-your-site>/mathjax/tex-chtml.js">
>>>> </script>
>>>>
>>>> into the .html file, but just adding this to the .Rd file (directly or
>>> wrapped with \if{html}{}) doesn't do that (it just gets printed). If
>>> somebody has already successfully done this, I would be interested in
>>> hearing how.
>>>
>>> You'd need to wrap that code in \out (inside the conditional, i.e.
>>> something like
>>>
>>> \if{html}{\out{<script id="MathJax-script" async
>>> src="<url-to-your-site>/mathjax/tex-chtml.js"></script>}}
>>>
>>> Duncan Murdoch
>>>
>>>>
>>>> Best,
>>>> Wolfgang
>>>>
>>>>> -----Original Message-----
>>>>> From: G?bor Cs?rdi [mailto:csardi.gabor at gmail.com]
>>>>> Sent: Thursday, 30 April, 2020 11:51
>>>>> To: Viechtbauer, Wolfgang (SP)
>>>>> Cc: r-devel
>>>>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>>>>
>>>>> You can probably already do this using the \if{html} conditional, and
>>>>> either including the matchjax js files in the package, or getting them
>>>> >from a CDN.
>>>>>
>>>>> Gabor
>>>>>
>>>>> On Thu, Apr 30, 2020 at 9:13 AM Viechtbauer, Wolfgang (SP)
>>>>> <wolfgang.viechtbauer at maastrichtuniversity.nl> wrote:
>>>>>>
>>>>>> Hello All,
>>>>>>
>>>>>> I am wondering if there has ever been any discussion/consideration
>> given
>>>>> to incorporating MathJax (or something similar) into R for rendering
>>>>> equations in .Rd files. I know that equations are rendered beautifully
>> in
>>>>> the pdf manuals, but I suspect the majority of users primarily look at
>>> the
>>>>> html help files when using R. While I am comfortable reading something
>>> like
>>>>> "B_x(a,b) = integral_0^x t^(a-1) (1-t)^(b-1) dt", it would definitely be
>>>>> nicer if this was shown as a 'proper' equation.
>>>>>>
>>>>>> Best,
>>>>>> Wolfgang
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From irederik m@iii@g oii oib@@et  Wed May  6 19:09:19 2020
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Wed, 6 May 2020 10:09:19 -0700
Subject: [Rd] defining r audio connections
Message-ID: <20200506170919.GA34684@localhost>

Dear R Devel,

Since Linux moved away from using a file-system interface for audio, I think it is necessary to write special libraries to interface with audio hardware from various languages on Linux.

In R, it seems like the appropriate datatype for a `snd_pcm_t` handle pointing to an open ALSA source or sink would be a "connection". Connection types are already defined in R for "file", "url", "pipe", "fifo", "socketConnection", etc.

Is there a tutorial or an example package where a new type of connection is defined, so that I can see how to do this properly in a package?

I can see from the R source that, for example, `do_gzfile` is defined in `connections.c` and referenced in `names.c`. However, I thought I should ask here first in case there is a better place to start, than trying to copy this code.

I only want an object that I can use `readBin` and `writeBin` on, to read and write audio data using e.g. `snd_pcm_writei` which is part of the `alsa-lib` package.

Thank you very much,

Frederick


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed May  6 20:26:34 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 6 May 2020 14:26:34 -0400
Subject: [Rd] defining r audio connections
In-Reply-To: <20200506170919.GA34684@localhost>
References: <20200506170919.GA34684@localhost>
Message-ID: <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>

On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
> Dear R Devel,
> 
> Since Linux moved away from using a file-system interface for audio, I think it is necessary to write special libraries to interface with audio hardware from various languages on Linux.
> 
> In R, it seems like the appropriate datatype for a `snd_pcm_t` handle pointing to an open ALSA source or sink would be a "connection". Connection types are already defined in R for "file", "url", "pipe", "fifo", "socketConnection", etc.
> 
> Is there a tutorial or an example package where a new type of connection is defined, so that I can see how to do this properly in a package?
> 
> I can see from the R source that, for example, `do_gzfile` is defined in `connections.c` and referenced in `names.c`. However, I thought I should ask here first in case there is a better place to start, than trying to copy this code.
> 
> I only want an object that I can use `readBin` and `writeBin` on, to read and write audio data using e.g. `snd_pcm_writei` which is part of the `alsa-lib` package.

I don't think R supports user-defined connections, but probably writing 
readBin and writeBin equivalents specific to your library wouldn't be 
any harder than creating a connection.  For those, you will probably 
want to work with an "external pointer" (see Writing R Extensions). 
Rcpp probably has support for these if you're working in C++.

Duncan Murdoch


From mtmorg@n@b|oc @end|ng |rom gm@||@com  Wed May  6 22:04:19 2020
From: mtmorg@n@b|oc @end|ng |rom gm@||@com (Martin Morgan)
Date: Wed, 6 May 2020 20:04:19 +0000
Subject: [Rd] defining r audio connections
In-Reply-To: <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
Message-ID: <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>

The public connection API is defined in

https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h

I'm not sure of a good pedagogic example; people who want to write their own connections usually want to do so for complicated reasons!

This is my own abandoned attempt https://github.com/mtmorgan/socketeer/blob/b0a1448191fe5f79a3f09d1f939e1e235a22cf11/src/connection.c#L169-L192 where connection_local_client() is called from R and _connection_local() creates and populates the appropriate structure. Probably I have done things totally wrong (e.g., by not checking the version of the API, as advised in the header file!)

Martin Morgan

?On 5/6/20, 2:26 PM, "R-devel on behalf of Duncan Murdoch" <r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com> wrote:

    On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
    > Dear R Devel,
    > 
    > Since Linux moved away from using a file-system interface for audio, I think it is necessary to write special libraries to interface with audio hardware from various languages on Linux.
    > 
    > In R, it seems like the appropriate datatype for a `snd_pcm_t` handle pointing to an open ALSA source or sink would be a "connection". Connection types are already defined in R for "file", "url", "pipe", "fifo", "socketConnection", etc.
    > 
    > Is there a tutorial or an example package where a new type of connection is defined, so that I can see how to do this properly in a package?
    > 
    > I can see from the R source that, for example, `do_gzfile` is defined in `connections.c` and referenced in `names.c`. However, I thought I should ask here first in case there is a better place to start, than trying to copy this code.
    > 
    > I only want an object that I can use `readBin` and `writeBin` on, to read and write audio data using e.g. `snd_pcm_writei` which is part of the `alsa-lib` package.

    I don't think R supports user-defined connections, but probably writing 
    readBin and writeBin equivalents specific to your library wouldn't be 
    any harder than creating a connection.  For those, you will probably 
    want to work with an "external pointer" (see Writing R Extensions). 
    Rcpp probably has support for these if you're working in C++.

    Duncan Murdoch

    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel

From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed May  6 22:11:46 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 6 May 2020 21:11:46 +0100
Subject: [Rd] defining r audio connections
In-Reply-To: <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
 <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
Message-ID: <CABtg=Kk+AeZ4TzUFZFD4t5f6RCcs2F0SXF_Cx1TCS2_FnxbYPQ@mail.gmail.com>

AFAIK that API is not allowed on CRAN. It triggers a NOTE or a
WARNING, and your package will not be published.

Gabor

On Wed, May 6, 2020 at 9:04 PM Martin Morgan <mtmorgan.bioc at gmail.com> wrote:
>
> The public connection API is defined in
>
> https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h
>
> I'm not sure of a good pedagogic example; people who want to write their own connections usually want to do so for complicated reasons!
>
> This is my own abandoned attempt https://github.com/mtmorgan/socketeer/blob/b0a1448191fe5f79a3f09d1f939e1e235a22cf11/src/connection.c#L169-L192 where connection_local_client() is called from R and _connection_local() creates and populates the appropriate structure. Probably I have done things totally wrong (e.g., by not checking the version of the API, as advised in the header file!)
>
> Martin Morgan
>
> ?On 5/6/20, 2:26 PM, "R-devel on behalf of Duncan Murdoch" <r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com> wrote:
>
>     On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
>     > Dear R Devel,
>     >
>     > Since Linux moved away from using a file-system interface for audio, I think it is necessary to write special libraries to interface with audio hardware from various languages on Linux.
>     >
>     > In R, it seems like the appropriate datatype for a `snd_pcm_t` handle pointing to an open ALSA source or sink would be a "connection". Connection types are already defined in R for "file", "url", "pipe", "fifo", "socketConnection", etc.
>     >
>     > Is there a tutorial or an example package where a new type of connection is defined, so that I can see how to do this properly in a package?
>     >
>     > I can see from the R source that, for example, `do_gzfile` is defined in `connections.c` and referenced in `names.c`. However, I thought I should ask here first in case there is a better place to start, than trying to copy this code.
>     >
>     > I only want an object that I can use `readBin` and `writeBin` on, to read and write audio data using e.g. `snd_pcm_writei` which is part of the `alsa-lib` package.
>
>     I don't think R supports user-defined connections, but probably writing
>     readBin and writeBin equivalents specific to your library wouldn't be
>     any harder than creating a connection.  For those, you will probably
>     want to work with an "external pointer" (see Writing R Extensions).
>     Rcpp probably has support for these if you're working in C++.
>
>     Duncan Murdoch
>
>     ______________________________________________
>     R-devel at r-project.org mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From mtmorg@n@b|oc @end|ng |rom gm@||@com  Thu May  7 01:26:15 2020
From: mtmorg@n@b|oc @end|ng |rom gm@||@com (Martin Morgan)
Date: Wed, 6 May 2020 23:26:15 +0000
Subject: [Rd] defining r audio connections
In-Reply-To: <CABtg=Kk+AeZ4TzUFZFD4t5f6RCcs2F0SXF_Cx1TCS2_FnxbYPQ@mail.gmail.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
 <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
 <CABtg=Kk+AeZ4TzUFZFD4t5f6RCcs2F0SXF_Cx1TCS2_FnxbYPQ@mail.gmail.com>
Message-ID: <BL0PR04MB6609075FFBD291823005B023F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>

yep, you're right, after some initial clean-up and running with or without --as-cran R CMD check gives a NOTE

  *  checking compiled code
  File ?socketeer/libs/socketeer.so?:
    Found non-API calls to R: ?R_GetConnection?,
       ?R_new_custom_connection?
   
  Compiled code should not call non-API entry points in R.
   
  See 'Writing portable packages' in the 'Writing R Extensions' manual.

Connections in general seem more useful than ad-hoc functions, though perhaps for Frederick's use case Duncan's suggestion is sufficient. For non-CRAN packages I personally would implement a connection.

(I mistakenly thought this was a more specialized mailing list; I wouldn't have posted to R-devel on this topic otherwise)

Martin Morgan

?On 5/6/20, 4:12 PM, "G?bor Cs?rdi" <csardi.gabor at gmail.com> wrote:

    AFAIK that API is not allowed on CRAN. It triggers a NOTE or a
    WARNING, and your package will not be published.

    Gabor

    On Wed, May 6, 2020 at 9:04 PM Martin Morgan <mtmorgan.bioc at gmail.com> wrote:
    >
    > The public connection API is defined in
    >
    > https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h
    >
    > I'm not sure of a good pedagogic example; people who want to write their own connections usually want to do so for complicated reasons!
    >
    > This is my own abandoned attempt https://github.com/mtmorgan/socketeer/blob/b0a1448191fe5f79a3f09d1f939e1e235a22cf11/src/connection.c#L169-L192 where connection_local_client() is called from R and _connection_local() creates and populates the appropriate structure. Probably I have done things totally wrong (e.g., by not checking the version of the API, as advised in the header file!)
    >
    > Martin Morgan
    >
    > ?On 5/6/20, 2:26 PM, "R-devel on behalf of Duncan Murdoch" <r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com> wrote:
    >
    >     On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
    >     > Dear R Devel,
    >     >
    >     > Since Linux moved away from using a file-system interface for audio, I think it is necessary to write special libraries to interface with audio hardware from various languages on Linux.
    >     >
    >     > In R, it seems like the appropriate datatype for a `snd_pcm_t` handle pointing to an open ALSA source or sink would be a "connection". Connection types are already defined in R for "file", "url", "pipe", "fifo", "socketConnection", etc.
    >     >
    >     > Is there a tutorial or an example package where a new type of connection is defined, so that I can see how to do this properly in a package?
    >     >
    >     > I can see from the R source that, for example, `do_gzfile` is defined in `connections.c` and referenced in `names.c`. However, I thought I should ask here first in case there is a better place to start, than trying to copy this code.
    >     >
    >     > I only want an object that I can use `readBin` and `writeBin` on, to read and write audio data using e.g. `snd_pcm_writei` which is part of the `alsa-lib` package.
    >
    >     I don't think R supports user-defined connections, but probably writing
    >     readBin and writeBin equivalents specific to your library wouldn't be
    >     any harder than creating a connection.  For those, you will probably
    >     want to work with an "external pointer" (see Writing R Extensions).
    >     Rcpp probably has support for these if you're working in C++.
    >
    >     Duncan Murdoch
    >
    >     ______________________________________________
    >     R-devel at r-project.org mailing list
    >     https://stat.ethz.ch/mailman/listinfo/r-devel
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel

From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu May  7 04:30:15 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 6 May 2020 19:30:15 -0700
Subject: [Rd] defining r audio connections
In-Reply-To: <BL0PR04MB6609075FFBD291823005B023F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
 <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
 <CABtg=Kk+AeZ4TzUFZFD4t5f6RCcs2F0SXF_Cx1TCS2_FnxbYPQ@mail.gmail.com>
 <BL0PR04MB6609075FFBD291823005B023F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
Message-ID: <CAFDcVCQbGvzovVaN_5TF=aFYxFWAr+=5x0dXw6jXYxRtswVNVw@mail.gmail.com>

What's the gist of the problem of making/having this part of the public
API? Is it security, is it stability, is it that the current API is under
construction, is it a worry about maintenance load for R Core, ...? Do we
know why?

It sounds like it's a feature that is  useful. I think we missed out on
some great enhancements in the past because of it not being part of the
public API.

/Henrik

On Wed, May 6, 2020, 16:26 Martin Morgan <mtmorgan.bioc at gmail.com> wrote:

> yep, you're right, after some initial clean-up and running with or without
> --as-cran R CMD check gives a NOTE
>
>   *  checking compiled code
>   File ?socketeer/libs/socketeer.so?:
>     Found non-API calls to R: ?R_GetConnection?,
>        ?R_new_custom_connection?
>
>   Compiled code should not call non-API entry points in R.
>
>   See 'Writing portable packages' in the 'Writing R Extensions' manual.
>
> Connections in general seem more useful than ad-hoc functions, though
> perhaps for Frederick's use case Duncan's suggestion is sufficient. For
> non-CRAN packages I personally would implement a connection.
>
> (I mistakenly thought this was a more specialized mailing list; I wouldn't
> have posted to R-devel on this topic otherwise)
>
> Martin Morgan
>
> ?On 5/6/20, 4:12 PM, "G?bor Cs?rdi" <csardi.gabor at gmail.com> wrote:
>
>     AFAIK that API is not allowed on CRAN. It triggers a NOTE or a
>     WARNING, and your package will not be published.
>
>     Gabor
>
>     On Wed, May 6, 2020 at 9:04 PM Martin Morgan <mtmorgan.bioc at gmail.com>
> wrote:
>     >
>     > The public connection API is defined in
>     >
>     >
> https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h
>     >
>     > I'm not sure of a good pedagogic example; people who want to write
> their own connections usually want to do so for complicated reasons!
>     >
>     > This is my own abandoned attempt
> https://github.com/mtmorgan/socketeer/blob/b0a1448191fe5f79a3f09d1f939e1e235a22cf11/src/connection.c#L169-L192
> where connection_local_client() is called from R and _connection_local()
> creates and populates the appropriate structure. Probably I have done
> things totally wrong (e.g., by not checking the version of the API, as
> advised in the header file!)
>     >
>     > Martin Morgan
>     >
>     > ?On 5/6/20, 2:26 PM, "R-devel on behalf of Duncan Murdoch" <
> r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com>
> wrote:
>     >
>     >     On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
>     >     > Dear R Devel,
>     >     >
>     >     > Since Linux moved away from using a file-system interface for
> audio, I think it is necessary to write special libraries to interface with
> audio hardware from various languages on Linux.
>     >     >
>     >     > In R, it seems like the appropriate datatype for a `snd_pcm_t`
> handle pointing to an open ALSA source or sink would be a "connection".
> Connection types are already defined in R for "file", "url", "pipe",
> "fifo", "socketConnection", etc.
>     >     >
>     >     > Is there a tutorial or an example package where a new type of
> connection is defined, so that I can see how to do this properly in a
> package?
>     >     >
>     >     > I can see from the R source that, for example, `do_gzfile` is
> defined in `connections.c` and referenced in `names.c`. However, I thought
> I should ask here first in case there is a better place to start, than
> trying to copy this code.
>     >     >
>     >     > I only want an object that I can use `readBin` and `writeBin`
> on, to read and write audio data using e.g. `snd_pcm_writei` which is part
> of the `alsa-lib` package.
>     >
>     >     I don't think R supports user-defined connections, but probably
> writing
>     >     readBin and writeBin equivalents specific to your library
> wouldn't be
>     >     any harder than creating a connection.  For those, you will
> probably
>     >     want to work with an "external pointer" (see Writing R
> Extensions).
>     >     Rcpp probably has support for these if you're working in C++.
>     >
>     >     Duncan Murdoch
>     >
>     >     ______________________________________________
>     >     R-devel at r-project.org mailing list
>     >     https://stat.ethz.ch/mailman/listinfo/r-devel
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From j@me@@|@he@ter @end|ng |rom gm@||@com  Thu May  7 15:02:57 2020
From: j@me@@|@he@ter @end|ng |rom gm@||@com (Jim Hester)
Date: Thu, 7 May 2020 09:02:57 -0400
Subject: [Rd] defining r audio connections
In-Reply-To: <CAFDcVCQbGvzovVaN_5TF=aFYxFWAr+=5x0dXw6jXYxRtswVNVw@mail.gmail.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
 <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
 <CABtg=Kk+AeZ4TzUFZFD4t5f6RCcs2F0SXF_Cx1TCS2_FnxbYPQ@mail.gmail.com>
 <BL0PR04MB6609075FFBD291823005B023F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
 <CAFDcVCQbGvzovVaN_5TF=aFYxFWAr+=5x0dXw6jXYxRtswVNVw@mail.gmail.com>
Message-ID: <CAD6tx94ab9--UdNsRAd2KVxL8P3bmBv-=AYi8+BsdM7f_Rf7_A@mail.gmail.com>

https://github.com/jimhester/archive was not allowed on CRAN when I
submitted it 3 years ago due to this restriction.

Being able to write custom connections is a useful feature for a number of
applications, I would love this policy to be reconsidered.

On Wed, May 6, 2020 at 10:30 PM Henrik Bengtsson <henrik.bengtsson at gmail.com>
wrote:

> What's the gist of the problem of making/having this part of the public
> API? Is it security, is it stability, is it that the current API is under
> construction, is it a worry about maintenance load for R Core, ...? Do we
> know why?
>
> It sounds like it's a feature that is  useful. I think we missed out on
> some great enhancements in the past because of it not being part of the
> public API.
>
> /Henrik
>
> On Wed, May 6, 2020, 16:26 Martin Morgan <mtmorgan.bioc at gmail.com> wrote:
>
> > yep, you're right, after some initial clean-up and running with or
> without
> > --as-cran R CMD check gives a NOTE
> >
> >   *  checking compiled code
> >   File ?socketeer/libs/socketeer.so?:
> >     Found non-API calls to R: ?R_GetConnection?,
> >        ?R_new_custom_connection?
> >
> >   Compiled code should not call non-API entry points in R.
> >
> >   See 'Writing portable packages' in the 'Writing R Extensions' manual.
> >
> > Connections in general seem more useful than ad-hoc functions, though
> > perhaps for Frederick's use case Duncan's suggestion is sufficient. For
> > non-CRAN packages I personally would implement a connection.
> >
> > (I mistakenly thought this was a more specialized mailing list; I
> wouldn't
> > have posted to R-devel on this topic otherwise)
> >
> > Martin Morgan
> >
> > ?On 5/6/20, 4:12 PM, "G?bor Cs?rdi" <csardi.gabor at gmail.com> wrote:
> >
> >     AFAIK that API is not allowed on CRAN. It triggers a NOTE or a
> >     WARNING, and your package will not be published.
> >
> >     Gabor
> >
> >     On Wed, May 6, 2020 at 9:04 PM Martin Morgan <
> mtmorgan.bioc at gmail.com>
> > wrote:
> >     >
> >     > The public connection API is defined in
> >     >
> >     >
> >
> https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h
> >     >
> >     > I'm not sure of a good pedagogic example; people who want to write
> > their own connections usually want to do so for complicated reasons!
> >     >
> >     > This is my own abandoned attempt
> >
> https://github.com/mtmorgan/socketeer/blob/b0a1448191fe5f79a3f09d1f939e1e235a22cf11/src/connection.c#L169-L192
> > where connection_local_client() is called from R and _connection_local()
> > creates and populates the appropriate structure. Probably I have done
> > things totally wrong (e.g., by not checking the version of the API, as
> > advised in the header file!)
> >     >
> >     > Martin Morgan
> >     >
> >     > ?On 5/6/20, 2:26 PM, "R-devel on behalf of Duncan Murdoch" <
> > r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com>
> > wrote:
> >     >
> >     >     On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
> >     >     > Dear R Devel,
> >     >     >
> >     >     > Since Linux moved away from using a file-system interface for
> > audio, I think it is necessary to write special libraries to interface
> with
> > audio hardware from various languages on Linux.
> >     >     >
> >     >     > In R, it seems like the appropriate datatype for a
> `snd_pcm_t`
> > handle pointing to an open ALSA source or sink would be a "connection".
> > Connection types are already defined in R for "file", "url", "pipe",
> > "fifo", "socketConnection", etc.
> >     >     >
> >     >     > Is there a tutorial or an example package where a new type of
> > connection is defined, so that I can see how to do this properly in a
> > package?
> >     >     >
> >     >     > I can see from the R source that, for example, `do_gzfile` is
> > defined in `connections.c` and referenced in `names.c`. However, I
> thought
> > I should ask here first in case there is a better place to start, than
> > trying to copy this code.
> >     >     >
> >     >     > I only want an object that I can use `readBin` and `writeBin`
> > on, to read and write audio data using e.g. `snd_pcm_writei` which is
> part
> > of the `alsa-lib` package.
> >     >
> >     >     I don't think R supports user-defined connections, but probably
> > writing
> >     >     readBin and writeBin equivalents specific to your library
> > wouldn't be
> >     >     any harder than creating a connection.  For those, you will
> > probably
> >     >     want to work with an "external pointer" (see Writing R
> > Extensions).
> >     >     Rcpp probably has support for these if you're working in C++.
> >     >
> >     >     Duncan Murdoch
> >     >
> >     >     ______________________________________________
> >     >     R-devel at r-project.org mailing list
> >     >     https://stat.ethz.ch/mailman/listinfo/r-devel
> >     > ______________________________________________
> >     > R-devel at r-project.org mailing list
> >     > https://stat.ethz.ch/mailman/listinfo/r-devel
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Fri May  8 00:02:13 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 8 May 2020 10:02:13 +1200
Subject: [Rd] defining r audio connections
In-Reply-To: <CAD6tx94ab9--UdNsRAd2KVxL8P3bmBv-=AYi8+BsdM7f_Rf7_A@mail.gmail.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
 <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
 <CABtg=Kk+AeZ4TzUFZFD4t5f6RCcs2F0SXF_Cx1TCS2_FnxbYPQ@mail.gmail.com>
 <BL0PR04MB6609075FFBD291823005B023F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
 <CAFDcVCQbGvzovVaN_5TF=aFYxFWAr+=5x0dXw6jXYxRtswVNVw@mail.gmail.com>
 <CAD6tx94ab9--UdNsRAd2KVxL8P3bmBv-=AYi8+BsdM7f_Rf7_A@mail.gmail.com>
Message-ID: <470F189B-3150-4F3E-94F6-9BC7091AF010@R-project.org>

The custom connections API was specifically introduced to allow packages to create custom connections back in 2013. Its sole purpose is to allow package authors to create new connections outside of base R, so I don't see why packages using it shouldn't be allowed on CRAN. However, it is solely at CRAN's discretion to decide what gets published, so it may be worth raising it with the team, ask for the reasons and what it would take for them to accept packages using that API.

Cheers,
Simon


> On 8/05/2020, at 1:02 AM, Jim Hester <james.f.hester at gmail.com> wrote:
> 
> https://github.com/jimhester/archive was not allowed on CRAN when I
> submitted it 3 years ago due to this restriction.
> 
> Being able to write custom connections is a useful feature for a number of
> applications, I would love this policy to be reconsidered.
> 
> On Wed, May 6, 2020 at 10:30 PM Henrik Bengtsson <henrik.bengtsson at gmail.com>
> wrote:
> 
>> What's the gist of the problem of making/having this part of the public
>> API? Is it security, is it stability, is it that the current API is under
>> construction, is it a worry about maintenance load for R Core, ...? Do we
>> know why?
>> 
>> It sounds like it's a feature that is  useful. I think we missed out on
>> some great enhancements in the past because of it not being part of the
>> public API.
>> 
>> /Henrik
>> 
>> On Wed, May 6, 2020, 16:26 Martin Morgan <mtmorgan.bioc at gmail.com> wrote:
>> 
>>> yep, you're right, after some initial clean-up and running with or
>> without
>>> --as-cran R CMD check gives a NOTE
>>> 
>>>  *  checking compiled code
>>>  File ?socketeer/libs/socketeer.so?:
>>>    Found non-API calls to R: ?R_GetConnection?,
>>>       ?R_new_custom_connection?
>>> 
>>>  Compiled code should not call non-API entry points in R.
>>> 
>>>  See 'Writing portable packages' in the 'Writing R Extensions' manual.
>>> 
>>> Connections in general seem more useful than ad-hoc functions, though
>>> perhaps for Frederick's use case Duncan's suggestion is sufficient. For
>>> non-CRAN packages I personally would implement a connection.
>>> 
>>> (I mistakenly thought this was a more specialized mailing list; I
>> wouldn't
>>> have posted to R-devel on this topic otherwise)
>>> 
>>> Martin Morgan
>>> 
>>> ?On 5/6/20, 4:12 PM, "G?bor Cs?rdi" <csardi.gabor at gmail.com> wrote:
>>> 
>>>    AFAIK that API is not allowed on CRAN. It triggers a NOTE or a
>>>    WARNING, and your package will not be published.
>>> 
>>>    Gabor
>>> 
>>>    On Wed, May 6, 2020 at 9:04 PM Martin Morgan <
>> mtmorgan.bioc at gmail.com>
>>> wrote:
>>>> 
>>>> The public connection API is defined in
>>>> 
>>>> 
>>> 
>> https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h
>>>> 
>>>> I'm not sure of a good pedagogic example; people who want to write
>>> their own connections usually want to do so for complicated reasons!
>>>> 
>>>> This is my own abandoned attempt
>>> 
>> https://github.com/mtmorgan/socketeer/blob/b0a1448191fe5f79a3f09d1f939e1e235a22cf11/src/connection.c#L169-L192
>>> where connection_local_client() is called from R and _connection_local()
>>> creates and populates the appropriate structure. Probably I have done
>>> things totally wrong (e.g., by not checking the version of the API, as
>>> advised in the header file!)
>>>> 
>>>> Martin Morgan
>>>> 
>>>> ?On 5/6/20, 2:26 PM, "R-devel on behalf of Duncan Murdoch" <
>>> r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com>
>>> wrote:
>>>> 
>>>>    On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
>>>>> Dear R Devel,
>>>>> 
>>>>> Since Linux moved away from using a file-system interface for
>>> audio, I think it is necessary to write special libraries to interface
>> with
>>> audio hardware from various languages on Linux.
>>>>> 
>>>>> In R, it seems like the appropriate datatype for a
>> `snd_pcm_t`
>>> handle pointing to an open ALSA source or sink would be a "connection".
>>> Connection types are already defined in R for "file", "url", "pipe",
>>> "fifo", "socketConnection", etc.
>>>>> 
>>>>> Is there a tutorial or an example package where a new type of
>>> connection is defined, so that I can see how to do this properly in a
>>> package?
>>>>> 
>>>>> I can see from the R source that, for example, `do_gzfile` is
>>> defined in `connections.c` and referenced in `names.c`. However, I
>> thought
>>> I should ask here first in case there is a better place to start, than
>>> trying to copy this code.
>>>>> 
>>>>> I only want an object that I can use `readBin` and `writeBin`
>>> on, to read and write audio data using e.g. `snd_pcm_writei` which is
>> part
>>> of the `alsa-lib` package.
>>>> 
>>>>    I don't think R supports user-defined connections, but probably
>>> writing
>>>>    readBin and writeBin equivalents specific to your library
>>> wouldn't be
>>>>    any harder than creating a connection.  For those, you will
>>> probably
>>>>    want to work with an "external pointer" (see Writing R
>>> Extensions).
>>>>    Rcpp probably has support for these if you're working in C++.
>>>> 
>>>>    Duncan Murdoch
>>>> 
>>>>    ______________________________________________
>>>>    R-devel at r-project.org mailing list
>>>>    https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>>        [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch  Fri May  8 23:01:39 2020
From: @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch (Sebastian Martin Krantz)
Date: Fri, 8 May 2020 23:01:39 +0200
Subject: [Rd] base::order making available retGrp and sortStr options for
 radix method?
Message-ID: <CAOsNuxAEmMASsknn3yPRV2z9T3dXLucUa1Dp9r=HxwKEVZhp9Q@mail.gmail.com>

Hi together,

a bit more than a month ago I have released the 'collapse' package for
advanced and fast data transformation in R with an array of fast grouped
and weighted functions and facilities for efficient grouped programming in
R.

As I am preparing the next update of this package I have come across the
following: For grouping, 'collapse' uses the function 'GRP', and efficient
wrapper around data.table:::forderv for fast radix sort based grouping. To
do this the source code for forderv was copied and deparallelized. Now I
realized that an earlier deparallelized version of forderv is already fully
available in base R:
https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/main/radixsort.c

This function is called in base::order(..., method = "radix"). I was mildly
aware that data.table ordering has made it into base R but I first thought
the grouping feature of forder had been removed. However in fact it is
there but disabled. base::order lines 31-35 reads:

  if (method == "radix") {
    decreasing <- rep_len(as.logical(decreasing), length(z))
    return(.Internal(radixsort(na.last, decreasing, FALSE,
      TRUE, ...)))
  }

which is essentially:     return(.Internal(radixsort(na.last, decreasing,
retGrp,
      sortStr, ...))) with the retGrp arguments which returns the group
starts and the maximum group size disabled. sortStr = FALSE can be used to
do unordered groupings.

My request is if it is possible to make available these features to the
user. It would make available extremely fast ordered grouping facilities to
all developers and prevent the need for people like myself to copy this
source code. In R it could be made available through a simple function like:

radixorder <- function(..., na.last = TRUE, decreasing = FALSE, retGrp =
FALSE,  sortStr = TRUE) {
  z <- list(...)
  decreasing <- rep_len(as.logical(decreasing), length(z))
  return(.Internal(radixsort(na.last, decreasing, retGRP,
                             otharg, ...)))
}

Alternatively a macro in the C API like R_orderVector i.e.
R_orderVectorRadix would be great.

Best regards,

Sebastian



<https://www.avast.com/sig-email?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=webmail>
Virenfrei.
www.avast.com
<https://www.avast.com/sig-email?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=webmail>
<#DAB4FAD8-2DD7-40BB-A1B8-4E2AA1F9FDF2>

	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Sun May 10 17:13:07 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Sun, 10 May 2020 15:13:07 +0000 (UTC)
Subject: [Rd] Minor Infelicity in Printing of Objects Nested in Lists
References: <952966889.973899.1589123587774.ref@mail.yahoo.com>
Message-ID: <952966889.973899.1589123587774@mail.yahoo.com>

Currently S3 objects nested in generic vectors cause the tag buffer to be reset.? This feels sub-optimal for those objects that don't have a print method:

> list(a=list(b='hello'))
$a
$a$b???????????????? ### <<<< notice "$a$b"
[1] "hello"


> list(a=structure(list(b='hello'), class='world'))
$a
$b?????????????????? ### <<<< notice "$b", not "$a$b"
[1] "hello"

attr(,"class")
[1] "world"

This happens because the default print method resets the tag buffer anytime it's called[1], whether by a custom print method, or by internal C code as part of the recursion into objects in `printValueRec`[2].

One possible way to "fix" this is to make it the responsibility of `printValueRec` to reset the tag buffer on exit from the top level, but that would mean always having an active context to catch errors instead of just for win32 as is the case now.? Additionally, print method authors may themselves intentionally rely on `print.default` for some parts their output, in which case it may be desirable to reset the tag buffer.

Obviously not a big deal.? In my use case it can make it difficult to identify what part of a complex object caused a difference in a diff with a few neighboring context lines.? Just mentioning it in case there is interest in doing something about it.? If so I'll be happy to create a bugzilla ticket and assist with patches/testing.

Best,

B.

[1]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/print.c#L309
[2]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/print.c#L570


From ||one| @end|ng |rom r@tud|o@com  Sun May 10 18:22:13 2020
From: ||one| @end|ng |rom r@tud|o@com (Lionel Henry)
Date: Sun, 10 May 2020 18:22:13 +0200
Subject: [Rd] Minor Infelicity in Printing of Objects Nested in Lists
In-Reply-To: <952966889.973899.1589123587774@mail.yahoo.com>
References: <952966889.973899.1589123587774.ref@mail.yahoo.com>
 <952966889.973899.1589123587774@mail.yahoo.com>
Message-ID: <CAJf4E3rYXEQyjaMx8eC=z8GcExsq+ANj_4yPGtd0+JAeON0fLA@mail.gmail.com>

Hello,

The main reason for resetting the tagbuf in `print.default()` and
other entry points to the print routine is that it is currently not
reset on exit. Creating a context to reset it on exit to its last
value might work. This should be done in the entry points rather than
in print-value-rec though, since callers of the latter might write to
the tagbuf.

Another solution to this problem is proposed with the first patch in
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17610. Maybe I
should extract this patch into its own entry so the discussion can be
separate from the other patches.

The idea is to pass the tag buffer as argument to the `print()`
generic so it can be passed again to `print.default()`. The added
benefit is that print methods can then pass their own tagbuf, which
should be useful for printing special list-like objects.

The downside is that it is technically a breaking change for methods
that pass their dots to other functions (there's a couple of
occurrences of this in the base packages). However I think such usage
is not recommended for print methods because `print()` is a recursive
generic that dispatches on heterogeneous objects. For example the user
might pass `digits = 2` to print a list of objects. The print methods
should make sure they ignore any unknown arguments.

Best,
Lionel

On 5/10/20, brodie gaslam via R-devel <r-devel at r-project.org> wrote:
> Currently S3 objects nested in generic vectors cause the tag buffer to be
> reset.? This feels sub-optimal for those objects that don't have a print
> method:
>
>> list(a=list(b='hello'))
> $a
> $a$b???????????????? ### <<<< notice "$a$b"
> [1] "hello"
>
>
>> list(a=structure(list(b='hello'), class='world'))
> $a
> $b?????????????????? ### <<<< notice "$b", not "$a$b"
> [1] "hello"
>
> attr(,"class")
> [1] "world"
>
> This happens because the default print method resets the tag buffer anytime
> it's called[1], whether by a custom print method, or by internal C code as
> part of the recursion into objects in `printValueRec`[2].
>
> One possible way to "fix" this is to make it the responsibility of
> `printValueRec` to reset the tag buffer on exit from the top level, but that
> would mean always having an active context to catch errors instead of just
> for win32 as is the case now.? Additionally, print method authors may
> themselves intentionally rely on `print.default` for some parts their
> output, in which case it may be desirable to reset the tag buffer.
>
> Obviously not a big deal.? In my use case it can make it difficult to
> identify what part of a complex object caused a difference in a diff with a
> few neighboring context lines.? Just mentioning it in case there is interest
> in doing something about it.? If so I'll be happy to create a bugzilla
> ticket and assist with patches/testing.
>
> Best,
>
> B.
>
> [1]:
> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/print.c#L309
> [2]:
> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/print.c#L570
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Sun May 10 20:46:48 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Sun, 10 May 2020 18:46:48 +0000 (UTC)
Subject: [Rd] Minor Infelicity in Printing of Objects Nested in Lists
In-Reply-To: <CAJf4E3rYXEQyjaMx8eC=z8GcExsq+ANj_4yPGtd0+JAeON0fLA@mail.gmail.com>
References: <952966889.973899.1589123587774.ref@mail.yahoo.com>
 <952966889.973899.1589123587774@mail.yahoo.com>
 <CAJf4E3rYXEQyjaMx8eC=z8GcExsq+ANj_4yPGtd0+JAeON0fLA@mail.gmail.com>
Message-ID: <9084527.1033395.1589136408991@mail.yahoo.com>

 > On Sunday, May 10, 2020, 12:24:17 PM EDT, Lionel Henry <lionel at rstudio.com> wrote:
>
> The main reason for resetting the tagbuf in `print.default()` and
> other entry points to the print routine is that it is currently not
> reset on exit. Creating a context to reset it on exit to its last
> value might work. This should be done in the entry points rather than
> in print-value-rec though, since callers of the latter might write to
> the tagbuf.
>
> Another solution to this problem is proposed with the first patch in
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17610. Maybe I
> should extract this patch into its own entry so the discussion can be
> separate from the other patches.

Ah, looks like the exact same issue, at least the first patch.? I'm not
 wed to any particular solution, but I am happy to help test/work on this
if there is interest in addressing this.

Best,

B.

>On 5/10/20, brodie gaslam via R-devel <r-devel at r-project.org> wrote:
>> Currently S3 objects nested in generic vectors cause the tag buffer to be
>> reset.? This feels sub-optimal for those objects that don't have a print
>> method:
>>
>>> list(a=list(b='hello'))
>> $a
>> $a$b???????????????? ### <<<< notice "$a$b"
>> [1] "hello"
>>
>>
>>> list(a=structure(list(b='hello'), class='world'))
>> $a
>> $b?????????????????? ### <<<< notice "$b", not "$a$b"
>> [1] "hello"
>>
>> attr(,"class")
>> [1] "world"


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Mon May 11 00:27:01 2020
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Sun, 10 May 2020 22:27:01 +0000
Subject: [Rd] justify hard coded in format.ftable
Message-ID: <8f85a69cd0474adfa6e77495c961fb2a@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>

Dear all,

justify argument is hard coded in format.ftable:

cbind(apply(LABS, 2L, format, justify = "left"),
      apply(DATA, 2L, format, justify = "right"))

It would be useful to have the possibility to modify the argument between c("left", "right", "centre", "none") as in format.default.

The lines could be changed to:

if(length(justify) != 2)
  stop("justify must be length 2")
cbind(apply(LABS, 2L, format, justify = justify[1]),
      apply(DATA, 2L, format, justify = justify[2]))

The argument justify could defaults to c("left", "right") for backward compatibility.

It could then allow:
ftab <- ftable(wool + tension ~ breaks, warpbreaks)
format.ftable(ftab, justify = c("none", "none"))

Best regards,

Thomas


From irederik m@iii@g oii oib@@et  Wed May  6 21:26:07 2020
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Wed, 6 May 2020 12:26:07 -0700
Subject: [Rd] defining r audio connections
In-Reply-To: <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
Message-ID: <20200506192607.GB34684-3160@localhost>


On Wed, May 06, 2020 at 02:26:34PM -0400, Duncan Murdoch wrote:
>On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
>>I only want an object that I can use `readBin` and `writeBin` on, to read and write audio data using e.g. `snd_pcm_writei` which is part of the `alsa-lib` package.
>
>I don't think R supports user-defined connections, but probably 
>writing readBin and writeBin equivalents specific to your library 
>wouldn't be any harder than creating a connection.  For those, you 
>will probably want to work with an "external pointer" (see Writing R 
>Extensions). Rcpp probably has support for these if you're working in 
>C++.

Thank you, yes I was following

https://stackoverflow.com/questions/59384221/proper-way-to-return-a-pointer-to-a-new-object-from-an-rcpp-function

which uses XPtr.

I'll forget about making a connection, if it is not supported.

I had this idea that I would be able to use the same code for writing to a file as to an audio device, but I can create my own class for that.

Frederick


From ru@@e|| @end|ng |rom r@|mond@net  Mon May 11 21:40:34 2020
From: ru@@e|| @end|ng |rom r@|mond@net (Russell Almond)
Date: Mon, 11 May 2020 15:40:34 -0400
Subject: [Rd] Segfault on read.socket with long message
Message-ID: <2f337cd2-a94b-e86a-c71d-6d8e4981eceb@ralmond.net>


I'm trying to implement a connection between two processes using a 
simple socket mechanism.  The messages are rather long object stored as 
JSON.

R is crashing with a segmentation fault when I try to read my test 
message (which is 5305 bytes long).  I first send the length in bytes 
and then I send the actual message.

Here is my R code:

library(jsonlite)
library(futile.logger)
listenerloop <- function (port) {
   flog.trace("Opening Socket on port %d",port)
   sock <- make.socket("localhost",port,server=TRUE)
   on.exit({
     close.socket(sock)
     flog.trace("Closing Socket on port %d",port)
     })
   repeat {
     ## Input a hunk of stuff up to a blank line.
     output <- character()
     repeat {
       inlen <- read.socket(sock,loop=TRUE)
       flog.trace("Got message of length %s",inlen)
       if (inlen=="quit") break
       inmess <- fromJSON(read.socket(sock,as.integer(inlen)),false)
       outmess <- doProcess(inmess)
       output <- toJSON(outmess)
       flog.trace("Sending message of length %s",nchar(output))
       write.socket(sock,paste(nchar(output),"\n"))
       write.socket(sock,output)
     }
   }
}

doProcess() is the payload, but it is not getting that far.  Instead I get:

 > listenerloop(12525)
TRACE [2020-05-11 15:21:00] Opening Socket on port 12525
TRACE [2020-05-11 15:21:03] Got message of length 5305
{"StudentRecord":null,"Message":{"_id":624,"app":"ecd://terc.edu/Zoombinis/","uid":2,"context":"PIZZA_PASS1","sender":"DataArcade","mess":"Last 
Transaction","timestamp":"1570279373.109","processed":false,"data":{"PP29_N_Rejects_Current_Z":0,"PP106_Avg

  *** caught segfault ***
address 0x7ffdf533d0a8, cause 'memory not mapped'

Traceback:
  1: read.socket(sock, as.integer(inlen))
  2: fromJSON(read.socket(sock, as.integer(inlen)), false)
  3: listenerloop(12525)

I have two questions:

1) Can somebody file a bug report on this?  I strongly suspect that 
there is an uncaught error in read.socket().  I'm happy to help, but I 
don't have access to bugzilla.

2) Anybody know how to read/write long messages to a socket in R?

Thanks in advance.
   --Russell Almond




-- 
Russell G. Almond
https://ralmond.net
almond at acm.org


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue May 12 11:30:02 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 12 May 2020 11:30:02 +0200
Subject: [Rd] Segfault on read.socket with long message
In-Reply-To: <2f337cd2-a94b-e86a-c71d-6d8e4981eceb@ralmond.net>
References: <2f337cd2-a94b-e86a-c71d-6d8e4981eceb@ralmond.net>
Message-ID: <99e31966-a838-3176-36e1-2d7391077017@gmail.com>

Thanks for the report, but it is unlikely anyone would be able to help 
just based on this code fragment. We need a small and minimal but 
complete reproducible example. That example should not use any 
contributed packages (a contributed package may be corrupting memory, 
which may cause R to crash).

It is easy to get a bugzilla account - please see 
https://www.r-project.org/bugs.html for more and for advice on how to 
write bug reports. You could even send the bug report to this list, but 
the key thing is the reproducible example.

Thanks
Tomas

On 5/11/20 9:40 PM, Russell Almond wrote:
>
> I'm trying to implement a connection between two processes using a 
> simple socket mechanism.? The messages are rather long object stored 
> as JSON.
>
> R is crashing with a segmentation fault when I try to read my test 
> message (which is 5305 bytes long).? I first send the length in bytes 
> and then I send the actual message.
>
> Here is my R code:
>
> library(jsonlite)
> library(futile.logger)
> listenerloop <- function (port) {
> ? flog.trace("Opening Socket on port %d",port)
> ? sock <- make.socket("localhost",port,server=TRUE)
> ? on.exit({
> ??? close.socket(sock)
> ??? flog.trace("Closing Socket on port %d",port)
> ??? })
> ? repeat {
> ??? ## Input a hunk of stuff up to a blank line.
> ??? output <- character()
> ??? repeat {
> ????? inlen <- read.socket(sock,loop=TRUE)
> ????? flog.trace("Got message of length %s",inlen)
> ????? if (inlen=="quit") break
> ????? inmess <- fromJSON(read.socket(sock,as.integer(inlen)),false)
> ????? outmess <- doProcess(inmess)
> ????? output <- toJSON(outmess)
> ????? flog.trace("Sending message of length %s",nchar(output))
> ????? write.socket(sock,paste(nchar(output),"\n"))
> ????? write.socket(sock,output)
> ??? }
> ? }
> }
>
> doProcess() is the payload, but it is not getting that far. Instead I 
> get:
>
> > listenerloop(12525)
> TRACE [2020-05-11 15:21:00] Opening Socket on port 12525
> TRACE [2020-05-11 15:21:03] Got message of length 5305
> {"StudentRecord":null,"Message":{"_id":624,"app":"ecd://terc.edu/Zoombinis/","uid":2,"context":"PIZZA_PASS1","sender":"DataArcade","mess":"Last 
> Transaction","timestamp":"1570279373.109","processed":false,"data":{"PP29_N_Rejects_Current_Z":0,"PP106_Avg 
>
>
> ?*** caught segfault ***
> address 0x7ffdf533d0a8, cause 'memory not mapped'
>
> Traceback:
> ?1: read.socket(sock, as.integer(inlen))
> ?2: fromJSON(read.socket(sock, as.integer(inlen)), false)
> ?3: listenerloop(12525)
>
> I have two questions:
>
> 1) Can somebody file a bug report on this?? I strongly suspect that 
> there is an uncaught error in read.socket().? I'm happy to help, but I 
> don't have access to bugzilla.
>
> 2) Anybody know how to read/write long messages to a socket in R?
>
> Thanks in advance.
> ? --Russell Almond
>
>
>
>


From ru@@e|| @end|ng |rom r@|mond@net  Tue May 12 17:25:00 2020
From: ru@@e|| @end|ng |rom r@|mond@net (Russell Almond)
Date: Tue, 12 May 2020 11:25:00 -0400
Subject: [Rd] Segfault on read.socket with long message
In-Reply-To: <99e31966-a838-3176-36e1-2d7391077017@gmail.com>
References: <2f337cd2-a94b-e86a-c71d-6d8e4981eceb@ralmond.net>
 <99e31966-a838-3176-36e1-2d7391077017@gmail.com>
Message-ID: <d0871d02-af00-4e8c-27bc-016afd44371e@ralmond.net>

Thanks for the link.? Somehow the information about how to join the 
bugzilla site was not available at bugzilla and buried in the CRAN web 
site instructions on reporting bugs (which pointed me at Bugzilla and 
not the page you showed me).

The example is pretty minimal.? I left the tracing statements 
(flog.trace()) and the toJSON, fromJSON in as I thought they might 
provide some context for another method of approaching my problem.

It looks like I'm getting better results using socketConnection() rather 
than read.socket(), so I'll pursue that solution (but still file a bug 
report, as it seg faults are never good).

 ??? --Russell


On 5/12/20 5:30 AM, Tomas Kalibera wrote:
> Thanks for the report, but it is unlikely anyone would be able to help 
> just based on this code fragment. We need a small and minimal but 
> complete reproducible example. That example should not use any 
> contributed packages (a contributed package may be corrupting memory, 
> which may cause R to crash).
>
> It is easy to get a bugzilla account - please see 
> https://www.r-project.org/bugs.html for more and for advice on how to 
> write bug reports. You could even send the bug report to this list, 
> but the key thing is the reproducible example.
>
> Thanks
> Tomas
>
> On 5/11/20 9:40 PM, Russell Almond wrote:
>>
>> I'm trying to implement a connection between two processes using a 
>> simple socket mechanism.? The messages are rather long object stored 
>> as JSON.
>>
>> R is crashing with a segmentation fault when I try to read my test 
>> message (which is 5305 bytes long).? I first send the length in bytes 
>> and then I send the actual message.
>>
>> Here is my R code:
>>
>> library(jsonlite)
>> library(futile.logger)
>> listenerloop <- function (port) {
>> ? flog.trace("Opening Socket on port %d",port)
>> ? sock <- make.socket("localhost",port,server=TRUE)
>> ? on.exit({
>> ??? close.socket(sock)
>> ??? flog.trace("Closing Socket on port %d",port)
>> ??? })
>> ? repeat {
>> ??? ## Input a hunk of stuff up to a blank line.
>> ??? output <- character()
>> ??? repeat {
>> ????? inlen <- read.socket(sock,loop=TRUE)
>> ????? flog.trace("Got message of length %s",inlen)
>> ????? if (inlen=="quit") break
>> ????? inmess <- fromJSON(read.socket(sock,as.integer(inlen)),false)
>> ????? outmess <- doProcess(inmess)
>> ????? output <- toJSON(outmess)
>> ????? flog.trace("Sending message of length %s",nchar(output))
>> ????? write.socket(sock,paste(nchar(output),"\n"))
>> ????? write.socket(sock,output)
>> ??? }
>> ? }
>> }
>>
>> doProcess() is the payload, but it is not getting that far. Instead I 
>> get:
>>
>> > listenerloop(12525)
>> TRACE [2020-05-11 15:21:00] Opening Socket on port 12525
>> TRACE [2020-05-11 15:21:03] Got message of length 5305
>> {"StudentRecord":null,"Message":{"_id":624,"app":"ecd://terc.edu/Zoombinis/","uid":2,"context":"PIZZA_PASS1","sender":"DataArcade","mess":"Last 
>> Transaction","timestamp":"1570279373.109","processed":false,"data":{"PP29_N_Rejects_Current_Z":0,"PP106_Avg 
>>
>>
>> ?*** caught segfault ***
>> address 0x7ffdf533d0a8, cause 'memory not mapped'
>>
>> Traceback:
>> ?1: read.socket(sock, as.integer(inlen))
>> ?2: fromJSON(read.socket(sock, as.integer(inlen)), false)
>> ?3: listenerloop(12525)
>>
>> I have two questions:
>>
>> 1) Can somebody file a bug report on this?? I strongly suspect that 
>> there is an uncaught error in read.socket().? I'm happy to help, but 
>> I don't have access to bugzilla.
>>
>> 2) Anybody know how to read/write long messages to a socket in R?
>>
>> Thanks in advance.
>> ? --Russell Almond
>>
>>
>>
>>
>
-- 
Russell G. Almond
https://ralmond.net
almond at acm.org


	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue May 12 17:41:46 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 12 May 2020 17:41:46 +0200
Subject: [Rd] Segfault on read.socket with long message
In-Reply-To: <d0871d02-af00-4e8c-27bc-016afd44371e@ralmond.net>
References: <2f337cd2-a94b-e86a-c71d-6d8e4981eceb@ralmond.net>
 <99e31966-a838-3176-36e1-2d7391077017@gmail.com>
 <d0871d02-af00-4e8c-27bc-016afd44371e@ralmond.net>
Message-ID: <7345c9ce-dd9d-a080-0b3a-b27f72764770@gmail.com>


On 5/12/20 5:25 PM, Russell Almond wrote:
>
> Thanks for the link.? Somehow the information about how to join the 
> bugzilla site was not available at bugzilla and buried in the CRAN web 
> site instructions on reporting bugs (which pointed me at Bugzilla and 
> not the page you showed me).
>
> The example is pretty minimal.? I left the tracing statements 
> (flog.trace()) and the toJSON, fromJSON in as I thought they might 
> provide some context for another method of approaching my problem.
>
> It looks like I'm getting better results using socketConnection() 
> rather than read.socket(), so I'll pursue that solution (but still 
> file a bug report, as it seg faults are never good).
>
Thanks, a report with that example would be useful - if using 
socketConnection() fixes the problem, I guess it makes it more likely 
that the bug is in R, but one never knows before the case is fully analyzed.

Tomas

> ??? --Russell
>
>
> On 5/12/20 5:30 AM, Tomas Kalibera wrote:
>> Thanks for the report, but it is unlikely anyone would be able to 
>> help just based on this code fragment. We need a small and minimal 
>> but complete reproducible example. That example should not use any 
>> contributed packages (a contributed package may be corrupting memory, 
>> which may cause R to crash).
>>
>> It is easy to get a bugzilla account - please see 
>> https://www.r-project.org/bugs.html for more and for advice on how to 
>> write bug reports. You could even send the bug report to this list, 
>> but the key thing is the reproducible example.
>>
>> Thanks
>> Tomas
>>
>> On 5/11/20 9:40 PM, Russell Almond wrote:
>>>
>>> I'm trying to implement a connection between two processes using a 
>>> simple socket mechanism.? The messages are rather long object stored 
>>> as JSON.
>>>
>>> R is crashing with a segmentation fault when I try to read my test 
>>> message (which is 5305 bytes long).? I first send the length in 
>>> bytes and then I send the actual message.
>>>
>>> Here is my R code:
>>>
>>> library(jsonlite)
>>> library(futile.logger)
>>> listenerloop <- function (port) {
>>> ? flog.trace("Opening Socket on port %d",port)
>>> ? sock <- make.socket("localhost",port,server=TRUE)
>>> ? on.exit({
>>> ??? close.socket(sock)
>>> ??? flog.trace("Closing Socket on port %d",port)
>>> ??? })
>>> ? repeat {
>>> ??? ## Input a hunk of stuff up to a blank line.
>>> ??? output <- character()
>>> ??? repeat {
>>> ????? inlen <- read.socket(sock,loop=TRUE)
>>> ????? flog.trace("Got message of length %s",inlen)
>>> ????? if (inlen=="quit") break
>>> ????? inmess <- fromJSON(read.socket(sock,as.integer(inlen)),false)
>>> ????? outmess <- doProcess(inmess)
>>> ????? output <- toJSON(outmess)
>>> ????? flog.trace("Sending message of length %s",nchar(output))
>>> ????? write.socket(sock,paste(nchar(output),"\n"))
>>> ????? write.socket(sock,output)
>>> ??? }
>>> ? }
>>> }
>>>
>>> doProcess() is the payload, but it is not getting that far. Instead 
>>> I get:
>>>
>>> > listenerloop(12525)
>>> TRACE [2020-05-11 15:21:00] Opening Socket on port 12525
>>> TRACE [2020-05-11 15:21:03] Got message of length 5305
>>> {"StudentRecord":null,"Message":{"_id":624,"app":"ecd://terc.edu/Zoombinis/","uid":2,"context":"PIZZA_PASS1","sender":"DataArcade","mess":"Last 
>>> Transaction","timestamp":"1570279373.109","processed":false,"data":{"PP29_N_Rejects_Current_Z":0,"PP106_Avg 
>>>
>>>
>>> ?*** caught segfault ***
>>> address 0x7ffdf533d0a8, cause 'memory not mapped'
>>>
>>> Traceback:
>>> ?1: read.socket(sock, as.integer(inlen))
>>> ?2: fromJSON(read.socket(sock, as.integer(inlen)), false)
>>> ?3: listenerloop(12525)
>>>
>>> I have two questions:
>>>
>>> 1) Can somebody file a bug report on this?? I strongly suspect that 
>>> there is an uncaught error in read.socket().? I'm happy to help, but 
>>> I don't have access to bugzilla.
>>>
>>> 2) Anybody know how to read/write long messages to a socket in R?
>>>
>>> Thanks in advance.
>>> ? --Russell Almond
>>>
>>>
>>>
>>>
>>
> -- 
> Russell G. Almond
> https://ralmond.net
> almond at acm.org



	[[alternative HTML version deleted]]


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Tue May 12 20:05:32 2020
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Tue, 12 May 2020 18:05:32 +0000
Subject: [Rd] S3 method dispatch for methods in local environments
Message-ID: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>

Dear All,

In R 3.6.3 (and earlier), method dispatch used to work for methods stored in local environments that are attached to the search path. For example:

myfun <- function(y) {
   out <- list(y=y)
   class(out) <- "myclass"
   return(out)
}

print.myclass <- function(x, ...) print(formatC(x$y, format="f", digits=5))

myfun(1:4)

# prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"

rm(print.myclass)
myenv <- new.env()
myenv$print.myclass <- local(function(x, ...) print(formatC(x$y, format="f", digits=5)), myenv)
attach(myenv)
myfun(1:4)

# still prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"

But since R 4.0.0, this no longer words and the above prints:

$y
[1] 1 2 3 4

attr(,"class")
[1] "myclass"

Is this intended? And is there a way to still make this work?

Best,
Wolfgang


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue May 12 21:05:15 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 12 May 2020 21:05:15 +0200
Subject: [Rd] S3 method dispatch for methods in local environments
In-Reply-To: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>
References: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>
Message-ID: <24250.62315.82219.364840@stat.math.ethz.ch>

>>>>> Viechtbauer, Wolfgang (SP) 
>>>>>     on Tue, 12 May 2020 18:05:32 +0000 writes:

    > Dear All,
    > In R 3.6.3 (and earlier), method dispatch used to work for methods stored in local environments that are attached to the search path. For example:

    > myfun <- function(y) {
    > out <- list(y=y)
    > class(out) <- "myclass"
    > return(out)
    > }

    > print.myclass <- function(x, ...) print(formatC(x$y, format="f", digits=5))

    > myfun(1:4)

    > # prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"

    > rm(print.myclass)
    > myenv <- new.env()
    > myenv$print.myclass <- local(function(x, ...) print(formatC(x$y, format="f", digits=5)), myenv)
    > attach(myenv)
    > myfun(1:4)

    > # still prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"

    > But since R 4.0.0, this no longer words and the above prints:

    > $y
    > [1] 1 2 3 4

    > attr(,"class")
    > [1] "myclass"

    > Is this intended? 

yes, most probably, unless

    > And is there a way to still make this work?

Using  the new

       .S3method(<generic>, <class>, <method_function>)

had been intended as substitute.  Can you try it with your
attached-environment (which makes sense!)  approach ?

Best,
Martin


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Tue May 12 21:13:01 2020
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Tue, 12 May 2020 19:13:01 +0000
Subject: [Rd] S3 method dispatch for methods in local environments
In-Reply-To: <24250.62315.82219.364840@stat.math.ethz.ch>
References: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>
 <24250.62315.82219.364840@stat.math.ethz.ch>
Message-ID: <e830a1384d1940acacc370178464e9ac@UM-MAIL3214.unimaas.nl>

Indeed, that works:

myfun <- function(y) {
   out <- list(y=y)
   class(out) <- "myclass"
   return(out)
}

myenv <- new.env()
myenv$print.myclass <- local(function(x, ...) print(formatC(x$y, format="f", digits=5)), new.env(myenv))
.S3method("print", "myclass", myenv$print.myclass)
attach(myenv)
myfun(1:4)

# [1] "1.00000" "2.00000" "3.00000" "4.00000"

Thanks for the tip!

Best,
Wolfgang

>-----Original Message-----
>From: Martin Maechler [mailto:maechler at stat.math.ethz.ch]
>Sent: Tuesday, 12 May, 2020 21:05
>To: Viechtbauer, Wolfgang (SP)
>Cc: r-devel (r-devel at r-project.org)
>Subject: Re: [Rd] S3 method dispatch for methods in local environments
>
>>>>>> Viechtbauer, Wolfgang (SP)
>>>>>>     on Tue, 12 May 2020 18:05:32 +0000 writes:
>
>    > Dear All,
>    > In R 3.6.3 (and earlier), method dispatch used to work for methods
>stored in local environments that are attached to the search path. For
>example:
>
>    > myfun <- function(y) {
>    > out <- list(y=y)
>    > class(out) <- "myclass"
>    > return(out)
>    > }
>
>    > print.myclass <- function(x, ...) print(formatC(x$y, format="f",
>digits=5))
>
>    > myfun(1:4)
>
>    > # prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"
>
>    > rm(print.myclass)
>    > myenv <- new.env()
>    > myenv$print.myclass <- local(function(x, ...) print(formatC(x$y,
>format="f", digits=5)), myenv)
>    > attach(myenv)
>    > myfun(1:4)
>
>    > # still prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"
>
>    > But since R 4.0.0, this no longer words and the above prints:
>
>    > $y
>    > [1] 1 2 3 4
>
>    > attr(,"class")
>    > [1] "myclass"
>
>    > Is this intended?
>
>yes, most probably, unless
>
>    > And is there a way to still make this work?
>
>Using  the new
>
>       .S3method(<generic>, <class>, <method_function>)
>
>had been intended as substitute.  Can you try it with your
>attached-environment (which makes sense!)  approach ?
>
>Best,
>Martin


From @eb@meyer @end|ng |rom |@u@de  Tue May 12 21:17:25 2020
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Tue, 12 May 2020 21:17:25 +0200
Subject: [Rd] S3 method dispatch for methods in local environments
In-Reply-To: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>
References: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>
Message-ID: <c03dbde7-9205-581b-da38-91553074aed2@fau.de>

Dear Wolfgang,

I think this new behaviour is related to the following R 4.0.0 NEWS item:

> S3 method lookup now by default skips the elements of the search path between the global and base environments. 

Your environment "myenv" is attached at position 2 of the search() path
and thus now skipped in S3 method lookup.

I have just noticed that

attr(methods(class="myclass"), "info")
getS3method("print", "myclass")

both still find your function in myenv although the generic's
UseMethod() won't. I find this a bit confusing.

A solution to make R >= 4.0.0 find your method is to register the S3
method using the new function .S3method (intended for R scripts, not
packages). After running

.S3method("print", "myclass", myenv$print.myclass)

your method will be found from the generic.

Best regards,

	Sebastian


Am 12.05.20 um 20:05 schrieb Viechtbauer, Wolfgang (SP):
> Dear All,
> 
> In R 3.6.3 (and earlier), method dispatch used to work for methods stored in local environments that are attached to the search path. For example:
> 
> myfun <- function(y) {
>    out <- list(y=y)
>    class(out) <- "myclass"
>    return(out)
> }
> 
> print.myclass <- function(x, ...) print(formatC(x$y, format="f", digits=5))
> 
> myfun(1:4)
> 
> # prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"
> 
> rm(print.myclass)
> myenv <- new.env()
> myenv$print.myclass <- local(function(x, ...) print(formatC(x$y, format="f", digits=5)), myenv)
> attach(myenv)
> myfun(1:4)
> 
> # still prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"
> 
> But since R 4.0.0, this no longer words and the above prints:
> 
> $y
> [1] 1 2 3 4
> 
> attr(,"class")
> [1] "myclass"
> 
> Is this intended? And is there a way to still make this work?
> 
> Best,
> Wolfgang
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Tue May 12 23:35:32 2020
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Tue, 12 May 2020 21:35:32 +0000
Subject: [Rd] S3 method dispatch for methods in local environments
In-Reply-To: <c03dbde7-9205-581b-da38-91553074aed2@fau.de>
References: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>
 <c03dbde7-9205-581b-da38-91553074aed2@fau.de>
Message-ID: <850765b92969497b867d2ac7f630394c@UM-MAIL3214.unimaas.nl>

Thanks, Sebastian, for the pointer to the NEWS item. After some further search, I also found this in the R Blog:

https://developer.r-project.org/Blog/public/2019/08/19/s3-method-lookup/

Best,
Wolfgang

>-----Original Message-----
>From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Sebastian
>Meyer
>Sent: Tuesday, 12 May, 2020 21:17
>To: r-devel at r-project.org
>Subject: Re: [Rd] S3 method dispatch for methods in local environments
>
>Dear Wolfgang,
>
>I think this new behaviour is related to the following R 4.0.0 NEWS item:
>
>> S3 method lookup now by default skips the elements of the search path
>between the global and base environments.
>
>Your environment "myenv" is attached at position 2 of the search() path
>and thus now skipped in S3 method lookup.
>
>I have just noticed that
>
>attr(methods(class="myclass"), "info")
>getS3method("print", "myclass")
>
>both still find your function in myenv although the generic's
>UseMethod() won't. I find this a bit confusing.
>
>A solution to make R >= 4.0.0 find your method is to register the S3
>method using the new function .S3method (intended for R scripts, not
>packages). After running
>
>.S3method("print", "myclass", myenv$print.myclass)
>
>your method will be found from the generic.
>
>Best regards,
>
>	Sebastian
>
>
>Am 12.05.20 um 20:05 schrieb Viechtbauer, Wolfgang (SP):
>> Dear All,
>>
>> In R 3.6.3 (and earlier), method dispatch used to work for methods stored
>in local environments that are attached to the search path. For example:
>>
>> myfun <- function(y) {
>>    out <- list(y=y)
>>    class(out) <- "myclass"
>>    return(out)
>> }
>>
>> print.myclass <- function(x, ...) print(formatC(x$y, format="f",
>digits=5))
>>
>> myfun(1:4)
>>
>> # prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"
>>
>> rm(print.myclass)
>> myenv <- new.env()
>> myenv$print.myclass <- local(function(x, ...) print(formatC(x$y,
>format="f", digits=5)), myenv)
>> attach(myenv)
>> myfun(1:4)
>>
>> # still prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"
>>
>> But since R 4.0.0, this no longer words and the above prints:
>>
>> $y
>> [1] 1 2 3 4
>>
>> attr(,"class")
>> [1] "myclass"
>>
>> Is this intended? And is there a way to still make this work?
>>
>> Best,
>> Wolfgang


From hp@ge@ @end|ng |rom |redhutch@org  Wed May 13 04:59:16 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Tue, 12 May 2020 19:59:16 -0700
Subject: [Rd] "cd" floating in the air in the man page for paste/paste0
Message-ID: <d95d3aa1-a50d-8a00-feff-d730f9ae842d@fredhutch.org>

Hi,

While reading about the new 'recycle0' argument of paste/paste0, I 
spotted a mysterious "cd" floating in the air in the man page:

   recycle0: ?logical? indicating if zero-length character arguments (and
             all zero-length or no arguments when ?collapse? is not
             ?NULL?) should lead to the zero-length ?character(0)?.
        cd
        ^^

This is in R 4.0.0 Patched and R devel.

Cheers,
H.


-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From edd @end|ng |rom deb|@n@org  Wed May 13 05:14:33 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 12 May 2020 22:14:33 -0500
Subject: [Rd] "cd" floating in the air in the man page for paste/paste0
In-Reply-To: <d95d3aa1-a50d-8a00-feff-d730f9ae842d@fredhutch.org>
References: <d95d3aa1-a50d-8a00-feff-d730f9ae842d@fredhutch.org>
Message-ID: <24251.26137.77277.492878@rob.eddelbuettel.com>


On 12 May 2020 at 19:59, Herv? Pag?s wrote:
| While reading about the new 'recycle0' argument of paste/paste0, I 
| spotted a mysterious "cd" floating in the air in the man page:
| 
|    recycle0: ?logical? indicating if zero-length character arguments (and
|              all zero-length or no arguments when ?collapse? is not
|              ?NULL?) should lead to the zero-length ?character(0)?.
|         cd
|         ^^
| 
| This is in R 4.0.0 Patched and R devel.

Also still in r-devel as of svn r78432:

  \item{recycle0}{\code{\link{logical}} indicating if zero-length
    character arguments (and all zero-length or no arguments when
    \code{collapse} is not \code{NULL}) should lead to the zero-length
    \code{\link{character}(0)}.}cd 
                                ^^

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From pd@|gd @end|ng |rom gm@||@com  Wed May 13 08:22:12 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 13 May 2020 08:22:12 +0200
Subject: [Rd] R 4.0.1
Message-ID: <0FF33D6D-7F75-4647-9232-02A694BC7DE7@gmail.com>

A quick heads-up: We intend to have a 4.0.1 release some time early June, possibly 6/6.

For the R Core Team
Peter D.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed May 13 08:29:23 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 13 May 2020 08:29:23 +0200
Subject: [Rd] "cd" floating in the air in the man page for paste/paste0
In-Reply-To: <24251.26137.77277.492878@rob.eddelbuettel.com>
References: <d95d3aa1-a50d-8a00-feff-d730f9ae842d@fredhutch.org>
 <24251.26137.77277.492878@rob.eddelbuettel.com>
Message-ID: <35956df2-f668-2d0e-255c-5a7d39967d44@gmail.com>

Thanks, fixed.
Tomas

On 5/13/20 5:14 AM, Dirk Eddelbuettel wrote:
> On 12 May 2020 at 19:59, Herv? Pag?s wrote:
> | While reading about the new 'recycle0' argument of paste/paste0, I
> | spotted a mysterious "cd" floating in the air in the man page:
> |
> |    recycle0: ?logical? indicating if zero-length character arguments (and
> |              all zero-length or no arguments when ?collapse? is not
> |              ?NULL?) should lead to the zero-length ?character(0)?.
> |         cd
> |         ^^
> |
> | This is in R 4.0.0 Patched and R devel.
>
> Also still in r-devel as of svn r78432:
>
>    \item{recycle0}{\code{\link{logical}} indicating if zero-length
>      character arguments (and all zero-length or no arguments when
>      \code{collapse} is not \code{NULL}) should lead to the zero-length
>      \code{\link{character}(0)}.}cd
>                                  ^^
>
> Dirk
>


From tdhock5 @end|ng |rom gm@||@com  Wed May 13 20:05:04 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 13 May 2020 11:05:04 -0700
Subject: [Rd] docs about _R_CHECK_FORCE_SUGGESTS_ ?
Message-ID: <CALK03d0Y9OAWPKg9hqT=-_p5OoB9YxQYnYJU5s_t7bP+o1Yy2g@mail.gmail.com>

Can someone please add documentation for that environment variable to
Writing R Extensions? An appropriate place would be section
https://cloud.r-project.org/doc/manuals/r-release/R-exts.html#Suggested-packages
which already discusses _R_CHECK_DEPENDS_ONLY_=true

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed May 13 20:06:49 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 13 May 2020 19:06:49 +0100
Subject: [Rd] docs about _R_CHECK_FORCE_SUGGESTS_ ?
In-Reply-To: <CALK03d0Y9OAWPKg9hqT=-_p5OoB9YxQYnYJU5s_t7bP+o1Yy2g@mail.gmail.com>
References: <CALK03d0Y9OAWPKg9hqT=-_p5OoB9YxQYnYJU5s_t7bP+o1Yy2g@mail.gmail.com>
Message-ID: <CABtg=KnNEweZcbD7SWiAx9DDD4OF7WDr3t8pFVa9w5LdwueatQ@mail.gmail.com>

See at https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Tools

Gabor

On Wed, May 13, 2020 at 7:05 PM Toby Hocking <tdhock5 at gmail.com> wrote:
>
> Can someone please add documentation for that environment variable to
> Writing R Extensions? An appropriate place would be section
> https://cloud.r-project.org/doc/manuals/r-release/R-exts.html#Suggested-packages
> which already discusses _R_CHECK_DEPENDS_ONLY_=true
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Wed May 13 21:55:53 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 13 May 2020 12:55:53 -0700
Subject: [Rd] docs about _R_CHECK_FORCE_SUGGESTS_ ?
In-Reply-To: <CABtg=KnNEweZcbD7SWiAx9DDD4OF7WDr3t8pFVa9w5LdwueatQ@mail.gmail.com>
References: <CALK03d0Y9OAWPKg9hqT=-_p5OoB9YxQYnYJU5s_t7bP+o1Yy2g@mail.gmail.com>
 <CABtg=KnNEweZcbD7SWiAx9DDD4OF7WDr3t8pFVa9w5LdwueatQ@mail.gmail.com>
Message-ID: <CAD4oTHF0z0Vik5YSFdRH_7zEksoP3YAJU_hM7gptoY=TmM7yWQ@mail.gmail.com>

Hi Toby,

As Gabor pointed out the place where the various levers R CMD check
supports is in the R-internals manual, but there is a link directly to that
section in
https://cloud.r-project.org/doc/manuals/r-release/R-exts.html#Checking-packages

It could perhaps be more prominent, perhaps by moving the paragraph that
appears in to before the detailed list of  exact tests that are performed?
I'm happy to put a patch for that together if there is a) interest, and b)
a patch is preferable to someone on R-core simply doing that migration
themselves.

I do also agree that given that _R_CHECK_DEPENDS_ONLY_ and
_R_CHECK_SUGGESTS_ONLY_
are mentioned in the section you link, it would perhaps make sense to
mention _R_CHECK_FORCE_SUGGESTS_ as well. I can put that in the patch as
well, if there is agreement from R-core that one or both of these changes
make sense.

Best,
~G

On Wed, May 13, 2020 at 11:07 AM G?bor Cs?rdi <csardi.gabor at gmail.com>
wrote:

> See at https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Tools
>
> Gabor
>
> On Wed, May 13, 2020 at 7:05 PM Toby Hocking <tdhock5 at gmail.com> wrote:
> >
> > Can someone please add documentation for that environment variable to
> > Writing R Extensions? An appropriate place would be section
> >
> https://cloud.r-project.org/doc/manuals/r-release/R-exts.html#Suggested-packages
> > which already discusses _R_CHECK_DEPENDS_ONLY_=true
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Wed May 13 22:27:15 2020
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Wed, 13 May 2020 20:27:15 +0000
Subject: [Rd] justify hard coded in format.ftable
Message-ID: <f391e1ccd3a84fe1885c9e644371707e@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>

Dear all,

I haven't received any feedback so far on my proposal to make "justify" argument available in stats:::format.ftable

Is this list the appropriate place for this kind of proposal?

I hope this follow-up to my message won't be taken as rude. Of course it's not meant to be, but I'm not used to the R mailing lists...

Thank you in advance for your comments,

Best,

Thomas

> Dear all,
>
> justify argument is hard coded in format.ftable:
>
> cbind(apply(LABS, 2L, format, justify = "left"),
>       apply(DATA, 2L, format, justify = "right"))
>
> It would be useful to have the possibility to modify the argument between c("left", "right", "centre", "none") as in format.default.
>
> The lines could be changed to:
>
> if(length(justify) != 2)
>   stop("justify must be length 2")
> cbind(apply(LABS, 2L, format, justify = justify[1]),
>       apply(DATA, 2L, format, justify = justify[2]))
>
> The argument justify could defaults to c("left", "right") for backward compatibility.
>
> It could then allow:
> ftab <- ftable(wool + tension ~ breaks, warpbreaks)
> format.ftable(ftab, justify = c("none", "none"))
>
> Best regards,
>
> Thomas


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu May 14 11:31:58 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 14 May 2020 11:31:58 +0200
Subject: [Rd] justify hard coded in format.ftable
In-Reply-To: <f391e1ccd3a84fe1885c9e644371707e@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>
References: <f391e1ccd3a84fe1885c9e644371707e@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>
Message-ID: <24253.4110.25144.189615@stat.math.ethz.ch>

>>>>> SOEIRO Thomas 
>>>>>     on Wed, 13 May 2020 20:27:15 +0000 writes:

    > Dear all,
    > I haven't received any feedback so far on my proposal to make "justify" argument available in stats:::format.ftable

    > Is this list the appropriate place for this kind of proposal?

Yes, it is.. Actually such a post is even a "role model" post
for R-devel.

    > I hope this follow-up to my message won't be taken as rude. Of course it's not meant to be, but I'm not used to the R mailing lists...

well, there could be said much, and many stories told here ... ;-)

    > Thank you in advance for your comments,

    > Best,
    > Thomas

The main reasons for "no reaction" (for such nice post) probably
are combination of the following

- we are busy
- if we have time, we think other things are more exciting
- we have not used ftable much/at all and are not interested.

Even though the first 2 apply to me, I'll have a 2nd look into
your post now, and may end up well agreeing with your proposal.

Martin Maechler
ETH Zurich  and  R Core team




    >> Dear all,
    >> 
    >> justify argument is hard coded in format.ftable:
    >> 
    >> cbind(apply(LABS, 2L, format, justify = "left"),
    >> apply(DATA, 2L, format, justify = "right"))
    >> 
    >> It would be useful to have the possibility to modify the argument between c("left", "right", "centre", "none") as in format.default.
    >> 
    >> The lines could be changed to:
    >> 
    >> if(length(justify) != 2)
    >> stop("justify must be length 2")
    >> cbind(apply(LABS, 2L, format, justify = justify[1]),
    >> apply(DATA, 2L, format, justify = justify[2]))
    >> 
    >> The argument justify could defaults to c("left", "right") for backward compatibility.
    >> 
    >> It could then allow:
    >> ftab <- ftable(wool + tension ~ breaks, warpbreaks)
    >> format.ftable(ftab, justify = c("none", "none"))
    >> 
    >> Best regards,
    >> 
    >> Thomas


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Thu May 14 15:20:56 2020
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Thu, 14 May 2020 13:20:56 +0000
Subject: [Rd] justify hard coded in format.ftable
In-Reply-To: <24253.4110.25144.189615@stat.math.ethz.ch>
References: <f391e1ccd3a84fe1885c9e644371707e@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>
 <24253.4110.25144.189615@stat.math.ethz.ch>
Message-ID: <a54ab8b4343e47b98001fc709d2fe5ac@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>

I suspected it was partly due to the fact that ftable doesn't get much interest/isn't much used...

So thank you very much for answering, and for your time!

>> Dear all,
>> I haven't received any feedback so far on my proposal to make "justify" argument available in stats:::format.ftable
>>
>> Is this list the appropriate place for this kind of proposal?
> 
> Yes, it is.. Actually such a post is even a "role model" post for R-devel.
> 
>> I hope this follow-up to my message won't be taken as rude. Of course it's not meant to be, but I'm not used to the R mailing lists...
> 
> well, there could be said much, and many stories told here ... ;-)
> 
>> Thank you in advance for your comments,
>> 
>> Best,
>> Thomas
> 
> The main reasons for "no reaction" (for such nice post) probably are combination of the following
> 
> - we are busy
> - if we have time, we think other things are more exciting
> - we have not used ftable much/at all and are not interested.
> 
> Even though the first 2 apply to me, I'll have a 2nd look into your post now, and may end up well agreeing with your proposal.
> 
> Martin Maechler
> ETH Zurich  and  R Core team
> 
>>> Dear all,
>>>
>>> justify argument is hard coded in format.ftable:
>>>
>>> cbind(apply(LABS, 2L, format, justify = "left"),
>>> apply(DATA, 2L, format, justify = "right"))
>>>
>>> It would be useful to have the possibility to modify the argument between c("left", "right", "centre", "none") as in format.default.
>>>
>>> The lines could be changed to:
>>>
>>> if(length(justify) != 2)
>>> stop("justify must be length 2")
>>> cbind(apply(LABS, 2L, format, justify = justify[1]),
>>> apply(DATA, 2L, format, justify = justify[2]))
>>>
>>> The argument justify could defaults to c("left", "right") for backward compatibility.
>>>
>>> It could then allow:
>>> ftab <- ftable(wool + tension ~ breaks, warpbreaks)
>>> format.ftable(ftab, justify = c("none", "none"))
>>>
>>> Best regards,
>>>
>>> Thomas

From j@goreck| @end|ng |rom w|t@edu@p|  Thu May 14 20:34:35 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Thu, 14 May 2020 19:34:35 +0100
Subject: [Rd] system(timeout=) may timeout with 0 exit code
Message-ID: <CAOO9MKUrVQrz_DAM8Ec7Y9uWib2Q1VOcDo1FYdfN5ZhKjMdt_g@mail.gmail.com>

Hi R developers,

I observed that system(timeout=) may still return exit code 0, when
killing the process due to timeout.

In src/unix/sys-unix.c there is

#define KILL_SIGNAL1 SIGINT
#define KILL_SIGNAL2 SIGTERM
#define KILL_SIGNAL3 SIGKILL
#define EMERGENCY_TIMEOUT 20

After little bit of debugging I observed that total time of system
call is provided timeout value + 20s. That means EMERGENCY_TIMEOUT 20
kicked in, adding 20 seconds.

I don't have a reproducible example, but following code, and output
file below should be enough to ensure that there is a problem there
(exit code 0 despite timeout).

warn = NULL
p = proc.time()[[3L]]
tryCatch(
  ret <- system(cmd, timeout=timeout_s),
  warning = function(w) {
    warn <<- w[["message"]]
  }
)
if (length(warn) && ret==0L)
  cat(sprintf("command '%s' timed out(?) but still exited with 0 code,
timeout %ss, took %ss, warning '%s'\n",
              cmd, timeout_s, proc.time()[[3L]]-p, warn),
file="timeout-exit-codes.out", append=TRUE)

And the content of timeout-exit-codes.out:

command '/bin/bash -c "./_launcher/solution.R > log.out 2> log.err"'
timed out(?) but still exited with 0 code, timeout 7200s, took
7220.005s, warning '/bin/bash -c "./_launcher/solution.R > log.out 2>
log.err"' timed out after 7200s'

Thank you,
Jan Gorecki


From hp@ge@ @end|ng |rom |redhutch@org  Fri May 15 00:43:18 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Thu, 14 May 2020 15:43:18 -0700
Subject: [Rd] "cd" floating in the air in the man page for paste/paste0
In-Reply-To: <35956df2-f668-2d0e-255c-5a7d39967d44@gmail.com>
References: <d95d3aa1-a50d-8a00-feff-d730f9ae842d@fredhutch.org>
 <24251.26137.77277.492878@rob.eddelbuettel.com>
 <35956df2-f668-2d0e-255c-5a7d39967d44@gmail.com>
Message-ID: <e86648f4-d931-09fa-23a7-906ee1de21b1@fredhutch.org>

Thanks for the fix.

H.


On 5/12/20 23:29, Tomas Kalibera wrote:
> Thanks, fixed.
> Tomas
> 
> On 5/13/20 5:14 AM, Dirk Eddelbuettel wrote:
>> On 12 May 2020 at 19:59, Herv? Pag?s wrote:
>> | While reading about the new 'recycle0' argument of paste/paste0, I
>> | spotted a mysterious "cd" floating in the air in the man page:
>> |
>> |??? recycle0: ?logical? indicating if zero-length character arguments 
>> (and
>> |????????????? all zero-length or no arguments when ?collapse? is not
>> |????????????? ?NULL?) should lead to the zero-length ?character(0)?.
>> |???????? cd
>> |???????? ^^
>> |
>> | This is in R 4.0.0 Patched and R devel.
>>
>> Also still in r-devel as of svn r78432:
>>
>> ?? \item{recycle0}{\code{\link{logical}} indicating if zero-length
>> ???? character arguments (and all zero-length or no arguments when
>> ???? \code{collapse} is not \code{NULL}) should lead to the zero-length
>> ???? \code{\link{character}(0)}.}cd
>> ???????????????????????????????? ^^
>>
>> Dirk
>>
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From wdun|@p @end|ng |rom t|bco@com  Fri May 15 03:50:37 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Thu, 14 May 2020 18:50:37 -0700
Subject: [Rd] edit() doubles backslashes when keep.source=TRUE
Message-ID: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>

Is it just my installation or does edit() (or fix(), etc.) in R-4.0.0
double all the backslashes when options(keep.source=TRUE)?  E.g.,

> options(keep.source=TRUE)
> f <- function(x) { cat("\t", x, "\n", sep="") }
> edit(f) # exit the editor without making any changes
The editor (vi or notepad) shows doubled backslashes
    function(x) { cat("\\t", x, "\\n", sep="") }
as does the return value of edit().

If I set options(keep.source=FALSE) before defining 'f' or remove t's
'srcref' attribute then the backslashes are left alone.

Bill Dunlap
TIBCO Software
wdunlap tibco.com

	[[alternative HTML version deleted]]


From @eb@meyer @end|ng |rom |@u@de  Fri May 15 10:47:55 2020
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Fri, 15 May 2020 10:47:55 +0200
Subject: [Rd] edit() doubles backslashes when keep.source=TRUE
In-Reply-To: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
References: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
Message-ID: <b599d955-9909-1fd9-773a-765b22b4a03f@fau.de>

I can confirm this changed behaviour. I just compared R-3.6.3 with
yesterday's R-devel. Using R-devel, the tempfile opened by the editor
(Emacs for me, but shouldn't matter) contains doubled backslashes.

This could be related to

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17800

Best regards,

	Sebastian


Am 15.05.20 um 03:50 schrieb William Dunlap via R-devel:
> Is it just my installation or does edit() (or fix(), etc.) in R-4.0.0
> double all the backslashes when options(keep.source=TRUE)?  E.g.,
> 
>> options(keep.source=TRUE)
>> f <- function(x) { cat("\t", x, "\n", sep="") }
>> edit(f) # exit the editor without making any changes
> The editor (vi or notepad) shows doubled backslashes
>     function(x) { cat("\\t", x, "\\n", sep="") }
> as does the return value of edit().
> 
> If I set options(keep.source=FALSE) before defining 'f' or remove t's
> 'srcref' attribute then the backslashes are left alone.
> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From ggrothend|eck @end|ng |rom gm@||@com  Thu May 14 12:56:06 2020
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Thu, 14 May 2020 06:56:06 -0400
Subject: [Rd] justify hard coded in format.ftable
In-Reply-To: <24253.4110.25144.189615@stat.math.ethz.ch>
References: <f391e1ccd3a84fe1885c9e644371707e@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>
 <24253.4110.25144.189615@stat.math.ethz.ch>
Message-ID: <CAP01uR=5-M85sX+iYTPezLiB-mQiJiX7W9+gnYJAZDMjt4g0rA-716@mail.gmail.com>


If you are looking at ftable could you also consider adding
a way to convert an ftable into a usable data.frame such as
the ftable2df function defined here:

https://stackoverflow.com/questions/11141406/reshaping-an-array-to-data-frame/11143126#11143126

and there is an example of using it here:

https://stackoverflow.com/questions/61333663/manipulating-an-array-into-a-data-frame-in-base-r/61334756#61334756

Being able to move back and forth between various base class representations
seems like something that would be natural to provide.

Thanks.

On Thu, May 14, 2020 at 5:32 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> SOEIRO Thomas
> >>>>>     on Wed, 13 May 2020 20:27:15 +0000 writes:
>
>     > Dear all,
>     > I haven't received any feedback so far on my proposal to make "justify" argument available in stats:::format.ftable
>
>     > Is this list the appropriate place for this kind of proposal?
>
> Yes, it is.. Actually such a post is even a "role model" post
> for R-devel.
>
>     > I hope this follow-up to my message won't be taken as rude. Of course it's not meant to be, but I'm not used to the R mailing lists...
>
> well, there could be said much, and many stories told here ... ;-)
>
>     > Thank you in advance for your comments,
>
>     > Best,
>     > Thomas
>
> The main reasons for "no reaction" (for such nice post) probably
> are combination of the following
>
> - we are busy
> - if we have time, we think other things are more exciting
> - we have not used ftable much/at all and are not interested.
>
> Even though the first 2 apply to me, I'll have a 2nd look into
> your post now, and may end up well agreeing with your proposal.
>
> Martin Maechler
> ETH Zurich  and  R Core team
>
>
>
>
>     >> Dear all,
>     >>
>     >> justify argument is hard coded in format.ftable:
>     >>
>     >> cbind(apply(LABS, 2L, format, justify = "left"),
>     >> apply(DATA, 2L, format, justify = "right"))
>     >>
>     >> It would be useful to have the possibility to modify the argument between c("left", "right", "centre", "none") as in format.default.
>     >>
>     >> The lines could be changed to:
>     >>
>     >> if(length(justify) != 2)
>     >> stop("justify must be length 2")
>     >> cbind(apply(LABS, 2L, format, justify = justify[1]),
>     >> apply(DATA, 2L, format, justify = justify[2]))
>     >>
>     >> The argument justify could defaults to c("left", "right") for backward compatibility.
>     >>
>     >> It could then allow:
>     >> ftab <- ftable(wool + tension ~ breaks, warpbreaks)
>     >> format.ftable(ftab, justify = c("none", "none"))
>     >>
>     >> Best regards,
>     >>
>     >> Thomas
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From ggrothend|eck @end|ng |rom gm@||@com  Thu May 14 17:49:44 2020
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Thu, 14 May 2020 11:49:44 -0400
Subject: [Rd] justify hard coded in format.ftable
In-Reply-To: <86c028e343924b67ae834706bb68a70e@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>
References: <f391e1ccd3a84fe1885c9e644371707e@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>
 <24253.4110.25144.189615@stat.math.ethz.ch>
 <CAP01uR=5-M85sX+iYTPezLiB-mQiJiX7W9+gnYJAZDMjt4g0rA@mail.gmail.com>
 <86c028e343924b67ae834706bb68a70e@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>
Message-ID: <CAP01uRnLWfxQ-+FHz1hk6KQHrZGLYcUdGzWjpJVmdg+jbsDBKg-9880@mail.gmail.com>


One can use as.data.frame(as.matrix(tab)) to avoid calling
as.data.frame.matrix directly
(although I find I do use as.data.frame.matrix anyways sometimes even
though it is generally
better to call the generic.).

Also note that the various as.data.frame methods do not address the examples
in the SO links I posted which is why I mentioned it.

On Thu, May 14, 2020 at 9:22 AM SOEIRO Thomas <Thomas.SOEIRO at ap-hm.fr> wrote:
>
> Thanks for the links. I agree that such a feature would be a nice addition, and could make ftable even more useful.
>
> In the same spirit, I think it could be useful to mention the undocumented base::as.data.frame.matrix function in documentation of table and xtabs (in addition to the already mentioned base::as.data.frame.table). The conversion from ftable/table/xtabs to data.frame is a common task that some users seem to struggle with (https://stackoverflow.com/questions/10758961/how-to-convert-a-table-to-a-data-frame).
>
> tab <- table(warpbreaks$wool, warpbreaks$tension)
> as.data.frame(tab) # reshaped table
> as.data.frame.matrix(tab) # non-reshaped table
>
> To sum up, for the sake of clarity, these proposals address two different topics:
> - The justify argument would reduce the need to reformat the exported ftable
> - An ftable2df-like function (and the mention of as.data.frame.matrix in the documentation) would facilitate the reuse of ftable results for further analysis.
>
> Thank you very much,
>
> Thomas
>
> > If you are looking at ftable could you also consider adding a way to convert an ftable into a usable data.frame such as the ftable2df function defined here:
> >
> > https://stackoverflow.com/questions/11141406/reshaping-an-array-to-data-frame/11143126#11143126
> >
> > and there is an example of using it here:
> >
> > https://stackoverflow.com/questions/61333663/manipulating-an-array-into-a-data-frame-in-base-r/61334756#61334756
> >
> > Being able to move back and forth between various base class representations seems like something that would be natural to provide.
> >
> > Thanks.
> >
> > On Thu, May 14, 2020 at 5:32 AM Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> >>
> >>>>>>> SOEIRO Thomas
> >>>>>>>     on Wed, 13 May 2020 20:27:15 +0000 writes:
> >>
> >>> Dear all,
> >>> I haven't received any feedback so far on my proposal to make
> >> "justify" argument available in stats:::format.ftable
> >>
> >>> Is this list the appropriate place for this kind of proposal?
> >>
> >> Yes, it is.. Actually such a post is even a "role model" post for
> >> R-devel.
> >>
> >>> I hope this follow-up to my message won't be taken as rude. Of course it's not meant to be, but I'm not used to the R mailing lists...
> >>
> >> well, there could be said much, and many stories told here ... ;-)
> >>
> >>> Thank you in advance for your comments,
> >>
> >>> Best,
> >>> Thomas
> >>
> >> The main reasons for "no reaction" (for such nice post) probably are
> >> combination of the following
> >>
> >> - we are busy
> >> - if we have time, we think other things are more exciting
> >> - we have not used ftable much/at all and are not interested.
> >>
> >> Even though the first 2 apply to me, I'll have a 2nd look into your
> >> post now, and may end up well agreeing with your proposal.
> >>
> >> Martin Maechler
> >> ETH Zurich  and  R Core team
> >>
> >>
> >>
> >>
> >>>> Dear all,
> >>>>
> >>>> justify argument is hard coded in format.ftable:
> >>>>
> >>>> cbind(apply(LABS, 2L, format, justify = "left"),
> >>>> apply(DATA, 2L, format, justify = "right"))
> >>>>
> >>>> It would be useful to have the possibility to modify the argument between c("left", "right", "centre", "none") as in format.default.
> >>>>
> >>>> The lines could be changed to:
> >>>>
> >>>> if(length(justify) != 2)
> >>>> stop("justify must be length 2")
> >>>> cbind(apply(LABS, 2L, format, justify = justify[1]),
> >>>> apply(DATA, 2L, format, justify = justify[2]))
> >>>>
> >>>> The argument justify could defaults to c("left", "right") for backward compatibility.
> >>>>
> >>>> It could then allow:
> >>>> ftab <- ftable(wool + tension ~ breaks, warpbreaks)
> >>>> format.ftable(ftab, justify = c("none", "none"))
> >>>>
> >>>> Best regards,
> >>>>
> >>>> Thomas



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Thu May 14 15:22:00 2020
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Thu, 14 May 2020 13:22:00 +0000
Subject: [Rd] justify hard coded in format.ftable
In-Reply-To: <CAP01uR=5-M85sX+iYTPezLiB-mQiJiX7W9+gnYJAZDMjt4g0rA@mail.gmail.com>
References: <f391e1ccd3a84fe1885c9e644371707e@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>
 <24253.4110.25144.189615@stat.math.ethz.ch>
 <CAP01uR=5-M85sX+iYTPezLiB-mQiJiX7W9+gnYJAZDMjt4g0rA@mail.gmail.com>
Message-ID: <86c028e343924b67ae834706bb68a70e-7809@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>

Thanks for the links. I agree that such a feature would be a nice addition, and could make ftable even more useful.

In the same spirit, I think it could be useful to mention the undocumented base::as.data.frame.matrix function in documentation of table and xtabs (in addition to the already mentioned base::as.data.frame.table). The conversion from ftable/table/xtabs to data.frame is a common task that some users seem to struggle with (https://stackoverflow.com/questions/10758961/how-to-convert-a-table-to-a-data-frame).

tab <- table(warpbreaks$wool, warpbreaks$tension)
as.data.frame(tab) # reshaped table
as.data.frame.matrix(tab) # non-reshaped table

To sum up, for the sake of clarity, these proposals address two different topics:
- The justify argument would reduce the need to reformat the exported ftable
- An ftable2df-like function (and the mention of as.data.frame.matrix in the documentation) would facilitate the reuse of ftable results for further analysis.

Thank you very much,

Thomas

> If you are looking at ftable could you also consider adding a way to convert an ftable into a usable data.frame such as the ftable2df function defined here:
> 
> https://stackoverflow.com/questions/11141406/reshaping-an-array-to-data-frame/11143126#11143126
> 
> and there is an example of using it here:
> 
> https://stackoverflow.com/questions/61333663/manipulating-an-array-into-a-data-frame-in-base-r/61334756#61334756
> 
> Being able to move back and forth between various base class representations seems like something that would be natural to provide.
> 
> Thanks.
> 
> On Thu, May 14, 2020 at 5:32 AM Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>>
>>>>>>> SOEIRO Thomas
>>>>>>>     on Wed, 13 May 2020 20:27:15 +0000 writes:
>>
>>> Dear all,
>>> I haven't received any feedback so far on my proposal to make 
>> "justify" argument available in stats:::format.ftable
>>
>>> Is this list the appropriate place for this kind of proposal?
>>
>> Yes, it is.. Actually such a post is even a "role model" post for 
>> R-devel.
>>
>>> I hope this follow-up to my message won't be taken as rude. Of course it's not meant to be, but I'm not used to the R mailing lists...
>>
>> well, there could be said much, and many stories told here ... ;-)
>>
>>> Thank you in advance for your comments,
>>
>>> Best,
>>> Thomas
>>
>> The main reasons for "no reaction" (for such nice post) probably are 
>> combination of the following
>>
>> - we are busy
>> - if we have time, we think other things are more exciting
>> - we have not used ftable much/at all and are not interested.
>>
>> Even though the first 2 apply to me, I'll have a 2nd look into your 
>> post now, and may end up well agreeing with your proposal.
>>
>> Martin Maechler
>> ETH Zurich  and  R Core team
>>
>>
>>
>>
>>>> Dear all,
>>>>
>>>> justify argument is hard coded in format.ftable:
>>>>
>>>> cbind(apply(LABS, 2L, format, justify = "left"),
>>>> apply(DATA, 2L, format, justify = "right"))
>>>>
>>>> It would be useful to have the possibility to modify the argument between c("left", "right", "centre", "none") as in format.default.
>>>>
>>>> The lines could be changed to:
>>>>
>>>> if(length(justify) != 2)
>>>> stop("justify must be length 2")
>>>> cbind(apply(LABS, 2L, format, justify = justify[1]),
>>>> apply(DATA, 2L, format, justify = justify[2]))
>>>>
>>>> The argument justify could defaults to c("left", "right") for backward compatibility.
>>>>
>>>> It could then allow:
>>>> ftab <- ftable(wool + tension ~ breaks, warpbreaks)
>>>> format.ftable(ftab, justify = c("none", "none"))
>>>>
>>>> Best regards,
>>>>
>>>> Thomas

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri May 15 15:41:23 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 15 May 2020 15:41:23 +0200
Subject: [Rd] edit() doubles backslashes when keep.source=TRUE
In-Reply-To: <b599d955-9909-1fd9-773a-765b22b4a03f@fau.de>
References: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
 <b599d955-9909-1fd9-773a-765b22b4a03f@fau.de>
Message-ID: <24254.39939.916783.667450@stat.math.ethz.ch>

>>>>> Sebastian Meyer 
>>>>>     on Fri, 15 May 2020 10:47:55 +0200 writes:

    > I can confirm this changed behaviour. I just compared R-3.6.3 with
    > yesterday's R-devel. Using R-devel, the tempfile opened by the editor
    > (Emacs for me, but shouldn't matter) contains doubled backslashes.

    > This could be related to

        > https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17800

Yes, indeed, I'm sure this is the same; an inadvertent bug indeed.

    > Best regards,
    > Sebastian

... and  "just the usual"

<whining>

    Why does nobody anymore  help R development by working with
    "R-devel", or at least then the alpha, beta and the "RC"
    (Release Candidate) versions that we release daily for about one
    month before the final release?

    Notably a highly staffed enterprise such as Rstudio (viz the bug
    report 17800 above), but also others could really help by
    starting to use the "next version" of R on a routine basis ...

<whining/>

Still: Thank you, of course,
 Bill Dunlap, and Sebastian and Jonathan (PR 17800)

Martin

    > Am 15.05.20 um 03:50 schrieb William Dunlap via R-devel:
    >> Is it just my installation or does edit() (or fix(), etc.) in R-4.0.0
    >> double all the backslashes when options(keep.source=TRUE)?  E.g.,
    >> 
    >>> options(keep.source=TRUE)
    >>> f <- function(x) { cat("\t", x, "\n", sep="") }
    >>> edit(f) # exit the editor without making any changes
    >> The editor (vi or notepad) shows doubled backslashes
    >> function(x) { cat("\\t", x, "\\n", sep="") }
    >> as does the return value of edit().
    >> 
    >> If I set options(keep.source=FALSE) before defining 'f' or remove t's
    >> 'srcref' attribute then the backslashes are left alone.
    >> 
    >> Bill Dunlap
    >> TIBCO Software
    >> wdunlap tibco.com


From jenn||er@@@|yon @end|ng |rom gm@||@com  Fri May 15 16:39:59 2020
From: jenn||er@@@|yon @end|ng |rom gm@||@com (Jennifer Lyon)
Date: Fri, 15 May 2020 08:39:59 -0600
Subject: [Rd] Daily News about R-devel/NEWS is not updating
Message-ID: <CAKstpn5iW897viD6YZko2gvdakCQTVStqq613MwTuU03eG3tXQ@mail.gmail.com>

Hi:

The "Daily News about R-devel/NEWS" webpage at
http://developer.r-project.org/blosxom.cgi/R-devel/NEWS seems to not be
updating. As of today, the latest entry is Tue, 14 Apr 2020.

Thanks.

Jen

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri May 15 16:53:57 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 15 May 2020 10:53:57 -0400
Subject: [Rd] Testing before release (was: edit() doubles backslashes when
 keep.source=TRUE)
In-Reply-To: <24254.39939.916783.667450@stat.math.ethz.ch>
References: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
 <b599d955-9909-1fd9-773a-765b22b4a03f@fau.de>
 <24254.39939.916783.667450@stat.math.ethz.ch>
Message-ID: <2a56e599-f72b-25cb-d5c5-23929db33d8f@gmail.com>

On 15/05/2020 9:41 a.m., Martin Maechler wrote:
[ deletions ]
> <whining>
> 
>      Why does nobody anymore  help R development by working with
>      "R-devel", or at least then the alpha, beta and the "RC"
>      (Release Candidate) versions that we release daily for about one
>      month before the final release?
> 
>      Notably a highly staffed enterprise such as Rstudio (viz the bug
>      report 17800 above), but also others could really help by
>      starting to use the "next version" of R on a routine basis ...
> 
> <whining/
I understand the whining, bugs that get released are embarrassing.  But 
when I read the NEWS, I can see that both the NEW FEATURES and BUG FIXES 
sections of x.y.0 releases tend to be much longer than the BUG FIXES 
sections in patch releases.  That seems to indicate that things are 
working reasonably well.

For a really rough measure, just counting bullet points:

R 4.0.0:  65 new features, 55 bug fixes

R 3.6.3:  1 new feature, 7 bug fixes

R 3.6.2:  2 new features, 21 bug fixes

R 3.6.1:  0 new features, 16 bug fixes

R 3.6.0:  72 new features, 62 bug fixes

You can get these numbers programmatically:

R4 <- news()
table(R4$Category)

R3 <- news(package = "R-3")
table(R3$Version, R3$Category)

Duncan Murdoch


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri May 15 17:02:33 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 15 May 2020 11:02:33 -0400
Subject: [Rd] Daily News about R-devel/NEWS is not updating
In-Reply-To: <CAKstpn5iW897viD6YZko2gvdakCQTVStqq613MwTuU03eG3tXQ@mail.gmail.com>
References: <CAKstpn5iW897viD6YZko2gvdakCQTVStqq613MwTuU03eG3tXQ@mail.gmail.com>
Message-ID: <e2c5ba98-21f9-62bf-7ea4-9874f405ff02@gmail.com>

On 15/05/2020 10:39 a.m., Jennifer Lyon wrote:
> Hi:
> 
> The "Daily News about R-devel/NEWS" webpage at
> http://developer.r-project.org/blosxom.cgi/R-devel/NEWS seems to not be
> updating. As of today, the latest entry is Tue, 14 Apr 2020.
> 
> Thanks.
> 

Thanks for noticing that.  It's now fixed.  (The issue was that R-devel 
on the news machine didn't have rJava installed; the highlighting of 
differences is done by some old Java code.)

Duncan Murdoch


From jenn||er@@@|yon @end|ng |rom gm@||@com  Fri May 15 17:58:08 2020
From: jenn||er@@@|yon @end|ng |rom gm@||@com (Jennifer Lyon)
Date: Fri, 15 May 2020 09:58:08 -0600
Subject: [Rd] Daily News about R-devel/NEWS is not updating
In-Reply-To: <e2c5ba98-21f9-62bf-7ea4-9874f405ff02@gmail.com>
References: <CAKstpn5iW897viD6YZko2gvdakCQTVStqq613MwTuU03eG3tXQ@mail.gmail.com>
 <e2c5ba98-21f9-62bf-7ea4-9874f405ff02@gmail.com>
Message-ID: <CAKstpn69iR+bmrqPkokuPiYgExE6yu5tAbmhydmR174n-oU_VA@mail.gmail.com>

Thank you!

Jen

On Fri, May 15, 2020 at 9:02 AM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 15/05/2020 10:39 a.m., Jennifer Lyon wrote:
> > Hi:
> >
> > The "Daily News about R-devel/NEWS" webpage at
> > http://developer.r-project.org/blosxom.cgi/R-devel/NEWS seems to not be
> > updating. As of today, the latest entry is Tue, 14 Apr 2020.
> >
> > Thanks.
> >
>
> Thanks for noticing that.  It's now fixed.  (The issue was that R-devel
> on the news machine didn't have rJava installed; the highlighting of
> differences is done by some old Java code.)
>
> Duncan Murdoch
>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Fri May 15 18:12:33 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 15 May 2020 11:12:33 -0500
Subject: [Rd] edit() doubles backslashes when keep.source=TRUE
In-Reply-To: <24254.39939.916783.667450@stat.math.ethz.ch>
References: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
 <b599d955-9909-1fd9-773a-765b22b4a03f@fau.de>
 <24254.39939.916783.667450@stat.math.ethz.ch>
Message-ID: <24254.49009.456954.147983@rob.eddelbuettel.com>


On 15 May 2020 at 15:41, Martin Maechler wrote:
| <whining>
| 
|     Why does nobody anymore  help R development by working with
|     "R-devel", or at least then the alpha, beta and the "RC"
|     (Release Candidate) versions that we release daily for about one
|     month before the final release?
| 
|     Notably a highly staffed enterprise such as Rstudio (viz the bug
|     report 17800 above), but also others could really help by
|     starting to use the "next version" of R on a routine basis ...
| 
| <whining/>

Seconded. Without testing we can never know. R Core does their part.

I provided weekly Debian binaries. One each for the two alphas releases, for
the beta release, for the release candidate.  It is easy to use these, for
example in a Docker container.

It is also easy to use this on a normal machine as they are standard (Debian)
packages: install, try some tests, uninstall, revert to previous version by
installing that.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri May 15 18:24:53 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 15 May 2020 18:24:53 +0200
Subject: [Rd] ftable <-> data.frame etc {was "justify hard coded in
 format.ftable"}
In-Reply-To: <CAP01uR=5-M85sX+iYTPezLiB-mQiJiX7W9+gnYJAZDMjt4g0rA-3531@mail.gmail.com>
References: <f391e1ccd3a84fe1885c9e644371707e@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>
 <24253.4110.25144.189615@stat.math.ethz.ch>
 <CAP01uR=5-M85sX+iYTPezLiB-mQiJiX7W9+gnYJAZDMjt4g0rA-3531@mail.gmail.com>
Message-ID: <24254.49749.263070.684423@stat.math.ethz.ch>

>>>>> Gabor Grothendieck 
>>>>>     on Thu, 14 May 2020 06:56:06 -0400 writes:

> If you are looking at ftable could you also consider adding
> a way to convert an ftable into a usable data.frame such as
> the ftable2df function defined here:

> https://stackoverflow.com/questions/11141406/reshaping-an-array-to-data-frame/11143126#11143126

> and there is an example of using it here:

> https://stackoverflow.com/questions/61333663/manipulating-an-array-into-a-data-frame-in-base-r/61334756#61334756

> Being able to move back and forth between various base class representations
> seems like something that would be natural to provide.

Sure!

But there is already an  as.data.frame() method for "ftable",
{and I would not want the    if(! .. ftable)  ftable(x)  part anyway.

What I think many useRs / programmeRs  very often forget about
is more-than-2-dimensional arrays {which *are* at the beginning
of that SO question} and that these are often by far the most
efficient data structure (rather than the corresponding data frames).  

and even less people forget that a "table" in base R is just a
special case of a 1-D, 2-D, 3-D, .... array.
(Semantically a special case: "array" with non-negative integer content 

I'd claim that everything you here ("move back and forth between
...") is already there in the "ftable" implementation in stats,
notably in the source file  src/library/stats/R/ftable.R
 -> https://svn.r-project.org/R/trunk/src/library/stats/R/ftable.R

The problem may be in

1) too sparse documentation about the close relations
   "ftable" <-> "array" <-> "table" <-> "data.frame" 

2) people not thinking often enough about more-than-2D-arrays and the
  special corresponding class "table" in R.

To start with one:

> str(UCBAdmissions)
 'table' num [1:2, 1:2, 1:6] 512 313 89 19 353 207 17 8 120 205 ...
 - attr(*, "dimnames")=List of 3
  ..$ Admit : chr [1:2] "Admitted" "Rejected"
  ..$ Gender: chr [1:2] "Male" "Female"
  ..$ Dept  : chr [1:6] "A" "B" "C" "D" ...
>

and look at the *examples* in the help files and the S3 methods

methods(class = "ftable")
[1] as.data.frame as.matrix     as.table      format        head          print        
[7] tail         
see '?methods' for accessing help and source code
> methods(class = "table")
 [1] [             aperm         as.data.frame Axis          coerce        initialize   
 [7] lines         plot          points        print         show          slotsFromS3  
[13] summary       tail         
see '?methods' for accessing help and source code
> 

... need to close now, there's more to be said ...



    > On Thu, May 14, 2020 at 5:32 AM Martin Maechler
    > <maechler at stat.math.ethz.ch> wrote:
    >> 
    >> >>>>> SOEIRO Thomas
    >> >>>>>     on Wed, 13 May 2020 20:27:15 +0000 writes:
    >> 
    >> > Dear all,
    >> > I haven't received any feedback so far on my proposal to make "justify" argument available in stats:::format.ftable
    >> 
    >> > Is this list the appropriate place for this kind of proposal?
    >> 
    >> Yes, it is.. Actually such a post is even a "role model" post
    >> for R-devel.
    >> 
    >> > I hope this follow-up to my message won't be taken as rude. Of course it's not meant to be, but I'm not used to the R mailing lists...
    >> 
    >> well, there could be said much, and many stories told here ... ;-)
    >> 
    >> > Thank you in advance for your comments,
    >> 
    >> > Best,
    >> > Thomas
    >> 
    >> The main reasons for "no reaction" (for such nice post) probably
    >> are combination of the following
    >> 
    >> - we are busy
    >> - if we have time, we think other things are more exciting
    >> - we have not used ftable much/at all and are not interested.
    >> 
    >> Even though the first 2 apply to me, I'll have a 2nd look into
    >> your post now, and may end up well agreeing with your proposal.
    >> 
    >> Martin Maechler
    >> ETH Zurich  and  R Core team
    >> 
    >> 
    >> 
    >> 
    >> >> Dear all,
    >> >>
    >> >> justify argument is hard coded in format.ftable:
    >> >>
    >> >> cbind(apply(LABS, 2L, format, justify = "left"),
    >> >> apply(DATA, 2L, format, justify = "right"))
    >> >>
    >> >> It would be useful to have the possibility to modify the argument between c("left", "right", "centre", "none") as in format.default.
    >> >>
    >> >> The lines could be changed to:
    >> >>
    >> >> if(length(justify) != 2)
    >> >> stop("justify must be length 2")
    >> >> cbind(apply(LABS, 2L, format, justify = justify[1]),
    >> >> apply(DATA, 2L, format, justify = justify[2]))
    >> >>
    >> >> The argument justify could defaults to c("left", "right") for backward compatibility.
    >> >>
    >> >> It could then allow:
    >> >> ftab <- ftable(wool + tension ~ breaks, warpbreaks)
    >> >> format.ftable(ftab, justify = c("none", "none"))
    >> >>
    >> >> Best regards,
    >> >>
    >> >> Thomas


    > -- 
    > Statistics & Software Consulting
    > GKX Group, GKX Associates Inc.
    > tel: 1-877-GKX-GROUP
    > email: ggrothendieck at gmail.com


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Fri May 15 18:48:07 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Fri, 15 May 2020 16:48:07 +0000 (UTC)
Subject: [Rd] edit() doubles backslashes when keep.source=TRUE
In-Reply-To: <24254.49009.456954.147983@rob.eddelbuettel.com>
References: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
 <b599d955-9909-1fd9-773a-765b22b4a03f@fau.de>
 <24254.39939.916783.667450@stat.math.ethz.ch>
 <24254.49009.456954.147983@rob.eddelbuettel.com>
Message-ID: <1298669161.298219.1589561287432@mail.yahoo.com>


> On Friday, May 15, 2020, 12:13:04 PM EDT, Dirk Eddelbuettel <edd at debian.org> wrote:
> On 15 May 2020 at 15:41, Martin Maechler wrote:
> | <whining>
> |
> |??? Why does nobody anymore? help R development by working with
> |??? "R-devel", or at least then the alpha, beta and the "RC"
> |??? (Release Candidate) versions that we release daily for about one
> |??? month before the final release?
> |
> |??? Notably a highly staffed enterprise such as Rstudio (viz the bug
> |??? report 17800 above), but also others could really help by
> |??? starting to use the "next version" of R on a routine basis ...
> |
> | <whining/>
>
> Seconded. Without testing we can never know. R Core does their part.
>
> I provided weekly Debian binaries. One each for the two alphas releases, for
> the beta release, for the release candidate.? It is easy to use these, for
> example in a Docker container.
>
> It is also easy to use this on a normal machine as they are standard (Debian)
> packages: install, try some tests, uninstall, revert to previous version by
> installing that.
>
> Dirk

This is a very reasonably request, and all useRs who benefit from the
tireless work of R-core should consider doing it.? I have considered
it, but compiling R from sources on OS X has been my stumbling block.
At least last time I tried I got stuck at the? Fortran step. It doesn't
 help I have very limited experience compiling? software of the complexity 
of R.? Really, I've only done it within the warm welcoming confines of the
 vagrant image Tomas Kalibera set up for `rchk`.

I also use r-devel on docker, but that isn't very practical for
day-to-day usage, which is what I think we need.

What would it take to generate pre-release binaries for OS X (and Windows)?? I
imagine if such were available the volume of testers would increase
dramatically (at least, I haven't seen them if they exist).? 
Maybe something the R Consortium would consider funding?

Best,

B.


From k@bem|@ @end|ng |rom northe@@tern@edu  Fri May 15 18:53:38 2020
From: k@bem|@ @end|ng |rom northe@@tern@edu (Bemis, Kylie)
Date: Fri, 15 May 2020 16:53:38 +0000
Subject: [Rd] edit() doubles backslashes when keep.source=TRUE
In-Reply-To: <1298669161.298219.1589561287432@mail.yahoo.com>
References: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
 <b599d955-9909-1fd9-773a-765b22b4a03f@fau.de>
 <24254.39939.916783.667450@stat.math.ethz.ch>
 <24254.49009.456954.147983@rob.eddelbuettel.com>
 <1298669161.298219.1589561287432@mail.yahoo.com>
Message-ID: <3C36FAF5-870A-43DD-AC89-4136235CD6A4@northeastern.edu>

Nightly binary builds of R-devel for macOS are available: http://mac.r-project.org

~~~
Kylie Ariel Bemis (she/her)
Khoury College of Computer Sciences
Northeastern University
kuwisdelu.github.io<https://kuwisdelu.github.io>










On May 15, 2020, at 12:48 PM, brodie gaslam via R-devel <r-devel at r-project.org<mailto:r-devel at r-project.org>> wrote:


On Friday, May 15, 2020, 12:13:04 PM EDT, Dirk Eddelbuettel <edd at debian.org<mailto:edd at debian.org>> wrote:
On 15 May 2020 at 15:41, Martin Maechler wrote:
| <whining>
|
|    Why does nobody anymore  help R development by working with
|    "R-devel", or at least then the alpha, beta and the "RC"
|    (Release Candidate) versions that we release daily for about one
|    month before the final release?
|
|    Notably a highly staffed enterprise such as Rstudio (viz the bug
|    report 17800 above), but also others could really help by
|    starting to use the "next version" of R on a routine basis ...
|
| <whining/>

Seconded. Without testing we can never know. R Core does their part.

I provided weekly Debian binaries. One each for the two alphas releases, for
the beta release, for the release candidate.  It is easy to use these, for
example in a Docker container.

It is also easy to use this on a normal machine as they are standard (Debian)
packages: install, try some tests, uninstall, revert to previous version by
installing that.

Dirk

This is a very reasonably request, and all useRs who benefit from the
tireless work of R-core should consider doing it.  I have considered
it, but compiling R from sources on OS X has been my stumbling block.
At least last time I tried I got stuck at the  Fortran step. It doesn't
help I have very limited experience compiling  software of the complexity
of R.  Really, I've only done it within the warm welcoming confines of the
vagrant image Tomas Kalibera set up for `rchk`.

I also use r-devel on docker, but that isn't very practical for
day-to-day usage, which is what I think we need.

What would it take to generate pre-release binaries for OS X (and Windows)?  I
imagine if such were available the volume of testers would increase
dramatically (at least, I haven't seen them if they exist).
Maybe something the R Consortium would consider funding?

Best,

B.

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://nam05.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-devel&amp;data=02%7C01%7Ck.bemis%40northeastern.edu%7C66883f8d39094f87847608d7f8efd23e%7Ca8eec281aaa34daeac9b9a398b9215e7%7C0%7C0%7C637251581223782724&amp;sdata=cVYbvv%2B2fqwKpMUCM6iBGu4wLOLQvQUwv4SOapZf5mM%3D&amp;reserved=0


	[[alternative HTML version deleted]]


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Fri May 15 18:54:08 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Fri, 15 May 2020 12:54:08 -0400
Subject: [Rd] edit() doubles backslashes when keep.source=TRUE
In-Reply-To: <1298669161.298219.1589561287432@mail.yahoo.com>
References: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
 <b599d955-9909-1fd9-773a-765b22b4a03f@fau.de>
 <24254.39939.916783.667450@stat.math.ethz.ch>
 <24254.49009.456954.147983@rob.eddelbuettel.com>
 <1298669161.298219.1589561287432@mail.yahoo.com>
Message-ID: <CAL6gwn+NQEihDb-MuR9jxFySD8HmmA2i-jfPecCz_hcNpyYeJQ@mail.gmail.com>

I build windows binaries from source. As of now, the only choice is R-revel
unless I want to monkey around more with Jeroens?s PKGBUILD script (which
is On my to-do list).

It?s pretty straightforward, although I?m seeing a lot of issues with
packages which had explicit calls to LOCALSOFT in configure.win as that
doesn?t exist anymore.

The binaries have passed make check, though. Would it help if I built some
and forwarded it somewhere?

Avi

On Fri, May 15, 2020 at 12:48 PM brodie gaslam via R-devel <
r-devel at r-project.org> wrote:

>
> > On Friday, May 15, 2020, 12:13:04 PM EDT, Dirk Eddelbuettel <
> edd at debian.org> wrote:
> > On 15 May 2020 at 15:41, Martin Maechler wrote:
> > | <whining>
> > |
> > |    Why does nobody anymore  help R development by working with
> > |    "R-devel", or at least then the alpha, beta and the "RC"
> > |    (Release Candidate) versions that we release daily for about one
> > |    month before the final release?
> > |
> > |    Notably a highly staffed enterprise such as Rstudio (viz the bug
> > |    report 17800 above), but also others could really help by
> > |    starting to use the "next version" of R on a routine basis ...
> > |
> > | <whining/>
> >
> > Seconded. Without testing we can never know. R Core does their part.
> >
> > I provided weekly Debian binaries. One each for the two alphas releases,
> for
> > the beta release, for the release candidate.  It is easy to use these,
> for
> > example in a Docker container.
> >
> > It is also easy to use this on a normal machine as they are standard
> (Debian)
> > packages: install, try some tests, uninstall, revert to previous version
> by
> > installing that.
> >
> > Dirk
>
> This is a very reasonably request, and all useRs who benefit from the
> tireless work of R-core should consider doing it.  I have considered
> it, but compiling R from sources on OS X has been my stumbling block.
> At least last time I tried I got stuck at the  Fortran step. It doesn't
>  help I have very limited experience compiling  software of the complexity
> of R.  Really, I've only done it within the warm welcoming confines of the
>  vagrant image Tomas Kalibera set up for `rchk`.
>
> I also use r-devel on docker, but that isn't very practical for
> day-to-day usage, which is what I think we need.
>
> What would it take to generate pre-release binaries for OS X (and
> Windows)?  I
> imagine if such were available the volume of testers would increase
> dramatically (at least, I haven't seen them if they exist).
> Maybe something the R Consortium would consider funding?
>
> Best,
>
> B.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Fri May 15 19:26:59 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 15 May 2020 19:26:59 +0200
Subject: [Rd] edit() doubles backslashes when keep.source=TRUE
In-Reply-To: <1298669161.298219.1589561287432@mail.yahoo.com>
References: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
 <b599d955-9909-1fd9-773a-765b22b4a03f@fau.de>
 <24254.39939.916783.667450@stat.math.ethz.ch>
 <24254.49009.456954.147983@rob.eddelbuettel.com>
 <1298669161.298219.1589561287432@mail.yahoo.com>
Message-ID: <0BB915D9-081F-4E0C-A2E3-A154CEC23FD5@gmail.com>

Actually, it's not that hard to set up for a source compile for MacOS. The hard part is to do it precisely like the CRAN binaries so that you can run binary packages off CRAN, but in other setups you can just build packages from source. 

A stone in the shoe has been that the documentation on mac.r-project.org was littered with out-of-date information, but it seems that Simon has now cleaned this up considerably. It should now be possible simply to follow instructions on http://mac.r-project.org/tools/. I'm sure Simon will be receptive to information if something doesn't quite work.

-pd

> On 15 May 2020, at 18:48 , brodie gaslam via R-devel <r-devel at r-project.org> wrote:
> 
>> 
>> On Friday, May 15, 2020, 12:13:04 PM EDT, Dirk Eddelbuettel <edd at debian.org> wrote:
>> On 15 May 2020 at 15:41, Martin Maechler wrote:
>> | <whining>
>> |
>> |    Why does nobody anymore  help R development by working with
>> |    "R-devel", or at least then the alpha, beta and the "RC"
>> |    (Release Candidate) versions that we release daily for about one
>> |    month before the final release?
>> |
>> |    Notably a highly staffed enterprise such as Rstudio (viz the bug
>> |    report 17800 above), but also others could really help by
>> |    starting to use the "next version" of R on a routine basis ...
>> |
>> | <whining/>
>> 
>> Seconded. Without testing we can never know. R Core does their part.
>> 
>> I provided weekly Debian binaries. One each for the two alphas releases, for
>> the beta release, for the release candidate.  It is easy to use these, for
>> example in a Docker container.
>> 
>> It is also easy to use this on a normal machine as they are standard (Debian)
>> packages: install, try some tests, uninstall, revert to previous version by
>> installing that.
>> 
>> Dirk
> 
> This is a very reasonably request, and all useRs who benefit from the
> tireless work of R-core should consider doing it.  I have considered
> it, but compiling R from sources on OS X has been my stumbling block.
> At least last time I tried I got stuck at the  Fortran step. It doesn't
> help I have very limited experience compiling  software of the complexity 
> of R.  Really, I've only done it within the warm welcoming confines of the
> vagrant image Tomas Kalibera set up for `rchk`.
> 
> I also use r-devel on docker, but that isn't very practical for
> day-to-day usage, which is what I think we need.
> 
> What would it take to generate pre-release binaries for OS X (and Windows)?  I
> imagine if such were available the volume of testers would increase
> dramatically (at least, I haven't seen them if they exist).  
> Maybe something the R Consortium would consider funding?
> 
> Best,
> 
> B.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Fri May 15 19:29:26 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 15 May 2020 19:29:26 +0200
Subject: [Rd] edit() doubles backslashes when keep.source=TRUE
In-Reply-To: <0BB915D9-081F-4E0C-A2E3-A154CEC23FD5@gmail.com>
References: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
 <b599d955-9909-1fd9-773a-765b22b4a03f@fau.de>
 <24254.39939.916783.667450@stat.math.ethz.ch>
 <24254.49009.456954.147983@rob.eddelbuettel.com>
 <1298669161.298219.1589561287432@mail.yahoo.com>
 <0BB915D9-081F-4E0C-A2E3-A154CEC23FD5@gmail.com>
Message-ID: <588729BF-F361-4F78-A424-FB7520992CAF@gmail.com>

To discuss this further, we should probably move over to R-sig-mac and change the subject header.

-pd

> On 15 May 2020, at 19:26 , peter dalgaard <pdalgd at gmail.com> wrote:
> 
> Actually, it's not that hard to set up for a source compile for MacOS.....

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From wdun|@p @end|ng |rom t|bco@com  Fri May 15 19:34:47 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Fri, 15 May 2020 10:34:47 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <1527610684.154738.1588302337266@mail.yahoo.com>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
Message-ID: <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>

I agree: paste(collapse="something", ...) should always return a single
character string, regardless of the value of recycle0.  This would be
similar to when there are no non-NULL arguments to paste; collapse="."
gives a single empty string and collapse=NULL gives a zero long character
vector.
> paste()
character(0)
> paste(collapse=", ")
[1] ""

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Thu, Apr 30, 2020 at 9:56 PM suharto_anggono--- via R-devel <
r-devel at r-project.org> wrote:

> Without 'collapse', 'paste' pastes (concatenates) its arguments
> elementwise (separated by 'sep', " " by default). New in R devel and R
> patched, specifying recycle0 = FALSE makes mixing zero-length and
> nonzero-length arguments results in length zero. The result of paste(n,
> "th", sep = "", recycle0 = FALSE) always have the same length as 'n'.
> Previously, the result is still as long as the longest argument, with the
> zero-length argument like "". If all og the arguments have length zero,
> 'recycle0' doesn't matter.
>
> As far as I understand, 'paste' with 'collapse' as a character string is
> supposed to put together elements of a vector into a single character
> string. I think 'recycle0' shouldn't change it.
>
> In current R devel and R patched, paste(character(0), collapse = "",
> recycle0 = FALSE) is character(0). I think it should be "", like
> paste(character(0), collapse="").
>
> paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE)
> is
> "4th, 5th".
> paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
> is
> "4th".
> I think
> paste(c(        ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
> should be
> "",
> not character(0).
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Fri May 15 20:04:40 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 15 May 2020 11:04:40 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
Message-ID: <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>

Totally agree with that.

H.

On 5/15/20 10:34, William Dunlap via R-devel wrote:
> I agree: paste(collapse="something", ...) should always return a single
> character string, regardless of the value of recycle0.  This would be
> similar to when there are no non-NULL arguments to paste; collapse="."
> gives a single empty string and collapse=NULL gives a zero long character
> vector.
>> paste()
> character(0)
>> paste(collapse=", ")
> [1] ""
> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
> 
> 
> On Thu, Apr 30, 2020 at 9:56 PM suharto_anggono--- via R-devel <
> r-devel at r-project.org> wrote:
> 
>> Without 'collapse', 'paste' pastes (concatenates) its arguments
>> elementwise (separated by 'sep', " " by default). New in R devel and R
>> patched, specifying recycle0 = FALSE makes mixing zero-length and
>> nonzero-length arguments results in length zero. The result of paste(n,
>> "th", sep = "", recycle0 = FALSE) always have the same length as 'n'.
>> Previously, the result is still as long as the longest argument, with the
>> zero-length argument like "". If all og the arguments have length zero,
>> 'recycle0' doesn't matter.
>>
>> As far as I understand, 'paste' with 'collapse' as a character string is
>> supposed to put together elements of a vector into a single character
>> string. I think 'recycle0' shouldn't change it.
>>
>> In current R devel and R patched, paste(character(0), collapse = "",
>> recycle0 = FALSE) is character(0). I think it should be "", like
>> paste(character(0), collapse="").
>>
>> paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE)
>> is
>> "4th, 5th".
>> paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
>> is
>> "4th".
>> I think
>> paste(c(        ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
>> should be
>> "",
>> not character(0).
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From g@bembecker @end|ng |rom gm@||@com  Fri May 15 20:25:36 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Fri, 15 May 2020 11:25:36 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
Message-ID: <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>

Hi all,

This makes sense to me, but I would think that recycle0 and collapse should
actually be incompatible and paste should throw an error if recycle0 were
TRUE and collapse were declared in the same call. I don't think the value
of recycle0 should be silently ignored if it is actively specified.

~G

On Fri, May 15, 2020 at 11:05 AM Herv? Pag?s <hpages at fredhutch.org> wrote:

> Totally agree with that.
>
> H.
>
> On 5/15/20 10:34, William Dunlap via R-devel wrote:
> > I agree: paste(collapse="something", ...) should always return a single
> > character string, regardless of the value of recycle0.  This would be
> > similar to when there are no non-NULL arguments to paste; collapse="."
> > gives a single empty string and collapse=NULL gives a zero long character
> > vector.
> >> paste()
> > character(0)
> >> paste(collapse=", ")
> > [1] ""
> >
> > Bill Dunlap
> > TIBCO Software
> > wdunlap tibco.com
> >
> >
> > On Thu, Apr 30, 2020 at 9:56 PM suharto_anggono--- via R-devel <
> > r-devel at r-project.org> wrote:
> >
> >> Without 'collapse', 'paste' pastes (concatenates) its arguments
> >> elementwise (separated by 'sep', " " by default). New in R devel and R
> >> patched, specifying recycle0 = FALSE makes mixing zero-length and
> >> nonzero-length arguments results in length zero. The result of paste(n,
> >> "th", sep = "", recycle0 = FALSE) always have the same length as 'n'.
> >> Previously, the result is still as long as the longest argument, with
> the
> >> zero-length argument like "". If all og the arguments have length zero,
> >> 'recycle0' doesn't matter.
> >>
> >> As far as I understand, 'paste' with 'collapse' as a character string is
> >> supposed to put together elements of a vector into a single character
> >> string. I think 'recycle0' shouldn't change it.
> >>
> >> In current R devel and R patched, paste(character(0), collapse = "",
> >> recycle0 = FALSE) is character(0). I think it should be "", like
> >> paste(character(0), collapse="").
> >>
> >> paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE)
> >> is
> >> "4th, 5th".
> >> paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
> >> is
> >> "4th".
> >> I think
> >> paste(c(        ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
> >> should be
> >> "",
> >> not character(0).
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
> >
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Fri May 15 22:44:28 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 15 May 2020 13:44:28 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
Message-ID: <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>

There is still the situation where **both** 'sep' and 'collapse' are 
specified:

   > paste(integer(0), "nth", sep="", collapse=",")
   [1] "nth"

In that case 'recycle0' should **not** be ignored i.e.

   paste(integer(0), "nth", sep="", collapse=",", recycle0=TRUE)

should return the empty string (and not character(0) like it does at the 
moment).

In other words, 'recycle0' should only control the first operation (the 
operation controlled by 'sep'). Which makes plenty of sense: the 1st 
operation is binary (or n-ary) while the collapse operation is unary. 
There is no concept of recycling in the context of unary operations.

H.

On 5/15/20 11:25, Gabriel Becker wrote:
> Hi all,
> 
> This makes sense to me, but I would think that recycle0 and collapse 
> should actually be incompatible and paste should throw an error if 
> recycle0 were TRUE and collapse were declared in the same call. I don't 
> think the value of recycle0 should be silently ignored if it is actively 
> specified.
> 
> ~G
> 
> On Fri, May 15, 2020 at 11:05 AM Herv? Pag?s <hpages at fredhutch.org 
> <mailto:hpages at fredhutch.org>> wrote:
> 
>     Totally agree with that.
> 
>     H.
> 
>     On 5/15/20 10:34, William Dunlap via R-devel wrote:
>      > I agree: paste(collapse="something", ...) should always return a
>     single
>      > character string, regardless of the value of recycle0.? This would be
>      > similar to when there are no non-NULL arguments to paste;
>     collapse="."
>      > gives a single empty string and collapse=NULL gives a zero long
>     character
>      > vector.
>      >> paste()
>      > character(0)
>      >> paste(collapse=", ")
>      > [1] ""
>      >
>      > Bill Dunlap
>      > TIBCO Software
>      > wdunlap tibco.com
>     <https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=rXIwWqf4U4HZS_bjUT3KfA9ARaV5YTb_kEcXWHnkt-c&e=>
>      >
>      >
>      > On Thu, Apr 30, 2020 at 9:56 PM suharto_anggono--- via R-devel <
>      > r-devel at r-project.org <mailto:r-devel at r-project.org>> wrote:
>      >
>      >> Without 'collapse', 'paste' pastes (concatenates) its arguments
>      >> elementwise (separated by 'sep', " " by default). New in R devel
>     and R
>      >> patched, specifying recycle0 = FALSE makes mixing zero-length and
>      >> nonzero-length arguments results in length zero. The result of
>     paste(n,
>      >> "th", sep = "", recycle0 = FALSE) always have the same length as
>     'n'.
>      >> Previously, the result is still as long as the longest argument,
>     with the
>      >> zero-length argument like "". If all og the arguments have
>     length zero,
>      >> 'recycle0' doesn't matter.
>      >>
>      >> As far as I understand, 'paste' with 'collapse' as a character
>     string is
>      >> supposed to put together elements of a vector into a single
>     character
>      >> string. I think 'recycle0' shouldn't change it.
>      >>
>      >> In current R devel and R patched, paste(character(0), collapse = "",
>      >> recycle0 = FALSE) is character(0). I think it should be "", like
>      >> paste(character(0), collapse="").
>      >>
>      >> paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 =
>     FALSE)
>      >> is
>      >> "4th, 5th".
>      >> paste(c("4"? ? ?), "th", sep = "", collapse = ", ", recycle0 =
>     FALSE)
>      >> is
>      >> "4th".
>      >> I think
>      >> paste(c(? ? ? ? ), "th", sep = "", collapse = ", ", recycle0 =
>     FALSE)
>      >> should be
>      >> "",
>      >> not character(0).
>      >>
>      >> ______________________________________________
>      >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      >>
>     https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>      >>
>      >
>      >? ? ? ?[[alternative HTML version deleted]]
>      >
>      > ______________________________________________
>      > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      >
>     https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>      >
> 
>     -- 
>     Herv? Pag?s
> 
>     Program in Computational Biology
>     Division of Public Health Sciences
>     Fred Hutchinson Cancer Research Center
>     1100 Fairview Ave. N, M1-B514
>     P.O. Box 19024
>     Seattle, WA 98109-1024
> 
>     E-mail: hpages at fredhutch.org <mailto:hpages at fredhutch.org>
>     Phone:? (206) 667-5791
>     Fax:? ? (206) 667-1319
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=COnDeGgHNnHJlLLZOznMlhcaFU1nIRlkaSbssvlrMvw&e=>
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From @purd|e@@ @end|ng |rom gm@||@com  Sat May 16 00:08:21 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Sat, 16 May 2020 10:08:21 +1200
Subject: [Rd] 
 Testing before release (was: edit() doubles backslashes when
 keep.source=TRUE)
In-Reply-To: <2a56e599-f72b-25cb-d5c5-23929db33d8f@gmail.com>
References: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
 <b599d955-9909-1fd9-773a-765b22b4a03f@fau.de>
 <24254.39939.916783.667450@stat.math.ethz.ch>
 <2a56e599-f72b-25cb-d5c5-23929db33d8f@gmail.com>
Message-ID: <CAB8pepza8rPwv08+rjbRZQRM4Jef2TdMFJbgAimnTQ7+qL3QFA@mail.gmail.com>

This perhaps diverges from the intent of the thread, but...

I wanted to say I'm extremely grateful to the people who go the
through the bug reports.
It's an extremely important job (in the long run, particularly), but
perhaps not quite as "sexy"-sounding as other roles, and probably
under-valued.

So, thank you to the bug-fixers...

:)

On Sat, May 16, 2020 at 2:54 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 15/05/2020 9:41 a.m., Martin Maechler wrote:
> [ deletions ]
> > <whining>
> >
> >      Why does nobody anymore  help R development by working with
> >      "R-devel", or at least then the alpha, beta and the "RC"
> >      (Release Candidate) versions that we release daily for about one
> >      month before the final release?
> >
> >      Notably a highly staffed enterprise such as Rstudio (viz the bug
> >      report 17800 above), but also others could really help by
> >      starting to use the "next version" of R on a routine basis ...
> >
> > <whining/
> I understand the whining, bugs that get released are embarrassing.  But
> when I read the NEWS, I can see that both the NEW FEATURES and BUG FIXES
> sections of x.y.0 releases tend to be much longer than the BUG FIXES
> sections in patch releases.  That seems to indicate that things are
> working reasonably well.
>
> For a really rough measure, just counting bullet points:
>
> R 4.0.0:  65 new features, 55 bug fixes
>
> R 3.6.3:  1 new feature, 7 bug fixes
>
> R 3.6.2:  2 new features, 21 bug fixes
>
> R 3.6.1:  0 new features, 16 bug fixes
>
> R 3.6.0:  72 new features, 62 bug fixes
>
> You can get these numbers programmatically:
>
> R4 <- news()
> table(R4$Category)
>
> R3 <- news(package = "R-3")
> table(R3$Version, R3$Category)
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Sat May 16 02:26:55 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 15 May 2020 19:26:55 -0500 (CDT)
Subject: [Rd] [External] Re: Testing before release (was: edit() doubles
 backslashes when keep.source=TRUE)
In-Reply-To: <CAB8pepza8rPwv08+rjbRZQRM4Jef2TdMFJbgAimnTQ7+qL3QFA@mail.gmail.com>
References: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
 <b599d955-9909-1fd9-773a-765b22b4a03f@fau.de>
 <24254.39939.916783.667450@stat.math.ethz.ch>
 <2a56e599-f72b-25cb-d5c5-23929db33d8f@gmail.com>
 <CAB8pepza8rPwv08+rjbRZQRM4Jef2TdMFJbgAimnTQ7+qL3QFA@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2005151926330.8504@luke-Latitude-7480>

On Fri, 15 May 2020, Abby Spurdle wrote:

> This perhaps diverges from the intent of the thread, but...
>
> I wanted to say I'm extremely grateful to the people who go the
> through the bug reports.
> It's an extremely important job (in the long run, particularly), but
> perhaps not quite as "sexy"-sounding as other roles, and probably
> under-valued.
>
> So, thank you to the bug-fixers...

Yes: Thank You!!

Best,

luke

>
> :)
>
> On Sat, May 16, 2020 at 2:54 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> On 15/05/2020 9:41 a.m., Martin Maechler wrote:
>> [ deletions ]
>>> <whining>
>>>
>>>      Why does nobody anymore  help R development by working with
>>>      "R-devel", or at least then the alpha, beta and the "RC"
>>>      (Release Candidate) versions that we release daily for about one
>>>      month before the final release?
>>>
>>>      Notably a highly staffed enterprise such as Rstudio (viz the bug
>>>      report 17800 above), but also others could really help by
>>>      starting to use the "next version" of R on a routine basis ...
>>>
>>> <whining/
>> I understand the whining, bugs that get released are embarrassing.  But
>> when I read the NEWS, I can see that both the NEW FEATURES and BUG FIXES
>> sections of x.y.0 releases tend to be much longer than the BUG FIXES
>> sections in patch releases.  That seems to indicate that things are
>> working reasonably well.
>>
>> For a really rough measure, just counting bullet points:
>>
>> R 4.0.0:  65 new features, 55 bug fixes
>>
>> R 3.6.3:  1 new feature, 7 bug fixes
>>
>> R 3.6.2:  2 new features, 21 bug fixes
>>
>> R 3.6.1:  0 new features, 16 bug fixes
>>
>> R 3.6.0:  72 new features, 62 bug fixes
>>
>> You can get these numbers programmatically:
>>
>> R4 <- news()
>> table(R4$Category)
>>
>> R3 <- news(package = "R-3")
>> table(R3$Version, R3$Category)
>>
>> Duncan Murdoch
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From morg@n@em@||box @end|ng |rom gm@||@com  Sat May 16 14:13:08 2020
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Sat, 16 May 2020 13:13:08 +0100
Subject: [Rd] psum/pprod
Message-ID: <CAL0QV_N+qYK8Sy+WFD9P8wzs9VzU6O6FxJOXph7UaT0jizsdKw@mail.gmail.com>

Good morning All,

Just wanted to do quick follow-up on this thread:
https://r.789695.n4.nabble.com/There-is-pmin-and-pmax-each-taking-na-rm-how-about-psum-td4647841.html

For those (including the R-core team) of you who are interested in a C
implementation of psum and pprod there is one in the "kit" package (I am
the author) on CRAN.

I will continue working on the package in my spare time if I see that users
are missing basic functionalities not implemented in base R.

Have a great weekend.
Kind regards
Morgan Jacob

	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Sat May 16 22:52:43 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Sat, 16 May 2020 13:52:43 -0700
Subject: [Rd] docs about _R_CHECK_FORCE_SUGGESTS_ ?
In-Reply-To: <CAD4oTHF0z0Vik5YSFdRH_7zEksoP3YAJU_hM7gptoY=TmM7yWQ@mail.gmail.com>
References: <CALK03d0Y9OAWPKg9hqT=-_p5OoB9YxQYnYJU5s_t7bP+o1Yy2g@mail.gmail.com>
 <CABtg=KnNEweZcbD7SWiAx9DDD4OF7WDr3t8pFVa9w5LdwueatQ@mail.gmail.com>
 <CAD4oTHF0z0Vik5YSFdRH_7zEksoP3YAJU_hM7gptoY=TmM7yWQ@mail.gmail.com>
Message-ID: <CALK03d0=Uxet_VKOWa6GfZxX9s6E0-n8yT=EWapg67qtxhRFfw@mail.gmail.com>

I agree with the doc updates Gabe proposes, they would be helpful.

On Wed, May 13, 2020 at 12:56 PM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Hi Toby,
>
> As Gabor pointed out the place where the various levers R CMD check
> supports is in the R-internals manual, but there is a link directly to that
> section in
> https://cloud.r-project.org/doc/manuals/r-release/R-exts.html#Checking-packages
>
> It could perhaps be more prominent, perhaps by moving the paragraph that
> appears in to before the detailed list of  exact tests that are performed?
> I'm happy to put a patch for that together if there is a) interest, and b)
> a patch is preferable to someone on R-core simply doing that migration
> themselves.
>
> I do also agree that given that _R_CHECK_DEPENDS_ONLY_ and _R_CHECK_SUGGESTS_ONLY_
> are mentioned in the section you link, it would perhaps make sense to
> mention _R_CHECK_FORCE_SUGGESTS_ as well. I can put that in the patch as
> well, if there is agreement from R-core that one or both of these changes
> make sense.
>
> Best,
> ~G
>
> On Wed, May 13, 2020 at 11:07 AM G?bor Cs?rdi <csardi.gabor at gmail.com>
> wrote:
>
>> See at https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Tools
>>
>> Gabor
>>
>> On Wed, May 13, 2020 at 7:05 PM Toby Hocking <tdhock5 at gmail.com> wrote:
>> >
>> > Can someone please add documentation for that environment variable to
>> > Writing R Extensions? An appropriate place would be section
>> >
>> https://cloud.r-project.org/doc/manuals/r-release/R-exts.html#Suggested-packages
>> > which already discusses _R_CHECK_DEPENDS_ONLY_=true
>> >
>> >         [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From j@goreck| @end|ng |rom w|t@edu@p|  Sun May 17 10:39:51 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Sun, 17 May 2020 09:39:51 +0100
Subject: [Rd] update R Internals for R 4.0.0
Message-ID: <CAOO9MKW8XJp135GFgi1DbsPr48BsVrpucC_uhNk7qeFGebZuLQ@mail.gmail.com>

Hi R developers,

R ints: https://cran.r-project.org/doc/manuals/r-devel/R-ints.html

At the beginning there is
"this version is for the 3.x.y series."

I would like to kindly ask for update manual for 4.x.y series, which
would also need to cover entries about NAMED, that have been
superseded by REFCNT. There might be of course other places that needs
update, but this one is important feature of R 4.0.0.

Thank you,
Jan Gorecki


From j@goreck| @end|ng |rom w|t@edu@p|  Mon May 18 01:19:04 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Mon, 18 May 2020 00:19:04 +0100
Subject: [Rd] order function called on a data.frame?
Message-ID: <CAOO9MKX53QQuFk+u=octbhcmsg8AQVpMws1RtDomWwgJ=Zf8tQ@mail.gmail.com>

Hi,
base::order main input arguments are defined as:

a sequence of numeric, complex, character or logical vectors, all of
the same length, or a classed R object

When passing a list or a data.frame, the resuts seems to be a bit
useless. Shouldn't that raise an error, or at least warning?

Best Regards,
Jan Gorecki


From rkoenker @end|ng |rom ||||no|@@edu  Mon May 18 10:00:51 2020
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Mon, 18 May 2020 08:00:51 +0000
Subject: [Rd] dbinom link
Message-ID: <242242C7-8A65-4EAB-A955-65BA78CC7D8E@illinois.edu>

FWIW the link from ?dbinom to the Loader paper on Binomials is broken but the paper seems to be
available here:   https://octave.1599824.n4.nabble.com/attachment/3829107/0/loader2000Fast.pdf

Roger Koenker
r.koenker at ucl.ac.uk<mailto:r.koenker at ucl.ac.uk>
Honorary Professor of Economics
Department of Economics, UCL
Emeritus Professor of Economics
and Statistics, UIUC



	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Mon May 18 10:31:22 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Mon, 18 May 2020 20:31:22 +1200
Subject: [Rd] dbinom link
In-Reply-To: <242242C7-8A65-4EAB-A955-65BA78CC7D8E@illinois.edu>
References: <242242C7-8A65-4EAB-A955-65BA78CC7D8E@illinois.edu>
Message-ID: <CAB8pepwYOmEuJEAXimvhXC3u388LfBNn_M3KRDwSdykbwedy1g@mail.gmail.com>

This has come up before.

Here's the last time:
https://stat.ethz.ch/pipermail/r-devel/2019-March/077478.html

I guess my answer to the following the question...

    Perhaps we should ask permission to
    nail the thing down somewhere on r-project.org?

...would be, to reproduce it somewhere.
And then update the link in the binom help file.

Given that the article was previously available freely (with no
apparent restrictions on reproducing it), and that the author has
significant published works which are open access, I'd be surprised if
there's any objection to reproducing it.


On Mon, May 18, 2020 at 8:01 PM Koenker, Roger W <rkoenker at illinois.edu> wrote:
>
> FWIW the link from ?dbinom to the Loader paper on Binomials is broken but the paper seems to be
> available here:   https://octave.1599824.n4.nabble.com/attachment/3829107/0/loader2000Fast.pdf
>
> Roger Koenker
> r.koenker at ucl.ac.uk<mailto:r.koenker at ucl.ac.uk>
> Honorary Professor of Economics
> Department of Economics, UCL
> Emeritus Professor of Economics
> and Statistics, UIUC
>
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Mon May 18 10:57:20 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 18 May 2020 10:57:20 +0200
Subject: [Rd] dbinom link
In-Reply-To: <CAB8pepwYOmEuJEAXimvhXC3u388LfBNn_M3KRDwSdykbwedy1g@mail.gmail.com>
References: <242242C7-8A65-4EAB-A955-65BA78CC7D8E@illinois.edu>
 <CAB8pepwYOmEuJEAXimvhXC3u388LfBNn_M3KRDwSdykbwedy1g@mail.gmail.com>
Message-ID: <4C1EFD4A-18CC-4FCF-B4CB-C9E1CFF60DAE@gmail.com>

In principle a good idea, but I'm not sure the whereabouts of Catherine Loader are known at this point. Last peeps from her on the net seem to be about a decade old.

.pd

> On 18 May 2020, at 10:31 , Abby Spurdle <spurdle.a at gmail.com> wrote:
> 
> This has come up before.
> 
> Here's the last time:
> https://stat.ethz.ch/pipermail/r-devel/2019-March/077478.html
> 
> I guess my answer to the following the question...
> 
>    Perhaps we should ask permission to
>    nail the thing down somewhere on r-project.org?
> 
> ...would be, to reproduce it somewhere.
> And then update the link in the binom help file.
> 
> Given that the article was previously available freely (with no
> apparent restrictions on reproducing it), and that the author has
> significant published works which are open access, I'd be surprised if
> there's any objection to reproducing it.
> 
> 
> On Mon, May 18, 2020 at 8:01 PM Koenker, Roger W <rkoenker at illinois.edu> wrote:
>> 
>> FWIW the link from ?dbinom to the Loader paper on Binomials is broken but the paper seems to be
>> available here:   https://octave.1599824.n4.nabble.com/attachment/3829107/0/loader2000Fast.pdf
>> 
>> Roger Koenker
>> r.koenker at ucl.ac.uk<mailto:r.koenker at ucl.ac.uk>
>> Honorary Professor of Economics
>> Department of Economics, UCL
>> Emeritus Professor of Economics
>> and Statistics, UIUC
>> 
>> 
>> 
>>        [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Mon May 18 11:39:04 2020
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Mon, 18 May 2020 10:39:04 +0100
Subject: [Rd] dbinom link
In-Reply-To: <4C1EFD4A-18CC-4FCF-B4CB-C9E1CFF60DAE@gmail.com>
References: <242242C7-8A65-4EAB-A955-65BA78CC7D8E@illinois.edu>
 <CAB8pepwYOmEuJEAXimvhXC3u388LfBNn_M3KRDwSdykbwedy1g@mail.gmail.com>
 <4C1EFD4A-18CC-4FCF-B4CB-C9E1CFF60DAE@gmail.com>
Message-ID: <5e5c0a02-4bae-5a60-6e80-869d2b6e15f8@stats.ox.ac.uk>

On 18/05/2020 09:57, peter dalgaard wrote:
> In principle a good idea, but I'm not sure the whereabouts of Catherine Loader are known at this point. Last peeps from her on the net seem to be about a decade old.

All attempts to contact Dr Loader re the locfit package failed, 
including those earlier this year.

> .pd
> 
>> On 18 May 2020, at 10:31 , Abby Spurdle <spurdle.a at gmail.com> wrote:
>>
>> This has come up before.
>>
>> Here's the last time:
>> https://stat.ethz.ch/pipermail/r-devel/2019-March/077478.html
>>
>> I guess my answer to the following the question...
>>
>>     Perhaps we should ask permission to
>>     nail the thing down somewhere on r-project.org?
>>
>> ...would be, to reproduce it somewhere.
>> And then update the link in the binom help file.
>>
>> Given that the article was previously available freely (with no
>> apparent restrictions on reproducing it), and that the author has
>> significant published works which are open access, I'd be surprised if
>> there's any objection to reproducing it.
>>
>>
>> On Mon, May 18, 2020 at 8:01 PM Koenker, Roger W <rkoenker at illinois.edu> wrote:
>>>
>>> FWIW the link from ?dbinom to the Loader paper on Binomials is broken but the paper seems to be
>>> available here:   https://octave.1599824.n4.nabble.com/attachment/3829107/0/loader2000Fast.pdf
>>>
>>> Roger Koenker
>>> r.koenker at ucl.ac.uk<mailto:r.koenker at ucl.ac.uk>
>>> Honorary Professor of Economics
>>> Department of Economics, UCL
>>> Emeritus Professor of Economics
>>> and Statistics, UIUC
>>>
>>>
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From @g|@nner|n| @end|ng |rom gm@||@com  Mon May 18 17:23:57 2020
From: @g|@nner|n| @end|ng |rom gm@||@com (Simone Giannerini)
Date: Mon, 18 May 2020 17:23:57 +0200
Subject: [Rd] parRapply and parCapply return a list in corner cases
Message-ID: <CANcXGiyXS77MhXG0ekCRiEs=DQgaUojxjsCVgezDj5UBReJiQA@mail.gmail.com>

According to ?parCapply:

parRapply and parCapply always return a vector.

This appears not to be the case in the following minimal reproducible example:

>     library(parallel)
>     nslaves <- 2
>     cl      <- makeCluster(nslaves)
>     X       <- matrix(2,nrow=3,ncol=4)
>     X       <- rbind(c(1,1,0,1),X)
>     tv <- parCapply(cl,X,FUN=function(x){
+         ind <- x[1]
+         y   <- x[-1]
+         if(ind==1){
+             r1 <- sum(y)
+         }else{
+             r1 <- logical(0)
+         }
+         return(unlist(as.numeric(c(ind,r1))))
+     })
> tv
[[1]]
[1] 1

[[2]]
[1] 6

[[3]]
[1] 1

[[4]]
[1] 6

[[5]]
[1] 0

[[6]]
[1] 1 6

> class(tv)
[1] "list"
> sessionInfo()
R version 4.0.0 (2020-04-24)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18363)

Matrix products: default

locale:
[1] LC_COLLATE=Italian_Italy.1252  LC_CTYPE=Italian_Italy.1252
[3] LC_MONETARY=Italian_Italy.1252 LC_NUMERIC=C
[5] LC_TIME=Italian_Italy.1252

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets
methods   base

loaded via a namespace (and not attached):
[1] compiler_4.0.0

-- 
_________________________________________________________________

PHILOSOPHICAL TRANSACTIONS OF THE ROYAL SOCIETY A
Theme issue ?DNA as information?
edited by Julyan H.E. Cartwright, Simone Giannerini and Diego L. Gonz?lez
_________________________________________________________________

Simone Giannerini
Dipartimento di Scienze Statistiche "Paolo Fortunati"
Universita' di Bologna
Via delle belle arti 41 - 40126  Bologna,  ITALY
Tel: +39 051 2098262  Fax: +39 051 232153
https://www.unibo.it/sitoweb/simone.giannerini/


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Mon May 18 17:31:52 2020
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Mon, 18 May 2020 16:31:52 +0100
Subject: [Rd] order function called on a data.frame?
In-Reply-To: <CAOO9MKX53QQuFk+u=octbhcmsg8AQVpMws1RtDomWwgJ=Zf8tQ@mail.gmail.com>
References: <CAOO9MKX53QQuFk+u=octbhcmsg8AQVpMws1RtDomWwgJ=Zf8tQ@mail.gmail.com>
Message-ID: <982d50f0-ca20-b860-9f06-3e30d58d58f8@sapo.pt>

Hello,

There is a result with lists? I am getting


order(list(letters, 1:26))
#Error in order(list(letters, 1:26)) :
#  unimplemented type 'list' in 'orderVector1'

order(data.frame(letters, 1:26))
# [1] 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
#[22] 48 49 50 51 52  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
#[43] 17 18 19 20 21 22 23 24 25 26


And I agree that order with data.frames should give a warning. The 
result is indeed useless:

data.frame(letters, 1:26)[order(data.frame(letters, 1:26)), ]


Hope this helps,

Rui Barradas


?s 00:19 de 18/05/20, Jan Gorecki escreveu:
> Hi,
> base::order main input arguments are defined as:
> 
> a sequence of numeric, complex, character or logical vectors, all of
> the same length, or a classed R object
> 
> When passing a list or a data.frame, the resuts seems to be a bit
> useless. Shouldn't that raise an error, or at least warning?
> 
> Best Regards,
> Jan Gorecki
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From |@wrence@m|ch@e| @end|ng |rom gene@com  Mon May 18 17:51:45 2020
From: |@wrence@m|ch@e| @end|ng |rom gene@com (Michael Lawrence)
Date: Mon, 18 May 2020 08:51:45 -0700
Subject: [Rd] order function called on a data.frame?
In-Reply-To: <982d50f0-ca20-b860-9f06-3e30d58d58f8@sapo.pt>
References: <CAOO9MKX53QQuFk+u=octbhcmsg8AQVpMws1RtDomWwgJ=Zf8tQ@mail.gmail.com>
 <982d50f0-ca20-b860-9f06-3e30d58d58f8@sapo.pt>
Message-ID: <CAOQ5Nyc4ehE36EU9M09af5NUZ37QCHe4e-OLBEvbMOF+pZ24QA@mail.gmail.com>

I guess we could make it do the equivalent of do.call(order, df).

On Mon, May 18, 2020 at 8:32 AM Rui Barradas <ruipbarradas at sapo.pt> wrote:
>
> Hello,
>
> There is a result with lists? I am getting
>
>
> order(list(letters, 1:26))
> #Error in order(list(letters, 1:26)) :
> #  unimplemented type 'list' in 'orderVector1'
>
> order(data.frame(letters, 1:26))
> # [1] 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
> #[22] 48 49 50 51 52  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
> #[43] 17 18 19 20 21 22 23 24 25 26
>
>
> And I agree that order with data.frames should give a warning. The
> result is indeed useless:
>
> data.frame(letters, 1:26)[order(data.frame(letters, 1:26)), ]
>
>
> Hope this helps,
>
> Rui Barradas
>
>
> ?s 00:19 de 18/05/20, Jan Gorecki escreveu:
> > Hi,
> > base::order main input arguments are defined as:
> >
> > a sequence of numeric, complex, character or logical vectors, all of
> > the same length, or a classed R object
> >
> > When passing a list or a data.frame, the resuts seems to be a bit
> > useless. Shouldn't that raise an error, or at least warning?
> >
> > Best Regards,
> > Jan Gorecki
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Michael Lawrence
Senior Scientist, Data Science and Statistical Computing
Genentech, A Member of the Roche Group
Office +1 (650) 225-7760
michafla at gene.com

Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube


From rocke|@to @end|ng |rom gm@||@com  Mon May 18 18:23:13 2020
From: rocke|@to @end|ng |rom gm@||@com (Tobias Rockel)
Date: Mon, 18 May 2020 18:23:13 +0200
Subject: [Rd] quantile() type 1 for some ordered factors in R-devel
Message-ID: <CAPs9D0Rbkdqs2DxE1jn6ovckOmiFY3hnXyFv62K+hiOYq+xadQ@mail.gmail.com>

Hi,

In R-devel (2020-05-17 r78478) quantile() type 1 seems to behave a little
bit strange for some ordered factors:
quantile(factor(1:3, ordered = TRUE), 0.5, type = 1)
returns ?2? as expected. But
quantile(factor(2:4, ordered = TRUE), 0.5, type = 1)
returns ?4? and
quantile(factor(3:5, ordered = TRUE), 0.5, type = 1)
returns ?NA?. Furthermore, the function returns ?NA? for calls like
quantile(factor(c("a", "b", "c"), ordered = TRUE), 0.5, type = 1)

In R 4.0.0 everything seems fine (return values ?2?, ?3?, ?4?, ?b?). If the
vectors are treated as numeric, everything seems to work fine in R-devel,
too. For example
quantile(3:5, 0.5, type = 1)
returns ?4? in R-devel and R 4.0.0.

Best regards,
Tobias Rockel

	[[alternative HTML version deleted]]


From wdun|@p @end|ng |rom t|bco@com  Mon May 18 18:27:25 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Mon, 18 May 2020 09:27:25 -0700
Subject: [Rd] order function called on a data.frame?
In-Reply-To: <CAOQ5Nyc4ehE36EU9M09af5NUZ37QCHe4e-OLBEvbMOF+pZ24QA@mail.gmail.com>
References: <CAOO9MKX53QQuFk+u=octbhcmsg8AQVpMws1RtDomWwgJ=Zf8tQ@mail.gmail.com>
 <982d50f0-ca20-b860-9f06-3e30d58d58f8@sapo.pt>
 <CAOQ5Nyc4ehE36EU9M09af5NUZ37QCHe4e-OLBEvbMOF+pZ24QA@mail.gmail.com>
Message-ID: <CAF8bMcYm4WYzKG4HxBaunRLEQEK3p+GgP07_BHa8do3PU+Ap5g@mail.gmail.com>

do.call(order, df).  ->  do.call(order, unname(df)).

While you are looking at order(), it would be nice if ';decreasing' could
be a vector the the length of list(...) so you could ask to sort some
columns in increasing order and some decreasing.  I thought I put this on
bugzilla eons ago, but perhaps not.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Mon, May 18, 2020 at 8:52 AM Michael Lawrence via R-devel <
r-devel at r-project.org> wrote:

> I guess we could make it do the equivalent of do.call(order, df).
>
> On Mon, May 18, 2020 at 8:32 AM Rui Barradas <ruipbarradas at sapo.pt> wrote:
> >
> > Hello,
> >
> > There is a result with lists? I am getting
> >
> >
> > order(list(letters, 1:26))
> > #Error in order(list(letters, 1:26)) :
> > #  unimplemented type 'list' in 'orderVector1'
> >
> > order(data.frame(letters, 1:26))
> > # [1] 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
> > #[22] 48 49 50 51 52  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
> > #[43] 17 18 19 20 21 22 23 24 25 26
> >
> >
> > And I agree that order with data.frames should give a warning. The
> > result is indeed useless:
> >
> > data.frame(letters, 1:26)[order(data.frame(letters, 1:26)), ]
> >
> >
> > Hope this helps,
> >
> > Rui Barradas
> >
> >
> > ?s 00:19 de 18/05/20, Jan Gorecki escreveu:
> > > Hi,
> > > base::order main input arguments are defined as:
> > >
> > > a sequence of numeric, complex, character or logical vectors, all of
> > > the same length, or a classed R object
> > >
> > > When passing a list or a data.frame, the resuts seems to be a bit
> > > useless. Shouldn't that raise an error, or at least warning?
> > >
> > > Best Regards,
> > > Jan Gorecki
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> Michael Lawrence
> Senior Scientist, Data Science and Statistical Computing
> Genentech, A Member of the Roche Group
> Office +1 (650) 225-7760
> michafla at gene.com
>
> Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From gr|xor @end|ng |rom gm@||@com  Mon May 18 21:51:07 2020
From: gr|xor @end|ng |rom gm@||@com (Trang Le)
Date: Mon, 18 May 2020 15:51:07 -0400
Subject: [Rd] quantile() type 1 for some ordered factors in R-devel
In-Reply-To: <CAPs9D0Rbkdqs2DxE1jn6ovckOmiFY3hnXyFv62K+hiOYq+xadQ@mail.gmail.com>
References: <CAPs9D0Rbkdqs2DxE1jn6ovckOmiFY3hnXyFv62K+hiOYq+xadQ@mail.gmail.com>
Message-ID: <CABNPiSKYFCrCmyBBNOtxGGONxZ0LCh0CpZJRdrQaqTgNMUL+OQ@mail.gmail.com>

Hi Tobias,

I believe this is due to the implementation of the new method for c():
c.factor() on May 11, 2020. I have very recently experienced issues around
this addition as well.

For this particular instance, the following line of code in
quantile.default() no longer gives "integer" but instead yields "factor".

x <- c(x[1L], x[1L], x, x[n], x[n])

Hence, the following calculation qs results in named factor instead of
integer, which is not expected as input in the final

qs <- factor(qs, levels = seq_along(lx), labels = lx, ordered = TRUE)

Personally, I'm a bit surprised that this change is being made on a minor
release.

Best,
Trang Le

On Mon, May 18, 2020 at 12:36 PM Tobias Rockel <rockel.to at gmail.com> wrote:

> Hi,
>
> In R-devel (2020-05-17 r78478) quantile() type 1 seems to behave a little
> bit strange for some ordered factors:
> quantile(factor(1:3, ordered = TRUE), 0.5, type = 1)
> returns ?2? as expected. But
> quantile(factor(2:4, ordered = TRUE), 0.5, type = 1)
> returns ?4? and
> quantile(factor(3:5, ordered = TRUE), 0.5, type = 1)
> returns ?NA?. Furthermore, the function returns ?NA? for calls like
> quantile(factor(c("a", "b", "c"), ordered = TRUE), 0.5, type = 1)
>
> In R 4.0.0 everything seems fine (return values ?2?, ?3?, ?4?, ?b?). If the
> vectors are treated as numeric, everything seems to work fine in R-devel,
> too. For example
> quantile(3:5, 0.5, type = 1)
> returns ?4? in R-devel and R 4.0.0.
>
> Best regards,
> Tobias Rockel
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From z@gu @end|ng |rom dk|z-he|de|berg@de  Tue May 19 11:26:42 2020
From: z@gu @end|ng |rom dk|z-he|de|berg@de (Gu, Zuguang)
Date: Tue, 19 May 2020 09:26:42 +0000
Subject: [Rd] Graphic parameters with length zero in grid cause R to crash
Message-ID: <1589880429160.84649@dkfz-heidelberg.de>

Hi,


I found in grid package, if the graphic parameters have zero length, R crashes. In the

following code, I only tested `grid.rect()` and the `fill` parameter, but I think it should

be similar as other grid graphic functions.


In `gpar()` function, the graphic parameters are not allowed to have zero length, but
we can make them with zero length by first generating a `gpar` object and then subsetting
with zero length index, such as follows:

```
> library(grid)
> gp = gpar(fill = 1)
> grid.rect(gp = gp[integer(0)])
```

After Executing the code, R crashes with message "Floating point exception: 8?".

If I set the value of `fill` to an integer, the following code causes an error with a
not informative error message.

> library(grid)
> gp = gpar(fill = as.integer(1))
> grid.rect(gp = gp[integer(0)])
Error in grid.Call.graphics(C_rect, x$x, x$y, x$width, x$height, resolveHJust(x$just,  :
  numerical color values must be >= 0, found -192882464

But sometimes it also causes R to crash.


My session info:


```

> sessionInfo()
R version 4.0.0 (2020-04-24)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Catalina 10.15.4

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] colorout_1.2-2

loaded via a namespace (and not attached):
[1] compiler_4.0.0?
```


Best regards,
Zuguang Gu?


	[[alternative HTML version deleted]]


From bob @end|ng |rom rud@|@  Wed May 20 00:44:37 2020
From: bob @end|ng |rom rud@|@ (Bob Rudis)
Date: Tue, 19 May 2020 18:44:37 -0400
Subject: [Rd] 
 Graphic parameters with length zero in grid cause R to crash
In-Reply-To: <1589880429160.84649@dkfz-heidelberg.de>
References: <1589880429160.84649@dkfz-heidelberg.de>
Message-ID: <CAA-FpKXVYttZd8Lx7vY5Fr8D0b64aBDOczVaHh=DM5+HNF7XLA@mail.gmail.com>

Reproduced on latest Catalina beta and R 4.0.0 and latest RStudio
devel build (it crashes the session).

On Tue, May 19, 2020 at 7:39 AM Gu, Zuguang <z.gu at dkfz-heidelberg.de> wrote:
>
> Hi,
>
>
> I found in grid package, if the graphic parameters have zero length, R crashes. In the
>
> following code, I only tested `grid.rect()` and the `fill` parameter, but I think it should
>
> be similar as other grid graphic functions.
>
>
> In `gpar()` function, the graphic parameters are not allowed to have zero length, but
> we can make them with zero length by first generating a `gpar` object and then subsetting
> with zero length index, such as follows:
>
> ```
> > library(grid)
> > gp = gpar(fill = 1)
> > grid.rect(gp = gp[integer(0)])
> ```
>
> After Executing the code, R crashes with message "Floating point exception: 8?".
>
> If I set the value of `fill` to an integer, the following code causes an error with a
> not informative error message.
>
> > library(grid)
> > gp = gpar(fill = as.integer(1))
> > grid.rect(gp = gp[integer(0)])
> Error in grid.Call.graphics(C_rect, x$x, x$y, x$width, x$height, resolveHJust(x$just,  :
>   numerical color values must be >= 0, found -192882464
>
> But sometimes it also causes R to crash.
>
>
> My session info:
>
>
> ```
>
> > sessionInfo()
> R version 4.0.0 (2020-04-24)
> Platform: x86_64-apple-darwin17.0 (64-bit)
> Running under: macOS Catalina 10.15.4
>
> Matrix products: default
> BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
> LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
>
> locale:
> [1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> other attached packages:
> [1] colorout_1.2-2
>
> loaded via a namespace (and not attached):
> [1] compiler_4.0.0?
> ```
>
>
> Best regards,
> Zuguang Gu?
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Wed May 20 00:47:10 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Wed, 20 May 2020 10:47:10 +1200
Subject: [Rd] 
 Graphic parameters with length zero in grid cause R to crash
In-Reply-To: <1589880429160.84649@dkfz-heidelberg.de>
References: <1589880429160.84649@dkfz-heidelberg.de>
Message-ID: <d9c25b88-527d-5313-c951-d579e55520a6@stat.auckland.ac.nz>


Yeah, that seems not good.

I will take a look.

Thanks for the report!

Paul

On 19/05/20 9:26 pm, Gu, Zuguang wrote:
> Hi,
> 
> 
> I found in grid package, if the graphic parameters have zero length, R crashes. In the
> 
> following code, I only tested `grid.rect()` and the `fill` parameter, but I think it should
> 
> be similar as other grid graphic functions.
> 
> 
> In `gpar()` function, the graphic parameters are not allowed to have zero length, but
> we can make them with zero length by first generating a `gpar` object and then subsetting
> with zero length index, such as follows:
> 
> ```
>> library(grid)
>> gp = gpar(fill = 1)
>> grid.rect(gp = gp[integer(0)])
> ```
> 
> After Executing the code, R crashes with message "Floating point exception: 8?".
> 
> If I set the value of `fill` to an integer, the following code causes an error with a
> not informative error message.
> 
>> library(grid)
>> gp = gpar(fill = as.integer(1))
>> grid.rect(gp = gp[integer(0)])
> Error in grid.Call.graphics(C_rect, x$x, x$y, x$width, x$height, resolveHJust(x$just,  :
>    numerical color values must be >= 0, found -192882464
> 
> But sometimes it also causes R to crash.
> 
> 
> My session info:
> 
> 
> ```
> 
>> sessionInfo()
> R version 4.0.0 (2020-04-24)
> Platform: x86_64-apple-darwin17.0 (64-bit)
> Running under: macOS Catalina 10.15.4
> 
> Matrix products: default
> BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
> LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
> 
> locale:
> [1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> other attached packages:
> [1] colorout_1.2-2
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.0.0?
> ```
> 
> 
> Best regards,
> Zuguang Gu?
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From btyner @end|ng |rom gm@||@com  Wed May 20 04:36:16 2020
From: btyner @end|ng |rom gm@||@com (Benjamin Tyner)
Date: Tue, 19 May 2020 22:36:16 -0400
Subject: [Rd] failed check in reg-tests-1b.R
Message-ID: <6750bc1b-73ff-7fe3-753a-ecdf6381c94a@gmail.com>

Not certain this is actually a bug, so posting here.

I'm on Ubuntu 18.04.4 LTS, building R version 4.0.0. The "configure" and 
"make" steps are successful, but the "make check" step fails when it 
gets to this part of ./tests/reg-tests-1b.R:

 ?? > ## methods() gave two wrong warnings in some cases:
 ?? > op <- options(warn = 2)# no warning, please!
 ?? > m1 <- methods(na.omit) ## should give (no warning):
 ?? > ##
 ?? > setClass("bla")
 ?? > setMethod("na.omit", "bla", function(object, ...) "na.omit(<bla>)")
 ?? Error: package 'codetools' was installed before R 4.0.0: please 
re-install it
 ?? Execution halted

It appears to be picking up the older version of codetools from $R_LIBS; 
if I unset R_LIBS, then it works just fine.

So I'm wondering, is it a bug, or is the user's own fault for having 
R_LIBS set whilst trying to build R?

Regards,

Ben


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Wed May 20 07:53:14 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Wed, 20 May 2020 07:53:14 +0200
Subject: [Rd] quantile() type 1 for some ordered factors in R-devel
In-Reply-To: <CAPs9D0Rbkdqs2DxE1jn6ovckOmiFY3hnXyFv62K+hiOYq+xadQ@mail.gmail.com>
References: <CAPs9D0Rbkdqs2DxE1jn6ovckOmiFY3hnXyFv62K+hiOYq+xadQ@mail.gmail.com>
Message-ID: <24260.50634.491100.893332@hornik.net>

>>>>> Tobias Rockel writes:

Thanks for spotting this, and also to Hadley for reporting to me
directly.

Fixed now with c78501.

Best
-k

> Hi,
> In R-devel (2020-05-17 r78478) quantile() type 1 seems to behave a little
> bit strange for some ordered factors:
> quantile(factor(1:3, ordered = TRUE), 0.5, type = 1)
> returns ?2? as expected. But
> quantile(factor(2:4, ordered = TRUE), 0.5, type = 1)
> returns ?4? and
> quantile(factor(3:5, ordered = TRUE), 0.5, type = 1)
> returns ?NA?. Furthermore, the function returns ?NA? for calls like
> quantile(factor(c("a", "b", "c"), ordered = TRUE), 0.5, type = 1)

> In R 4.0.0 everything seems fine (return values ?2?, ?3?, ?4?, ?b?). If the
> vectors are treated as numeric, everything seems to work fine in R-devel,
> too. For example
> quantile(3:5, 0.5, type = 1)
> returns ?4? in R-devel and R 4.0.0.

> Best regards,
> Tobias Rockel

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From morg@n@em@||box @end|ng |rom gm@||@com  Wed May 20 12:40:06 2020
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Wed, 20 May 2020 11:40:06 +0100
Subject: [Rd] Precision of function mean,bug?
Message-ID: <CAL0QV_OUF1_VW+hHPqKyHfP8cM5Quu7VuT7V8njkrLW0FuW6xw@mail.gmail.com>

Hello R-dev,

Yesterday, while I was testing the newly implemented function pmean in
package kit, I noticed a mismatch in the output of the below R expressions.

set.seed(123)
n=1e3L
idx=5
x=rnorm(n)
y=rnorm(n)
z=rnorm(n)
a=(x[idx]+y[idx]+z[idx])/3
b=mean(c(x[idx],y[idx],z[idx]))
a==b
# [1] FALSE

For idx= 1, 2, 3, 4 the last line is equal to TRUE. For 5, 6 and many
others the difference is small but still.
Is that expected or is it a bug?

Thank you
Best Regards
Morgan Jacob

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Wed May 20 12:59:46 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 20 May 2020 12:59:46 +0200
Subject: [Rd] Precision of function mean,bug?
In-Reply-To: <CAL0QV_OUF1_VW+hHPqKyHfP8cM5Quu7VuT7V8njkrLW0FuW6xw@mail.gmail.com>
References: <CAL0QV_OUF1_VW+hHPqKyHfP8cM5Quu7VuT7V8njkrLW0FuW6xw@mail.gmail.com>
Message-ID: <B2D98335-1E8F-4488-9611-32E8EE3FF41E@gmail.com>

Expected, see FAQ 7.31.

You just can't trust == on FP operations. Notice also

> a2=(z[idx]+x[idx]+y[idx])/3
> a2==a
[1] FALSE
> a2==b
[1] TRUE

-pd

> On 20 May 2020, at 12:40 , Morgan Morgan <morgan.emailbox at gmail.com> wrote:
> 
> Hello R-dev,
> 
> Yesterday, while I was testing the newly implemented function pmean in
> package kit, I noticed a mismatch in the output of the below R expressions.
> 
> set.seed(123)
> n=1e3L
> idx=5
> x=rnorm(n)
> y=rnorm(n)
> z=rnorm(n)
> a=(x[idx]+y[idx]+z[idx])/3
> b=mean(c(x[idx],y[idx],z[idx]))
> a==b
> # [1] FALSE
> 
> For idx= 1, 2, 3, 4 the last line is equal to TRUE. For 5, 6 and many
> others the difference is small but still.
> Is that expected or is it a bug?
> 
> Thank you
> Best Regards
> Morgan Jacob
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed May 20 13:03:25 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 20 May 2020 13:03:25 +0200
Subject: [Rd] edit() doubles backslashes when keep.source=TRUE
In-Reply-To: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
References: <CAF8bMcaGMe6msdo=WLQCD27gyjsw5g6_O32tG7S-Du+DiB4zVw@mail.gmail.com>
Message-ID: <a3d58c23-33ab-088a-a49c-692530103eba@gmail.com>

Thanks for reporting this, it is a bug, now fixed in R-devel and 
R-patched (PR#17800).

Best
Tomas

On 5/15/20 3:50 AM, William Dunlap via R-devel wrote:
> Is it just my installation or does edit() (or fix(), etc.) in R-4.0.0
> double all the backslashes when options(keep.source=TRUE)?  E.g.,
>
>> options(keep.source=TRUE)
>> f <- function(x) { cat("\t", x, "\n", sep="") }
>> edit(f) # exit the editor without making any changes
> The editor (vi or notepad) shows doubled backslashes
>      function(x) { cat("\\t", x, "\\n", sep="") }
> as does the return value of edit().
>
> If I set options(keep.source=FALSE) before defining 'f' or remove t's
> 'srcref' attribute then the backslashes are left alone.
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From gr|xor @end|ng |rom gm@||@com  Wed May 20 13:14:41 2020
From: gr|xor @end|ng |rom gm@||@com (Trang Le)
Date: Wed, 20 May 2020 07:14:41 -0400
Subject: [Rd] quantile() type 1 for some ordered factors in R-devel
In-Reply-To: <24260.50634.491100.893332@hornik.net>
References: <CAPs9D0Rbkdqs2DxE1jn6ovckOmiFY3hnXyFv62K+hiOYq+xadQ@mail.gmail.com>
 <24260.50634.491100.893332@hornik.net>
Message-ID: <CABNPiSKQcvDr0vtDBFnVt3jdncsHGc0icFb5QJNqpEeSjBrb1A@mail.gmail.com>

Hi Kurt,

Thank you for fixing quantile(). However, do you think c.factor() can
potentially break more functions? For example, with this new change,
classification from the partykit package using predict() comes back NA
because of this:

https://github.com/cran/partykit/blob/597245ef3dfc98411ce919b74c68ba565f077c47/R/party.R#L500

I understand that most of the fixes will probably be simple with
as.numeric() or as.integer(), but tracing down these breaks can be
time-consuming <https://twitter.com/trang1618/status/1260906905041432578>.
What about a warning whenever code that would trigger c.factor() is called?
This way users are given a chance to update packages and code.

Thanks,
Trang

On Wed, May 20, 2020 at 1:53 AM Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:

> >>>>> Tobias Rockel writes:
>
> Thanks for spotting this, and also to Hadley for reporting to me
> directly.
>
> Fixed now with c78501.
>
> Best
> -k
>
> > Hi,
> > In R-devel (2020-05-17 r78478) quantile() type 1 seems to behave a little
> > bit strange for some ordered factors:
> > quantile(factor(1:3, ordered = TRUE), 0.5, type = 1)
> > returns ?2? as expected. But
> > quantile(factor(2:4, ordered = TRUE), 0.5, type = 1)
> > returns ?4? and
> > quantile(factor(3:5, ordered = TRUE), 0.5, type = 1)
> > returns ?NA?. Furthermore, the function returns ?NA? for calls like
> > quantile(factor(c("a", "b", "c"), ordered = TRUE), 0.5, type = 1)
>
> > In R 4.0.0 everything seems fine (return values ?2?, ?3?, ?4?, ?b?). If
> the
> > vectors are treated as numeric, everything seems to work fine in R-devel,
> > too. For example
> > quantile(3:5, 0.5, type = 1)
> > returns ?4? in R-devel and R 4.0.0.
>
> > Best regards,
> > Tobias Rockel
>
> >       [[alternative HTML version deleted]]
>
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Wed May 20 13:17:06 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Wed, 20 May 2020 13:17:06 +0200
Subject: [Rd] quantile() type 1 for some ordered factors in R-devel
In-Reply-To: <CABNPiSKQcvDr0vtDBFnVt3jdncsHGc0icFb5QJNqpEeSjBrb1A@mail.gmail.com>
References: <CAPs9D0Rbkdqs2DxE1jn6ovckOmiFY3hnXyFv62K+hiOYq+xadQ@mail.gmail.com>
 <24260.50634.491100.893332@hornik.net>
 <CABNPiSKQcvDr0vtDBFnVt3jdncsHGc0icFb5QJNqpEeSjBrb1A@mail.gmail.com>
Message-ID: <24261.4530.65585.795499@hornik.net>

>>>>> Trang Le writes:

> Hi Kurt,
> Thank you for fixing quantile(). However, do you think c.factor() can
> potentially break more functions? For example, with this new change,
> classification from the partykit package using predict() comes back NA because
> of this:

> https://github.com/cran/partykit/blob/597245ef3dfc98411ce919b74c68ba565f077c47/R/party.R#L500

All issues in the CRAN checks were identified and reported, and should
be fixed shortly.

Best
-k

> I understand that most of the fixes will probably be simple with as.numeric()
> or as.integer(), but tracing down these breaks can be time-consuming. What
> about a warning whenever code that would trigger c.factor() is called? This
> way users are given a chance to update packages and code.

> Thanks,
> Trang

> On Wed, May 20, 2020 at 1:53 AM Kurt Hornik <Kurt.Hornik at wu.ac.at> wrote:

>>>>>> Tobias Rockel writes:
   
>     Thanks for spotting this, and also to Hadley for reporting to me
>     directly.
   
>     Fixed now with c78501.
   
>     Best
>     -k
   
>> Hi,
>> In R-devel (2020-05-17 r78478) quantile() type 1 seems to behave a
>     little
>> bit strange for some ordered factors:
>> quantile(factor(1:3, ordered = TRUE), 0.5, type = 1)
>> returns ?2? as expected. But
>> quantile(factor(2:4, ordered = TRUE), 0.5, type = 1)
>> returns ?4? and
>> quantile(factor(3:5, ordered = TRUE), 0.5, type = 1)
>> returns ?NA?. Furthermore, the function returns ?NA? for calls like
>> quantile(factor(c("a", "b", "c"), ordered = TRUE), 0.5, type = 1)
   
>> In R 4.0.0 everything seems fine (return values ?2?, ?3?, ?4?, ?b?). If
>     the
>> vectors are treated as numeric, everything seems to work fine in
>     R-devel,
>> too. For example
>> quantile(3:5, 0.5, type = 1)
>> returns ?4? in R-devel and R 4.0.0.
   
>> Best regards,
>> Tobias Rockel
   
>> ? ? ? ?[[alternative HTML version deleted]]
   
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
   
>     ______________________________________________
>     R-devel at r-project.org mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed May 20 14:13:27 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 20 May 2020 14:13:27 +0200
Subject: [Rd] system(timeout=) may timeout with 0 exit code
In-Reply-To: <CAOO9MKUrVQrz_DAM8Ec7Y9uWib2Q1VOcDo1FYdfN5ZhKjMdt_g@mail.gmail.com>
References: <CAOO9MKUrVQrz_DAM8Ec7Y9uWib2Q1VOcDo1FYdfN5ZhKjMdt_g@mail.gmail.com>
Message-ID: <ab54eb5e-b8ed-ed66-c2d9-9cc52ce5adf9@gmail.com>

On 5/14/20 8:34 PM, Jan Gorecki wrote:
> Hi R developers,
>
> I observed that system(timeout=) may still return exit code 0, when
> killing the process due to timeout.
>
> In src/unix/sys-unix.c there is
>
> #define KILL_SIGNAL1 SIGINT
> #define KILL_SIGNAL2 SIGTERM
> #define KILL_SIGNAL3 SIGKILL
> #define EMERGENCY_TIMEOUT 20
>
> After little bit of debugging I observed that total time of system
> call is provided timeout value + 20s. That means EMERGENCY_TIMEOUT 20
> kicked in, adding 20 seconds.
>
> I don't have a reproducible example, but following code, and output
> file below should be enough to ensure that there is a problem there
> (exit code 0 despite timeout).

Thanks for the report, but I can't tell from the report what the problem 
is, I would really need a reproducible example, and ideally one that 
uses only minimal/trivial child processes. I tried with such examples on 
my system, but they did not trigger the problem.

In this example, SIGINT succeeds in terminating the child process

 > system.time(print(system("while /bin/true ; do /bin/true ; done", 
timeout=1)))
[1] 124
 ?? user? system elapsed
 ? 0.712?? 0.316?? 1.002

In this example, SIGTERM succeeds (after additional 20s)

 > system.time(print(system("trap '' INT ; while /bin/true ; do 
/bin/true ; done", timeout=1)))
[1] 124
 ?? user? system elapsed
 ?14.813?? 6.641? 21.002

In this example, SIGKILL succeeds (after additional 40s)

 > system.time(print(system("trap '' INT TERM ; while /bin/true ; do 
/bin/true ; done", timeout=1)))
[1] 124
 ?? user? system elapsed
 ?29.075? 12.918? 41.002

In these examples, the execution time and the exit status is as 
documented in ?system.

Best
Tomas

>
> warn = NULL
> p = proc.time()[[3L]]
> tryCatch(
>    ret <- system(cmd, timeout=timeout_s),
>    warning = function(w) {
>      warn <<- w[["message"]]
>    }
> )
> if (length(warn) && ret==0L)
>    cat(sprintf("command '%s' timed out(?) but still exited with 0 code,
> timeout %ss, took %ss, warning '%s'\n",
>                cmd, timeout_s, proc.time()[[3L]]-p, warn),
> file="timeout-exit-codes.out", append=TRUE)
>
> And the content of timeout-exit-codes.out:
>
> command '/bin/bash -c "./_launcher/solution.R > log.out 2> log.err"'
> timed out(?) but still exited with 0 code, timeout 7200s, took
> 7220.005s, warning '/bin/bash -c "./_launcher/solution.R > log.out 2>
> log.err"' timed out after 7200s'
>
> Thank you,
> Jan Gorecki
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jte||er|@@rproject @end|ng |rom gm@||@com  Wed May 20 18:11:50 2020
From: jte||er|@@rproject @end|ng |rom gm@||@com (Juan Telleria Ruiz de Aguirre)
Date: Wed, 20 May 2020 18:11:50 +0200
Subject: [Rd] Feature Request: User Prompt + Message First Execution when
 "Managing Search Path Conflicts"
Message-ID: <CAJXDcw1hn-Gdd8ASe4SiyMyd5GSD9KEQy0yyz6Ad09pXVwyHVw@mail.gmail.com>

Dear R Developers,

###
# Context:
###

When managing Search Path Conflicts (See:
https://developer.r-project.org/Blog/public/2019/03/19/managing-search-path-conflicts/index.html),
with:

options(conflicts.policy = "strict")

We get the following behaviour when loading a package (Eg: dplyr):

library(dplyr)
## Error: Conflicts attaching package ?dplyr?:
##
## The following objects are masked from ?package:stats?:
##
##     filter, lag
##
## The following objects are masked from ?package:base?:
##
##     intersect, setdiff, setequal, union

So we would have to solve the conflict by writing:

library(dplyr,
        mask.ok = c("filter", "lag",
                    "intersect", "setdiff", "setequal",
                    "union"))

So my feature request proposals:

###
# Feature Request 1: Interactive Session
###

Would it be possible to raise an input prompt, which asks user for an
action to be taken as regards conflicts?

This would make the package loading process more dynamic when being
loaded for first time in an interactive session (Eg: R Notebook). An
example:

The first time the package is loaded:

options(conflicts.policy = "strict", conflicts.policy.ask = TRUE)

library(dplyr)

Executes iteratively the code, in order to ask the user for action
(See toy example):

opt <- readline(prompt="1: mask.ok; 2: exclude. Choose: ")

if (opt == "1"){

  txt <- sprintf(
    fmt = "conflictRules(pkg = '%s' , mask.ok = '%s')",
    "package.name",
    "variable.name"
  )

  eval(parse(text = txt))

  message(txt)

} else if(opt == "2"){

  txt <- sprintf(
    fmt = "conflictRules(pkg = '%s' , exclude = '%s')",
    "package.name",
    "variable.name"
  )

  eval(parse(text = txt))

  message(txt)

}

And afterwards, a message is printed with the selected
"conflictRules()" Configuration for the dynamic setup.

The user will only have to put the printed pre-configured
"conflictRules()" setup into his code, and when re-executing, the
input prompt asking for action will not be raised back again.

Such behaviour is similar in spirit to how 'conflicted' R package
works, which prints for example, for dplyr::filter :

Error: [conflicted] `filter` found in 2 packages.
Either pick the one you want with `::`
* dplyr::filter
* stats::filter
Or declare a preference with `conflict_prefer()`
* conflict_prefer("filter", "dplyr")
* conflict_prefer("filter", "stats")

Where the user will only have to copy "conflict_prefer("filter",
"dplyr")" and paste it into his script. The difference, is that with:
options(conflicts.policy = "strict", conflicts.policy.ask = TRUE),
such message is printed at package load.

I would put the required code within the library() function with the
following conditional:
...
if (length(conflicts)) {
   if(getOption("conflicts.policy.ask") == TRUE){
      ...
   }
}
...

###
# Feature Request 2: Source Execution
###

Another alternative, which could apply when executing the .R file from
source, would be to suggest the user a default conflictRules() setup:

options(conflicts.policy = "strict")
library(dplyr)

# Error: Conflicts attaching package ?dplyr?:
#
# The following objects are masked from ?package:stats?:
#
#     filter, lag
#
# The following objects are masked from ?package:base?:
#
#     intersect, setdiff, setequal, union
#
# Declare preference with `conflictRules()` before loading:
#     * conflictRules("dplyr", mask.ok = list(stats = TRUE, base = TRUE))
#     * conflictRules("dplyr", mask.ok = list(stats = c("filter",
"lag"), base = c("intersect", "setdiff", "setequal", "union")))
#     * conflictRules("dplyr", exclude = c("filter", "lag",
"intersect", "setdiff", "setequal", "union"))

In this case, the error message would have to be extended with
sensible suggested defaults.

Thanks,
Juan


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Wed May 20 20:09:12 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Wed, 20 May 2020 18:09:12 +0000 (UTC)
Subject: [Rd] Precision of function mean,bug?
In-Reply-To: <B2D98335-1E8F-4488-9611-32E8EE3FF41E@gmail.com>
References: <CAL0QV_OUF1_VW+hHPqKyHfP8cM5Quu7VuT7V8njkrLW0FuW6xw@mail.gmail.com>
 <B2D98335-1E8F-4488-9611-32E8EE3FF41E@gmail.com>
Message-ID: <848624421.2263481.1589998152497@mail.yahoo.com>

 > On Wednesday, May 20, 2020, 7:00:09 AM EDT, peter dalgaard <pdalgd at gmail.com> wrote:
>
> Expected, see FAQ 7.31.
>
> You just can't trust == on FP operations. Notice also

Additionally, since you're implementing a "mean" function you are testing
against R's mean, you might want to consider that R uses a two-pass
calculation[1] to reduce floating point precision error.

Best,

Brodie.

[1] https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/summary.c#L482

> > a2=(z[idx]+x[idx]+y[idx])/3
> > a2==a
> [1] FALSE
> > a2==b
> [1] TRUE
>
> -pd
>
> > On 20 May 2020, at 12:40 , Morgan Morgan <morgan.emailbox at gmail.com> wrote:
> >
> > Hello R-dev,
> >
> > Yesterday, while I was testing the newly implemented function pmean in
> > package kit, I noticed a mismatch in the output of the below R expressions.
> >
> > set.seed(123)
> > n=1e3L
> > idx=5
> > x=rnorm(n)
> > y=rnorm(n)
> > z=rnorm(n)
> > a=(x[idx]+y[idx]+z[idx])/3
> > b=mean(c(x[idx],y[idx],z[idx]))
> > a==b
> > # [1] FALSE
> >
> > For idx= 1, 2, 3, 4 the last line is equal to TRUE. For 5, 6 and many
> > others the difference is small but still.
> > Is that expected or is it a bug?


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed May 20 20:43:51 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 20 May 2020 13:43:51 -0500 (CDT)
Subject: [Rd] [External] Feature Request: User Prompt + Message First
 Execution when "Managing Search Path Conflicts"
In-Reply-To: <CAJXDcw1hn-Gdd8ASe4SiyMyd5GSD9KEQy0yyz6Ad09pXVwyHVw@mail.gmail.com>
References: <CAJXDcw1hn-Gdd8ASe4SiyMyd5GSD9KEQy0yyz6Ad09pXVwyHVw@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2005201333330.3164@luke-Latitude-7480>

You can get what you are asking for now in R 4.0.0 with
globalCallingHandlers and using the packageConflictError object that
is signaled. This should get you started:

```
options(conflicts.policy = "strict")

packageConflictError

handle_conflicts <- function(e) {
     cat(conditionMessage(e))
     opt <- readline(prompt="1: mask.ok; 2: exclude. Choose: ")
     if (opt == "1")
         conflictRules(e$package, mask.ok = as.character(unlist(e$conflicts)))
     else if (opt == "2")
         conflictRules(e$package, exclude = as.character(unlist(e$conflicts)))
     stop("unresolved conflicts") ## ideal invode a restart here
}

globalCallingHandlers(packageConflictError = handle_conflicts)

library(dplyr)
```

An IDE could provide a more sophisticated interface, like a dialog
allowing separate choices for each conflict. But this is best left up
to the IDE or the user.

The one addition to library that might be worth considering is to
provide a restart for the handler to invoke.

Best,

luke

On Wed, 20 May 2020, Juan Telleria Ruiz de Aguirre wrote:

> Dear R Developers,
>
> ###
> # Context:
> ###
>
> When managing Search Path Conflicts (See:
> https://developer.r-project.org/Blog/public/2019/03/19/managing-search-path-conflicts/index.html),
> with:
>
> options(conflicts.policy = "strict")
>
> We get the following behaviour when loading a package (Eg: dplyr):
>
> library(dplyr)
> ## Error: Conflicts attaching package ?dplyr?:
> ##
> ## The following objects are masked from ?package:stats?:
> ##
> ##     filter, lag
> ##
> ## The following objects are masked from ?package:base?:
> ##
> ##     intersect, setdiff, setequal, union
>
> So we would have to solve the conflict by writing:
>
> library(dplyr,
>        mask.ok = c("filter", "lag",
>                    "intersect", "setdiff", "setequal",
>                    "union"))
>
> So my feature request proposals:
>
> ###
> # Feature Request 1: Interactive Session
> ###
>
> Would it be possible to raise an input prompt, which asks user for an
> action to be taken as regards conflicts?
>
> This would make the package loading process more dynamic when being
> loaded for first time in an interactive session (Eg: R Notebook). An
> example:
>
> The first time the package is loaded:
>
> options(conflicts.policy = "strict", conflicts.policy.ask = TRUE)
>
> library(dplyr)
>
> Executes iteratively the code, in order to ask the user for action
> (See toy example):
>
> opt <- readline(prompt="1: mask.ok; 2: exclude. Choose: ")
>
> if (opt == "1"){
>
>  txt <- sprintf(
>    fmt = "conflictRules(pkg = '%s' , mask.ok = '%s')",
>    "package.name",
>    "variable.name"
>  )
>
>  eval(parse(text = txt))
>
>  message(txt)
>
> } else if(opt == "2"){
>
>  txt <- sprintf(
>    fmt = "conflictRules(pkg = '%s' , exclude = '%s')",
>    "package.name",
>    "variable.name"
>  )
>
>  eval(parse(text = txt))
>
>  message(txt)
>
> }
>
> And afterwards, a message is printed with the selected
> "conflictRules()" Configuration for the dynamic setup.
>
> The user will only have to put the printed pre-configured
> "conflictRules()" setup into his code, and when re-executing, the
> input prompt asking for action will not be raised back again.
>
> Such behaviour is similar in spirit to how 'conflicted' R package
> works, which prints for example, for dplyr::filter :
>
> Error: [conflicted] `filter` found in 2 packages.
> Either pick the one you want with `::`
> * dplyr::filter
> * stats::filter
> Or declare a preference with `conflict_prefer()`
> * conflict_prefer("filter", "dplyr")
> * conflict_prefer("filter", "stats")
>
> Where the user will only have to copy "conflict_prefer("filter",
> "dplyr")" and paste it into his script. The difference, is that with:
> options(conflicts.policy = "strict", conflicts.policy.ask = TRUE),
> such message is printed at package load.
>
> I would put the required code within the library() function with the
> following conditional:
> ...
> if (length(conflicts)) {
>   if(getOption("conflicts.policy.ask") == TRUE){
>      ...
>   }
> }
> ...
>
> ###
> # Feature Request 2: Source Execution
> ###
>
> Another alternative, which could apply when executing the .R file from
> source, would be to suggest the user a default conflictRules() setup:
>
> options(conflicts.policy = "strict")
> library(dplyr)
>
> # Error: Conflicts attaching package ?dplyr?:
> #
> # The following objects are masked from ?package:stats?:
> #
> #     filter, lag
> #
> # The following objects are masked from ?package:base?:
> #
> #     intersect, setdiff, setequal, union
> #
> # Declare preference with `conflictRules()` before loading:
> #     * conflictRules("dplyr", mask.ok = list(stats = TRUE, base = TRUE))
> #     * conflictRules("dplyr", mask.ok = list(stats = c("filter",
> "lag"), base = c("intersect", "setdiff", "setequal", "union")))
> #     * conflictRules("dplyr", exclude = c("filter", "lag",
> "intersect", "setdiff", "setequal", "union"))
>
> In this case, the error message would have to be extended with
> sensible suggested defaults.
>
> Thanks,
> Juan
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed May 20 21:18:16 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 20 May 2020 12:18:16 -0700
Subject: [Rd] Precision of function mean,bug?
In-Reply-To: <848624421.2263481.1589998152497@mail.yahoo.com>
References: <CAL0QV_OUF1_VW+hHPqKyHfP8cM5Quu7VuT7V8njkrLW0FuW6xw@mail.gmail.com>
 <B2D98335-1E8F-4488-9611-32E8EE3FF41E@gmail.com>
 <848624421.2263481.1589998152497@mail.yahoo.com>
Message-ID: <CAFDcVCRFfoipUUSw+D=-DRw9B0f80BQnivNHh3eFtZtaKiu4rg@mail.gmail.com>

On Wed, May 20, 2020 at 11:10 AM brodie gaslam via R-devel
<r-devel at r-project.org> wrote:
>
>  > On Wednesday, May 20, 2020, 7:00:09 AM EDT, peter dalgaard <pdalgd at gmail.com> wrote:
> >
> > Expected, see FAQ 7.31.
> >
> > You just can't trust == on FP operations. Notice also
>
> Additionally, since you're implementing a "mean" function you are testing
> against R's mean, you might want to consider that R uses a two-pass
> calculation[1] to reduce floating point precision error.

This one is important.

FWIW, matrixStats::mean2() provides argument refine=TRUE/FALSE to
calculate mean with and without this two-pass calculation;

> a <- c(x[idx],y[idx],z[idx]) / 3
> b <- mean(c(x[idx],y[idx],z[idx]))
> b == a
[1] FALSE
> b - a
[1] 2.220446e-16

> c <- matrixStats::mean2(c(x[idx],y[idx],z[idx]))  ## default to refine=TRUE
> b == c
[1] TRUE
> b - c
[1] 0

> d <- matrixStats::mean2(c(x[idx],y[idx],z[idx]), refine=FALSE)
> a == d
[1] TRUE
> a - d
[1] 0
> c == d
[1] FALSE
> c - d
[1] 2.220446e-16

Not surprisingly, the two-pass higher-precision version (refine=TRUE)
takes roughly twice as long as the one-pass quick version
(refine=FALSE).

/Henrik

>
> Best,
>
> Brodie.
>
> [1] https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/summary.c#L482
>
> > > a2=(z[idx]+x[idx]+y[idx])/3
> > > a2==a
> > [1] FALSE
> > > a2==b
> > [1] TRUE
> >
> > -pd
> >
> > > On 20 May 2020, at 12:40 , Morgan Morgan <morgan.emailbox at gmail.com> wrote:
> > >
> > > Hello R-dev,
> > >
> > > Yesterday, while I was testing the newly implemented function pmean in
> > > package kit, I noticed a mismatch in the output of the below R expressions.
> > >
> > > set.seed(123)
> > > n=1e3L
> > > idx=5
> > > x=rnorm(n)
> > > y=rnorm(n)
> > > z=rnorm(n)
> > > a=(x[idx]+y[idx]+z[idx])/3
> > > b=mean(c(x[idx],y[idx],z[idx]))
> > > a==b
> > > # [1] FALSE
> > >
> > > For idx= 1, 2, 3, 4 the last line is equal to TRUE. For 5, 6 and many
> > > others the difference is small but still.
> > > Is that expected or is it a bug?
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @purd|e@@ @end|ng |rom gm@||@com  Thu May 21 00:22:56 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Thu, 21 May 2020 10:22:56 +1200
Subject: [Rd] [External] Feature Request: User Prompt + Message First
 Execution when "Managing Search Path Conflicts"
In-Reply-To: <alpine.DEB.2.21.2005201333330.3164@luke-Latitude-7480>
References: <CAJXDcw1hn-Gdd8ASe4SiyMyd5GSD9KEQy0yyz6Ad09pXVwyHVw@mail.gmail.com>
 <alpine.DEB.2.21.2005201333330.3164@luke-Latitude-7480>
Message-ID: <CAB8pepx6s7gR1f9KzNxZCJNB1atSJh3gkbasW02CyqeOv2Xtcw@mail.gmail.com>

> An IDE could provide a more sophisticated interface, like a dialog
> allowing separate choices for each conflict. But this is best left up
> to the IDE or the user.

An IDE (or other user interface) should not alter the behavior of R,
especially the installing/loading/attaching of packages.

There are some possible exceptions:
(1) The global option for width.
(2) Output that would normally appear in a separate window.
(3) Maybe others...

But only as non-defaults, with consent from the user.
Also, while exception (2) may have an intuitive appeal, it's risky business...


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu May 21 00:37:52 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 20 May 2020 17:37:52 -0500 (CDT)
Subject: [Rd] [External] Feature Request: User Prompt + Message First
 Execution when "Managing Search Path Conflicts"
In-Reply-To: <CAB8pepx6s7gR1f9KzNxZCJNB1atSJh3gkbasW02CyqeOv2Xtcw@mail.gmail.com>
References: <CAJXDcw1hn-Gdd8ASe4SiyMyd5GSD9KEQy0yyz6Ad09pXVwyHVw@mail.gmail.com>
 <alpine.DEB.2.21.2005201333330.3164@luke-Latitude-7480>
 <CAB8pepx6s7gR1f9KzNxZCJNB1atSJh3gkbasW02CyqeOv2Xtcw@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2005201735350.3164@luke-Latitude-7480>

Providing a way to more easily resolve situations that otherwise would
be errors is a reasonable thing for an IDE to do. I would prefer is
such things were optional and off by default, but other way not.

If an IDE does this and you don't approve then you don't have to use
it.

Best,

luke

On Wed, 20 May 2020, Abby Spurdle wrote:

>> An IDE could provide a more sophisticated interface, like a dialog
>> allowing separate choices for each conflict. But this is best left up
>> to the IDE or the user.
>
> An IDE (or other user interface) should not alter the behavior of R,
> especially the installing/loading/attaching of packages.
>
> There are some possible exceptions:
> (1) The global option for width.
> (2) Output that would normally appear in a separate window.
> (3) Maybe others...
>
> But only as non-defaults, with consent from the user.
> Also, while exception (2) may have an intuitive appeal, it's risky business...
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From @purd|e@@ @end|ng |rom gm@||@com  Thu May 21 01:46:03 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Thu, 21 May 2020 11:46:03 +1200
Subject: [Rd] [External] Feature Request: User Prompt + Message First
 Execution when "Managing Search Path Conflicts"
In-Reply-To: <alpine.DEB.2.21.2005201735350.3164@luke-Latitude-7480>
References: <CAJXDcw1hn-Gdd8ASe4SiyMyd5GSD9KEQy0yyz6Ad09pXVwyHVw@mail.gmail.com>
 <alpine.DEB.2.21.2005201333330.3164@luke-Latitude-7480>
 <CAB8pepx6s7gR1f9KzNxZCJNB1atSJh3gkbasW02CyqeOv2Xtcw@mail.gmail.com>
 <alpine.DEB.2.21.2005201735350.3164@luke-Latitude-7480>
Message-ID: <CAB8pepz3pp0GZctX7bp9zYADDnXaeXCNDF=zEfQvnUBAtDopaA@mail.gmail.com>

On Thu, May 21, 2020 at 10:37 AM <luke-tierney at uiowa.edu> wrote:
> Providing a way to more easily resolve situations that otherwise would
> be errors is a reasonable thing for an IDE to do.

In principle, yes.
However, I note that the word "easily" could mean different things to
different people.
Certain IDE* (not naming any names, and not distinguishing between
singular/plural), introduce bugs and other problems, by altering R's
behavior.

Also, if they absolutely must change things, perhaps the first thing
they should change is the error messages:

    I'm sorry, this program didn't work.
    It could be R's fault, but probably is the IDE's fault.
    Please do NOT post a message on R-help saying:
        Why did R crash?
    Without first running your code via a terminal.

> I would prefer is
> such things were optional and off by default, but other way not.

That's good to hear.

> If an IDE does this and you don't approve then you don't have to use
> it.

Yes.
And please let statistics and data science students know that.


From jte||er|@@rproject @end|ng |rom gm@||@com  Thu May 21 13:09:15 2020
From: jte||er|@@rproject @end|ng |rom gm@||@com (Juan Telleria Ruiz de Aguirre)
Date: Thu, 21 May 2020 13:09:15 +0200
Subject: [Rd] [External] Feature Request: User Prompt + Message First
 Execution when "Managing Search Path Conflicts"
In-Reply-To: <alpine.DEB.2.21.2005201333330.3164@luke-Latitude-7480>
References: <CAJXDcw1hn-Gdd8ASe4SiyMyd5GSD9KEQy0yyz6Ad09pXVwyHVw@mail.gmail.com>
 <alpine.DEB.2.21.2005201333330.3164@luke-Latitude-7480>
Message-ID: <CAJXDcw3fEAsxt0_fnfZNNFTJzN9hK7Dvq53db54DBdbY6LqPaA@mail.gmail.com>

Thank you Mr. Tierney!

Using globalCallingHandlers() to directly handle
"packageConflictError" is an excellent idea!

The benefits I see for such an implementation are:
* The patch would be contained within the Conflict Error Handler,
which should reduce any side effects with an eventual implementation.
* And by making its usage optional, by setting for example
options(conflicts.policy.ask = TRUE), in should neither affect any
packages nor other base code.

Hope it allows R Users to work in a more agile manner, and guide R
Students through best practices of variable conflict handling in an
educative manner.

Thanks,
Juan

> You can get what you are asking for now in R 4.0.0 with
> globalCallingHandlers and using the packageConflictError object that
> is signaled. This should get you started:
>
> ```
> options(conflicts.policy = "strict")
>
> packageConflictError
>
> handle_conflicts <- function(e) {
>      cat(conditionMessage(e))
>      opt <- readline(prompt="1: mask.ok; 2: exclude. Choose: ")
>      if (opt == "1")
>          conflictRules(e$package, mask.ok = as.character(unlist(e$conflicts)))
>      else if (opt == "2")
>          conflictRules(e$package, exclude = as.character(unlist(e$conflicts)))
>      stop("unresolved conflicts") ## ideal invode a restart here
> }
>
> globalCallingHandlers(packageConflictError = handle_conflicts)
>
> library(dplyr)
> ```
>
> An IDE could provide a more sophisticated interface, like a dialog
> allowing separate choices for each conflict. But this is best left up
> to the IDE or the user.
>
> The one addition to library that might be worth considering is to
> provide a restart for the handler to invoke.
>
> Best,
>
> luke
>


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Thu May 21 10:56:59 2020
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Thu, 21 May 2020 08:56:59 +0000
Subject: [Rd] Patch proposal for bug 17770 - xtabs does not act as
 documented for na.action = na.pass
Message-ID: <0aad0bf537b1465b87323ce9f8b1f518@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>

Dear all,

(This issue was previously reported on Bugzilla (https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17770) and discussed on Stack Overflow (https://stackoverflow.com/q/61240049).)

The documentation of xtabs says:

"na.action: When it is na.pass and formula has a left hand side (with counts), sum(*, na.rm = TRUE) is used instead of sum(*) for the counts."

However, this is not the case:
 
DF <- data.frame(group = c("a", "a", "b", "b"),
                 count = c(NA, TRUE, FALSE, TRUE))

xtabs(formula = count ~ group,
      data = DF,
      na.action = na.pass)

# group
# a b
# 1

In the code, na.rm is TRUE if and only if na.action = na.omit:

na.rm <- 
  identical(naAct, quote(na.omit)) || identical(naAct, na.omit) ||
  identical(naAct, "na.omit")

xtabs(formula = count ~ group,
      data = DF,
      na.action = na.omit)

# group
# a b
# 1 1

The example works as documented if we change the code to:

na.rm <- 
  identical(naAct, quote(na.pass)) || identical(naAct, na.pass) ||
  identical(naAct, "na.pass")

However, there may be something I am missing, and na.omit may be necessary for something else...

Best regards,

Thomas


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu May 21 16:40:26 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 21 May 2020 09:40:26 -0500 (CDT)
Subject: [Rd] [External] Feature Request: User Prompt + Message First
 Execution when "Managing Search Path Conflicts"
In-Reply-To: <CAJXDcw3fEAsxt0_fnfZNNFTJzN9hK7Dvq53db54DBdbY6LqPaA@mail.gmail.com>
References: <CAJXDcw1hn-Gdd8ASe4SiyMyd5GSD9KEQy0yyz6Ad09pXVwyHVw@mail.gmail.com>
 <alpine.DEB.2.21.2005201333330.3164@luke-Latitude-7480>
 <CAJXDcw3fEAsxt0_fnfZNNFTJzN9hK7Dvq53db54DBdbY6LqPaA@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2005210936170.3164@luke-Latitude-7480>

I looks like you may have misunderstood my post so just to make sure:
There will be no patch to R to support this.

If this is something you want for yourself, then I have shown you how
you can do it.  You can put the code in a startup file if you like.

If you want your students to have this, then you can prepare a startup
file for them that does this.

Best,

luke

On Thu, 21 May 2020, Juan Telleria Ruiz de Aguirre wrote:

> Thank you Mr. Tierney!
>
> Using globalCallingHandlers() to directly handle
> "packageConflictError" is an excellent idea!
>
> The benefits I see for such an implementation are:
> * The patch would be contained within the Conflict Error Handler,
> which should reduce any side effects with an eventual implementation.
> * And by making its usage optional, by setting for example
> options(conflicts.policy.ask = TRUE), in should neither affect any
> packages nor other base code.
>
> Hope it allows R Users to work in a more agile manner, and guide R
> Students through best practices of variable conflict handling in an
> educative manner.
>
> Thanks,
> Juan
>
>> You can get what you are asking for now in R 4.0.0 with
>> globalCallingHandlers and using the packageConflictError object that
>> is signaled. This should get you started:
>>
>> ```
>> options(conflicts.policy = "strict")
>>
>> packageConflictError
>>
>> handle_conflicts <- function(e) {
>>      cat(conditionMessage(e))
>>      opt <- readline(prompt="1: mask.ok; 2: exclude. Choose: ")
>>      if (opt == "1")
>>          conflictRules(e$package, mask.ok = as.character(unlist(e$conflicts)))
>>      else if (opt == "2")
>>          conflictRules(e$package, exclude = as.character(unlist(e$conflicts)))
>>      stop("unresolved conflicts") ## ideal invode a restart here
>> }
>>
>> globalCallingHandlers(packageConflictError = handle_conflicts)
>>
>> library(dplyr)
>> ```
>>
>> An IDE could provide a more sophisticated interface, like a dialog
>> allowing separate choices for each conflict. But this is best left up
>> to the IDE or the user.
>>
>> The one addition to library that might be worth considering is to
>> provide a restart for the handler to invoke.
>>
>> Best,
>>
>> luke
>>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From jte||er|@@rproject @end|ng |rom gm@||@com  Thu May 21 17:31:50 2020
From: jte||er|@@rproject @end|ng |rom gm@||@com (Juan Telleria Ruiz de Aguirre)
Date: Thu, 21 May 2020 17:31:50 +0200
Subject: [Rd] [External] Feature Request: User Prompt + Message First
 Execution when "Managing Search Path Conflicts"
In-Reply-To: <alpine.DEB.2.21.2005210936170.3164@luke-Latitude-7480>
References: <CAJXDcw1hn-Gdd8ASe4SiyMyd5GSD9KEQy0yyz6Ad09pXVwyHVw@mail.gmail.com>
 <alpine.DEB.2.21.2005201333330.3164@luke-Latitude-7480>
 <CAJXDcw3fEAsxt0_fnfZNNFTJzN9hK7Dvq53db54DBdbY6LqPaA@mail.gmail.com>
 <alpine.DEB.2.21.2005210936170.3164@luke-Latitude-7480>
Message-ID: <CAJXDcw10=o5A8JQ-9futshWaGH1Xc00_ynrz4j+0tqk5ZsKrdA@mail.gmail.com>

Got it, thank you for pointing out the solution then.

Best,
Juan


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu May 21 18:02:00 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 21 May 2020 18:02:00 +0200
Subject: [Rd] failed check in reg-tests-1b.R
In-Reply-To: <6750bc1b-73ff-7fe3-753a-ecdf6381c94a@gmail.com>
References: <6750bc1b-73ff-7fe3-753a-ecdf6381c94a@gmail.com>
Message-ID: <24262.42488.831749.714377@stat.math.ethz.ch>

>>>>> Benjamin Tyner 
>>>>>     on Tue, 19 May 2020 22:36:16 -0400 writes:

    > Not certain this is actually a bug, so posting here.
    > I'm on Ubuntu 18.04.4 LTS, building R version 4.0.0. The "configure" and 
    > "make" steps are successful, but the "make check" step fails when it 
    > gets to this part of ./tests/reg-tests-1b.R:

    > ?? > ## methods() gave two wrong warnings in some cases:
    > ?? > op <- options(warn = 2)# no warning, please!
    > ?? > m1 <- methods(na.omit) ## should give (no warning):
    > ?? > ##
    > ?? > setClass("bla")
    > ?? > setMethod("na.omit", "bla", function(object, ...) "na.omit(<bla>)")
    > ?? Error: package 'codetools' was installed before R 4.0.0: please 
    > re-install it
    > ?? Execution halted

    > It appears to be picking up the older version of codetools from $R_LIBS; 
    > if I unset R_LIBS, then it works just fine.

    > So I'm wondering, is it a bug, or is the user's own fault for having 
    > R_LIBS set whilst trying to build R?

Well, currently it seems to be the user's fault as in
      "if you don't do it, everything is fine"

But it has bitten me too, many times actually,
when going from R 3.y.z to R 4.y.z .
I have not started to investigate what it would mean, or even
if it really makes sense to disregard R_LIBS in such situations.

For building (and checking!) R itself from the sources, it may
seem to make sense indeed if such environment variables would be
temporarily unset (by one of the Makefiles, say).

Martin


From morg@n@em@||box @end|ng |rom gm@||@com  Thu May 21 18:34:35 2020
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Thu, 21 May 2020 17:34:35 +0100
Subject: [Rd] Precision of function mean,bug?
In-Reply-To: <CAFDcVCRBioAv4QndLy-LVccgPA5a+Z3j8TGwQadBDvEWrAQJ=g@mail.gmail.com>
References: <CAL0QV_OUF1_VW+hHPqKyHfP8cM5Quu7VuT7V8njkrLW0FuW6xw@mail.gmail.com>
 <B2D98335-1E8F-4488-9611-32E8EE3FF41E@gmail.com>
 <848624421.2263481.1589998152497@mail.yahoo.com>
 <CAFDcVCRFfoipUUSw+D=-DRw9B0f80BQnivNHh3eFtZtaKiu4rg@mail.gmail.com>
 <CAL0QV_Nb88LuiNj_YLSHhZ=Lt_GNedzx0+M1AdxEfhYZ9vNiow@mail.gmail.com>
 <CAFDcVCRBioAv4QndLy-LVccgPA5a+Z3j8TGwQadBDvEWrAQJ=g@mail.gmail.com>
Message-ID: <CAL0QV_PsAKmM62wAJ6KiM4cjFUcq8Tmtc-6RijWowTiJwh6_Gg@mail.gmail.com>

Sorry, posting back to the list.
Thank you all.
Morgan

On Thu, 21 May 2020, 16:33 Henrik Bengtsson, <henrik.bengtsson at gmail.com>
wrote:

> Hi.
>
> Good point and a good example. Feel free to post to the list. The purpose
> of my reply wasn't to take away Peter's point but to emphasize that
> base::mean() does a two-pass scan over the elements too lower the impact of
> addition of values with widely different values (classical problem in
> numerical analysis). But I can see how it may look like that.
>
> Cheers,
>
> Henrik
>
>
> On Thu, May 21, 2020, 03:21 Morgan Morgan <morgan.emailbox at gmail.com>
> wrote:
>
>> Thank you Henrik for the feedback.
>> Note that for idx=4 and refine = TRUE,  your equality b==c is FALSE. I
>> think that as Peter said == can't be trusted with FP.
>> His example is good. Here is an even more shocking one.
>> a=0.786546798
>> b=a+ 1e6 -1e6
>> a==b
>> # [1] FALSE
>>
>> Best regards
>> Morgan Jacob
>>
>> On Wed, 20 May 2020, 20:18 Henrik Bengtsson, <henrik.bengtsson at gmail.com>
>> wrote:
>>
>>> On Wed, May 20, 2020 at 11:10 AM brodie gaslam via R-devel
>>> <r-devel at r-project.org> wrote:
>>> >
>>> >  > On Wednesday, May 20, 2020, 7:00:09 AM EDT, peter dalgaard <
>>> pdalgd at gmail.com> wrote:
>>> > >
>>> > > Expected, see FAQ 7.31.
>>> > >
>>> > > You just can't trust == on FP operations. Notice also
>>> >
>>> > Additionally, since you're implementing a "mean" function you are
>>> testing
>>> > against R's mean, you might want to consider that R uses a two-pass
>>> > calculation[1] to reduce floating point precision error.
>>>
>>> This one is important.
>>>
>>> FWIW, matrixStats::mean2() provides argument refine=TRUE/FALSE to
>>> calculate mean with and without this two-pass calculation;
>>>
>>> > a <- c(x[idx],y[idx],z[idx]) / 3
>>> > b <- mean(c(x[idx],y[idx],z[idx]))
>>> > b == a
>>> [1] FALSE
>>> > b - a
>>> [1] 2.220446e-16
>>>
>>> > c <- matrixStats::mean2(c(x[idx],y[idx],z[idx]))  ## default to
>>> refine=TRUE
>>> > b == c
>>> [1] TRUE
>>> > b - c
>>> [1] 0
>>>
>>> > d <- matrixStats::mean2(c(x[idx],y[idx],z[idx]), refine=FALSE)
>>> > a == d
>>> [1] TRUE
>>> > a - d
>>> [1] 0
>>> > c == d
>>> [1] FALSE
>>> > c - d
>>> [1] 2.220446e-16
>>>
>>> Not surprisingly, the two-pass higher-precision version (refine=TRUE)
>>> takes roughly twice as long as the one-pass quick version
>>> (refine=FALSE).
>>>
>>> /Henrik
>>>
>>> >
>>> > Best,
>>> >
>>> > Brodie.
>>> >
>>> > [1]
>>> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/summary.c#L482
>>> >
>>> > > > a2=(z[idx]+x[idx]+y[idx])/3
>>> > > > a2==a
>>> > > [1] FALSE
>>> > > > a2==b
>>> > > [1] TRUE
>>> > >
>>> > > -pd
>>> > >
>>> > > > On 20 May 2020, at 12:40 , Morgan Morgan <
>>> morgan.emailbox at gmail.com> wrote:
>>> > > >
>>> > > > Hello R-dev,
>>> > > >
>>> > > > Yesterday, while I was testing the newly implemented function
>>> pmean in
>>> > > > package kit, I noticed a mismatch in the output of the below R
>>> expressions.
>>> > > >
>>> > > > set.seed(123)
>>> > > > n=1e3L
>>> > > > idx=5
>>> > > > x=rnorm(n)
>>> > > > y=rnorm(n)
>>> > > > z=rnorm(n)
>>> > > > a=(x[idx]+y[idx]+z[idx])/3
>>> > > > b=mean(c(x[idx],y[idx],z[idx]))
>>> > > > a==b
>>> > > > # [1] FALSE
>>> > > >
>>> > > > For idx= 1, 2, 3, 4 the last line is equal to TRUE. For 5, 6 and
>>> many
>>> > > > others the difference is small but still.
>>> > > > Is that expected or is it a bug?
>>> >
>>> > ______________________________________________
>>> > R-devel at r-project.org mailing list
>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu May 21 18:42:32 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 21 May 2020 18:42:32 +0200
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
Message-ID: <24262.44920.82908.796068@stat.math.ethz.ch>

>>>>> Herv? Pag?s 
>>>>>     on Fri, 15 May 2020 13:44:28 -0700 writes:

    > There is still the situation where **both** 'sep' and 'collapse' are 
    > specified:

    >> paste(integer(0), "nth", sep="", collapse=",")
    > [1] "nth"

    > In that case 'recycle0' should **not** be ignored i.e.

    > paste(integer(0), "nth", sep="", collapse=",", recycle0=TRUE)

    > should return the empty string (and not character(0) like it does at the 
    > moment).

    > In other words, 'recycle0' should only control the first operation (the 
    > operation controlled by 'sep'). Which makes plenty of sense: the 1st 
    > operation is binary (or n-ary) while the collapse operation is unary. 
    > There is no concept of recycling in the context of unary operations.

Interesting, ..., and sounding somewhat convincing.

    > On 5/15/20 11:25, Gabriel Becker wrote:
    >> Hi all,
    >> 
    >> This makes sense to me, but I would think that recycle0 and collapse 
    >> should actually be incompatible and paste should throw an error if 
    >> recycle0 were TRUE and collapse were declared in the same call. I don't 
    >> think the value of recycle0 should be silently ignored if it is actively 
    >> specified.
    >> 
    >> ~G

Just to summarize what I think we should know and agree (or be
be "disproven") and where this comes from ...

1) recycle0 is a new R 4.0.0 option in paste() / paste0() which by default
   (recycle0 = FALSE) should (and *does* AFAIK) not change anything,
   hence  paste() / paste0() behave completely back-compatible
   if recycle0 is kept to FALSE.

2) recycle0 = TRUE is meant to give different behavior, notably
   0-length arguments (among '...') should result in 0-length results.

   The above does not specify what this means in detail, see 3)

3) The current R 4.0.0 implementation (for which I'm primarily responsible)
   and help(paste)  are in accordance.
   Notably the help page (Arguments -> 'recycle0' ; Details 1st para ; Examples)
   says and shows how the 4.0.0 implementation has been meant to work.

4) Several provenly smart members of the R community argue that
   both the implementation and the documentation of 'recycle0 =
   TRUE'  should be changed to be more logical / coherent / sensical ..

Is the above all correct in your view?

Assuming yes,  I read basically two proposals, both agreeing
that  recycle0 = TRUE  should only ever apply to the action of 'sep'
but not the action of 'collapse'.

1) Bill and Herv? (I think) propose that 'recycle0' should have
   no effect whenever  'collapse = <string>'

2) Gabe proposes that 'collapse = <string>' and 'recycle0 = TRUE'
   should be declared incompatible and error. If going in that
   direction, I could also see them to give a warning (and
   continue as if recycle = FALSE). 

I have not yet my mind up but would tend to agree to "you guys",
but I think that other R Core members should chime in, too.

Martin

    >> On Fri, May 15, 2020 at 11:05 AM Herv? Pag?s <hpages at fredhutch.org 
    >> <mailto:hpages at fredhutch.org>> wrote:
    >> 
    >> Totally agree with that.
    >> 
    >> H.
    >> 
    >> On 5/15/20 10:34, William Dunlap via R-devel wrote:
    >> > I agree: paste(collapse="something", ...) should always return a
    >> single
    >> > character string, regardless of the value of recycle0.? This would be
    >> > similar to when there are no non-NULL arguments to paste;
    >> collapse="."
    >> > gives a single empty string and collapse=NULL gives a zero long
    >> character
    >> > vector.
    >> >> paste()
    >> > character(0)
    >> >> paste(collapse=", ")
    >> > [1] ""
    >> >
    >> > Bill Dunlap
    >> > TIBCO Software
    >> > wdunlap tibco.com
    >> <https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=rXIwWqf4U4HZS_bjUT3KfA9ARaV5YTb_kEcXWHnkt-c&e=>
    >> >
    >> >
    >> > On Thu, Apr 30, 2020 at 9:56 PM suharto_anggono--- via R-devel <
    >> > r-devel at r-project.org <mailto:r-devel at r-project.org>> wrote:
    >> >
    >> >> Without 'collapse', 'paste' pastes (concatenates) its arguments
    >> >> elementwise (separated by 'sep', " " by default). New in R devel
    >> and R
    >> >> patched, specifying recycle0 = FALSE makes mixing zero-length and
    >> >> nonzero-length arguments results in length zero. The result of
    >> paste(n,
    >> >> "th", sep = "", recycle0 = FALSE) always have the same length as
    >> 'n'.
    >> >> Previously, the result is still as long as the longest argument,
    >> with the
    >> >> zero-length argument like "". If all og the arguments have
    >> length zero,
    >> >> 'recycle0' doesn't matter.
    >> >>
    >> >> As far as I understand, 'paste' with 'collapse' as a character
    >> string is
    >> >> supposed to put together elements of a vector into a single
    >> character
    >> >> string. I think 'recycle0' shouldn't change it.
    >> >>
    >> >> In current R devel and R patched, paste(character(0), collapse = "",
    >> >> recycle0 = FALSE) is character(0). I think it should be "", like
    >> >> paste(character(0), collapse="").
    >> >>
    >> >> paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 =
    >> FALSE)
    >> >> is
    >> >> "4th, 5th".
    >> >> paste(c("4"? ? ?), "th", sep = "", collapse = ", ", recycle0 =
    >> FALSE)
    >> >> is
    >> >> "4th".
    >> >> I think
    >> >> paste(c(? ? ? ? ), "th", sep = "", collapse = ", ", recycle0 =
    >> FALSE)
    >> >> should be
    >> >> "",
    >> >> not character(0).
    >> >>
    >> >> ______________________________________________
    >> >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
    >> >>
    >> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
    >> >>
    >> >
    >> >? ? ? ?[[alternative HTML version deleted]]
    >> >
    >> > ______________________________________________
    >> > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
    >> >
    >> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
    >> >
    >> 
    >> -- 
    >> Herv? Pag?s
    >> 
    >> Program in Computational Biology
    >> Division of Public Health Sciences
    >> Fred Hutchinson Cancer Research Center
    >> 1100 Fairview Ave. N, M1-B514
    >> P.O. Box 19024
    >> Seattle, WA 98109-1024
    >> 
    >> E-mail: hpages at fredhutch.org <mailto:hpages at fredhutch.org>
    >> Phone:? (206) 667-5791
    >> Fax:? ? (206) 667-1319
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> <https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=COnDeGgHNnHJlLLZOznMlhcaFU1nIRlkaSbssvlrMvw&e=>
    >> 

    > -- 
    > Herv? Pag?s

    > Program in Computational Biology
    > Division of Public Health Sciences
    > Fred Hutchinson Cancer Research Center
    > 1100 Fairview Ave. N, M1-B514
    > P.O. Box 19024
    > Seattle, WA 98109-1024

    > E-mail: hpages at fredhutch.org
    > Phone:  (206) 667-5791
    > Fax:    (206) 667-1319

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From wdun|@p @end|ng |rom t|bco@com  Thu May 21 19:22:19 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Thu, 21 May 2020 10:22:19 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <24262.44920.82908.796068@stat.math.ethz.ch>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
Message-ID: <CAF8bMcY2jJ8a4tiM-Rzefqv+CtFDy=SDCZ5PJm8JLaDTfSHQEw@mail.gmail.com>

> 1) Bill and Herv? (I think) propose that 'recycle0' should have
>   no effect whenever  'collapse = <string>'

I think that collapse=<string> should make paste() return a single string,
regardless of the value of recycle0.  E.g., I would like to see

> paste0("X",seq_len(3),collapse=", ", recycle0=TRUE)
[1] "X1, X2, X3"
> paste0("X",seq_len(0),collapse=", ", recycle0=TRUE)
[1] ""

Currently the latter gives character(0).

paste's collapse argument has traditionally acted after all the other
arguments were dealt with, as in the following not extensively tested
function.

altPaste <- function (..., collapse = NULL) {
    tmp <- paste(...)
    if (!is.null(collapse)) {
        paste(tmp, collapse=collapse)
    } else {
        tmp
    }
}

E.g., in post-R-4.0.0 R-devel
> altPaste("X", seq_len(3), sep="", collapse=", ")
[1] "X1, X2, X3"
> altPaste("X", seq_len(0), sep="", collapse=", ")
[1] "X"
> altPaste("X", seq_len(0), sep="", collapse=", ", recycle0=TRUE)
[1] ""

I think it would be good if the above function continued to act the same as
paste itself.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Thu, May 21, 2020 at 9:42 AM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> Herv? Pag?s
> >>>>>     on Fri, 15 May 2020 13:44:28 -0700 writes:
>
>     > There is still the situation where **both** 'sep' and 'collapse' are
>     > specified:
>
>     >> paste(integer(0), "nth", sep="", collapse=",")
>     > [1] "nth"
>
>     > In that case 'recycle0' should **not** be ignored i.e.
>
>     > paste(integer(0), "nth", sep="", collapse=",", recycle0=TRUE)
>
>     > should return the empty string (and not character(0) like it does at
> the
>     > moment).
>
>     > In other words, 'recycle0' should only control the first operation
> (the
>     > operation controlled by 'sep'). Which makes plenty of sense: the 1st
>     > operation is binary (or n-ary) while the collapse operation is
> unary.
>     > There is no concept of recycling in the context of unary operations.
>
> Interesting, ..., and sounding somewhat convincing.
>
>     > On 5/15/20 11:25, Gabriel Becker wrote:
>     >> Hi all,
>     >>
>     >> This makes sense to me, but I would think that recycle0 and
> collapse
>     >> should actually be incompatible and paste should throw an error if
>     >> recycle0 were TRUE and collapse were declared in the same call. I
> don't
>     >> think the value of recycle0 should be silently ignored if it is
> actively
>     >> specified.
>     >>
>     >> ~G
>
> Just to summarize what I think we should know and agree (or be
> be "disproven") and where this comes from ...
>
> 1) recycle0 is a new R 4.0.0 option in paste() / paste0() which by default
>    (recycle0 = FALSE) should (and *does* AFAIK) not change anything,
>    hence  paste() / paste0() behave completely back-compatible
>    if recycle0 is kept to FALSE.
>
> 2) recycle0 = TRUE is meant to give different behavior, notably
>    0-length arguments (among '...') should result in 0-length results.
>
>    The above does not specify what this means in detail, see 3)
>
> 3) The current R 4.0.0 implementation (for which I'm primarily responsible)
>    and help(paste)  are in accordance.
>    Notably the help page (Arguments -> 'recycle0' ; Details 1st para ;
> Examples)
>    says and shows how the 4.0.0 implementation has been meant to work.
>
> 4) Several provenly smart members of the R community argue that
>    both the implementation and the documentation of 'recycle0 =
>    TRUE'  should be changed to be more logical / coherent / sensical ..
>
> Is the above all correct in your view?
>
> Assuming yes,  I read basically two proposals, both agreeing
> that  recycle0 = TRUE  should only ever apply to the action of 'sep'
> but not the action of 'collapse'.
>
> 1) Bill and Herv? (I think) propose that 'recycle0' should have
>    no effect whenever  'collapse = <string>'
>
> 2) Gabe proposes that 'collapse = <string>' and 'recycle0 = TRUE'
>    should be declared incompatible and error. If going in that
>    direction, I could also see them to give a warning (and
>    continue as if recycle = FALSE).
>
> I have not yet my mind up but would tend to agree to "you guys",
> but I think that other R Core members should chime in, too.
>
> Martin
>
>     >> On Fri, May 15, 2020 at 11:05 AM Herv? Pag?s <hpages at fredhutch.org
>     >> <mailto:hpages at fredhutch.org>> wrote:
>     >>
>     >> Totally agree with that.
>     >>
>     >> H.
>     >>
>     >> On 5/15/20 10:34, William Dunlap via R-devel wrote:
>     >> > I agree: paste(collapse="something", ...) should always return a
>     >> single
>     >> > character string, regardless of the value of recycle0.  This
> would be
>     >> > similar to when there are no non-NULL arguments to paste;
>     >> collapse="."
>     >> > gives a single empty string and collapse=NULL gives a zero long
>     >> character
>     >> > vector.
>     >> >> paste()
>     >> > character(0)
>     >> >> paste(collapse=", ")
>     >> > [1] ""
>     >> >
>     >> > Bill Dunlap
>     >> > TIBCO Software
>     >> > wdunlap tibco.com
>     >> <
> https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=rXIwWqf4U4HZS_bjUT3KfA9ARaV5YTb_kEcXWHnkt-c&e=
> >
>     >> >
>     >> >
>     >> > On Thu, Apr 30, 2020 at 9:56 PM suharto_anggono--- via R-devel <
>     >> > r-devel at r-project.org <mailto:r-devel at r-project.org>> wrote:
>     >> >
>     >> >> Without 'collapse', 'paste' pastes (concatenates) its arguments
>     >> >> elementwise (separated by 'sep', " " by default). New in R devel
>     >> and R
>     >> >> patched, specifying recycle0 = FALSE makes mixing zero-length and
>     >> >> nonzero-length arguments results in length zero. The result of
>     >> paste(n,
>     >> >> "th", sep = "", recycle0 = FALSE) always have the same length as
>     >> 'n'.
>     >> >> Previously, the result is still as long as the longest argument,
>     >> with the
>     >> >> zero-length argument like "". If all og the arguments have
>     >> length zero,
>     >> >> 'recycle0' doesn't matter.
>     >> >>
>     >> >> As far as I understand, 'paste' with 'collapse' as a character
>     >> string is
>     >> >> supposed to put together elements of a vector into a single
>     >> character
>     >> >> string. I think 'recycle0' shouldn't change it.
>     >> >>
>     >> >> In current R devel and R patched, paste(character(0), collapse =
> "",
>     >> >> recycle0 = FALSE) is character(0). I think it should be "", like
>     >> >> paste(character(0), collapse="").
>     >> >>
>     >> >> paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 =
>     >> FALSE)
>     >> >> is
>     >> >> "4th, 5th".
>     >> >> paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 =
>     >> FALSE)
>     >> >> is
>     >> >> "4th".
>     >> >> I think
>     >> >> paste(c(        ), "th", sep = "", collapse = ", ", recycle0 =
>     >> FALSE)
>     >> >> should be
>     >> >> "",
>     >> >> not character(0).
>     >> >>
>     >> >> ______________________________________________
>     >> >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing
> list
>     >> >>
>     >>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>     >> >>
>     >> >
>     >> >       [[alternative HTML version deleted]]
>     >> >
>     >> > ______________________________________________
>     >> > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     >> >
>     >>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>     >> >
>     >>
>     >> --
>     >> Herv? Pag?s
>     >>
>     >> Program in Computational Biology
>     >> Division of Public Health Sciences
>     >> Fred Hutchinson Cancer Research Center
>     >> 1100 Fairview Ave. N, M1-B514
>     >> P.O. Box 19024
>     >> Seattle, WA 98109-1024
>     >>
>     >> E-mail: hpages at fredhutch.org <mailto:hpages at fredhutch.org>
>     >> Phone:  (206) 667-5791
>     >> Fax:    (206) 667-1319
>     >>
>     >> ______________________________________________
>     >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >> <
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=COnDeGgHNnHJlLLZOznMlhcaFU1nIRlkaSbssvlrMvw&e=
> >
>     >>
>
>     > --
>     > Herv? Pag?s
>
>     > Program in Computational Biology
>     > Division of Public Health Sciences
>     > Fred Hutchinson Cancer Research Center
>     > 1100 Fairview Ave. N, M1-B514
>     > P.O. Box 19024
>     > Seattle, WA 98109-1024
>
>     > E-mail: hpages at fredhutch.org
>     > Phone:  (206) 667-5791
>     > Fax:    (206) 667-1319
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From du@@@@dr|@n @end|ng |rom gm@||@com  Fri May 22 09:25:48 2020
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?utf-8?Q?Adrian_Du=C8=99a?=)
Date: Fri, 22 May 2020 10:25:48 +0300
Subject: [Rd] GCC warning
Message-ID: <F51B821D-D90B-4BB9-9ED7-2F1ABFCB5067@gmail.com>

I am trying to submit a package on CRAN, and everything passes ok on all platforms but Debian, where CRAN responds with an automatic "significant" warning:

* checking whether package ?QCA? can be installed ... [35s/35s] WARNING
Found the following significant warnings:
  /usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: warning: ?__builtin_strncpy? output may be truncated copying 12 bytes from a string of length 79 [-Wstringop-truncation]
See ?/srv/hornik/tmp/CRAN/QCA.Rcheck/00install.out? for details.


I know the cause of this: using a cursomized version of some external C library, coupled with <SystemRequirements: GNU make> in the Description.

But I do not know hot to get past this warning, since it refers to a builtin GCC function strncpy. As far as I read, this should be solved by a simple GCC upgrade to the newest version, but that is something outside my code base, since GCC resides on the CRAN servers.

In the meantime, to get the package published, did anyone encountered a similar problem? If so, is there a workaround?

?
Adrian Dusa
University of Bucharest
Romanian Social Data Archive
Soseaua Panduri nr. 90-92
050663 Bucharest sector 5
Romania
https://adriandusa.eu


From jeroen @end|ng |rom berke|ey@edu  Fri May 22 10:18:47 2020
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Fri, 22 May 2020 10:18:47 +0200
Subject: [Rd] Build failing on win64
Message-ID: <CABFfbXu1CRrkY78dCM-fyVqMyx-C17cVyU54X6ZeDFJ7KKGVMw@mail.gmail.com>

As of commit 78536 earlier this morning the build is failing on
windows 64, see https://r-devel.github.io

I cannot immediately spot what is the problem. The build fails with:

installing 'sysdata.rda'
  make[3]: *** [../../../share/make/basepkg.mk:151: sysdata] Error 127
  make[2]: *** [Makefile.win:22: all] Error 2
  make[1]: *** [Makefile.win:32: R] Error 1


From g@bembecker @end|ng |rom gm@||@com  Fri May 22 12:00:21 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Fri, 22 May 2020 03:00:21 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <24262.44920.82908.796068@stat.math.ethz.ch>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
Message-ID: <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>

Hi Martin et al,



On Thu, May 21, 2020 at 9:42 AM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> Herv? Pag?s
> >>>>>     on Fri, 15 May 2020 13:44:28 -0700 writes:
>
>     > There is still the situation where **both** 'sep' and 'collapse' are
>     > specified:
>
>     >> paste(integer(0), "nth", sep="", collapse=",")
>     > [1] "nth"
>
>     > In that case 'recycle0' should **not** be ignored i.e.
>
>     > paste(integer(0), "nth", sep="", collapse=",", recycle0=TRUE)
>
>     > should return the empty string (and not character(0) like it does at
> the
>     > moment).
>
>     > In other words, 'recycle0' should only control the first operation
> (the
>     > operation controlled by 'sep'). Which makes plenty of sense: the 1st
>     > operation is binary (or n-ary) while the collapse operation is
> unary.
>     > There is no concept of recycling in the context of unary operations.
>
> Interesting, ..., and sounding somewhat convincing.
>
>     > On 5/15/20 11:25, Gabriel Becker wrote:
>     >> Hi all,
>     >>
>     >> This makes sense to me, but I would think that recycle0 and
> collapse
>     >> should actually be incompatible and paste should throw an error if
>     >> recycle0 were TRUE and collapse were declared in the same call. I
> don't
>     >> think the value of recycle0 should be silently ignored if it is
> actively
>     >> specified.
>     >>
>     >> ~G
>
> Just to summarize what I think we should know and agree (or be
> be "disproven") and where this comes from ...
>
> 1) recycle0 is a new R 4.0.0 option in paste() / paste0() which by default
>    (recycle0 = FALSE) should (and *does* AFAIK) not change anything,
>    hence  paste() / paste0() behave completely back-compatible
>    if recycle0 is kept to FALSE.
>
> 2) recycle0 = TRUE is meant to give different behavior, notably
>    0-length arguments (among '...') should result in 0-length results.
>
>    The above does not specify what this means in detail, see 3)
>
> 3) The current R 4.0.0 implementation (for which I'm primarily responsible)
>    and help(paste)  are in accordance.
>    Notably the help page (Arguments -> 'recycle0' ; Details 1st para ;
> Examples)
>    says and shows how the 4.0.0 implementation has been meant to work.
>
> 4) Several provenly smart members of the R community argue that
>    both the implementation and the documentation of 'recycle0 =
>    TRUE'  should be changed to be more logical / coherent / sensical ..
>
> Is the above all correct in your view?
>
> Assuming yes,  I read basically two proposals, both agreeing
> that  recycle0 = TRUE  should only ever apply to the action of 'sep'
> but not the action of 'collapse'.
>
> 1) Bill and Herv? (I think) propose that 'recycle0' should have
>    no effect whenever  'collapse = <string>'
>
> 2) Gabe proposes that 'collapse = <string>' and 'recycle0 = TRUE'
>    should be declared incompatible and error. If going in that
>    direction, I could also see them to give a warning (and
>    continue as if recycle = FALSE).
>

Herve makes a good point about when sep and collapse are both set. That
said, if the user explicitly sets recycle0, Personally, I don't think it
should be silently ignored under any configuration of other arguments.

If all of the arguments are to go into effect, the question then becomes
one of ordering, I think.

Consider

paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ", collapse = ",",
recycle0=TRUE)

Currently that returns character(0), becuase the logic is essenttially (in
pseudo-code)

collapse(paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ",
recycle0=TRUE), collapse = ", ", recycle0=TRUE)

     -> collapse(character(0), collapse = ", " recycle0=TRUE)

-> character(0)

Now Bill Dunlap argued, fairly convincingly I think, that paste(...,
collapse=<string>) should *always* return a character vector of length
exactly one. With recycle0, though,  it will return "" via the progression

paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ", collapse = ",",
recycle0=TRUE)

     -> collapse(character(0), collapse = ", ")

-> ""


because recycle0 is still applied to the sep-based operation which occurs
before collapse, thus leaving a vector of length 0 to collapse.

That is consistent but seems unlikely to be what the user wanted, imho. I
think if it does this there should be at least a warning when paste
collapses to "" this way, if it is allowed at all (ie if mixing
collapse=<string> and recycle0=TRUE is not simply made an error).

I would like to hear others' thoughts as well though. @Pages, Herve
<hpages at fredhutch.org> @William Dunlap <wdunlap at tibco.com> is "" what you
envision as thee desired and useful behavior there?

Best,
~G



> I have not yet my mind up but would tend to agree to "you guys",
> but I think that other R Core members should chime in, too.
>
> Martin
>
>     >> On Fri, May 15, 2020 at 11:05 AM Herv? Pag?s <hpages at fredhutch.org
>     >> <mailto:hpages at fredhutch.org>> wrote:
>     >>
>     >> Totally agree with that.
>     >>
>     >> H.
>     >>
>     >> On 5/15/20 10:34, William Dunlap via R-devel wrote:
>     >> > I agree: paste(collapse="something", ...) should always return a
>     >> single
>     >> > character string, regardless of the value of recycle0.  This
> would be
>     >> > similar to when there are no non-NULL arguments to paste;
>     >> collapse="."
>     >> > gives a single empty string and collapse=NULL gives a zero long
>     >> character
>     >> > vector.
>     >> >> paste()
>     >> > character(0)
>     >> >> paste(collapse=", ")
>     >> > [1] ""
>     >> >
>     >> > Bill Dunlap
>     >> > TIBCO Software
>     >> > wdunlap tibco.com
>     >> <
> https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=rXIwWqf4U4HZS_bjUT3KfA9ARaV5YTb_kEcXWHnkt-c&e=
> >
>     >> >
>     >> >
>     >> > On Thu, Apr 30, 2020 at 9:56 PM suharto_anggono--- via R-devel <
>     >> > r-devel at r-project.org <mailto:r-devel at r-project.org>> wrote:
>     >> >
>     >> >> Without 'collapse', 'paste' pastes (concatenates) its arguments
>     >> >> elementwise (separated by 'sep', " " by default). New in R devel
>     >> and R
>     >> >> patched, specifying recycle0 = FALSE makes mixing zero-length and
>     >> >> nonzero-length arguments results in length zero. The result of
>     >> paste(n,
>     >> >> "th", sep = "", recycle0 = FALSE) always have the same length as
>     >> 'n'.
>     >> >> Previously, the result is still as long as the longest argument,
>     >> with the
>     >> >> zero-length argument like "". If all og the arguments have
>     >> length zero,
>     >> >> 'recycle0' doesn't matter.
>     >> >>
>     >> >> As far as I understand, 'paste' with 'collapse' as a character
>     >> string is
>     >> >> supposed to put together elements of a vector into a single
>     >> character
>     >> >> string. I think 'recycle0' shouldn't change it.
>     >> >>
>     >> >> In current R devel and R patched, paste(character(0), collapse =
> "",
>     >> >> recycle0 = FALSE) is character(0). I think it should be "", like
>     >> >> paste(character(0), collapse="").
>     >> >>
>     >> >> paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 =
>     >> FALSE)
>     >> >> is
>     >> >> "4th, 5th".
>     >> >> paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 =
>     >> FALSE)
>     >> >> is
>     >> >> "4th".
>     >> >> I think
>     >> >> paste(c(        ), "th", sep = "", collapse = ", ", recycle0 =
>     >> FALSE)
>     >> >> should be
>     >> >> "",
>     >> >> not character(0).
>     >> >>
>     >> >> ______________________________________________
>     >> >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing
> list
>     >> >>
>     >>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>     >> >>
>     >> >
>     >> >       [[alternative HTML version deleted]]
>     >> >
>     >> > ______________________________________________
>     >> > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     >> >
>     >>
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>     >> >
>     >>
>     >> --
>     >> Herv? Pag?s
>     >>
>     >> Program in Computational Biology
>     >> Division of Public Health Sciences
>     >> Fred Hutchinson Cancer Research Center
>     >> 1100 Fairview Ave. N, M1-B514
>     >> P.O. Box 19024
>     >> Seattle, WA 98109-1024
>     >>
>     >> E-mail: hpages at fredhutch.org <mailto:hpages at fredhutch.org>
>     >> Phone:  (206) 667-5791
>     >> Fax:    (206) 667-1319
>     >>
>     >> ______________________________________________
>     >> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>     >> <
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=COnDeGgHNnHJlLLZOznMlhcaFU1nIRlkaSbssvlrMvw&e=
> >
>     >>
>
>     > --
>     > Herv? Pag?s
>
>     > Program in Computational Biology
>     > Division of Public Health Sciences
>     > Fred Hutchinson Cancer Research Center
>     > 1100 Fairview Ave. N, M1-B514
>     > P.O. Box 19024
>     > Seattle, WA 98109-1024
>
>     > E-mail: hpages at fredhutch.org
>     > Phone:  (206) 667-5791
>     > Fax:    (206) 667-1319
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri May 22 12:12:17 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 22 May 2020 12:12:17 +0200
Subject: [Rd] Build failing on win64
In-Reply-To: <CABFfbXu1CRrkY78dCM-fyVqMyx-C17cVyU54X6ZeDFJ7KKGVMw@mail.gmail.com>
References: <CABFfbXu1CRrkY78dCM-fyVqMyx-C17cVyU54X6ZeDFJ7KKGVMw@mail.gmail.com>
Message-ID: <70b47b7f-53df-85bb-227f-9f7de66dd874@gmail.com>

Thanks, fixed now.
Tomas

On 5/22/20 10:18 AM, Jeroen Ooms wrote:
> As of commit 78536 earlier this morning the build is failing on
> windows 64, see https://r-devel.github.io
>
> I cannot immediately spot what is the problem. The build fails with:
>
> installing 'sysdata.rda'
>    make[3]: *** [../../../share/make/basepkg.mk:151: sysdata] Error 127
>    make[2]: *** [Makefile.win:22: all] Error 2
>    make[1]: *** [Makefile.win:32: R] Error 1
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |uk@@|ehnert @end|ng |rom goog|em@||@com  Fri May 22 12:26:05 2020
From: |uk@@|ehnert @end|ng |rom goog|em@||@com (Lukas Lehnert)
Date: Fri, 22 May 2020 12:26:05 +0200
Subject: [Rd] Compatibility issues caused by new simplify argument in apply
 function
Message-ID: <1806352.WikOjHgCZ0@lehnert-thinkpad-x220>

Dear R Developers,

the new  simplify argument in apply causes that my package (hsdar) does not 
pass the 
checks in R-devel.

The workaround, Kurt Hornik send me, is working for the R-code:
if("simplify" %in% names(formals(base::apply))) 
 do something 
else 
 do something else

Unfortunately, I cannot conditionalize the man pages of the functions. I get 
the message 
that "applySpeclib.Rd:12-14: Section \Sexpr is unrecognized and will be 
dropped" if I try to 
dynamically define the entire usage section. If I try to use \Sexpr inside the 
\usage section, 
I get the following warning: "applySpeclib.Rd:13-15: Tag \Sexpr is invalid in 
a \usage block"

Does anybody have an idea how to proceed. The full code is available below.

Thanks

Lukas


*1. Code for full usage section:*
..
\description{
Apply function over all spectra or a subset of spectra in a \code{Speclib}.
}

\Sexpr[echo=TRUE,results=rd,stage=install]{
  hsdar:::.applyInHelp1("Speclib", usage = TRUE)
}

\arguments{
..

*Function .applyInHelp1*
.applyInHelp1 <- function(fun_name, usage)
{
  if (usage)
  {
    if ("simplify" %in% names(formals(base::apply))) 
    {
      return(paste0("\\usage{\n",
                    "\\S4method{apply}{", fun_name, "}(X, MARGIN, FUN, ..., 
simplify = TRUE)\n",
                    "}"))
    } else {
      return(paste0("\\usage{\n",
                    "\\S4method{apply}{", fun_name, "}(X, MARGIN, FUN, ...)
\n",
                    "}"))
    }
  } else {
    if ("simplify" %in% names(formals(base::apply))) 
    {
      return("}\n\\item{simplify}{Currently ignored")
    } else {
      return("")
    }
  }
}


*2. Using \Sexpr inside the \usage block*
\usage{
\S4method{apply}{Speclib}(X, FUN, bySI = NULL, ...
\Sexpr[echo=TRUE,results=rd,stage=install]{
  hsdar:::.applyInHelp2(usage = TRUE)
}
)
}


*Function .applyInHelp2*
.applyInHelp2 <- function(usage)
{
  if (usage)
  {
    if ("simplify" %in% names(formals(base::apply))) 
    {
      return(", simplify = TRUE)")
    } 
  } else {
    if ("simplify" %in% names(formals(base::apply))) 
    {
      return("}\n\\item{simplify}{Currently ignored")
    } else {
      return("")
    }
  }
}


From m@r|u@@ho|ert @end|ng |rom uw@ter|oo@c@  Fri May 22 13:44:50 2020
From: m@r|u@@ho|ert @end|ng |rom uw@ter|oo@c@ (Marius Hofert)
Date: Fri, 22 May 2020 07:44:50 -0400
Subject: [Rd] pbirthday() for larger number of classes
Message-ID: <CAM3-KjYD7uZnsytDR98dZPiRu_kwSo9ug29N_zS=+OUXDkdeNA@mail.gmail.com>

Hi,

pbirthday(, coincident = 2) starts to issue warnings (see (*) below)
for larger number of classes (R 4.0.0, R-devel
./src/library/stats/R/birthday.R:47).

The default coincident = 2 is computed as 1 - prod((c:(c - n +
1))/rep(c, n)) where c = classes.
Using exp(log(...)), one can derive the return value if(n > 0)  1 -
exp(sum(log1p(-(0:(n-1))/c))) else 0.
Simplifying this a bit further one obtains if(n >= 2) 1 -
exp(sum(log1p(-(1:(n-1))/c))) else 0.
For large c, sum(log1p(-(1:(n-1))/c)) is close to 0, so a more robust
version would be
to return if(n >= 2) -expm1(sum(log1p(-(1:(n-1))/c))) else 0 in the
default case 'coincident = 2'
(internally: if (k == 2) ...).

## Auxiliary function *just* considering 'coincident = 2'
pbirthday2 <- function(n, classes = 365) {
    c <- classes # as pbirthday()
    if(n >= 2) -expm1(sum(log1p(-(1:(n-1))/c))) else 0 # return value
suggested for the case 'if (k == 2) ...'
}

pbirthday (3, classes = 2) == pbirthday2(3, classes = 2) # identical

pbirthday (3, classes = 2^53) == pbirthday2(3, classes = 2^53) # not
identical anymore...
stopifnot(all.equal(pbirthday (3, classes = 2^53), pbirthday2(3,
classes = 2^53))) # ... but numerically equal

pbirthday (3, classes = 2^54) # warnings start to appear (*)
pbirthday2(3, classes = 2^54) # fine

pbirthday (3, classes = 2^56) == 0 # numerically indistinguishable from 0
pbirthday2(3, classes = 2^56) # fine

Cheers,
M


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri May 22 15:25:59 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 22 May 2020 09:25:59 -0400
Subject: [Rd] 
 Compatibility issues caused by new simplify argument in apply
 function
In-Reply-To: <1806352.WikOjHgCZ0@lehnert-thinkpad-x220>
References: <1806352.WikOjHgCZ0@lehnert-thinkpad-x220>
Message-ID: <f347ea92-19af-b035-8662-47a644f40eab@gmail.com>

You didn't explained what the error is.  This is what it looks like to 
me, but I'm probably wrong in some details:

1. R-devel added an argument to the apply() function, so the header has 
changed from

   function (X, MARGIN, FUN, ...)

to

   function(X, MARGIN, FUN, ..., simplify = TRUE)

2. Your package converted the function apply() to an S4 generic.

3. Now the signatures of your methods for this generic need to have the 
simplify argument, but if you do that, they won't work in previous 
versions of R.

You'd like to have conditional code and documentation to depend on the 
version of R.

Is that all correct?

I don't think it's possible, for the reasons you found.  Certainly you 
can have conditional code, but the docs are going to fail.

One thing that might work is in versions of R before this change, export 
your own version of apply, with the change in place, i.e.

if(!("simplify" %in% names(formals(base::apply))))
   apply <- function(X, MARGIN, FUN, ..., simplify = TRUE) {
     base::apply(X, MARGIN, FUN, ...)
   }

and then conditionally export "apply" in these old versions.  Then your 
docs could match the new version everywhere.

Another thing is to maintain two versions of your package, one for R 
versions before the change, another for versions after the change.  Add 
appropriate entries in the DESCRIPTION file, e.g.

Depends:  R (> 4.0)

Another is to argue with R Core that this change to a really old 
function is too hard to accommodate, and they should back it out, maybe 
by making a new function with the new signature.

Or you could make a new function with the old signature, and use that 
instead of apply().

Duncan Murdoch



On 22/05/2020 6:26 a.m., Lukas Lehnert via R-devel wrote:
> Dear R Developers,
> 
> the new  simplify argument in apply causes that my package (hsdar) does not
> pass the
> checks in R-devel.
> 
> The workaround, Kurt Hornik send me, is working for the R-code:
> if("simplify" %in% names(formals(base::apply)))
>   do something
> else
>   do something else
> 
> Unfortunately, I cannot conditionalize the man pages of the functions. I get
> the message
> that "applySpeclib.Rd:12-14: Section \Sexpr is unrecognized and will be
> dropped" if I try to
> dynamically define the entire usage section. If I try to use \Sexpr inside the
> \usage section,
> I get the following warning: "applySpeclib.Rd:13-15: Tag \Sexpr is invalid in
> a \usage block"
> 
> Does anybody have an idea how to proceed. The full code is available below.
> 
> Thanks
> 
> Lukas
> 
> 
> *1. Code for full usage section:*
> ..
> \description{
> Apply function over all spectra or a subset of spectra in a \code{Speclib}.
> }
> 
> \Sexpr[echo=TRUE,results=rd,stage=install]{
>    hsdar:::.applyInHelp1("Speclib", usage = TRUE)
> }
> 
> \arguments{
> ..
> 
> *Function .applyInHelp1*
> .applyInHelp1 <- function(fun_name, usage)
> {
>    if (usage)
>    {
>      if ("simplify" %in% names(formals(base::apply)))
>      {
>        return(paste0("\\usage{\n",
>                      "\\S4method{apply}{", fun_name, "}(X, MARGIN, FUN, ...,
> simplify = TRUE)\n",
>                      "}"))
>      } else {
>        return(paste0("\\usage{\n",
>                      "\\S4method{apply}{", fun_name, "}(X, MARGIN, FUN, ...)
> \n",
>                      "}"))
>      }
>    } else {
>      if ("simplify" %in% names(formals(base::apply)))
>      {
>        return("}\n\\item{simplify}{Currently ignored")
>      } else {
>        return("")
>      }
>    }
> }
> 
> 
> *2. Using \Sexpr inside the \usage block*
> \usage{
> \S4method{apply}{Speclib}(X, FUN, bySI = NULL, ...
> \Sexpr[echo=TRUE,results=rd,stage=install]{
>    hsdar:::.applyInHelp2(usage = TRUE)
> }
> )
> }
> 
> 
> *Function .applyInHelp2*
> .applyInHelp2 <- function(usage)
> {
>    if (usage)
>    {
>      if ("simplify" %in% names(formals(base::apply)))
>      {
>        return(", simplify = TRUE)")
>      }
>    } else {
>      if ("simplify" %in% names(formals(base::apply)))
>      {
>        return("}\n\\item{simplify}{Currently ignored")
>      } else {
>        return("")
>      }
>    }
> }
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri May 22 17:47:00 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 22 May 2020 08:47:00 -0700
Subject: [Rd] 
 Compatibility issues caused by new simplify argument in apply
 function
In-Reply-To: <f347ea92-19af-b035-8662-47a644f40eab@gmail.com>
References: <1806352.WikOjHgCZ0@lehnert-thinkpad-x220>
 <f347ea92-19af-b035-8662-47a644f40eab@gmail.com>
Message-ID: <CAFDcVCQxN3OGkdXkrz+SX=PjxvKgCcizEoZ3WNnChTWr=YqW3Q@mail.gmail.com>

Interesting problem.  I'm very rusty on S4 but would one solution be
to, already now, add 'simplify = TRUE' to the S4 method and document
it;

setMethod("apply", signature(X = "Speclib"),
          function(X,
                   FUN,
                   bySI = NULL,
                   ...,
                   simplify = TRUE) {

?

Henrik

On Fri, May 22, 2020 at 6:26 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> You didn't explained what the error is.  This is what it looks like to
> me, but I'm probably wrong in some details:
>
> 1. R-devel added an argument to the apply() function, so the header has
> changed from
>
>    function (X, MARGIN, FUN, ...)
>
> to
>
>    function(X, MARGIN, FUN, ..., simplify = TRUE)
>
> 2. Your package converted the function apply() to an S4 generic.
>
> 3. Now the signatures of your methods for this generic need to have the
> simplify argument, but if you do that, they won't work in previous
> versions of R.
>
> You'd like to have conditional code and documentation to depend on the
> version of R.
>
> Is that all correct?
>
> I don't think it's possible, for the reasons you found.  Certainly you
> can have conditional code, but the docs are going to fail.
>
> One thing that might work is in versions of R before this change, export
> your own version of apply, with the change in place, i.e.
>
> if(!("simplify" %in% names(formals(base::apply))))
>    apply <- function(X, MARGIN, FUN, ..., simplify = TRUE) {
>      base::apply(X, MARGIN, FUN, ...)
>    }
>
> and then conditionally export "apply" in these old versions.  Then your
> docs could match the new version everywhere.
>
> Another thing is to maintain two versions of your package, one for R
> versions before the change, another for versions after the change.  Add
> appropriate entries in the DESCRIPTION file, e.g.
>
> Depends:  R (> 4.0)
>
> Another is to argue with R Core that this change to a really old
> function is too hard to accommodate, and they should back it out, maybe
> by making a new function with the new signature.
>
> Or you could make a new function with the old signature, and use that
> instead of apply().
>
> Duncan Murdoch
>
>
>
> On 22/05/2020 6:26 a.m., Lukas Lehnert via R-devel wrote:
> > Dear R Developers,
> >
> > the new  simplify argument in apply causes that my package (hsdar) does not
> > pass the
> > checks in R-devel.
> >
> > The workaround, Kurt Hornik send me, is working for the R-code:
> > if("simplify" %in% names(formals(base::apply)))
> >   do something
> > else
> >   do something else
> >
> > Unfortunately, I cannot conditionalize the man pages of the functions. I get
> > the message
> > that "applySpeclib.Rd:12-14: Section \Sexpr is unrecognized and will be
> > dropped" if I try to
> > dynamically define the entire usage section. If I try to use \Sexpr inside the
> > \usage section,
> > I get the following warning: "applySpeclib.Rd:13-15: Tag \Sexpr is invalid in
> > a \usage block"
> >
> > Does anybody have an idea how to proceed. The full code is available below.
> >
> > Thanks
> >
> > Lukas
> >
> >
> > *1. Code for full usage section:*
> > ..
> > \description{
> > Apply function over all spectra or a subset of spectra in a \code{Speclib}.
> > }
> >
> > \Sexpr[echo=TRUE,results=rd,stage=install]{
> >    hsdar:::.applyInHelp1("Speclib", usage = TRUE)
> > }
> >
> > \arguments{
> > ..
> >
> > *Function .applyInHelp1*
> > .applyInHelp1 <- function(fun_name, usage)
> > {
> >    if (usage)
> >    {
> >      if ("simplify" %in% names(formals(base::apply)))
> >      {
> >        return(paste0("\\usage{\n",
> >                      "\\S4method{apply}{", fun_name, "}(X, MARGIN, FUN, ...,
> > simplify = TRUE)\n",
> >                      "}"))
> >      } else {
> >        return(paste0("\\usage{\n",
> >                      "\\S4method{apply}{", fun_name, "}(X, MARGIN, FUN, ...)
> > \n",
> >                      "}"))
> >      }
> >    } else {
> >      if ("simplify" %in% names(formals(base::apply)))
> >      {
> >        return("}\n\\item{simplify}{Currently ignored")
> >      } else {
> >        return("")
> >      }
> >    }
> > }
> >
> >
> > *2. Using \Sexpr inside the \usage block*
> > \usage{
> > \S4method{apply}{Speclib}(X, FUN, bySI = NULL, ...
> > \Sexpr[echo=TRUE,results=rd,stage=install]{
> >    hsdar:::.applyInHelp2(usage = TRUE)
> > }
> > )
> > }
> >
> >
> > *Function .applyInHelp2*
> > .applyInHelp2 <- function(usage)
> > {
> >    if (usage)
> >    {
> >      if ("simplify" %in% names(formals(base::apply)))
> >      {
> >        return(", simplify = TRUE)")
> >      }
> >    } else {
> >      if ("simplify" %in% names(formals(base::apply)))
> >      {
> >        return("}\n\\item{simplify}{Currently ignored")
> >      } else {
> >        return("")
> >      }
> >    }
> > }
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hp@ge@ @end|ng |rom |redhutch@org  Fri May 22 18:12:12 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 22 May 2020 09:12:12 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
Message-ID: <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>

I think that

    paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ", collapse = ",", 
recycle0=TRUE)

should just return an empty string and don't see why it needs to emit a 
warning or raise an error. To me it does exactly what the user is asking 
for, which is to change how the 3 arguments are recycled **before** the 
'sep' operation.

The 'recycle0' argument has no business in the 'collapse' operation 
(which comes after the 'sep' operation): this operation still behaves 
like it always had.

That's all there is to it.

H.


On 5/22/20 03:00, Gabriel Becker wrote:
> Hi Martin et al,
> 
> 
> 
> On Thu, May 21, 2020 at 9:42 AM Martin Maechler 
> <maechler at stat.math.ethz.ch <mailto:maechler at stat.math.ethz.ch>> wrote:
> 
>      >>>>> Herv? Pag?s
>      >>>>>? ? ?on Fri, 15 May 2020 13:44:28 -0700 writes:
> 
>      ? ? > There is still the situation where **both** 'sep' and
>     'collapse' are
>      ? ? > specified:
> 
>      ? ? >> paste(integer(0), "nth", sep="", collapse=",")
>      ? ? > [1] "nth"
> 
>      ? ? > In that case 'recycle0' should **not** be ignored i.e.
> 
>      ? ? > paste(integer(0), "nth", sep="", collapse=",", recycle0=TRUE)
> 
>      ? ? > should return the empty string (and not character(0) like it
>     does at the
>      ? ? > moment).
> 
>      ? ? > In other words, 'recycle0' should only control the first
>     operation (the
>      ? ? > operation controlled by 'sep'). Which makes plenty of sense:
>     the 1st
>      ? ? > operation is binary (or n-ary) while the collapse operation
>     is unary.
>      ? ? > There is no concept of recycling in the context of unary
>     operations.
> 
>     Interesting, ..., and sounding somewhat convincing.
> 
>      ? ? > On 5/15/20 11:25, Gabriel Becker wrote:
>      ? ? >> Hi all,
>      ? ? >>
>      ? ? >> This makes sense to me, but I would think that recycle0 and
>     collapse
>      ? ? >> should actually be incompatible and paste should throw an
>     error if
>      ? ? >> recycle0 were TRUE and collapse were declared in the same
>     call. I don't
>      ? ? >> think the value of recycle0 should be silently ignored if it
>     is actively
>      ? ? >> specified.
>      ? ? >>
>      ? ? >> ~G
> 
>     Just to summarize what I think we should know and agree (or be
>     be "disproven") and where this comes from ...
> 
>     1) recycle0 is a new R 4.0.0 option in paste() / paste0() which by
>     default
>      ? ?(recycle0 = FALSE) should (and *does* AFAIK) not change anything,
>      ? ?hence? paste() / paste0() behave completely back-compatible
>      ? ?if recycle0 is kept to FALSE.
> 
>     2) recycle0 = TRUE is meant to give different behavior, notably
>      ? ?0-length arguments (among '...') should result in 0-length results.
> 
>      ? ?The above does not specify what this means in detail, see 3)
> 
>     3) The current R 4.0.0 implementation (for which I'm primarily
>     responsible)
>      ? ?and help(paste)? are in accordance.
>      ? ?Notably the help page (Arguments -> 'recycle0' ; Details 1st
>     para ; Examples)
>      ? ?says and shows how the 4.0.0 implementation has been meant to work.
> 
>     4) Several provenly smart members of the R community argue that
>      ? ?both the implementation and the documentation of 'recycle0 =
>      ? ?TRUE'? should be changed to be more logical / coherent / sensical ..
> 
>     Is the above all correct in your view?
> 
>     Assuming yes,? I read basically two proposals, both agreeing
>     that? recycle0 = TRUE? should only ever apply to the action of 'sep'
>     but not the action of 'collapse'.
> 
>     1) Bill and Herv? (I think) propose that 'recycle0' should have
>      ? ?no effect whenever? 'collapse = <string>'
> 
>     2) Gabe proposes that 'collapse = <string>' and 'recycle0 = TRUE'
>      ? ?should be declared incompatible and error. If going in that
>      ? ?direction, I could also see them to give a warning (and
>      ? ?continue as if recycle = FALSE).
> 
> 
> Herve makes a good point about when sep and collapse are both set. That 
> said, if the user explicitly sets recycle0, Personally, I don't think it 
> should be silently ignored under any configuration of other arguments.
> 
> If all of the arguments are to go into effect, the question then becomes 
> one of ordering, I think.
> 
> Consider
> 
>     paste(c("a", "b"), NULL, c("c",? "d"),? sep = " ", collapse = ",", 
>     recycle0=TRUE)
> 
> Currently that returns character(0), becuase?the logic is 
> essenttially?(in pseudo-code)
> 
>     collapse(paste(c("a", "b"), NULL, c("c",? "d"),? sep = " ", 
>     recycle0=TRUE), collapse = ", ", recycle0=TRUE)
> 
>  ? ? ?-> collapse(character(0), collapse = ", "?recycle0=TRUE)
> 
>     -> character(0)
> 
> Now Bill Dunlap argued, fairly convincingly I think, that paste(..., 
> collapse=<string>) should /always/?return a character vector of length 
> exactly one. With recycle0, though,??it will return "" via the progression
> 
>     paste(c("a", "b"), NULL, c("c",? "d"),? sep = " ", collapse = ",", 
>     recycle0=TRUE)
> 
>  ? ? ?-> collapse(character(0),?collapse = ", ")
> 
>     -> ""
> 
> 
> because recycle0 is still applied to the sep-based operation which 
> occurs before collapse, thus leaving a vector of length?0 to collapse.
> 
> That is consistent but seems unlikely to be what the user wanted, imho. 
> I think if it does this there should be at least a warning when paste 
> collapses to "" this way, if it is allowed at all (ie if mixing 
> collapse=<string>and recycle0=TRUEis not simply made an error).
> 
> I would like to hear others' thoughts as well though. @Pages, Herve 
> <mailto:hpages at fredhutch.org> @William Dunlap 
> <mailto:wdunlap at tibco.com>?is "" what you envision as thee desired and 
> useful behavior there?
> 
> Best,
> ~G
> 
> 
> 
>     I have not yet my mind up but would tend to agree to "you guys",
>     but I think that other R Core members should chime in, too.
> 
>     Martin
> 
>      ? ? >> On Fri, May 15, 2020 at 11:05 AM Herv? Pag?s
>     <hpages at fredhutch.org <mailto:hpages at fredhutch.org>
>      ? ? >> <mailto:hpages at fredhutch.org <mailto:hpages at fredhutch.org>>>
>     wrote:
>      ? ? >>
>      ? ? >> Totally agree with that.
>      ? ? >>
>      ? ? >> H.
>      ? ? >>
>      ? ? >> On 5/15/20 10:34, William Dunlap via R-devel wrote:
>      ? ? >> > I agree: paste(collapse="something", ...) should always
>     return a
>      ? ? >> single
>      ? ? >> > character string, regardless of the value of recycle0. 
>     This would be
>      ? ? >> > similar to when there are no non-NULL arguments to paste;
>      ? ? >> collapse="."
>      ? ? >> > gives a single empty string and collapse=NULL gives a zero
>     long
>      ? ? >> character
>      ? ? >> > vector.
>      ? ? >> >> paste()
>      ? ? >> > character(0)
>      ? ? >> >> paste(collapse=", ")
>      ? ? >> > [1] ""
>      ? ? >> >
>      ? ? >> > Bill Dunlap
>      ? ? >> > TIBCO Software
>      ? ? >> > wdunlap tibco.com
>     <https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=o9ozvxBK-kVvAUFro7U1RrI5w0U8EPb0uyjQwMvOpt8&e=>
>      ? ? >>
>     <https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=rXIwWqf4U4HZS_bjUT3KfA9ARaV5YTb_kEcXWHnkt-c&e=>
>      ? ? >> >
>      ? ? >> >
>      ? ? >> > On Thu, Apr 30, 2020 at 9:56 PM suharto_anggono--- via
>     R-devel <
>      ? ? >> > r-devel at r-project.org <mailto:r-devel at r-project.org>
>     <mailto:r-devel at r-project.org <mailto:r-devel at r-project.org>>> wrote:
>      ? ? >> >
>      ? ? >> >> Without 'collapse', 'paste' pastes (concatenates) its
>     arguments
>      ? ? >> >> elementwise (separated by 'sep', " " by default). New in
>     R devel
>      ? ? >> and R
>      ? ? >> >> patched, specifying recycle0 = FALSE makes mixing
>     zero-length and
>      ? ? >> >> nonzero-length arguments results in length zero. The
>     result of
>      ? ? >> paste(n,
>      ? ? >> >> "th", sep = "", recycle0 = FALSE) always have the same
>     length as
>      ? ? >> 'n'.
>      ? ? >> >> Previously, the result is still as long as the longest
>     argument,
>      ? ? >> with the
>      ? ? >> >> zero-length argument like "". If all og the arguments have
>      ? ? >> length zero,
>      ? ? >> >> 'recycle0' doesn't matter.
>      ? ? >> >>
>      ? ? >> >> As far as I understand, 'paste' with 'collapse' as a
>     character
>      ? ? >> string is
>      ? ? >> >> supposed to put together elements of a vector into a single
>      ? ? >> character
>      ? ? >> >> string. I think 'recycle0' shouldn't change it.
>      ? ? >> >>
>      ? ? >> >> In current R devel and R patched, paste(character(0),
>     collapse = "",
>      ? ? >> >> recycle0 = FALSE) is character(0). I think it should be
>     "", like
>      ? ? >> >> paste(character(0), collapse="").
>      ? ? >> >>
>      ? ? >> >> paste(c("4", "5"), "th", sep = "", collapse = ", ",
>     recycle0 =
>      ? ? >> FALSE)
>      ? ? >> >> is
>      ? ? >> >> "4th, 5th".
>      ? ? >> >> paste(c("4"? ? ?), "th", sep = "", collapse = ", ",
>     recycle0 =
>      ? ? >> FALSE)
>      ? ? >> >> is
>      ? ? >> >> "4th".
>      ? ? >> >> I think
>      ? ? >> >> paste(c(? ? ? ? ), "th", sep = "", collapse = ", ",
>     recycle0 =
>      ? ? >> FALSE)
>      ? ? >> >> should be
>      ? ? >> >> "",
>      ? ? >> >> not character(0).
>      ? ? >> >>
>      ? ? >> >> ______________________________________________
>      ? ? >> >> R-devel at r-project.org <mailto:R-devel at r-project.org>
>     <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
>     mailing list
>      ? ? >> >>
>      ? ? >>
>     https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>      ? ? >> >>
>      ? ? >> >
>      ? ? >> >? ? ? ?[[alternative HTML version deleted]]
>      ? ? >> >
>      ? ? >> > ______________________________________________
>      ? ? >> > R-devel at r-project.org <mailto:R-devel at r-project.org>
>     <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
>     mailing list
>      ? ? >> >
>      ? ? >>
>     https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>      ? ? >> >
>      ? ? >>
>      ? ? >> --
>      ? ? >> Herv? Pag?s
>      ? ? >>
>      ? ? >> Program in Computational Biology
>      ? ? >> Division of Public Health Sciences
>      ? ? >> Fred Hutchinson Cancer Research Center
>      ? ? >> 1100 Fairview Ave. N, M1-B514
>      ? ? >> P.O. Box 19024
>      ? ? >> Seattle, WA 98109-1024
>      ? ? >>
>      ? ? >> E-mail: hpages at fredhutch.org <mailto:hpages at fredhutch.org>
>     <mailto:hpages at fredhutch.org <mailto:hpages at fredhutch.org>>
>      ? ? >> Phone:? (206) 667-5791
>      ? ? >> Fax:? ? (206) 667-1319
>      ? ? >>
>      ? ? >> ______________________________________________
>      ? ? >> R-devel at r-project.org <mailto:R-devel at r-project.org>
>     <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
>     mailing list
>      ? ? >> https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=OLA7CqaU5uKeid1aGw41XJ_2Uq7JXbcwpPOrTWWG2v4&e=>
>      ? ? >>
>     <https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=COnDeGgHNnHJlLLZOznMlhcaFU1nIRlkaSbssvlrMvw&e=>
>      ? ? >>
> 
>      ? ? > --
>      ? ? > Herv? Pag?s
> 
>      ? ? > Program in Computational Biology
>      ? ? > Division of Public Health Sciences
>      ? ? > Fred Hutchinson Cancer Research Center
>      ? ? > 1100 Fairview Ave. N, M1-B514
>      ? ? > P.O. Box 19024
>      ? ? > Seattle, WA 98109-1024
> 
>      ? ? > E-mail: hpages at fredhutch.org <mailto:hpages at fredhutch.org>
>      ? ? > Phone:? (206) 667-5791
>      ? ? > Fax:? ? (206) 667-1319
> 
>      ? ? > ______________________________________________
>      ? ? > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>      ? ? > https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=OLA7CqaU5uKeid1aGw41XJ_2Uq7JXbcwpPOrTWWG2v4&e=>
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri May 22 18:28:45 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 22 May 2020 12:28:45 -0400
Subject: [Rd] 
 Compatibility issues caused by new simplify argument in apply
 function
In-Reply-To: <CAFDcVCQxN3OGkdXkrz+SX=PjxvKgCcizEoZ3WNnChTWr=YqW3Q@mail.gmail.com>
References: <1806352.WikOjHgCZ0@lehnert-thinkpad-x220>
 <f347ea92-19af-b035-8662-47a644f40eab@gmail.com>
 <CAFDcVCQxN3OGkdXkrz+SX=PjxvKgCcizEoZ3WNnChTWr=YqW3Q@mail.gmail.com>
Message-ID: <4cf7a4b4-13bd-72de-e414-1c6f7d78537a@gmail.com>

On 22/05/2020 11:47 a.m., Henrik Bengtsson wrote:
> Interesting problem.  I'm very rusty on S4 but would one solution be
> to, already now, add 'simplify = TRUE' to the S4 method and document
> it;
> 
> setMethod("apply", signature(X = "Speclib"),
>            function(X,
>                     FUN,
>                     bySI = NULL,
>                     ...,
>                     simplify = TRUE) {
> 
> ?

Yes, that sounds like an ideal solution.  The docs can say it is ignored 
in old versions and passed on in new ones.

Duncan Murdoch

> 
> Henrik
> 
> On Fri, May 22, 2020 at 6:26 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> You didn't explained what the error is.  This is what it looks like to
>> me, but I'm probably wrong in some details:
>>
>> 1. R-devel added an argument to the apply() function, so the header has
>> changed from
>>
>>     function (X, MARGIN, FUN, ...)
>>
>> to
>>
>>     function(X, MARGIN, FUN, ..., simplify = TRUE)
>>
>> 2. Your package converted the function apply() to an S4 generic.
>>
>> 3. Now the signatures of your methods for this generic need to have the
>> simplify argument, but if you do that, they won't work in previous
>> versions of R.
>>
>> You'd like to have conditional code and documentation to depend on the
>> version of R.
>>
>> Is that all correct?
>>
>> I don't think it's possible, for the reasons you found.  Certainly you
>> can have conditional code, but the docs are going to fail.
>>
>> One thing that might work is in versions of R before this change, export
>> your own version of apply, with the change in place, i.e.
>>
>> if(!("simplify" %in% names(formals(base::apply))))
>>     apply <- function(X, MARGIN, FUN, ..., simplify = TRUE) {
>>       base::apply(X, MARGIN, FUN, ...)
>>     }
>>
>> and then conditionally export "apply" in these old versions.  Then your
>> docs could match the new version everywhere.
>>
>> Another thing is to maintain two versions of your package, one for R
>> versions before the change, another for versions after the change.  Add
>> appropriate entries in the DESCRIPTION file, e.g.
>>
>> Depends:  R (> 4.0)
>>
>> Another is to argue with R Core that this change to a really old
>> function is too hard to accommodate, and they should back it out, maybe
>> by making a new function with the new signature.
>>
>> Or you could make a new function with the old signature, and use that
>> instead of apply().
>>
>> Duncan Murdoch
>>
>>
>>
>> On 22/05/2020 6:26 a.m., Lukas Lehnert via R-devel wrote:
>>> Dear R Developers,
>>>
>>> the new  simplify argument in apply causes that my package (hsdar) does not
>>> pass the
>>> checks in R-devel.
>>>
>>> The workaround, Kurt Hornik send me, is working for the R-code:
>>> if("simplify" %in% names(formals(base::apply)))
>>>    do something
>>> else
>>>    do something else
>>>
>>> Unfortunately, I cannot conditionalize the man pages of the functions. I get
>>> the message
>>> that "applySpeclib.Rd:12-14: Section \Sexpr is unrecognized and will be
>>> dropped" if I try to
>>> dynamically define the entire usage section. If I try to use \Sexpr inside the
>>> \usage section,
>>> I get the following warning: "applySpeclib.Rd:13-15: Tag \Sexpr is invalid in
>>> a \usage block"
>>>
>>> Does anybody have an idea how to proceed. The full code is available below.
>>>
>>> Thanks
>>>
>>> Lukas
>>>
>>>
>>> *1. Code for full usage section:*
>>> ..
>>> \description{
>>> Apply function over all spectra or a subset of spectra in a \code{Speclib}.
>>> }
>>>
>>> \Sexpr[echo=TRUE,results=rd,stage=install]{
>>>     hsdar:::.applyInHelp1("Speclib", usage = TRUE)
>>> }
>>>
>>> \arguments{
>>> ..
>>>
>>> *Function .applyInHelp1*
>>> .applyInHelp1 <- function(fun_name, usage)
>>> {
>>>     if (usage)
>>>     {
>>>       if ("simplify" %in% names(formals(base::apply)))
>>>       {
>>>         return(paste0("\\usage{\n",
>>>                       "\\S4method{apply}{", fun_name, "}(X, MARGIN, FUN, ...,
>>> simplify = TRUE)\n",
>>>                       "}"))
>>>       } else {
>>>         return(paste0("\\usage{\n",
>>>                       "\\S4method{apply}{", fun_name, "}(X, MARGIN, FUN, ...)
>>> \n",
>>>                       "}"))
>>>       }
>>>     } else {
>>>       if ("simplify" %in% names(formals(base::apply)))
>>>       {
>>>         return("}\n\\item{simplify}{Currently ignored")
>>>       } else {
>>>         return("")
>>>       }
>>>     }
>>> }
>>>
>>>
>>> *2. Using \Sexpr inside the \usage block*
>>> \usage{
>>> \S4method{apply}{Speclib}(X, FUN, bySI = NULL, ...
>>> \Sexpr[echo=TRUE,results=rd,stage=install]{
>>>     hsdar:::.applyInHelp2(usage = TRUE)
>>> }
>>> )
>>> }
>>>
>>>
>>> *Function .applyInHelp2*
>>> .applyInHelp2 <- function(usage)
>>> {
>>>     if (usage)
>>>     {
>>>       if ("simplify" %in% names(formals(base::apply)))
>>>       {
>>>         return(", simplify = TRUE)")
>>>       }
>>>     } else {
>>>       if ("simplify" %in% names(formals(base::apply)))
>>>       {
>>>         return("}\n\\item{simplify}{Currently ignored")
>>>       } else {
>>>         return("")
>>>       }
>>>     }
>>> }
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From |uk@@|ehnert @end|ng |rom goog|em@||@com  Fri May 22 18:31:11 2020
From: |uk@@|ehnert @end|ng |rom goog|em@||@com (Lukas Lehnert)
Date: Fri, 22 May 2020 18:31:11 +0200
Subject: [Rd] 
 Compatibility issues caused by new simplify argument in apply
 function
In-Reply-To: <CAFDcVCQxN3OGkdXkrz+SX=PjxvKgCcizEoZ3WNnChTWr=YqW3Q@mail.gmail.com>
References: <1806352.WikOjHgCZ0@lehnert-thinkpad-x220>
 <f347ea92-19af-b035-8662-47a644f40eab@gmail.com>
 <CAFDcVCQxN3OGkdXkrz+SX=PjxvKgCcizEoZ3WNnChTWr=YqW3Q@mail.gmail.com>
Message-ID: <1596372.qz0RdczK0k@lehnert-thinkpad-x220>

I am sorry for being not specific enough. Both of you were right with your 
guess how the initial problem looked like.

I followed the suggestion of Henrik and at least on my computer it seems to 
work (sometimes solutions are much easier than you think). Let's see what CRAN 
tells me...

Thank you for your time and thinking about the problem!

Best

Lukas

Am Freitag, 22. Mai 2020, 17:47:00 CEST schrieb Henrik Bengtsson:
> Interesting problem.  I'm very rusty on S4 but would one solution be
> to, already now, add 'simplify = TRUE' to the S4 method and document
> it;
> 
> setMethod("apply", signature(X = "Speclib"),
>           function(X,
>                    FUN,
>                    bySI = NULL,
>                    ...,
>                    simplify = TRUE) {
> 
> ?
> 
> Henrik
> 
> On Fri, May 22, 2020 at 6:26 AM Duncan Murdoch <murdoch.duncan at gmail.com> 
wrote:
> > You didn't explained what the error is.  This is what it looks like to
> > me, but I'm probably wrong in some details:
> > 
> > 1. R-devel added an argument to the apply() function, so the header has
> > changed from
> > 
> >    function (X, MARGIN, FUN, ...)
> > 
> > to
> > 
> >    function(X, MARGIN, FUN, ..., simplify = TRUE)
> > 
> > 2. Your package converted the function apply() to an S4 generic.
> > 
> > 3. Now the signatures of your methods for this generic need to have the
> > simplify argument, but if you do that, they won't work in previous
> > versions of R.
> > 
> > You'd like to have conditional code and documentation to depend on the
> > version of R.
> > 
> > Is that all correct?
> > 
> > I don't think it's possible, for the reasons you found.  Certainly you
> > can have conditional code, but the docs are going to fail.
> > 
> > One thing that might work is in versions of R before this change, export
> > your own version of apply, with the change in place, i.e.
> > 
> > if(!("simplify" %in% names(formals(base::apply))))
> > 
> >    apply <- function(X, MARGIN, FUN, ..., simplify = TRUE) {
> >    
> >      base::apply(X, MARGIN, FUN, ...)
> >    
> >    }
> > 
> > and then conditionally export "apply" in these old versions.  Then your
> > docs could match the new version everywhere.
> > 
> > Another thing is to maintain two versions of your package, one for R
> > versions before the change, another for versions after the change.  Add
> > appropriate entries in the DESCRIPTION file, e.g.
> > 
> > Depends:  R (> 4.0)
> > 
> > Another is to argue with R Core that this change to a really old
> > function is too hard to accommodate, and they should back it out, maybe
> > by making a new function with the new signature.
> > 
> > Or you could make a new function with the old signature, and use that
> > instead of apply().
> > 
> > Duncan Murdoch
> > 
> > On 22/05/2020 6:26 a.m., Lukas Lehnert via R-devel wrote:
> > > Dear R Developers,
> > > 
> > > the new  simplify argument in apply causes that my package (hsdar) does
> > > not
> > > pass the
> > > checks in R-devel.
> > > 
> > > The workaround, Kurt Hornik send me, is working for the R-code:
> > > if("simplify" %in% names(formals(base::apply)))
> > > 
> > >   do something
> > > 
> > > else
> > > 
> > >   do something else
> > > 
> > > Unfortunately, I cannot conditionalize the man pages of the functions. I
> > > get the message
> > > that "applySpeclib.Rd:12-14: Section \Sexpr is unrecognized and will be
> > > dropped" if I try to
> > > dynamically define the entire usage section. If I try to use \Sexpr
> > > inside the \usage section,
> > > I get the following warning: "applySpeclib.Rd:13-15: Tag \Sexpr is
> > > invalid in a \usage block"
> > > 
> > > Does anybody have an idea how to proceed. The full code is available
> > > below.
> > > 
> > > Thanks
> > > 
> > > Lukas
> > > 
> > > 
> > > *1. Code for full usage section:*
> > > ..
> > > \description{
> > > Apply function over all spectra or a subset of spectra in a
> > > \code{Speclib}.
> > > }
> > > 
> > > \Sexpr[echo=TRUE,results=rd,stage=install]{
> > > 
> > >    hsdar:::.applyInHelp1("Speclib", usage = TRUE)
> > > 
> > > }
> > > 
> > > \arguments{
> > > ..
> > > 
> > > *Function .applyInHelp1*
> > > .applyInHelp1 <- function(fun_name, usage)
> > > {
> > > 
> > >    if (usage)
> > >    {
> > >    
> > >      if ("simplify" %in% names(formals(base::apply)))
> > >      {
> > >      
> > >        return(paste0("\\usage{\n",
> > >        
> > >                      "\\S4method{apply}{", fun_name, "}(X, MARGIN, FUN,
> > >                      ...,
> > > 
> > > simplify = TRUE)\n",
> > > 
> > >                      "}"))
> > >      
> > >      } else {
> > >      
> > >        return(paste0("\\usage{\n",
> > >        
> > >                      "\\S4method{apply}{", fun_name, "}(X, MARGIN, FUN,
> > >                      ...)
> > > 
> > > \n",
> > > 
> > >                      "}"))
> > >      
> > >      }
> > >    
> > >    } else {
> > >    
> > >      if ("simplify" %in% names(formals(base::apply)))
> > >      {
> > >      
> > >        return("}\n\\item{simplify}{Currently ignored")
> > >      
> > >      } else {
> > >      
> > >        return("")
> > >      
> > >      }
> > >    
> > >    }
> > > 
> > > }
> > > 
> > > 
> > > *2. Using \Sexpr inside the \usage block*
> > > \usage{
> > > \S4method{apply}{Speclib}(X, FUN, bySI = NULL, ...
> > > \Sexpr[echo=TRUE,results=rd,stage=install]{
> > > 
> > >    hsdar:::.applyInHelp2(usage = TRUE)
> > > 
> > > }
> > > )
> > > }
> > > 
> > > 
> > > *Function .applyInHelp2*
> > > .applyInHelp2 <- function(usage)
> > > {
> > > 
> > >    if (usage)
> > >    {
> > >    
> > >      if ("simplify" %in% names(formals(base::apply)))
> > >      {
> > >      
> > >        return(", simplify = TRUE)")
> > >      
> > >      }
> > >    
> > >    } else {
> > >    
> > >      if ("simplify" %in% names(formals(base::apply)))
> > >      {
> > >      
> > >        return("}\n\\item{simplify}{Currently ignored")
> > >      
> > >      } else {
> > >      
> > >        return("")
> > >      
> > >      }
> > >    
> > >    }
> > > 
> > > }
> > > 
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From wdun|@p @end|ng |rom t|bco@com  Fri May 22 18:50:33 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Fri, 22 May 2020 09:50:33 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
Message-ID: <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>

I agree with Herve, processing collapse happens last so collapse=non-NULL
always leads to a single character string being returned, the same as
paste(collapse="").  See the altPaste function I posted yesterday.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Fri, May 22, 2020 at 9:12 AM Herv? Pag?s <hpages at fredhutch.org> wrote:

> I think that
>
>     paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ", collapse = ",",
> recycle0=TRUE)
>
> should just return an empty string and don't see why it needs to emit a
> warning or raise an error. To me it does exactly what the user is asking
> for, which is to change how the 3 arguments are recycled **before** the
> 'sep' operation.
>
> The 'recycle0' argument has no business in the 'collapse' operation
> (which comes after the 'sep' operation): this operation still behaves
> like it always had.
>
> That's all there is to it.
>
> H.
>
>
> On 5/22/20 03:00, Gabriel Becker wrote:
> > Hi Martin et al,
> >
> >
> >
> > On Thu, May 21, 2020 at 9:42 AM Martin Maechler
> > <maechler at stat.math.ethz.ch <mailto:maechler at stat.math.ethz.ch>> wrote:
> >
> >      >>>>> Herv? Pag?s
> >      >>>>>     on Fri, 15 May 2020 13:44:28 -0700 writes:
> >
> >          > There is still the situation where **both** 'sep' and
> >     'collapse' are
> >          > specified:
> >
> >          >> paste(integer(0), "nth", sep="", collapse=",")
> >          > [1] "nth"
> >
> >          > In that case 'recycle0' should **not** be ignored i.e.
> >
> >          > paste(integer(0), "nth", sep="", collapse=",", recycle0=TRUE)
> >
> >          > should return the empty string (and not character(0) like it
> >     does at the
> >          > moment).
> >
> >          > In other words, 'recycle0' should only control the first
> >     operation (the
> >          > operation controlled by 'sep'). Which makes plenty of sense:
> >     the 1st
> >          > operation is binary (or n-ary) while the collapse operation
> >     is unary.
> >          > There is no concept of recycling in the context of unary
> >     operations.
> >
> >     Interesting, ..., and sounding somewhat convincing.
> >
> >          > On 5/15/20 11:25, Gabriel Becker wrote:
> >          >> Hi all,
> >          >>
> >          >> This makes sense to me, but I would think that recycle0 and
> >     collapse
> >          >> should actually be incompatible and paste should throw an
> >     error if
> >          >> recycle0 were TRUE and collapse were declared in the same
> >     call. I don't
> >          >> think the value of recycle0 should be silently ignored if it
> >     is actively
> >          >> specified.
> >          >>
> >          >> ~G
> >
> >     Just to summarize what I think we should know and agree (or be
> >     be "disproven") and where this comes from ...
> >
> >     1) recycle0 is a new R 4.0.0 option in paste() / paste0() which by
> >     default
> >         (recycle0 = FALSE) should (and *does* AFAIK) not change anything,
> >         hence  paste() / paste0() behave completely back-compatible
> >         if recycle0 is kept to FALSE.
> >
> >     2) recycle0 = TRUE is meant to give different behavior, notably
> >         0-length arguments (among '...') should result in 0-length
> results.
> >
> >         The above does not specify what this means in detail, see 3)
> >
> >     3) The current R 4.0.0 implementation (for which I'm primarily
> >     responsible)
> >         and help(paste)  are in accordance.
> >         Notably the help page (Arguments -> 'recycle0' ; Details 1st
> >     para ; Examples)
> >         says and shows how the 4.0.0 implementation has been meant to
> work.
> >
> >     4) Several provenly smart members of the R community argue that
> >         both the implementation and the documentation of 'recycle0 =
> >         TRUE'  should be changed to be more logical / coherent /
> sensical ..
> >
> >     Is the above all correct in your view?
> >
> >     Assuming yes,  I read basically two proposals, both agreeing
> >     that  recycle0 = TRUE  should only ever apply to the action of 'sep'
> >     but not the action of 'collapse'.
> >
> >     1) Bill and Herv? (I think) propose that 'recycle0' should have
> >         no effect whenever  'collapse = <string>'
> >
> >     2) Gabe proposes that 'collapse = <string>' and 'recycle0 = TRUE'
> >         should be declared incompatible and error. If going in that
> >         direction, I could also see them to give a warning (and
> >         continue as if recycle = FALSE).
> >
> >
> > Herve makes a good point about when sep and collapse are both set. That
> > said, if the user explicitly sets recycle0, Personally, I don't think it
> > should be silently ignored under any configuration of other arguments.
> >
> > If all of the arguments are to go into effect, the question then becomes
> > one of ordering, I think.
> >
> > Consider
> >
> >     paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ", collapse = ",",
> >     recycle0=TRUE)
> >
> > Currently that returns character(0), becuase the logic is
> > essenttially (in pseudo-code)
> >
> >     collapse(paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ",
> >     recycle0=TRUE), collapse = ", ", recycle0=TRUE)
> >
> >       -> collapse(character(0), collapse = ", " recycle0=TRUE)
> >
> >     -> character(0)
> >
> > Now Bill Dunlap argued, fairly convincingly I think, that paste(...,
> > collapse=<string>) should /always/ return a character vector of length
> > exactly one. With recycle0, though,  it will return "" via the
> progression
> >
> >     paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ", collapse = ",",
> >     recycle0=TRUE)
> >
> >       -> collapse(character(0), collapse = ", ")
> >
> >     -> ""
> >
> >
> > because recycle0 is still applied to the sep-based operation which
> > occurs before collapse, thus leaving a vector of length 0 to collapse.
> >
> > That is consistent but seems unlikely to be what the user wanted, imho.
> > I think if it does this there should be at least a warning when paste
> > collapses to "" this way, if it is allowed at all (ie if mixing
> > collapse=<string>and recycle0=TRUEis not simply made an error).
> >
> > I would like to hear others' thoughts as well though. @Pages, Herve
> > <mailto:hpages at fredhutch.org> @William Dunlap
> > <mailto:wdunlap at tibco.com> is "" what you envision as thee desired and
> > useful behavior there?
> >
> > Best,
> > ~G
> >
> >
> >
> >     I have not yet my mind up but would tend to agree to "you guys",
> >     but I think that other R Core members should chime in, too.
> >
> >     Martin
> >
> >          >> On Fri, May 15, 2020 at 11:05 AM Herv? Pag?s
> >     <hpages at fredhutch.org <mailto:hpages at fredhutch.org>
> >          >> <mailto:hpages at fredhutch.org <mailto:hpages at fredhutch.org>>>
> >     wrote:
> >          >>
> >          >> Totally agree with that.
> >          >>
> >          >> H.
> >          >>
> >          >> On 5/15/20 10:34, William Dunlap via R-devel wrote:
> >          >> > I agree: paste(collapse="something", ...) should always
> >     return a
> >          >> single
> >          >> > character string, regardless of the value of recycle0.
> >     This would be
> >          >> > similar to when there are no non-NULL arguments to paste;
> >          >> collapse="."
> >          >> > gives a single empty string and collapse=NULL gives a zero
> >     long
> >          >> character
> >          >> > vector.
> >          >> >> paste()
> >          >> > character(0)
> >          >> >> paste(collapse=", ")
> >          >> > [1] ""
> >          >> >
> >          >> > Bill Dunlap
> >          >> > TIBCO Software
> >          >> > wdunlap tibco.com
> >     <
> https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=o9ozvxBK-kVvAUFro7U1RrI5w0U8EPb0uyjQwMvOpt8&e=
> >
> >          >>
> >     <
> https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=rXIwWqf4U4HZS_bjUT3KfA9ARaV5YTb_kEcXWHnkt-c&e=
> >
> >          >> >
> >          >> >
> >          >> > On Thu, Apr 30, 2020 at 9:56 PM suharto_anggono--- via
> >     R-devel <
> >          >> > r-devel at r-project.org <mailto:r-devel at r-project.org>
> >     <mailto:r-devel at r-project.org <mailto:r-devel at r-project.org>>>
> wrote:
> >          >> >
> >          >> >> Without 'collapse', 'paste' pastes (concatenates) its
> >     arguments
> >          >> >> elementwise (separated by 'sep', " " by default). New in
> >     R devel
> >          >> and R
> >          >> >> patched, specifying recycle0 = FALSE makes mixing
> >     zero-length and
> >          >> >> nonzero-length arguments results in length zero. The
> >     result of
> >          >> paste(n,
> >          >> >> "th", sep = "", recycle0 = FALSE) always have the same
> >     length as
> >          >> 'n'.
> >          >> >> Previously, the result is still as long as the longest
> >     argument,
> >          >> with the
> >          >> >> zero-length argument like "". If all og the arguments have
> >          >> length zero,
> >          >> >> 'recycle0' doesn't matter.
> >          >> >>
> >          >> >> As far as I understand, 'paste' with 'collapse' as a
> >     character
> >          >> string is
> >          >> >> supposed to put together elements of a vector into a
> single
> >          >> character
> >          >> >> string. I think 'recycle0' shouldn't change it.
> >          >> >>
> >          >> >> In current R devel and R patched, paste(character(0),
> >     collapse = "",
> >          >> >> recycle0 = FALSE) is character(0). I think it should be
> >     "", like
> >          >> >> paste(character(0), collapse="").
> >          >> >>
> >          >> >> paste(c("4", "5"), "th", sep = "", collapse = ", ",
> >     recycle0 =
> >          >> FALSE)
> >          >> >> is
> >          >> >> "4th, 5th".
> >          >> >> paste(c("4"     ), "th", sep = "", collapse = ", ",
> >     recycle0 =
> >          >> FALSE)
> >          >> >> is
> >          >> >> "4th".
> >          >> >> I think
> >          >> >> paste(c(        ), "th", sep = "", collapse = ", ",
> >     recycle0 =
> >          >> FALSE)
> >          >> >> should be
> >          >> >> "",
> >          >> >> not character(0).
> >          >> >>
> >          >> >> ______________________________________________
> >          >> >> R-devel at r-project.org <mailto:R-devel at r-project.org>
> >     <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
> >     mailing list
> >          >> >>
> >          >>
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
> >          >> >>
> >          >> >
> >          >> >       [[alternative HTML version deleted]]
> >          >> >
> >          >> > ______________________________________________
> >          >> > R-devel at r-project.org <mailto:R-devel at r-project.org>
> >     <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
> >     mailing list
> >          >> >
> >          >>
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
> >          >> >
> >          >>
> >          >> --
> >          >> Herv? Pag?s
> >          >>
> >          >> Program in Computational Biology
> >          >> Division of Public Health Sciences
> >          >> Fred Hutchinson Cancer Research Center
> >          >> 1100 Fairview Ave. N, M1-B514
> >          >> P.O. Box 19024
> >          >> Seattle, WA 98109-1024
> >          >>
> >          >> E-mail: hpages at fredhutch.org <mailto:hpages at fredhutch.org>
> >     <mailto:hpages at fredhutch.org <mailto:hpages at fredhutch.org>>
> >          >> Phone:  (206) 667-5791
> >          >> Fax:    (206) 667-1319
> >          >>
> >          >> ______________________________________________
> >          >> R-devel at r-project.org <mailto:R-devel at r-project.org>
> >     <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
> >     mailing list
> >          >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >     <
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=OLA7CqaU5uKeid1aGw41XJ_2Uq7JXbcwpPOrTWWG2v4&e=
> >
> >          >>
> >     <
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=COnDeGgHNnHJlLLZOznMlhcaFU1nIRlkaSbssvlrMvw&e=
> >
> >          >>
> >
> >          > --
> >          > Herv? Pag?s
> >
> >          > Program in Computational Biology
> >          > Division of Public Health Sciences
> >          > Fred Hutchinson Cancer Research Center
> >          > 1100 Fairview Ave. N, M1-B514
> >          > P.O. Box 19024
> >          > Seattle, WA 98109-1024
> >
> >          > E-mail: hpages at fredhutch.org <mailto:hpages at fredhutch.org>
> >          > Phone:  (206) 667-5791
> >          > Fax:    (206) 667-1319
> >
> >          > ______________________________________________
> >          > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing
> list
> >          > https://stat.ethz.ch/mailman/listinfo/r-devel
> >     <
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=OLA7CqaU5uKeid1aGw41XJ_2Uq7JXbcwpPOrTWWG2v4&e=
> >
> >
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Fri May 22 20:26:43 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Fri, 22 May 2020 11:26:43 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
Message-ID: <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>

I understand that this is consistent but it also strikes me as an enormous
'gotcha' of a magnitude that 'we' are trying to avoid/smooth over at this
point in user-facing R space.

For the record I'm not suggesting it should return something other than "",
and in particular I'm not arguing that any call to paste *that does not
return an error* with non-NULL collapse should return a character vector of
length one.

Rather I'm pointing out that it could (perhaps should, imo) simply be an
error, which is also consistent, in the strict sense, with
previous behavior in that it is the developer simply declining to extend
the recycle0 argument to the full parameter space (there is no rule that
says we must do so, arguments whose use is incompatible with other
arguments can be reasonable and called for).

I don't feel feel super strongly that reeturning "" in this and similar
cases horrible and should never happen, but i'd bet dollars to donuts that
to the extent that behavior occurs it will be a disproportionately major
source of bugs, and i think thats at least worth considering in addition to
pure consistency.

~G

On Fri, May 22, 2020 at 9:50 AM William Dunlap <wdunlap at tibco.com> wrote:

> I agree with Herve, processing collapse happens last so collapse=non-NULL
> always leads to a single character string being returned, the same as
> paste(collapse="").  See the altPaste function I posted yesterday.
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>
> On Fri, May 22, 2020 at 9:12 AM Herv? Pag?s <hpages at fredhutch.org> wrote:
>
>> I think that
>>
>>     paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ", collapse = ",",
>> recycle0=TRUE)
>>
>> should just return an empty string and don't see why it needs to emit a
>> warning or raise an error. To me it does exactly what the user is asking
>> for, which is to change how the 3 arguments are recycled **before** the
>> 'sep' operation.
>>
>> The 'recycle0' argument has no business in the 'collapse' operation
>> (which comes after the 'sep' operation): this operation still behaves
>> like it always had.
>>
>> That's all there is to it.
>>
>> H.
>>
>>
>> On 5/22/20 03:00, Gabriel Becker wrote:
>> > Hi Martin et al,
>> >
>> >
>> >
>> > On Thu, May 21, 2020 at 9:42 AM Martin Maechler
>> > <maechler at stat.math.ethz.ch <mailto:maechler at stat.math.ethz.ch>> wrote:
>> >
>> >      >>>>> Herv? Pag?s
>> >      >>>>>     on Fri, 15 May 2020 13:44:28 -0700 writes:
>> >
>> >          > There is still the situation where **both** 'sep' and
>> >     'collapse' are
>> >          > specified:
>> >
>> >          >> paste(integer(0), "nth", sep="", collapse=",")
>> >          > [1] "nth"
>> >
>> >          > In that case 'recycle0' should **not** be ignored i.e.
>> >
>> >          > paste(integer(0), "nth", sep="", collapse=",", recycle0=TRUE)
>> >
>> >          > should return the empty string (and not character(0) like it
>> >     does at the
>> >          > moment).
>> >
>> >          > In other words, 'recycle0' should only control the first
>> >     operation (the
>> >          > operation controlled by 'sep'). Which makes plenty of sense:
>> >     the 1st
>> >          > operation is binary (or n-ary) while the collapse operation
>> >     is unary.
>> >          > There is no concept of recycling in the context of unary
>> >     operations.
>> >
>> >     Interesting, ..., and sounding somewhat convincing.
>> >
>> >          > On 5/15/20 11:25, Gabriel Becker wrote:
>> >          >> Hi all,
>> >          >>
>> >          >> This makes sense to me, but I would think that recycle0 and
>> >     collapse
>> >          >> should actually be incompatible and paste should throw an
>> >     error if
>> >          >> recycle0 were TRUE and collapse were declared in the same
>> >     call. I don't
>> >          >> think the value of recycle0 should be silently ignored if it
>> >     is actively
>> >          >> specified.
>> >          >>
>> >          >> ~G
>> >
>> >     Just to summarize what I think we should know and agree (or be
>> >     be "disproven") and where this comes from ...
>> >
>> >     1) recycle0 is a new R 4.0.0 option in paste() / paste0() which by
>> >     default
>> >         (recycle0 = FALSE) should (and *does* AFAIK) not change
>> anything,
>> >         hence  paste() / paste0() behave completely back-compatible
>> >         if recycle0 is kept to FALSE.
>> >
>> >     2) recycle0 = TRUE is meant to give different behavior, notably
>> >         0-length arguments (among '...') should result in 0-length
>> results.
>> >
>> >         The above does not specify what this means in detail, see 3)
>> >
>> >     3) The current R 4.0.0 implementation (for which I'm primarily
>> >     responsible)
>> >         and help(paste)  are in accordance.
>> >         Notably the help page (Arguments -> 'recycle0' ; Details 1st
>> >     para ; Examples)
>> >         says and shows how the 4.0.0 implementation has been meant to
>> work.
>> >
>> >     4) Several provenly smart members of the R community argue that
>> >         both the implementation and the documentation of 'recycle0 =
>> >         TRUE'  should be changed to be more logical / coherent /
>> sensical ..
>> >
>> >     Is the above all correct in your view?
>> >
>> >     Assuming yes,  I read basically two proposals, both agreeing
>> >     that  recycle0 = TRUE  should only ever apply to the action of 'sep'
>> >     but not the action of 'collapse'.
>> >
>> >     1) Bill and Herv? (I think) propose that 'recycle0' should have
>> >         no effect whenever  'collapse = <string>'
>> >
>> >     2) Gabe proposes that 'collapse = <string>' and 'recycle0 = TRUE'
>> >         should be declared incompatible and error. If going in that
>> >         direction, I could also see them to give a warning (and
>> >         continue as if recycle = FALSE).
>> >
>> >
>> > Herve makes a good point about when sep and collapse are both set. That
>> > said, if the user explicitly sets recycle0, Personally, I don't think
>> it
>> > should be silently ignored under any configuration of other arguments.
>> >
>> > If all of the arguments are to go into effect, the question then
>> becomes
>> > one of ordering, I think.
>> >
>> > Consider
>> >
>> >     paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ", collapse = ",",
>> >     recycle0=TRUE)
>> >
>> > Currently that returns character(0), becuase the logic is
>> > essenttially (in pseudo-code)
>> >
>> >     collapse(paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ",
>> >     recycle0=TRUE), collapse = ", ", recycle0=TRUE)
>> >
>> >       -> collapse(character(0), collapse = ", " recycle0=TRUE)
>> >
>> >     -> character(0)
>> >
>> > Now Bill Dunlap argued, fairly convincingly I think, that paste(...,
>> > collapse=<string>) should /always/ return a character vector of length
>> > exactly one. With recycle0, though,  it will return "" via the
>> progression
>> >
>> >     paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ", collapse = ",",
>> >     recycle0=TRUE)
>> >
>> >       -> collapse(character(0), collapse = ", ")
>> >
>> >     -> ""
>> >
>> >
>> > because recycle0 is still applied to the sep-based operation which
>> > occurs before collapse, thus leaving a vector of length 0 to collapse.
>> >
>> > That is consistent but seems unlikely to be what the user wanted, imho.
>> > I think if it does this there should be at least a warning when paste
>> > collapses to "" this way, if it is allowed at all (ie if mixing
>> > collapse=<string>and recycle0=TRUEis not simply made an error).
>> >
>> > I would like to hear others' thoughts as well though. @Pages, Herve
>> > <mailto:hpages at fredhutch.org> @William Dunlap
>> > <mailto:wdunlap at tibco.com> is "" what you envision as thee desired and
>> > useful behavior there?
>> >
>> > Best,
>> > ~G
>> >
>> >
>> >
>> >     I have not yet my mind up but would tend to agree to "you guys",
>> >     but I think that other R Core members should chime in, too.
>> >
>> >     Martin
>> >
>> >          >> On Fri, May 15, 2020 at 11:05 AM Herv? Pag?s
>> >     <hpages at fredhutch.org <mailto:hpages at fredhutch.org>
>> >          >> <mailto:hpages at fredhutch.org <mailto:hpages at fredhutch.org
>> >>>
>> >     wrote:
>> >          >>
>> >          >> Totally agree with that.
>> >          >>
>> >          >> H.
>> >          >>
>> >          >> On 5/15/20 10:34, William Dunlap via R-devel wrote:
>> >          >> > I agree: paste(collapse="something", ...) should always
>> >     return a
>> >          >> single
>> >          >> > character string, regardless of the value of recycle0.
>> >     This would be
>> >          >> > similar to when there are no non-NULL arguments to paste;
>> >          >> collapse="."
>> >          >> > gives a single empty string and collapse=NULL gives a zero
>> >     long
>> >          >> character
>> >          >> > vector.
>> >          >> >> paste()
>> >          >> > character(0)
>> >          >> >> paste(collapse=", ")
>> >          >> > [1] ""
>> >          >> >
>> >          >> > Bill Dunlap
>> >          >> > TIBCO Software
>> >          >> > wdunlap tibco.com
>> >     <
>> https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=o9ozvxBK-kVvAUFro7U1RrI5w0U8EPb0uyjQwMvOpt8&e=
>> >
>> >          >>
>> >     <
>> https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=rXIwWqf4U4HZS_bjUT3KfA9ARaV5YTb_kEcXWHnkt-c&e=
>> >
>> >          >> >
>> >          >> >
>> >          >> > On Thu, Apr 30, 2020 at 9:56 PM suharto_anggono--- via
>> >     R-devel <
>> >          >> > r-devel at r-project.org <mailto:r-devel at r-project.org>
>> >     <mailto:r-devel at r-project.org <mailto:r-devel at r-project.org>>>
>> wrote:
>> >          >> >
>> >          >> >> Without 'collapse', 'paste' pastes (concatenates) its
>> >     arguments
>> >          >> >> elementwise (separated by 'sep', " " by default). New in
>> >     R devel
>> >          >> and R
>> >          >> >> patched, specifying recycle0 = FALSE makes mixing
>> >     zero-length and
>> >          >> >> nonzero-length arguments results in length zero. The
>> >     result of
>> >          >> paste(n,
>> >          >> >> "th", sep = "", recycle0 = FALSE) always have the same
>> >     length as
>> >          >> 'n'.
>> >          >> >> Previously, the result is still as long as the longest
>> >     argument,
>> >          >> with the
>> >          >> >> zero-length argument like "". If all og the arguments
>> have
>> >          >> length zero,
>> >          >> >> 'recycle0' doesn't matter.
>> >          >> >>
>> >          >> >> As far as I understand, 'paste' with 'collapse' as a
>> >     character
>> >          >> string is
>> >          >> >> supposed to put together elements of a vector into a
>> single
>> >          >> character
>> >          >> >> string. I think 'recycle0' shouldn't change it.
>> >          >> >>
>> >          >> >> In current R devel and R patched, paste(character(0),
>> >     collapse = "",
>> >          >> >> recycle0 = FALSE) is character(0). I think it should be
>> >     "", like
>> >          >> >> paste(character(0), collapse="").
>> >          >> >>
>> >          >> >> paste(c("4", "5"), "th", sep = "", collapse = ", ",
>> >     recycle0 =
>> >          >> FALSE)
>> >          >> >> is
>> >          >> >> "4th, 5th".
>> >          >> >> paste(c("4"     ), "th", sep = "", collapse = ", ",
>> >     recycle0 =
>> >          >> FALSE)
>> >          >> >> is
>> >          >> >> "4th".
>> >          >> >> I think
>> >          >> >> paste(c(        ), "th", sep = "", collapse = ", ",
>> >     recycle0 =
>> >          >> FALSE)
>> >          >> >> should be
>> >          >> >> "",
>> >          >> >> not character(0).
>> >          >> >>
>> >          >> >> ______________________________________________
>> >          >> >> R-devel at r-project.org <mailto:R-devel at r-project.org>
>> >     <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
>> >     mailing list
>> >          >> >>
>> >          >>
>> >
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>> >          >> >>
>> >          >> >
>> >          >> >       [[alternative HTML version deleted]]
>> >          >> >
>> >          >> > ______________________________________________
>> >          >> > R-devel at r-project.org <mailto:R-devel at r-project.org>
>> >     <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
>> >     mailing list
>> >          >> >
>> >          >>
>> >
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>> >          >> >
>> >          >>
>> >          >> --
>> >          >> Herv? Pag?s
>> >          >>
>> >          >> Program in Computational Biology
>> >          >> Division of Public Health Sciences
>> >          >> Fred Hutchinson Cancer Research Center
>> >          >> 1100 Fairview Ave. N, M1-B514
>> >          >> P.O. Box 19024
>> >          >> Seattle, WA 98109-1024
>> >          >>
>> >          >> E-mail: hpages at fredhutch.org <mailto:hpages at fredhutch.org>
>> >     <mailto:hpages at fredhutch.org <mailto:hpages at fredhutch.org>>
>> >          >> Phone:  (206) 667-5791
>> >          >> Fax:    (206) 667-1319
>> >          >>
>> >          >> ______________________________________________
>> >          >> R-devel at r-project.org <mailto:R-devel at r-project.org>
>> >     <mailto:R-devel at r-project.org <mailto:R-devel at r-project.org>>
>> >     mailing list
>> >          >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> >     <
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=OLA7CqaU5uKeid1aGw41XJ_2Uq7JXbcwpPOrTWWG2v4&e=
>> >
>> >          >>
>> >     <
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=COnDeGgHNnHJlLLZOznMlhcaFU1nIRlkaSbssvlrMvw&e=
>> >
>> >          >>
>> >
>> >          > --
>> >          > Herv? Pag?s
>> >
>> >          > Program in Computational Biology
>> >          > Division of Public Health Sciences
>> >          > Fred Hutchinson Cancer Research Center
>> >          > 1100 Fairview Ave. N, M1-B514
>> >          > P.O. Box 19024
>> >          > Seattle, WA 98109-1024
>> >
>> >          > E-mail: hpages at fredhutch.org <mailto:hpages at fredhutch.org>
>> >          > Phone:  (206) 667-5791
>> >          > Fax:    (206) 667-1319
>> >
>> >          > ______________________________________________
>> >          > R-devel at r-project.org <mailto:R-devel at r-project.org>
>> mailing list
>> >          > https://stat.ethz.ch/mailman/listinfo/r-devel
>> >     <
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=OLA7CqaU5uKeid1aGw41XJ_2Uq7JXbcwpPOrTWWG2v4&e=
>> >
>> >
>>
>> --
>> Herv? Pag?s
>>
>> Program in Computational Biology
>> Division of Public Health Sciences
>> Fred Hutchinson Cancer Research Center
>> 1100 Fairview Ave. N, M1-B514
>> P.O. Box 19024
>> Seattle, WA 98109-1024
>>
>> E-mail: hpages at fredhutch.org
>> Phone:  (206) 667-5791
>> Fax:    (206) 667-1319
>>
>

	[[alternative HTML version deleted]]


From wdun|@p @end|ng |rom t|bco@com  Fri May 22 20:53:12 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Fri, 22 May 2020 11:53:12 -0700
Subject: [Rd] R-devel's ...names() questions
Message-ID: <CAF8bMcZL7ZTzDyWm=QtDG0dyitJ7SE2+g_-NxeZy3Oi9esDyWg@mail.gmail.com>

Am am missing something or does the new ...names() in R-devel not work
right?

> a <- function(x, ...) ...names()
> a(a=stop("a"), b=stop("b"))
[1] "a" ""
> a(stop("x"), stop("unnamed"), c=stop("c"), d=stop("d"))
[1] NA "" ""

> version
               _
platform       x86_64-pc-linux-gnu
arch           x86_64
os             linux-gnu
system         x86_64, linux-gnu
status         Under development (unstable)
major          4
minor          1.0
year           2020
month          05
day            19
svn rev        78492
language       R
version.string R Under development (unstable) (2020-05-19 r78492)
nickname       Unsuffered Consequences

The following seems to do the right thing
alt...names <- function() evalq(names(substitute(...())),
envir=parent.frame())

However I wonder if it would be better to give the user a function, say
...args_unevaluated(...) to get the unevaluated ... arguments directlly
without having to know about the substitute(...()) trick.   Then the user
could get the length, the n'th, or the names using the usual length(), [[,
and names() functions instead of ...length(), ...elt(), and ...names().

Bill Dunlap
TIBCO Software
wdunlap tibco.com

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Sat May 23 00:16:09 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Fri, 22 May 2020 15:16:09 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
Message-ID: <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>

Gabe,

It's the current behavior of paste() that is a major source of bugs:

   ## Add "rs" prefix to SNP ids and collapse them in a
   ## comma-separated string.
   collapse_snp_ids <- function(snp_ids)
       paste("rs", snp_ids, sep="", collapse=",")

   snp_groups <- list(
     group1=c(55, 22, 200),
     group2=integer(0),
     group3=c(99, 550)
   )

   vapply(snp_groups, collapse_snp_ids, character(1))
   #            group1            group2            group3
   # "rs55,rs22,rs200"              "rs"      "rs99,rs550"

This has hit me so many times!

Now with 'collapse0=TRUE', we finally have the opportunity to make it do 
the right thing. Let's not miss that opportunity.

Cheers,
H.


On 5/22/20 11:26, Gabriel Becker wrote:
> I understand that this is consistent but it also strikes me as an 
> enormous 'gotcha' of a magnitude that 'we' are trying to avoid/smooth 
> over at this point in user-facing R space.
> 
> For the record I'm not suggesting it should return something other than 
> "", and in particular I'm not arguing that any call to paste /that does 
> not return an error/?with non-NULL collapse should return a character 
> vector of length one.
> 
> Rather I'm pointing out that it could (perhaps should, imo) simply be an 
> error, which is also consistent, in the strict sense, with 
> previous?behavior in that it is the developer simply?declining to extend 
> the recycle0 argument to the full parameter?space (there is no rule?that 
> says we must do so, arguments whose use is incompatible with other 
> arguments can be reasonable and called for).
> 
> I don't feel feel?super strongly that reeturning?"" in this and similar 
> cases horrible?and should never happen, but i'd bet dollars to donuts 
> that to the extent that behavior occurs it will be a disproportionately 
> major source of bugs, and i think thats?at least worth considering in 
> addition to pure consistency.
> 
> ~G
> 
> On Fri, May 22, 2020 at 9:50 AM William Dunlap <wdunlap at tibco.com 
> <mailto:wdunlap at tibco.com>> wrote:
> 
>     I agree?with Herve, processing collapse happens last so
>     collapse=non-NULL always leads to a single character string being
>     returned, the same as paste(collapse="").? See the altPaste function
>     I posted yesterday.
> 
>     Bill Dunlap
>     TIBCO Software
>     wdunlap tibco.com
>     <https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=Z1o-HO3_OqxOR9LaRguGvnG7X4vF_z1_q13I7zmjcfY&s=7ZT1IjmexPqsDBhrV3NspPTr8M8XiMweEwJWErgAlqw&e=>
> 
> 
>     On Fri, May 22, 2020 at 9:12 AM Herv? Pag?s <hpages at fredhutch.org
>     <mailto:hpages at fredhutch.org>> wrote:
> 
>         I think that
> 
>          ? ? paste(c("a", "b"), NULL, c("c",? "d"),? sep = " ", collapse
>         = ",",
>         recycle0=TRUE)
> 
>         should just return an empty string and don't see why it needs to
>         emit a
>         warning or raise an error. To me it does exactly what the user
>         is asking
>         for, which is to change how the 3 arguments are recycled
>         **before** the
>         'sep' operation.
> 
>         The 'recycle0' argument has no business in the 'collapse' operation
>         (which comes after the 'sep' operation): this operation still
>         behaves
>         like it always had.
> 
>         That's all there is to it.
> 
>         H.
> 
> 
>         On 5/22/20 03:00, Gabriel Becker wrote:
>          > Hi Martin et al,
>          >
>          >
>          >
>          > On Thu, May 21, 2020 at 9:42 AM Martin Maechler
>          > <maechler at stat.math.ethz.ch
>         <mailto:maechler at stat.math.ethz.ch>
>         <mailto:maechler at stat.math.ethz.ch
>         <mailto:maechler at stat.math.ethz.ch>>> wrote:
>          >
>          >? ? ? >>>>> Herv? Pag?s
>          >? ? ? >>>>>? ? ?on Fri, 15 May 2020 13:44:28 -0700 writes:
>          >
>          >? ? ? ? ? > There is still the situation where **both** 'sep' and
>          >? ? ?'collapse' are
>          >? ? ? ? ? > specified:
>          >
>          >? ? ? ? ? >> paste(integer(0), "nth", sep="", collapse=",")
>          >? ? ? ? ? > [1] "nth"
>          >
>          >? ? ? ? ? > In that case 'recycle0' should **not** be ignored i.e.
>          >
>          >? ? ? ? ? > paste(integer(0), "nth", sep="", collapse=",",
>         recycle0=TRUE)
>          >
>          >? ? ? ? ? > should return the empty string (and not
>         character(0) like it
>          >? ? ?does at the
>          >? ? ? ? ? > moment).
>          >
>          >? ? ? ? ? > In other words, 'recycle0' should only control the
>         first
>          >? ? ?operation (the
>          >? ? ? ? ? > operation controlled by 'sep'). Which makes plenty
>         of sense:
>          >? ? ?the 1st
>          >? ? ? ? ? > operation is binary (or n-ary) while the collapse
>         operation
>          >? ? ?is unary.
>          >? ? ? ? ? > There is no concept of recycling in the context of
>         unary
>          >? ? ?operations.
>          >
>          >? ? ?Interesting, ..., and sounding somewhat convincing.
>          >
>          >? ? ? ? ? > On 5/15/20 11:25, Gabriel Becker wrote:
>          >? ? ? ? ? >> Hi all,
>          >? ? ? ? ? >>
>          >? ? ? ? ? >> This makes sense to me, but I would think that
>         recycle0 and
>          >? ? ?collapse
>          >? ? ? ? ? >> should actually be incompatible and paste should
>         throw an
>          >? ? ?error if
>          >? ? ? ? ? >> recycle0 were TRUE and collapse were declared in
>         the same
>          >? ? ?call. I don't
>          >? ? ? ? ? >> think the value of recycle0 should be silently
>         ignored if it
>          >? ? ?is actively
>          >? ? ? ? ? >> specified.
>          >? ? ? ? ? >>
>          >? ? ? ? ? >> ~G
>          >
>          >? ? ?Just to summarize what I think we should know and agree
>         (or be
>          >? ? ?be "disproven") and where this comes from ...
>          >
>          >? ? ?1) recycle0 is a new R 4.0.0 option in paste() / paste0()
>         which by
>          >? ? ?default
>          >? ? ? ? ?(recycle0 = FALSE) should (and *does* AFAIK) not
>         change anything,
>          >? ? ? ? ?hence? paste() / paste0() behave completely
>         back-compatible
>          >? ? ? ? ?if recycle0 is kept to FALSE.
>          >
>          >? ? ?2) recycle0 = TRUE is meant to give different behavior,
>         notably
>          >? ? ? ? ?0-length arguments (among '...') should result in
>         0-length results.
>          >
>          >? ? ? ? ?The above does not specify what this means in detail,
>         see 3)
>          >
>          >? ? ?3) The current R 4.0.0 implementation (for which I'm
>         primarily
>          >? ? ?responsible)
>          >? ? ? ? ?and help(paste)? are in accordance.
>          >? ? ? ? ?Notably the help page (Arguments -> 'recycle0' ;
>         Details 1st
>          >? ? ?para ; Examples)
>          >? ? ? ? ?says and shows how the 4.0.0 implementation has been
>         meant to work.
>          >
>          >? ? ?4) Several provenly smart members of the R community
>         argue that
>          >? ? ? ? ?both the implementation and the documentation of
>         'recycle0 =
>          >? ? ? ? ?TRUE'? should be changed to be more logical /
>         coherent / sensical ..
>          >
>          >? ? ?Is the above all correct in your view?
>          >
>          >? ? ?Assuming yes,? I read basically two proposals, both agreeing
>          >? ? ?that? recycle0 = TRUE? should only ever apply to the
>         action of 'sep'
>          >? ? ?but not the action of 'collapse'.
>          >
>          >? ? ?1) Bill and Herv? (I think) propose that 'recycle0'
>         should have
>          >? ? ? ? ?no effect whenever? 'collapse = <string>'
>          >
>          >? ? ?2) Gabe proposes that 'collapse = <string>' and 'recycle0
>         = TRUE'
>          >? ? ? ? ?should be declared incompatible and error. If going
>         in that
>          >? ? ? ? ?direction, I could also see them to give a warning (and
>          >? ? ? ? ?continue as if recycle = FALSE).
>          >
>          >
>          > Herve makes a good point about when sep and collapse are both
>         set. That
>          > said, if the user explicitly sets recycle0, Personally, I
>         don't think it
>          > should be silently ignored under any configuration of other
>         arguments.
>          >
>          > If all of the arguments are to go into effect, the question
>         then becomes
>          > one of ordering, I think.
>          >
>          > Consider
>          >
>          >? ? ?paste(c("a", "b"), NULL, c("c",? "d"),? sep = " ",
>         collapse = ",",
>          >? ? ?recycle0=TRUE)
>          >
>          > Currently that returns character(0), becuase?the logic is
>          > essenttially?(in pseudo-code)
>          >
>          >? ? ?collapse(paste(c("a", "b"), NULL, c("c",? "d"),? sep = " ",
>          >? ? ?recycle0=TRUE), collapse = ", ", recycle0=TRUE)
>          >
>          >? ? ? ?-> collapse(character(0), collapse = ", "?recycle0=TRUE)
>          >
>          >? ? ?-> character(0)
>          >
>          > Now Bill Dunlap argued, fairly convincingly I think, that
>         paste(...,
>          > collapse=<string>) should /always/?return a character vector
>         of length
>          > exactly one. With recycle0, though,??it will return "" via
>         the progression
>          >
>          >? ? ?paste(c("a", "b"), NULL, c("c",? "d"),? sep = " ",
>         collapse = ",",
>          >? ? ?recycle0=TRUE)
>          >
>          >? ? ? ?-> collapse(character(0),?collapse = ", ")
>          >
>          >? ? ?-> ""
>          >
>          >
>          > because recycle0 is still applied to the sep-based operation
>         which
>          > occurs before collapse, thus leaving a vector of length?0 to
>         collapse.
>          >
>          > That is consistent but seems unlikely to be what the user
>         wanted, imho.
>          > I think if it does this there should be at least a warning
>         when paste
>          > collapses to "" this way, if it is allowed at all (ie if mixing
>          > collapse=<string>and recycle0=TRUEis not simply made an error).
>          >
>          > I would like to hear others' thoughts as well though. @Pages,
>         Herve
>          > <mailto:hpages at fredhutch.org <mailto:hpages at fredhutch.org>>
>         @William Dunlap
>          > <mailto:wdunlap at tibco.com <mailto:wdunlap at tibco.com>>?is ""
>         what you envision as thee desired and
>          > useful behavior there?
>          >
>          > Best,
>          > ~G
>          >
>          >
>          >
>          >? ? ?I have not yet my mind up but would tend to agree to "you
>         guys",
>          >? ? ?but I think that other R Core members should chime in, too.
>          >
>          >? ? ?Martin
>          >
>          >? ? ? ? ? >> On Fri, May 15, 2020 at 11:05 AM Herv? Pag?s
>          >? ? ?<hpages at fredhutch.org <mailto:hpages at fredhutch.org>
>         <mailto:hpages at fredhutch.org <mailto:hpages at fredhutch.org>>
>          >? ? ? ? ? >> <mailto:hpages at fredhutch.org
>         <mailto:hpages at fredhutch.org> <mailto:hpages at fredhutch.org
>         <mailto:hpages at fredhutch.org>>>>
>          >? ? ?wrote:
>          >? ? ? ? ? >>
>          >? ? ? ? ? >> Totally agree with that.
>          >? ? ? ? ? >>
>          >? ? ? ? ? >> H.
>          >? ? ? ? ? >>
>          >? ? ? ? ? >> On 5/15/20 10:34, William Dunlap via R-devel wrote:
>          >? ? ? ? ? >> > I agree: paste(collapse="something", ...)
>         should always
>          >? ? ?return a
>          >? ? ? ? ? >> single
>          >? ? ? ? ? >> > character string, regardless of the value of
>         recycle0.
>          >? ? ?This would be
>          >? ? ? ? ? >> > similar to when there are no non-NULL arguments
>         to paste;
>          >? ? ? ? ? >> collapse="."
>          >? ? ? ? ? >> > gives a single empty string and collapse=NULL
>         gives a zero
>          >? ? ?long
>          >? ? ? ? ? >> character
>          >? ? ? ? ? >> > vector.
>          >? ? ? ? ? >> >> paste()
>          >? ? ? ? ? >> > character(0)
>          >? ? ? ? ? >> >> paste(collapse=", ")
>          >? ? ? ? ? >> > [1] ""
>          >? ? ? ? ? >> >
>          >? ? ? ? ? >> > Bill Dunlap
>          >? ? ? ? ? >> > TIBCO Software
>          >? ? ? ? ? >> > wdunlap tibco.com
>         <https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=Z1o-HO3_OqxOR9LaRguGvnG7X4vF_z1_q13I7zmjcfY&s=7ZT1IjmexPqsDBhrV3NspPTr8M8XiMweEwJWErgAlqw&e=>
>          >   
>          ?<https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=o9ozvxBK-kVvAUFro7U1RrI5w0U8EPb0uyjQwMvOpt8&e=>
>          >? ? ? ? ? >>
>          >   
>          ?<https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=rXIwWqf4U4HZS_bjUT3KfA9ARaV5YTb_kEcXWHnkt-c&e=>
>          >? ? ? ? ? >> >
>          >? ? ? ? ? >> >
>          >? ? ? ? ? >> > On Thu, Apr 30, 2020 at 9:56 PM
>         suharto_anggono--- via
>          >? ? ?R-devel <
>          >? ? ? ? ? >> > r-devel at r-project.org
>         <mailto:r-devel at r-project.org> <mailto:r-devel at r-project.org
>         <mailto:r-devel at r-project.org>>
>          >? ? ?<mailto:r-devel at r-project.org
>         <mailto:r-devel at r-project.org> <mailto:r-devel at r-project.org
>         <mailto:r-devel at r-project.org>>>> wrote:
>          >? ? ? ? ? >> >
>          >? ? ? ? ? >> >> Without 'collapse', 'paste' pastes
>         (concatenates) its
>          >? ? ?arguments
>          >? ? ? ? ? >> >> elementwise (separated by 'sep', " " by
>         default). New in
>          >? ? ?R devel
>          >? ? ? ? ? >> and R
>          >? ? ? ? ? >> >> patched, specifying recycle0 = FALSE makes mixing
>          >? ? ?zero-length and
>          >? ? ? ? ? >> >> nonzero-length arguments results in length
>         zero. The
>          >? ? ?result of
>          >? ? ? ? ? >> paste(n,
>          >? ? ? ? ? >> >> "th", sep = "", recycle0 = FALSE) always have
>         the same
>          >? ? ?length as
>          >? ? ? ? ? >> 'n'.
>          >? ? ? ? ? >> >> Previously, the result is still as long as the
>         longest
>          >? ? ?argument,
>          >? ? ? ? ? >> with the
>          >? ? ? ? ? >> >> zero-length argument like "". If all og the
>         arguments have
>          >? ? ? ? ? >> length zero,
>          >? ? ? ? ? >> >> 'recycle0' doesn't matter.
>          >? ? ? ? ? >> >>
>          >? ? ? ? ? >> >> As far as I understand, 'paste' with
>         'collapse' as a
>          >? ? ?character
>          >? ? ? ? ? >> string is
>          >? ? ? ? ? >> >> supposed to put together elements of a vector
>         into a single
>          >? ? ? ? ? >> character
>          >? ? ? ? ? >> >> string. I think 'recycle0' shouldn't change it.
>          >? ? ? ? ? >> >>
>          >? ? ? ? ? >> >> In current R devel and R patched,
>         paste(character(0),
>          >? ? ?collapse = "",
>          >? ? ? ? ? >> >> recycle0 = FALSE) is character(0). I think it
>         should be
>          >? ? ?"", like
>          >? ? ? ? ? >> >> paste(character(0), collapse="").
>          >? ? ? ? ? >> >>
>          >? ? ? ? ? >> >> paste(c("4", "5"), "th", sep = "", collapse =
>         ", ",
>          >? ? ?recycle0 =
>          >? ? ? ? ? >> FALSE)
>          >? ? ? ? ? >> >> is
>          >? ? ? ? ? >> >> "4th, 5th".
>          >? ? ? ? ? >> >> paste(c("4"? ? ?), "th", sep = "", collapse =
>         ", ",
>          >? ? ?recycle0 =
>          >? ? ? ? ? >> FALSE)
>          >? ? ? ? ? >> >> is
>          >? ? ? ? ? >> >> "4th".
>          >? ? ? ? ? >> >> I think
>          >? ? ? ? ? >> >> paste(c(? ? ? ? ), "th", sep = "", collapse =
>         ", ",
>          >? ? ?recycle0 =
>          >? ? ? ? ? >> FALSE)
>          >? ? ? ? ? >> >> should be
>          >? ? ? ? ? >> >> "",
>          >? ? ? ? ? >> >> not character(0).
>          >? ? ? ? ? >> >>
>          >? ? ? ? ? >> >> ______________________________________________
>          >? ? ? ? ? >> >> R-devel at r-project.org
>         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
>         <mailto:R-devel at r-project.org>>
>          >? ? ?<mailto:R-devel at r-project.org
>         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
>         <mailto:R-devel at r-project.org>>>
>          >? ? ?mailing list
>          >? ? ? ? ? >> >>
>          >? ? ? ? ? >>
>          >
>         https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>          >? ? ? ? ? >> >>
>          >? ? ? ? ? >> >
>          >? ? ? ? ? >> >? ? ? ?[[alternative HTML version deleted]]
>          >? ? ? ? ? >> >
>          >? ? ? ? ? >> > ______________________________________________
>          >? ? ? ? ? >> > R-devel at r-project.org
>         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
>         <mailto:R-devel at r-project.org>>
>          >? ? ?<mailto:R-devel at r-project.org
>         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
>         <mailto:R-devel at r-project.org>>>
>          >? ? ?mailing list
>          >? ? ? ? ? >> >
>          >? ? ? ? ? >>
>          >
>         https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
>          >? ? ? ? ? >> >
>          >? ? ? ? ? >>
>          >? ? ? ? ? >> --
>          >? ? ? ? ? >> Herv? Pag?s
>          >? ? ? ? ? >>
>          >? ? ? ? ? >> Program in Computational Biology
>          >? ? ? ? ? >> Division of Public Health Sciences
>          >? ? ? ? ? >> Fred Hutchinson Cancer Research Center
>          >? ? ? ? ? >> 1100 Fairview Ave. N, M1-B514
>          >? ? ? ? ? >> P.O. Box 19024
>          >? ? ? ? ? >> Seattle, WA 98109-1024
>          >? ? ? ? ? >>
>          >? ? ? ? ? >> E-mail: hpages at fredhutch.org
>         <mailto:hpages at fredhutch.org> <mailto:hpages at fredhutch.org
>         <mailto:hpages at fredhutch.org>>
>          >? ? ?<mailto:hpages at fredhutch.org
>         <mailto:hpages at fredhutch.org> <mailto:hpages at fredhutch.org
>         <mailto:hpages at fredhutch.org>>>
>          >? ? ? ? ? >> Phone:? (206) 667-5791
>          >? ? ? ? ? >> Fax:? ? (206) 667-1319
>          >? ? ? ? ? >>
>          >? ? ? ? ? >> ______________________________________________
>          >? ? ? ? ? >> R-devel at r-project.org
>         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
>         <mailto:R-devel at r-project.org>>
>          >? ? ?<mailto:R-devel at r-project.org
>         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
>         <mailto:R-devel at r-project.org>>>
>          >? ? ?mailing list
>          >? ? ? ? ? >> https://stat.ethz.ch/mailman/listinfo/r-devel
>         <https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=Z1o-HO3_OqxOR9LaRguGvnG7X4vF_z1_q13I7zmjcfY&s=CDOaP2RJnAyhpbHe6-O752uc4IPMugypbcgdYzhoF_8&e=>
>          >   
>          ?<https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=OLA7CqaU5uKeid1aGw41XJ_2Uq7JXbcwpPOrTWWG2v4&e=>
>          >? ? ? ? ? >>
>          >   
>          ?<https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=COnDeGgHNnHJlLLZOznMlhcaFU1nIRlkaSbssvlrMvw&e=>
>          >? ? ? ? ? >>
>          >
>          >? ? ? ? ? > --
>          >? ? ? ? ? > Herv? Pag?s
>          >
>          >? ? ? ? ? > Program in Computational Biology
>          >? ? ? ? ? > Division of Public Health Sciences
>          >? ? ? ? ? > Fred Hutchinson Cancer Research Center
>          >? ? ? ? ? > 1100 Fairview Ave. N, M1-B514
>          >? ? ? ? ? > P.O. Box 19024
>          >? ? ? ? ? > Seattle, WA 98109-1024
>          >
>          >? ? ? ? ? > E-mail: hpages at fredhutch.org
>         <mailto:hpages at fredhutch.org> <mailto:hpages at fredhutch.org
>         <mailto:hpages at fredhutch.org>>
>          >? ? ? ? ? > Phone:? (206) 667-5791
>          >? ? ? ? ? > Fax:? ? (206) 667-1319
>          >
>          >? ? ? ? ? > ______________________________________________
>          >? ? ? ? ? > R-devel at r-project.org
>         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
>         <mailto:R-devel at r-project.org>> mailing list
>          >? ? ? ? ? > https://stat.ethz.ch/mailman/listinfo/r-devel
>         <https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=Z1o-HO3_OqxOR9LaRguGvnG7X4vF_z1_q13I7zmjcfY&s=CDOaP2RJnAyhpbHe6-O752uc4IPMugypbcgdYzhoF_8&e=>
>          >   
>          ?<https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=OLA7CqaU5uKeid1aGw41XJ_2Uq7JXbcwpPOrTWWG2v4&e=>
>          >
> 
>         -- 
>         Herv? Pag?s
> 
>         Program in Computational Biology
>         Division of Public Health Sciences
>         Fred Hutchinson Cancer Research Center
>         1100 Fairview Ave. N, M1-B514
>         P.O. Box 19024
>         Seattle, WA 98109-1024
> 
>         E-mail: hpages at fredhutch.org <mailto:hpages at fredhutch.org>
>         Phone:? (206) 667-5791
>         Fax:? ? (206) 667-1319
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From m@r|u@@ho|ert @end|ng |rom uw@ter|oo@c@  Sat May 23 01:07:39 2020
From: m@r|u@@ho|ert @end|ng |rom uw@ter|oo@c@ (Marius Hofert)
Date: Fri, 22 May 2020 19:07:39 -0400
Subject: [Rd] pbirthday() for larger number of classes
In-Reply-To: <CAM3-KjYD7uZnsytDR98dZPiRu_kwSo9ug29N_zS=+OUXDkdeNA@mail.gmail.com>
References: <CAM3-KjYD7uZnsytDR98dZPiRu_kwSo9ug29N_zS=+OUXDkdeNA@mail.gmail.com>
Message-ID: <CAM3-KjY_EQL2PMSN96+kSQSP0tJbetyr-WTTyhfCJ92ojLrkJw@mail.gmail.com>

... and one should include the pigeonhole principle:

pbirthday2 <- function(n, classes = 365) {
    c <- classes # as pbirthday()
    if(n >= 2) {
        if(n > classes) 1 else -expm1(sum(log1p(-(1:(n-1))/classes)))
    } else 0
}


From @h@nem @end|ng |rom mtu@edu  Sat May 23 01:59:26 2020
From: @h@nem @end|ng |rom mtu@edu (Shane Mueller)
Date: Fri, 22 May 2020 19:59:26 -0400
Subject: [Rd] round() and signif() do not check argument names when a single
 argument is given
Message-ID: <CAMEcc0tY+F7QgfshvOhcMUp=7=JFYxg7EAXnvKBOeYw97YoEeQ@mail.gmail.com>

Hi,

I was told to send this to the -devel list instead of posting to bugzilla.

When round our signif are called with a single named argument, R does not
check the name and runs the function with that named argument directly as
the first argument,  using 0.0 or 6.0 (6 in the case of signif) for the
second argument. Not checking the argument name is at odds with how all
other primitive functions are handled, and so I expect these to trigger an
error like other functions do.  I've tested in 4.0.0 code, but this
behavior might go back decades.

The cases are things like this:

#horse is not a legitimate argument
round(horse=3.1235)
[1] 3

#digits is a legitimate argument in round,
#but the value gets used without checking as the first argument.
round(digits=3.1135)
[1] 3

The second case is especially strange to me, because digits is a named
argument of the function.  No other functions behave this way as far as I
can tell; the first would normally either trigger a missing x value message
or an unused argument if it is a user function; the second would trigger a
warning about missing x.

Compare to:
>  log(base=3)
Error: argument "x" is missing, with no default

These two functions are handled in a  handler function in
src/main/arithmetic.c: do_Math2().  The strange cases get handled by the
code around line 1655 in src/main/arithmetic.c. The context is  n is the
number of arguments, but symbol names have not yet been checked:

if(n == 1) {
   double digits = 0.0;
   if(PRIMVAL(op) == 10004) digits = 6.0;
   SETCDR(args, CONS(ScalarReal(digits), R_NilValue));
}

Here, 10004 is the opcode symbol for signif and 10001 is for round, but
these are the only two ops handled by this function, so round uses
digits=0.0.  The SETCDR creates the argument list to be the current 1-item
list plus the new digits value set here, and then this gets passed to
do_math2.  do_math2 looks like it checks the arity of the arguments but not
the names, and calls fround or frpec on the arguments depending on the
opcode.

This case can be guarded against by adding a check for using the wrong
symbol name at this point, which only covers the case of calling these
functions with a single argument. This is essentially the same guard used
in other functions like do_log_bulitin  that is in the same file.

 if(n == 1 ){
static SEXP R_x_Symbol = NULL;
R_x_Symbol = install("x");
/*This handles single-argument calling*/
/*Make sure we don't call it with a mis-named argument:*/
if(CAR(args)==R_MissingArg ||
  TAG(args) != R_NilValue && TAG(args) != R_x_Symbol)
 error(_("argument \"%s\" is missing, with no default"), "x");

   double digits = 0.0;
   if(PRIMVAL(op) == 10004) digits = 6.0;
   SETCDR(args, CONS(ScalarReal(digits), R_NilValue));
}

I'm not sure if CAR(args)==R_MissingArg is doing anything here, and
removing it seems to work, but this pattern is used in do_log_bultin.

I've tested this against the cases copied below, and this change will now
cause the error I expect in cases 5 and 6  [like round(digits=5.532) and
round(horse=5.131)],  whereas current R 4.0.0 does not. This change
includes some _() text, but I'm not sure whether that means it will impact
internationalization since the strings are identical to other error
messages.

In the R code below, I put these in tryCatch so you can save the text and
do a source() of the file. Both R 4.0.0 and the changed code correctly
cause errors in case 7/8, to demonstrate that these cases are not impacted
by the change.

##This tests various round/signif argument configurations
## Each of these should succeed/fail  the same if used in signif

cat("\nCase 1: round(1.12345): " )
cat(round(1.12345),"\n")

cat("\nCase 2: round(x=1.12345,2): ")
cat(round(x=1.12345,2),"\n")

cat("\nCase 3: round(x=1.12345,digits=2): ")
cat(round(x=1.12345,digits=2),"\n")

cat("\nCase 4: round(digits=2,x=1.12345): ")
cat(round(digits=2,x=1.12345),"\n")

cat("\nCase 4b: round(digits=2,1.12345): ")
cat(round(digits=2,1.12345),"\n")

## Current R 4.0 does not produce error but should
cat("\nCase 5: round(digits=x): \n")
tryCatch(
cat("round(digits=99.23456): ",  round(digits=99.23456)),
error=function(cond){print(paste("[Error in case]",cond))})


## Current R 4.0 does not produce error but should
cat("\nCase 6: round(banana=x): \n")
tryCatch(
  cat("round(banana=99.23456): ", round(banana=99.23456))
,error=function(cond){print(paste("[Error in case]",cond))})

## Error case
##error:
cat("\nCase 7: round(x=1.12345, digits=2, banana=3): ")

tryCatch( { cat(round(x=1.12345, digits=2, banana=3),"\n")},
   error=function(cond){print(paste("[Error in case]",cond))})

##error case
cat("\nCase 8 : round(x=1.12345, banana=3):  ")
tryCatch( round(x=1.12345, banana=3),
   error=function(cond){print(paste("[Error in case]",cond))})

	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Sat May 23 03:12:49 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Sat, 23 May 2020 01:12:49 +0000 (UTC)
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
 <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
Message-ID: <713381417.133312.1590196369208@mail.yahoo.com>

> On Friday, May 22, 2020, 6:16:45 PM EDT, Herv? Pag?s <hpages at fredhutch.org> wrote:
>
> Gabe,
>
> It's the current behavior of paste() that is a major source of bugs:
>
>?? ## Add "rs" prefix to SNP ids and collapse them in a
>?? ## comma-separated string.
>?? collapse_snp_ids <- function(snp_ids)
>?????? paste("rs", snp_ids, sep="", collapse=",")
>
>?? snp_groups <- list(
>???? group1=c(55, 22, 200),
>???? group2=integer(0),
>???? group3=c(99, 550)
>?? )
>
>?? vapply(snp_groups, collapse_snp_ids, character(1))
>?? #??????????? group1??????????? group2??????????? group3
>?? # "rs55,rs22,rs200"????????????? "rs"????? "rs99,rs550"
>
> This has hit me so many times!
>
> Now with 'collapse0=TRUE', we finally have the opportunity to make it do
> the right thing. Let's not miss that opportunity.
>
> Cheers,
> H.

FWIW what convinces me is consistency with other aggregating functions applied
to zero length inputs:

sum(numeric(0))
## [1] 0

>
>
> On 5/22/20 11:26, Gabriel Becker wrote:
> > I understand that this is consistent but it also strikes me as an
> > enormous 'gotcha' of a magnitude that 'we' are trying to avoid/smooth
> > over at this point in user-facing R space.
> >
> > For the record I'm not suggesting it should return something other than
> > "", and in particular I'm not arguing that any call to paste /that does
> > not return an error/ with non-NULL collapse should return a character
> > vector of length one.


From @|mon@urb@nek @end|ng |rom R-project@org  Sat May 23 08:38:57 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 23 May 2020 18:38:57 +1200
Subject: [Rd] GCC warning
In-Reply-To: <F51B821D-D90B-4BB9-9ED7-2F1ABFCB5067@gmail.com>
References: <F51B821D-D90B-4BB9-9ED7-2F1ABFCB5067@gmail.com>
Message-ID: <22621C99-CB27-43C9-9419-CA19BE108E82@R-project.org>

Adrian,

newer compilers are better at finding bugs - you may want to read the full trace of the error, it tells you that you likely have a memory overflow when using strncpy() in your package. You should check whether it is right. Unfortunately we can?t help you more specifically, because I don't see any link to what you submitted so can?t look at the code involved.

Cheers,
Simon



> On May 22, 2020, at 7:25 PM, Adrian Du?a <dusa.adrian at gmail.com> wrote:
> 
> I am trying to submit a package on CRAN, and everything passes ok on all platforms but Debian, where CRAN responds with an automatic "significant" warning:
> 
> * checking whether package ?QCA? can be installed ... [35s/35s] WARNING
> Found the following significant warnings:
>  /usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: warning: ?__builtin_strncpy? output may be truncated copying 12 bytes from a string of length 79 [-Wstringop-truncation]
> See ?/srv/hornik/tmp/CRAN/QCA.Rcheck/00install.out? for details.
> 
> 
> I know the cause of this: using a cursomized version of some external C library, coupled with <SystemRequirements: GNU make> in the Description.
> 
> But I do not know hot to get past this warning, since it refers to a builtin GCC function strncpy. As far as I read, this should be solved by a simple GCC upgrade to the newest version, but that is something outside my code base, since GCC resides on the CRAN servers.
> 
> In the meantime, to get the package published, did anyone encountered a similar problem? If so, is there a workaround?
> 
> ?
> Adrian Dusa
> University of Bucharest
> Romanian Social Data Archive
> Soseaua Panduri nr. 90-92
> 050663 Bucharest sector 5
> Romania
> https://adriandusa.eu
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Sat May 23 09:00:45 2020
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Sat, 23 May 2020 08:00:45 +0100
Subject: [Rd] GCC warning
In-Reply-To: <22621C99-CB27-43C9-9419-CA19BE108E82@R-project.org>
References: <F51B821D-D90B-4BB9-9ED7-2F1ABFCB5067@gmail.com>
 <22621C99-CB27-43C9-9419-CA19BE108E82@R-project.org>
Message-ID: <ba2c5b2a-d8f8-506e-1dbb-cdf8a800e2e1@stats.ox.ac.uk>

On 23/05/2020 07:38, Simon Urbanek wrote:
> Adrian,
> 
> newer compilers are better at finding bugs - you may want to read the full trace of the error, it tells you that you likely have a memory overflow when using strncpy() in your package. You should check whether it is right. Unfortunately we can?t help you more specifically, because I don't see any link to what you submitted so can?t look at the code involved.

NB: debian-gcc on CRAN does have the latest version of gcc (10.1) and 
the link would likely have given fuller details (such links are provided 
on CRAN report pages but I do not know for submissions).

gcc does sometimes give false alarms here (there is one for R with gcc 
 >= 9 and another for gcc >= 10) but see 
https://developers.redhat.com/blog/2018/05/24/detecting-string-truncation-with-gcc-8/ 
.  Most can easily be workaround by cleaner code.

> 
> Cheers,
> Simon
> 
> 
> 
>> On May 22, 2020, at 7:25 PM, Adrian Du?a <dusa.adrian at gmail.com> wrote:
>>
>> I am trying to submit a package on CRAN, and everything passes ok on all platforms but Debian, where CRAN responds with an automatic "significant" warning:
>>
>> * checking whether package ?QCA? can be installed ... [35s/35s] WARNING
>> Found the following significant warnings:
>>   /usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:10: warning: ?__builtin_strncpy? output may be truncated copying 12 bytes from a string of length 79 [-Wstringop-truncation]
>> See ?/srv/hornik/tmp/CRAN/QCA.Rcheck/00install.out? for details.
>>
>>
>> I know the cause of this: using a cursomized version of some external C library, coupled with <SystemRequirements: GNU make> in the Description.
>>
>> But I do not know hot to get past this warning, since it refers to a builtin GCC function strncpy. As far as I read, this should be solved by a simple GCC upgrade to the newest version, but that is something outside my code base, since GCC resides on the CRAN servers.
>>
>> In the meantime, to get the package published, did anyone encountered a similar problem? If so, is there a workaround?
>>
>> ?
>> Adrian Dusa
>> University of Bucharest
>> Romanian Social Data Archive
>> Soseaua Panduri nr. 90-92
>> 050663 Bucharest sector 5
>> Romania
>> https://adriandusa.eu


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From hp@ge@ @end|ng |rom |redhutch@org  Sat May 23 10:57:15 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Sat, 23 May 2020 01:57:15 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <713381417.133312.1590196369208@mail.yahoo.com>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
 <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
 <713381417.133312.1590196369208@mail.yahoo.com>
Message-ID: <8df84b14-d5af-551b-31eb-c00d22fc3df4@fredhutch.org>

On 5/22/20 18:12, brodie gaslam wrote:
> 
> FWIW what convinces me is consistency with other aggregating functions applied
> to zero length inputs:
> 
> sum(numeric(0))
> ## [1] 0

Right.

And 1 is the identity element of multiplication:

 > prod(numeric(0))
[1] 1

And the empty string is the identity element of string aggregation by 
concatenation.

H.


From j@goreck| @end|ng |rom w|t@edu@p|  Sat May 23 12:03:00 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Sat, 23 May 2020 11:03:00 +0100
Subject: [Rd] base::order breaking change in R-devel
Message-ID: <CAOO9MKUJEdpLfaSsReD1yagdi-kWxf0VHXO+sUdV_5PAC=eu-Q@mail.gmail.com>

Hi R developers,
There seems to be breaking change in base::order on Windows in
R-devel. Code below yields different results on R 4.0.0 and R-devel
(2020-05-22 r78545). I haven't found any info about that change in
NEWS. Was the change intentional?

Sys.setlocale("LC_CTYPE","C")
Sys.setlocale("LC_COLLATE","C")
x1 = "fa\xE7ile"
Encoding(x1) = "latin1"
x2 = iconv(x1, "latin1", "UTF-8")
base::order(c(x2,x1,x1,x2))
Encoding(x2) = "unknown"
base::order(c(x2,x1,x1,x2))

# R 4.0.0
base::order(c(x2,x1,x1,x2))
#[1] 1 4 2 3
Encoding(x2) = "unknown"
base::order(c(x2,x1,x1,x2))
#[1] 2 3 1 4

# R-devel
base::order(c(x2,x1,x1,x2))
#[1] 1 2 3 4
Encoding(x2) = "unknown"
base::order(c(x2,x1,x1,x2))
#[1] 1 4 2 3

Best Regards,
Jan Gorecki


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Sat May 23 12:08:22 2020
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Sat, 23 May 2020 18:08:22 +0800
Subject: [Rd] Should 0L * NA_integer_ be 0L?
Message-ID: <CAPRVBcwJgB8Px4WKwZniP8z07O+M-SBZa4a0t__bYXFDiV=SLw@mail.gmail.com>

I don't see this specific case documented anywhere (I also tried to search
the r-devel archives, as well as I could); the only close reference
mentions NA & FALSE = FALSE, NA | TRUE = TRUE. And there's also this
snippet from R-lang:

In cases where the result of the operation would be the same for all
> possible values the NA could take, the operation may return this value.
>

This begs the question -- shouldn't 0L * NA_integer_ be 0L?

Because this is an integer operation, and according to this definition of
NA:

Missing values in the statistical sense, that is, variables whose value
> is not known, have the value @code{NA}
>

NA_integer_ should be an unknown integer value between -2^31+1 and 2^31-1.
Multiplying any of these values by 0 results in 0 -- that is, the result of
the operation would be 0 for all possible values the NA could take.

This came up from what seems like an inconsistency to me:

all(NA, FALSE)
# [1] FALSE
NA * FALSE
# [1] NA

I agree with all(NA, FALSE) being FALSE because we know for sure that all
cannot be true. The same can be said of the multiplication -- whether NA
represents TRUE or FALSE, the resulting value is 0 (FALSE).

I also agree with the numeric case, FWIW: NA_real_ * 0 has to be NA_real_,
because NA_real_ could be Inf or NaN, for both of which multiplication by 0
gives NaN, hence 0 * NA_real_ is either 0 or NaN, hence it must be NA_real_.

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat May 23 12:49:21 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 23 May 2020 12:49:21 +0200
Subject: [Rd] Should 0L * NA_integer_ be 0L?
In-Reply-To: <CAPRVBcwJgB8Px4WKwZniP8z07O+M-SBZa4a0t__bYXFDiV=SLw@mail.gmail.com>
References: <CAPRVBcwJgB8Px4WKwZniP8z07O+M-SBZa4a0t__bYXFDiV=SLw@mail.gmail.com>
Message-ID: <24264.65457.911215.395844@stat.math.ethz.ch>

>>>>> Michael Chirico 
>>>>>     on Sat, 23 May 2020 18:08:22 +0800 writes:

    > I don't see this specific case documented anywhere (I also tried to search
    > the r-devel archives, as well as I could); the only close reference
    > mentions NA & FALSE = FALSE, NA | TRUE = TRUE. And there's also this
    > snippet from R-lang:

    > In cases where the result of the operation would be the same for all
    >> possible values the NA could take, the operation may return this value.
    >> 

    > This begs the question -- shouldn't 0L * NA_integer_ be 0L?

    > Because this is an integer operation, and according to this definition of
    > NA:

    > Missing values in the statistical sense, that is, variables whose value
    >> is not known, have the value @code{NA}
    >> 

    > NA_integer_ should be an unknown integer value between -2^31+1 and 2^31-1.
    > Multiplying any of these values by 0 results in 0 -- that is, the result of
    > the operation would be 0 for all possible values the NA could take.


    > This came up from what seems like an inconsistency to me:

    > all(NA, FALSE)
    > # [1] FALSE
    > NA * FALSE
    > # [1] NA

    > I agree with all(NA, FALSE) being FALSE because we know for sure that all
    > cannot be true. The same can be said of the multiplication -- whether NA
    > represents TRUE or FALSE, the resulting value is 0 (FALSE).

    > I also agree with the numeric case, FWIW: NA_real_ * 0 has to be NA_real_,
    > because NA_real_ could be Inf or NaN, for both of which multiplication by 0
    > gives NaN, hence 0 * NA_real_ is either 0 or NaN, hence it must be NA_real_.

I agree about almost everything you say above. ...
but possibly the main conclusion.

The problem with your proposed change would be that  integer
arithmetic gives a different result than the corresponding
"numeric" computation.
(I don't remember other such cases in R, at least as long as the
 integer arithmetic does not overflow.)

One principle to decided such problems in S and R has been that
the user should typically *not* have to know if their data is
stored in float/double or in integer, and the results should be the same
(possibly apart from staying integer for some operations).


{{Note that there are also situations were it's really
  undesirable that    0 * NA   does *not* give 0 (but NA);
  notably in sparse matrix operations where you'd very often can
  now that NA was not Inf (or NaN) and you really would like to
  preserve sparseness ...}}


    > [[alternative HTML version deleted]]

    (as you did not use plain text ..)


From thom@@@|r|edr|ch@me|er @end|ng |rom ruhr-un|-bochum@de  Sat May 23 13:19:24 2020
From: thom@@@|r|edr|ch@me|er @end|ng |rom ruhr-un|-bochum@de (Thomas Friedrichsmeier)
Date: Sat, 23 May 2020 13:19:24 +0200
Subject: [Rd] Surpising behavior when using an active binding as loop index
 in R 4.0.0
Message-ID: <20200523131924.1bfbdd0a@booklife>

Hi,

I stumbled upon a surprising behavior when using an active binding as a
loop index variable in R 4.0.0. In contrast, the behavior observed in R
3.6.1 is in line with my expectations.

Consider the code below:

makeActiveBinding("i", 
	function(value) {
		if (missing(value)) {
			x
	} else {
		print("set")
		x <<- value
	}
	}, globalenv())

i <- 1     # output "set"
print(i)   # output [1] 1

# Surprising behavior starts here:
for(i in 2:3) print(i) # output [1] "set"
                       #        NULL
                       #        NULL

print(i)               # output NULL
print(x)               # output NULL

i <- 4                 # output "set"
print(i)               # ouput [1] 4
print(x)               # ouput [1] 4

Regards
Thomas

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 833 bytes
Desc: Digitale Signatur von OpenPGP
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200523/8f3f891d/attachment.sig>

From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Sat May 23 14:00:31 2020
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Sat, 23 May 2020 20:00:31 +0800
Subject: [Rd] Should 0L * NA_integer_ be 0L?
In-Reply-To: <24264.65457.911215.395844@stat.math.ethz.ch>
References: <CAPRVBcwJgB8Px4WKwZniP8z07O+M-SBZa4a0t__bYXFDiV=SLw@mail.gmail.com>
 <24264.65457.911215.395844@stat.math.ethz.ch>
Message-ID: <CAPRVBcyF40yR5VbC-3p0vJSaQBLd4rRN5CLAUjgxeqq1KpodtQ@mail.gmail.com>

OK, so maybe one way to paraphrase:

For R, the boundedness of integer vectors is an implementation detail,
rather than a deeper mathematical fact that can be exploited for this
case.

One might also expect then that overflow wouldn't result in NA, but
rather automatically cast up to numeric? But that this doesn't happen
for efficiency reasons?

Would it make any sense to have a different carveout for the logical
case? For logical, storage as integer might be seen as a similar type
of implementation detail (though if we're being this strict, the
question arises of what multiplication of logical values even means).

FALSE * NA = 0L


On Sat, May 23, 2020 at 6:49 PM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Michael Chirico
> >>>>>     on Sat, 23 May 2020 18:08:22 +0800 writes:
>
>     > I don't see this specific case documented anywhere (I also tried to search
>     > the r-devel archives, as well as I could); the only close reference
>     > mentions NA & FALSE = FALSE, NA | TRUE = TRUE. And there's also this
>     > snippet from R-lang:
>
>     > In cases where the result of the operation would be the same for all
>     >> possible values the NA could take, the operation may return this value.
>     >>
>
>     > This begs the question -- shouldn't 0L * NA_integer_ be 0L?
>
>     > Because this is an integer operation, and according to this definition of
>     > NA:
>
>     > Missing values in the statistical sense, that is, variables whose value
>     >> is not known, have the value @code{NA}
>     >>
>
>     > NA_integer_ should be an unknown integer value between -2^31+1 and 2^31-1.
>     > Multiplying any of these values by 0 results in 0 -- that is, the result of
>     > the operation would be 0 for all possible values the NA could take.
>
>
>     > This came up from what seems like an inconsistency to me:
>
>     > all(NA, FALSE)
>     > # [1] FALSE
>     > NA * FALSE
>     > # [1] NA
>
>     > I agree with all(NA, FALSE) being FALSE because we know for sure that all
>     > cannot be true. The same can be said of the multiplication -- whether NA
>     > represents TRUE or FALSE, the resulting value is 0 (FALSE).
>
>     > I also agree with the numeric case, FWIW: NA_real_ * 0 has to be NA_real_,
>     > because NA_real_ could be Inf or NaN, for both of which multiplication by 0
>     > gives NaN, hence 0 * NA_real_ is either 0 or NaN, hence it must be NA_real_.
>
> I agree about almost everything you say above. ...
> but possibly the main conclusion.
>
> The problem with your proposed change would be that  integer
> arithmetic gives a different result than the corresponding
> "numeric" computation.
> (I don't remember other such cases in R, at least as long as the
>  integer arithmetic does not overflow.)
>
> One principle to decided such problems in S and R has been that
> the user should typically *not* have to know if their data is
> stored in float/double or in integer, and the results should be the same
> (possibly apart from staying integer for some operations).
>
>
> {{Note that there are also situations were it's really
>   undesirable that    0 * NA   does *not* give 0 (but NA);
>   notably in sparse matrix operations where you'd very often can
>   now that NA was not Inf (or NaN) and you really would like to
>   preserve sparseness ...}}
>
>
>     > [[alternative HTML version deleted]]
>
>     (as you did not use plain text ..)


From thom@@@|r|edr|ch@me|er @end|ng |rom ruhr-un|-bochum@de  Sat May 23 14:07:26 2020
From: thom@@@|r|edr|ch@me|er @end|ng |rom ruhr-un|-bochum@de (Thomas Friedrichsmeier)
Date: Sat, 23 May 2020 14:07:26 +0200
Subject: [Rd] 
 Surpising behavior when using an active binding as loop index
 in R 4.0.0
In-Reply-To: <20200523131924.1bfbdd0a@booklife>
References: <20200523131924.1bfbdd0a@booklife>
Message-ID: <20200523140726.7dae7c49@booklife>

Possibly just a symptom of the earlier behavior, but I'll amend my
example, below, with an even more disturbing observation:

Am Sat, 23 May 2020 13:19:24 +0200
schrieb Thomas Friedrichsmeier via R-devel <r-devel at r-project.org>:
[...]
> Consider the code below:
> 
> makeActiveBinding("i", 
> 	function(value) {
> 		if (missing(value)) {
> 			x
> 	} else {
> 		print("set")
> 		x <<- value
> 	}
> 	}, globalenv())
> 
> i <- 1     # output "set"
> print(i)   # output [1] 1
> 
> # Surprising behavior starts here:
> for(i in 2:3) print(i) # output [1] "set"
>                        #        NULL
>                        #        NULL
> 
> print(i)               # output NULL
> print(x)               # output NULL
> 
> i <- 4                 # output "set"
> print(i)               # ouput [1] 4
> print(x)               # ouput [1] 4

ls()
# Error in ls() : 
#  Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'

Regards
Thomas

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 833 bytes
Desc: Digitale Signatur von OpenPGP
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200523/b67df0e4/attachment.sig>

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat May 23 14:25:17 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 23 May 2020 14:25:17 +0200
Subject: [Rd] 
 Compatibility issues caused by new simplify argument in apply
 function
In-Reply-To: <1806352.WikOjHgCZ0@lehnert-thinkpad-x220>
References: <1806352.WikOjHgCZ0@lehnert-thinkpad-x220>
Message-ID: <24265.5677.533769.369021@stat.math.ethz.ch>

>>>>> Lukas Lehnert via R-devel 
>>>>>     on Fri, 22 May 2020 12:26:05 +0200 writes:

    > Dear R Developers,
    > the new  simplify argument in apply causes that my package (hsdar) does not 
    > pass the 
    > checks in R-devel.

    > The workaround, Kurt Hornik send me, is working for the R-code:
    > if("simplify" %in% names(formals(base::apply))) 
    > do something 
    > else 
    > do something else

    > Unfortunately, I cannot conditionalize the man pages of the functions. 

Why should you do that?   In other words:  Why change the
argument list of your function(s) ?

That \Sexpr{} does not work as a section is "obvious" (for some),
but I really don't see why you should change the argument list
or defaults of your hdara package functions at all.

Martin Maechler
ETH Zurich  and  R Core

    > I get the message 
    > that "applySpeclib.Rd:12-14: Section \Sexpr is unrecognized and will be 
    > dropped" if I try to 
    > dynamically define the entire usage section. If I try to use \Sexpr inside the 
    > \usage section, 
    > I get the following warning: "applySpeclib.Rd:13-15: Tag \Sexpr is invalid in 
    > a \usage block"

    > Does anybody have an idea how to proceed. The full code is available below.

    > Thanks

    > Lukas


    > *1. Code for full usage section:*
    > ..
    > \description{
    > Apply function over all spectra or a subset of spectra in a \code{Speclib}.
    > }

    > \Sexpr[echo=TRUE,results=rd,stage=install]{
    > hsdar:::.applyInHelp1("Speclib", usage = TRUE)
    > }

    > \arguments{
    > ..

    > *Function .applyInHelp1*
    > .applyInHelp1 <- function(fun_name, usage)
    > {
    > if (usage)
    > {
    > if ("simplify" %in% names(formals(base::apply))) 
    > {
    > return(paste0("\\usage{\n",
    > "\\S4method{apply}{", fun_name, "}(X, MARGIN, FUN, ..., 
    > simplify = TRUE)\n",
    > "}"))
    > } else {
    > return(paste0("\\usage{\n",
    > "\\S4method{apply}{", fun_name, "}(X, MARGIN, FUN, ...)
    > \n",
    > "}"))
    > }
    > } else {
    > if ("simplify" %in% names(formals(base::apply))) 
    > {
    > return("}\n\\item{simplify}{Currently ignored")
    > } else {
    > return("")
    > }
    > }
    > }


    > *2. Using \Sexpr inside the \usage block*
    > \usage{
    > \S4method{apply}{Speclib}(X, FUN, bySI = NULL, ...
    > \Sexpr[echo=TRUE,results=rd,stage=install]{
    > hsdar:::.applyInHelp2(usage = TRUE)
    > }
    > )
    > }


    > *Function .applyInHelp2*
    > .applyInHelp2 <- function(usage)
    > {
    > if (usage)
    > {
    > if ("simplify" %in% names(formals(base::apply))) 
    > {
    > return(", simplify = TRUE)")
    > } 
    > } else {
    > if ("simplify" %in% names(formals(base::apply))) 
    > {
    > return("}\n\\item{simplify}{Currently ignored")
    > } else {
    > return("")
    > }
    > }
    > }

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat May 23 14:29:39 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 23 May 2020 14:29:39 +0200
Subject: [Rd] R-devel's ...names() questions
In-Reply-To: <CAF8bMcZL7ZTzDyWm=QtDG0dyitJ7SE2+g_-NxeZy3Oi9esDyWg@mail.gmail.com>
References: <CAF8bMcZL7ZTzDyWm=QtDG0dyitJ7SE2+g_-NxeZy3Oi9esDyWg@mail.gmail.com>
Message-ID: <24265.5939.382719.592441@stat.math.ethz.ch>

>>>>> William Dunlap via R-devel 
>>>>>     on Fri, 22 May 2020 11:53:12 -0700 writes:

    > Am am missing something or does the new ...names() in R-devel not work
    > right?

No, you are not missing anything, and you are right.
Thank you for the report!

Martin

    >> a <- function(x, ...) ...names()
    >> a(a=stop("a"), b=stop("b"))
    > [1] "a" ""
    >> a(stop("x"), stop("unnamed"), c=stop("c"), d=stop("d"))
    > [1] NA "" ""

    >> version
    > _
    > platform       x86_64-pc-linux-gnu
    > arch           x86_64
    > os             linux-gnu
    > system         x86_64, linux-gnu
    > status         Under development (unstable)
    > major          4
    > minor          1.0
    > year           2020
    > month          05
    > day            19
    > svn rev        78492
    > language       R
    > version.string R Under development (unstable) (2020-05-19 r78492)
    > nickname       Unsuffered Consequences

    > The following seems to do the right thing
    > alt...names <- function() evalq(names(substitute(...())),
    > envir=parent.frame())

    > However I wonder if it would be better to give the user a function, say
    > ...args_unevaluated(...) to get the unevaluated ... arguments directlly
    > without having to know about the substitute(...()) trick.   Then the user
    > could get the length, the n'th, or the names using the usual length(), [[,
    > and names() functions instead of ...length(), ...elt(), and ...names().

    > Bill Dunlap
    > TIBCO Software
    > wdunlap tibco.com

    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @h@nem @end|ng |rom mtu@edu  Sat May 23 06:37:57 2020
From: @h@nem @end|ng |rom mtu@edu (Shane Mueller)
Date: Sat, 23 May 2020 00:37:57 -0400
Subject: [Rd] 
 round() and signif() do not check argument names when a single
 argument is given
In-Reply-To: <Mime4j.0.851838a43c315b65.1723f3e20f9@imap.gmail.com>
References: <CAMEcc0tY+F7QgfshvOhcMUp=7=JFYxg7EAXnvKBOeYw97YoEeQ@mail.gmail.com>
 <Mime4j.0.851838a43c315b65.1723f3e20f9@imap.gmail.com>
Message-ID: <CAMEcc0v=awNzM8HMoCQ2VX5-bfSV28HM4S-nuefH3cJySYo7QQ@mail.gmail.com>

On Fri, May 22, 2020 at 9:55 PM David Winsemius <dwinsemius at comcast.net>
wrote:

> The premise in the first few lines of your preamble is at odds (in the
> logical sense) with my understanding of primitive function behavior. Try:
>
> data.frame(x=1:2,y=letters[1:2])[j=2, i=1]
>
> David
>

I had never seen naming indexes of the [] operator.  The documentation of
[] indicates that it does argument matching in a non-standard way,
recommends against doing it, and states the [.data.frame behavior used in
this example is 'undocumented'.  In the example above a warning is thrown
as well.

Here is the [] documentation:

Argument matching
> Note that these operations do not match their index arguments in the
> standard way: argument names are ignored and positional matching only is
> used. So m[j = 2, i = 1] is equivalent to m[2, 1] and not to m[1, 2].
>
> This may not be true for methods defined for them; for example it is not
> true for the data.frame methods described in [.data.frame which warn if i
> or j is named and have undocumented behaviour in that case.
>
> To avoid confusion, do not name index arguments (but drop and exact must
> be named).
>


For the data frames operator [], i and j appear to be named and used
arguments, as the following causes an unused argument error for k:
data.frame(x=1:2,y=letters[1:2])[j=2, k=1]

The analog for round() would be indexing with something like  [k=1,] alone,
which causes an unused argument error error for data frames, which is what
I'm suggesting round(banana=3.5) should do.   (note it works for matrix as
documented).

Best,
Shane

	[[alternative HTML version deleted]]


From du@@@@dr|@n @end|ng |rom un|buc@ro  Sat May 23 09:30:31 2020
From: du@@@@dr|@n @end|ng |rom un|buc@ro (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Sat, 23 May 2020 10:30:31 +0300
Subject: [Rd] GCC warning
In-Reply-To: <ba2c5b2a-d8f8-506e-1dbb-cdf8a800e2e1@stats.ox.ac.uk>
References: <F51B821D-D90B-4BB9-9ED7-2F1ABFCB5067@gmail.com>
 <22621C99-CB27-43C9-9419-CA19BE108E82@R-project.org>
 <ba2c5b2a-d8f8-506e-1dbb-cdf8a800e2e1@stats.ox.ac.uk>
Message-ID: <CAJ=0CtADk+66Ao3E1wt9pyXQBCSTdY_26wL2rZmBE3bLR1oukQ@mail.gmail.com>

On Sat, May 23, 2020 at 10:01 AM Prof Brian Ripley <ripley at stats.ox.ac.uk>
wrote:

> On 23/05/2020 07:38, Simon Urbanek wrote:
> > Adrian,
> >
> > newer compilers are better at finding bugs - you may want to read the
> full trace of the error, it tells you that you likely have a memory
> overflow when using strncpy() in your package. You should check whether it
> is right. Unfortunately we can?t help you more specifically, because I
> don't see any link to what you submitted so can?t look at the code involved.
>
> NB: debian-gcc on CRAN does have the latest version of gcc (10.1) and
> the link would likely have given fuller details (such links are provided
> on CRAN report pages but I do not know for submissions).
>
> gcc does sometimes give false alarms here (there is one for R with gcc
>  >= 9 and another for gcc >= 10) but see
>
> https://developers.redhat.com/blog/2018/05/24/detecting-string-truncation-with-gcc-8/
> .  Most can easily be workaround by cleaner code.
>

Oh, of course, apologies for the oversight, these are the links:

"package QCA_3.8.tar.gz does not pass the incoming checks automatically,
please see the following pre-tests:
Windows: <
https://win-builder.r-project.org/incoming_pretest/QCA_3.8_20200521_185504/Windows/00check.log
>
Status: 1 NOTE
Debian: <
https://win-builder.r-project.org/incoming_pretest/QCA_3.8_20200521_185504/Debian/00check.log
>
Status: 1 WARNING, 1 NOTE"

I only now realised the most relevant link was down below, after "last
released version's CRAN status" (where I mistakenly stopped reading
further):

"More details are given in the directory:
<https://win-builder.r-project.org/incoming_pretest/QCA_3.8_20200521_185504/
>"

This is indeed very informative, and points to specific parts of the code
that seem to be responsible with the warning.
Thank you both very much for the pointers, I now at least know what should
I try to fix.

Best wishes,
Adrian

-- 
Adrian Dusa
University of Bucharest
Romanian Social Data Archive
Soseaua Panduri nr. 90-92
050663 Bucharest sector 5
Romania
https://adriandusa.eu

	[[alternative HTML version deleted]]


From ggrothend|eck @end|ng |rom gm@||@com  Fri May 15 19:58:09 2020
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Fri, 15 May 2020 13:58:09 -0400
Subject: [Rd] ftable <-> data.frame etc {was "justify hard coded in
 format.ftable"}
In-Reply-To: <24254.49749.263070.684423@stat.math.ethz.ch>
References: <f391e1ccd3a84fe1885c9e644371707e@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>
 <24253.4110.25144.189615@stat.math.ethz.ch>
 <CAP01uR=5-M85sX+iYTPezLiB-mQiJiX7W9+gnYJAZDMjt4g0rA-3531@mail.gmail.com>
 <24254.49749.263070.684423@stat.math.ethz.ch>
Message-ID: <CAP01uRmoMya=aRVrLZr1A2MCPZnUbxwJvDQoSG6==xPFEgd_Yg-7080@mail.gmail.com>


That's not the problem.  The problem is that if you have

   ft <- ftable(UCBAdmissions, row.vars = 3:2)
   ft
   ##             Admit Admitted Rejected
   ## Dept Gender
   ## A    Male              512      313
   ##      Female             89       19
   ## B    Male              353      207
   ##      Female             17        8
   ## C    Male              120      205
  ## ... etc ...

then as.data.frame(ft) gives a deconstructed 24x4 data.frame
like this:

  as.data.frame(ft)
  ##    Dept Gender    Admit Freq
  ## 1     A   Male Admitted  512
  ## 2     B   Male Admitted  353
  ## 3     C   Male Admitted  120
  ## 4     D   Male Admitted  138
  ## ... etc ...

which is fine but it does not address the problem here.  The
problem here is that we want a a usable data.frame
having columns that correspond to ft.  We want this 12x4
data.frame:

  ##    Dept Gender Admitted Rejected
  ## 1     A   Male      512      313
  ## 2     A Female       89       19
  ## 3     B   Male      353      207
  ## 4     B Female       17        8
  ## ... etc ...

The links I provided already pointed to the code below which
someone posted on SO and solves the problem but I would
have thought this would be easy to do in base R and natural
to provide.

  ftable2df <- function(mydata) {
    ifelse(class(mydata) == "ftable",
        mydata <- mydata, mydata <- ftable(mydata))
    dfrows <- rev(expand.grid(rev(attr(mydata, "row.vars"))))
    dfcols <- as.data.frame.matrix(mydata)
    names(dfcols) <- do.call(
      paste, c(rev(expand.grid(rev(attr(mydata, "col.vars")))), sep = "_"))
    cbind(dfrows, dfcols)
  }
  ftable2df(ft)
  ##    Dept Gender Admitted Rejected
  ## 1     A   Male      512      313
  ## 2     A Female       89       19
  ## 3     B   Male      353      207
  ## 4     B Female       17        8
  ## ... etc ...

 Fri, May 15, 2020 at 12:25 PM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Gabor Grothendieck
> >>>>>     on Thu, 14 May 2020 06:56:06 -0400 writes:
>
> > If you are looking at ftable could you also consider adding
> > a way to convert an ftable into a usable data.frame such as
> > the ftable2df function defined here:
>
> > https://stackoverflow.com/questions/11141406/reshaping-an-array-to-data-frame/11143126#11143126
>
> > and there is an example of using it here:
>
> > https://stackoverflow.com/questions/61333663/manipulating-an-array-into-a-data-frame-in-base-r/61334756#61334756
>
> > Being able to move back and forth between various base class representations
> > seems like something that would be natural to provide.
>
> Sure!
>
> But there is already an  as.data.frame() method for "ftable",
> {and I would not want the    if(! .. ftable)  ftable(x)  part anyway.
>
> What I think many useRs / programmeRs  very often forget about
> is more-than-2-dimensional arrays {which *are* at the beginning
> of that SO question} and that these are often by far the most
> efficient data structure (rather than the corresponding data frames).
>
> and even less people forget that a "table" in base R is just a
> special case of a 1-D, 2-D, 3-D, .... array.
> (Semantically a special case: "array" with non-negative integer content
>
> I'd claim that everything you here ("move back and forth between
> ...") is already there in the "ftable" implementation in stats,
> notably in the source file  src/library/stats/R/ftable.R
>  -> https://svn.r-project.org/R/trunk/src/library/stats/R/ftable.R
>
> The problem may be in
>
> 1) too sparse documentation about the close relations
>    "ftable" <-> "array" <-> "table" <-> "data.frame"
>
> 2) people not thinking often enough about more-than-2D-arrays and the
>   special corresponding class "table" in R.
>
> To start with one:
>
> > str(UCBAdmissions)
>  'table' num [1:2, 1:2, 1:6] 512 313 89 19 353 207 17 8 120 205 ...
>  - attr(*, "dimnames")=List of 3
>   ..$ Admit : chr [1:2] "Admitted" "Rejected"
>   ..$ Gender: chr [1:2] "Male" "Female"
>   ..$ Dept  : chr [1:6] "A" "B" "C" "D" ...
> >
>
> and look at the *examples* in the help files and the S3 methods
>
> methods(class = "ftable")
> [1] as.data.frame as.matrix     as.table      format        head          print
> [7] tail
> see '?methods' for accessing help and source code
> > methods(class = "table")
>  [1] [             aperm         as.data.frame Axis          coerce        initialize
>  [7] lines         plot          points        print         show          slotsFromS3
> [13] summary       tail
> see '?methods' for accessing help and source code
> >
>
> ... need to close now, there's more to be said ...
>
>
>
>     > On Thu, May 14, 2020 at 5:32 AM Martin Maechler
>     > <maechler at stat.math.ethz.ch> wrote:
>     >>
>     >> >>>>> SOEIRO Thomas
>     >> >>>>>     on Wed, 13 May 2020 20:27:15 +0000 writes:
>     >>
>     >> > Dear all,
>     >> > I haven't received any feedback so far on my proposal to make "justify" argument available in stats:::format.ftable
>     >>
>     >> > Is this list the appropriate place for this kind of proposal?
>     >>
>     >> Yes, it is.. Actually such a post is even a "role model" post
>     >> for R-devel.
>     >>
>     >> > I hope this follow-up to my message won't be taken as rude. Of course it's not meant to be, but I'm not used to the R mailing lists...
>     >>
>     >> well, there could be said much, and many stories told here ... ;-)
>     >>
>     >> > Thank you in advance for your comments,
>     >>
>     >> > Best,
>     >> > Thomas
>     >>
>     >> The main reasons for "no reaction" (for such nice post) probably
>     >> are combination of the following
>     >>
>     >> - we are busy
>     >> - if we have time, we think other things are more exciting
>     >> - we have not used ftable much/at all and are not interested.
>     >>
>     >> Even though the first 2 apply to me, I'll have a 2nd look into
>     >> your post now, and may end up well agreeing with your proposal.
>     >>
>     >> Martin Maechler
>     >> ETH Zurich  and  R Core team
>     >>
>     >>
>     >>
>     >>
>     >> >> Dear all,
>     >> >>
>     >> >> justify argument is hard coded in format.ftable:
>     >> >>
>     >> >> cbind(apply(LABS, 2L, format, justify = "left"),
>     >> >> apply(DATA, 2L, format, justify = "right"))
>     >> >>
>     >> >> It would be useful to have the possibility to modify the argument between c("left", "right", "centre", "none") as in format.default.
>     >> >>
>     >> >> The lines could be changed to:
>     >> >>
>     >> >> if(length(justify) != 2)
>     >> >> stop("justify must be length 2")
>     >> >> cbind(apply(LABS, 2L, format, justify = justify[1]),
>     >> >> apply(DATA, 2L, format, justify = justify[2]))
>     >> >>
>     >> >> The argument justify could defaults to c("left", "right") for backward compatibility.
>     >> >>
>     >> >> It could then allow:
>     >> >> ftab <- ftable(wool + tension ~ breaks, warpbreaks)
>     >> >> format.ftable(ftab, justify = c("none", "none"))
>     >> >>
>     >> >> Best regards,
>     >> >>
>     >> >> Thomas
>
>
>     > --
>     > Statistics & Software Consulting
>     > GKX Group, GKX Associates Inc.
>     > tel: 1-877-GKX-GROUP
>     > email: ggrothendieck at gmail.com



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From berger @end|ng |rom mp||b-ber||n@mpg@de  Mon May 18 11:25:56 2020
From: berger @end|ng |rom mp||b-ber||n@mpg@de (Hilmar Berger)
Date: Mon, 18 May 2020 11:25:56 +0200
Subject: [Rd] dbinom link
In-Reply-To: <4C1EFD4A-18CC-4FCF-B4CB-C9E1CFF60DAE@gmail.com>
References: <242242C7-8A65-4EAB-A955-65BA78CC7D8E@illinois.edu>
 <CAB8pepwYOmEuJEAXimvhXC3u388LfBNn_M3KRDwSdykbwedy1g@mail.gmail.com>
 <4C1EFD4A-18CC-4FCF-B4CB-C9E1CFF60DAE@gmail.com>
Message-ID: <20077d82-9ab7-3795-a01a-a2873b2511d0-3971@mpiib-berlin.mpg.de>


What about using the Wayback Machine archive ? The web archive should be 
more stable than other links which also might disappear in the future.

E.g. 
https://web.archive.org/web/20070610002602/http://www.herine.net/stat/software/dbinom.html

, which also links to an archived copy of the PDF.

Best regards,

Hilmar

On 18.05.20 10:57, peter dalgaard wrote:
> In principle a good idea, but I'm not sure the whereabouts of Catherine Loader are known at this point. Last peeps from her on the net seem to be about a decade old.
>
> .pd
>
>> On 18 May 2020, at 10:31 , Abby Spurdle <spurdle.a at gmail.com> wrote:
>>
>> This has come up before.
>>
>> Here's the last time:
>> https://stat.ethz.ch/pipermail/r-devel/2019-March/077478.html
>>
>> I guess my answer to the following the question...
>>
>>     Perhaps we should ask permission to
>>     nail the thing down somewhere on r-project.org?
>>
>> ...would be, to reproduce it somewhere.
>> And then update the link in the binom help file.
>>
>> Given that the article was previously available freely (with no
>> apparent restrictions on reproducing it), and that the author has
>> significant published works which are open access, I'd be surprised if
>> there's any objection to reproducing it.
>>
>>
>> On Mon, May 18, 2020 at 8:01 PM Koenker, Roger W <rkoenker at illinois.edu> wrote:
>>> FWIW the link from ?dbinom to the Loader paper on Binomials is broken but the paper seems to be
>>> available here:   https://octave.1599824.n4.nabble.com/attachment/3829107/0/loader2000Fast.pdf
>>>
>>> Roger Koenker
>>> r.koenker at ucl.ac.uk<mailto:r.koenker at ucl.ac.uk>
>>> Honorary Professor of Economics
>>> Department of Economics, UCL
>>> Emeritus Professor of Economics
>>> and Statistics, UIUC
>>>
>>>
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat May 23 22:34:13 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 23 May 2020 22:34:13 +0200
Subject: [Rd] dbinom link
In-Reply-To: <20077d82-9ab7-3795-a01a-a2873b2511d0-3971@mpiib-berlin.mpg.de>
References: <242242C7-8A65-4EAB-A955-65BA78CC7D8E@illinois.edu>
 <CAB8pepwYOmEuJEAXimvhXC3u388LfBNn_M3KRDwSdykbwedy1g@mail.gmail.com>
 <4C1EFD4A-18CC-4FCF-B4CB-C9E1CFF60DAE@gmail.com>
 <20077d82-9ab7-3795-a01a-a2873b2511d0-3971@mpiib-berlin.mpg.de>
Message-ID: <24265.35013.201923.279273@stat.math.ethz.ch>

>>>>> Hilmar Berger 
>>>>>     on Mon, 18 May 2020 11:25:56 +0200 writes:

    > What about using the Wayback Machine archive ? The web archive should be 
    > more stable than other links which also might disappear in the future.

    > E.g. 
    > https://web.archive.org/web/20070610002602/http://www.herine.net/stat/software/dbinom.html

    > , which also links to an archived copy of the PDF.

    > Best regards,
    > Hilmar

Thank you, Hilmar;  I have been aware of the web.archive ... but
I already had 3 (very slightly different) versions of the report
on my computer (from "way back" ..).

We've now added the "best" (and most recent, 2002) to the R-project website, 
and amended the 'Binomial'  help page to include the new link:  It
now says (in R-devel and 'R 4.0.0 patched') :

  Source:

     For dbinom a saddle-point expansion is used: see

     Catherine Loader (2000). _Fast and Accurate Computation of
     Binomial Probabilities_; available as <URL:
     https://www.r-project.org/doc/reports/CLoader-dbinom-2002.pdf>

Best regards,
Martin



    > On 18.05.20 10:57, peter dalgaard wrote:
    >> In principle a good idea, but I'm not sure the whereabouts of Catherine Loader are known at this point. Last peeps from her on the net seem to be about a decade old.
    >> 
    >> .pd
    >> 
    >>> On 18 May 2020, at 10:31 , Abby Spurdle <spurdle.a at gmail.com> wrote:
    >>> 
    >>> This has come up before.
    >>> 
    >>> Here's the last time:
    >>> https://stat.ethz.ch/pipermail/r-devel/2019-March/077478.html
    >>> 
    >>> I guess my answer to the following the question...
    >>> 
    >>> Perhaps we should ask permission to
    >>> nail the thing down somewhere on r-project.org?
    >>> 
    >>> ...would be, to reproduce it somewhere.
    >>> And then update the link in the binom help file.
    >>> 
    >>> Given that the article was previously available freely (with no
    >>> apparent restrictions on reproducing it), and that the author has
    >>> significant published works which are open access, I'd be surprised if
    >>> there's any objection to reproducing it.
    >>> 
    >>> 
    >>> On Mon, May 18, 2020 at 8:01 PM Koenker, Roger W <rkoenker at illinois.edu> wrote:
    >>>> FWIW the link from ?dbinom to the Loader paper on Binomials is broken but the paper seems to be
    >>>> available here:   https://octave.1599824.n4.nabble.com/attachment/3829107/0/loader2000Fast.pdf
    >>>> 
    >>>> Roger Koenker
    >>>> r.koenker at ucl.ac.uk<mailto:r.koenker at ucl.ac.uk>
    >>>> Honorary Professor of Economics
    >>>> Department of Economics, UCL
    >>>> Emeritus Professor of Economics
    >>>> and Statistics, UIUC
    >>>> 
    >>>> 
    >>>> 
    >>>> [[alternative HTML version deleted]]
    >>>> 
    >>>> ______________________________________________
    >>>> R-devel at r-project.org mailing list
    >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>> ______________________________________________
    >>> R-devel at r-project.org mailing list
    >>> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Sun May 24 02:45:34 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sat, 23 May 2020 17:45:34 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
 <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
Message-ID: <CAD4oTHGa4Ny=HS-Vq68P4arawhM0zefhEuKe2EvystnRHkWxTQ@mail.gmail.com>

Herve (et al.),

On Fri, May 22, 2020 at 3:16 PM Herv? Pag?s <hpages at fredhutch.org> wrote:

> Gabe,
>
> It's the current behavior of paste() that is a major source of bugs:
>
>    ## Add "rs" prefix to SNP ids and collapse them in a
>    ## comma-separated string.
>    collapse_snp_ids <- function(snp_ids)
>        paste("rs", snp_ids, sep="", collapse=",")
>
>    snp_groups <- list(
>      group1=c(55, 22, 200),
>      group2=integer(0),
>      group3=c(99, 550)
>    )
>
>    vapply(snp_groups, collapse_snp_ids, character(1))
>    #            group1            group2            group3
>    # "rs55,rs22,rs200"              "rs"      "rs99,rs550"
>
> This has hit me so many times!
>
> Now with 'collapse0=TRUE', we finally have the opportunity to make it do
> the right thing. Let's not miss that opportunity.
>

I see what you're saying, but I don' know. Maybe my intuition is just
different but when I collapse multiple character vectors together, I
expect all the characters from each of those vectors to be in the resulting
collapsed one. In your example its a string literal tot be added
elementwise to the prefix, but what if it is another vector of length > 1.
Wouldn't it be strange that all those values are wiped and absent from the
resulting string? Maybe it's just me. like for paste(x,y,z, sep ="",
collapse = ", ", recycle0=TRUE) if length(y) is 0, it literally makes no
difference when x and z are.

I seem to be being largely outvoted anyway though, so we will see what
Martin and others who may pop up might think, but I raised the points I
wanted to raise so we'll see where things ultimately fall.

~G



>
> Cheers,
> H.
>
>
> On 5/22/20 11:26, Gabriel Becker wrote:
> > I understand that this is consistent but it also strikes me as an
> > enormous 'gotcha' of a magnitude that 'we' are trying to avoid/smooth
> > over at this point in user-facing R space.
> >
> > For the record I'm not suggesting it should return something other than
> > "", and in particular I'm not arguing that any call to paste /that does
> > not return an error/ with non-NULL collapse should return a character
> > vector of length one.
> >
> > Rather I'm pointing out that it could (perhaps should, imo) simply be an
> > error, which is also consistent, in the strict sense, with
> > previous behavior in that it is the developer simply declining to extend
> > the recycle0 argument to the full parameter space (there is no rule that
> > says we must do so, arguments whose use is incompatible with other
> > arguments can be reasonable and called for).
> >
> > I don't feel feel super strongly that reeturning "" in this and similar
> > cases horrible and should never happen, but i'd bet dollars to donuts
> > that to the extent that behavior occurs it will be a disproportionately
> > major source of bugs, and i think thats at least worth considering in
> > addition to pure consistency.
> >
> > ~G
> >
> > On Fri, May 22, 2020 at 9:50 AM William Dunlap <wdunlap at tibco.com
> > <mailto:wdunlap at tibco.com>> wrote:
> >
> >     I agree with Herve, processing collapse happens last so
> >     collapse=non-NULL always leads to a single character string being
> >     returned, the same as paste(collapse="").  See the altPaste function
> >     I posted yesterday.
> >
> >     Bill Dunlap
> >     TIBCO Software
> >     wdunlap tibco.com
> >     <
> https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=Z1o-HO3_OqxOR9LaRguGvnG7X4vF_z1_q13I7zmjcfY&s=7ZT1IjmexPqsDBhrV3NspPTr8M8XiMweEwJWErgAlqw&e=
> >
> >
> >
> >     On Fri, May 22, 2020 at 9:12 AM Herv? Pag?s <hpages at fredhutch.org
> >     <mailto:hpages at fredhutch.org>> wrote:
> >
> >         I think that
> >
> >              paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ", collapse
> >         = ",",
> >         recycle0=TRUE)
> >
> >         should just return an empty string and don't see why it needs to
> >         emit a
> >         warning or raise an error. To me it does exactly what the user
> >         is asking
> >         for, which is to change how the 3 arguments are recycled
> >         **before** the
> >         'sep' operation.
> >
> >         The 'recycle0' argument has no business in the 'collapse'
> operation
> >         (which comes after the 'sep' operation): this operation still
> >         behaves
> >         like it always had.
> >
> >         That's all there is to it.
> >
> >         H.
> >
> >
> >         On 5/22/20 03:00, Gabriel Becker wrote:
> >          > Hi Martin et al,
> >          >
> >          >
> >          >
> >          > On Thu, May 21, 2020 at 9:42 AM Martin Maechler
> >          > <maechler at stat.math.ethz.ch
> >         <mailto:maechler at stat.math.ethz.ch>
> >         <mailto:maechler at stat.math.ethz.ch
> >         <mailto:maechler at stat.math.ethz.ch>>> wrote:
> >          >
> >          >      >>>>> Herv? Pag?s
> >          >      >>>>>     on Fri, 15 May 2020 13:44:28 -0700 writes:
> >          >
> >          >          > There is still the situation where **both** 'sep'
> and
> >          >     'collapse' are
> >          >          > specified:
> >          >
> >          >          >> paste(integer(0), "nth", sep="", collapse=",")
> >          >          > [1] "nth"
> >          >
> >          >          > In that case 'recycle0' should **not** be ignored
> i.e.
> >          >
> >          >          > paste(integer(0), "nth", sep="", collapse=",",
> >         recycle0=TRUE)
> >          >
> >          >          > should return the empty string (and not
> >         character(0) like it
> >          >     does at the
> >          >          > moment).
> >          >
> >          >          > In other words, 'recycle0' should only control the
> >         first
> >          >     operation (the
> >          >          > operation controlled by 'sep'). Which makes plenty
> >         of sense:
> >          >     the 1st
> >          >          > operation is binary (or n-ary) while the collapse
> >         operation
> >          >     is unary.
> >          >          > There is no concept of recycling in the context of
> >         unary
> >          >     operations.
> >          >
> >          >     Interesting, ..., and sounding somewhat convincing.
> >          >
> >          >          > On 5/15/20 11:25, Gabriel Becker wrote:
> >          >          >> Hi all,
> >          >          >>
> >          >          >> This makes sense to me, but I would think that
> >         recycle0 and
> >          >     collapse
> >          >          >> should actually be incompatible and paste should
> >         throw an
> >          >     error if
> >          >          >> recycle0 were TRUE and collapse were declared in
> >         the same
> >          >     call. I don't
> >          >          >> think the value of recycle0 should be silently
> >         ignored if it
> >          >     is actively
> >          >          >> specified.
> >          >          >>
> >          >          >> ~G
> >          >
> >          >     Just to summarize what I think we should know and agree
> >         (or be
> >          >     be "disproven") and where this comes from ...
> >          >
> >          >     1) recycle0 is a new R 4.0.0 option in paste() / paste0()
> >         which by
> >          >     default
> >          >         (recycle0 = FALSE) should (and *does* AFAIK) not
> >         change anything,
> >          >         hence  paste() / paste0() behave completely
> >         back-compatible
> >          >         if recycle0 is kept to FALSE.
> >          >
> >          >     2) recycle0 = TRUE is meant to give different behavior,
> >         notably
> >          >         0-length arguments (among '...') should result in
> >         0-length results.
> >          >
> >          >         The above does not specify what this means in detail,
> >         see 3)
> >          >
> >          >     3) The current R 4.0.0 implementation (for which I'm
> >         primarily
> >          >     responsible)
> >          >         and help(paste)  are in accordance.
> >          >         Notably the help page (Arguments -> 'recycle0' ;
> >         Details 1st
> >          >     para ; Examples)
> >          >         says and shows how the 4.0.0 implementation has been
> >         meant to work.
> >          >
> >          >     4) Several provenly smart members of the R community
> >         argue that
> >          >         both the implementation and the documentation of
> >         'recycle0 =
> >          >         TRUE'  should be changed to be more logical /
> >         coherent / sensical ..
> >          >
> >          >     Is the above all correct in your view?
> >          >
> >          >     Assuming yes,  I read basically two proposals, both
> agreeing
> >          >     that  recycle0 = TRUE  should only ever apply to the
> >         action of 'sep'
> >          >     but not the action of 'collapse'.
> >          >
> >          >     1) Bill and Herv? (I think) propose that 'recycle0'
> >         should have
> >          >         no effect whenever  'collapse = <string>'
> >          >
> >          >     2) Gabe proposes that 'collapse = <string>' and 'recycle0
> >         = TRUE'
> >          >         should be declared incompatible and error. If going
> >         in that
> >          >         direction, I could also see them to give a warning
> (and
> >          >         continue as if recycle = FALSE).
> >          >
> >          >
> >          > Herve makes a good point about when sep and collapse are both
> >         set. That
> >          > said, if the user explicitly sets recycle0, Personally, I
> >         don't think it
> >          > should be silently ignored under any configuration of other
> >         arguments.
> >          >
> >          > If all of the arguments are to go into effect, the question
> >         then becomes
> >          > one of ordering, I think.
> >          >
> >          > Consider
> >          >
> >          >     paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ",
> >         collapse = ",",
> >          >     recycle0=TRUE)
> >          >
> >          > Currently that returns character(0), becuase the logic is
> >          > essenttially (in pseudo-code)
> >          >
> >          >     collapse(paste(c("a", "b"), NULL, c("c",  "d"),  sep = "
> ",
> >          >     recycle0=TRUE), collapse = ", ", recycle0=TRUE)
> >          >
> >          >       -> collapse(character(0), collapse = ", " recycle0=TRUE)
> >          >
> >          >     -> character(0)
> >          >
> >          > Now Bill Dunlap argued, fairly convincingly I think, that
> >         paste(...,
> >          > collapse=<string>) should /always/ return a character vector
> >         of length
> >          > exactly one. With recycle0, though,  it will return "" via
> >         the progression
> >          >
> >          >     paste(c("a", "b"), NULL, c("c",  "d"),  sep = " ",
> >         collapse = ",",
> >          >     recycle0=TRUE)
> >          >
> >          >       -> collapse(character(0), collapse = ", ")
> >          >
> >          >     -> ""
> >          >
> >          >
> >          > because recycle0 is still applied to the sep-based operation
> >         which
> >          > occurs before collapse, thus leaving a vector of length 0 to
> >         collapse.
> >          >
> >          > That is consistent but seems unlikely to be what the user
> >         wanted, imho.
> >          > I think if it does this there should be at least a warning
> >         when paste
> >          > collapses to "" this way, if it is allowed at all (ie if
> mixing
> >          > collapse=<string>and recycle0=TRUEis not simply made an
> error).
> >          >
> >          > I would like to hear others' thoughts as well though. @Pages,
> >         Herve
> >          > <mailto:hpages at fredhutch.org <mailto:hpages at fredhutch.org>>
> >         @William Dunlap
> >          > <mailto:wdunlap at tibco.com <mailto:wdunlap at tibco.com>> is ""
> >         what you envision as thee desired and
> >          > useful behavior there?
> >          >
> >          > Best,
> >          > ~G
> >          >
> >          >
> >          >
> >          >     I have not yet my mind up but would tend to agree to "you
> >         guys",
> >          >     but I think that other R Core members should chime in,
> too.
> >          >
> >          >     Martin
> >          >
> >          >          >> On Fri, May 15, 2020 at 11:05 AM Herv? Pag?s
> >          >     <hpages at fredhutch.org <mailto:hpages at fredhutch.org>
> >         <mailto:hpages at fredhutch.org <mailto:hpages at fredhutch.org>>
> >          >          >> <mailto:hpages at fredhutch.org
> >         <mailto:hpages at fredhutch.org> <mailto:hpages at fredhutch.org
> >         <mailto:hpages at fredhutch.org>>>>
> >          >     wrote:
> >          >          >>
> >          >          >> Totally agree with that.
> >          >          >>
> >          >          >> H.
> >          >          >>
> >          >          >> On 5/15/20 10:34, William Dunlap via R-devel
> wrote:
> >          >          >> > I agree: paste(collapse="something", ...)
> >         should always
> >          >     return a
> >          >          >> single
> >          >          >> > character string, regardless of the value of
> >         recycle0.
> >          >     This would be
> >          >          >> > similar to when there are no non-NULL arguments
> >         to paste;
> >          >          >> collapse="."
> >          >          >> > gives a single empty string and collapse=NULL
> >         gives a zero
> >          >     long
> >          >          >> character
> >          >          >> > vector.
> >          >          >> >> paste()
> >          >          >> > character(0)
> >          >          >> >> paste(collapse=", ")
> >          >          >> > [1] ""
> >          >          >> >
> >          >          >> > Bill Dunlap
> >          >          >> > TIBCO Software
> >          >          >> > wdunlap tibco.com
> >         <
> https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=Z1o-HO3_OqxOR9LaRguGvnG7X4vF_z1_q13I7zmjcfY&s=7ZT1IjmexPqsDBhrV3NspPTr8M8XiMweEwJWErgAlqw&e=
> >
> >          >
> >           <
> https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=o9ozvxBK-kVvAUFro7U1RrI5w0U8EPb0uyjQwMvOpt8&e=
> >
> >          >          >>
> >          >
> >           <
> https://urldefense.proofpoint.com/v2/url?u=http-3A__tibco.com&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=rXIwWqf4U4HZS_bjUT3KfA9ARaV5YTb_kEcXWHnkt-c&e=
> >
> >          >          >> >
> >          >          >> >
> >          >          >> > On Thu, Apr 30, 2020 at 9:56 PM
> >         suharto_anggono--- via
> >          >     R-devel <
> >          >          >> > r-devel at r-project.org
> >         <mailto:r-devel at r-project.org> <mailto:r-devel at r-project.org
> >         <mailto:r-devel at r-project.org>>
> >          >     <mailto:r-devel at r-project.org
> >         <mailto:r-devel at r-project.org> <mailto:r-devel at r-project.org
> >         <mailto:r-devel at r-project.org>>>> wrote:
> >          >          >> >
> >          >          >> >> Without 'collapse', 'paste' pastes
> >         (concatenates) its
> >          >     arguments
> >          >          >> >> elementwise (separated by 'sep', " " by
> >         default). New in
> >          >     R devel
> >          >          >> and R
> >          >          >> >> patched, specifying recycle0 = FALSE makes
> mixing
> >          >     zero-length and
> >          >          >> >> nonzero-length arguments results in length
> >         zero. The
> >          >     result of
> >          >          >> paste(n,
> >          >          >> >> "th", sep = "", recycle0 = FALSE) always have
> >         the same
> >          >     length as
> >          >          >> 'n'.
> >          >          >> >> Previously, the result is still as long as the
> >         longest
> >          >     argument,
> >          >          >> with the
> >          >          >> >> zero-length argument like "". If all og the
> >         arguments have
> >          >          >> length zero,
> >          >          >> >> 'recycle0' doesn't matter.
> >          >          >> >>
> >          >          >> >> As far as I understand, 'paste' with
> >         'collapse' as a
> >          >     character
> >          >          >> string is
> >          >          >> >> supposed to put together elements of a vector
> >         into a single
> >          >          >> character
> >          >          >> >> string. I think 'recycle0' shouldn't change it.
> >          >          >> >>
> >          >          >> >> In current R devel and R patched,
> >         paste(character(0),
> >          >     collapse = "",
> >          >          >> >> recycle0 = FALSE) is character(0). I think it
> >         should be
> >          >     "", like
> >          >          >> >> paste(character(0), collapse="").
> >          >          >> >>
> >          >          >> >> paste(c("4", "5"), "th", sep = "", collapse =
> >         ", ",
> >          >     recycle0 =
> >          >          >> FALSE)
> >          >          >> >> is
> >          >          >> >> "4th, 5th".
> >          >          >> >> paste(c("4"     ), "th", sep = "", collapse =
> >         ", ",
> >          >     recycle0 =
> >          >          >> FALSE)
> >          >          >> >> is
> >          >          >> >> "4th".
> >          >          >> >> I think
> >          >          >> >> paste(c(        ), "th", sep = "", collapse =
> >         ", ",
> >          >     recycle0 =
> >          >          >> FALSE)
> >          >          >> >> should be
> >          >          >> >> "",
> >          >          >> >> not character(0).
> >          >          >> >>
> >          >          >> >> ______________________________________________
> >          >          >> >> R-devel at r-project.org
> >         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
> >         <mailto:R-devel at r-project.org>>
> >          >     <mailto:R-devel at r-project.org
> >         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
> >         <mailto:R-devel at r-project.org>>>
> >          >     mailing list
> >          >          >> >>
> >          >          >>
> >          >
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
> >          >          >> >>
> >          >          >> >
> >          >          >> >       [[alternative HTML version deleted]]
> >          >          >> >
> >          >          >> > ______________________________________________
> >          >          >> > R-devel at r-project.org
> >         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
> >         <mailto:R-devel at r-project.org>>
> >          >     <mailto:R-devel at r-project.org
> >         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
> >         <mailto:R-devel at r-project.org>>>
> >          >     mailing list
> >          >          >> >
> >          >          >>
> >          >
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=776IovW06eUHr1EDrabHLY7F47rU9CCUEItSDI96zc0&s=xN84DhkZeoxzn6SG0QTMpOGg2w_ThmjZmZymGUuD0Uw&e=
> >          >          >> >
> >          >          >>
> >          >          >> --
> >          >          >> Herv? Pag?s
> >          >          >>
> >          >          >> Program in Computational Biology
> >          >          >> Division of Public Health Sciences
> >          >          >> Fred Hutchinson Cancer Research Center
> >          >          >> 1100 Fairview Ave. N, M1-B514
> >          >          >> P.O. Box 19024
> >          >          >> Seattle, WA 98109-1024
> >          >          >>
> >          >          >> E-mail: hpages at fredhutch.org
> >         <mailto:hpages at fredhutch.org> <mailto:hpages at fredhutch.org
> >         <mailto:hpages at fredhutch.org>>
> >          >     <mailto:hpages at fredhutch.org
> >         <mailto:hpages at fredhutch.org> <mailto:hpages at fredhutch.org
> >         <mailto:hpages at fredhutch.org>>>
> >          >          >> Phone:  (206) 667-5791
> >          >          >> Fax:    (206) 667-1319
> >          >          >>
> >          >          >> ______________________________________________
> >          >          >> R-devel at r-project.org
> >         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
> >         <mailto:R-devel at r-project.org>>
> >          >     <mailto:R-devel at r-project.org
> >         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
> >         <mailto:R-devel at r-project.org>>>
> >          >     mailing list
> >          >          >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >         <
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=Z1o-HO3_OqxOR9LaRguGvnG7X4vF_z1_q13I7zmjcfY&s=CDOaP2RJnAyhpbHe6-O752uc4IPMugypbcgdYzhoF_8&e=
> >
> >          >
> >           <
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=OLA7CqaU5uKeid1aGw41XJ_2Uq7JXbcwpPOrTWWG2v4&e=
> >
> >          >          >>
> >          >
> >           <
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=cC2qctlVXd0qHMPvCyYvuVMqR8GU3DjTTqKJ0zjIFj8&s=COnDeGgHNnHJlLLZOznMlhcaFU1nIRlkaSbssvlrMvw&e=
> >
> >          >          >>
> >          >
> >          >          > --
> >          >          > Herv? Pag?s
> >          >
> >          >          > Program in Computational Biology
> >          >          > Division of Public Health Sciences
> >          >          > Fred Hutchinson Cancer Research Center
> >          >          > 1100 Fairview Ave. N, M1-B514
> >          >          > P.O. Box 19024
> >          >          > Seattle, WA 98109-1024
> >          >
> >          >          > E-mail: hpages at fredhutch.org
> >         <mailto:hpages at fredhutch.org> <mailto:hpages at fredhutch.org
> >         <mailto:hpages at fredhutch.org>>
> >          >          > Phone:  (206) 667-5791
> >          >          > Fax:    (206) 667-1319
> >          >
> >          >          > ______________________________________________
> >          >          > R-devel at r-project.org
> >         <mailto:R-devel at r-project.org> <mailto:R-devel at r-project.org
> >         <mailto:R-devel at r-project.org>> mailing list
> >          >          > https://stat.ethz.ch/mailman/listinfo/r-devel
> >         <
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=Z1o-HO3_OqxOR9LaRguGvnG7X4vF_z1_q13I7zmjcfY&s=CDOaP2RJnAyhpbHe6-O752uc4IPMugypbcgdYzhoF_8&e=
> >
> >          >
> >           <
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwMFaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=q5ueyHReS5hHK6TZ0dJ1N7Ro8dx-rsLHys8GrCugOls&s=OLA7CqaU5uKeid1aGw41XJ_2Uq7JXbcwpPOrTWWG2v4&e=
> >
> >          >
> >
> >         --
> >         Herv? Pag?s
> >
> >         Program in Computational Biology
> >         Division of Public Health Sciences
> >         Fred Hutchinson Cancer Research Center
> >         1100 Fairview Ave. N, M1-B514
> >         P.O. Box 19024
> >         Seattle, WA 98109-1024
> >
> >         E-mail: hpages at fredhutch.org <mailto:hpages at fredhutch.org>
> >         Phone:  (206) 667-5791
> >         Fax:    (206) 667-1319
> >
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Sun May 24 02:48:14 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sat, 23 May 2020 17:48:14 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <713381417.133312.1590196369208@mail.yahoo.com>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
 <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
 <713381417.133312.1590196369208@mail.yahoo.com>
Message-ID: <CAD4oTHE77cK+bw1V+X1bNY6g8Gu83PUjFk-X47wQHaz=g5gCVg@mail.gmail.com>

Brodie,

A good point, but more analogous to what I'm concerned with is

> sum(5, numeric(0))

[1] 5


Not 0 (the analogu of Herve's desired behavior).

Best,
~G

PS Brodie sorry for the double.

On Fri, May 22, 2020 at 6:12 PM brodie gaslam <brodie.gaslam at yahoo.com>
wrote:

> > On Friday, May 22, 2020, 6:16:45 PM EDT, Herv? Pag?s <
> hpages at fredhutch.org> wrote:
> >
> > Gabe,
> >
> > It's the current behavior of paste() that is a major source of bugs:
> >
> >   ## Add "rs" prefix to SNP ids and collapse them in a
> >   ## comma-separated string.
> >   collapse_snp_ids <- function(snp_ids)
> >       paste("rs", snp_ids, sep="", collapse=",")
> >
> >   snp_groups <- list(
> >     group1=c(55, 22, 200),
> >     group2=integer(0),
> >     group3=c(99, 550)
> >   )
> >
> >   vapply(snp_groups, collapse_snp_ids, character(1))
> >   #            group1            group2            group3
> >   # "rs55,rs22,rs200"              "rs"      "rs99,rs550"
> >
> > This has hit me so many times!
> >
> > Now with 'collapse0=TRUE', we finally have the opportunity to make it do
> > the right thing. Let's not miss that opportunity.
> >
> > Cheers,
> > H.
>
> FWIW what convinces me is consistency with other aggregating functions
> applied
> to zero length inputs:
>
> sum(numeric(0))
> ## [1] 0
>
> >
> >
> > On 5/22/20 11:26, Gabriel Becker wrote:
> > > I understand that this is consistent but it also strikes me as an
> > > enormous 'gotcha' of a magnitude that 'we' are trying to avoid/smooth
> > > over at this point in user-facing R space.
> > >
> > > For the record I'm not suggesting it should return something other than
> > > "", and in particular I'm not arguing that any call to paste /that does
> > > not return an error/ with non-NULL collapse should return a character
> > > vector of length one.
>

	[[alternative HTML version deleted]]


From irederik m@iii@g oii oib@@et  Sun May 24 06:43:55 2020
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Sat, 23 May 2020 21:43:55 -0700
Subject: [Rd] writeBin and short writes
Message-ID: <20200524044355.GB6262@localhost>

Dear R-devel,

I'm curious why writeBin should always return NULL. Would anyone's code break if we made it return the number of bytes written? I'm not sure how else I'm supposed to use writeBin on a writable connection in non-blocking mode...

See attached.

Thank you,

Frederick

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: 0001-Return-number-of-bytes-written.patch
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200523/11cb35f1/attachment.ksh>

From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Sun May 24 06:50:16 2020
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Sun, 24 May 2020 10:20:16 +0530
Subject: [Rd] 
 Surpising behavior when using an active binding as loop index
 in R 4.0.0
In-Reply-To: <20200523140726.7dae7c49@booklife>
References: <20200523131924.1bfbdd0a@booklife>
 <20200523140726.7dae7c49@booklife>
Message-ID: <CADfFDC7GnFymaOm=DWVgxdvobcaXDf-4_i-ZdF+RZWAAuvL5Sg@mail.gmail.com>

A shorter reproducible example:

example(makeActiveBinding)
for (fred in 1:3) { 0 }
ls()

Both problems go away if you first do

compiler::enableJIT(2)

So looks like a bug in compiling the for loop.

-Deepayan

On Sat, May 23, 2020 at 5:45 PM Thomas Friedrichsmeier via R-devel
<r-devel at r-project.org> wrote:
>
> Possibly just a symptom of the earlier behavior, but I'll amend my
> example, below, with an even more disturbing observation:
>
> Am Sat, 23 May 2020 13:19:24 +0200
> schrieb Thomas Friedrichsmeier via R-devel <r-devel at r-project.org>:
> [...]
> > Consider the code below:
> >
> > makeActiveBinding("i",
> >       function(value) {
> >               if (missing(value)) {
> >                       x
> >       } else {
> >               print("set")
> >               x <<- value
> >       }
> >       }, globalenv())
> >
> > i <- 1     # output "set"
> > print(i)   # output [1] 1
> >
> > # Surprising behavior starts here:
> > for(i in 2:3) print(i) # output [1] "set"
> >                        #        NULL
> >                        #        NULL
> >
> > print(i)               # output NULL
> > print(x)               # output NULL
> >
> > i <- 4                 # output "set"
> > print(i)               # ouput [1] 4
> > print(x)               # ouput [1] 4
>
> ls()
> # Error in ls() :
> #  Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'
>
> Regards
> Thomas
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hp@ge@ @end|ng |rom |redhutch@org  Sun May 24 06:59:30 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Sat, 23 May 2020 21:59:30 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <CAD4oTHGa4Ny=HS-Vq68P4arawhM0zefhEuKe2EvystnRHkWxTQ@mail.gmail.com>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
 <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
 <CAD4oTHGa4Ny=HS-Vq68P4arawhM0zefhEuKe2EvystnRHkWxTQ@mail.gmail.com>
Message-ID: <c78cfd63-f5c2-e5d1-c659-d9525d545d68@fredhutch.org>

On 5/23/20 17:45, Gabriel Becker wrote:
> Maybe my intuition is just 
> different?but when I collapse multiple character vectors together, I 
> expect?all the characters from each of those vectors to be in the 
> resulting collapsed one.

Yes I'd expect that too. But the **collapse** operation in paste() has 
never been about collapsing **multiple** character vectors together. 
What it does is collapse the **single** character vector that comes out 
of the 'sep' operation.

So

   paste(x, y, z, sep="", collapse=",")

is analogous to

   sum(x + y + z)

The element-wise addition is analog to the 'sep' operation.
The sum() operation is analog to the 'collapse' operation.

H.


From g@bembecker @end|ng |rom gm@||@com  Sun May 24 09:26:37 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sun, 24 May 2020 00:26:37 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <c78cfd63-f5c2-e5d1-c659-d9525d545d68@fredhutch.org>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
 <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
 <CAD4oTHGa4Ny=HS-Vq68P4arawhM0zefhEuKe2EvystnRHkWxTQ@mail.gmail.com>
 <c78cfd63-f5c2-e5d1-c659-d9525d545d68@fredhutch.org>
Message-ID: <CAD4oTHFLPS9DcAc_z0tYp7kn2Sq7SmiYTGwo_9Q+m2WJ6nu4mg@mail.gmail.com>

On Sat, May 23, 2020 at 9:59 PM Herv? Pag?s <hpages at fredhutch.org> wrote:

> On 5/23/20 17:45, Gabriel Becker wrote:
> > Maybe my intuition is just
> > different but when I collapse multiple character vectors together, I
> > expect all the characters from each of those vectors to be in the
> > resulting collapsed one.
>
> Yes I'd expect that too. But the **collapse** operation in paste() has
> never been about collapsing **multiple** character vectors together.
> What it does is collapse the **single** character vector that comes out
> of the 'sep' operation.
>

I understand what it does, I broke ti down the same way in my post earlier
in the thread. the fact remains is that it is a single function which
significantly muddies the waters. so you can say

paste0(x,y, collapse=",", recycle0=TRUE)

is not a collapse operation on multiple vectors, and of course there's a
sense in which you're not wrong (again I understand what these functions
do), but it sure looks like one in the invocation, doesn't it?

Honestly the thing that this whole discussion has shown me most clearly is
that, imho, collapse (accepting ONLY one data vector) and paste(accepting
multiple) should never have been a single function to begin with.  But that
ship sailed long long ago.




> So
>
>    paste(x, y, z, sep="", collapse=",")
>
> is analogous to
>
>    sum(x + y + z)
>

Honestly, I'd be significantly more comfortable if

1:10 + integer(0) + 5

were an error too.

At least I'm consistent right?

~G

	[[alternative HTML version deleted]]


From pd@me@ @end|ng |rom cb@@dk  Sun May 24 12:17:10 2020
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Sun, 24 May 2020 10:17:10 +0000
Subject: [Rd] R 4.0.1 scheduled for June 6
Message-ID: <1E4C01BD-8D42-4398-B893-B5C7547873EA@cbs.dk>

Full schedule is available on developer.r-project.org.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Sun May 24 17:05:00 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sun, 24 May 2020 10:05:00 -0500 (CDT)
Subject: [Rd] 
 [External] Re: Surpising behavior when using an active binding
 as loop index in R 4.0.0
In-Reply-To: <CADfFDC7GnFymaOm=DWVgxdvobcaXDf-4_i-ZdF+RZWAAuvL5Sg@mail.gmail.com>
References: <20200523131924.1bfbdd0a@booklife>
 <20200523140726.7dae7c49@booklife>
 <CADfFDC7GnFymaOm=DWVgxdvobcaXDf-4_i-ZdF+RZWAAuvL5Sg@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2005241003210.3164@luke-Latitude-7480>

On Sun, 24 May 2020, Deepayan Sarkar wrote:

> A shorter reproducible example:
>
> example(makeActiveBinding)
> for (fred in 1:3) { 0 }
> ls()
>
> Both problems go away if you first do
>
> compiler::enableJIT(2)
>
> So looks like a bug in compiling the for loop.

Not in compiling but in the byte code interpreter. It was not handling
active bindings for the loop variable properly. This was fixed
yesterday in R--devel and R-patched, so will be fixed in R 4.0.1.

Best,

luke

>
> -Deepayan
>
> On Sat, May 23, 2020 at 5:45 PM Thomas Friedrichsmeier via R-devel
> <r-devel at r-project.org> wrote:
>>
>> Possibly just a symptom of the earlier behavior, but I'll amend my
>> example, below, with an even more disturbing observation:
>>
>> Am Sat, 23 May 2020 13:19:24 +0200
>> schrieb Thomas Friedrichsmeier via R-devel <r-devel at r-project.org>:
>> [...]
>>> Consider the code below:
>>>
>>> makeActiveBinding("i",
>>>       function(value) {
>>>               if (missing(value)) {
>>>                       x
>>>       } else {
>>>               print("set")
>>>               x <<- value
>>>       }
>>>       }, globalenv())
>>>
>>> i <- 1     # output "set"
>>> print(i)   # output [1] 1
>>>
>>> # Surprising behavior starts here:
>>> for(i in 2:3) print(i) # output [1] "set"
>>>                        #        NULL
>>>                        #        NULL
>>>
>>> print(i)               # output NULL
>>> print(x)               # output NULL
>>>
>>> i <- 4                 # output "set"
>>> print(i)               # ouput [1] 4
>>> print(x)               # ouput [1] 4
>>
>> ls()
>> # Error in ls() :
>> #  Value of SET_STRING_ELT() must be a 'CHARSXP' not a 'NULL'
>>
>> Regards
>> Thomas
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From hp@ge@ @end|ng |rom |redhutch@org  Sun May 24 23:22:37 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Sun, 24 May 2020 14:22:37 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <CAD4oTHFLPS9DcAc_z0tYp7kn2Sq7SmiYTGwo_9Q+m2WJ6nu4mg@mail.gmail.com>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
 <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
 <CAD4oTHGa4Ny=HS-Vq68P4arawhM0zefhEuKe2EvystnRHkWxTQ@mail.gmail.com>
 <c78cfd63-f5c2-e5d1-c659-d9525d545d68@fredhutch.org>
 <CAD4oTHFLPS9DcAc_z0tYp7kn2Sq7SmiYTGwo_9Q+m2WJ6nu4mg@mail.gmail.com>
Message-ID: <f39343f8-bca9-5204-e2a9-fb4a0f84a77b@fredhutch.org>

On 5/24/20 00:26, Gabriel Becker wrote:
> 
> 
> On Sat, May 23, 2020 at 9:59 PM Herv? Pag?s <hpages at fredhutch.org 
> <mailto:hpages at fredhutch.org>> wrote:
> 
>     On 5/23/20 17:45, Gabriel Becker wrote:
>      > Maybe my intuition is just
>      > different?but when I collapse multiple character vectors together, I
>      > expect?all the characters from each of those vectors to be in the
>      > resulting collapsed one.
> 
>     Yes I'd expect that too. But the **collapse** operation in paste() has
>     never been about collapsing **multiple** character vectors together.
>     What it does is collapse the **single** character vector that comes out
>     of the 'sep' operation.
> 
> 
> I understand what it does, I broke ti down the?same way in my post 
> earlier in?the thread. the fact remains?is that it is a single function 
> which significantly muddies the waters. so you can say
> 
>     paste0(x,y, collapse=",", recycle0=TRUE)
> 
> is not a collapse operation on multiple?vectors, and of course there's a 
> sense in which?you're not wrong (again I understand what these functions 
> do), but it sure looks like one in the invocation, doesn't it?
> 
> Honestly the thing that this whole discussion has shown me most clearly 
> is that, imho, collapse (accepting ONLY one data vector) and 
> paste(accepting multiple) should never have been a single function to 
> begin with.? But that ship sailed long long ago.

Yes :-(

> 
>     So
> 
>      ? ?paste(x, y, z, sep="", collapse=",")
> 
>     is analogous to
> 
>      ? ?sum(x + y + z)
> 
> 
> Honestly, I'd be significantly more comfortable?if
> 
>     1:10?+ integer(0)?+ 5
> 
> were an error too.

This is actually the recycling scheme used by mapply():

   > mapply(function(x, y, z) c(x, y, z), 1:10, integer(0), 5)
   Error in mapply(FUN = FUN, ...) :
     zero-length inputs cannot be mixed with those of non-zero length

AFAIK base R uses 3 different recycling schemes for n-ary operations:

(1) The recycling scheme used by arithmetic and comparison operations
     (Arith, Compare, Logic group generics).

(2) The recycling scheme used by classic paste().

(3) The recycling scheme used by mapply().

Having such a core mechanism like recycling being inconsistent across 
base R is sad. It makes it really hard to predict how a given n-ary 
function will recycle its arguments unless you spend some time trying it 
yourself with several combinations of vector lengths. It is of course 
the source of numerous latent bugs. I wish there was only one but that's 
just a dream.

None of these 3 recycling schemes is perfect. IMO (2) is by far the 
worst. (3) is too restrictive and would need to be refined if we wanted 
to make it a good universal recycling scheme.

Anyway I don't think it makes sense to introduce a 4th recycling scheme 
at this point even though it would be a nice item to put on the wish 
list for R 7.0.0 with the ultimate goal that it will universally adopted 
in R 11.0.0 ;-)

So if we have to do with what we have IMO (1) is the scheme that makes 
most sense although I agree that it can do some surprising things for 
some unusual combinations of vector lengths. It's the scheme I adhere to 
in my own binary operations e.g. in S4Vector::pcompare().

The modest proposal of the 'recycle0' argument is only to let the user 
switch from recycling scheme (2) to (1) if they're not happy with scheme 
(2) (I'm one of them). Switching to scheme (3) or to a new custom scheme 
would be a completely different proposal.

> 
> At least I'm consistent right?

Yes :-)

Anyway discussing recycling schemes is interesting but not directly 
related with what the OP brought up (behavior of the 'collapse' operation).

Cheers,
H.

> 
> ~G

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From kmbe||56 @end|ng |rom gm@||@com  Tue May 26 04:21:41 2020
From: kmbe||56 @end|ng |rom gm@||@com (Kenny Bell)
Date: Tue, 26 May 2020 14:21:41 +1200
Subject: [Rd] Plotmath on Fedora 31 broken with with pango >= 1.44 -
 workarounds?
In-Reply-To: <0b55c175340777786f3a2b0e8ce28d723507a9ac.camel@laposte.net>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
 <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>
 <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>
 <CAD4oTHEQ3Yq-4fqhv0VFscnFP32WzakqChN7NoyoVW8JZP3HYA@mail.gmail.com>
 <0b55c175340777786f3a2b0e8ce28d723507a9ac.camel@laposte.net>
Message-ID: <CAPekMCkH4=J3fZ5Dtc1Uj9gFF7zkiCEqsAf_uXEOrACoS-aayQ@mail.gmail.com>

Hi all,

I have found after upgrading to R 4.0.0 (among other upgrades so this may
not be the cause) that the degree symbol doesn't work correctly on Ubuntu
18.04. Googling brought me to this thread that appears related.

I tried running:
cairo_pdf()
plot.new(); text(0.5,0.5, bquote(120*degree*N), cex=5)
dev.off()

and the ubuntu plot has the degree symbol vertically in the center of the
line. The Windows one correctly shows as superscript.

Anyone else see this behaviour?

Cheers,
Kenny

On Fri, Apr 10, 2020 at 3:36 AM Nicolas Mailhot via R-devel <
r-devel at r-project.org> wrote:

> Le mercredi 08 avril 2020 ? 02:55 -0700, Gabriel Becker a ?crit :
> > Hi Paul,
>
> Hi Gabriel,
>
> Thanks a lot for the testing.
>
> > The various font family settings seem to work too, from what I can
> > tell. Both font families you suggested, however, Helvetica and Apple
> > Symbols (the s is important) have significantly incomplete coverage
> > with PUA on.
>
> That is to be expected, the AMS symbol dump in PUA space was a quick
> hack to make pre-unicode symbols available in an unicode world, pending
> their normalisation.
>
> That standardisation is long past (IIRC it occured by unicode 3.2
> released in March 2002), so no newly created/updated font family is
> going to place those symbols in PUA anymore.
>
> Now adding the AMS symbols to new fonts has been slow, due to the large
> amount of software hardcoding Symbol (and equivallent) and masking the
> actual glyph userbase to font makers. It will accelerate with more apps
> expecting plain unicode by default.
>
> Thanks for the testing!
>
> Regards,
>
> --
> Nicolas Mailhot
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: Rplot001_ubuntu.pdf
Type: application/pdf
Size: 6023 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200526/19bc9f41/attachment.pdf>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: Rplot001_windows.pdf
Type: application/pdf
Size: 13572 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200526/19bc9f41/attachment-0001.pdf>

From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Tue May 26 05:08:59 2020
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Tue, 26 May 2020 15:08:59 +1200
Subject: [Rd] 
 [FORGED] Re: Plotmath on Fedora 31 broken with with pango >=
 1.44 - workarounds?
In-Reply-To: <CAPekMCkH4=J3fZ5Dtc1Uj9gFF7zkiCEqsAf_uXEOrACoS-aayQ@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
 <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>
 <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>
 <CAD4oTHEQ3Yq-4fqhv0VFscnFP32WzakqChN7NoyoVW8JZP3HYA@mail.gmail.com>
 <0b55c175340777786f3a2b0e8ce28d723507a9ac.camel@laposte.net>
 <CAPekMCkH4=J3fZ5Dtc1Uj9gFF7zkiCEqsAf_uXEOrACoS-aayQ@mail.gmail.com>
Message-ID: <70173300-12cb-fc11-f374-acdc491bbde3@stat.auckland.ac.nz>


I am not seeing that problem on my 18.04 ...

 > sessionInfo()
R version 4.0.0 Patched (2020-05-12 r78431)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.4 LTS

Matrix products: default
BLAS:   /home/pmur002/R/R-4-0-branch/BUILD/lib/libRblas.so
LAPACK: /home/pmur002/R/R-4-0-branch/BUILD/lib/libRlapack.so

locale:
  [1] LC_CTYPE=en_NZ.UTF-8       LC_NUMERIC=C
  [3] LC_TIME=en_NZ.UTF-8        LC_COLLATE=en_NZ.UTF-8
  [5] LC_MONETARY=en_NZ.UTF-8    LC_MESSAGES=en_NZ.UTF-8
  [7] LC_PAPER=en_NZ.UTF-8       LC_NAME=C
  [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_NZ.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.0.0

Paul

On 26/05/20 2:21 pm, Kenny Bell wrote:
> Hi all,
> 
> I have found after upgrading to R 4.0.0 (among other upgrades so this may
> not be the cause) that the degree symbol doesn't work correctly on Ubuntu
> 18.04. Googling brought me to this thread that appears related.
> 
> I tried running:
> cairo_pdf()
> plot.new(); text(0.5,0.5, bquote(120*degree*N), cex=5)
> dev.off()
> 
> and the ubuntu plot has the degree symbol vertically in the center of the
> line. The Windows one correctly shows as superscript.
> 
> Anyone else see this behaviour?
> 
> Cheers,
> Kenny
> 
> On Fri, Apr 10, 2020 at 3:36 AM Nicolas Mailhot via R-devel <
> r-devel at r-project.org> wrote:
> 
>> Le mercredi 08 avril 2020 ? 02:55 -0700, Gabriel Becker a ?crit :
>>> Hi Paul,
>>
>> Hi Gabriel,
>>
>> Thanks a lot for the testing.
>>
>>> The various font family settings seem to work too, from what I can
>>> tell. Both font families you suggested, however, Helvetica and Apple
>>> Symbols (the s is important) have significantly incomplete coverage
>>> with PUA on.
>>
>> That is to be expected, the AMS symbol dump in PUA space was a quick
>> hack to make pre-unicode symbols available in an unicode world, pending
>> their normalisation.
>>
>> That standardisation is long past (IIRC it occured by unicode 3.2
>> released in March 2002), so no newly created/updated font family is
>> going to place those symbols in PUA anymore.
>>
>> Now adding the AMS symbols to new fonts has been slow, due to the large
>> amount of software hardcoding Symbol (and equivallent) and masking the
>> actual glyph userbase to font makers. It will accelerate with more apps
>> expecting plain unicode by default.
>>
>> Thanks for the testing!
>>
>> Regards,
>>
>> --
>> Nicolas Mailhot
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Dr Paul Murrell
Department of Statistics
The University of Auckland
Private Bag 92019
Auckland
New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
http://www.stat.auckland.ac.nz/~paul/


From kmbe||56 @end|ng |rom gm@||@com  Tue May 26 06:36:07 2020
From: kmbe||56 @end|ng |rom gm@||@com (Kenny Bell)
Date: Tue, 26 May 2020 16:36:07 +1200
Subject: [Rd] 
 [FORGED] Re: Plotmath on Fedora 31 broken with with pango >=
 1.44 - workarounds?
In-Reply-To: <70173300-12cb-fc11-f374-acdc491bbde3@stat.auckland.ac.nz>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
 <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>
 <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>
 <CAD4oTHEQ3Yq-4fqhv0VFscnFP32WzakqChN7NoyoVW8JZP3HYA@mail.gmail.com>
 <0b55c175340777786f3a2b0e8ce28d723507a9ac.camel@laposte.net>
 <CAPekMCkH4=J3fZ5Dtc1Uj9gFF7zkiCEqsAf_uXEOrACoS-aayQ@mail.gmail.com>
 <70173300-12cb-fc11-f374-acdc491bbde3@stat.auckland.ac.nz>
Message-ID: <CAPekMC=NRYmKcuvCWfNV9Ba54XzMEEy_FNi7YLy_ATw7nSjXdw@mail.gmail.com>

Hi Paul,

I tried downgrading to R 3.4.4 and I still see the problem. I also have a
conda environment that doesn't exhibit the problem so it's something
environmental.

Any tips for possible solutions/troubleshooting would be appreciated!

Cheers,
Kenny

On Tue, May 26, 2020 at 3:09 PM Paul Murrell <paul at stat.auckland.ac.nz>
wrote:

>
> I am not seeing that problem on my 18.04 ...
>
>  > sessionInfo()
> R version 4.0.0 Patched (2020-05-12 r78431)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 18.04.4 LTS
>
> Matrix products: default
> BLAS:   /home/pmur002/R/R-4-0-branch/BUILD/lib/libRblas.so
> LAPACK: /home/pmur002/R/R-4-0-branch/BUILD/lib/libRlapack.so
>
> locale:
>   [1] LC_CTYPE=en_NZ.UTF-8       LC_NUMERIC=C
>   [3] LC_TIME=en_NZ.UTF-8        LC_COLLATE=en_NZ.UTF-8
>   [5] LC_MONETARY=en_NZ.UTF-8    LC_MESSAGES=en_NZ.UTF-8
>   [7] LC_PAPER=en_NZ.UTF-8       LC_NAME=C
>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_NZ.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.0.0
>
> Paul
>
> On 26/05/20 2:21 pm, Kenny Bell wrote:
> > Hi all,
> >
> > I have found after upgrading to R 4.0.0 (among other upgrades so this may
> > not be the cause) that the degree symbol doesn't work correctly on Ubuntu
> > 18.04. Googling brought me to this thread that appears related.
> >
> > I tried running:
> > cairo_pdf()
> > plot.new(); text(0.5,0.5, bquote(120*degree*N), cex=5)
> > dev.off()
> >
> > and the ubuntu plot has the degree symbol vertically in the center of the
> > line. The Windows one correctly shows as superscript.
> >
> > Anyone else see this behaviour?
> >
> > Cheers,
> > Kenny
> >
> > On Fri, Apr 10, 2020 at 3:36 AM Nicolas Mailhot via R-devel <
> > r-devel at r-project.org> wrote:
> >
> >> Le mercredi 08 avril 2020 ? 02:55 -0700, Gabriel Becker a ?crit :
> >>> Hi Paul,
> >>
> >> Hi Gabriel,
> >>
> >> Thanks a lot for the testing.
> >>
> >>> The various font family settings seem to work too, from what I can
> >>> tell. Both font families you suggested, however, Helvetica and Apple
> >>> Symbols (the s is important) have significantly incomplete coverage
> >>> with PUA on.
> >>
> >> That is to be expected, the AMS symbol dump in PUA space was a quick
> >> hack to make pre-unicode symbols available in an unicode world, pending
> >> their normalisation.
> >>
> >> That standardisation is long past (IIRC it occured by unicode 3.2
> >> released in March 2002), so no newly created/updated font family is
> >> going to place those symbols in PUA anymore.
> >>
> >> Now adding the AMS symbols to new fonts has been slow, due to the large
> >> amount of software hardcoding Symbol (and equivallent) and masking the
> >> actual glyph userbase to font makers. It will accelerate with more apps
> >> expecting plain unicode by default.
> >>
> >> Thanks for the testing!
> >>
> >> Regards,
> >>
> >> --
> >> Nicolas Mailhot
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Dr Paul Murrell
> Department of Statistics
> The University of Auckland
> Private Bag 92019
> Auckland
> New Zealand
> 64 9 3737599 x85392
> paul at stat.auckland.ac.nz
> http://www.stat.auckland.ac.nz/~paul/
>

	[[alternative HTML version deleted]]


From kmbe||56 @end|ng |rom gm@||@com  Tue May 26 07:05:45 2020
From: kmbe||56 @end|ng |rom gm@||@com (Kenny Bell)
Date: Tue, 26 May 2020 17:05:45 +1200
Subject: [Rd] 
 [FORGED] Re: Plotmath on Fedora 31 broken with with pango >=
 1.44 - workarounds?
In-Reply-To: <CAPekMC=NRYmKcuvCWfNV9Ba54XzMEEy_FNi7YLy_ATw7nSjXdw@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
 <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>
 <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>
 <CAD4oTHEQ3Yq-4fqhv0VFscnFP32WzakqChN7NoyoVW8JZP3HYA@mail.gmail.com>
 <0b55c175340777786f3a2b0e8ce28d723507a9ac.camel@laposte.net>
 <CAPekMCkH4=J3fZ5Dtc1Uj9gFF7zkiCEqsAf_uXEOrACoS-aayQ@mail.gmail.com>
 <70173300-12cb-fc11-f374-acdc491bbde3@stat.auckland.ac.nz>
 <CAPekMC=NRYmKcuvCWfNV9Ba54XzMEEy_FNi7YLy_ATw7nSjXdw@mail.gmail.com>
Message-ID: <CAPekMC=8aaUrLK34szQJDvHV5NGMhGGmccjYCwt5zfS4CuMDUQ@mail.gmail.com>

I was actually able to reproduce this on a relatively fresh install of
18.04 (a virtualbox). Paul, did you run apt update && apt upgrade before
trying to reproduce?

On Tue, May 26, 2020 at 4:36 PM Kenny Bell <kmbell56 at gmail.com> wrote:

> Hi Paul,
>
> I tried downgrading to R 3.4.4 and I still see the problem. I also have a
> conda environment that doesn't exhibit the problem so it's something
> environmental.
>
> Any tips for possible solutions/troubleshooting would be appreciated!
>
> Cheers,
> Kenny
>
> On Tue, May 26, 2020 at 3:09 PM Paul Murrell <paul at stat.auckland.ac.nz>
> wrote:
>
>>
>> I am not seeing that problem on my 18.04 ...
>>
>>  > sessionInfo()
>> R version 4.0.0 Patched (2020-05-12 r78431)
>> Platform: x86_64-pc-linux-gnu (64-bit)
>> Running under: Ubuntu 18.04.4 LTS
>>
>> Matrix products: default
>> BLAS:   /home/pmur002/R/R-4-0-branch/BUILD/lib/libRblas.so
>> LAPACK: /home/pmur002/R/R-4-0-branch/BUILD/lib/libRlapack.so
>>
>> locale:
>>   [1] LC_CTYPE=en_NZ.UTF-8       LC_NUMERIC=C
>>   [3] LC_TIME=en_NZ.UTF-8        LC_COLLATE=en_NZ.UTF-8
>>   [5] LC_MONETARY=en_NZ.UTF-8    LC_MESSAGES=en_NZ.UTF-8
>>   [7] LC_PAPER=en_NZ.UTF-8       LC_NAME=C
>>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
>> [11] LC_MEASUREMENT=en_NZ.UTF-8 LC_IDENTIFICATION=C
>>
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>
>> loaded via a namespace (and not attached):
>> [1] compiler_4.0.0
>>
>> Paul
>>
>> On 26/05/20 2:21 pm, Kenny Bell wrote:
>> > Hi all,
>> >
>> > I have found after upgrading to R 4.0.0 (among other upgrades so this
>> may
>> > not be the cause) that the degree symbol doesn't work correctly on
>> Ubuntu
>> > 18.04. Googling brought me to this thread that appears related.
>> >
>> > I tried running:
>> > cairo_pdf()
>> > plot.new(); text(0.5,0.5, bquote(120*degree*N), cex=5)
>> > dev.off()
>> >
>> > and the ubuntu plot has the degree symbol vertically in the center of
>> the
>> > line. The Windows one correctly shows as superscript.
>> >
>> > Anyone else see this behaviour?
>> >
>> > Cheers,
>> > Kenny
>> >
>> > On Fri, Apr 10, 2020 at 3:36 AM Nicolas Mailhot via R-devel <
>> > r-devel at r-project.org> wrote:
>> >
>> >> Le mercredi 08 avril 2020 ? 02:55 -0700, Gabriel Becker a ?crit :
>> >>> Hi Paul,
>> >>
>> >> Hi Gabriel,
>> >>
>> >> Thanks a lot for the testing.
>> >>
>> >>> The various font family settings seem to work too, from what I can
>> >>> tell. Both font families you suggested, however, Helvetica and Apple
>> >>> Symbols (the s is important) have significantly incomplete coverage
>> >>> with PUA on.
>> >>
>> >> That is to be expected, the AMS symbol dump in PUA space was a quick
>> >> hack to make pre-unicode symbols available in an unicode world, pending
>> >> their normalisation.
>> >>
>> >> That standardisation is long past (IIRC it occured by unicode 3.2
>> >> released in March 2002), so no newly created/updated font family is
>> >> going to place those symbols in PUA anymore.
>> >>
>> >> Now adding the AMS symbols to new fonts has been slow, due to the large
>> >> amount of software hardcoding Symbol (and equivallent) and masking the
>> >> actual glyph userbase to font makers. It will accelerate with more apps
>> >> expecting plain unicode by default.
>> >>
>> >> Thanks for the testing!
>> >>
>> >> Regards,
>> >>
>> >> --
>> >> Nicolas Mailhot
>> >>
>> >> ______________________________________________
>> >> R-devel at r-project.org mailing list
>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>> >>
>> >>
>> >> ______________________________________________
>> >> R-devel at r-project.org mailing list
>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> --
>> Dr Paul Murrell
>> Department of Statistics
>> The University of Auckland
>> Private Bag 92019
>> Auckland
>> New Zealand
>> 64 9 3737599 x85392
>> paul at stat.auckland.ac.nz
>> http://www.stat.auckland.ac.nz/~paul/
>>
>

	[[alternative HTML version deleted]]


From kmbe||56 @end|ng |rom gm@||@com  Tue May 26 07:38:30 2020
From: kmbe||56 @end|ng |rom gm@||@com (Kenny Bell)
Date: Tue, 26 May 2020 17:38:30 +1200
Subject: [Rd] 
 [FORGED] Re: Plotmath on Fedora 31 broken with with pango >=
 1.44 - workarounds?
In-Reply-To: <CAPekMC=8aaUrLK34szQJDvHV5NGMhGGmccjYCwt5zfS4CuMDUQ@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
 <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>
 <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>
 <CAD4oTHEQ3Yq-4fqhv0VFscnFP32WzakqChN7NoyoVW8JZP3HYA@mail.gmail.com>
 <0b55c175340777786f3a2b0e8ce28d723507a9ac.camel@laposte.net>
 <CAPekMCkH4=J3fZ5Dtc1Uj9gFF7zkiCEqsAf_uXEOrACoS-aayQ@mail.gmail.com>
 <70173300-12cb-fc11-f374-acdc491bbde3@stat.auckland.ac.nz>
 <CAPekMC=NRYmKcuvCWfNV9Ba54XzMEEy_FNi7YLy_ATw7nSjXdw@mail.gmail.com>
 <CAPekMC=8aaUrLK34szQJDvHV5NGMhGGmccjYCwt5zfS4CuMDUQ@mail.gmail.com>
Message-ID: <CAPekMCnXKJ4rg-10ANbVegj5V=WNt_jcQzEgQ4-OJq3r0r+O8Q@mail.gmail.com>

I can also confirm that the latest  https://hub.docker.com/_/r-base has the
correct behaviour.

On Tue, May 26, 2020 at 5:05 PM Kenny Bell <kmbell56 at gmail.com> wrote:

> I was actually able to reproduce this on a relatively fresh install of
> 18.04 (a virtualbox). Paul, did you run apt update && apt upgrade before
> trying to reproduce?
>
> On Tue, May 26, 2020 at 4:36 PM Kenny Bell <kmbell56 at gmail.com> wrote:
>
>> Hi Paul,
>>
>> I tried downgrading to R 3.4.4 and I still see the problem. I also have a
>> conda environment that doesn't exhibit the problem so it's something
>> environmental.
>>
>> Any tips for possible solutions/troubleshooting would be appreciated!
>>
>> Cheers,
>> Kenny
>>
>> On Tue, May 26, 2020 at 3:09 PM Paul Murrell <paul at stat.auckland.ac.nz>
>> wrote:
>>
>>>
>>> I am not seeing that problem on my 18.04 ...
>>>
>>>  > sessionInfo()
>>> R version 4.0.0 Patched (2020-05-12 r78431)
>>> Platform: x86_64-pc-linux-gnu (64-bit)
>>> Running under: Ubuntu 18.04.4 LTS
>>>
>>> Matrix products: default
>>> BLAS:   /home/pmur002/R/R-4-0-branch/BUILD/lib/libRblas.so
>>> LAPACK: /home/pmur002/R/R-4-0-branch/BUILD/lib/libRlapack.so
>>>
>>> locale:
>>>   [1] LC_CTYPE=en_NZ.UTF-8       LC_NUMERIC=C
>>>   [3] LC_TIME=en_NZ.UTF-8        LC_COLLATE=en_NZ.UTF-8
>>>   [5] LC_MONETARY=en_NZ.UTF-8    LC_MESSAGES=en_NZ.UTF-8
>>>   [7] LC_PAPER=en_NZ.UTF-8       LC_NAME=C
>>>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
>>> [11] LC_MEASUREMENT=en_NZ.UTF-8 LC_IDENTIFICATION=C
>>>
>>> attached base packages:
>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>
>>> loaded via a namespace (and not attached):
>>> [1] compiler_4.0.0
>>>
>>> Paul
>>>
>>> On 26/05/20 2:21 pm, Kenny Bell wrote:
>>> > Hi all,
>>> >
>>> > I have found after upgrading to R 4.0.0 (among other upgrades so this
>>> may
>>> > not be the cause) that the degree symbol doesn't work correctly on
>>> Ubuntu
>>> > 18.04. Googling brought me to this thread that appears related.
>>> >
>>> > I tried running:
>>> > cairo_pdf()
>>> > plot.new(); text(0.5,0.5, bquote(120*degree*N), cex=5)
>>> > dev.off()
>>> >
>>> > and the ubuntu plot has the degree symbol vertically in the center of
>>> the
>>> > line. The Windows one correctly shows as superscript.
>>> >
>>> > Anyone else see this behaviour?
>>> >
>>> > Cheers,
>>> > Kenny
>>> >
>>> > On Fri, Apr 10, 2020 at 3:36 AM Nicolas Mailhot via R-devel <
>>> > r-devel at r-project.org> wrote:
>>> >
>>> >> Le mercredi 08 avril 2020 ? 02:55 -0700, Gabriel Becker a ?crit :
>>> >>> Hi Paul,
>>> >>
>>> >> Hi Gabriel,
>>> >>
>>> >> Thanks a lot for the testing.
>>> >>
>>> >>> The various font family settings seem to work too, from what I can
>>> >>> tell. Both font families you suggested, however, Helvetica and Apple
>>> >>> Symbols (the s is important) have significantly incomplete coverage
>>> >>> with PUA on.
>>> >>
>>> >> That is to be expected, the AMS symbol dump in PUA space was a quick
>>> >> hack to make pre-unicode symbols available in an unicode world,
>>> pending
>>> >> their normalisation.
>>> >>
>>> >> That standardisation is long past (IIRC it occured by unicode 3.2
>>> >> released in March 2002), so no newly created/updated font family is
>>> >> going to place those symbols in PUA anymore.
>>> >>
>>> >> Now adding the AMS symbols to new fonts has been slow, due to the
>>> large
>>> >> amount of software hardcoding Symbol (and equivallent) and masking the
>>> >> actual glyph userbase to font makers. It will accelerate with more
>>> apps
>>> >> expecting plain unicode by default.
>>> >>
>>> >> Thanks for the testing!
>>> >>
>>> >> Regards,
>>> >>
>>> >> --
>>> >> Nicolas Mailhot
>>> >>
>>> >> ______________________________________________
>>> >> R-devel at r-project.org mailing list
>>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> >>
>>> >>
>>> >> ______________________________________________
>>> >> R-devel at r-project.org mailing list
>>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>> --
>>> Dr Paul Murrell
>>> Department of Statistics
>>> The University of Auckland
>>> Private Bag 92019
>>> Auckland
>>> New Zealand
>>> 64 9 3737599 x85392
>>> paul at stat.auckland.ac.nz
>>> http://www.stat.auckland.ac.nz/~paul/
>>>
>>

	[[alternative HTML version deleted]]


From kmbe||56 @end|ng |rom gm@||@com  Tue May 26 08:35:39 2020
From: kmbe||56 @end|ng |rom gm@||@com (Kenny Bell)
Date: Tue, 26 May 2020 18:35:39 +1200
Subject: [Rd] 
 [FORGED] Re: Plotmath on Fedora 31 broken with with pango >=
 1.44 - workarounds?
In-Reply-To: <CAPekMCnXKJ4rg-10ANbVegj5V=WNt_jcQzEgQ4-OJq3r0r+O8Q@mail.gmail.com>
References: <CAAHES9xvgsK1fxKZhJa=1tB2ZzyP1TAXMZEvYB8P7KUnmZaAZw@mail.gmail.com>
 <CALEXWq07mXNa3v1ykeOXTAbXy6oJrz51bjLXUfN58gcDRXsBuQ@mail.gmail.com>
 <4cc00e0d5360aaf61aefd7753e10ddd5b429a6a9.camel@laposte.net>
 <CALEXWq1mL99DiwM0zMoz9LMehK3ZCp=g6SeSvGmzibLtmFMXPA@mail.gmail.com>
 <6cd98bb3-fe37-1c0d-3ac6-d1ec36aef3a9@stat.auckland.ac.nz>
 <f3dd5ab2-0058-1de9-a72b-194f67914dd0@stat.auckland.ac.nz>
 <093cd866-2a6a-4606-f612-d4f92b8483e6@stat.auckland.ac.nz>
 <47e8a03e-bb3b-8a25-bead-0a16208cd3e8@stat.auckland.ac.nz>
 <CAD4oTHEnQtQ9209wQSm3473e6VdMe8dXHsX1GuHeUzRKmbaUvA@mail.gmail.com>
 <CAD4oTHEQ3Yq-4fqhv0VFscnFP32WzakqChN7NoyoVW8JZP3HYA@mail.gmail.com>
 <0b55c175340777786f3a2b0e8ce28d723507a9ac.camel@laposte.net>
 <CAPekMCkH4=J3fZ5Dtc1Uj9gFF7zkiCEqsAf_uXEOrACoS-aayQ@mail.gmail.com>
 <70173300-12cb-fc11-f374-acdc491bbde3@stat.auckland.ac.nz>
 <CAPekMC=NRYmKcuvCWfNV9Ba54XzMEEy_FNi7YLy_ATw7nSjXdw@mail.gmail.com>
 <CAPekMC=8aaUrLK34szQJDvHV5NGMhGGmccjYCwt5zfS4CuMDUQ@mail.gmail.com>
 <CAPekMCnXKJ4rg-10ANbVegj5V=WNt_jcQzEgQ4-OJq3r0r+O8Q@mail.gmail.com>
Message-ID: <CAPekMCm+78GUwU=n1pJ9HdQ_9CbjpMGRJNmmK51n7PtH4KU-6A@mail.gmail.com>

I also tried just upgrading to 20.04 and that seemed to fix it.

On Tue, May 26, 2020 at 5:38 PM Kenny Bell <kmbell56 at gmail.com> wrote:

> I can also confirm that the latest  https://hub.docker.com/_/r-base has
> the correct behaviour.
>
> On Tue, May 26, 2020 at 5:05 PM Kenny Bell <kmbell56 at gmail.com> wrote:
>
>> I was actually able to reproduce this on a relatively fresh install of
>> 18.04 (a virtualbox). Paul, did you run apt update && apt upgrade before
>> trying to reproduce?
>>
>> On Tue, May 26, 2020 at 4:36 PM Kenny Bell <kmbell56 at gmail.com> wrote:
>>
>>> Hi Paul,
>>>
>>> I tried downgrading to R 3.4.4 and I still see the problem. I also have
>>> a conda environment that doesn't exhibit the problem so it's something
>>> environmental.
>>>
>>> Any tips for possible solutions/troubleshooting would be appreciated!
>>>
>>> Cheers,
>>> Kenny
>>>
>>> On Tue, May 26, 2020 at 3:09 PM Paul Murrell <paul at stat.auckland.ac.nz>
>>> wrote:
>>>
>>>>
>>>> I am not seeing that problem on my 18.04 ...
>>>>
>>>>  > sessionInfo()
>>>> R version 4.0.0 Patched (2020-05-12 r78431)
>>>> Platform: x86_64-pc-linux-gnu (64-bit)
>>>> Running under: Ubuntu 18.04.4 LTS
>>>>
>>>> Matrix products: default
>>>> BLAS:   /home/pmur002/R/R-4-0-branch/BUILD/lib/libRblas.so
>>>> LAPACK: /home/pmur002/R/R-4-0-branch/BUILD/lib/libRlapack.so
>>>>
>>>> locale:
>>>>   [1] LC_CTYPE=en_NZ.UTF-8       LC_NUMERIC=C
>>>>   [3] LC_TIME=en_NZ.UTF-8        LC_COLLATE=en_NZ.UTF-8
>>>>   [5] LC_MONETARY=en_NZ.UTF-8    LC_MESSAGES=en_NZ.UTF-8
>>>>   [7] LC_PAPER=en_NZ.UTF-8       LC_NAME=C
>>>>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
>>>> [11] LC_MEASUREMENT=en_NZ.UTF-8 LC_IDENTIFICATION=C
>>>>
>>>> attached base packages:
>>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>>
>>>> loaded via a namespace (and not attached):
>>>> [1] compiler_4.0.0
>>>>
>>>> Paul
>>>>
>>>> On 26/05/20 2:21 pm, Kenny Bell wrote:
>>>> > Hi all,
>>>> >
>>>> > I have found after upgrading to R 4.0.0 (among other upgrades so this
>>>> may
>>>> > not be the cause) that the degree symbol doesn't work correctly on
>>>> Ubuntu
>>>> > 18.04. Googling brought me to this thread that appears related.
>>>> >
>>>> > I tried running:
>>>> > cairo_pdf()
>>>> > plot.new(); text(0.5,0.5, bquote(120*degree*N), cex=5)
>>>> > dev.off()
>>>> >
>>>> > and the ubuntu plot has the degree symbol vertically in the center of
>>>> the
>>>> > line. The Windows one correctly shows as superscript.
>>>> >
>>>> > Anyone else see this behaviour?
>>>> >
>>>> > Cheers,
>>>> > Kenny
>>>> >
>>>> > On Fri, Apr 10, 2020 at 3:36 AM Nicolas Mailhot via R-devel <
>>>> > r-devel at r-project.org> wrote:
>>>> >
>>>> >> Le mercredi 08 avril 2020 ? 02:55 -0700, Gabriel Becker a ?crit :
>>>> >>> Hi Paul,
>>>> >>
>>>> >> Hi Gabriel,
>>>> >>
>>>> >> Thanks a lot for the testing.
>>>> >>
>>>> >>> The various font family settings seem to work too, from what I can
>>>> >>> tell. Both font families you suggested, however, Helvetica and Apple
>>>> >>> Symbols (the s is important) have significantly incomplete coverage
>>>> >>> with PUA on.
>>>> >>
>>>> >> That is to be expected, the AMS symbol dump in PUA space was a quick
>>>> >> hack to make pre-unicode symbols available in an unicode world,
>>>> pending
>>>> >> their normalisation.
>>>> >>
>>>> >> That standardisation is long past (IIRC it occured by unicode 3.2
>>>> >> released in March 2002), so no newly created/updated font family is
>>>> >> going to place those symbols in PUA anymore.
>>>> >>
>>>> >> Now adding the AMS symbols to new fonts has been slow, due to the
>>>> large
>>>> >> amount of software hardcoding Symbol (and equivallent) and masking
>>>> the
>>>> >> actual glyph userbase to font makers. It will accelerate with more
>>>> apps
>>>> >> expecting plain unicode by default.
>>>> >>
>>>> >> Thanks for the testing!
>>>> >>
>>>> >> Regards,
>>>> >>
>>>> >> --
>>>> >> Nicolas Mailhot
>>>> >>
>>>> >> ______________________________________________
>>>> >> R-devel at r-project.org mailing list
>>>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> >>
>>>> >>
>>>> >> ______________________________________________
>>>> >> R-devel at r-project.org mailing list
>>>> >> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>> --
>>>> Dr Paul Murrell
>>>> Department of Statistics
>>>> The University of Auckland
>>>> Private Bag 92019
>>>> Auckland
>>>> New Zealand
>>>> 64 9 3737599 x85392
>>>> paul at stat.auckland.ac.nz
>>>> http://www.stat.auckland.ac.nz/~paul/
>>>>
>>>

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue May 26 15:24:03 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 26 May 2020 15:24:03 +0200
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <f39343f8-bca9-5204-e2a9-fb4a0f84a77b@fredhutch.org>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
 <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
 <CAD4oTHGa4Ny=HS-Vq68P4arawhM0zefhEuKe2EvystnRHkWxTQ@mail.gmail.com>
 <c78cfd63-f5c2-e5d1-c659-d9525d545d68@fredhutch.org>
 <CAD4oTHFLPS9DcAc_z0tYp7kn2Sq7SmiYTGwo_9Q+m2WJ6nu4mg@mail.gmail.com>
 <f39343f8-bca9-5204-e2a9-fb4a0f84a77b@fredhutch.org>
Message-ID: <24269.6259.934079.331347@stat.math.ethz.ch>

>>>>> Herv? Pag?s 
>>>>>     on Sun, 24 May 2020 14:22:37 -0700 writes:

    > On 5/24/20 00:26, Gabriel Becker wrote:
    >> 
    >> 
    >> On Sat, May 23, 2020 at 9:59 PM Herv? Pag?s <hpages at fredhutch.org 
    >> <mailto:hpages at fredhutch.org>> wrote:
    >> 
    >> On 5/23/20 17:45, Gabriel Becker wrote:
    >> > Maybe my intuition is just
    >> > different?but when I collapse multiple character vectors together, I
    >> > expect?all the characters from each of those vectors to be in the
    >> > resulting collapsed one.
    >> 
    >> Yes I'd expect that too. But the **collapse** operation in paste() has
    >> never been about collapsing **multiple** character vectors together.
    >> What it does is collapse the **single** character vector that comes out
    >> of the 'sep' operation.
    >> 
    >> 
    >> I understand what it does, I broke ti down the?same way in my post 
    >> earlier in?the thread. the fact remains?is that it is a single function 
    >> which significantly muddies the waters. so you can say
    >> 
    >> paste0(x,y, collapse=",", recycle0=TRUE)
    >> 
    >> is not a collapse operation on multiple?vectors, and of course there's a 
    >> sense in which?you're not wrong (again I understand what these functions 
    >> do), but it sure looks like one in the invocation, doesn't it?
    >> 
    >> Honestly the thing that this whole discussion has shown me most clearly 
    >> is that, imho, collapse (accepting ONLY one data vector) and 
    >> paste(accepting multiple) should never have been a single function to 
    >> begin with.? But that ship sailed long long ago.

    > Yes :-(

    >> 
    >> So
    >> 
    >> ? ?paste(x, y, z, sep="", collapse=",")
    >> 
    >> is analogous to
    >> 
    >> ? ?sum(x + y + z)
    >> 
    >> 
    >> Honestly, I'd be significantly more comfortable?if
    >> 
    >> 1:10?+ integer(0)?+ 5
    >> 
    >> were an error too.

    > This is actually the recycling scheme used by mapply():

    >> mapply(function(x, y, z) c(x, y, z), 1:10, integer(0), 5)
    > Error in mapply(FUN = FUN, ...) :
    > zero-length inputs cannot be mixed with those of non-zero length

    > AFAIK base R uses 3 different recycling schemes for n-ary operations:

    > (1) The recycling scheme used by arithmetic and comparison operations
    > (Arith, Compare, Logic group generics).

    > (2) The recycling scheme used by classic paste().

    > (3) The recycling scheme used by mapply().

    > Having such a core mechanism like recycling being inconsistent across 
    > base R is sad. It makes it really hard to predict how a given n-ary 
    > function will recycle its arguments unless you spend some time trying it 
    > yourself with several combinations of vector lengths. It is of course 
    > the source of numerous latent bugs. I wish there was only one but that's 
    > just a dream.

    > None of these 3 recycling schemes is perfect. IMO (2) is by far the 
    > worst. (3) is too restrictive and would need to be refined if we wanted 
    > to make it a good universal recycling scheme.

    > Anyway I don't think it makes sense to introduce a 4th recycling scheme 
    > at this point even though it would be a nice item to put on the wish 
    > list for R 7.0.0 with the ultimate goal that it will universally adopted 
    > in R 11.0.0 ;-)

    > So if we have to do with what we have IMO (1) is the scheme that makes 
    > most sense although I agree that it can do some surprising things for 
    > some unusual combinations of vector lengths. It's the scheme I adhere to 
    > in my own binary operations e.g. in S4Vector::pcompare().

    > The modest proposal of the 'recycle0' argument is only to let the user 
    > switch from recycling scheme (2) to (1) if they're not happy with scheme 
    > (2) (I'm one of them).

Yes, indeed.  This was the purpose of introducing  'recycle0'.

Now, with collapse = <string>,  {in R "string" := character vector of length 1}.
we clearly see different interpretations on what is desirable
for  recycle0 = TRUE,
all of you (Suharto, Bill, Herv?, Gabe) assert that the behavior
should be different than now, and should either error (possibly,
by Gabe), or return a single string  (possibly with a warning),
i.e., collapse = <string>  behavior should not be influenced (or
possibly be conflicting with) by recycle0=TRUE.

Within R core, some believe the current recyle0=TRUE behavior to
be the correct one.  Personally, I see
reasons for both..

What about remaining back-compatible, not only to R 3.y.z with
default recycle0=FALSE, but also to R 4.0.0 with recycle0=TRUE
*and* add a new option for the Suharto-Bill-Herv?-Gabe behavior,
e.g., recycle0="sep.only" or just  recycle0="sep" ?

As (for back-compatibility reasons) you have to specify
'recycle0 = ..'  anyway, you would get what makes most sense to
you by using such a third option.

? (WDYT ?)

Martin

    > Switching to scheme (3) or to a new custom scheme 
    > would be a completely different proposal.

    >> 
    >> At least I'm consistent right?

    > Yes :-)

    > Anyway discussing recycling schemes is interesting but not directly 
    > related with what the OP brought up (behavior of the 'collapse' operation).

    > Cheers,
    > H.

    >> 
    >> ~G


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue May 26 18:33:08 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 26 May 2020 18:33:08 +0200
Subject: [Rd] 
 round() and signif() do not check argument names when a single
 argument is given
In-Reply-To: <CAMEcc0v=awNzM8HMoCQ2VX5-bfSV28HM4S-nuefH3cJySYo7QQ@mail.gmail.com>
References: <CAMEcc0tY+F7QgfshvOhcMUp=7=JFYxg7EAXnvKBOeYw97YoEeQ@mail.gmail.com>
 <Mime4j.0.851838a43c315b65.1723f3e20f9@imap.gmail.com>
 <CAMEcc0v=awNzM8HMoCQ2VX5-bfSV28HM4S-nuefH3cJySYo7QQ@mail.gmail.com>
Message-ID: <24269.17604.704073.665885@stat.math.ethz.ch>

>>>>> Shane Mueller 
>>>>>     on Sat, 23 May 2020 00:37:57 -0400 writes:

    > On Fri, May 22, 2020 at 9:55 PM David Winsemius <dwinsemius at comcast.net>
    > wrote:

    >> The premise in the first few lines of your preamble is at odds (in the
    >> logical sense) with my understanding of primitive function behavior. Try:
    >> 
    >> data.frame(x=1:2,y=letters[1:2])[j=2, i=1]
    >> 
    >> David
    >> 

    > I had never seen naming indexes of the [] operator.  The documentation of
    > [] indicates that it does argument matching in a non-standard way,
    > recommends against doing it, and states the [.data.frame behavior used in
    > this example is 'undocumented'.  In the example above a warning is thrown
    > as well.

    > Here is the [] documentation:

    > Argument matching
    >> Note that these operations do not match their index arguments in the
    >> standard way: argument names are ignored and positional matching only is
    >> used. So m[j = 2, i = 1] is equivalent to m[2, 1] and not to m[1, 2].
    >> 
    >> This may not be true for methods defined for them; for example it is not
    >> true for the data.frame methods described in [.data.frame which warn if i
    >> or j is named and have undocumented behaviour in that case.
    >> 
    >> To avoid confusion, do not name index arguments (but drop and exact must
    >> be named).
    >> 


    > For the data frames operator [], i and j appear to be named and used
    > arguments, as the following causes an unused argument error for k:
    > data.frame(x=1:2,y=letters[1:2])[j=2, k=1]

    > The analog for round() would be indexing with something like  [k=1,] alone,
    > which causes an unused argument error error for data frames, which is what
    > I'm suggesting round(banana=3.5) should do.   (note it works for matrix as
    > documented).

    > Best,
    > Shane

I agree with Shane.

I think this is a small "wart" that we should remove, ...
and I have been testing a version of your code addition,
and plan to commit that (once I've added regression tests etc).

Martin


From bbo|ker @end|ng |rom gm@||@com  Tue May 26 18:49:24 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 26 May 2020 12:49:24 -0400
Subject: [Rd] closing R graphics windows?
Message-ID: <4d7d4d0e-21b0-d15e-d774-e113109b7340@math.mcmaster.ca>


 ?? Does anyone have any idea how hard it would be/where to start if one 
wanted to hack/patch R to allow X11 graphics windows that had keyboard 
focus to be closed with standard keyboard shortcuts (e.g. Ctrl-W to 
close on Linux)?? Has this been suggested/tried before?

 ?? cheers

 ??? Ben Bolker


From irederik m@iii@g oii oib@@et  Tue May 26 20:00:00 2020
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Tue, 26 May 2020 11:00:00 -0700
Subject: [Rd] closing R graphics windows?
In-Reply-To: <4d7d4d0e-21b0-d15e-d774-e113109b7340@math.mcmaster.ca>
References: <4d7d4d0e-21b0-d15e-d774-e113109b7340@math.mcmaster.ca>
Message-ID: <20200526180000.GB54690@localhost>

I use keyboard shortcuts to interact with my window manager. One of those shortcuts closes the currently focused window. This is on Linux.

The only annoying thing for me is that 'plot()' is not interruptible, so neither Ctrl-C nor the window manager can stop a plot once it has started - but I submitted a bug to fix this a long time ago. If I use the keyboard to close the window while a plot is being drawn, then it has to finish drawing before the window actually closes.

Frederick

On Tue, May 26, 2020 at 12:49:24PM -0400, Ben Bolker wrote:
>
>?? Does anyone have any idea how hard it would be/where to start if 
>one wanted to hack/patch R to allow X11 graphics windows that had 
>keyboard focus to be closed with standard keyboard shortcuts (e.g. 
>Ctrl-W to close on Linux)?? Has this been suggested/tried before?
>
>?? cheers
>
>??? Ben Bolker
>
>______________________________________________
>R-devel at r-project.org mailing list
>https://stat.ethz.ch/mailman/listinfo/r-devel
>


From jttk|m @end|ng |rom goog|em@||@com  Tue May 26 20:02:17 2020
From: jttk|m @end|ng |rom goog|em@||@com (Jan T. Kim)
Date: Tue, 26 May 2020 19:02:17 +0100
Subject: [Rd] closing R graphics windows?
In-Reply-To: <4d7d4d0e-21b0-d15e-d774-e113109b7340@math.mcmaster.ca>
References: <4d7d4d0e-21b0-d15e-d774-e113109b7340@math.mcmaster.ca>
Message-ID: <20200526180216.GC8903@titania>

>From my rusty memory of X11 hacking, this should be elementary at
the X11 end of things -- something along the lines of adding key
event handling and responding to the Ctrl-W event.

There may be no need for this for X11, though, as the normal X11
way is to have the window manager manage such stuff. As an example,
I use fvwm and adding the line

    Key (R_x11) W            A        C      Close

to my .fvwm2rc pretty much seems to achieve the behaviour you may
expect, at least "phenotypically", i.e. the R_x11 window disappears
when I press Ctrl-W.

The closing of the window seems to be picked up at the R end, calls
to dev.cur() show the X11 cairo device after plotting something and
the null device after closing the window via the fvwm key binding.

Personally, I have some lingering suspicions about possible ill
effects caused by closing a window and causing such side effects in
the process. My usual practice is to keep the keyboard focus on the
terminal running R, and to call dev.off() if I've messed up my
graphics window too badly.

Best regards, Jan


On Tue, May 26, 2020 at 12:49:24PM -0400, Ben Bolker wrote:
> 
> ?? Does anyone have any idea how hard it would be/where to start if one
> wanted to hack/patch R to allow X11 graphics windows that had keyboard focus
> to be closed with standard keyboard shortcuts (e.g. Ctrl-W to close on
> Linux)?? Has this been suggested/tried before?
> 
> ?? cheers
> 
> ??? Ben Bolker
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hp@ge@ @end|ng |rom |redhutch@org  Tue May 26 21:38:13 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Tue, 26 May 2020 12:38:13 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <24269.6259.934079.331347@stat.math.ethz.ch>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
 <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
 <CAD4oTHGa4Ny=HS-Vq68P4arawhM0zefhEuKe2EvystnRHkWxTQ@mail.gmail.com>
 <c78cfd63-f5c2-e5d1-c659-d9525d545d68@fredhutch.org>
 <CAD4oTHFLPS9DcAc_z0tYp7kn2Sq7SmiYTGwo_9Q+m2WJ6nu4mg@mail.gmail.com>
 <f39343f8-bca9-5204-e2a9-fb4a0f84a77b@fredhutch.org>
 <24269.6259.934079.331347@stat.math.ethz.ch>
Message-ID: <ab3097be-4aa2-d5fd-6520-150e13e78ccf@fredhutch.org>

Hi Martin,

On 5/26/20 06:24, Martin Maechler wrote:
...
> 
> What about remaining back-compatible, not only to R 3.y.z with
> default recycle0=FALSE, but also to R 4.0.0 with recycle0=TRUE

What back-compatibility with R 4.0.0 are we talking about? The 
'recycle0' arg was added **after** the R 4.0.0 release and has never 
been part of an official release yet. This is the time to fix it.

> *and* add a new option for the Suharto-Bill-Herv?-Gabe behavior,
> e.g., recycle0="sep.only" or just  recycle0="sep" ?

OMG!

> 
> As (for back-compatibility reasons) you have to specify
> 'recycle0 = ..'  anyway, you would get what makes most sense to
> you by using such a third option.
> 
> ? (WDYT ?)

Don't bother. I'd rather use

   paste(paste(x, y, z, sep="#", recycle0=TRUE), collapse=",")

i.e. explicitly break down the 2 operations (sep and collapse). Might be 
slightly less efficient but I find it way more readable than

   paste(x, y, z, sep="#", collapse=",", recycle0="sep.only")

BTW I appreciate you trying to accomodate everybody's taste. That 
doesn't sound like an easy task ;-)

I'll just reiterate my earlier comment that controlling the collapse 
operation via an argument named 'recycle0' doesn't make sense (collapse 
involves NO recycling). So I don't know if the current 'recyle0=TRUE' 
behavior is "the correct one" but at the very least the name of the 
argument is a misnomer and misleading.

More generally speaking using the same argument to control 2 distinct 
operations is not good API design. A better design is to use 2 
arguments. Then the 2 arguments can generally be made orthogonal (like 
in this case) i.e. all possible combinations are valid (4 combinations 
in this case).

Thanks,
H.


> 
> Martin
> 
>      > Switching to scheme (3) or to a new custom scheme
>      > would be a completely different proposal.
> 
>      >>
>      >> At least I'm consistent right?
> 
>      > Yes :-)
> 
>      > Anyway discussing recycling schemes is interesting but not directly
>      > related with what the OP brought up (behavior of the 'collapse' operation).
> 
>      > Cheers,
>      > H.
> 
>      >>
>      >> ~G
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Wed May 27 03:07:01 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Wed, 27 May 2020 01:07:01 +0000 (UTC)
Subject: [Rd] R-ints context documentation
References: <1172322540.196280.1590541621063.ref@mail.yahoo.com>
Message-ID: <1172322540.196280.1590541621063@mail.yahoo.com>

In 1.4 Contexts[1], should the following:

> Note that whilst calls to closures and builtins set a context, 
> those to special internal functions never do.

Be something like:

> Note that whilst calls to closures always set a context,
> those to builtins only set a context under profiling
> or if they are of the foreign variety (e.g `.C` and similar),
> and those to special internal functions never do.

Based on the 'eval.c' source[2].

Best,

Brodie

[1]: https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Contexts
[2]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/eval.c#L821


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed May 27 13:35:44 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 27 May 2020 13:35:44 +0200
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <ab3097be-4aa2-d5fd-6520-150e13e78ccf@fredhutch.org>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
 <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
 <CAD4oTHGa4Ny=HS-Vq68P4arawhM0zefhEuKe2EvystnRHkWxTQ@mail.gmail.com>
 <c78cfd63-f5c2-e5d1-c659-d9525d545d68@fredhutch.org>
 <CAD4oTHFLPS9DcAc_z0tYp7kn2Sq7SmiYTGwo_9Q+m2WJ6nu4mg@mail.gmail.com>
 <f39343f8-bca9-5204-e2a9-fb4a0f84a77b@fredhutch.org>
 <24269.6259.934079.331347@stat.math.ethz.ch>
 <ab3097be-4aa2-d5fd-6520-150e13e78ccf@fredhutch.org>
Message-ID: <24270.20624.324390.998860@stat.math.ethz.ch>

>>>>> Herv? Pag?s 
>>>>>     on Tue, 26 May 2020 12:38:13 -0700 writes:

    > Hi Martin, On 5/26/20 06:24, Martin Maechler wrote: ...
    >> 
    >> What about remaining back-compatible, not only to R 3.y.z
    >> with default recycle0=FALSE, but also to R 4.0.0 with
    >> recycle0=TRUE

    > What back-compatibility with R 4.0.0 are we talking about?
    > The 'recycle0' arg was added **after** the R 4.0.0 release
    > and has never been part of an official release yet. 

Yes, of course.  It was *planned* for R 4.0.0 and finally was
too late (feature freeze etc)... I'm sorry I was wrong and
misleading above.

    > This is the time to fix it.

Well, R 4.0.1 is already in 'beta' and does contain it too.
So the "fix" should happen really really fast, or we (R core)
take it out from there entirely.

    >> *and* add a new option for the Suharto-Bill-Herv?-Gabe
    >> behavior, e.g., recycle0="sep.only" or just
    >> recycle0="sep" ?

    > OMG!

    >> As (for back-compatibility reasons) you have to specify
    >> 'recycle0 = ..'  anyway, you would get what makes most
    >> sense to you by using such a third option.
    >> 
    >> ? (WDYT ?)

    > Don't bother. I'd rather use

    >    paste(paste(x, y, z, sep="#", recycle0=TRUE), collapse=",")

    > i.e. explicitly break down the 2 operations (sep and
    > collapse). Might be slightly less efficient but I find it
    > way more readable than

    >    paste(x, y, z, sep="#", collapse=",", recycle0="sep.only")

    > BTW I appreciate you trying to accomodate everybody's
    > taste. That doesn't sound like an easy task ;-)


    > I'll just reiterate my earlier comment that controlling
    > the collapse operation via an argument named 'recycle0'
    > doesn't make sense (collapse involves NO recycling). So I
    > don't know if the current 'recyle0=TRUE' behavior is "the
    > correct one" but at the very least the name of the
    > argument is a misnomer and misleading.

    > More generally speaking using the same argument to control
    > 2 distinct operations is not good API design. A better
    > design is to use 2 arguments. Then the 2 arguments can
    > generally be made orthogonal (like in this case) i.e. all
    > possible combinations are valid (4 combinations in this case).

I don't disagree about the principle...


From @purd|e@@ @end|ng |rom gm@||@com  Wed May 27 14:19:58 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Thu, 28 May 2020 00:19:58 +1200
Subject: [Rd] closing R graphics windows?
In-Reply-To: <20200526180000.GB54690@localhost>
References: <4d7d4d0e-21b0-d15e-d774-e113109b7340@math.mcmaster.ca>
 <20200526180000.GB54690@localhost>
Message-ID: <CAB8pepxzxW+muSyyq=zVdJCzBf=2gLfGZHVF5yO0S4tL_Js7uQ@mail.gmail.com>

> The only annoying thing for me is that 'plot()' is not interruptible, so neither Ctrl-C nor the window manager can stop a plot once it has started - but I submitted a bug to fix this a long time ago. If I use the keyboard to close the window while a plot is being drawn, then it has to finish drawing before the window actually closes.

When R first shifted to Cairo, there was a noticeable performance
loss, which could be fixed by changing to the nondefault (but
traditional) "X11" graphics device.

But that was about ten years ago.
And at present, I'm not using Linux on a regular basis, and haven't
been following changes to the graphics devices.

Perhaps someone who is more familiar with graphics devices under
Linux, could comment on options to increase performance...?


P.S.
Cairo does produce high-quality graphics, better than any PDF viewer I've seen.


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu May 28 09:39:19 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 28 May 2020 09:39:19 +0200
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <24270.20624.324390.998860@stat.math.ethz.ch>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <CAF8bMcbajc1rHvXxd+Rq+sfY8sbFNfO+L17z2HdEJ3v8AwM6og@mail.gmail.com>
 <fa6f16d6-01b9-858f-8068-5598a7854cd8@fredhutch.org>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
 <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
 <CAD4oTHGa4Ny=HS-Vq68P4arawhM0zefhEuKe2EvystnRHkWxTQ@mail.gmail.com>
 <c78cfd63-f5c2-e5d1-c659-d9525d545d68@fredhutch.org>
 <CAD4oTHFLPS9DcAc_z0tYp7kn2Sq7SmiYTGwo_9Q+m2WJ6nu4mg@mail.gmail.com>
 <f39343f8-bca9-5204-e2a9-fb4a0f84a77b@fredhutch.org>
 <24269.6259.934079.331347@stat.math.ethz.ch>
 <ab3097be-4aa2-d5fd-6520-150e13e78ccf@fredhutch.org>
 <24270.20624.324390.998860@stat.math.ethz.ch>
Message-ID: <24271.27303.754055.541944@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Wed, 27 May 2020 13:35:44 +0200 writes:

>>>>> Herv? Pag?s 
>>>>>     on Tue, 26 May 2020 12:38:13 -0700 writes:

    >> Hi Martin, On 5/26/20 06:24, Martin Maechler wrote: ...
    >>> 
    >>> What about remaining back-compatible, not only to R 3.y.z
    >>> with default recycle0=FALSE, but also to R 4.0.0 with
    >>> recycle0=TRUE

    >> What back-compatibility with R 4.0.0 are we talking about?
    >> The 'recycle0' arg was added **after** the R 4.0.0 release
    >> and has never been part of an official release yet. 

    > Yes, of course.  It was *planned* for R 4.0.0 and finally was
    > too late (feature freeze etc)... I'm sorry I was wrong and
    > misleading above.

    >> This is the time to fix it.

    > Well, R 4.0.1 is already in 'beta' and does contain it too.
    > So the "fix" should happen really really fast, or we (R core)
    > take it out from there entirely.

Well, in the end your repeated good reasoning has prevailed:
I've committed a change (to R-devel; most probably in
time to be ported to 4.0.1 beta).
I think this implements the   recycle0 = TRUE   behavior you
have been advocating for, 
in svn r78591  (2020-05-27 19:45:07 +0200)   with message

     paste(), paste0(): collapse=<string> always gives a string
     (also w/ `recycle0=TRUE`)

Best regards,
Martin


From hp@ge@ @end|ng |rom |redhutch@org  Thu May 28 20:37:57 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Thu, 28 May 2020 11:37:57 -0700
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <24271.27303.754055.541944@stat.math.ethz.ch>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <CAD4oTHHHyh8k0zxBZdLfbBsxRfcY_qq9GouqmxDbj5Y5HZ6i4A@mail.gmail.com>
 <9dc20f00-3b06-8b07-56fd-258c24877d83@fredhutch.org>
 <24262.44920.82908.796068@stat.math.ethz.ch>
 <CAD4oTHFMC9f8q7o5wSb25Gk0d44qtvtZ0aL9k4LPegrj_5RofQ@mail.gmail.com>
 <b2080cad-1a77-cb55-3f2e-b2e50c1ee550@fredhutch.org>
 <CAF8bMcaKQSrHTn0USbDYcMRS3ZdixFFdm2TX7Yt=PAsv2SUJ1g@mail.gmail.com>
 <CAD4oTHFDy78c8rHUe6cBX_Bt5fOPVgmjvh5rrg0Ly_NpYQpwew@mail.gmail.com>
 <24525014-144c-eaf7-cf76-90a95cf9fcf7@fredhutch.org>
 <CAD4oTHGa4Ny=HS-Vq68P4arawhM0zefhEuKe2EvystnRHkWxTQ@mail.gmail.com>
 <c78cfd63-f5c2-e5d1-c659-d9525d545d68@fredhutch.org>
 <CAD4oTHFLPS9DcAc_z0tYp7kn2Sq7SmiYTGwo_9Q+m2WJ6nu4mg@mail.gmail.com>
 <f39343f8-bca9-5204-e2a9-fb4a0f84a77b@fredhutch.org>
 <24269.6259.934079.331347@stat.math.ethz.ch>
 <ab3097be-4aa2-d5fd-6520-150e13e78ccf@fredhutch.org>
 <24270.20624.324390.998860@stat.math.ethz.ch>
 <24271.27303.754055.541944@stat.math.ethz.ch>
Message-ID: <cd2c9e43-f41e-0116-a52c-6a332d11351b@fredhutch.org>

Excellent! Thanks Martin.

H.

On 5/28/20 00:39, Martin Maechler wrote:
>>>>>> Martin Maechler
>>>>>>      on Wed, 27 May 2020 13:35:44 +0200 writes:
> 
>>>>>> Herv? Pag?s
>>>>>>      on Tue, 26 May 2020 12:38:13 -0700 writes:
> 
>      >> Hi Martin, On 5/26/20 06:24, Martin Maechler wrote: ...
>      >>>
>      >>> What about remaining back-compatible, not only to R 3.y.z
>      >>> with default recycle0=FALSE, but also to R 4.0.0 with
>      >>> recycle0=TRUE
> 
>      >> What back-compatibility with R 4.0.0 are we talking about?
>      >> The 'recycle0' arg was added **after** the R 4.0.0 release
>      >> and has never been part of an official release yet.
> 
>      > Yes, of course.  It was *planned* for R 4.0.0 and finally was
>      > too late (feature freeze etc)... I'm sorry I was wrong and
>      > misleading above.
> 
>      >> This is the time to fix it.
> 
>      > Well, R 4.0.1 is already in 'beta' and does contain it too.
>      > So the "fix" should happen really really fast, or we (R core)
>      > take it out from there entirely.
> 
> Well, in the end your repeated good reasoning has prevailed:
> I've committed a change (to R-devel; most probably in
> time to be ported to 4.0.1 beta).
> I think this implements the   recycle0 = TRUE   behavior you
> have been advocating for,
> in svn r78591  (2020-05-27 19:45:07 +0200)   with message
> 
>       paste(), paste0(): collapse=<string> always gives a string
>       (also w/ `recycle0=TRUE`)
> 
> Best regards,
> Martin
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sat May 30 22:17:27 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 30 May 2020 21:17:27 +0100
Subject: [Rd] r-project.org SSL certificate issues
Message-ID: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>

On macOS 10.15.5 and R-devel:

> download.file("https://www.r-project.org", tempfile())
trying URL 'https://www.r-project.org'
Error in download.file("https://www.r-project.org", tempfile()) :
  cannot open URL 'https://www.r-project.org'
In addition: Warning message:
In download.file("https://www.r-project.org", tempfile()) :
  URL 'https://www.r-project.org': status was 'SSL peer certificate or
SSH remote key was not OK'

https://www.ssllabs.com/ssltest says:

COMODO RSA Certification Authority
Fingerprint SHA256:
4f32d5dc00f715250abcc486511e37f501a899deb3bf7ea8adbbd3aef1c412da
Pin SHA256: grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=
Valid untilSat, 30 May 2020 10:48:38 UTC (expired 8 hours and 51
minutes ago)   EXPIRED

AFAICT this is the reason:
https://calnetweb.berkeley.edu/calnet-technologists/incommon-sectigo-certificate-service/addtrust-external-root-expiration-may-2020

FYI,
Gabor


From bob @end|ng |rom rud@|@  Sat May 30 22:54:58 2020
From: bob @end|ng |rom rud@|@ (Bob Rudis)
Date: Sat, 30 May 2020 16:54:58 -0400
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
Message-ID: <CAA-FpKX19gUn6o=jeNiA1Sv=MBGUkk38tPQ4x7EHV=8iGth6-A@mail.gmail.com>

Yep. It should switch to Let's Encrypt with the automated cert renewals ASAP.

On Sat, May 30, 2020 at 4:17 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> On macOS 10.15.5 and R-devel:
>
> > download.file("https://www.r-project.org", tempfile())
> trying URL 'https://www.r-project.org'
> Error in download.file("https://www.r-project.org", tempfile()) :
>   cannot open URL 'https://www.r-project.org'
> In addition: Warning message:
> In download.file("https://www.r-project.org", tempfile()) :
>   URL 'https://www.r-project.org': status was 'SSL peer certificate or
> SSH remote key was not OK'
>
> https://www.ssllabs.com/ssltest says:
>
> COMODO RSA Certification Authority
> Fingerprint SHA256:
> 4f32d5dc00f715250abcc486511e37f501a899deb3bf7ea8adbbd3aef1c412da
> Pin SHA256: grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=
> Valid untilSat, 30 May 2020 10:48:38 UTC (expired 8 hours and 51
> minutes ago)   EXPIRED
>
> AFAICT this is the reason:
> https://calnetweb.berkeley.edu/calnet-technologists/incommon-sectigo-certificate-service/addtrust-external-root-expiration-may-2020
>
> FYI,
> Gabor
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Sat May 30 23:01:04 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sat, 30 May 2020 23:01:04 +0200
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
Message-ID: <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>

Odd. Safari has no problem and says certificate expires August 16 2020, but I also see the download.file issue with 4.0.1 beta:

> download.file("https://www.r-project.org", tempfile())
trying URL 'https://www.r-project.org'
Error in download.file("https://www.r-project.org", tempfile()) : 
  cannot open URL 'https://www.r-project.org'
In addition: Warning message:
In download.file("https://www.r-project.org", tempfile()) :
  URL 'https://www.r-project.org/': status was 'Peer certificate cannot be authenticated with given CA certificates'

(note slightly different error message).

svn is also affected:

Peters-MacBook-Air:R pd$ svn up
Updating '.':
Error validating server certificate for 'https://svn.r-project.org:443':
 - The certificate has expired.
Certificate information:
 - Hostname: *.r-project.org
 - Valid: from Aug 16 00:00:00 2018 GMT until Aug 15 23:59:59 2020 GMT
 - Issuer: COMODO RSA Domain Validation Secure Server CA, COMODO CA Limited, Salford, Greater Manchester, GB
 - Fingerprint: 93:B8:AF:9F:0A:67:2F:3A:C9:BA:FF:86:BB:2C:08:47:02:7F:1D:8D
(R)eject, accept (t)emporarily or accept (p)ermanently? t
U    src/library/grid/R/grob.R
....

ssltest shows two certificates of which only one is expired?

-pd



> On 30 May 2020, at 22:17 , G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> On macOS 10.15.5 and R-devel:
> 
>> download.file("https://www.r-project.org", tempfile())
> trying URL 'https://www.r-project.org'
> Error in download.file("https://www.r-project.org", tempfile()) :
>  cannot open URL 'https://www.r-project.org'
> In addition: Warning message:
> In download.file("https://www.r-project.org", tempfile()) :
>  URL 'https://www.r-project.org': status was 'SSL peer certificate or
> SSH remote key was not OK'
> 
> https://www.ssllabs.com/ssltest says:
> 
> COMODO RSA Certification Authority
> Fingerprint SHA256:
> 4f32d5dc00f715250abcc486511e37f501a899deb3bf7ea8adbbd3aef1c412da
> Pin SHA256: grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=
> Valid untilSat, 30 May 2020 10:48:38 UTC (expired 8 hours and 51
> minutes ago)   EXPIRED
> 
> AFAICT this is the reason:
> https://calnetweb.berkeley.edu/calnet-technologists/incommon-sectigo-certificate-service/addtrust-external-root-expiration-may-2020
> 
> FYI,
> Gabor
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From bob @end|ng |rom rud@|@  Sat May 30 23:07:29 2020
From: bob @end|ng |rom rud@|@ (Bob Rudis)
Date: Sat, 30 May 2020 17:07:29 -0400
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
Message-ID: <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>

It's the top of chain CA cert, so browsers are being lazy and helpful
to humans by (incorrectly, albeit) relying on the existing trust
relationship.

libcurl (et al) is not nearly as forgiving.

On Sat, May 30, 2020 at 5:01 PM peter dalgaard <pdalgd at gmail.com> wrote:
>
> Odd. Safari has no problem and says certificate expires August 16 2020, but I also see the download.file issue with 4.0.1 beta:
>
> > download.file("https://www.r-project.org", tempfile())
> trying URL 'https://www.r-project.org'
> Error in download.file("https://www.r-project.org", tempfile()) :
>   cannot open URL 'https://www.r-project.org'
> In addition: Warning message:
> In download.file("https://www.r-project.org", tempfile()) :
>   URL 'https://www.r-project.org/': status was 'Peer certificate cannot be authenticated with given CA certificates'
>
> (note slightly different error message).
>
> svn is also affected:
>
> Peters-MacBook-Air:R pd$ svn up
> Updating '.':
> Error validating server certificate for 'https://svn.r-project.org:443':
>  - The certificate has expired.
> Certificate information:
>  - Hostname: *.r-project.org
>  - Valid: from Aug 16 00:00:00 2018 GMT until Aug 15 23:59:59 2020 GMT
>  - Issuer: COMODO RSA Domain Validation Secure Server CA, COMODO CA Limited, Salford, Greater Manchester, GB
>  - Fingerprint: 93:B8:AF:9F:0A:67:2F:3A:C9:BA:FF:86:BB:2C:08:47:02:7F:1D:8D
> (R)eject, accept (t)emporarily or accept (p)ermanently? t
> U    src/library/grid/R/grob.R
> ....
>
> ssltest shows two certificates of which only one is expired?
>
> -pd
>
>
>
> > On 30 May 2020, at 22:17 , G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >
> > On macOS 10.15.5 and R-devel:
> >
> >> download.file("https://www.r-project.org", tempfile())
> > trying URL 'https://www.r-project.org'
> > Error in download.file("https://www.r-project.org", tempfile()) :
> >  cannot open URL 'https://www.r-project.org'
> > In addition: Warning message:
> > In download.file("https://www.r-project.org", tempfile()) :
> >  URL 'https://www.r-project.org': status was 'SSL peer certificate or
> > SSH remote key was not OK'
> >
> > https://www.ssllabs.com/ssltest says:
> >
> > COMODO RSA Certification Authority
> > Fingerprint SHA256:
> > 4f32d5dc00f715250abcc486511e37f501a899deb3bf7ea8adbbd3aef1c412da
> > Pin SHA256: grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=
> > Valid untilSat, 30 May 2020 10:48:38 UTC (expired 8 hours and 51
> > minutes ago)   EXPIRED
> >
> > AFAICT this is the reason:
> > https://calnetweb.berkeley.edu/calnet-technologists/incommon-sectigo-certificate-service/addtrust-external-root-expiration-may-2020
> >
> > FYI,
> > Gabor
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sat May 30 23:09:04 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 30 May 2020 22:09:04 +0100
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
Message-ID: <CABtg=Km1m_DgUJ6Yusyqcx4XyCPQj0sKgmGtGurfL+=Krb5cDA@mail.gmail.com>

The certificate itself is ok, but some other certificate higher up in
the chain is not. It is possible to have multiple certificate chains,
and only one needs to be successful for to accept the certificate.
Some clients are able to use an alternate chain, so they are fine, but
other clients do not accept some cert(s) for the alternate chain to
work. This is why you get errors only with some clients.

Even Safari works on the same machine, but R does not, probably
because libcurl uses openssl which uses a different set of CA certs.

Gabor

On Sat, May 30, 2020 at 10:01 PM peter dalgaard <pdalgd at gmail.com> wrote:
>
> Odd. Safari has no problem and says certificate expires August 16 2020, but I also see the download.file issue with 4.0.1 beta:
>
> > download.file("https://www.r-project.org", tempfile())
> trying URL 'https://www.r-project.org'
> Error in download.file("https://www.r-project.org", tempfile()) :
>   cannot open URL 'https://www.r-project.org'
> In addition: Warning message:
> In download.file("https://www.r-project.org", tempfile()) :
>   URL 'https://www.r-project.org/': status was 'Peer certificate cannot be authenticated with given CA certificates'
>
> (note slightly different error message).
>
> svn is also affected:
>
> Peters-MacBook-Air:R pd$ svn up
> Updating '.':
> Error validating server certificate for 'https://svn.r-project.org:443':
>  - The certificate has expired.
> Certificate information:
>  - Hostname: *.r-project.org
>  - Valid: from Aug 16 00:00:00 2018 GMT until Aug 15 23:59:59 2020 GMT
>  - Issuer: COMODO RSA Domain Validation Secure Server CA, COMODO CA Limited, Salford, Greater Manchester, GB
>  - Fingerprint: 93:B8:AF:9F:0A:67:2F:3A:C9:BA:FF:86:BB:2C:08:47:02:7F:1D:8D
> (R)eject, accept (t)emporarily or accept (p)ermanently? t
> U    src/library/grid/R/grob.R
> ....
>
> ssltest shows two certificates of which only one is expired?
>
> -pd
>
>
>
> > On 30 May 2020, at 22:17 , G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >
> > On macOS 10.15.5 and R-devel:
> >
> >> download.file("https://www.r-project.org", tempfile())
> > trying URL 'https://www.r-project.org'
> > Error in download.file("https://www.r-project.org", tempfile()) :
> >  cannot open URL 'https://www.r-project.org'
> > In addition: Warning message:
> > In download.file("https://www.r-project.org", tempfile()) :
> >  URL 'https://www.r-project.org': status was 'SSL peer certificate or
> > SSH remote key was not OK'
> >
> > https://www.ssllabs.com/ssltest says:
> >
> > COMODO RSA Certification Authority
> > Fingerprint SHA256:
> > 4f32d5dc00f715250abcc486511e37f501a899deb3bf7ea8adbbd3aef1c412da
> > Pin SHA256: grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=
> > Valid untilSat, 30 May 2020 10:48:38 UTC (expired 8 hours and 51
> > minutes ago)   EXPIRED
> >
> > AFAICT this is the reason:
> > https://calnetweb.berkeley.edu/calnet-technologists/incommon-sectigo-certificate-service/addtrust-external-root-expiration-may-2020
> >
> > FYI,
> > Gabor
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>
>
>
>
>
>
>
>


From bob @end|ng |rom rud@|@  Sat May 30 23:16:44 2020
From: bob @end|ng |rom rud@|@ (Bob Rudis)
Date: Sat, 30 May 2020 17:16:44 -0400
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
Message-ID: <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>

# A tibble: 13 x 1
   site
   <chr>
 1 beta.r-project.org
 2 bugs.r-project.org
 3 cran-archive.r-project.org
 4 cran.r-project.org
 5 developer.r-project.org
 6 ess.r-project.org
 7 ftp.cran.r-project.org
 8 journal.r-project.org
 9 r-project.org
10 svn.r-project.org
11 user2011.r-project.org
12 www.cran.r-project.org
13 www.r-project.org

is the whole list b/c of the wildcard cert.

On Sat, May 30, 2020 at 5:07 PM Bob Rudis <bob at rud.is> wrote:
>
> It's the top of chain CA cert, so browsers are being lazy and helpful
> to humans by (incorrectly, albeit) relying on the existing trust
> relationship.
>
> libcurl (et al) is not nearly as forgiving.
>
> On Sat, May 30, 2020 at 5:01 PM peter dalgaard <pdalgd at gmail.com> wrote:
> >
> > Odd. Safari has no problem and says certificate expires August 16 2020, but I also see the download.file issue with 4.0.1 beta:
> >
> > > download.file("https://www.r-project.org", tempfile())
> > trying URL 'https://www.r-project.org'
> > Error in download.file("https://www.r-project.org", tempfile()) :
> >   cannot open URL 'https://www.r-project.org'
> > In addition: Warning message:
> > In download.file("https://www.r-project.org", tempfile()) :
> >   URL 'https://www.r-project.org/': status was 'Peer certificate cannot be authenticated with given CA certificates'
> >
> > (note slightly different error message).
> >
> > svn is also affected:
> >
> > Peters-MacBook-Air:R pd$ svn up
> > Updating '.':
> > Error validating server certificate for 'https://svn.r-project.org:443':
> >  - The certificate has expired.
> > Certificate information:
> >  - Hostname: *.r-project.org
> >  - Valid: from Aug 16 00:00:00 2018 GMT until Aug 15 23:59:59 2020 GMT
> >  - Issuer: COMODO RSA Domain Validation Secure Server CA, COMODO CA Limited, Salford, Greater Manchester, GB
> >  - Fingerprint: 93:B8:AF:9F:0A:67:2F:3A:C9:BA:FF:86:BB:2C:08:47:02:7F:1D:8D
> > (R)eject, accept (t)emporarily or accept (p)ermanently? t
> > U    src/library/grid/R/grob.R
> > ....
> >
> > ssltest shows two certificates of which only one is expired?
> >
> > -pd
> >
> >
> >
> > > On 30 May 2020, at 22:17 , G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> > >
> > > On macOS 10.15.5 and R-devel:
> > >
> > >> download.file("https://www.r-project.org", tempfile())
> > > trying URL 'https://www.r-project.org'
> > > Error in download.file("https://www.r-project.org", tempfile()) :
> > >  cannot open URL 'https://www.r-project.org'
> > > In addition: Warning message:
> > > In download.file("https://www.r-project.org", tempfile()) :
> > >  URL 'https://www.r-project.org': status was 'SSL peer certificate or
> > > SSH remote key was not OK'
> > >
> > > https://www.ssllabs.com/ssltest says:
> > >
> > > COMODO RSA Certification Authority
> > > Fingerprint SHA256:
> > > 4f32d5dc00f715250abcc486511e37f501a899deb3bf7ea8adbbd3aef1c412da
> > > Pin SHA256: grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=
> > > Valid untilSat, 30 May 2020 10:48:38 UTC (expired 8 hours and 51
> > > minutes ago)   EXPIRED
> > >
> > > AFAICT this is the reason:
> > > https://calnetweb.berkeley.edu/calnet-technologists/incommon-sectigo-certificate-service/addtrust-external-root-expiration-may-2020
> > >
> > > FYI,
> > > Gabor
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > --
> > Peter Dalgaard, Professor,
> > Center for Statistics, Copenhagen Business School
> > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> > Phone: (+45)38153501
> > Office: A 4.23
> > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From bob @end|ng |rom rud@|@  Sat May 30 23:23:53 2020
From: bob @end|ng |rom rud@|@ (Bob Rudis)
Date: Sat, 30 May 2020 17:23:53 -0400
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
Message-ID: <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>

I've updated the dashboard (https://rud.is/r-project-cert-status/)
script and my notifier script to account for the entire chain in each
cert.

On Sat, May 30, 2020 at 5:16 PM Bob Rudis <bob at rud.is> wrote:
>
> # A tibble: 13 x 1
>    site
>    <chr>
>  1 beta.r-project.org
>  2 bugs.r-project.org
>  3 cran-archive.r-project.org
>  4 cran.r-project.org
>  5 developer.r-project.org
>  6 ess.r-project.org
>  7 ftp.cran.r-project.org
>  8 journal.r-project.org
>  9 r-project.org
> 10 svn.r-project.org
> 11 user2011.r-project.org
> 12 www.cran.r-project.org
> 13 www.r-project.org
>
> is the whole list b/c of the wildcard cert.
>
> On Sat, May 30, 2020 at 5:07 PM Bob Rudis <bob at rud.is> wrote:
> >
> > It's the top of chain CA cert, so browsers are being lazy and helpful
> > to humans by (incorrectly, albeit) relying on the existing trust
> > relationship.
> >
> > libcurl (et al) is not nearly as forgiving.
> >
> > On Sat, May 30, 2020 at 5:01 PM peter dalgaard <pdalgd at gmail.com> wrote:
> > >
> > > Odd. Safari has no problem and says certificate expires August 16 2020, but I also see the download.file issue with 4.0.1 beta:
> > >
> > > > download.file("https://www.r-project.org", tempfile())
> > > trying URL 'https://www.r-project.org'
> > > Error in download.file("https://www.r-project.org", tempfile()) :
> > >   cannot open URL 'https://www.r-project.org'
> > > In addition: Warning message:
> > > In download.file("https://www.r-project.org", tempfile()) :
> > >   URL 'https://www.r-project.org/': status was 'Peer certificate cannot be authenticated with given CA certificates'
> > >
> > > (note slightly different error message).
> > >
> > > svn is also affected:
> > >
> > > Peters-MacBook-Air:R pd$ svn up
> > > Updating '.':
> > > Error validating server certificate for 'https://svn.r-project.org:443':
> > >  - The certificate has expired.
> > > Certificate information:
> > >  - Hostname: *.r-project.org
> > >  - Valid: from Aug 16 00:00:00 2018 GMT until Aug 15 23:59:59 2020 GMT
> > >  - Issuer: COMODO RSA Domain Validation Secure Server CA, COMODO CA Limited, Salford, Greater Manchester, GB
> > >  - Fingerprint: 93:B8:AF:9F:0A:67:2F:3A:C9:BA:FF:86:BB:2C:08:47:02:7F:1D:8D
> > > (R)eject, accept (t)emporarily or accept (p)ermanently? t
> > > U    src/library/grid/R/grob.R
> > > ....
> > >
> > > ssltest shows two certificates of which only one is expired?
> > >
> > > -pd
> > >
> > >
> > >
> > > > On 30 May 2020, at 22:17 , G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> > > >
> > > > On macOS 10.15.5 and R-devel:
> > > >
> > > >> download.file("https://www.r-project.org", tempfile())
> > > > trying URL 'https://www.r-project.org'
> > > > Error in download.file("https://www.r-project.org", tempfile()) :
> > > >  cannot open URL 'https://www.r-project.org'
> > > > In addition: Warning message:
> > > > In download.file("https://www.r-project.org", tempfile()) :
> > > >  URL 'https://www.r-project.org': status was 'SSL peer certificate or
> > > > SSH remote key was not OK'
> > > >
> > > > https://www.ssllabs.com/ssltest says:
> > > >
> > > > COMODO RSA Certification Authority
> > > > Fingerprint SHA256:
> > > > 4f32d5dc00f715250abcc486511e37f501a899deb3bf7ea8adbbd3aef1c412da
> > > > Pin SHA256: grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=
> > > > Valid untilSat, 30 May 2020 10:48:38 UTC (expired 8 hours and 51
> > > > minutes ago)   EXPIRED
> > > >
> > > > AFAICT this is the reason:
> > > > https://calnetweb.berkeley.edu/calnet-technologists/incommon-sectigo-certificate-service/addtrust-external-root-expiration-may-2020
> > > >
> > > > FYI,
> > > > Gabor
> > > >
> > > > ______________________________________________
> > > > R-devel at r-project.org mailing list
> > > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> > > --
> > > Peter Dalgaard, Professor,
> > > Center for Statistics, Copenhagen Business School
> > > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> > > Phone: (+45)38153501
> > > Office: A 4.23
> > > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel


From bob @end|ng |rom rud@|@  Sat May 30 23:24:48 2020
From: bob @end|ng |rom rud@|@ (Bob Rudis)
Date: Sat, 30 May 2020 17:24:48 -0400
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
Message-ID: <CAA-FpKU2xozR-3bcmAjx-SfQAEQsv+jqss=vXa0QuFaOm8d-_A@mail.gmail.com>

The browsers still shouldn't trust it. The CA cert is expired.

On Sat, May 30, 2020 at 5:23 PM Bob Rudis <bob at rud.is> wrote:
>
> I've updated the dashboard (https://rud.is/r-project-cert-status/)
> script and my notifier script to account for the entire chain in each
> cert.
>
> On Sat, May 30, 2020 at 5:16 PM Bob Rudis <bob at rud.is> wrote:
> >
> > # A tibble: 13 x 1
> >    site
> >    <chr>
> >  1 beta.r-project.org
> >  2 bugs.r-project.org
> >  3 cran-archive.r-project.org
> >  4 cran.r-project.org
> >  5 developer.r-project.org
> >  6 ess.r-project.org
> >  7 ftp.cran.r-project.org
> >  8 journal.r-project.org
> >  9 r-project.org
> > 10 svn.r-project.org
> > 11 user2011.r-project.org
> > 12 www.cran.r-project.org
> > 13 www.r-project.org
> >
> > is the whole list b/c of the wildcard cert.
> >
> > On Sat, May 30, 2020 at 5:07 PM Bob Rudis <bob at rud.is> wrote:
> > >
> > > It's the top of chain CA cert, so browsers are being lazy and helpful
> > > to humans by (incorrectly, albeit) relying on the existing trust
> > > relationship.
> > >
> > > libcurl (et al) is not nearly as forgiving.
> > >
> > > On Sat, May 30, 2020 at 5:01 PM peter dalgaard <pdalgd at gmail.com> wrote:
> > > >
> > > > Odd. Safari has no problem and says certificate expires August 16 2020, but I also see the download.file issue with 4.0.1 beta:
> > > >
> > > > > download.file("https://www.r-project.org", tempfile())
> > > > trying URL 'https://www.r-project.org'
> > > > Error in download.file("https://www.r-project.org", tempfile()) :
> > > >   cannot open URL 'https://www.r-project.org'
> > > > In addition: Warning message:
> > > > In download.file("https://www.r-project.org", tempfile()) :
> > > >   URL 'https://www.r-project.org/': status was 'Peer certificate cannot be authenticated with given CA certificates'
> > > >
> > > > (note slightly different error message).
> > > >
> > > > svn is also affected:
> > > >
> > > > Peters-MacBook-Air:R pd$ svn up
> > > > Updating '.':
> > > > Error validating server certificate for 'https://svn.r-project.org:443':
> > > >  - The certificate has expired.
> > > > Certificate information:
> > > >  - Hostname: *.r-project.org
> > > >  - Valid: from Aug 16 00:00:00 2018 GMT until Aug 15 23:59:59 2020 GMT
> > > >  - Issuer: COMODO RSA Domain Validation Secure Server CA, COMODO CA Limited, Salford, Greater Manchester, GB
> > > >  - Fingerprint: 93:B8:AF:9F:0A:67:2F:3A:C9:BA:FF:86:BB:2C:08:47:02:7F:1D:8D
> > > > (R)eject, accept (t)emporarily or accept (p)ermanently? t
> > > > U    src/library/grid/R/grob.R
> > > > ....
> > > >
> > > > ssltest shows two certificates of which only one is expired?
> > > >
> > > > -pd
> > > >
> > > >
> > > >
> > > > > On 30 May 2020, at 22:17 , G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> > > > >
> > > > > On macOS 10.15.5 and R-devel:
> > > > >
> > > > >> download.file("https://www.r-project.org", tempfile())
> > > > > trying URL 'https://www.r-project.org'
> > > > > Error in download.file("https://www.r-project.org", tempfile()) :
> > > > >  cannot open URL 'https://www.r-project.org'
> > > > > In addition: Warning message:
> > > > > In download.file("https://www.r-project.org", tempfile()) :
> > > > >  URL 'https://www.r-project.org': status was 'SSL peer certificate or
> > > > > SSH remote key was not OK'
> > > > >
> > > > > https://www.ssllabs.com/ssltest says:
> > > > >
> > > > > COMODO RSA Certification Authority
> > > > > Fingerprint SHA256:
> > > > > 4f32d5dc00f715250abcc486511e37f501a899deb3bf7ea8adbbd3aef1c412da
> > > > > Pin SHA256: grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=
> > > > > Valid untilSat, 30 May 2020 10:48:38 UTC (expired 8 hours and 51
> > > > > minutes ago)   EXPIRED
> > > > >
> > > > > AFAICT this is the reason:
> > > > > https://calnetweb.berkeley.edu/calnet-technologists/incommon-sectigo-certificate-service/addtrust-external-root-expiration-may-2020
> > > > >
> > > > > FYI,
> > > > > Gabor
> > > > >
> > > > > ______________________________________________
> > > > > R-devel at r-project.org mailing list
> > > > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > > >
> > > > --
> > > > Peter Dalgaard, Professor,
> > > > Center for Statistics, Copenhagen Business School
> > > > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> > > > Phone: (+45)38153501
> > > > Office: A 4.23
> > > > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> > > >
> > > > ______________________________________________
> > > > R-devel at r-project.org mailing list
> > > > https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat May 30 23:40:23 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 30 May 2020 17:40:23 -0400
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
Message-ID: <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>

On 30/05/2020 5:23 p.m., Bob Rudis wrote:
> I've updated the dashboard (https://rud.is/r-project-cert-status/)
> script and my notifier script to account for the entire chain in each
> cert.

You never posted which certificate has expired.  Your dashboard shows 
they're all valid, but the download still fails, presumably because 
something not shown has expired.

Hopefully someone who can actually act on this can figure out what needs 
doing.

Duncan Murdoch

> 
> On Sat, May 30, 2020 at 5:16 PM Bob Rudis <bob at rud.is> wrote:
>>
>> # A tibble: 13 x 1
>>     site
>>     <chr>
>>   1 beta.r-project.org
>>   2 bugs.r-project.org
>>   3 cran-archive.r-project.org
>>   4 cran.r-project.org
>>   5 developer.r-project.org
>>   6 ess.r-project.org
>>   7 ftp.cran.r-project.org
>>   8 journal.r-project.org
>>   9 r-project.org
>> 10 svn.r-project.org
>> 11 user2011.r-project.org
>> 12 www.cran.r-project.org
>> 13 www.r-project.org
>>
>> is the whole list b/c of the wildcard cert.
>>
>> On Sat, May 30, 2020 at 5:07 PM Bob Rudis <bob at rud.is> wrote:
>>>
>>> It's the top of chain CA cert, so browsers are being lazy and helpful
>>> to humans by (incorrectly, albeit) relying on the existing trust
>>> relationship.
>>>
>>> libcurl (et al) is not nearly as forgiving.
>>>
>>> On Sat, May 30, 2020 at 5:01 PM peter dalgaard <pdalgd at gmail.com> wrote:
>>>>
>>>> Odd. Safari has no problem and says certificate expires August 16 2020, but I also see the download.file issue with 4.0.1 beta:
>>>>
>>>>> download.file("https://www.r-project.org", tempfile())
>>>> trying URL 'https://www.r-project.org'
>>>> Error in download.file("https://www.r-project.org", tempfile()) :
>>>>    cannot open URL 'https://www.r-project.org'
>>>> In addition: Warning message:
>>>> In download.file("https://www.r-project.org", tempfile()) :
>>>>    URL 'https://www.r-project.org/': status was 'Peer certificate cannot be authenticated with given CA certificates'
>>>>
>>>> (note slightly different error message).
>>>>
>>>> svn is also affected:
>>>>
>>>> Peters-MacBook-Air:R pd$ svn up
>>>> Updating '.':
>>>> Error validating server certificate for 'https://svn.r-project.org:443':
>>>>   - The certificate has expired.
>>>> Certificate information:
>>>>   - Hostname: *.r-project.org
>>>>   - Valid: from Aug 16 00:00:00 2018 GMT until Aug 15 23:59:59 2020 GMT
>>>>   - Issuer: COMODO RSA Domain Validation Secure Server CA, COMODO CA Limited, Salford, Greater Manchester, GB
>>>>   - Fingerprint: 93:B8:AF:9F:0A:67:2F:3A:C9:BA:FF:86:BB:2C:08:47:02:7F:1D:8D
>>>> (R)eject, accept (t)emporarily or accept (p)ermanently? t
>>>> U    src/library/grid/R/grob.R
>>>> ....
>>>>
>>>> ssltest shows two certificates of which only one is expired?
>>>>
>>>> -pd
>>>>
>>>>
>>>>
>>>>> On 30 May 2020, at 22:17 , G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>>
>>>>> On macOS 10.15.5 and R-devel:
>>>>>
>>>>>> download.file("https://www.r-project.org", tempfile())
>>>>> trying URL 'https://www.r-project.org'
>>>>> Error in download.file("https://www.r-project.org", tempfile()) :
>>>>>   cannot open URL 'https://www.r-project.org'
>>>>> In addition: Warning message:
>>>>> In download.file("https://www.r-project.org", tempfile()) :
>>>>>   URL 'https://www.r-project.org': status was 'SSL peer certificate or
>>>>> SSH remote key was not OK'
>>>>>
>>>>> https://www.ssllabs.com/ssltest says:
>>>>>
>>>>> COMODO RSA Certification Authority
>>>>> Fingerprint SHA256:
>>>>> 4f32d5dc00f715250abcc486511e37f501a899deb3bf7ea8adbbd3aef1c412da
>>>>> Pin SHA256: grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=
>>>>> Valid untilSat, 30 May 2020 10:48:38 UTC (expired 8 hours and 51
>>>>> minutes ago)   EXPIRED
>>>>>
>>>>> AFAICT this is the reason:
>>>>> https://calnetweb.berkeley.edu/calnet-technologists/incommon-sectigo-certificate-service/addtrust-external-root-expiration-may-2020
>>>>>
>>>>> FYI,
>>>>> Gabor
>>>>>
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>> --
>>>> Peter Dalgaard, Professor,
>>>> Center for Statistics, Copenhagen Business School
>>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>>> Phone: (+45)38153501
>>>> Office: A 4.23
>>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From jeroen @end|ng |rom berke|ey@edu  Sun May 31 00:01:27 2020
From: jeroen @end|ng |rom berke|ey@edu (Jeroen Ooms)
Date: Sun, 31 May 2020 00:01:27 +0200
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
Message-ID: <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>

On Sat, May 30, 2020 at 11:40 PM Duncan Murdoch
<murdoch.duncan at gmail.com> wrote:
>
> On 30/05/2020 5:23 p.m., Bob Rudis wrote:
> > I've updated the dashboard (https://rud.is/r-project-cert-status/)
> > script and my notifier script to account for the entire chain in each
> > cert.
>
> You never posted which certificate has expired.  Your dashboard shows
> they're all valid, but the download still fails, presumably because
> something not shown has expired.

To see the problem in R:

   certs <- openssl::download_ssl_cert('cran.r-project.org')
   as.list(certs[[3]])

Shows the root cert expires today.

> Hopefully someone who can actually act on this can figure out what needs
> doing.

The apache server will have a config entry SSLCertificateFile which
points to a cert bundle (in nginx servers this is called
"ssl_certificate"). If you open this in a text editor it contains the
3 certs, in PEM format, so 3 entires like this:

-----BEGIN CERTIFICATE-----
[base64 cert]
-----END CERTIFICATE-----

What you need to do is replace the final certificate with this one
(just copy-paste the base64 cert): https://crt.sh/?d=1720081 .Then
restart the server.

See here for details:
https://support.sectigo.com/articles/Knowledge/Sectigo-AddTrust-External-CA-Root-Expiring-May-30-2020
. This site talks about "For business processes that depend on very
old systems...." but the reality is that this affects everything that
uses openssl for https, including curl, svn, etc.


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sun May 31 00:11:30 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 30 May 2020 23:11:30 +0100
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
Message-ID: <CABtg=KnzUVCBd7RcaOOx+NpyOyZBjqhToSUwnVp2Sm8QdUg0oQ@mail.gmail.com>

The expired cert was in my initial email. This is a CA cert. If you go
to https://www.ssllabs.com/ssltest/analyze.html?d=svn.r-project.org
and wait for the analysis, and then expand the certification paths,
then you'll see three possible paths. (For most simulated clients.)
Two are trusted, one is not. The browsers can use a trusted one, e.g.
my Chrome uses the first, you can see this if you click on the lock
before the URL, and then on "Certificate". You'll see a chain of three
certs, just like on the ssllabs page.

Apparently, R / libcurl / openssl cannot use them, I am not entirely sure why.

Gabor

On Sat, May 30, 2020 at 10:40 PM Duncan Murdoch
<murdoch.duncan at gmail.com> wrote:
>
> On 30/05/2020 5:23 p.m., Bob Rudis wrote:
> > I've updated the dashboard (https://rud.is/r-project-cert-status/)
> > script and my notifier script to account for the entire chain in each
> > cert.
>
> You never posted which certificate has expired.  Your dashboard shows
> they're all valid, but the download still fails, presumably because
> something not shown has expired.
>
> Hopefully someone who can actually act on this can figure out what needs
> doing.
>
> Duncan Murdoch
>
> >
> > On Sat, May 30, 2020 at 5:16 PM Bob Rudis <bob at rud.is> wrote:
> >>
> >> # A tibble: 13 x 1
> >>     site
> >>     <chr>
> >>   1 beta.r-project.org
> >>   2 bugs.r-project.org
> >>   3 cran-archive.r-project.org
> >>   4 cran.r-project.org
> >>   5 developer.r-project.org
> >>   6 ess.r-project.org
> >>   7 ftp.cran.r-project.org
> >>   8 journal.r-project.org
> >>   9 r-project.org
> >> 10 svn.r-project.org
> >> 11 user2011.r-project.org
> >> 12 www.cran.r-project.org
> >> 13 www.r-project.org
> >>
> >> is the whole list b/c of the wildcard cert.
> >>
> >> On Sat, May 30, 2020 at 5:07 PM Bob Rudis <bob at rud.is> wrote:
> >>>
> >>> It's the top of chain CA cert, so browsers are being lazy and helpful
> >>> to humans by (incorrectly, albeit) relying on the existing trust
> >>> relationship.
> >>>
> >>> libcurl (et al) is not nearly as forgiving.
> >>>
> >>> On Sat, May 30, 2020 at 5:01 PM peter dalgaard <pdalgd at gmail.com> wrote:
> >>>>
> >>>> Odd. Safari has no problem and says certificate expires August 16 2020, but I also see the download.file issue with 4.0.1 beta:
> >>>>
> >>>>> download.file("https://www.r-project.org", tempfile())
> >>>> trying URL 'https://www.r-project.org'
> >>>> Error in download.file("https://www.r-project.org", tempfile()) :
> >>>>    cannot open URL 'https://www.r-project.org'
> >>>> In addition: Warning message:
> >>>> In download.file("https://www.r-project.org", tempfile()) :
> >>>>    URL 'https://www.r-project.org/': status was 'Peer certificate cannot be authenticated with given CA certificates'
> >>>>
> >>>> (note slightly different error message).
> >>>>
> >>>> svn is also affected:
> >>>>
> >>>> Peters-MacBook-Air:R pd$ svn up
> >>>> Updating '.':
> >>>> Error validating server certificate for 'https://svn.r-project.org:443':
> >>>>   - The certificate has expired.
> >>>> Certificate information:
> >>>>   - Hostname: *.r-project.org
> >>>>   - Valid: from Aug 16 00:00:00 2018 GMT until Aug 15 23:59:59 2020 GMT
> >>>>   - Issuer: COMODO RSA Domain Validation Secure Server CA, COMODO CA Limited, Salford, Greater Manchester, GB
> >>>>   - Fingerprint: 93:B8:AF:9F:0A:67:2F:3A:C9:BA:FF:86:BB:2C:08:47:02:7F:1D:8D
> >>>> (R)eject, accept (t)emporarily or accept (p)ermanently? t
> >>>> U    src/library/grid/R/grob.R
> >>>> ....
> >>>>
> >>>> ssltest shows two certificates of which only one is expired?
> >>>>
> >>>> -pd
> >>>>
> >>>>
> >>>>
> >>>>> On 30 May 2020, at 22:17 , G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >>>>>
> >>>>> On macOS 10.15.5 and R-devel:
> >>>>>
> >>>>>> download.file("https://www.r-project.org", tempfile())
> >>>>> trying URL 'https://www.r-project.org'
> >>>>> Error in download.file("https://www.r-project.org", tempfile()) :
> >>>>>   cannot open URL 'https://www.r-project.org'
> >>>>> In addition: Warning message:
> >>>>> In download.file("https://www.r-project.org", tempfile()) :
> >>>>>   URL 'https://www.r-project.org': status was 'SSL peer certificate or
> >>>>> SSH remote key was not OK'
> >>>>>
> >>>>> https://www.ssllabs.com/ssltest says:
> >>>>>
> >>>>> COMODO RSA Certification Authority
> >>>>> Fingerprint SHA256:
> >>>>> 4f32d5dc00f715250abcc486511e37f501a899deb3bf7ea8adbbd3aef1c412da
> >>>>> Pin SHA256: grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME=
> >>>>> Valid untilSat, 30 May 2020 10:48:38 UTC (expired 8 hours and 51
> >>>>> minutes ago)   EXPIRED
> >>>>>
> >>>>> AFAICT this is the reason:
> >>>>> https://calnetweb.berkeley.edu/calnet-technologists/incommon-sectigo-certificate-service/addtrust-external-root-expiration-may-2020
> >>>>>
> >>>>> FYI,
> >>>>> Gabor
> >>>>>
> >>>>> ______________________________________________
> >>>>> R-devel at r-project.org mailing list
> >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>
> >>>> --
> >>>> Peter Dalgaard, Professor,
> >>>> Center for Statistics, Copenhagen Business School
> >>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> >>>> Phone: (+45)38153501
> >>>> Office: A 4.23
> >>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> >>>>
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sun May 31 00:32:44 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 30 May 2020 23:32:44 +0100
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
Message-ID: <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>

On Sat, May 30, 2020 at 11:02 PM Jeroen Ooms <jeroen at berkeley.edu> wrote:
[...]
>
> What you need to do is replace the final certificate with this one
> (just copy-paste the base64 cert): https://crt.sh/?d=1720081 .Then
> restart the server.

You can also export this from Keychain Access on macOS, btw. find
"COMODO RSA Certification Authority" and right click, export, PEM
format.

> See here for details:
> https://support.sectigo.com/articles/Knowledge/Sectigo-AddTrust-External-CA-Root-Expiring-May-30-2020
> . This site talks about "For business processes that depend on very
> old systems...." but the reality is that this affects everything that
> uses openssl for https, including curl, svn, etc.

Btw. why does this affect openssl? That root cert was published in
2010, surely openssl should know about it? Maybe libcurl / openssl
only uses the chain provided by the server? Without trying to use an
alternate chain?

Gabor


From j@goreck| @end|ng |rom w|t@edu@p|  Sun May 31 14:52:05 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Sun, 31 May 2020 13:52:05 +0100
Subject: [Rd] order function called on a data.frame?
In-Reply-To: <CAF8bMcYm4WYzKG4HxBaunRLEQEK3p+GgP07_BHa8do3PU+Ap5g@mail.gmail.com>
References: <CAOO9MKX53QQuFk+u=octbhcmsg8AQVpMws1RtDomWwgJ=Zf8tQ@mail.gmail.com>
 <982d50f0-ca20-b860-9f06-3e30d58d58f8@sapo.pt>
 <CAOQ5Nyc4ehE36EU9M09af5NUZ37QCHe4e-OLBEvbMOF+pZ24QA@mail.gmail.com>
 <CAF8bMcYm4WYzKG4HxBaunRLEQEK3p+GgP07_BHa8do3PU+Ap5g@mail.gmail.com>
Message-ID: <CAOO9MKVdBhqPU9P_ViPBVLkVf3N9y8eOnpLfOMJ+nPT0vKPB-A@mail.gmail.com>

So maybe for now just warning/error?
Should be much smaller change then those proposed by William and Michael.

Rui,
Your example of order list does raise error, but if you remove second
argument, it won't raise error anymore.

On Mon, May 18, 2020 at 5:27 PM William Dunlap via R-devel
<r-devel at r-project.org> wrote:
>
> do.call(order, df).  ->  do.call(order, unname(df)).
>
> While you are looking at order(), it would be nice if ';decreasing' could
> be a vector the the length of list(...) so you could ask to sort some
> columns in increasing order and some decreasing.  I thought I put this on
> bugzilla eons ago, but perhaps not.
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>
> On Mon, May 18, 2020 at 8:52 AM Michael Lawrence via R-devel <
> r-devel at r-project.org> wrote:
>
> > I guess we could make it do the equivalent of do.call(order, df).
> >
> > On Mon, May 18, 2020 at 8:32 AM Rui Barradas <ruipbarradas at sapo.pt> wrote:
> > >
> > > Hello,
> > >
> > > There is a result with lists? I am getting
> > >
> > >
> > > order(list(letters, 1:26))
> > > #Error in order(list(letters, 1:26)) :
> > > #  unimplemented type 'list' in 'orderVector1'
> > >
> > > order(data.frame(letters, 1:26))
> > > # [1] 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
> > > #[22] 48 49 50 51 52  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
> > > #[43] 17 18 19 20 21 22 23 24 25 26
> > >
> > >
> > > And I agree that order with data.frames should give a warning. The
> > > result is indeed useless:
> > >
> > > data.frame(letters, 1:26)[order(data.frame(letters, 1:26)), ]
> > >
> > >
> > > Hope this helps,
> > >
> > > Rui Barradas
> > >
> > >
> > > ?s 00:19 de 18/05/20, Jan Gorecki escreveu:
> > > > Hi,
> > > > base::order main input arguments are defined as:
> > > >
> > > > a sequence of numeric, complex, character or logical vectors, all of
> > > > the same length, or a classed R object
> > > >
> > > > When passing a list or a data.frame, the resuts seems to be a bit
> > > > useless. Shouldn't that raise an error, or at least warning?
> > > >
> > > > Best Regards,
> > > > Jan Gorecki
> > > >
> > > > ______________________________________________
> > > > R-devel at r-project.org mailing list
> > > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > > >
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
> >
> > --
> > Michael Lawrence
> > Senior Scientist, Data Science and Statistical Computing
> > Genentech, A Member of the Roche Group
> > Office +1 (650) 225-7760
> > michafla at gene.com
> >
> > Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sun May 31 17:09:56 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sun, 31 May 2020 16:09:56 +0100
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
Message-ID: <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>

On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
[...]
> Btw. why does this affect openssl? That root cert was published in
> 2010, surely openssl should know about it? Maybe libcurl / openssl
> only uses the chain provided by the server? Without trying to use an
> alternate chain?

Yes, indeed it seems that old OpenSSL versions cannot handle
alternative certificate chains. This has been fixed in OpenSSL in
2015, so modern Linux systems should be fine. However, macOS uses
LibreSSL, and LibreSSL never fixed this issue. E.g.
https://github.com/libressl-portable/portable/issues/595

r-project.org can be updated to send the new root certificate, which
will solve most of our problems, but we'll probably have issues with
other web sites that'll update slower or never.

FWIW I built macOS binaries for the curl package, using a static
libcurl and macOS Secure Transport, so these binaries does not have
this issue.

They are at https://files.r-hub.io/curl-macos-static and they can be
installed with
install.packages("curl", repos =
"https://files.r-hub.io/curl-macos-static", type = "binary")

They support R 3.2 and up, including R 4.1, and should work on all
macOS versions that the given R release supports.

Gabor


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sun May 31 17:12:54 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sun, 31 May 2020 16:12:54 +0100
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
Message-ID: <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>

Btw. it would be also possible to create a macOS R installer that
embeds a static or dynamic libcurl with Secure Transport, instead of
the Apple default LibreSSL.

This might be too late for R 4.0.1, I don't know.

Gabor

On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> [...]
> > Btw. why does this affect openssl? That root cert was published in
> > 2010, surely openssl should know about it? Maybe libcurl / openssl
> > only uses the chain provided by the server? Without trying to use an
> > alternate chain?
>
> Yes, indeed it seems that old OpenSSL versions cannot handle
> alternative certificate chains. This has been fixed in OpenSSL in
> 2015, so modern Linux systems should be fine. However, macOS uses
> LibreSSL, and LibreSSL never fixed this issue. E.g.
> https://github.com/libressl-portable/portable/issues/595
>
> r-project.org can be updated to send the new root certificate, which
> will solve most of our problems, but we'll probably have issues with
> other web sites that'll update slower or never.
>
> FWIW I built macOS binaries for the curl package, using a static
> libcurl and macOS Secure Transport, so these binaries does not have
> this issue.
>
> They are at https://files.r-hub.io/curl-macos-static and they can be
> installed with
> install.packages("curl", repos =
> "https://files.r-hub.io/curl-macos-static", type = "binary")
>
> They support R 3.2 and up, including R 4.1, and should work on all
> macOS versions that the given R release supports.
>
> Gabor


