From p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r  Tue Feb  1 16:16:47 2022
From: p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r (Patrick Giraudoux)
Date: Tue, 1 Feb 2022 16:16:47 +0100
Subject: [Rd] 
 =?utf-8?q?trouble_with_package_loading=3A_Function_found_wh?=
 =?utf-8?q?en_exporting_methods_from_the_namespace_=E2=80=98raster?=
 =?utf-8?b?4oCZIHdoaWNoIGlzIG5vdCBTNCBnZW5lcmljOiDigJhhbGwuZXF1YWzigJk=?=
In-Reply-To: <SV0P279MB04758AD91D4739D2BAA5F067EE259@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>
References: <SV0P279MB04758AD91D4739D2BAA5F067EE259@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>
Message-ID: <d18b5037-d2a2-3d1e-1400-b2bc2f29f5b5@univ-fcomte.fr>

A Master student of? us has just send us the way he has found to get out 
of the problem met. Here is the translation of his mail:

I have updated R to 4.1.2 using updateR() of the package installr from 
the R consol, specifying I want to keep the packages.

I have installed Rtools from there: 
https://cran.rstudio.com/bin/windows/Rtools/rtools40.html

Then I have opened the consol and applied:

write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", 
append = TRUE)

then restarted R, and checked the RTools path applying:

Restart R, and verify that make can be found, which should show the path 
to your Rtools installation.

Sys.which("make")
## "C:\\rtools40\\usr\\bin\\make.exe"

then install.packages("terra", type = "source")

It has solved the problem, pgirmess work without trouble now.

This fit with Roger's info about late updates from *.tar.gz and *.zip? 
on CRAN messing a standard installation.

Best,

Patrick

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Feb  1 18:58:54 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 1 Feb 2022 18:58:54 +0100
Subject: [Rd] inconsistency between as.list(df) and as.list(mat) with
 mode(mat) == "list"
In-Reply-To: <CAD4oTHFotrgFG6m4oL7EsxdFjf=_4b485kgLzVNifwLZgGiOOA@mail.gmail.com>
References: <CAD4oTHFotrgFG6m4oL7EsxdFjf=_4b485kgLzVNifwLZgGiOOA@mail.gmail.com>
Message-ID: <25081.29918.780598.770679@stat.math.ethz.ch>

>>>>> Gabriel Becker 
>>>>>     on Mon, 31 Jan 2022 12:11:10 -0800 writes:

  (using an HTMLifying mail client .... so I've manually pretty edited a bit)

    > Hi All,

    > I ran into the following the other day:

    >> mat <- matrix(1:6, nrow = 2)
    >> as.list(mat)
    > [[1]]
    > [1] 1

    > *<snip>*

    > [[6]]
    > [1] 6

    >> mat2 <- mat
    >> mode(mat2) <- "list"
    >> as.list(mat2)
    >   [,1] [,2] [,3]
    > [1,] 1    3    5
    > [2,] 2    4    6


    > I realize this is not guaranteed by the documentation, and the behavior is
    > technically (if I would argue fairly subtly) as documented. Generally,
    > however, as.list returns something without dimensions (other than length),
    > regardless of the dimensions of the input.

    > Furthermore, this behavior agrees with neither the data.frame (which are
    > lists) method nor the non-list-mode matrix behavior which comes from the
    > default behavior. Both result in a non-dimensioned object (the data.frame
    > method explicitly and intentionally so).

    > Matrices of mode "list" are fairly rare, in practice, I would think, but I
    > wonder if the as.list behavior for them should agree with that of similar
    > dimensioned objects (data.frames and non-list-mode matrices). As a user, I
    > certainly expected it to, and had to read the docs with a careful eye
    > before I realized what was happening and why.

    > For the record, as.vector  does not drop dimension (or anything else) from
    > data.frames nor list-matrices, so there the behaviors agree, although we do
    > get:

    >> is.vector(mat)
    > [1] FALSE

    >> is.vector(mat2)
    > [1] FALSE

    >> is.vector(mtcars)
    > [1] FALSE


    > Which does make the fact that for the latter two as.vector returns the
    > objects unmodified somewhat puzzling.

    > I wonder if as.list and as.vector could get a strict argument - it could
    > default to FALSE for a deprecation period, or forever if preferred by
    > R-core -  where attributes are always stripped for 'strict' conversions.

    > Also, as a final aside, the documentation at ?as.list says:

    > Attributes may be
    > dropped unless the argument already is a list or expression.

    > (This is inconsistent with functions such as ?as.character? which
    > always drop attributes, *and is for efficiency since lists can be*
    > *     expensive to copy.*)

    > (emphasis mine). Is this still the case with shallow duplication? I was
    > under the impression that it was not.

Well, you are entering the topic Kurt Hornik and I  tried to
improve on, 2  months ago  and then had to give up (for the time
being) with only a small step of progress;  at the time
producing extra work for CRAN team members who saw many dozens
of CRAN package failing just because we tried to change
is.vector() / as.vector()  to become slightly less inconsistent.

There were many misuse problems in these CRAN packages,
which basically used  is.vector(obj) to check if `obj` was not
a matrix.

During ca. one week in early December 2021, we (mostly me) tried
several things and had to conditionalize (via a 
environment variable you must set *before* starting R) in the
end most of the change, because we saw too much R code out
there, being based on wrong assumptions ...
------------------------------------------------------------------------
r81299 | maechler | 2021-12-06 13:21:26 +0100 (Mon, 06. Dec 2021) | 1 Zeile
Ge?nderte Pfade:
   M /trunk/doc/NEWS.Rd
   M /trunk/src/library/base/man/vector.Rd
   M /trunk/src/main/coerce.c
   M /trunk/tests/demos.Rout.save
   M /trunk/tests/reg-tests-1d.R

conditionalize most as.vector/is.vector changes from 81252,81270,81274,81285-6
------------------------------------------------------------------------

I mentioned above that one problem that useRs use is.vector() when they
shouldn't -- because they are not aware that list() and
expression()s  also fulfill `is.vector()`.
I would have recommended to use (is.atomic() && !is.array())
instead conceptually called is.simplevector() in my mind.

But there's another fact which dirties the water further:
is.atomic() actually does *not* check for atomic vectors,
but for  "atomic vector _OR_ NULL"  which I've found unfortunate.

Since then, I've contemplated introducing a new primitive
is.atomicV()  which really is true only if its argument is an
atomic vector.
One thing not so nice is its name. To make that even longer is
strongly against my taste ("testing for 'atom' should be short
and succinct ")  so maybe people would agree with   is.atom()

... yes, I've somewhat hijacked your thread to talk about part
of the underlying problem(s) that I would like to address first.


Martin


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Feb  1 21:17:08 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 1 Feb 2022 15:17:08 -0500
Subject: [Rd] inconsistency between as.list(df) and as.list(mat) with
 mode(mat) == "list"
In-Reply-To: <25081.29918.780598.770679@stat.math.ethz.ch>
References: <CAD4oTHFotrgFG6m4oL7EsxdFjf=_4b485kgLzVNifwLZgGiOOA@mail.gmail.com>
 <25081.29918.780598.770679@stat.math.ethz.ch>
Message-ID: <35724075-cbcf-b5cb-3001-fe186273ab9b@gmail.com>

The definitions of is.vector() etc. are now so old, it's probably 
hopeless to change them.  But there are already some definitions in the 
rlang package that look more consistent and rational.  For example, 
is_atomic() and is_vector() fix the issues you were complaining about.

The rlang package doesn't have many hard dependencies (just utils), so 
you could easily use it instead of the base test functions.  On the 
other hand:  It does have a long list of packages in Suggests,
and it doesn't really fix Gabe's issue:  as_list is more consistent than 
as.list, but it gives a deprecation warning:

Warning message:
`as_list()` is deprecated as of rlang 0.4.0
Please use `vctrs::vec_cast()` instead.
This warning is displayed once per session.

My conclusion is that it would make more sense to import a subset of the 
definitions and names from rlang into base R.

Duncan Murdoch

On 01/02/2022 12:58 p.m., Martin Maechler wrote:
>>>>>> Gabriel Becker
>>>>>>      on Mon, 31 Jan 2022 12:11:10 -0800 writes:
> 
>    (using an HTMLifying mail client .... so I've manually pretty edited a bit)
> 
>      > Hi All,
> 
>      > I ran into the following the other day:
> 
>      >> mat <- matrix(1:6, nrow = 2)
>      >> as.list(mat)
>      > [[1]]
>      > [1] 1
> 
>      > *<snip>*
> 
>      > [[6]]
>      > [1] 6
> 
>      >> mat2 <- mat
>      >> mode(mat2) <- "list"
>      >> as.list(mat2)
>      >   [,1] [,2] [,3]
>      > [1,] 1    3    5
>      > [2,] 2    4    6
> 
> 
>      > I realize this is not guaranteed by the documentation, and the behavior is
>      > technically (if I would argue fairly subtly) as documented. Generally,
>      > however, as.list returns something without dimensions (other than length),
>      > regardless of the dimensions of the input.
> 
>      > Furthermore, this behavior agrees with neither the data.frame (which are
>      > lists) method nor the non-list-mode matrix behavior which comes from the
>      > default behavior. Both result in a non-dimensioned object (the data.frame
>      > method explicitly and intentionally so).
> 
>      > Matrices of mode "list" are fairly rare, in practice, I would think, but I
>      > wonder if the as.list behavior for them should agree with that of similar
>      > dimensioned objects (data.frames and non-list-mode matrices). As a user, I
>      > certainly expected it to, and had to read the docs with a careful eye
>      > before I realized what was happening and why.
> 
>      > For the record, as.vector  does not drop dimension (or anything else) from
>      > data.frames nor list-matrices, so there the behaviors agree, although we do
>      > get:
> 
>      >> is.vector(mat)
>      > [1] FALSE
> 
>      >> is.vector(mat2)
>      > [1] FALSE
> 
>      >> is.vector(mtcars)
>      > [1] FALSE
> 
> 
>      > Which does make the fact that for the latter two as.vector returns the
>      > objects unmodified somewhat puzzling.
> 
>      > I wonder if as.list and as.vector could get a strict argument - it could
>      > default to FALSE for a deprecation period, or forever if preferred by
>      > R-core -  where attributes are always stripped for 'strict' conversions.
> 
>      > Also, as a final aside, the documentation at ?as.list says:
> 
>      > Attributes may be
>      > dropped unless the argument already is a list or expression.
> 
>      > (This is inconsistent with functions such as ?as.character? which
>      > always drop attributes, *and is for efficiency since lists can be*
>      > *     expensive to copy.*)
> 
>      > (emphasis mine). Is this still the case with shallow duplication? I was
>      > under the impression that it was not.
> 
> Well, you are entering the topic Kurt Hornik and I  tried to
> improve on, 2  months ago  and then had to give up (for the time
> being) with only a small step of progress;  at the time
> producing extra work for CRAN team members who saw many dozens
> of CRAN package failing just because we tried to change
> is.vector() / as.vector()  to become slightly less inconsistent.
> 
> There were many misuse problems in these CRAN packages,
> which basically used  is.vector(obj) to check if `obj` was not
> a matrix.
> 
> During ca. one week in early December 2021, we (mostly me) tried
> several things and had to conditionalize (via a
> environment variable you must set *before* starting R) in the
> end most of the change, because we saw too much R code out
> there, being based on wrong assumptions ...
> ------------------------------------------------------------------------
> r81299 | maechler | 2021-12-06 13:21:26 +0100 (Mon, 06. Dec 2021) | 1 Zeile
> Ge?nderte Pfade:
>     M /trunk/doc/NEWS.Rd
>     M /trunk/src/library/base/man/vector.Rd
>     M /trunk/src/main/coerce.c
>     M /trunk/tests/demos.Rout.save
>     M /trunk/tests/reg-tests-1d.R
> 
> conditionalize most as.vector/is.vector changes from 81252,81270,81274,81285-6
> ------------------------------------------------------------------------
> 
> I mentioned above that one problem that useRs use is.vector() when they
> shouldn't -- because they are not aware that list() and
> expression()s  also fulfill `is.vector()`.
> I would have recommended to use (is.atomic() && !is.array())
> instead conceptually called is.simplevector() in my mind.
> 
> But there's another fact which dirties the water further:
> is.atomic() actually does *not* check for atomic vectors,
> but for  "atomic vector _OR_ NULL"  which I've found unfortunate.
> 
> Since then, I've contemplated introducing a new primitive
> is.atomicV()  which really is true only if its argument is an
> atomic vector.
> One thing not so nice is its name. To make that even longer is
> strongly against my taste ("testing for 'atom' should be short
> and succinct ")  so maybe people would agree with   is.atom()
> 
> ... yes, I've somewhat hijacked your thread to talk about part
> of the underlying problem(s) that I would like to address first.
> 
> 
> Martin
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From bbo|ker @end|ng |rom gm@||@com  Wed Feb  2 03:21:46 2022
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 1 Feb 2022 21:21:46 -0500
Subject: [Rd] model.weights and model.offset: request for adjustment
Message-ID: <1e70261f-3379-092a-2c11-f835d3d8ff70@gmail.com>

   The model.weights() and model.offset() functions from the 'stats' 
package index possibly-missing elements of a data frame via $, e.g.

x$"(offset)"
x$"(weights)"

This returns NULL without comment when x is a data frame:

x <- data.frame(a=1)
x$"(offset)"  ## NULL
x$"(weights)"  ## NULL

However, when x is a tibble we get a warning as well:

x <- tibble::as_tibble(x)
x$"(offset)"
## NULL
## Warning message:
## Unknown or uninitialised column: `(offset)`.

    I know it's not R-core's responsibility to manage forward 
compatibility with tibbles, but in this case [[-indexing would seem to 
be better practice in any case.

   Might a patch be accepted ... ?

   cheers
    Ben Bolker


From trevor@|@d@v|@ @end|ng |rom gm@||@com  Wed Feb  2 21:05:55 2022
From: trevor@|@d@v|@ @end|ng |rom gm@||@com (Trevor Davis)
Date: Wed, 2 Feb 2022 12:05:55 -0800
Subject: [Rd] license.db Bug Report (FSF field for CC 4.0 licenses)
Message-ID: <CAMigB8EVR0nSafhmTOhr+AdNNqYu8pTrT19xUcfULDhqg6BDFw@mail.gmail.com>

Hi,

I noticed some errors in the `FSF` fields in `share/licenses/license.db`
for some Creative Commons licenses:

`license.db` should be corrected to:

```
Name: Creative Commons Attribution-ShareAlike 2.0 Generic License
Abbrev: CC BY-SA 2.0
FSF: free_and_GPLv3_incompatible

Name: Creative Commons Attribution 4.0 International License
Abbrev: CC BY 4.0
FSF: free_and_GPLv3_compatible (
https://www.gnu.org/licenses/license-list.html#ccby)

Name: Creative Commons Attribution-ShareAlike 4.0 International License
Abbrev: CC BY-SA 4.0
FSF: free_and_GPLv3_compatible (
https://www.gnu.org/licenses/license-list.html#ccbysa)
```

* According to the current version of
https://www.gnu.org/licenses/license-list.html the FSF considers the CC BY
4.0 license "compatible with all versions of the GNU GPL" and the CC BY-SA
4.0 license "one-way compatible with the GNU GPL version 3: this means you
may license your modified versions of CC BY-SA 4.0 materials under GNU GPL
version 3".
* Note Creative Commons explicitly declared GPL-3 a "BY-SA Compatible
License" for version 4.0 on October 8th, 2015:
https://creativecommons.org/share-your-work/licensing-considerations/compatible-licenses
* In a previous version of the FSF license website available on web
archives (e.g.
http://web.archive.org/web/20150124042152/https://www.gnu.org/licenses/license-list.html#OtherLicenses)
the FSF explicitly considered the earlier CC BY 2.0 and CC BY-SA 2.0
licenses incompatible with the GNU GPL licenses.

  I'm unsure whether the URL for the `FSF` field for the CC BY-SA 2.0
license should point to such a Web Archived link or simply be stripped as I
suggested above.  However the current version of
https://www.gnu.org/licenses/license-list.html#ccbysa no longer mentions
the CC BY-SA 2.0 license nor its incompatibility with the GPL license and
hence it should be updated in some fashion.

Best,

Trevor

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Feb  3 12:14:06 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 3 Feb 2022 12:14:06 +0100
Subject: [Rd] model.weights and model.offset: request for adjustment
In-Reply-To: <1e70261f-3379-092a-2c11-f835d3d8ff70@gmail.com>
References: <1e70261f-3379-092a-2c11-f835d3d8ff70@gmail.com>
Message-ID: <25083.47358.617639.35342@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Tue, 1 Feb 2022 21:21:46 -0500 writes:

    > The model.weights() and model.offset() functions from the 'stats' 
    > package index possibly-missing elements of a data frame via $, e.g.

    > x$"(offset)"
    > x$"(weights)"

    > This returns NULL without comment when x is a data frame:

    > x <- data.frame(a=1)
    > x$"(offset)"  ## NULL
    > x$"(weights)"  ## NULL

    > However, when x is a tibble we get a warning as well:

    > x <- tibble::as_tibble(x)
    > x$"(offset)"
    > ## NULL
    > ## Warning message:
    > ## Unknown or uninitialised column: `(offset)`.

    > I know it's not R-core's responsibility to manage forward 
    > compatibility with tibbles, but in this case [[-indexing would seem to 
    > be better practice in any case.

Yes, I would agree:  we should use  [[ instead of $ here
in order to force exact matching just as principle

Importantly, because  also  mf[["(weights)"]]
will return  NULL without a warning for a model/data frame, and
it seems it does so also for tibbles.

    > Might a patch be accepted ... ?

That would not be necessary.

There's one remaining problem however:
`$` access is clearly faster than `[[` for small data frames
(because `$` is a primitive function doing everything in C, 
 whereas `[[` calls the R level data frame method ).

Faster in both cases, i.e., when there *is* a column and when there
is none (and NULL is returned), e.g., for the first case

> system.time(for(i in 1:20000) df[["a"]])
   user  system elapsed 
  0.064   0.000   0.065 
> system.time(for(i in 1:20000) df$a)
   user  system elapsed 
  0.009   0.000   0.009 

So that's probably been the reason why  `$`  has been prefered?


Martin

    > cheers
    > Ben Bolker


From tim@t@yior m@iii@g oii hidde@eieph@@ts@co@uk  Thu Feb  3 12:30:17 2022
From: tim@t@yior m@iii@g oii hidde@eieph@@ts@co@uk (tim@t@yior m@iii@g oii hidde@eieph@@ts@co@uk)
Date: Thu, 3 Feb 2022 11:30:17 +0000 (GMT)
Subject: [Rd] model.weights and model.offset: request for adjustment
In-Reply-To: <25083.47358.617639.35342@stat.math.ethz.ch>
References: <1e70261f-3379-092a-2c11-f835d3d8ff70@gmail.com>
 <25083.47358.617639.35342@stat.math.ethz.ch>
Message-ID: <1406749407.8755.1643887817729@office.mailbox.org>


> On 03/02/2022 11:14 Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
>  
> >>>>> Ben Bolker 
> >>>>>     on Tue, 1 Feb 2022 21:21:46 -0500 writes:
> 
>     > The model.weights() and model.offset() functions from the 'stats' 
>     > package index possibly-missing elements of a data frame via $, e.g.
> 
>     > x$"(offset)"
>     > x$"(weights)"
> 
>     > This returns NULL without comment when x is a data frame:
> 
>     > x <- data.frame(a=1)
>     > x$"(offset)"  ## NULL
>     > x$"(weights)"  ## NULL
> 
>     > However, when x is a tibble we get a warning as well:
> 
>     > x <- tibble::as_tibble(x)
>     > x$"(offset)"
>     > ## NULL
>     > ## Warning message:
>     > ## Unknown or uninitialised column: `(offset)`.
> 
>     > I know it's not R-core's responsibility to manage forward 
>     > compatibility with tibbles, but in this case [[-indexing would seem to 
>     > be better practice in any case.
> 
> Yes, I would agree:  we should use  [[ instead of $ here
> in order to force exact matching just as principle
> 
> Importantly, because  also  mf[["(weights)"]]
> will return  NULL without a warning for a model/data frame, and
> it seems it does so also for tibbles.
> 
>     > Might a patch be accepted ... ?
> 
> That would not be necessary.
> 
> There's one remaining problem however:
> `$` access is clearly faster than `[[` for small data frames
> (because `$` is a primitive function doing everything in C, 
>  whereas `[[` calls the R level data frame method ).
> 
> Faster in both cases, i.e., when there *is* a column and when there
> is none (and NULL is returned), e.g., for the first case
> 
> > system.time(for(i in 1:20000) df[["a"]])
>    user  system elapsed 
>   0.064   0.000   0.065 
> > system.time(for(i in 1:20000) df$a)
>    user  system elapsed 
>   0.009   0.000   0.009 
> 
> So that's probably been the reason why  `$`  has been prefered?

Would .subset2(df, "a) be preferable?
R> df <- mtcars
R> system.time(for(i in 1:20000) df[["hp"]])
   user  system elapsed 
  0.078   0.000   0.078 
R> system.time(for(i in 1:20000) df$hp)
   user  system elapsed 
  0.011   0.000   0.010 
R> system.time(for(i in 1:20000) .subset2(df,"hp"))
   user  system elapsed 
  0.004   0.000   0.004 
Tim


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Feb  3 15:15:03 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 3 Feb 2022 15:15:03 +0100
Subject: [Rd] inconsistency between as.list(df) and as.list(mat) with
 mode(mat) == "list"
In-Reply-To: <35724075-cbcf-b5cb-3001-fe186273ab9b@gmail.com>
References: <CAD4oTHFotrgFG6m4oL7EsxdFjf=_4b485kgLzVNifwLZgGiOOA@mail.gmail.com>
 <25081.29918.780598.770679@stat.math.ethz.ch>
 <35724075-cbcf-b5cb-3001-fe186273ab9b@gmail.com>
Message-ID: <25083.58215.309289.155180@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Tue, 1 Feb 2022 15:17:08 -0500 writes:

    > The definitions of is.vector() etc. are now so old, it's probably 
    > hopeless to change them.  But there are already some definitions in the 
    > rlang package that look more consistent and rational.  For example, 
    > is_atomic() and is_vector() fix the issues you were complaining about.

    > The rlang package doesn't have many hard dependencies (just utils), so 
    > you could easily use it instead of the base test functions.  On the 
    > other hand:  It does have a long list of packages in Suggests,
    > and it doesn't really fix Gabe's issue:  as_list is more consistent than 
    > as.list, but it gives a deprecation warning:

    > Warning message:
    > `as_list()` is deprecated as of rlang 0.4.0
    > Please use `vctrs::vec_cast()` instead.
    > This warning is displayed once per session.

    > My conclusion is that it would make more sense to import a subset of the 
    > definitions and names from rlang into base R.

    > Duncan Murdoch

Regarding is.atomic() and is_atomic() : Within R Core, we have
talked about it and for now created a branch of R-devel in svn,
called 'R-is' (*),  in which  is.atomic(NULL) is false {as in is_atomic()}.

Hopefully, most CRAN (& Bioc) packages would continue to work unaffected,
and we could ask maintainers of the few others to adapt ...
... so possibly, hopefully, ...,
we would change is.atomic()  in spite of all history.

*) If you are interested, get and install that branch by

   svn co -q https://svn.r-project.org/R/branches/R-is R
   ( cd R ; tools/rsync-recommended )

  and then build R the same as you would build another one from
  source.

-------------

One more thing  I forgot to mention in reply to Gabe's original
post -- even though *also* only partly related:

In R-devel, for any data frame  df,
all three of

  as.list  (df)
  as.vector(df)  
  as.vector(df, mode="list")  

are identical.
This has *not* been the case in previous versions
of R, i.e. notably all released ones  where   as.vector(df)
was a no-op for data frames.

Martin


    > On 01/02/2022 12:58 p.m., Martin Maechler wrote:
    >>>>>>> Gabriel Becker
    >>>>>>> on Mon, 31 Jan 2022 12:11:10 -0800 writes:
    >> 
    >> (using an HTMLifying mail client .... so I've manually pretty edited a bit)
    >> 
    >> > Hi All,
    >> 
    >> > I ran into the following the other day:
    >> 
    >> >> mat <- matrix(1:6, nrow = 2)
    >> >> as.list(mat)
    >> > [[1]]
    >> > [1] 1
    >> 
    >> > *<snip>*
    >> 
    >> > [[6]]
    >> > [1] 6
    >> 
    >> >> mat2 <- mat
    >> >> mode(mat2) <- "list"
    >> >> as.list(mat2)
    >> >   [,1] [,2] [,3]
    >> > [1,] 1    3    5
    >> > [2,] 2    4    6
    >> 
    >> 
    >> > I realize this is not guaranteed by the documentation, and the behavior is
    >> > technically (if I would argue fairly subtly) as documented. Generally,
    >> > however, as.list returns something without dimensions (other than length),
    >> > regardless of the dimensions of the input.
    >> 
    >> > Furthermore, this behavior agrees with neither the data.frame (which are
    >> > lists) method nor the non-list-mode matrix behavior which comes from the
    >> > default behavior. Both result in a non-dimensioned object (the data.frame
    >> > method explicitly and intentionally so).
    >> 
    >> > Matrices of mode "list" are fairly rare, in practice, I would think, but I
    >> > wonder if the as.list behavior for them should agree with that of similar
    >> > dimensioned objects (data.frames and non-list-mode matrices). As a user, I
    >> > certainly expected it to, and had to read the docs with a careful eye
    >> > before I realized what was happening and why.
    >> 
    >> > For the record, as.vector  does not drop dimension (or anything else) from
    >> > data.frames nor list-matrices, so there the behaviors agree, although we do
    >> > get:
    >> 
    >> >> is.vector(mat)
    >> > [1] FALSE
    >> 
    >> >> is.vector(mat2)
    >> > [1] FALSE
    >> 
    >> >> is.vector(mtcars)
    >> > [1] FALSE
    >> 
    >> 
    >> > Which does make the fact that for the latter two as.vector returns the
    >> > objects unmodified somewhat puzzling.
    >> 
    >> > I wonder if as.list and as.vector could get a strict argument - it could
    >> > default to FALSE for a deprecation period, or forever if preferred by
    >> > R-core -  where attributes are always stripped for 'strict' conversions.
    >> 
    >> > Also, as a final aside, the documentation at ?as.list says:
    >> 
    >> > Attributes may be
    >> > dropped unless the argument already is a list or expression.
    >> 
    >> > (This is inconsistent with functions such as ?as.character? which
    >> > always drop attributes, *and is for efficiency since lists can be*
    >> > *     expensive to copy.*)
    >> 
    >> > (emphasis mine). Is this still the case with shallow duplication? I was
    >> > under the impression that it was not.
    >> 
    >> Well, you are entering the topic Kurt Hornik and I  tried to
    >> improve on, 2  months ago  and then had to give up (for the time
    >> being) with only a small step of progress;  at the time
    >> producing extra work for CRAN team members who saw many dozens
    >> of CRAN package failing just because we tried to change
    >> is.vector() / as.vector()  to become slightly less inconsistent.
    >> 
    >> There were many misuse problems in these CRAN packages,
    >> which basically used  is.vector(obj) to check if `obj` was not
    >> a matrix.
    >> 
    >> During ca. one week in early December 2021, we (mostly me) tried
    >> several things and had to conditionalize (via a
    >> environment variable you must set *before* starting R) in the
    >> end most of the change, because we saw too much R code out
    >> there, being based on wrong assumptions ...
    >> ------------------------------------------------------------------------
    >> r81299 | maechler | 2021-12-06 13:21:26 +0100 (Mon, 06. Dec 2021) | 1 Zeile
    >> Ge?nderte Pfade:
    >> M /trunk/doc/NEWS.Rd
    >> M /trunk/src/library/base/man/vector.Rd
    >> M /trunk/src/main/coerce.c
    >> M /trunk/tests/demos.Rout.save
    >> M /trunk/tests/reg-tests-1d.R
    >> 
    >> conditionalize most as.vector/is.vector changes from 81252,81270,81274,81285-6
    >> ------------------------------------------------------------------------
    >> 
    >> I mentioned above that one problem that useRs use is.vector() when they
    >> shouldn't -- because they are not aware that list() and
    >> expression()s  also fulfill `is.vector()`.
    >> I would have recommended to use (is.atomic() && !is.array())
    >> instead conceptually called is.simplevector() in my mind.
    >> 
    >> But there's another fact which dirties the water further:
    >> is.atomic() actually does *not* check for atomic vectors,
    >> but for  "atomic vector _OR_ NULL"  which I've found unfortunate.
    >> 
    >> Since then, I've contemplated introducing a new primitive
    >> is.atomicV()  which really is true only if its argument is an
    >> atomic vector.
    >> One thing not so nice is its name. To make that even longer is
    >> strongly against my taste ("testing for 'atom' should be short
    >> and succinct ")  so maybe people would agree with   is.atom()
    >> 
    >> ... yes, I've somewhat hijacked your thread to talk about part
    >> of the underlying problem(s) that I would like to address first.
    >> 
    >> 
    >> Martin
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Feb  3 15:21:45 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 3 Feb 2022 15:21:45 +0100
Subject: [Rd] model.weights and model.offset: request for adjustment
In-Reply-To: <1406749407.8755.1643887817729@office.mailbox.org>
References: <1e70261f-3379-092a-2c11-f835d3d8ff70@gmail.com>
 <25083.47358.617639.35342@stat.math.ethz.ch>
 <1406749407.8755.1643887817729@office.mailbox.org>
Message-ID: <25083.58617.36940.759063@stat.math.ethz.ch>

>>>>> tim taylor 
>>>>>     on Thu, 3 Feb 2022 11:30:17 +0000 (GMT) writes:

    >> On 03/02/2022 11:14 Martin Maechler <maechler at stat.math.ethz.ch> wrote:
    >> 
    >> 
    >> >>>>> Ben Bolker 
    >> >>>>>     on Tue, 1 Feb 2022 21:21:46 -0500 writes:
    >> 
    >> > The model.weights() and model.offset() functions from the 'stats' 
    >> > package index possibly-missing elements of a data frame via $, e.g.
    >> 
    >> > x$"(offset)"
    >> > x$"(weights)"
    >> 
    >> > This returns NULL without comment when x is a data frame:
    >> 
    >> > x <- data.frame(a=1)
    >> > x$"(offset)"  ## NULL
    >> > x$"(weights)"  ## NULL
    >> 
    >> > However, when x is a tibble we get a warning as well:
    >> 
    >> > x <- tibble::as_tibble(x)
    >> > x$"(offset)"
    >> > ## NULL
    >> > ## Warning message:
    >> > ## Unknown or uninitialised column: `(offset)`.
    >> 
    >> > I know it's not R-core's responsibility to manage forward 
    >> > compatibility with tibbles, but in this case [[-indexing would seem to 
    >> > be better practice in any case.
    >> 
    >> Yes, I would agree:  we should use  [[ instead of $ here
    >> in order to force exact matching just as principle
    >> 
    >> Importantly, because  also  mf[["(weights)"]]
    >> will return  NULL without a warning for a model/data frame, and
    >> it seems it does so also for tibbles.
    >> 
    >> > Might a patch be accepted ... ?
    >> 
    >> That would not be necessary.
    >> 
    >> There's one remaining problem however:
    >> `$` access is clearly faster than `[[` for small data frames
    >> (because `$` is a primitive function doing everything in C, 
    >> whereas `[[` calls the R level data frame method ).
    >> 
    >> Faster in both cases, i.e., when there *is* a column and when there
    >> is none (and NULL is returned), e.g., for the first case
    >> 
    >> > system.time(for(i in 1:20000) df[["a"]])
    >> user  system elapsed 
    >> 0.064   0.000   0.065 
    >> > system.time(for(i in 1:20000) df$a)
    >> user  system elapsed 
    >> 0.009   0.000   0.009 
    >> 
    >> So that's probably been the reason why  `$`  has been prefered?

    > Would .subset2(df, "a) be preferable?

    R> df <- mtcars
    R> system.time(for(i in 1:20000) df[["hp"]])
    > user  system elapsed 
    > 0.078   0.000   0.078 
    R> system.time(for(i in 1:20000) df$hp)
    > user  system elapsed 
    > 0.011   0.000   0.010 
    R> system.time(for(i in 1:20000) .subset2(df,"hp"))
    > user  system elapsed 
    > 0.004   0.000   0.004 

    > Tim

Yes, I think that's a very good idea --

notably, as interestingly it seems to work with tibble's very
well, too.

Martin


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Feb  3 18:09:29 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 3 Feb 2022 18:09:29 +0100
Subject: [Rd] model.weights and model.offset: request for adjustment
In-Reply-To: <25083.58617.36940.759063@stat.math.ethz.ch>
References: <1e70261f-3379-092a-2c11-f835d3d8ff70@gmail.com>
 <25083.47358.617639.35342@stat.math.ethz.ch>
 <1406749407.8755.1643887817729@office.mailbox.org>
 <25083.58617.36940.759063@stat.math.ethz.ch>
Message-ID: <25084.3145.108729.52160@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Thu, 3 Feb 2022 15:21:45 +0100 writes:

>>>>> tim taylor 
>>>>>     on Thu, 3 Feb 2022 11:30:17 +0000 (GMT) writes:

    >>> On 03/02/2022 11:14 Martin Maechler <maechler at stat.math.ethz.ch> wrote:
    >>> 
    >>> 
    >>> >>>>> Ben Bolker 
    >>> >>>>>     on Tue, 1 Feb 2022 21:21:46 -0500 writes:
    >>> 
    >>> > The model.weights() and model.offset() functions from the 'stats' 
    >>> > package index possibly-missing elements of a data frame via $, e.g.
    >>> 
    >>> > x$"(offset)"
    >>> > x$"(weights)"
    >>> 
    >>> > This returns NULL without comment when x is a data frame:
    >>> 
    >>> > x <- data.frame(a=1)
    >>> > x$"(offset)"  ## NULL
    >>> > x$"(weights)"  ## NULL
    >>> 
    >>> > However, when x is a tibble we get a warning as well:
    >>> 
    >>> > x <- tibble::as_tibble(x)
    >>> > x$"(offset)"
    >>> > ## NULL
    >>> > ## Warning message:
    >>> > ## Unknown or uninitialised column: `(offset)`.
    >>> 
    >>> > I know it's not R-core's responsibility to manage forward 
    >>> > compatibility with tibbles, but in this case [[-indexing would seem to 
    >>> > be better practice in any case.
    >>> 
    >>> Yes, I would agree:  we should use  [[ instead of $ here
    >>> in order to force exact matching just as principle
    >>> 
    >>> Importantly, because  also  mf[["(weights)"]]
    >>> will return  NULL without a warning for a model/data frame, and
    >>> it seems it does so also for tibbles.
    >>> 
    >>> > Might a patch be accepted ... ?
    >>> 
    >>> That would not be necessary.
    >>> 
    >>> There's one remaining problem however:
    >>> `$` access is clearly faster than `[[` for small data frames
    >>> (because `$` is a primitive function doing everything in C, 
    >>> whereas `[[` calls the R level data frame method ).
    >>> 
    >>> Faster in both cases, i.e., when there *is* a column and when there
    >>> is none (and NULL is returned), e.g., for the first case
    >>> 
    >>> > system.time(for(i in 1:20000) df[["a"]])
    >>> user  system elapsed 
    >>> 0.064   0.000   0.065 
    >>> > system.time(for(i in 1:20000) df$a)
    >>> user  system elapsed 
    >>> 0.009   0.000   0.009 
    >>> 
    >>> So that's probably been the reason why  `$`  has been prefered?

    >> Would .subset2(df, "a) be preferable?

    R> df <- mtcars
    R> system.time(for(i in 1:20000) df[["hp"]])
    >> user  system elapsed 
    >> 0.078   0.000   0.078 
    R> system.time(for(i in 1:20000) df$hp)
    >> user  system elapsed 
    >> 0.011   0.000   0.010 
    R> system.time(for(i in 1:20000) .subset2(df,"hp"))
    >> user  system elapsed 
    >> 0.004   0.000   0.004 

    >> Tim

    > Yes, I think that's a very good idea --

    > notably, as interestingly it seems to work with tibble's very
    > well, too.

Interestingly (or not), changing this also fixes a real (rare!) bug:
When digging for a regression test, I've stumbled over an lm() example,
which when modified to use the not so common  "(weight)_2" as
*predictor* variable name it started to use that both as
predictor and also as weight (of some kind) such that the fit
changed.

This problem went away after apply the change,
[replacing `a$b` with `.subset2(a,b)]

Now committed to R-devel, svn rev 81650.

If there are no negative effects, this may also be backported to
R-patched.

Thank you both, once more!
Martin


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Feb  4 18:33:41 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 4 Feb 2022 12:33:41 -0500
Subject: [Rd] Parser oddity with <- and =
Message-ID: <8ee66596-5531-2fc4-252f-a2a0946a1d1c@gmail.com>

Here's an odd parse:

    a <- b = 1

This appears to be parsed as

    `<-<-`(a, b, 1)

instead of being equivalent to

    a <- b <- 1

I wonder if that's intentional?

(This showed up at https://stackoverflow.com/q/70989067/2554330, where 
it caused a lot of confusion.  I think the original intent was that `a` 
would be a macro holding `b = 1`, but I'm not sure of that.)

Duncan Murdoch


From ht @end|ng |rom he@therturner@net  Fri Feb  4 21:02:13 2022
From: ht @end|ng |rom he@therturner@net (Heather Turner)
Date: Fri, 04 Feb 2022 20:02:13 +0000
Subject: [Rd] Google Season of Docs 2022
Message-ID: <a9526ce4-0cea-46fc-b1e9-4bfced56aadf@www.fastmail.com>

Dear All,

Yesterday Google announced Season of Docs 2022: https://opensource.googleblog.com/2022/02/Announcing%20Season%20of%20Docs%202022.html.

You may know that the R project participated for the first time last year with a project related to useR! and there is interest in us offering a project again this year.

Organization applications open at the end of February, so now is the time for us to explore ideas for projects and line up potential mentors. 

Organization of GSoD is done on GitHub: https://github.com/rstats-gsod/gsod2022 and I have added a number of issues with ideas drawn from discussions on the R Contribution Working Group, R-Devel Slack, Forwards taskforce, and R Consortium Repositories Working Group. Feel free to comment on these issues or add your own suggestions.

For more general discussion of GSoD, you can reply here, on the R-Devel Slack or at the next R Contribution Working Group (see the R Contribution Site for details of the Slack/working group: https://contributor.r-project.org/).

Best wishes,
Heather


From w||||@mwdun|@p @end|ng |rom gm@||@com  Fri Feb  4 21:28:12 2022
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Fri, 4 Feb 2022 12:28:12 -0800
Subject: [Rd] Parser oddity with <- and =
In-Reply-To: <8ee66596-5531-2fc4-252f-a2a0946a1d1c@gmail.com>
References: <8ee66596-5531-2fc4-252f-a2a0946a1d1c@gmail.com>
Message-ID: <CAHqSRuQvhB-rDeHNhLVRffahkpSyu=hjOdRNs0LUXvUrAopeKA@mail.gmail.com>

In R-4.1.2 and R-devel from two weeks ago I do not get the `<-<-`:

> str.language(parse(text = "a <- b = c"))
expression: structure(expression(a <- b = c), sr ...
  language: a <- b = c
    symbol: =
    language: a <- b
      symbol: <-
      symbol: a
      symbol: b
    symbol: c
> identical(parse(text = "a <- b = c")[[1]], parse(text = "`=`( `<-`(a, b),
c)")[[1]])
[1] TRUE

str.language() is a rudimentary parse tree displayer:

str.language <- function(expr, name = "", indent = 0)
{
    trim... <- function(string, width.cutoff) {
        if (nchar(string) > width.cutoff) {
            string <- sprintf("%.*s ...", width.cutoff-4, string)
        }
        string
    }
    cat(sep="", rep("  ", indent), typeof(expr), ": ",
        if(length(name)==1 && nzchar(name)) { paste0(name, " = ") },
        trim...(deparse1(expr, width.cutoff=40), width.cutoff=40),
        "\n")
    if (is.function(expr)) {
        str.language(formals(expr), name="[formals]", indent = indent + 1)
        str.language(body(expr), name="[body]", indent = indent + 1)
    } else if (is.recursive(expr)) {
        expr <- as.list(expr)
        nms <- names(expr)
        for (i in seq_along(expr)) {
            str.language(expr[[i]], name=nms[[i]], indent = indent + 1)
        }
    }
    invisible(expr)
}


-Bill

On Fri, Feb 4, 2022 at 9:34 AM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> Here's an odd parse:
>
>     a <- b = 1
>
> This appears to be parsed as
>
>     `<-<-`(a, b, 1)
>
> instead of being equivalent to
>
>     a <- b <- 1
>
> I wonder if that's intentional?
>
> (This showed up at https://stackoverflow.com/q/70989067/2554330, where
> it caused a lot of confusion.  I think the original intent was that `a`
> would be a macro holding `b = 1`, but I'm not sure of that.)
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Feb  4 21:38:45 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 4 Feb 2022 15:38:45 -0500
Subject: [Rd] Parser oddity with <- and =
In-Reply-To: <CAHqSRuQvhB-rDeHNhLVRffahkpSyu=hjOdRNs0LUXvUrAopeKA@mail.gmail.com>
References: <8ee66596-5531-2fc4-252f-a2a0946a1d1c@gmail.com>
 <CAHqSRuQvhB-rDeHNhLVRffahkpSyu=hjOdRNs0LUXvUrAopeKA@mail.gmail.com>
Message-ID: <9cf21284-79f5-1e04-b489-4d283dffabe7@gmail.com>

Sorry, I wrote in a sloppy way.  The parsing I see is just what you saw. 
  It's the evaluation of that expression that tries to call `<-<-`:

 > a <- 1
 > a <- b = c
Error in a <- b = c : could not find function "<-<-"

This happens because R is trying to make an assignment using = with a 
LHS that is the function call a <- b.

Duncan Murdoch


On 04/02/2022 3:28 p.m., Bill Dunlap wrote:
> In R-4.1.2 and R-devel from two weeks ago I do not get the `<-<-`:
> 
>      > str.language(parse(text = "a <- b = c"))
>     expression: structure(expression(a <- b = c), sr ...
>      ? language: a <- b = c
>      ? ? symbol: =
>      ? ? language: a <- b
>      ? ? ? symbol: <-
>      ? ? ? symbol: a
>      ? ? ? symbol: b
>      ? ? symbol: c
>      > identical(parse(text = "a <- b = c")[[1]], parse(text = "`=`(
>     `<-`(a, b), c)")[[1]])
>     [1] TRUE
> 
> str.language() is a rudimentary parse tree displayer:
> 
>     str.language <- function(expr, name = "", indent = 0)
>     {
>      ? ? trim... <- function(string, width.cutoff) {
>      ? ? ? ? if (nchar(string) > width.cutoff) {
>      ? ? ? ? ? ? string <- sprintf("%.*s ...", width.cutoff-4, string)
>      ? ? ? ? }
>      ? ? ? ? string
>      ? ? }
>      ? ? cat(sep="", rep(" ?", indent), typeof(expr), ": ",
>      ? ? ? ? if(length(name)==1 && nzchar(name)) { paste0(name, " = ") },
>      ? ? ? ? trim...(deparse1(expr, width.cutoff=40), width.cutoff=40),
>      ? ? ? ? "\n")
>      ? ? if (is.function(expr)) {
>      ? ? ? ? str.language(formals(expr), name="[formals]", indent =
>     indent + 1)
>      ? ? ? ? str.language(body(expr), name="[body]", indent = indent + 1)
>      ? ? } else if (is.recursive(expr)) {
>      ? ? ? ? expr <- as.list(expr)
>      ? ? ? ? nms <- names(expr)
>      ? ? ? ? for (i in seq_along(expr)) {
>      ? ? ? ? ? ? str.language(expr[[i]], name=nms[[i]], indent = indent + 1)
>      ? ? ? ? }
>      ? ? }
>      ? ? invisible(expr)
>     }
> 
> 
> -Bill
> 
> On Fri, Feb 4, 2022 at 9:34 AM Duncan Murdoch <murdoch.duncan at gmail.com 
> <mailto:murdoch.duncan at gmail.com>> wrote:
> 
>     Here's an odd parse:
> 
>      ? ? a <- b = 1
> 
>     This appears to be parsed as
> 
>      ? ? `<-<-`(a, b, 1)
> 
>     instead of being equivalent to
> 
>      ? ? a <- b <- 1
> 
>     I wonder if that's intentional?
> 
>     (This showed up at https://stackoverflow.com/q/70989067/2554330
>     <https://stackoverflow.com/q/70989067/2554330>, where
>     it caused a lot of confusion.? I think the original intent was that `a`
>     would be a macro holding `b = 1`, but I'm not sure of that.)
> 
>     Duncan Murdoch
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-devel>
>


From ggrothend|eck @end|ng |rom gm@||@com  Tue Feb  8 12:49:05 2022
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Tue, 8 Feb 2022 06:49:05 -0500
Subject: [Rd] aggregate.formula and pipes
In-Reply-To: <CAP01uRnONpc=WnQATrcdU0xLv_Ce=RJ-TTyCfKBN+pnV0NMYbw@mail.gmail.com>
References: <CAP01uRnONpc=WnQATrcdU0xLv_Ce=RJ-TTyCfKBN+pnV0NMYbw@mail.gmail.com>
Message-ID: <CAP01uR=Ph+hmeo=mJ3-+mnBpZux237dvsjZHMfE0FxfUrQ9Njg@mail.gmail.com>

I noticed that the aggregate issue which I raised
has been fixed in the latest development version of R.  Just
wanted to comment on key points that were missed in this discussion on
bugs.r-project.org.

1. Given that it has been known for years that
generics and methods should have consistent arguments yet
until now has remained unaddressed in the core of R I figured it would
stand a better chance of being adopted  if the suggested change involved no
code changes, just an export.

I would have suggested that the formula method and generic of aggregate
be made compatible if I had thought anyone would be willing to implement that
but It looks like someone has been willing after all.

2. This is really part of a larger issue that pipes and lapply can expose and
perhaps if aggregate is fixed an effort could be made to find whether
other instances
of conflicting methods and generics in the core exist and make those
consistent too.

3. There is also a discussion there of the use of function(x)... or
\(x)... to avoid
limitations of pipes but this gives rise to a large number of parentheses
e.g. 0 |> (\(x) sin(x) + cos(x))()
I find this too ugly and unreadable to be a reasonable solution.  In
such cases I would
either not use base pipes or if I did then define a function prior to the pipe:
e.g. this seems more readable
       sincos <- function(x) sin(x) + cos(x)
       0 |> sincos()


On Wed, Jan 26, 2022 at 9:48 AM Gabor Grothendieck
<ggrothendieck at gmail.com> wrote:
>
> Because aggregate.formula has a formula argument but the generic
> has an x argument neither of these work:
>
>   mtcars |> aggregate(x = mpg ~ cyl, FUN = mean)
>   mtcars |> aggregate(formula = mpg ~ cyl, FUN = mean)
>
> This does work:
>
>   mtcars |> stats:::aggregate.formula(formula = mpg ~ cyl, FUN = mean)
>
> Suggest that aggregate.formula be exported.
>
> --
> Statistics & Software Consulting
> GKX Group, GKX Associates Inc.
> tel: 1-877-GKX-GROUP
> email: ggrothendieck at gmail.com



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From c@@rd|@g@bor @end|ng |rom gm@||@com  Tue Feb  8 15:15:05 2022
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Tue, 8 Feb 2022 15:15:05 +0100
Subject: [Rd] S4 class name conflicts
Message-ID: <CABtg=KmbgbS7rxQyTn++ytLD8S+apAv3zCC1rz3eYtqPPo-thw@mail.gmail.com>

The RNeXML CRAN package currently has some check warnings, originating
from an S4 class name conflict.

RNeXML sets the S4 class "tree". A dependency of the package now
depends on the cli package, which calls setOldClass() on an S3 "tree"
class.

This causes two potential issues. One is that RNeXML maybe ends up
using cli's class internally, because this is what we see at install
time:

** byte-compile and prepare package for lazy loading
Found more than one class "tree" in cache; using the first, from namespace 'cli'
Also defined by ?RNeXML?

The second issue is an error when RNeXML is unloaded:

? unloadNamespace("RNeXML")
Error in .mergeMethodsTable(generic, mtable, tt, attach) :
  trying to get slot "defined" from an object of a basic class
("environment") with no slots

This makes R CMD check fail as well.

Is cli doing something wrong here? Or is this a bug in base R? Or is
it a known limitation? If the latter, would it make sense for the
RNeXML installation to fail instead of creating a broken package. (If
it is a broken package at all.)

Gabor


From c@@rd|@g@bor @end|ng |rom gm@||@com  Tue Feb  8 18:07:31 2022
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Tue, 8 Feb 2022 18:07:31 +0100
Subject: [Rd] S4 class name conflicts
In-Reply-To: <CAOQ5Nyd5mJFo6yYHVh8X1OTQNh2u3GHQtTVaUuOxbwBTc3XcGA@mail.gmail.com>
References: <CABtg=KmbgbS7rxQyTn++ytLD8S+apAv3zCC1rz3eYtqPPo-thw@mail.gmail.com>
 <CAOQ5Nyd5mJFo6yYHVh8X1OTQNh2u3GHQtTVaUuOxbwBTc3XcGA@mail.gmail.com>
Message-ID: <CABtg=K=0-j86zTErM08uS1j9v6BfjESygvEVEQCfauEGDKsQew@mail.gmail.com>

Hi Michael,

you only need the CRAN versions. You probably need a recent version of
pillar, to
create the name conflict with its dependency:

install.packages("pillar")
install.packages("cli")
install.packages("RNeXML", type = "source")

This will already give you:
** byte-compile and prepare package for lazy loading
Found more than one class "tree" in cache; using the first, from namespace 'cli'
Also defined by ?RNeXML?

and then:

library(RNeXML)
unloadNamespace("RNeXML")

Error in .mergeMethodsTable(generic, mtable, tt, attach) :
  trying to get slot "defined" from an object of a basic class
("environment") with no slots

This is macOS arm64, but looking at the CRAN check page, that should not matter.

Let me know if this does not work, and the I'll create a Docker
container or something more reproducible.

Thanks,
Gabor

On Tue, Feb 8, 2022 at 5:53 PM Michael Lawrence
<lawrence.michael at gene.com> wrote:
>
> Hi Gabor,
>
> Thanks for reporting this issue. Would you be able to help me
> reproduce it? I'm guessing this depends on some combination of git
> checkouts, so it would be helpful to know which.
>
> Michael
>
> On Tue, Feb 8, 2022 at 6:32 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >
> > The RNeXML CRAN package currently has some check warnings, originating
> > from an S4 class name conflict.
> >
> > RNeXML sets the S4 class "tree". A dependency of the package now
> > depends on the cli package, which calls setOldClass() on an S3 "tree"
> > class.
> >
> > This causes two potential issues. One is that RNeXML maybe ends up
> > using cli's class internally, because this is what we see at install
> > time:
> >
> > ** byte-compile and prepare package for lazy loading
> > Found more than one class "tree" in cache; using the first, from namespace 'cli'
> > Also defined by ?RNeXML?
> >
> > The second issue is an error when RNeXML is unloaded:
> >
> > ? unloadNamespace("RNeXML")
> > Error in .mergeMethodsTable(generic, mtable, tt, attach) :
> >   trying to get slot "defined" from an object of a basic class
> > ("environment") with no slots
> >
> > This makes R CMD check fail as well.
> >
> > Is cli doing something wrong here? Or is this a bug in base R? Or is
> > it a known limitation? If the latter, would it make sense for the
> > RNeXML installation to fail instead of creating a broken package. (If
> > it is a broken package at all.)
> >
> > Gabor
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> Michael Lawrence
> Principal Scientist, Director of Data Science and Statistical Computing
> Genentech, A Member of the Roche Group
> Office +1 (650) 225-7760
> michafla at gene.com
>
> Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube


From |@wrence@m|ch@e| @end|ng |rom gene@com  Tue Feb  8 17:52:56 2022
From: |@wrence@m|ch@e| @end|ng |rom gene@com (Michael Lawrence)
Date: Tue, 8 Feb 2022 08:52:56 -0800
Subject: [Rd] S4 class name conflicts
In-Reply-To: <CABtg=KmbgbS7rxQyTn++ytLD8S+apAv3zCC1rz3eYtqPPo-thw@mail.gmail.com>
References: <CABtg=KmbgbS7rxQyTn++ytLD8S+apAv3zCC1rz3eYtqPPo-thw@mail.gmail.com>
Message-ID: <CAOQ5Nyd5mJFo6yYHVh8X1OTQNh2u3GHQtTVaUuOxbwBTc3XcGA@mail.gmail.com>

Hi Gabor,

Thanks for reporting this issue. Would you be able to help me
reproduce it? I'm guessing this depends on some combination of git
checkouts, so it would be helpful to know which.

Michael

On Tue, Feb 8, 2022 at 6:32 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> The RNeXML CRAN package currently has some check warnings, originating
> from an S4 class name conflict.
>
> RNeXML sets the S4 class "tree". A dependency of the package now
> depends on the cli package, which calls setOldClass() on an S3 "tree"
> class.
>
> This causes two potential issues. One is that RNeXML maybe ends up
> using cli's class internally, because this is what we see at install
> time:
>
> ** byte-compile and prepare package for lazy loading
> Found more than one class "tree" in cache; using the first, from namespace 'cli'
> Also defined by ?RNeXML?
>
> The second issue is an error when RNeXML is unloaded:
>
> ? unloadNamespace("RNeXML")
> Error in .mergeMethodsTable(generic, mtable, tt, attach) :
>   trying to get slot "defined" from an object of a basic class
> ("environment") with no slots
>
> This makes R CMD check fail as well.
>
> Is cli doing something wrong here? Or is this a bug in base R? Or is
> it a known limitation? If the latter, would it make sense for the
> RNeXML installation to fail instead of creating a broken package. (If
> it is a broken package at all.)
>
> Gabor
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Michael Lawrence
Principal Scientist, Director of Data Science and Statistical Computing
Genentech, A Member of the Roche Group
Office +1 (650) 225-7760
michafla at gene.com

Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube


From |@wrence@m|ch@e| @end|ng |rom gene@com  Wed Feb  9 00:53:15 2022
From: |@wrence@m|ch@e| @end|ng |rom gene@com (Michael Lawrence)
Date: Tue, 8 Feb 2022 15:53:15 -0800
Subject: [Rd] S4 class name conflicts
In-Reply-To: <CABtg=K=0-j86zTErM08uS1j9v6BfjESygvEVEQCfauEGDKsQew@mail.gmail.com>
References: <CABtg=KmbgbS7rxQyTn++ytLD8S+apAv3zCC1rz3eYtqPPo-thw@mail.gmail.com>
 <CAOQ5Nyd5mJFo6yYHVh8X1OTQNh2u3GHQtTVaUuOxbwBTc3XcGA@mail.gmail.com>
 <CABtg=K=0-j86zTErM08uS1j9v6BfjESygvEVEQCfauEGDKsQew@mail.gmail.com>
Message-ID: <CAOQ5NycrYt8_mLWfz6XMwHjhjogjcm-upQ_hQM3kXCt3myG88g@mail.gmail.com>

Great, thanks. I have fixed both issues and will commit after more testing.

Michael

On Tue, Feb 8, 2022 at 9:07 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> Hi Michael,
>
> you only need the CRAN versions. You probably need a recent version of
> pillar, to
> create the name conflict with its dependency:
>
> install.packages("pillar")
> install.packages("cli")
> install.packages("RNeXML", type = "source")
>
> This will already give you:
> ** byte-compile and prepare package for lazy loading
> Found more than one class "tree" in cache; using the first, from namespace 'cli'
> Also defined by ?RNeXML?
>
> and then:
>
> library(RNeXML)
> unloadNamespace("RNeXML")
>
> Error in .mergeMethodsTable(generic, mtable, tt, attach) :
>   trying to get slot "defined" from an object of a basic class
> ("environment") with no slots
>
> This is macOS arm64, but looking at the CRAN check page, that should not matter.
>
> Let me know if this does not work, and the I'll create a Docker
> container or something more reproducible.
>
> Thanks,
> Gabor
>
> On Tue, Feb 8, 2022 at 5:53 PM Michael Lawrence
> <lawrence.michael at gene.com> wrote:
> >
> > Hi Gabor,
> >
> > Thanks for reporting this issue. Would you be able to help me
> > reproduce it? I'm guessing this depends on some combination of git
> > checkouts, so it would be helpful to know which.
> >
> > Michael
> >
> > On Tue, Feb 8, 2022 at 6:32 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> > >
> > > The RNeXML CRAN package currently has some check warnings, originating
> > > from an S4 class name conflict.
> > >
> > > RNeXML sets the S4 class "tree". A dependency of the package now
> > > depends on the cli package, which calls setOldClass() on an S3 "tree"
> > > class.
> > >
> > > This causes two potential issues. One is that RNeXML maybe ends up
> > > using cli's class internally, because this is what we see at install
> > > time:
> > >
> > > ** byte-compile and prepare package for lazy loading
> > > Found more than one class "tree" in cache; using the first, from namespace 'cli'
> > > Also defined by ?RNeXML?
> > >
> > > The second issue is an error when RNeXML is unloaded:
> > >
> > > ? unloadNamespace("RNeXML")
> > > Error in .mergeMethodsTable(generic, mtable, tt, attach) :
> > >   trying to get slot "defined" from an object of a basic class
> > > ("environment") with no slots
> > >
> > > This makes R CMD check fail as well.
> > >
> > > Is cli doing something wrong here? Or is this a bug in base R? Or is
> > > it a known limitation? If the latter, would it make sense for the
> > > RNeXML installation to fail instead of creating a broken package. (If
> > > it is a broken package at all.)
> > >
> > > Gabor
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
> >
> > --
> > Michael Lawrence
> > Principal Scientist, Director of Data Science and Statistical Computing
> > Genentech, A Member of the Roche Group
> > Office +1 (650) 225-7760
> > michafla at gene.com
> >
> > Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube



-- 
Michael Lawrence
Principal Scientist, Director of Data Science and Statistical Computing
Genentech, A Member of the Roche Group
Office +1 (650) 225-7760
michafla at gene.com

Join Genentech on LinkedIn | Twitter | Facebook | Instagram | YouTube


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Feb  9 11:36:00 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 9 Feb 2022 11:36:00 +0100
Subject: [Rd] Bug in rbind.data.frame?
In-Reply-To: <25079.40418.973003.506232@hornik.net>
References: <6244c3b8-0750-c675-9353-92fc78cfd02f@gmail.com>
 <90da4fd6-2e80-1b7b-4e36-5895138fa42b@gmail.com>
 <25079.40418.973003.506232@hornik.net>
Message-ID: <25091.39184.290122.386634@stat.math.ethz.ch>

>>>>> Kurt Hornik 
>>>>>     on Mon, 31 Jan 2022 09:29:22 +0100 writes:

>>>>> Duncan Murdoch writes:
    >> Okay, I spotted it.  This is intentional.  From ?rbind.data.frame:
    >> "The rbind data frame method first drops all zero-column and zero-row 
    >> arguments."

    > Hmm.  "As documented", but still surprising too me as well ...

    > We also say

    > For ?rbind? column names are taken from the first argument with
    > appropriate names: colnames for a matrix, or names for a vector of
    > length the number of columns of the result.

    > Of course, one could argue that "The rbind data frame method first drops
    > all zero-column and zero-row arguments." implies that "first argument
    > ..." should be taken after dropping, but then

    R> m <- matrix(0, 0, 2, dimnames = list(NULL, c("a", "b")))
    R> rbind(m, c(3, 4))
    >      a b
    > [1,] 3 4

    > which is not consistent with the data frame case.

(I agree and I think we should even consider to change
 rbind.data.frame() there  ... )

    > Btw, whereas

    R> rbind(c(1, 2), c(3, 4, 5))
    > Warning in rbind(c(1, 2), c(3, 4, 5)) :
    > number of columns of result is not a multiple of vector length (arg 1)
    >      [,1] [,2] [,3]
    > [1,]    1    2    1
    > [2,]    3    4    5

    > "as documented", 

    R> df <- data.frame(a = 1, b = 2)
    > rbind(df, c(3, 4, 5))
    >   a b
    > 1 1 2
    > 2 3 4

    > with is a bit worrying (and not as documented)?

Kurt and I have continued to talk about this,
and  few minutes ago, I've committed a change to R-devel's
rbind.data.frame()

which now gives

> rbind(data.frame(a = 1, b = 2), c(3, 4, 5))
  a b
1 1 2
2 3 4
Warning message:
In rbind(deparse.level, ...) :
  number of columns of result, 2, is not a multiple of vector length 3 of arg 2
> 

i.e., the same result, but *with* an informative warning,
analogously to the warning that has been produce "forever" in
the matrix case.

Martin


From net|kj@ @end|ng |rom gm@||@com  Thu Feb 10 16:53:04 2022
From: net|kj@ @end|ng |rom gm@||@com (=?UTF-8?Q?Jan_Net=C3=ADk?=)
Date: Thu, 10 Feb 2022 16:53:04 +0100
Subject: [Rd] rtools40 curl cannot handle -w variables
Message-ID: <CA+6hu7dGcmGHAGf4LwTb0M3ssgMXyEiph1DAUGLn1UcVNcC0KA@mail.gmail.com>

Hi,

I get different results when using Windows curl and curl shipped with
rtools40.

curl -Ls -o nul -w %{url_effective} --connect-timeout 30 --max-time 30
> https://mirror.ctan.org


returns %url_effective when in fact it shoud return the actual URL. With
Windows curl, it works just fine.

It could be due to old curl shipped with rtools40: curl 7.64.1
(x86_64-pc-msys) libcurl/7.64.1 OpenSSL/1.1.1k zlib/1.2.11, Windows
uses curl 7.79.1 (Windows) libcurl/7.79.1 Schannel.

It seems that system2() uses rtools40 curl and this renders many things
erroneous. Any thoughts on this?

Best regards
Jan

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Feb 10 17:54:25 2022
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 10 Feb 2022 17:54:25 +0100
Subject: [Rd] localeToCharset()
In-Reply-To: <143B435C-3E84-4B29-A06E-FDBFC487962C@uni-due.de>
References: <68F1ECBC-E65A-443B-928B-94889F183D03@uni-due.de>
 <20220131143201.10e183dc@Tarkus>
 <E5C802F0-1943-4CF4-AE64-9545207B285C@uni-due.de>
 <7d32a02d-e03f-11e6-0f92-9826bd4e96b6@gmail.com>
 <143B435C-3E84-4B29-A06E-FDBFC487962C@uni-due.de>
Message-ID: <c2dfedc7-325f-f2aa-1cef-ce7eeeb1a0ae@gmail.com>

Thanks to Ivan for the patch to support C.UTF-8 in localeToCharset, I've 
added it to R-devel.

On 1/31/22 14:08, Bl?tte, Andreas wrote:
> Dear Tomas,
>
> thanks a lot. I do understand the explanation of Simon - I was not aware of the standardization issue. My conclusion is that I should rely on another approach to detect the session charset, and your suggestions are my first option.
>
> My final thought: For users who do not know the POSIX standards and recent aberrations , a warning might be helpful, something such as:
> If (startsWith(locale, "C.")) warning (sprintf("%s is a non-standard locale", locale))

Dear Andreas, "C" and "POSIX" (and "") are the only two locales with 
standard names (defined by POSIX), so people necessarily have to rely on 
the non-standard ones and when new ones are introduced, such as in this 
case, we need to update localeToCharset() to support them. Thanks for 
your report.

Best
Tomas


>
> As far as I am concerned, I take away a lot from this discussion! Thank you!
>
> Kind regards
> Andreas
>   
>
> ?Am 31.01.22, 13:32 schrieb "Tomas Kalibera" <tomas.kalibera at gmail.com>:
>
>      Hi Andreas,
>
>      is there still any higher-level problem left you need to solve? Ideally
>      one wouldn't need to query what is the native encoding, but directly use
>      iconv() or indirectly other R functions to convert the data from/to the
>      native encoding. iconv() will find out internally what is the native
>      encoding (via data that is available also by l10n_info(), but with care
>      for differences between OSes).
>
>      Best
>      Tomas
>
>      On 1/31/22 12:38, Bl?tte, Andreas wrote:
>      > Dear Ivan,
>      >
>      > this is a very helpful explanation!  I think it is important to make output of localeToCharset() more predictable. My problem is essentially not to set the locale such that things will work after all. I think the problem is that you see unexpected results.  I guess I owe a suggestion how to improve the code, but your suggestion looks like a very good starting point.
>      >
>      > Andreas
>      >
>      > Am 31.01.22, 12:32 schrieb "Ivan Krylov" <krylov.r00t at gmail.com>:
>      >
>      >      On Mon, 31 Jan 2022 09:56:27 +0000
>      >      "Bl?tte, Andreas" <andreas.blaette at uni-due.de> wrote:
>      >
>      >      > After starting R with a re-defined locale (`env LC_CTYPE=en_US.UTF-8
>      >      > R`,  the output of `localeToCharset()` is:
>      >      > [1] "UTF-8"     "ISO8859-1"
>      >
>      >      > why ISO8859-1 might be a fallback option here?
>      >
>      >      ISO8859-1 seems to be offered because it covers the alphabet of
>      >      American English. Obviously, this doesn't guarantee that the guess is
>      >      correct. For example, I could symlink the ru_RU.KOI8-R locale on my
>      >      system to name it "ru_RU", and localeToCharset() would return
>      >      "ISO8859-5", not knowing the correct answer. ??????, anyone?
>      >
>      >      > Part of my analysis of the code of `localeToCharset()` is that it
>      >      > targets special scenarios on Windows and macOS, but not on Linux.
>      >
>      >      Well, it almost does the right thing. GNU/Linux locales are typically
>      >      named like <language>_<country>.<encoding>, and localeToCharset()
>      >      respects the <encoding> part, but only if the language and the country
>      >      are specified. A quick fix for that would be to add one final case:
>      >
>      >      Index: src/library/utils/R/iconv.R
>      >      ===================================================================
>      >      --- src/library/utils/R/iconv.R (revision 81596)
>      >      +++ src/library/utils/R/iconv.R (working copy)
>      >      @@ -135,6 +135,7 @@
>      >                   if(enc == "utf8") return(c("UTF-8", guess(ll)))
>      >                   else return(guess(ll))
>      >               }
>      >      +        if (enc == "utf8") return("UTF-8") # fallback for ???.UTF-8
>      >               return(NA_character_)
>      >           }
>      >       }
>      >
>      >      (Non-UTF-8 encodings on POSIX are handled above, in the if(nzchar(enc)
>      >      && enc != "utf8") branch.)
>      >
>      >      Maybe a better fix would be to restructure the code a bit, to always
>      >      take the encoding hint and then also try to guess if the locale looks
>      >      like it provides a language code.
>      >
>      >      --
>      >      Best regards,
>      >      Ivan
>      >
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>


From w||||@mwdun|@p @end|ng |rom gm@||@com  Thu Feb 10 17:59:43 2022
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Thu, 10 Feb 2022 08:59:43 -0800
Subject: [Rd] rtools40 curl cannot handle -w variables
In-Reply-To: <CA+6hu7dGcmGHAGf4LwTb0M3ssgMXyEiph1DAUGLn1UcVNcC0KA@mail.gmail.com>
References: <CA+6hu7dGcmGHAGf4LwTb0M3ssgMXyEiph1DAUGLn1UcVNcC0KA@mail.gmail.com>
Message-ID: <CAHqSRuQWKJx0s9FCuE=As5U81RUXFk6CNV4qHh2tD2adTPsjpg@mail.gmail.com>

If you wrap -w's argument in double quotes then it works in both versions
of curl.

C:\Users\willi>C:\WINDOWS\system32\curl.exe -w %{url_effective}
https://mirror.ctan.org | tail -1
  % Total    % Received % Xferd  Average Speed   Time    Time     Time
 Current
                                 Dload  Upload   Total   Spent    Left
 Speed
100   298  100   298    0     0    393      0 --:--:-- --:--:-- --:--:--
394
https://mirror.ctan.org/
C:\Users\willi>C:\WINDOWS\system32\curl.exe -w "%{url_effective}"
https://mirror.ctan.org | tail -1
  % Total    % Received % Xferd  Average Speed   Time    Time     Time
 Current
                                 Dload  Upload   Total   Spent    Left
 Speed
100   295  100   295    0     0    396      0 --:--:-- --:--:-- --:--:--
397
https://mirror.ctan.org/
C:\Users\willi>
C:\Users\willi>C:\rtools40\usr\bin\curl.exe -w %{url_effective}
https://mirror.ctan.org | tail -1
  % Total    % Received % Xferd  Average Speed   Time    Time     Time
 Current
                                 Dload  Upload   Total   Spent    Left
 Speed
100   309  100   309    0     0    390      0 --:--:-- --:--:-- --:--:--
389
%url_effective
C:\Users\willi>C:\rtools40\usr\bin\curl.exe -w "%{url_effective}"
https://mirror.ctan.org | tail -1
  % Total    % Received % Xferd  Average Speed   Time    Time     Time
 Current
                                 Dload  Upload   Total   Spent    Left
 Speed
100   310  100   310    0     0    405      0 --:--:-- --:--:-- --:--:--
405
https://mirror.ctan.org

-Bill


On Thu, Feb 10, 2022 at 7:53 AM Jan Net?k <netikja at gmail.com> wrote:

> Hi,
>
> I get different results when using Windows curl and curl shipped with
> rtools40.
>
> curl -Ls -o nul -w %{url_effective} --connect-timeout 30 --max-time 30
> > https://mirror.ctan.org
>
>
> returns %url_effective when in fact it shoud return the actual URL. With
> Windows curl, it works just fine.
>
> It could be due to old curl shipped with rtools40: curl 7.64.1
> (x86_64-pc-msys) libcurl/7.64.1 OpenSSL/1.1.1k zlib/1.2.11, Windows
> uses curl 7.79.1 (Windows) libcurl/7.79.1 Schannel.
>
> It seems that system2() uses rtools40 curl and this renders many things
> erroneous. Any thoughts on this?
>
> Best regards
> Jan
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Thu Feb 10 18:21:11 2022
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Thu, 10 Feb 2022 18:21:11 +0100
Subject: [Rd] license.db Bug Report (FSF field for CC 4.0 licenses)
In-Reply-To: <CAMigB8EVR0nSafhmTOhr+AdNNqYu8pTrT19xUcfULDhqg6BDFw@mail.gmail.com>
References: <CAMigB8EVR0nSafhmTOhr+AdNNqYu8pTrT19xUcfULDhqg6BDFw@mail.gmail.com>
Message-ID: <25093.18823.749178.299497@hornik.net>

>>>>> Trevor Davis writes:

Thanks: now updated in R-devel.

We dropped the obsolete and unused CC 2.0 and 3.0 entries, and
simplified the OSI and FSF tags to what is needed for the FOSS tag.

Best
-k

> Hi,
> I noticed some errors in the `FSF` fields in `share/licenses/license.db`
> for some Creative Commons licenses:

> `license.db` should be corrected to:

> ```
> Name: Creative Commons Attribution-ShareAlike 2.0 Generic License
> Abbrev: CC BY-SA 2.0
> FSF: free_and_GPLv3_incompatible

> Name: Creative Commons Attribution 4.0 International License
> Abbrev: CC BY 4.0
> FSF: free_and_GPLv3_compatible (
> https://www.gnu.org/licenses/license-list.html#ccby)

> Name: Creative Commons Attribution-ShareAlike 4.0 International License
> Abbrev: CC BY-SA 4.0
> FSF: free_and_GPLv3_compatible (
> https://www.gnu.org/licenses/license-list.html#ccbysa)
> ```

> * According to the current version of
> https://www.gnu.org/licenses/license-list.html the FSF considers the CC BY
> 4.0 license "compatible with all versions of the GNU GPL" and the CC BY-SA
> 4.0 license "one-way compatible with the GNU GPL version 3: this means you
> may license your modified versions of CC BY-SA 4.0 materials under GNU GPL
> version 3".
> * Note Creative Commons explicitly declared GPL-3 a "BY-SA Compatible
> License" for version 4.0 on October 8th, 2015:
> https://creativecommons.org/share-your-work/licensing-considerations/compatible-licenses
> * In a previous version of the FSF license website available on web
> archives (e.g.
> http://web.archive.org/web/20150124042152/https://www.gnu.org/licenses/license-list.html#OtherLicenses)
> the FSF explicitly considered the earlier CC BY 2.0 and CC BY-SA 2.0
> licenses incompatible with the GNU GPL licenses.

>   I'm unsure whether the URL for the `FSF` field for the CC BY-SA 2.0
> license should point to such a Web Archived link or simply be stripped as I
> suggested above.  However the current version of
> https://www.gnu.org/licenses/license-list.html#ccbysa no longer mentions
> the CC BY-SA 2.0 license nor its incompatibility with the GPL license and
> hence it should be updated in some fashion.

> Best,

> Trevor

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tim@t@yior m@iii@g oii hidde@eieph@@ts@co@uk  Thu Feb 10 23:51:28 2022
From: tim@t@yior m@iii@g oii hidde@eieph@@ts@co@uk (tim@t@yior m@iii@g oii hidde@eieph@@ts@co@uk)
Date: Thu, 10 Feb 2022 22:51:28 +0000 (GMT)
Subject: [Rd] Recent list2DF changes
Message-ID: <1376574877.27168.1644533488936@office.mailbox.org>

I noticed list2DF has recently been altered in R-devel to no longer replicate elements to the same length (instead giving an error). If useful, I *think* the following alternative would give the same performance improvements but maintain the current (4.1.2) recycling behaviour.

list2DF2 <- function (x = list(), nrow = NULL)
{
    stopifnot(is.list(x), is.null(nrow) || nrow >= 0L)
    if (n <- length(x)) {
        nn <- lengths(x)
        if (is.null(nrow))
            nrow <- max(nn, 0L)
        if (!all(nn==nrow))
            x <- lapply(x, rep_len, nrow)
    }
    else {
        if (is.null(nrow))
            nrow <- 0L
    }
    if (is.null(names(x)))
        names(x) <- character(n)
    class(x) <- "data.frame"
    attr(x, "row.names") <- .set_row_names(nrow)
    x
}

Tim


From d|pter|x@w@ng @end|ng |rom gm@||@com  Fri Feb 11 12:55:44 2022
From: d|pter|x@w@ng @end|ng |rom gm@||@com (Dipterix Wang)
Date: Fri, 11 Feb 2022 06:55:44 -0500
Subject: [Rd] str2lang throws error when the string is empty
Message-ID: <3D923E32-CF64-4AC5-BE66-61048A30A55B@gmail.com>

Hi, 

str2lang("") raises an error in current version. Would it be good if it returns a missing value expression? One use-case would be to build an expression that subsets an array:

# Expected: x[index1, ]
as.call(list(quote(`[`), quote(x), quote(index1), str2lang("")))

Right now I'm using the following, which is ugly
as.call(list(quote(`[`), quote(x), quote(index1), alist(x=)[[1]]))

Thanks,
- Dipterix
	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat Feb 12 10:58:05 2022
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 12 Feb 2022 10:58:05 +0100
Subject: [Rd] str2lang throws error when the string is empty
In-Reply-To: <3D923E32-CF64-4AC5-BE66-61048A30A55B@gmail.com>
References: <3D923E32-CF64-4AC5-BE66-61048A30A55B@gmail.com>
Message-ID: <25095.33965.301976.460342@stat.math.ethz.ch>

>>>>> Dipterix Wang 
>>>>>     on Fri, 11 Feb 2022 06:55:44 -0500 writes:

    > Hi,

    > str2lang("") raises an error in current version. 

on purpose.

    > Would it
    > be good if it returns a missing value expression? 

Well, others may be able to better explain why "the empty name"
aka your "missing value expression" or just "the missing"   is a
"dangerous" object  and ideally it would not be available at all
on the R level.  OTOH, it is available e.g. via alist(), maybe
slightly "less ugly" as    alist(.=)$.

but I don't think there are really good use cases.
(see below)

    > One use-case would be to build an expression that subsets an
    > array:

    > # Expected: x[index1, ] 
    > as.call(list(quote(`[`), quote(x), quote(index1), str2lang("")))

    > Right now I'm using the following, which is ugly
    > as.call(list(quote(`[`), quote(x), quote(index1), alist(x=)[[1]]))

Well, in such cases, much less ugly than both your version is to
use  substitute(),
here e.g.,

  > substitute(x[I,], list(I = quote(index1)))
  x[index1, ]
  >

    > Thanks, - Dipterix

You are welcome,
Martin



{Please, for next time do use  text/plain  e-mail : }

    > [[alternative HTML version deleted]]


